
lab06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000370c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  0800390c  0800390c  0000490c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003950  08003950  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003950  08003950  00004950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003958  08003958  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003958  08003958  00004958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800395c  0800395c  0000495c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003960  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000005c  080039bc  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  080039bc  000052ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8ec  00000000  00000000  0000508a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ea2  00000000  00000000  00013976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00015818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009eb  00000000  00000000  000164c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000028f6  00000000  00000000  00016eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010602  00000000  00000000  000197a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb341  00000000  00000000  00029dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001250ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039fc  00000000  00000000  00125130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00128b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	080038f4 	.word	0x080038f4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	080038f4 	.word	0x080038f4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
static void MX_TIM1_Init(void);
static void MX_USART3_UART_Init(void);
void displayNumber(uint32_t num);

/* Main function -------------------------------------------------------------*/
int main(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
    /* MCU Configuration--------------------------------------------------------*/
    HAL_Init();
 80005e4:	f000 fa67 	bl	8000ab6 <HAL_Init>
    SystemClock_Config();
 80005e8:	f000 f8ce 	bl	8000788 <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80005ec:	f000 f8b4 	bl	8000758 <MX_GPIO_Init>
    MX_TIM1_Init();
 80005f0:	f000 f836 	bl	8000660 <MX_TIM1_Init>
    MX_USART3_UART_Init();
 80005f4:	f000 f886 	bl	8000704 <MX_USART3_UART_Init>

    /* Start TIM1 in interrupt mode */
    HAL_TIM_Base_Start_IT(&htim1);
 80005f8:	4806      	ldr	r0, [pc, #24]	@ (8000614 <main+0x34>)
 80005fa:	f001 fb15 	bl	8001c28 <HAL_TIM_Base_Start_IT>

    /* Infinite loop */
    while (1) {
        displayNumber(count);  // Display the current count value
 80005fe:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <main+0x38>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f80a 	bl	800061c <displayNumber>
        HAL_Delay(400);        // Delay 400 ms
 8000608:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800060c:	f000 fab0 	bl	8000b70 <HAL_Delay>
        displayNumber(count);  // Display the current count value
 8000610:	bf00      	nop
 8000612:	e7f4      	b.n	80005fe <main+0x1e>
 8000614:	20000080 	.word	0x20000080
 8000618:	20000078 	.word	0x20000078

0800061c <displayNumber>:
    }
}

/* Display number via UART3 */
void displayNumber(uint32_t num) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
    char buffer[20];  // Buffer for number to string conversion
    sprintf(buffer, "%lu\r\n", num);
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	490b      	ldr	r1, [pc, #44]	@ (8000658 <displayNumber+0x3c>)
 800062c:	4618      	mov	r0, r3
 800062e:	f002 fcc1 	bl	8002fb4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff fe02 	bl	8000240 <strlen>
 800063c:	4603      	mov	r3, r0
 800063e:	b29a      	uxth	r2, r3
 8000640:	f107 010c 	add.w	r1, r7, #12
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	4804      	ldr	r0, [pc, #16]	@ (800065c <displayNumber+0x40>)
 800064a:	f001 ffa9 	bl	80025a0 <HAL_UART_Transmit>
}
 800064e:	bf00      	nop
 8000650:	3720      	adds	r7, #32
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	0800390c 	.word	0x0800390c
 800065c:	20000118 	.word	0x20000118

08000660 <MX_TIM1_Init>:

/* TIM1 Initialization Function */
static void MX_TIM1_Init(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000666:	f107 0310 	add.w	r3, r7, #16
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]

    htim1.Instance = TIM1;
 800067e:	4b1f      	ldr	r3, [pc, #124]	@ (80006fc <MX_TIM1_Init+0x9c>)
 8000680:	4a1f      	ldr	r2, [pc, #124]	@ (8000700 <MX_TIM1_Init+0xa0>)
 8000682:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 9999;  // Adjust prescaler according to your clock (assuming 100 MHz clock)
 8000684:	4b1d      	ldr	r3, [pc, #116]	@ (80006fc <MX_TIM1_Init+0x9c>)
 8000686:	f242 720f 	movw	r2, #9999	@ 0x270f
 800068a:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068c:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <MX_TIM1_Init+0x9c>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 99;       // Adjust period to get 1 ms (assuming 100 MHz clock)
 8000692:	4b1a      	ldr	r3, [pc, #104]	@ (80006fc <MX_TIM1_Init+0x9c>)
 8000694:	2263      	movs	r2, #99	@ 0x63
 8000696:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000698:	4b18      	ldr	r3, [pc, #96]	@ (80006fc <MX_TIM1_Init+0x9c>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 800069e:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <MX_TIM1_Init+0x9c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a4:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <MX_TIM1_Init+0x9c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80006aa:	4814      	ldr	r0, [pc, #80]	@ (80006fc <MX_TIM1_Init+0x9c>)
 80006ac:	f001 fa64 	bl	8001b78 <HAL_TIM_Base_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM1_Init+0x5a>
        Error_Handler();
 80006b6:	f000 f86e 	bl	8000796 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006be:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	4619      	mov	r1, r3
 80006c6:	480d      	ldr	r0, [pc, #52]	@ (80006fc <MX_TIM1_Init+0x9c>)
 80006c8:	f001 fc2e 	bl	8001f28 <HAL_TIM_ConfigClockSource>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM1_Init+0x76>
        Error_Handler();
 80006d2:	f000 f860 	bl	8000796 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	4619      	mov	r1, r3
 80006e2:	4806      	ldr	r0, [pc, #24]	@ (80006fc <MX_TIM1_Init+0x9c>)
 80006e4:	f001 fe62 	bl	80023ac <HAL_TIMEx_MasterConfigSynchronization>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM1_Init+0x92>
        Error_Handler();
 80006ee:	f000 f852 	bl	8000796 <Error_Handler>
    }
}
 80006f2:	bf00      	nop
 80006f4:	3720      	adds	r7, #32
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000080 	.word	0x20000080
 8000700:	40010000 	.word	0x40010000

08000704 <MX_USART3_UART_Init>:

/* USART3 Initialization Function */
static void MX_USART3_UART_Init(void) {
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
    huart3.Instance = USART3;
 8000708:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_USART3_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	@ (8000754 <MX_USART3_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 800070e:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <MX_USART3_UART_Init+0x4c>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_USART3_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_USART3_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	@ (8000750 <MX_USART3_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_USART3_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <MX_USART3_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_USART3_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart3) != HAL_OK) {
 800073a:	4805      	ldr	r0, [pc, #20]	@ (8000750 <MX_USART3_UART_Init+0x4c>)
 800073c:	f001 fee2 	bl	8002504 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART3_UART_Init+0x46>
        Error_Handler();
 8000746:	f000 f826 	bl	8000796 <Error_Handler>
    }
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000118 	.word	0x20000118
 8000754:	40004800 	.word	0x40004800

08000758 <MX_GPIO_Init>:

/* GPIO Initialization Function */
static void MX_GPIO_Init(void) {
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();  // Enable GPIO clock
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <MX_GPIO_Init+0x2c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a08      	ldr	r2, [pc, #32]	@ (8000784 <MX_GPIO_Init+0x2c>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <MX_GPIO_Init+0x2c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
    /* Additional GPIO initialization code if needed */
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800

08000788 <SystemClock_Config>:

/* System Clock Configuration */
void SystemClock_Config(void) {
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
    /* Your system clock configuration code */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <Error_Handler>:

/* Error Handler */
void Error_Handler(void) {
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
    while(1) {
 800079a:	bf00      	nop
 800079c:	e7fd      	b.n	800079a <Error_Handler+0x4>
	...

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <HAL_MspInit+0x44>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007aa:	4a0e      	ldr	r2, [pc, #56]	@ (80007e4 <HAL_MspInit+0x44>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b2:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <HAL_MspInit+0x44>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <HAL_MspInit+0x44>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c2:	4a08      	ldr	r2, [pc, #32]	@ (80007e4 <HAL_MspInit+0x44>)
 80007c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ca:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <HAL_MspInit+0x44>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80007d6:	2005      	movs	r0, #5
 80007d8:	f000 fabe 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40023800 	.word	0x40023800

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <NMI_Handler+0x4>

080007f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <HardFault_Handler+0x4>

080007f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <MemManage_Handler+0x4>

08000800 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <BusFault_Handler+0x4>

08000808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <UsageFault_Handler+0x4>

08000810 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083e:	f000 f977 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	/* Check if TIM1 update interrupt flag is set */
  if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_UPDATE)) {
 800084c:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <TIM1_UP_TIM10_IRQHandler+0x30>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	691b      	ldr	r3, [r3, #16]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	2b01      	cmp	r3, #1
 8000858:	d109      	bne.n	800086e <TIM1_UP_TIM10_IRQHandler+0x26>
	        /* Clear TIM1 update interrupt flag */
	  __HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);
 800085a:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <TIM1_UP_TIM10_IRQHandler+0x30>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f06f 0201 	mvn.w	r2, #1
 8000862:	611a      	str	r2, [r3, #16]

	        /* Increment the count variable */
	  count++;
 8000864:	4b05      	ldr	r3, [pc, #20]	@ (800087c <TIM1_UP_TIM10_IRQHandler+0x34>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	4a04      	ldr	r2, [pc, #16]	@ (800087c <TIM1_UP_TIM10_IRQHandler+0x34>)
 800086c:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800086e:	4802      	ldr	r0, [pc, #8]	@ (8000878 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8000870:	f001 fa52 	bl	8001d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000080 	.word	0x20000080
 800087c:	20000078 	.word	0x20000078

08000880 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000884:	4802      	ldr	r0, [pc, #8]	@ (8000890 <TIM2_IRQHandler+0x10>)
 8000886:	f001 fa47 	bl	8001d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200000cc 	.word	0x200000cc

08000894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800089c:	4a14      	ldr	r2, [pc, #80]	@ (80008f0 <_sbrk+0x5c>)
 800089e:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <_sbrk+0x60>)
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a8:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <_sbrk+0x64>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b0:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <_sbrk+0x64>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	@ (80008fc <_sbrk+0x68>)
 80008b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008b6:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <_sbrk+0x64>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d207      	bcs.n	80008d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c4:	f002 fb9e 	bl	8003004 <__errno>
 80008c8:	4603      	mov	r3, r0
 80008ca:	220c      	movs	r2, #12
 80008cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295
 80008d2:	e009      	b.n	80008e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d4:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <_sbrk+0x64>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008da:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <_sbrk+0x64>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	4a05      	ldr	r2, [pc, #20]	@ (80008f8 <_sbrk+0x64>)
 80008e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008e6:	68fb      	ldr	r3, [r7, #12]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20080000 	.word	0x20080000
 80008f4:	00000400 	.word	0x00000400
 80008f8:	2000007c 	.word	0x2000007c
 80008fc:	200002f0 	.word	0x200002f0

08000900 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <SystemInit+0x20>)
 8000906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800090a:	4a05      	ldr	r2, [pc, #20]	@ (8000920 <SystemInit+0x20>)
 800090c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000910:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM2_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a1a      	ldr	r2, [pc, #104]	@ (800099c <HAL_TIM_Base_MspInit+0x78>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d114      	bne.n	8000960 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <HAL_TIM_Base_MspInit+0x7c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093a:	4a19      	ldr	r2, [pc, #100]	@ (80009a0 <HAL_TIM_Base_MspInit+0x7c>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6453      	str	r3, [r2, #68]	@ 0x44
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <HAL_TIM_Base_MspInit+0x7c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2101      	movs	r1, #1
 8000952:	2019      	movs	r0, #25
 8000954:	f000 fa0b 	bl	8000d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000958:	2019      	movs	r0, #25
 800095a:	f000 fa24 	bl	8000da6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800095e:	e018      	b.n	8000992 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000968:	d113      	bne.n	8000992 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <HAL_TIM_Base_MspInit+0x7c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	4a0c      	ldr	r2, [pc, #48]	@ (80009a0 <HAL_TIM_Base_MspInit+0x7c>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6413      	str	r3, [r2, #64]	@ 0x40
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <HAL_TIM_Base_MspInit+0x7c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2102      	movs	r1, #2
 8000986:	201c      	movs	r0, #28
 8000988:	f000 f9f1 	bl	8000d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800098c:	201c      	movs	r0, #28
 800098e:	f000 fa0a 	bl	8000da6 <HAL_NVIC_EnableIRQ>
}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40010000 	.word	0x40010000
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_UART_MspInit>:
  /* USER CODE END USART3_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b0ae      	sub	sp, #184	@ 0xb8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2290      	movs	r2, #144	@ 0x90
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f002 fb15 	bl	8002ff4 <memset>
  if(uartHandle->Instance==USART3)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a22      	ldr	r2, [pc, #136]	@ (8000a58 <HAL_UART_MspInit+0xb4>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d13c      	bne.n	8000a4e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009d8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009da:	2300      	movs	r3, #0
 80009dc:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fca0 	bl	8001328 <HAL_RCCEx_PeriphCLKConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009ee:	f7ff fed2 	bl	8000796 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009f2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a5c <HAL_UART_MspInit+0xb8>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f6:	4a19      	ldr	r2, [pc, #100]	@ (8000a5c <HAL_UART_MspInit+0xb8>)
 80009f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fe:	4b17      	ldr	r3, [pc, #92]	@ (8000a5c <HAL_UART_MspInit+0xb8>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0a:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <HAL_UART_MspInit+0xb8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a13      	ldr	r2, [pc, #76]	@ (8000a5c <HAL_UART_MspInit+0xb8>)
 8000a10:	f043 0308 	orr.w	r3, r3, #8
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <HAL_UART_MspInit+0xb8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0308 	and.w	r3, r3, #8
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a22:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a3c:	2307      	movs	r3, #7
 8000a3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a42:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a46:	4619      	mov	r1, r3
 8000a48:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <HAL_UART_MspInit+0xbc>)
 8000a4a:	f000 f9c7 	bl	8000ddc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000a4e:	bf00      	nop
 8000a50:	37b8      	adds	r7, #184	@ 0xb8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40004800 	.word	0x40004800
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020c00 	.word	0x40020c00

08000a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a68:	f7ff ff4a 	bl	8000900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a6c:	480c      	ldr	r0, [pc, #48]	@ (8000aa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a6e:	490d      	ldr	r1, [pc, #52]	@ (8000aa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a70:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a0a      	ldr	r2, [pc, #40]	@ (8000aac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a84:	4c0a      	ldr	r4, [pc, #40]	@ (8000ab0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a92:	f002 fabd 	bl	8003010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a96:	f7ff fda3 	bl	80005e0 <main>
  bx  lr    
 8000a9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a9c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000aa8:	08003960 	.word	0x08003960
  ldr r2, =_sbss
 8000aac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ab0:	200002ec 	.word	0x200002ec

08000ab4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab4:	e7fe      	b.n	8000ab4 <ADC_IRQHandler>

08000ab6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aba:	2003      	movs	r0, #3
 8000abc:	f000 f94c 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f000 f805 	bl	8000ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac6:	f7ff fe6b 	bl	80007a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad8:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <HAL_InitTick+0x54>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <HAL_InitTick+0x58>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f967 	bl	8000dc2 <HAL_SYSTICK_Config>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e00e      	b.n	8000b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b0f      	cmp	r3, #15
 8000b02:	d80a      	bhi.n	8000b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b04:	2200      	movs	r2, #0
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	f000 f92f 	bl	8000d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b10:	4a06      	ldr	r2, [pc, #24]	@ (8000b2c <HAL_InitTick+0x5c>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e000      	b.n	8000b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000000 	.word	0x20000000
 8000b28:	20000008 	.word	0x20000008
 8000b2c:	20000004 	.word	0x20000004

08000b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <HAL_IncTick+0x20>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_IncTick+0x24>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	4a04      	ldr	r2, [pc, #16]	@ (8000b54 <HAL_IncTick+0x24>)
 8000b42:	6013      	str	r3, [r2, #0]
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000008 	.word	0x20000008
 8000b54:	200001a0 	.word	0x200001a0

08000b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	@ (8000b6c <HAL_GetTick+0x14>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	200001a0 	.word	0x200001a0

08000b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b78:	f7ff ffee 	bl	8000b58 <HAL_GetTick>
 8000b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b88:	d005      	beq.n	8000b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <HAL_Delay+0x44>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4413      	add	r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b96:	bf00      	nop
 8000b98:	f7ff ffde 	bl	8000b58 <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d8f7      	bhi.n	8000b98 <HAL_Delay+0x28>
  {
  }
}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	4313      	orrs	r3, r2
 8000be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be6:	4a04      	ldr	r2, [pc, #16]	@ (8000bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	60d3      	str	r3, [r2, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00
 8000bfc:	05fa0000 	.word	0x05fa0000

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0b      	blt.n	8000c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f003 021f 	and.w	r2, r3, #31
 8000c34:	4907      	ldr	r1, [pc, #28]	@ (8000c54 <__NVIC_EnableIRQ+0x38>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	095b      	lsrs	r3, r3, #5
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	@ (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	@ (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	@ 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	@ 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d24:	d301      	bcc.n	8000d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00f      	b.n	8000d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <SysTick_Config+0x40>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d32:	210f      	movs	r1, #15
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f7ff ff8e 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3c:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <SysTick_Config+0x40>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d42:	4b04      	ldr	r3, [pc, #16]	@ (8000d54 <SysTick_Config+0x40>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff29 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d80:	f7ff ff3e 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f7ff ff8e 	bl	8000cac <NVIC_EncodePriority>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff5d 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff31 	bl	8000c1c <__NVIC_EnableIRQ>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ffa2 	bl	8000d14 <SysTick_Config>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	@ 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
 8000dfa:	e175      	b.n	80010e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	f040 8164 	bne.w	80010e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d005      	beq.n	8000e32 <HAL_GPIO_Init+0x56>
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d130      	bne.n	8000e94 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e68:	2201      	movs	r2, #1
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	091b      	lsrs	r3, r3, #4
 8000e7e:	f003 0201 	and.w	r2, r3, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	d017      	beq.n	8000ed0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d123      	bne.n	8000f24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	08da      	lsrs	r2, r3, #3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3208      	adds	r2, #8
 8000ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	f003 0307 	and.w	r3, r3, #7
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	220f      	movs	r2, #15
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	691a      	ldr	r2, [r3, #16]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	08da      	lsrs	r2, r3, #3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3208      	adds	r2, #8
 8000f1e:	69b9      	ldr	r1, [r7, #24]
 8000f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0203 	and.w	r2, r3, #3
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 80be 	beq.w	80010e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	4b66      	ldr	r3, [pc, #408]	@ (8001100 <HAL_GPIO_Init+0x324>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6a:	4a65      	ldr	r2, [pc, #404]	@ (8001100 <HAL_GPIO_Init+0x324>)
 8000f6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f72:	4b63      	ldr	r3, [pc, #396]	@ (8001100 <HAL_GPIO_Init+0x324>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f7e:	4a61      	ldr	r2, [pc, #388]	@ (8001104 <HAL_GPIO_Init+0x328>)
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3302      	adds	r3, #2
 8000f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	220f      	movs	r2, #15
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a58      	ldr	r2, [pc, #352]	@ (8001108 <HAL_GPIO_Init+0x32c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d037      	beq.n	800101a <HAL_GPIO_Init+0x23e>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a57      	ldr	r2, [pc, #348]	@ (800110c <HAL_GPIO_Init+0x330>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d031      	beq.n	8001016 <HAL_GPIO_Init+0x23a>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a56      	ldr	r2, [pc, #344]	@ (8001110 <HAL_GPIO_Init+0x334>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d02b      	beq.n	8001012 <HAL_GPIO_Init+0x236>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a55      	ldr	r2, [pc, #340]	@ (8001114 <HAL_GPIO_Init+0x338>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d025      	beq.n	800100e <HAL_GPIO_Init+0x232>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a54      	ldr	r2, [pc, #336]	@ (8001118 <HAL_GPIO_Init+0x33c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d01f      	beq.n	800100a <HAL_GPIO_Init+0x22e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a53      	ldr	r2, [pc, #332]	@ (800111c <HAL_GPIO_Init+0x340>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d019      	beq.n	8001006 <HAL_GPIO_Init+0x22a>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a52      	ldr	r2, [pc, #328]	@ (8001120 <HAL_GPIO_Init+0x344>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d013      	beq.n	8001002 <HAL_GPIO_Init+0x226>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a51      	ldr	r2, [pc, #324]	@ (8001124 <HAL_GPIO_Init+0x348>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d00d      	beq.n	8000ffe <HAL_GPIO_Init+0x222>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a50      	ldr	r2, [pc, #320]	@ (8001128 <HAL_GPIO_Init+0x34c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d007      	beq.n	8000ffa <HAL_GPIO_Init+0x21e>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4f      	ldr	r2, [pc, #316]	@ (800112c <HAL_GPIO_Init+0x350>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d101      	bne.n	8000ff6 <HAL_GPIO_Init+0x21a>
 8000ff2:	2309      	movs	r3, #9
 8000ff4:	e012      	b.n	800101c <HAL_GPIO_Init+0x240>
 8000ff6:	230a      	movs	r3, #10
 8000ff8:	e010      	b.n	800101c <HAL_GPIO_Init+0x240>
 8000ffa:	2308      	movs	r3, #8
 8000ffc:	e00e      	b.n	800101c <HAL_GPIO_Init+0x240>
 8000ffe:	2307      	movs	r3, #7
 8001000:	e00c      	b.n	800101c <HAL_GPIO_Init+0x240>
 8001002:	2306      	movs	r3, #6
 8001004:	e00a      	b.n	800101c <HAL_GPIO_Init+0x240>
 8001006:	2305      	movs	r3, #5
 8001008:	e008      	b.n	800101c <HAL_GPIO_Init+0x240>
 800100a:	2304      	movs	r3, #4
 800100c:	e006      	b.n	800101c <HAL_GPIO_Init+0x240>
 800100e:	2303      	movs	r3, #3
 8001010:	e004      	b.n	800101c <HAL_GPIO_Init+0x240>
 8001012:	2302      	movs	r3, #2
 8001014:	e002      	b.n	800101c <HAL_GPIO_Init+0x240>
 8001016:	2301      	movs	r3, #1
 8001018:	e000      	b.n	800101c <HAL_GPIO_Init+0x240>
 800101a:	2300      	movs	r3, #0
 800101c:	69fa      	ldr	r2, [r7, #28]
 800101e:	f002 0203 	and.w	r2, r2, #3
 8001022:	0092      	lsls	r2, r2, #2
 8001024:	4093      	lsls	r3, r2
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800102c:	4935      	ldr	r1, [pc, #212]	@ (8001104 <HAL_GPIO_Init+0x328>)
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	089b      	lsrs	r3, r3, #2
 8001032:	3302      	adds	r3, #2
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800103a:	4b3d      	ldr	r3, [pc, #244]	@ (8001130 <HAL_GPIO_Init+0x354>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800105e:	4a34      	ldr	r2, [pc, #208]	@ (8001130 <HAL_GPIO_Init+0x354>)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001064:	4b32      	ldr	r3, [pc, #200]	@ (8001130 <HAL_GPIO_Init+0x354>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001088:	4a29      	ldr	r2, [pc, #164]	@ (8001130 <HAL_GPIO_Init+0x354>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800108e:	4b28      	ldr	r3, [pc, #160]	@ (8001130 <HAL_GPIO_Init+0x354>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001130 <HAL_GPIO_Init+0x354>)
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001130 <HAL_GPIO_Init+0x354>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010dc:	4a14      	ldr	r2, [pc, #80]	@ (8001130 <HAL_GPIO_Init+0x354>)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3301      	adds	r3, #1
 80010e6:	61fb      	str	r3, [r7, #28]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	2b0f      	cmp	r3, #15
 80010ec:	f67f ae86 	bls.w	8000dfc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3724      	adds	r7, #36	@ 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	40013800 	.word	0x40013800
 8001108:	40020000 	.word	0x40020000
 800110c:	40020400 	.word	0x40020400
 8001110:	40020800 	.word	0x40020800
 8001114:	40020c00 	.word	0x40020c00
 8001118:	40021000 	.word	0x40021000
 800111c:	40021400 	.word	0x40021400
 8001120:	40021800 	.word	0x40021800
 8001124:	40021c00 	.word	0x40021c00
 8001128:	40022000 	.word	0x40022000
 800112c:	40022400 	.word	0x40022400
 8001130:	40013c00 	.word	0x40013c00

08001134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001138:	b090      	sub	sp, #64	@ 0x40
 800113a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001140:	2300      	movs	r3, #0
 8001142:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001144:	2300      	movs	r3, #0
 8001146:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800114c:	4b59      	ldr	r3, [pc, #356]	@ (80012b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 030c 	and.w	r3, r3, #12
 8001154:	2b08      	cmp	r3, #8
 8001156:	d00d      	beq.n	8001174 <HAL_RCC_GetSysClockFreq+0x40>
 8001158:	2b08      	cmp	r3, #8
 800115a:	f200 80a1 	bhi.w	80012a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <HAL_RCC_GetSysClockFreq+0x34>
 8001162:	2b04      	cmp	r3, #4
 8001164:	d003      	beq.n	800116e <HAL_RCC_GetSysClockFreq+0x3a>
 8001166:	e09b      	b.n	80012a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001168:	4b53      	ldr	r3, [pc, #332]	@ (80012b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800116a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800116c:	e09b      	b.n	80012a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800116e:	4b53      	ldr	r3, [pc, #332]	@ (80012bc <HAL_RCC_GetSysClockFreq+0x188>)
 8001170:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001172:	e098      	b.n	80012a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001174:	4b4f      	ldr	r3, [pc, #316]	@ (80012b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800117c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800117e:	4b4d      	ldr	r3, [pc, #308]	@ (80012b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d028      	beq.n	80011dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800118a:	4b4a      	ldr	r3, [pc, #296]	@ (80012b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	099b      	lsrs	r3, r3, #6
 8001190:	2200      	movs	r2, #0
 8001192:	623b      	str	r3, [r7, #32]
 8001194:	627a      	str	r2, [r7, #36]	@ 0x24
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800119c:	2100      	movs	r1, #0
 800119e:	4b47      	ldr	r3, [pc, #284]	@ (80012bc <HAL_RCC_GetSysClockFreq+0x188>)
 80011a0:	fb03 f201 	mul.w	r2, r3, r1
 80011a4:	2300      	movs	r3, #0
 80011a6:	fb00 f303 	mul.w	r3, r0, r3
 80011aa:	4413      	add	r3, r2
 80011ac:	4a43      	ldr	r2, [pc, #268]	@ (80012bc <HAL_RCC_GetSysClockFreq+0x188>)
 80011ae:	fba0 1202 	umull	r1, r2, r0, r2
 80011b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80011b4:	460a      	mov	r2, r1
 80011b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80011b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011ba:	4413      	add	r3, r2
 80011bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011c0:	2200      	movs	r2, #0
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	61fa      	str	r2, [r7, #28]
 80011c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80011ce:	f7ff f88f 	bl	80002f0 <__aeabi_uldivmod>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4613      	mov	r3, r2
 80011d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011da:	e053      	b.n	8001284 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011dc:	4b35      	ldr	r3, [pc, #212]	@ (80012b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	099b      	lsrs	r3, r3, #6
 80011e2:	2200      	movs	r2, #0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	617a      	str	r2, [r7, #20]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80011ee:	f04f 0b00 	mov.w	fp, #0
 80011f2:	4652      	mov	r2, sl
 80011f4:	465b      	mov	r3, fp
 80011f6:	f04f 0000 	mov.w	r0, #0
 80011fa:	f04f 0100 	mov.w	r1, #0
 80011fe:	0159      	lsls	r1, r3, #5
 8001200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001204:	0150      	lsls	r0, r2, #5
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	ebb2 080a 	subs.w	r8, r2, sl
 800120e:	eb63 090b 	sbc.w	r9, r3, fp
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	f04f 0300 	mov.w	r3, #0
 800121a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800121e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001222:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001226:	ebb2 0408 	subs.w	r4, r2, r8
 800122a:	eb63 0509 	sbc.w	r5, r3, r9
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	00eb      	lsls	r3, r5, #3
 8001238:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800123c:	00e2      	lsls	r2, r4, #3
 800123e:	4614      	mov	r4, r2
 8001240:	461d      	mov	r5, r3
 8001242:	eb14 030a 	adds.w	r3, r4, sl
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	eb45 030b 	adc.w	r3, r5, fp
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	e9d7 4500 	ldrd	r4, r5, [r7]
 800125a:	4629      	mov	r1, r5
 800125c:	028b      	lsls	r3, r1, #10
 800125e:	4621      	mov	r1, r4
 8001260:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001264:	4621      	mov	r1, r4
 8001266:	028a      	lsls	r2, r1, #10
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800126e:	2200      	movs	r2, #0
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	60fa      	str	r2, [r7, #12]
 8001274:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001278:	f7ff f83a 	bl	80002f0 <__aeabi_uldivmod>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4613      	mov	r3, r2
 8001282:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001284:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	0c1b      	lsrs	r3, r3, #16
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	3301      	adds	r3, #1
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001294:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001298:	fbb2 f3f3 	udiv	r3, r2, r3
 800129c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800129e:	e002      	b.n	80012a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80012a0:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80012a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80012a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3740      	adds	r7, #64	@ 0x40
 80012ac:	46bd      	mov	sp, r7
 80012ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800
 80012b8:	00f42400 	.word	0x00f42400
 80012bc:	017d7840 	.word	0x017d7840

080012c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012c4:	4b03      	ldr	r3, [pc, #12]	@ (80012d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000000 	.word	0x20000000

080012d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012dc:	f7ff fff0 	bl	80012c0 <HAL_RCC_GetHCLKFreq>
 80012e0:	4602      	mov	r2, r0
 80012e2:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	0a9b      	lsrs	r3, r3, #10
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	4903      	ldr	r1, [pc, #12]	@ (80012fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80012ee:	5ccb      	ldrb	r3, [r1, r3]
 80012f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	08003914 	.word	0x08003914

08001300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001304:	f7ff ffdc 	bl	80012c0 <HAL_RCC_GetHCLKFreq>
 8001308:	4602      	mov	r2, r0
 800130a:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <HAL_RCC_GetPCLK2Freq+0x20>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	0b5b      	lsrs	r3, r3, #13
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	4903      	ldr	r1, [pc, #12]	@ (8001324 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001316:	5ccb      	ldrb	r3, [r1, r3]
 8001318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800131c:	4618      	mov	r0, r3
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	08003914 	.word	0x08003914

08001328 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	d012      	beq.n	8001376 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001350:	4b69      	ldr	r3, [pc, #420]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	4a68      	ldr	r2, [pc, #416]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001356:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800135a:	6093      	str	r3, [r2, #8]
 800135c:	4b66      	ldr	r3, [pc, #408]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001364:	4964      	ldr	r1, [pc, #400]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001366:	4313      	orrs	r3, r2
 8001368:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001372:	2301      	movs	r3, #1
 8001374:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d017      	beq.n	80013b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001382:	4b5d      	ldr	r3, [pc, #372]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001384:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001388:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001390:	4959      	ldr	r1, [pc, #356]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001392:	4313      	orrs	r3, r2
 8001394:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800139c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80013a0:	d101      	bne.n	80013a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80013a2:	2301      	movs	r3, #1
 80013a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d017      	beq.n	80013ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80013be:	4b4e      	ldr	r3, [pc, #312]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80013c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013cc:	494a      	ldr	r1, [pc, #296]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013dc:	d101      	bne.n	80013e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80013de:	2301      	movs	r3, #1
 80013e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80013ea:	2301      	movs	r3, #1
 80013ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80013fa:	2301      	movs	r3, #1
 80013fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0320 	and.w	r3, r3, #32
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 808b 	beq.w	8001522 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800140c:	4b3a      	ldr	r3, [pc, #232]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001410:	4a39      	ldr	r2, [pc, #228]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001412:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001416:	6413      	str	r3, [r2, #64]	@ 0x40
 8001418:	4b37      	ldr	r3, [pc, #220]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001424:	4b35      	ldr	r3, [pc, #212]	@ (80014fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a34      	ldr	r2, [pc, #208]	@ (80014fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800142a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800142e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001430:	f7ff fb92 	bl	8000b58 <HAL_GetTick>
 8001434:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001438:	f7ff fb8e 	bl	8000b58 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b64      	cmp	r3, #100	@ 0x64
 8001444:	d901      	bls.n	800144a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e38f      	b.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800144a:	4b2c      	ldr	r3, [pc, #176]	@ (80014fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001456:	4b28      	ldr	r3, [pc, #160]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800145a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800145e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d035      	beq.n	80014d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	429a      	cmp	r2, r3
 8001472:	d02e      	beq.n	80014d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001474:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001478:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800147c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800147e:	4b1e      	ldr	r3, [pc, #120]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001482:	4a1d      	ldr	r2, [pc, #116]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001488:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800148a:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800148c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800148e:	4a1a      	ldr	r2, [pc, #104]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001490:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001494:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001496:	4a18      	ldr	r2, [pc, #96]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800149c:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800149e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d114      	bne.n	80014d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff fb56 	bl	8000b58 <HAL_GetTick>
 80014ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ae:	e00a      	b.n	80014c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b0:	f7ff fb52 	bl	8000b58 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014be:	4293      	cmp	r3, r2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e351      	b.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c6:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0ee      	beq.n	80014b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80014da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80014de:	d111      	bne.n	8001504 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80014e0:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014ec:	4b04      	ldr	r3, [pc, #16]	@ (8001500 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80014ee:	400b      	ands	r3, r1
 80014f0:	4901      	ldr	r1, [pc, #4]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	608b      	str	r3, [r1, #8]
 80014f6:	e00b      	b.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40007000 	.word	0x40007000
 8001500:	0ffffcff 	.word	0x0ffffcff
 8001504:	4bac      	ldr	r3, [pc, #688]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	4aab      	ldr	r2, [pc, #684]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800150a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800150e:	6093      	str	r3, [r2, #8]
 8001510:	4ba9      	ldr	r3, [pc, #676]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001512:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800151c:	49a6      	ldr	r1, [pc, #664]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800151e:	4313      	orrs	r3, r2
 8001520:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	2b00      	cmp	r3, #0
 800152c:	d010      	beq.n	8001550 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800152e:	4ba2      	ldr	r3, [pc, #648]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001530:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001534:	4aa0      	ldr	r2, [pc, #640]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001536:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800153a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800153e:	4b9e      	ldr	r3, [pc, #632]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001540:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001548:	499b      	ldr	r1, [pc, #620]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800154a:	4313      	orrs	r3, r2
 800154c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00a      	beq.n	8001572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800155c:	4b96      	ldr	r3, [pc, #600]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800155e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001562:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800156a:	4993      	ldr	r1, [pc, #588]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800156c:	4313      	orrs	r3, r2
 800156e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00a      	beq.n	8001594 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800157e:	4b8e      	ldr	r3, [pc, #568]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001584:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800158c:	498a      	ldr	r1, [pc, #552]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800158e:	4313      	orrs	r3, r2
 8001590:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00a      	beq.n	80015b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80015a0:	4b85      	ldr	r3, [pc, #532]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80015a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015ae:	4982      	ldr	r1, [pc, #520]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00a      	beq.n	80015d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80015c2:	4b7d      	ldr	r3, [pc, #500]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80015c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015c8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d0:	4979      	ldr	r1, [pc, #484]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00a      	beq.n	80015fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80015e4:	4b74      	ldr	r3, [pc, #464]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80015e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015ea:	f023 0203 	bic.w	r2, r3, #3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f2:	4971      	ldr	r1, [pc, #452]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00a      	beq.n	800161c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001606:	4b6c      	ldr	r3, [pc, #432]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800160c:	f023 020c 	bic.w	r2, r3, #12
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001614:	4968      	ldr	r1, [pc, #416]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001616:	4313      	orrs	r3, r2
 8001618:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00a      	beq.n	800163e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001628:	4b63      	ldr	r3, [pc, #396]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800162a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800162e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001636:	4960      	ldr	r1, [pc, #384]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001638:	4313      	orrs	r3, r2
 800163a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00a      	beq.n	8001660 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800164a:	4b5b      	ldr	r3, [pc, #364]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800164c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001650:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001658:	4957      	ldr	r1, [pc, #348]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800165a:	4313      	orrs	r3, r2
 800165c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00a      	beq.n	8001682 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800166c:	4b52      	ldr	r3, [pc, #328]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800166e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001672:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800167a:	494f      	ldr	r1, [pc, #316]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800167c:	4313      	orrs	r3, r2
 800167e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00a      	beq.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800168e:	4b4a      	ldr	r3, [pc, #296]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001694:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169c:	4946      	ldr	r1, [pc, #280]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00a      	beq.n	80016c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80016b0:	4b41      	ldr	r3, [pc, #260]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80016b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016b6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016be:	493e      	ldr	r1, [pc, #248]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00a      	beq.n	80016e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80016d2:	4b39      	ldr	r3, [pc, #228]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80016d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016e0:	4935      	ldr	r1, [pc, #212]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00a      	beq.n	800170a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80016f4:	4b30      	ldr	r3, [pc, #192]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80016f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016fa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001702:	492d      	ldr	r1, [pc, #180]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001704:	4313      	orrs	r3, r2
 8001706:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d011      	beq.n	800173a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001716:	4b28      	ldr	r3, [pc, #160]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800171c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001724:	4924      	ldr	r1, [pc, #144]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001726:	4313      	orrs	r3, r2
 8001728:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001730:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001734:	d101      	bne.n	800173a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001736:	2301      	movs	r3, #1
 8001738:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001746:	2301      	movs	r3, #1
 8001748:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00a      	beq.n	800176c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001756:	4b18      	ldr	r3, [pc, #96]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001764:	4914      	ldr	r1, [pc, #80]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001766:	4313      	orrs	r3, r2
 8001768:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00b      	beq.n	8001790 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001778:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800177a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800177e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001788:	490b      	ldr	r1, [pc, #44]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800178a:	4313      	orrs	r3, r2
 800178c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00f      	beq.n	80017bc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800179e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017ac:	4902      	ldr	r1, [pc, #8]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80017b4:	e002      	b.n	80017bc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00b      	beq.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80017c8:	4b8a      	ldr	r3, [pc, #552]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80017ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ce:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017d8:	4986      	ldr	r1, [pc, #536]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00b      	beq.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80017ec:	4b81      	ldr	r3, [pc, #516]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80017ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017f2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017fc:	497d      	ldr	r1, [pc, #500]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d006      	beq.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 80d6 	beq.w	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001818:	4b76      	ldr	r3, [pc, #472]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a75      	ldr	r2, [pc, #468]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800181e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001822:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001824:	f7ff f998 	bl	8000b58 <HAL_GetTick>
 8001828:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800182a:	e008      	b.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800182c:	f7ff f994 	bl	8000b58 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b64      	cmp	r3, #100	@ 0x64
 8001838:	d901      	bls.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e195      	b.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800183e:	4b6d      	ldr	r3, [pc, #436]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d021      	beq.n	800189a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800185a:	2b00      	cmp	r3, #0
 800185c:	d11d      	bne.n	800189a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800185e:	4b65      	ldr	r3, [pc, #404]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001860:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001864:	0c1b      	lsrs	r3, r3, #16
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800186c:	4b61      	ldr	r3, [pc, #388]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800186e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001872:	0e1b      	lsrs	r3, r3, #24
 8001874:	f003 030f 	and.w	r3, r3, #15
 8001878:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	019a      	lsls	r2, r3, #6
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	041b      	lsls	r3, r3, #16
 8001884:	431a      	orrs	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	061b      	lsls	r3, r3, #24
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	071b      	lsls	r3, r3, #28
 8001892:	4958      	ldr	r1, [pc, #352]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001894:	4313      	orrs	r3, r2
 8001896:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d004      	beq.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80018ae:	d00a      	beq.n	80018c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d02e      	beq.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018c4:	d129      	bne.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80018c6:	4b4b      	ldr	r3, [pc, #300]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80018c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018cc:	0c1b      	lsrs	r3, r3, #16
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80018d4:	4b47      	ldr	r3, [pc, #284]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80018d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018da:	0f1b      	lsrs	r3, r3, #28
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	019a      	lsls	r2, r3, #6
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	041b      	lsls	r3, r3, #16
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	061b      	lsls	r3, r3, #24
 80018f4:	431a      	orrs	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	071b      	lsls	r3, r3, #28
 80018fa:	493e      	ldr	r1, [pc, #248]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001902:	4b3c      	ldr	r3, [pc, #240]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001904:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001908:	f023 021f 	bic.w	r2, r3, #31
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001910:	3b01      	subs	r3, #1
 8001912:	4938      	ldr	r1, [pc, #224]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001914:	4313      	orrs	r3, r2
 8001916:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d01d      	beq.n	8001962 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001926:	4b33      	ldr	r3, [pc, #204]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001928:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800192c:	0e1b      	lsrs	r3, r3, #24
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001934:	4b2f      	ldr	r3, [pc, #188]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001936:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800193a:	0f1b      	lsrs	r3, r3, #28
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	019a      	lsls	r2, r3, #6
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	041b      	lsls	r3, r3, #16
 800194e:	431a      	orrs	r2, r3
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	061b      	lsls	r3, r3, #24
 8001954:	431a      	orrs	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	071b      	lsls	r3, r3, #28
 800195a:	4926      	ldr	r1, [pc, #152]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800195c:	4313      	orrs	r3, r2
 800195e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d011      	beq.n	8001992 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	019a      	lsls	r2, r3, #6
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	041b      	lsls	r3, r3, #16
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	061b      	lsls	r3, r3, #24
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	071b      	lsls	r3, r3, #28
 800198a:	491a      	ldr	r1, [pc, #104]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800198c:	4313      	orrs	r3, r2
 800198e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001992:	4b18      	ldr	r3, [pc, #96]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a17      	ldr	r2, [pc, #92]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001998:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800199c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800199e:	f7ff f8db 	bl	8000b58 <HAL_GetTick>
 80019a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80019a6:	f7ff f8d7 	bl	8000b58 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b64      	cmp	r3, #100	@ 0x64
 80019b2:	d901      	bls.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e0d8      	b.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80019b8:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	f040 80ce 	bne.w	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80019cc:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a08      	ldr	r2, [pc, #32]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80019d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019d8:	f7ff f8be 	bl	8000b58 <HAL_GetTick>
 80019dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80019de:	e00b      	b.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80019e0:	f7ff f8ba 	bl	8000b58 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b64      	cmp	r3, #100	@ 0x64
 80019ec:	d904      	bls.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e0bb      	b.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80019f8:	4b5e      	ldr	r3, [pc, #376]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a04:	d0ec      	beq.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d009      	beq.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d02e      	beq.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d12a      	bne.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001a2e:	4b51      	ldr	r3, [pc, #324]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a34:	0c1b      	lsrs	r3, r3, #16
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a42:	0f1b      	lsrs	r3, r3, #28
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	019a      	lsls	r2, r3, #6
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	041b      	lsls	r3, r3, #16
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	061b      	lsls	r3, r3, #24
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	071b      	lsls	r3, r3, #28
 8001a62:	4944      	ldr	r1, [pc, #272]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001a6a:	4b42      	ldr	r3, [pc, #264]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a70:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	493d      	ldr	r1, [pc, #244]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d022      	beq.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001a94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001a98:	d11d      	bne.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001a9a:	4b36      	ldr	r3, [pc, #216]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aa0:	0e1b      	lsrs	r3, r3, #24
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001aa8:	4b32      	ldr	r3, [pc, #200]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aae:	0f1b      	lsrs	r3, r3, #28
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	019a      	lsls	r2, r3, #6
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	041b      	lsls	r3, r3, #16
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	061b      	lsls	r3, r3, #24
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	071b      	lsls	r3, r3, #28
 8001ace:	4929      	ldr	r1, [pc, #164]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d028      	beq.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001ae2:	4b24      	ldr	r3, [pc, #144]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ae8:	0e1b      	lsrs	r3, r3, #24
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001af0:	4b20      	ldr	r3, [pc, #128]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001af6:	0c1b      	lsrs	r3, r3, #16
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	019a      	lsls	r2, r3, #6
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	041b      	lsls	r3, r3, #16
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	061b      	lsls	r3, r3, #24
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	071b      	lsls	r3, r3, #28
 8001b16:	4917      	ldr	r1, [pc, #92]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001b1e:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b2c:	4911      	ldr	r1, [pc, #68]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001b34:	4b0f      	ldr	r3, [pc, #60]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0e      	ldr	r2, [pc, #56]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b40:	f7ff f80a 	bl	8000b58 <HAL_GetTick>
 8001b44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001b48:	f7ff f806 	bl	8000b58 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	@ 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e007      	b.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001b5a:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b66:	d1ef      	bne.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3720      	adds	r7, #32
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800

08001b78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e049      	b.n	8001c1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d106      	bne.n	8001ba4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7fe fec0 	bl	8000924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	f000 fab2 	bl	8002120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d001      	beq.n	8001c40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e054      	b.n	8001cea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2202      	movs	r2, #2
 8001c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a26      	ldr	r2, [pc, #152]	@ (8001cf8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d022      	beq.n	8001ca8 <HAL_TIM_Base_Start_IT+0x80>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c6a:	d01d      	beq.n	8001ca8 <HAL_TIM_Base_Start_IT+0x80>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a22      	ldr	r2, [pc, #136]	@ (8001cfc <HAL_TIM_Base_Start_IT+0xd4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d018      	beq.n	8001ca8 <HAL_TIM_Base_Start_IT+0x80>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a21      	ldr	r2, [pc, #132]	@ (8001d00 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d013      	beq.n	8001ca8 <HAL_TIM_Base_Start_IT+0x80>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a1f      	ldr	r2, [pc, #124]	@ (8001d04 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00e      	beq.n	8001ca8 <HAL_TIM_Base_Start_IT+0x80>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001d08 <HAL_TIM_Base_Start_IT+0xe0>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d009      	beq.n	8001ca8 <HAL_TIM_Base_Start_IT+0x80>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a1c      	ldr	r2, [pc, #112]	@ (8001d0c <HAL_TIM_Base_Start_IT+0xe4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d004      	beq.n	8001ca8 <HAL_TIM_Base_Start_IT+0x80>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8001d10 <HAL_TIM_Base_Start_IT+0xe8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d115      	bne.n	8001cd4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	4b19      	ldr	r3, [pc, #100]	@ (8001d14 <HAL_TIM_Base_Start_IT+0xec>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d015      	beq.n	8001ce6 <HAL_TIM_Base_Start_IT+0xbe>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cc0:	d011      	beq.n	8001ce6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0201 	orr.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd2:	e008      	b.n	8001ce6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0201 	orr.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	e000      	b.n	8001ce8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	40000400 	.word	0x40000400
 8001d00:	40000800 	.word	0x40000800
 8001d04:	40000c00 	.word	0x40000c00
 8001d08:	40010400 	.word	0x40010400
 8001d0c:	40014000 	.word	0x40014000
 8001d10:	40001800 	.word	0x40001800
 8001d14:	00010007 	.word	0x00010007

08001d18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d020      	beq.n	8001d7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01b      	beq.n	8001d7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0202 	mvn.w	r2, #2
 8001d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f9be 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 8001d68:	e005      	b.n	8001d76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f9b0 	bl	80020d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f9c1 	bl	80020f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d020      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d01b      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0204 	mvn.w	r2, #4
 8001d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f998 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 8001db4:	e005      	b.n	8001dc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f98a 	bl	80020d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f99b 	bl	80020f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d020      	beq.n	8001e14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d01b      	beq.n	8001e14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0208 	mvn.w	r2, #8
 8001de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2204      	movs	r2, #4
 8001dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f972 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 8001e00:	e005      	b.n	8001e0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f964 	bl	80020d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f975 	bl	80020f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d020      	beq.n	8001e60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f003 0310 	and.w	r3, r3, #16
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d01b      	beq.n	8001e60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0210 	mvn.w	r2, #16
 8001e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2208      	movs	r2, #8
 8001e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f94c 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 8001e4c:	e005      	b.n	8001e5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f93e 	bl	80020d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f94f 	bl	80020f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00c      	beq.n	8001e84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d007      	beq.n	8001e84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f06f 0201 	mvn.w	r2, #1
 8001e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f91c 	bl	80020bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d104      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00c      	beq.n	8001eb2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d007      	beq.n	8001eb2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 fb15 	bl	80024dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00c      	beq.n	8001ed6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d007      	beq.n	8001ed6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 fb0d 	bl	80024f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00c      	beq.n	8001efa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d007      	beq.n	8001efa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f909 	bl	800210c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00c      	beq.n	8001f1e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 0320 	and.w	r3, r3, #32
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f06f 0220 	mvn.w	r2, #32
 8001f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fad5 	bl	80024c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_TIM_ConfigClockSource+0x1c>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e0b4      	b.n	80020ae <HAL_TIM_ConfigClockSource+0x186>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	4b56      	ldr	r3, [pc, #344]	@ (80020b8 <HAL_TIM_ConfigClockSource+0x190>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f7c:	d03e      	beq.n	8001ffc <HAL_TIM_ConfigClockSource+0xd4>
 8001f7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f82:	f200 8087 	bhi.w	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001f86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f8a:	f000 8086 	beq.w	800209a <HAL_TIM_ConfigClockSource+0x172>
 8001f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f92:	d87f      	bhi.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001f94:	2b70      	cmp	r3, #112	@ 0x70
 8001f96:	d01a      	beq.n	8001fce <HAL_TIM_ConfigClockSource+0xa6>
 8001f98:	2b70      	cmp	r3, #112	@ 0x70
 8001f9a:	d87b      	bhi.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001f9c:	2b60      	cmp	r3, #96	@ 0x60
 8001f9e:	d050      	beq.n	8002042 <HAL_TIM_ConfigClockSource+0x11a>
 8001fa0:	2b60      	cmp	r3, #96	@ 0x60
 8001fa2:	d877      	bhi.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001fa4:	2b50      	cmp	r3, #80	@ 0x50
 8001fa6:	d03c      	beq.n	8002022 <HAL_TIM_ConfigClockSource+0xfa>
 8001fa8:	2b50      	cmp	r3, #80	@ 0x50
 8001faa:	d873      	bhi.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001fac:	2b40      	cmp	r3, #64	@ 0x40
 8001fae:	d058      	beq.n	8002062 <HAL_TIM_ConfigClockSource+0x13a>
 8001fb0:	2b40      	cmp	r3, #64	@ 0x40
 8001fb2:	d86f      	bhi.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001fb4:	2b30      	cmp	r3, #48	@ 0x30
 8001fb6:	d064      	beq.n	8002082 <HAL_TIM_ConfigClockSource+0x15a>
 8001fb8:	2b30      	cmp	r3, #48	@ 0x30
 8001fba:	d86b      	bhi.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001fbc:	2b20      	cmp	r3, #32
 8001fbe:	d060      	beq.n	8002082 <HAL_TIM_ConfigClockSource+0x15a>
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	d867      	bhi.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d05c      	beq.n	8002082 <HAL_TIM_ConfigClockSource+0x15a>
 8001fc8:	2b10      	cmp	r3, #16
 8001fca:	d05a      	beq.n	8002082 <HAL_TIM_ConfigClockSource+0x15a>
 8001fcc:	e062      	b.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fde:	f000 f9c5 	bl	800236c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001ff0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	609a      	str	r2, [r3, #8]
      break;
 8001ffa:	e04f      	b.n	800209c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800200c:	f000 f9ae 	bl	800236c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800201e:	609a      	str	r2, [r3, #8]
      break;
 8002020:	e03c      	b.n	800209c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800202e:	461a      	mov	r2, r3
 8002030:	f000 f922 	bl	8002278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2150      	movs	r1, #80	@ 0x50
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f97b 	bl	8002336 <TIM_ITRx_SetConfig>
      break;
 8002040:	e02c      	b.n	800209c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800204e:	461a      	mov	r2, r3
 8002050:	f000 f941 	bl	80022d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2160      	movs	r1, #96	@ 0x60
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f96b 	bl	8002336 <TIM_ITRx_SetConfig>
      break;
 8002060:	e01c      	b.n	800209c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800206e:	461a      	mov	r2, r3
 8002070:	f000 f902 	bl	8002278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2140      	movs	r1, #64	@ 0x40
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f95b 	bl	8002336 <TIM_ITRx_SetConfig>
      break;
 8002080:	e00c      	b.n	800209c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4619      	mov	r1, r3
 800208c:	4610      	mov	r0, r2
 800208e:	f000 f952 	bl	8002336 <TIM_ITRx_SetConfig>
      break;
 8002092:	e003      	b.n	800209c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
      break;
 8002098:	e000      	b.n	800209c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800209a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	fffeff88 	.word	0xfffeff88

080020bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a46      	ldr	r2, [pc, #280]	@ (800224c <TIM_Base_SetConfig+0x12c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d013      	beq.n	8002160 <TIM_Base_SetConfig+0x40>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800213e:	d00f      	beq.n	8002160 <TIM_Base_SetConfig+0x40>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a43      	ldr	r2, [pc, #268]	@ (8002250 <TIM_Base_SetConfig+0x130>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d00b      	beq.n	8002160 <TIM_Base_SetConfig+0x40>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a42      	ldr	r2, [pc, #264]	@ (8002254 <TIM_Base_SetConfig+0x134>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d007      	beq.n	8002160 <TIM_Base_SetConfig+0x40>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a41      	ldr	r2, [pc, #260]	@ (8002258 <TIM_Base_SetConfig+0x138>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d003      	beq.n	8002160 <TIM_Base_SetConfig+0x40>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a40      	ldr	r2, [pc, #256]	@ (800225c <TIM_Base_SetConfig+0x13c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d108      	bne.n	8002172 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4313      	orrs	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a35      	ldr	r2, [pc, #212]	@ (800224c <TIM_Base_SetConfig+0x12c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d02b      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002180:	d027      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a32      	ldr	r2, [pc, #200]	@ (8002250 <TIM_Base_SetConfig+0x130>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d023      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a31      	ldr	r2, [pc, #196]	@ (8002254 <TIM_Base_SetConfig+0x134>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d01f      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a30      	ldr	r2, [pc, #192]	@ (8002258 <TIM_Base_SetConfig+0x138>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d01b      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a2f      	ldr	r2, [pc, #188]	@ (800225c <TIM_Base_SetConfig+0x13c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d017      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002260 <TIM_Base_SetConfig+0x140>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d013      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a2d      	ldr	r2, [pc, #180]	@ (8002264 <TIM_Base_SetConfig+0x144>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00f      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002268 <TIM_Base_SetConfig+0x148>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00b      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2b      	ldr	r2, [pc, #172]	@ (800226c <TIM_Base_SetConfig+0x14c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d007      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002270 <TIM_Base_SetConfig+0x150>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d003      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a29      	ldr	r2, [pc, #164]	@ (8002274 <TIM_Base_SetConfig+0x154>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d108      	bne.n	80021e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a10      	ldr	r2, [pc, #64]	@ (800224c <TIM_Base_SetConfig+0x12c>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d003      	beq.n	8002218 <TIM_Base_SetConfig+0xf8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a12      	ldr	r2, [pc, #72]	@ (800225c <TIM_Base_SetConfig+0x13c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d103      	bne.n	8002220 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b01      	cmp	r3, #1
 8002230:	d105      	bne.n	800223e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f023 0201 	bic.w	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	611a      	str	r2, [r3, #16]
  }
}
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40010000 	.word	0x40010000
 8002250:	40000400 	.word	0x40000400
 8002254:	40000800 	.word	0x40000800
 8002258:	40000c00 	.word	0x40000c00
 800225c:	40010400 	.word	0x40010400
 8002260:	40014000 	.word	0x40014000
 8002264:	40014400 	.word	0x40014400
 8002268:	40014800 	.word	0x40014800
 800226c:	40001800 	.word	0x40001800
 8002270:	40001c00 	.word	0x40001c00
 8002274:	40002000 	.word	0x40002000

08002278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	f023 0201 	bic.w	r2, r3, #1
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f023 030a 	bic.w	r3, r3, #10
 80022b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	621a      	str	r2, [r3, #32]
}
 80022ca:	bf00      	nop
 80022cc:	371c      	adds	r7, #28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b087      	sub	sp, #28
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	f023 0210 	bic.w	r2, r3, #16
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002300:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	031b      	lsls	r3, r3, #12
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002312:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	4313      	orrs	r3, r2
 800231c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	621a      	str	r2, [r3, #32]
}
 800232a:	bf00      	nop
 800232c:	371c      	adds	r7, #28
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002336:	b480      	push	{r7}
 8002338:	b085      	sub	sp, #20
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800234c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4313      	orrs	r3, r2
 8002354:	f043 0307 	orr.w	r3, r3, #7
 8002358:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	609a      	str	r2, [r3, #8]
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002386:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	021a      	lsls	r2, r3, #8
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	431a      	orrs	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4313      	orrs	r3, r2
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	4313      	orrs	r3, r2
 8002398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	609a      	str	r2, [r3, #8]
}
 80023a0:	bf00      	nop
 80023a2:	371c      	adds	r7, #28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e06d      	b.n	80024a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a30      	ldr	r2, [pc, #192]	@ (80024ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d004      	beq.n	80023f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a2f      	ldr	r2, [pc, #188]	@ (80024b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d108      	bne.n	800240a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80023fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002410:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4313      	orrs	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a20      	ldr	r2, [pc, #128]	@ (80024ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d022      	beq.n	8002474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002436:	d01d      	beq.n	8002474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a1d      	ldr	r2, [pc, #116]	@ (80024b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d018      	beq.n	8002474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a1c      	ldr	r2, [pc, #112]	@ (80024b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d013      	beq.n	8002474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a1a      	ldr	r2, [pc, #104]	@ (80024bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00e      	beq.n	8002474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a15      	ldr	r2, [pc, #84]	@ (80024b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d009      	beq.n	8002474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a16      	ldr	r2, [pc, #88]	@ (80024c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d004      	beq.n	8002474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a15      	ldr	r2, [pc, #84]	@ (80024c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d10c      	bne.n	800248e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800247a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	4313      	orrs	r3, r2
 8002484:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	40010000 	.word	0x40010000
 80024b0:	40010400 	.word	0x40010400
 80024b4:	40000400 	.word	0x40000400
 80024b8:	40000800 	.word	0x40000800
 80024bc:	40000c00 	.word	0x40000c00
 80024c0:	40014000 	.word	0x40014000
 80024c4:	40001800 	.word	0x40001800

080024c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e040      	b.n	8002598 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe fa3c 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2224      	movs	r2, #36	@ 0x24
 8002530:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0201 	bic.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fb16 	bl	8002b7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f8af 	bl	80026b4 <UART_SetConfig>
 8002556:	4603      	mov	r3, r0
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e01b      	b.n	8002598 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800256e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800257e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 fb95 	bl	8002cc0 <UART_CheckIdleState>
 8002596:	4603      	mov	r3, r0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08a      	sub	sp, #40	@ 0x28
 80025a4:	af02      	add	r7, sp, #8
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	603b      	str	r3, [r7, #0]
 80025ac:	4613      	mov	r3, r2
 80025ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025b4:	2b20      	cmp	r3, #32
 80025b6:	d177      	bne.n	80026a8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <HAL_UART_Transmit+0x24>
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e070      	b.n	80026aa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2221      	movs	r2, #33	@ 0x21
 80025d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025d6:	f7fe fabf 	bl	8000b58 <HAL_GetTick>
 80025da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	88fa      	ldrh	r2, [r7, #6]
 80025e0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	88fa      	ldrh	r2, [r7, #6]
 80025e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025f4:	d108      	bne.n	8002608 <HAL_UART_Transmit+0x68>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d104      	bne.n	8002608 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	e003      	b.n	8002610 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800260c:	2300      	movs	r3, #0
 800260e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002610:	e02f      	b.n	8002672 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2200      	movs	r2, #0
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 fbf7 	bl	8002e10 <UART_WaitOnFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d004      	beq.n	8002632 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2220      	movs	r2, #32
 800262c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e03b      	b.n	80026aa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10b      	bne.n	8002650 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002646:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	3302      	adds	r3, #2
 800264c:	61bb      	str	r3, [r7, #24]
 800264e:	e007      	b.n	8002660 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	781a      	ldrb	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3301      	adds	r3, #1
 800265e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1c9      	bne.n	8002612 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2200      	movs	r2, #0
 8002686:	2140      	movs	r1, #64	@ 0x40
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 fbc1 	bl	8002e10 <UART_WaitOnFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d004      	beq.n	800269e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e005      	b.n	80026aa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2220      	movs	r2, #32
 80026a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	e000      	b.n	80026aa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80026a8:	2302      	movs	r3, #2
  }
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3720      	adds	r7, #32
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	4ba6      	ldr	r3, [pc, #664]	@ (8002978 <UART_SetConfig+0x2c4>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	6979      	ldr	r1, [r7, #20]
 80026e8:	430b      	orrs	r3, r1
 80026ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	4313      	orrs	r3, r2
 8002710:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	430a      	orrs	r2, r1
 8002724:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a94      	ldr	r2, [pc, #592]	@ (800297c <UART_SetConfig+0x2c8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d120      	bne.n	8002772 <UART_SetConfig+0xbe>
 8002730:	4b93      	ldr	r3, [pc, #588]	@ (8002980 <UART_SetConfig+0x2cc>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b03      	cmp	r3, #3
 800273c:	d816      	bhi.n	800276c <UART_SetConfig+0xb8>
 800273e:	a201      	add	r2, pc, #4	@ (adr r2, 8002744 <UART_SetConfig+0x90>)
 8002740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002744:	08002755 	.word	0x08002755
 8002748:	08002761 	.word	0x08002761
 800274c:	0800275b 	.word	0x0800275b
 8002750:	08002767 	.word	0x08002767
 8002754:	2301      	movs	r3, #1
 8002756:	77fb      	strb	r3, [r7, #31]
 8002758:	e150      	b.n	80029fc <UART_SetConfig+0x348>
 800275a:	2302      	movs	r3, #2
 800275c:	77fb      	strb	r3, [r7, #31]
 800275e:	e14d      	b.n	80029fc <UART_SetConfig+0x348>
 8002760:	2304      	movs	r3, #4
 8002762:	77fb      	strb	r3, [r7, #31]
 8002764:	e14a      	b.n	80029fc <UART_SetConfig+0x348>
 8002766:	2308      	movs	r3, #8
 8002768:	77fb      	strb	r3, [r7, #31]
 800276a:	e147      	b.n	80029fc <UART_SetConfig+0x348>
 800276c:	2310      	movs	r3, #16
 800276e:	77fb      	strb	r3, [r7, #31]
 8002770:	e144      	b.n	80029fc <UART_SetConfig+0x348>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a83      	ldr	r2, [pc, #524]	@ (8002984 <UART_SetConfig+0x2d0>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d132      	bne.n	80027e2 <UART_SetConfig+0x12e>
 800277c:	4b80      	ldr	r3, [pc, #512]	@ (8002980 <UART_SetConfig+0x2cc>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b0c      	cmp	r3, #12
 8002788:	d828      	bhi.n	80027dc <UART_SetConfig+0x128>
 800278a:	a201      	add	r2, pc, #4	@ (adr r2, 8002790 <UART_SetConfig+0xdc>)
 800278c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002790:	080027c5 	.word	0x080027c5
 8002794:	080027dd 	.word	0x080027dd
 8002798:	080027dd 	.word	0x080027dd
 800279c:	080027dd 	.word	0x080027dd
 80027a0:	080027d1 	.word	0x080027d1
 80027a4:	080027dd 	.word	0x080027dd
 80027a8:	080027dd 	.word	0x080027dd
 80027ac:	080027dd 	.word	0x080027dd
 80027b0:	080027cb 	.word	0x080027cb
 80027b4:	080027dd 	.word	0x080027dd
 80027b8:	080027dd 	.word	0x080027dd
 80027bc:	080027dd 	.word	0x080027dd
 80027c0:	080027d7 	.word	0x080027d7
 80027c4:	2300      	movs	r3, #0
 80027c6:	77fb      	strb	r3, [r7, #31]
 80027c8:	e118      	b.n	80029fc <UART_SetConfig+0x348>
 80027ca:	2302      	movs	r3, #2
 80027cc:	77fb      	strb	r3, [r7, #31]
 80027ce:	e115      	b.n	80029fc <UART_SetConfig+0x348>
 80027d0:	2304      	movs	r3, #4
 80027d2:	77fb      	strb	r3, [r7, #31]
 80027d4:	e112      	b.n	80029fc <UART_SetConfig+0x348>
 80027d6:	2308      	movs	r3, #8
 80027d8:	77fb      	strb	r3, [r7, #31]
 80027da:	e10f      	b.n	80029fc <UART_SetConfig+0x348>
 80027dc:	2310      	movs	r3, #16
 80027de:	77fb      	strb	r3, [r7, #31]
 80027e0:	e10c      	b.n	80029fc <UART_SetConfig+0x348>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a68      	ldr	r2, [pc, #416]	@ (8002988 <UART_SetConfig+0x2d4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d120      	bne.n	800282e <UART_SetConfig+0x17a>
 80027ec:	4b64      	ldr	r3, [pc, #400]	@ (8002980 <UART_SetConfig+0x2cc>)
 80027ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80027f6:	2b30      	cmp	r3, #48	@ 0x30
 80027f8:	d013      	beq.n	8002822 <UART_SetConfig+0x16e>
 80027fa:	2b30      	cmp	r3, #48	@ 0x30
 80027fc:	d814      	bhi.n	8002828 <UART_SetConfig+0x174>
 80027fe:	2b20      	cmp	r3, #32
 8002800:	d009      	beq.n	8002816 <UART_SetConfig+0x162>
 8002802:	2b20      	cmp	r3, #32
 8002804:	d810      	bhi.n	8002828 <UART_SetConfig+0x174>
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <UART_SetConfig+0x15c>
 800280a:	2b10      	cmp	r3, #16
 800280c:	d006      	beq.n	800281c <UART_SetConfig+0x168>
 800280e:	e00b      	b.n	8002828 <UART_SetConfig+0x174>
 8002810:	2300      	movs	r3, #0
 8002812:	77fb      	strb	r3, [r7, #31]
 8002814:	e0f2      	b.n	80029fc <UART_SetConfig+0x348>
 8002816:	2302      	movs	r3, #2
 8002818:	77fb      	strb	r3, [r7, #31]
 800281a:	e0ef      	b.n	80029fc <UART_SetConfig+0x348>
 800281c:	2304      	movs	r3, #4
 800281e:	77fb      	strb	r3, [r7, #31]
 8002820:	e0ec      	b.n	80029fc <UART_SetConfig+0x348>
 8002822:	2308      	movs	r3, #8
 8002824:	77fb      	strb	r3, [r7, #31]
 8002826:	e0e9      	b.n	80029fc <UART_SetConfig+0x348>
 8002828:	2310      	movs	r3, #16
 800282a:	77fb      	strb	r3, [r7, #31]
 800282c:	e0e6      	b.n	80029fc <UART_SetConfig+0x348>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a56      	ldr	r2, [pc, #344]	@ (800298c <UART_SetConfig+0x2d8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d120      	bne.n	800287a <UART_SetConfig+0x1c6>
 8002838:	4b51      	ldr	r3, [pc, #324]	@ (8002980 <UART_SetConfig+0x2cc>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002842:	2bc0      	cmp	r3, #192	@ 0xc0
 8002844:	d013      	beq.n	800286e <UART_SetConfig+0x1ba>
 8002846:	2bc0      	cmp	r3, #192	@ 0xc0
 8002848:	d814      	bhi.n	8002874 <UART_SetConfig+0x1c0>
 800284a:	2b80      	cmp	r3, #128	@ 0x80
 800284c:	d009      	beq.n	8002862 <UART_SetConfig+0x1ae>
 800284e:	2b80      	cmp	r3, #128	@ 0x80
 8002850:	d810      	bhi.n	8002874 <UART_SetConfig+0x1c0>
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <UART_SetConfig+0x1a8>
 8002856:	2b40      	cmp	r3, #64	@ 0x40
 8002858:	d006      	beq.n	8002868 <UART_SetConfig+0x1b4>
 800285a:	e00b      	b.n	8002874 <UART_SetConfig+0x1c0>
 800285c:	2300      	movs	r3, #0
 800285e:	77fb      	strb	r3, [r7, #31]
 8002860:	e0cc      	b.n	80029fc <UART_SetConfig+0x348>
 8002862:	2302      	movs	r3, #2
 8002864:	77fb      	strb	r3, [r7, #31]
 8002866:	e0c9      	b.n	80029fc <UART_SetConfig+0x348>
 8002868:	2304      	movs	r3, #4
 800286a:	77fb      	strb	r3, [r7, #31]
 800286c:	e0c6      	b.n	80029fc <UART_SetConfig+0x348>
 800286e:	2308      	movs	r3, #8
 8002870:	77fb      	strb	r3, [r7, #31]
 8002872:	e0c3      	b.n	80029fc <UART_SetConfig+0x348>
 8002874:	2310      	movs	r3, #16
 8002876:	77fb      	strb	r3, [r7, #31]
 8002878:	e0c0      	b.n	80029fc <UART_SetConfig+0x348>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a44      	ldr	r2, [pc, #272]	@ (8002990 <UART_SetConfig+0x2dc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d125      	bne.n	80028d0 <UART_SetConfig+0x21c>
 8002884:	4b3e      	ldr	r3, [pc, #248]	@ (8002980 <UART_SetConfig+0x2cc>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800288e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002892:	d017      	beq.n	80028c4 <UART_SetConfig+0x210>
 8002894:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002898:	d817      	bhi.n	80028ca <UART_SetConfig+0x216>
 800289a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800289e:	d00b      	beq.n	80028b8 <UART_SetConfig+0x204>
 80028a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028a4:	d811      	bhi.n	80028ca <UART_SetConfig+0x216>
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <UART_SetConfig+0x1fe>
 80028aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028ae:	d006      	beq.n	80028be <UART_SetConfig+0x20a>
 80028b0:	e00b      	b.n	80028ca <UART_SetConfig+0x216>
 80028b2:	2300      	movs	r3, #0
 80028b4:	77fb      	strb	r3, [r7, #31]
 80028b6:	e0a1      	b.n	80029fc <UART_SetConfig+0x348>
 80028b8:	2302      	movs	r3, #2
 80028ba:	77fb      	strb	r3, [r7, #31]
 80028bc:	e09e      	b.n	80029fc <UART_SetConfig+0x348>
 80028be:	2304      	movs	r3, #4
 80028c0:	77fb      	strb	r3, [r7, #31]
 80028c2:	e09b      	b.n	80029fc <UART_SetConfig+0x348>
 80028c4:	2308      	movs	r3, #8
 80028c6:	77fb      	strb	r3, [r7, #31]
 80028c8:	e098      	b.n	80029fc <UART_SetConfig+0x348>
 80028ca:	2310      	movs	r3, #16
 80028cc:	77fb      	strb	r3, [r7, #31]
 80028ce:	e095      	b.n	80029fc <UART_SetConfig+0x348>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a2f      	ldr	r2, [pc, #188]	@ (8002994 <UART_SetConfig+0x2e0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d125      	bne.n	8002926 <UART_SetConfig+0x272>
 80028da:	4b29      	ldr	r3, [pc, #164]	@ (8002980 <UART_SetConfig+0x2cc>)
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80028e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80028e8:	d017      	beq.n	800291a <UART_SetConfig+0x266>
 80028ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80028ee:	d817      	bhi.n	8002920 <UART_SetConfig+0x26c>
 80028f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028f4:	d00b      	beq.n	800290e <UART_SetConfig+0x25a>
 80028f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028fa:	d811      	bhi.n	8002920 <UART_SetConfig+0x26c>
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <UART_SetConfig+0x254>
 8002900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002904:	d006      	beq.n	8002914 <UART_SetConfig+0x260>
 8002906:	e00b      	b.n	8002920 <UART_SetConfig+0x26c>
 8002908:	2301      	movs	r3, #1
 800290a:	77fb      	strb	r3, [r7, #31]
 800290c:	e076      	b.n	80029fc <UART_SetConfig+0x348>
 800290e:	2302      	movs	r3, #2
 8002910:	77fb      	strb	r3, [r7, #31]
 8002912:	e073      	b.n	80029fc <UART_SetConfig+0x348>
 8002914:	2304      	movs	r3, #4
 8002916:	77fb      	strb	r3, [r7, #31]
 8002918:	e070      	b.n	80029fc <UART_SetConfig+0x348>
 800291a:	2308      	movs	r3, #8
 800291c:	77fb      	strb	r3, [r7, #31]
 800291e:	e06d      	b.n	80029fc <UART_SetConfig+0x348>
 8002920:	2310      	movs	r3, #16
 8002922:	77fb      	strb	r3, [r7, #31]
 8002924:	e06a      	b.n	80029fc <UART_SetConfig+0x348>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a1b      	ldr	r2, [pc, #108]	@ (8002998 <UART_SetConfig+0x2e4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d138      	bne.n	80029a2 <UART_SetConfig+0x2ee>
 8002930:	4b13      	ldr	r3, [pc, #76]	@ (8002980 <UART_SetConfig+0x2cc>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002936:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800293a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800293e:	d017      	beq.n	8002970 <UART_SetConfig+0x2bc>
 8002940:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002944:	d82a      	bhi.n	800299c <UART_SetConfig+0x2e8>
 8002946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800294a:	d00b      	beq.n	8002964 <UART_SetConfig+0x2b0>
 800294c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002950:	d824      	bhi.n	800299c <UART_SetConfig+0x2e8>
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <UART_SetConfig+0x2aa>
 8002956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800295a:	d006      	beq.n	800296a <UART_SetConfig+0x2b6>
 800295c:	e01e      	b.n	800299c <UART_SetConfig+0x2e8>
 800295e:	2300      	movs	r3, #0
 8002960:	77fb      	strb	r3, [r7, #31]
 8002962:	e04b      	b.n	80029fc <UART_SetConfig+0x348>
 8002964:	2302      	movs	r3, #2
 8002966:	77fb      	strb	r3, [r7, #31]
 8002968:	e048      	b.n	80029fc <UART_SetConfig+0x348>
 800296a:	2304      	movs	r3, #4
 800296c:	77fb      	strb	r3, [r7, #31]
 800296e:	e045      	b.n	80029fc <UART_SetConfig+0x348>
 8002970:	2308      	movs	r3, #8
 8002972:	77fb      	strb	r3, [r7, #31]
 8002974:	e042      	b.n	80029fc <UART_SetConfig+0x348>
 8002976:	bf00      	nop
 8002978:	efff69f3 	.word	0xefff69f3
 800297c:	40011000 	.word	0x40011000
 8002980:	40023800 	.word	0x40023800
 8002984:	40004400 	.word	0x40004400
 8002988:	40004800 	.word	0x40004800
 800298c:	40004c00 	.word	0x40004c00
 8002990:	40005000 	.word	0x40005000
 8002994:	40011400 	.word	0x40011400
 8002998:	40007800 	.word	0x40007800
 800299c:	2310      	movs	r3, #16
 800299e:	77fb      	strb	r3, [r7, #31]
 80029a0:	e02c      	b.n	80029fc <UART_SetConfig+0x348>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a72      	ldr	r2, [pc, #456]	@ (8002b70 <UART_SetConfig+0x4bc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d125      	bne.n	80029f8 <UART_SetConfig+0x344>
 80029ac:	4b71      	ldr	r3, [pc, #452]	@ (8002b74 <UART_SetConfig+0x4c0>)
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80029b6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80029ba:	d017      	beq.n	80029ec <UART_SetConfig+0x338>
 80029bc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80029c0:	d817      	bhi.n	80029f2 <UART_SetConfig+0x33e>
 80029c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029c6:	d00b      	beq.n	80029e0 <UART_SetConfig+0x32c>
 80029c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029cc:	d811      	bhi.n	80029f2 <UART_SetConfig+0x33e>
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <UART_SetConfig+0x326>
 80029d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029d6:	d006      	beq.n	80029e6 <UART_SetConfig+0x332>
 80029d8:	e00b      	b.n	80029f2 <UART_SetConfig+0x33e>
 80029da:	2300      	movs	r3, #0
 80029dc:	77fb      	strb	r3, [r7, #31]
 80029de:	e00d      	b.n	80029fc <UART_SetConfig+0x348>
 80029e0:	2302      	movs	r3, #2
 80029e2:	77fb      	strb	r3, [r7, #31]
 80029e4:	e00a      	b.n	80029fc <UART_SetConfig+0x348>
 80029e6:	2304      	movs	r3, #4
 80029e8:	77fb      	strb	r3, [r7, #31]
 80029ea:	e007      	b.n	80029fc <UART_SetConfig+0x348>
 80029ec:	2308      	movs	r3, #8
 80029ee:	77fb      	strb	r3, [r7, #31]
 80029f0:	e004      	b.n	80029fc <UART_SetConfig+0x348>
 80029f2:	2310      	movs	r3, #16
 80029f4:	77fb      	strb	r3, [r7, #31]
 80029f6:	e001      	b.n	80029fc <UART_SetConfig+0x348>
 80029f8:	2310      	movs	r3, #16
 80029fa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a04:	d15b      	bne.n	8002abe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002a06:	7ffb      	ldrb	r3, [r7, #31]
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d828      	bhi.n	8002a5e <UART_SetConfig+0x3aa>
 8002a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a14 <UART_SetConfig+0x360>)
 8002a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a12:	bf00      	nop
 8002a14:	08002a39 	.word	0x08002a39
 8002a18:	08002a41 	.word	0x08002a41
 8002a1c:	08002a49 	.word	0x08002a49
 8002a20:	08002a5f 	.word	0x08002a5f
 8002a24:	08002a4f 	.word	0x08002a4f
 8002a28:	08002a5f 	.word	0x08002a5f
 8002a2c:	08002a5f 	.word	0x08002a5f
 8002a30:	08002a5f 	.word	0x08002a5f
 8002a34:	08002a57 	.word	0x08002a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a38:	f7fe fc4e 	bl	80012d8 <HAL_RCC_GetPCLK1Freq>
 8002a3c:	61b8      	str	r0, [r7, #24]
        break;
 8002a3e:	e013      	b.n	8002a68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a40:	f7fe fc5e 	bl	8001300 <HAL_RCC_GetPCLK2Freq>
 8002a44:	61b8      	str	r0, [r7, #24]
        break;
 8002a46:	e00f      	b.n	8002a68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a48:	4b4b      	ldr	r3, [pc, #300]	@ (8002b78 <UART_SetConfig+0x4c4>)
 8002a4a:	61bb      	str	r3, [r7, #24]
        break;
 8002a4c:	e00c      	b.n	8002a68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a4e:	f7fe fb71 	bl	8001134 <HAL_RCC_GetSysClockFreq>
 8002a52:	61b8      	str	r0, [r7, #24]
        break;
 8002a54:	e008      	b.n	8002a68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a5a:	61bb      	str	r3, [r7, #24]
        break;
 8002a5c:	e004      	b.n	8002a68 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	77bb      	strb	r3, [r7, #30]
        break;
 8002a66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d074      	beq.n	8002b58 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	005a      	lsls	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	085b      	lsrs	r3, r3, #1
 8002a78:	441a      	add	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	2b0f      	cmp	r3, #15
 8002a88:	d916      	bls.n	8002ab8 <UART_SetConfig+0x404>
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a90:	d212      	bcs.n	8002ab8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	f023 030f 	bic.w	r3, r3, #15
 8002a9a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	085b      	lsrs	r3, r3, #1
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	89fb      	ldrh	r3, [r7, #14]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	89fa      	ldrh	r2, [r7, #14]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	e04f      	b.n	8002b58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	77bb      	strb	r3, [r7, #30]
 8002abc:	e04c      	b.n	8002b58 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002abe:	7ffb      	ldrb	r3, [r7, #31]
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d828      	bhi.n	8002b16 <UART_SetConfig+0x462>
 8002ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8002acc <UART_SetConfig+0x418>)
 8002ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aca:	bf00      	nop
 8002acc:	08002af1 	.word	0x08002af1
 8002ad0:	08002af9 	.word	0x08002af9
 8002ad4:	08002b01 	.word	0x08002b01
 8002ad8:	08002b17 	.word	0x08002b17
 8002adc:	08002b07 	.word	0x08002b07
 8002ae0:	08002b17 	.word	0x08002b17
 8002ae4:	08002b17 	.word	0x08002b17
 8002ae8:	08002b17 	.word	0x08002b17
 8002aec:	08002b0f 	.word	0x08002b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002af0:	f7fe fbf2 	bl	80012d8 <HAL_RCC_GetPCLK1Freq>
 8002af4:	61b8      	str	r0, [r7, #24]
        break;
 8002af6:	e013      	b.n	8002b20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002af8:	f7fe fc02 	bl	8001300 <HAL_RCC_GetPCLK2Freq>
 8002afc:	61b8      	str	r0, [r7, #24]
        break;
 8002afe:	e00f      	b.n	8002b20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b00:	4b1d      	ldr	r3, [pc, #116]	@ (8002b78 <UART_SetConfig+0x4c4>)
 8002b02:	61bb      	str	r3, [r7, #24]
        break;
 8002b04:	e00c      	b.n	8002b20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b06:	f7fe fb15 	bl	8001134 <HAL_RCC_GetSysClockFreq>
 8002b0a:	61b8      	str	r0, [r7, #24]
        break;
 8002b0c:	e008      	b.n	8002b20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b12:	61bb      	str	r3, [r7, #24]
        break;
 8002b14:	e004      	b.n	8002b20 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	77bb      	strb	r3, [r7, #30]
        break;
 8002b1e:	bf00      	nop
    }

    if (pclk != 0U)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d018      	beq.n	8002b58 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	085a      	lsrs	r2, r3, #1
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	441a      	add	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	2b0f      	cmp	r3, #15
 8002b3e:	d909      	bls.n	8002b54 <UART_SetConfig+0x4a0>
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b46:	d205      	bcs.n	8002b54 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	e001      	b.n	8002b58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002b64:	7fbb      	ldrb	r3, [r7, #30]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3720      	adds	r7, #32
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40007c00 	.word	0x40007c00
 8002b74:	40023800 	.word	0x40023800
 8002b78:	00f42400 	.word	0x00f42400

08002b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00a      	beq.n	8002ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01a      	beq.n	8002c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c7a:	d10a      	bne.n	8002c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	605a      	str	r2, [r3, #4]
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b098      	sub	sp, #96	@ 0x60
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cd0:	f7fd ff42 	bl	8000b58 <HAL_GetTick>
 8002cd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d12e      	bne.n	8002d42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ce4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cec:	2200      	movs	r2, #0
 8002cee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f88c 	bl	8002e10 <UART_WaitOnFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d021      	beq.n	8002d42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d06:	e853 3f00 	ldrex	r3, [r3]
 8002d0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d12:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d1e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d24:	e841 2300 	strex	r3, r2, [r1]
 8002d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e6      	bne.n	8002cfe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e062      	b.n	8002e08 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d149      	bne.n	8002de4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f856 	bl	8002e10 <UART_WaitOnFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d03c      	beq.n	8002de4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	e853 3f00 	ldrex	r3, [r3]
 8002d76:	623b      	str	r3, [r7, #32]
   return(result);
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d88:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d90:	e841 2300 	strex	r3, r2, [r1]
 8002d94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e6      	bne.n	8002d6a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3308      	adds	r3, #8
 8002da2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	e853 3f00 	ldrex	r3, [r3]
 8002daa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0301 	bic.w	r3, r3, #1
 8002db2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3308      	adds	r3, #8
 8002dba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002dbc:	61fa      	str	r2, [r7, #28]
 8002dbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc0:	69b9      	ldr	r1, [r7, #24]
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	e841 2300 	strex	r3, r2, [r1]
 8002dc8:	617b      	str	r3, [r7, #20]
   return(result);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1e5      	bne.n	8002d9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e011      	b.n	8002e08 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3758      	adds	r7, #88	@ 0x58
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e20:	e04f      	b.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e28:	d04b      	beq.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2a:	f7fd fe95 	bl	8000b58 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d302      	bcc.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e04e      	b.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d037      	beq.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b80      	cmp	r3, #128	@ 0x80
 8002e56:	d034      	beq.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b40      	cmp	r3, #64	@ 0x40
 8002e5c:	d031      	beq.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d110      	bne.n	8002e8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2208      	movs	r2, #8
 8002e72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f838 	bl	8002eea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2208      	movs	r2, #8
 8002e7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e029      	b.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e9c:	d111      	bne.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ea6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 f81e 	bl	8002eea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e00f      	b.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	69da      	ldr	r2, [r3, #28]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	bf0c      	ite	eq
 8002ed2:	2301      	moveq	r3, #1
 8002ed4:	2300      	movne	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d0a0      	beq.n	8002e22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b095      	sub	sp, #84	@ 0x54
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002efa:	e853 3f00 	ldrex	r3, [r3]
 8002efe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f10:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f18:	e841 2300 	strex	r3, r2, [r1]
 8002f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1e6      	bne.n	8002ef2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3308      	adds	r3, #8
 8002f2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	e853 3f00 	ldrex	r3, [r3]
 8002f32:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f023 0301 	bic.w	r3, r3, #1
 8002f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	3308      	adds	r3, #8
 8002f42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f4c:	e841 2300 	strex	r3, r2, [r1]
 8002f50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e5      	bne.n	8002f24 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d118      	bne.n	8002f92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	e853 3f00 	ldrex	r3, [r3]
 8002f6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f023 0310 	bic.w	r3, r3, #16
 8002f74:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f7e:	61bb      	str	r3, [r7, #24]
 8002f80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f82:	6979      	ldr	r1, [r7, #20]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	e841 2300 	strex	r3, r2, [r1]
 8002f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1e6      	bne.n	8002f60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002fa6:	bf00      	nop
 8002fa8:	3754      	adds	r7, #84	@ 0x54
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <siprintf>:
 8002fb4:	b40e      	push	{r1, r2, r3}
 8002fb6:	b500      	push	{lr}
 8002fb8:	b09c      	sub	sp, #112	@ 0x70
 8002fba:	ab1d      	add	r3, sp, #116	@ 0x74
 8002fbc:	9002      	str	r0, [sp, #8]
 8002fbe:	9006      	str	r0, [sp, #24]
 8002fc0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002fc4:	4809      	ldr	r0, [pc, #36]	@ (8002fec <siprintf+0x38>)
 8002fc6:	9107      	str	r1, [sp, #28]
 8002fc8:	9104      	str	r1, [sp, #16]
 8002fca:	4909      	ldr	r1, [pc, #36]	@ (8002ff0 <siprintf+0x3c>)
 8002fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fd0:	9105      	str	r1, [sp, #20]
 8002fd2:	6800      	ldr	r0, [r0, #0]
 8002fd4:	9301      	str	r3, [sp, #4]
 8002fd6:	a902      	add	r1, sp, #8
 8002fd8:	f000 f994 	bl	8003304 <_svfiprintf_r>
 8002fdc:	9b02      	ldr	r3, [sp, #8]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	701a      	strb	r2, [r3, #0]
 8002fe2:	b01c      	add	sp, #112	@ 0x70
 8002fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fe8:	b003      	add	sp, #12
 8002fea:	4770      	bx	lr
 8002fec:	2000000c 	.word	0x2000000c
 8002ff0:	ffff0208 	.word	0xffff0208

08002ff4 <memset>:
 8002ff4:	4402      	add	r2, r0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d100      	bne.n	8002ffe <memset+0xa>
 8002ffc:	4770      	bx	lr
 8002ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8003002:	e7f9      	b.n	8002ff8 <memset+0x4>

08003004 <__errno>:
 8003004:	4b01      	ldr	r3, [pc, #4]	@ (800300c <__errno+0x8>)
 8003006:	6818      	ldr	r0, [r3, #0]
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	2000000c 	.word	0x2000000c

08003010 <__libc_init_array>:
 8003010:	b570      	push	{r4, r5, r6, lr}
 8003012:	4d0d      	ldr	r5, [pc, #52]	@ (8003048 <__libc_init_array+0x38>)
 8003014:	4c0d      	ldr	r4, [pc, #52]	@ (800304c <__libc_init_array+0x3c>)
 8003016:	1b64      	subs	r4, r4, r5
 8003018:	10a4      	asrs	r4, r4, #2
 800301a:	2600      	movs	r6, #0
 800301c:	42a6      	cmp	r6, r4
 800301e:	d109      	bne.n	8003034 <__libc_init_array+0x24>
 8003020:	4d0b      	ldr	r5, [pc, #44]	@ (8003050 <__libc_init_array+0x40>)
 8003022:	4c0c      	ldr	r4, [pc, #48]	@ (8003054 <__libc_init_array+0x44>)
 8003024:	f000 fc66 	bl	80038f4 <_init>
 8003028:	1b64      	subs	r4, r4, r5
 800302a:	10a4      	asrs	r4, r4, #2
 800302c:	2600      	movs	r6, #0
 800302e:	42a6      	cmp	r6, r4
 8003030:	d105      	bne.n	800303e <__libc_init_array+0x2e>
 8003032:	bd70      	pop	{r4, r5, r6, pc}
 8003034:	f855 3b04 	ldr.w	r3, [r5], #4
 8003038:	4798      	blx	r3
 800303a:	3601      	adds	r6, #1
 800303c:	e7ee      	b.n	800301c <__libc_init_array+0xc>
 800303e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003042:	4798      	blx	r3
 8003044:	3601      	adds	r6, #1
 8003046:	e7f2      	b.n	800302e <__libc_init_array+0x1e>
 8003048:	08003958 	.word	0x08003958
 800304c:	08003958 	.word	0x08003958
 8003050:	08003958 	.word	0x08003958
 8003054:	0800395c 	.word	0x0800395c

08003058 <__retarget_lock_acquire_recursive>:
 8003058:	4770      	bx	lr

0800305a <__retarget_lock_release_recursive>:
 800305a:	4770      	bx	lr

0800305c <_free_r>:
 800305c:	b538      	push	{r3, r4, r5, lr}
 800305e:	4605      	mov	r5, r0
 8003060:	2900      	cmp	r1, #0
 8003062:	d041      	beq.n	80030e8 <_free_r+0x8c>
 8003064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003068:	1f0c      	subs	r4, r1, #4
 800306a:	2b00      	cmp	r3, #0
 800306c:	bfb8      	it	lt
 800306e:	18e4      	addlt	r4, r4, r3
 8003070:	f000 f8e0 	bl	8003234 <__malloc_lock>
 8003074:	4a1d      	ldr	r2, [pc, #116]	@ (80030ec <_free_r+0x90>)
 8003076:	6813      	ldr	r3, [r2, #0]
 8003078:	b933      	cbnz	r3, 8003088 <_free_r+0x2c>
 800307a:	6063      	str	r3, [r4, #4]
 800307c:	6014      	str	r4, [r2, #0]
 800307e:	4628      	mov	r0, r5
 8003080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003084:	f000 b8dc 	b.w	8003240 <__malloc_unlock>
 8003088:	42a3      	cmp	r3, r4
 800308a:	d908      	bls.n	800309e <_free_r+0x42>
 800308c:	6820      	ldr	r0, [r4, #0]
 800308e:	1821      	adds	r1, r4, r0
 8003090:	428b      	cmp	r3, r1
 8003092:	bf01      	itttt	eq
 8003094:	6819      	ldreq	r1, [r3, #0]
 8003096:	685b      	ldreq	r3, [r3, #4]
 8003098:	1809      	addeq	r1, r1, r0
 800309a:	6021      	streq	r1, [r4, #0]
 800309c:	e7ed      	b.n	800307a <_free_r+0x1e>
 800309e:	461a      	mov	r2, r3
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	b10b      	cbz	r3, 80030a8 <_free_r+0x4c>
 80030a4:	42a3      	cmp	r3, r4
 80030a6:	d9fa      	bls.n	800309e <_free_r+0x42>
 80030a8:	6811      	ldr	r1, [r2, #0]
 80030aa:	1850      	adds	r0, r2, r1
 80030ac:	42a0      	cmp	r0, r4
 80030ae:	d10b      	bne.n	80030c8 <_free_r+0x6c>
 80030b0:	6820      	ldr	r0, [r4, #0]
 80030b2:	4401      	add	r1, r0
 80030b4:	1850      	adds	r0, r2, r1
 80030b6:	4283      	cmp	r3, r0
 80030b8:	6011      	str	r1, [r2, #0]
 80030ba:	d1e0      	bne.n	800307e <_free_r+0x22>
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	6053      	str	r3, [r2, #4]
 80030c2:	4408      	add	r0, r1
 80030c4:	6010      	str	r0, [r2, #0]
 80030c6:	e7da      	b.n	800307e <_free_r+0x22>
 80030c8:	d902      	bls.n	80030d0 <_free_r+0x74>
 80030ca:	230c      	movs	r3, #12
 80030cc:	602b      	str	r3, [r5, #0]
 80030ce:	e7d6      	b.n	800307e <_free_r+0x22>
 80030d0:	6820      	ldr	r0, [r4, #0]
 80030d2:	1821      	adds	r1, r4, r0
 80030d4:	428b      	cmp	r3, r1
 80030d6:	bf04      	itt	eq
 80030d8:	6819      	ldreq	r1, [r3, #0]
 80030da:	685b      	ldreq	r3, [r3, #4]
 80030dc:	6063      	str	r3, [r4, #4]
 80030de:	bf04      	itt	eq
 80030e0:	1809      	addeq	r1, r1, r0
 80030e2:	6021      	streq	r1, [r4, #0]
 80030e4:	6054      	str	r4, [r2, #4]
 80030e6:	e7ca      	b.n	800307e <_free_r+0x22>
 80030e8:	bd38      	pop	{r3, r4, r5, pc}
 80030ea:	bf00      	nop
 80030ec:	200002e8 	.word	0x200002e8

080030f0 <sbrk_aligned>:
 80030f0:	b570      	push	{r4, r5, r6, lr}
 80030f2:	4e0f      	ldr	r6, [pc, #60]	@ (8003130 <sbrk_aligned+0x40>)
 80030f4:	460c      	mov	r4, r1
 80030f6:	6831      	ldr	r1, [r6, #0]
 80030f8:	4605      	mov	r5, r0
 80030fa:	b911      	cbnz	r1, 8003102 <sbrk_aligned+0x12>
 80030fc:	f000 fba6 	bl	800384c <_sbrk_r>
 8003100:	6030      	str	r0, [r6, #0]
 8003102:	4621      	mov	r1, r4
 8003104:	4628      	mov	r0, r5
 8003106:	f000 fba1 	bl	800384c <_sbrk_r>
 800310a:	1c43      	adds	r3, r0, #1
 800310c:	d103      	bne.n	8003116 <sbrk_aligned+0x26>
 800310e:	f04f 34ff 	mov.w	r4, #4294967295
 8003112:	4620      	mov	r0, r4
 8003114:	bd70      	pop	{r4, r5, r6, pc}
 8003116:	1cc4      	adds	r4, r0, #3
 8003118:	f024 0403 	bic.w	r4, r4, #3
 800311c:	42a0      	cmp	r0, r4
 800311e:	d0f8      	beq.n	8003112 <sbrk_aligned+0x22>
 8003120:	1a21      	subs	r1, r4, r0
 8003122:	4628      	mov	r0, r5
 8003124:	f000 fb92 	bl	800384c <_sbrk_r>
 8003128:	3001      	adds	r0, #1
 800312a:	d1f2      	bne.n	8003112 <sbrk_aligned+0x22>
 800312c:	e7ef      	b.n	800310e <sbrk_aligned+0x1e>
 800312e:	bf00      	nop
 8003130:	200002e4 	.word	0x200002e4

08003134 <_malloc_r>:
 8003134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003138:	1ccd      	adds	r5, r1, #3
 800313a:	f025 0503 	bic.w	r5, r5, #3
 800313e:	3508      	adds	r5, #8
 8003140:	2d0c      	cmp	r5, #12
 8003142:	bf38      	it	cc
 8003144:	250c      	movcc	r5, #12
 8003146:	2d00      	cmp	r5, #0
 8003148:	4606      	mov	r6, r0
 800314a:	db01      	blt.n	8003150 <_malloc_r+0x1c>
 800314c:	42a9      	cmp	r1, r5
 800314e:	d904      	bls.n	800315a <_malloc_r+0x26>
 8003150:	230c      	movs	r3, #12
 8003152:	6033      	str	r3, [r6, #0]
 8003154:	2000      	movs	r0, #0
 8003156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800315a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003230 <_malloc_r+0xfc>
 800315e:	f000 f869 	bl	8003234 <__malloc_lock>
 8003162:	f8d8 3000 	ldr.w	r3, [r8]
 8003166:	461c      	mov	r4, r3
 8003168:	bb44      	cbnz	r4, 80031bc <_malloc_r+0x88>
 800316a:	4629      	mov	r1, r5
 800316c:	4630      	mov	r0, r6
 800316e:	f7ff ffbf 	bl	80030f0 <sbrk_aligned>
 8003172:	1c43      	adds	r3, r0, #1
 8003174:	4604      	mov	r4, r0
 8003176:	d158      	bne.n	800322a <_malloc_r+0xf6>
 8003178:	f8d8 4000 	ldr.w	r4, [r8]
 800317c:	4627      	mov	r7, r4
 800317e:	2f00      	cmp	r7, #0
 8003180:	d143      	bne.n	800320a <_malloc_r+0xd6>
 8003182:	2c00      	cmp	r4, #0
 8003184:	d04b      	beq.n	800321e <_malloc_r+0xea>
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	4639      	mov	r1, r7
 800318a:	4630      	mov	r0, r6
 800318c:	eb04 0903 	add.w	r9, r4, r3
 8003190:	f000 fb5c 	bl	800384c <_sbrk_r>
 8003194:	4581      	cmp	r9, r0
 8003196:	d142      	bne.n	800321e <_malloc_r+0xea>
 8003198:	6821      	ldr	r1, [r4, #0]
 800319a:	1a6d      	subs	r5, r5, r1
 800319c:	4629      	mov	r1, r5
 800319e:	4630      	mov	r0, r6
 80031a0:	f7ff ffa6 	bl	80030f0 <sbrk_aligned>
 80031a4:	3001      	adds	r0, #1
 80031a6:	d03a      	beq.n	800321e <_malloc_r+0xea>
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	442b      	add	r3, r5
 80031ac:	6023      	str	r3, [r4, #0]
 80031ae:	f8d8 3000 	ldr.w	r3, [r8]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	bb62      	cbnz	r2, 8003210 <_malloc_r+0xdc>
 80031b6:	f8c8 7000 	str.w	r7, [r8]
 80031ba:	e00f      	b.n	80031dc <_malloc_r+0xa8>
 80031bc:	6822      	ldr	r2, [r4, #0]
 80031be:	1b52      	subs	r2, r2, r5
 80031c0:	d420      	bmi.n	8003204 <_malloc_r+0xd0>
 80031c2:	2a0b      	cmp	r2, #11
 80031c4:	d917      	bls.n	80031f6 <_malloc_r+0xc2>
 80031c6:	1961      	adds	r1, r4, r5
 80031c8:	42a3      	cmp	r3, r4
 80031ca:	6025      	str	r5, [r4, #0]
 80031cc:	bf18      	it	ne
 80031ce:	6059      	strne	r1, [r3, #4]
 80031d0:	6863      	ldr	r3, [r4, #4]
 80031d2:	bf08      	it	eq
 80031d4:	f8c8 1000 	streq.w	r1, [r8]
 80031d8:	5162      	str	r2, [r4, r5]
 80031da:	604b      	str	r3, [r1, #4]
 80031dc:	4630      	mov	r0, r6
 80031de:	f000 f82f 	bl	8003240 <__malloc_unlock>
 80031e2:	f104 000b 	add.w	r0, r4, #11
 80031e6:	1d23      	adds	r3, r4, #4
 80031e8:	f020 0007 	bic.w	r0, r0, #7
 80031ec:	1ac2      	subs	r2, r0, r3
 80031ee:	bf1c      	itt	ne
 80031f0:	1a1b      	subne	r3, r3, r0
 80031f2:	50a3      	strne	r3, [r4, r2]
 80031f4:	e7af      	b.n	8003156 <_malloc_r+0x22>
 80031f6:	6862      	ldr	r2, [r4, #4]
 80031f8:	42a3      	cmp	r3, r4
 80031fa:	bf0c      	ite	eq
 80031fc:	f8c8 2000 	streq.w	r2, [r8]
 8003200:	605a      	strne	r2, [r3, #4]
 8003202:	e7eb      	b.n	80031dc <_malloc_r+0xa8>
 8003204:	4623      	mov	r3, r4
 8003206:	6864      	ldr	r4, [r4, #4]
 8003208:	e7ae      	b.n	8003168 <_malloc_r+0x34>
 800320a:	463c      	mov	r4, r7
 800320c:	687f      	ldr	r7, [r7, #4]
 800320e:	e7b6      	b.n	800317e <_malloc_r+0x4a>
 8003210:	461a      	mov	r2, r3
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	42a3      	cmp	r3, r4
 8003216:	d1fb      	bne.n	8003210 <_malloc_r+0xdc>
 8003218:	2300      	movs	r3, #0
 800321a:	6053      	str	r3, [r2, #4]
 800321c:	e7de      	b.n	80031dc <_malloc_r+0xa8>
 800321e:	230c      	movs	r3, #12
 8003220:	6033      	str	r3, [r6, #0]
 8003222:	4630      	mov	r0, r6
 8003224:	f000 f80c 	bl	8003240 <__malloc_unlock>
 8003228:	e794      	b.n	8003154 <_malloc_r+0x20>
 800322a:	6005      	str	r5, [r0, #0]
 800322c:	e7d6      	b.n	80031dc <_malloc_r+0xa8>
 800322e:	bf00      	nop
 8003230:	200002e8 	.word	0x200002e8

08003234 <__malloc_lock>:
 8003234:	4801      	ldr	r0, [pc, #4]	@ (800323c <__malloc_lock+0x8>)
 8003236:	f7ff bf0f 	b.w	8003058 <__retarget_lock_acquire_recursive>
 800323a:	bf00      	nop
 800323c:	200002e0 	.word	0x200002e0

08003240 <__malloc_unlock>:
 8003240:	4801      	ldr	r0, [pc, #4]	@ (8003248 <__malloc_unlock+0x8>)
 8003242:	f7ff bf0a 	b.w	800305a <__retarget_lock_release_recursive>
 8003246:	bf00      	nop
 8003248:	200002e0 	.word	0x200002e0

0800324c <__ssputs_r>:
 800324c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003250:	688e      	ldr	r6, [r1, #8]
 8003252:	461f      	mov	r7, r3
 8003254:	42be      	cmp	r6, r7
 8003256:	680b      	ldr	r3, [r1, #0]
 8003258:	4682      	mov	sl, r0
 800325a:	460c      	mov	r4, r1
 800325c:	4690      	mov	r8, r2
 800325e:	d82d      	bhi.n	80032bc <__ssputs_r+0x70>
 8003260:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003264:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003268:	d026      	beq.n	80032b8 <__ssputs_r+0x6c>
 800326a:	6965      	ldr	r5, [r4, #20]
 800326c:	6909      	ldr	r1, [r1, #16]
 800326e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003272:	eba3 0901 	sub.w	r9, r3, r1
 8003276:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800327a:	1c7b      	adds	r3, r7, #1
 800327c:	444b      	add	r3, r9
 800327e:	106d      	asrs	r5, r5, #1
 8003280:	429d      	cmp	r5, r3
 8003282:	bf38      	it	cc
 8003284:	461d      	movcc	r5, r3
 8003286:	0553      	lsls	r3, r2, #21
 8003288:	d527      	bpl.n	80032da <__ssputs_r+0x8e>
 800328a:	4629      	mov	r1, r5
 800328c:	f7ff ff52 	bl	8003134 <_malloc_r>
 8003290:	4606      	mov	r6, r0
 8003292:	b360      	cbz	r0, 80032ee <__ssputs_r+0xa2>
 8003294:	6921      	ldr	r1, [r4, #16]
 8003296:	464a      	mov	r2, r9
 8003298:	f000 fae8 	bl	800386c <memcpy>
 800329c:	89a3      	ldrh	r3, [r4, #12]
 800329e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80032a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032a6:	81a3      	strh	r3, [r4, #12]
 80032a8:	6126      	str	r6, [r4, #16]
 80032aa:	6165      	str	r5, [r4, #20]
 80032ac:	444e      	add	r6, r9
 80032ae:	eba5 0509 	sub.w	r5, r5, r9
 80032b2:	6026      	str	r6, [r4, #0]
 80032b4:	60a5      	str	r5, [r4, #8]
 80032b6:	463e      	mov	r6, r7
 80032b8:	42be      	cmp	r6, r7
 80032ba:	d900      	bls.n	80032be <__ssputs_r+0x72>
 80032bc:	463e      	mov	r6, r7
 80032be:	6820      	ldr	r0, [r4, #0]
 80032c0:	4632      	mov	r2, r6
 80032c2:	4641      	mov	r1, r8
 80032c4:	f000 faa8 	bl	8003818 <memmove>
 80032c8:	68a3      	ldr	r3, [r4, #8]
 80032ca:	1b9b      	subs	r3, r3, r6
 80032cc:	60a3      	str	r3, [r4, #8]
 80032ce:	6823      	ldr	r3, [r4, #0]
 80032d0:	4433      	add	r3, r6
 80032d2:	6023      	str	r3, [r4, #0]
 80032d4:	2000      	movs	r0, #0
 80032d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032da:	462a      	mov	r2, r5
 80032dc:	f000 fad4 	bl	8003888 <_realloc_r>
 80032e0:	4606      	mov	r6, r0
 80032e2:	2800      	cmp	r0, #0
 80032e4:	d1e0      	bne.n	80032a8 <__ssputs_r+0x5c>
 80032e6:	6921      	ldr	r1, [r4, #16]
 80032e8:	4650      	mov	r0, sl
 80032ea:	f7ff feb7 	bl	800305c <_free_r>
 80032ee:	230c      	movs	r3, #12
 80032f0:	f8ca 3000 	str.w	r3, [sl]
 80032f4:	89a3      	ldrh	r3, [r4, #12]
 80032f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032fa:	81a3      	strh	r3, [r4, #12]
 80032fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003300:	e7e9      	b.n	80032d6 <__ssputs_r+0x8a>
	...

08003304 <_svfiprintf_r>:
 8003304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003308:	4698      	mov	r8, r3
 800330a:	898b      	ldrh	r3, [r1, #12]
 800330c:	061b      	lsls	r3, r3, #24
 800330e:	b09d      	sub	sp, #116	@ 0x74
 8003310:	4607      	mov	r7, r0
 8003312:	460d      	mov	r5, r1
 8003314:	4614      	mov	r4, r2
 8003316:	d510      	bpl.n	800333a <_svfiprintf_r+0x36>
 8003318:	690b      	ldr	r3, [r1, #16]
 800331a:	b973      	cbnz	r3, 800333a <_svfiprintf_r+0x36>
 800331c:	2140      	movs	r1, #64	@ 0x40
 800331e:	f7ff ff09 	bl	8003134 <_malloc_r>
 8003322:	6028      	str	r0, [r5, #0]
 8003324:	6128      	str	r0, [r5, #16]
 8003326:	b930      	cbnz	r0, 8003336 <_svfiprintf_r+0x32>
 8003328:	230c      	movs	r3, #12
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	f04f 30ff 	mov.w	r0, #4294967295
 8003330:	b01d      	add	sp, #116	@ 0x74
 8003332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003336:	2340      	movs	r3, #64	@ 0x40
 8003338:	616b      	str	r3, [r5, #20]
 800333a:	2300      	movs	r3, #0
 800333c:	9309      	str	r3, [sp, #36]	@ 0x24
 800333e:	2320      	movs	r3, #32
 8003340:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003344:	f8cd 800c 	str.w	r8, [sp, #12]
 8003348:	2330      	movs	r3, #48	@ 0x30
 800334a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80034e8 <_svfiprintf_r+0x1e4>
 800334e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003352:	f04f 0901 	mov.w	r9, #1
 8003356:	4623      	mov	r3, r4
 8003358:	469a      	mov	sl, r3
 800335a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800335e:	b10a      	cbz	r2, 8003364 <_svfiprintf_r+0x60>
 8003360:	2a25      	cmp	r2, #37	@ 0x25
 8003362:	d1f9      	bne.n	8003358 <_svfiprintf_r+0x54>
 8003364:	ebba 0b04 	subs.w	fp, sl, r4
 8003368:	d00b      	beq.n	8003382 <_svfiprintf_r+0x7e>
 800336a:	465b      	mov	r3, fp
 800336c:	4622      	mov	r2, r4
 800336e:	4629      	mov	r1, r5
 8003370:	4638      	mov	r0, r7
 8003372:	f7ff ff6b 	bl	800324c <__ssputs_r>
 8003376:	3001      	adds	r0, #1
 8003378:	f000 80a7 	beq.w	80034ca <_svfiprintf_r+0x1c6>
 800337c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800337e:	445a      	add	r2, fp
 8003380:	9209      	str	r2, [sp, #36]	@ 0x24
 8003382:	f89a 3000 	ldrb.w	r3, [sl]
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 809f 	beq.w	80034ca <_svfiprintf_r+0x1c6>
 800338c:	2300      	movs	r3, #0
 800338e:	f04f 32ff 	mov.w	r2, #4294967295
 8003392:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003396:	f10a 0a01 	add.w	sl, sl, #1
 800339a:	9304      	str	r3, [sp, #16]
 800339c:	9307      	str	r3, [sp, #28]
 800339e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80033a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80033a4:	4654      	mov	r4, sl
 80033a6:	2205      	movs	r2, #5
 80033a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033ac:	484e      	ldr	r0, [pc, #312]	@ (80034e8 <_svfiprintf_r+0x1e4>)
 80033ae:	f7fc ff4f 	bl	8000250 <memchr>
 80033b2:	9a04      	ldr	r2, [sp, #16]
 80033b4:	b9d8      	cbnz	r0, 80033ee <_svfiprintf_r+0xea>
 80033b6:	06d0      	lsls	r0, r2, #27
 80033b8:	bf44      	itt	mi
 80033ba:	2320      	movmi	r3, #32
 80033bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033c0:	0711      	lsls	r1, r2, #28
 80033c2:	bf44      	itt	mi
 80033c4:	232b      	movmi	r3, #43	@ 0x2b
 80033c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033ca:	f89a 3000 	ldrb.w	r3, [sl]
 80033ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80033d0:	d015      	beq.n	80033fe <_svfiprintf_r+0xfa>
 80033d2:	9a07      	ldr	r2, [sp, #28]
 80033d4:	4654      	mov	r4, sl
 80033d6:	2000      	movs	r0, #0
 80033d8:	f04f 0c0a 	mov.w	ip, #10
 80033dc:	4621      	mov	r1, r4
 80033de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033e2:	3b30      	subs	r3, #48	@ 0x30
 80033e4:	2b09      	cmp	r3, #9
 80033e6:	d94b      	bls.n	8003480 <_svfiprintf_r+0x17c>
 80033e8:	b1b0      	cbz	r0, 8003418 <_svfiprintf_r+0x114>
 80033ea:	9207      	str	r2, [sp, #28]
 80033ec:	e014      	b.n	8003418 <_svfiprintf_r+0x114>
 80033ee:	eba0 0308 	sub.w	r3, r0, r8
 80033f2:	fa09 f303 	lsl.w	r3, r9, r3
 80033f6:	4313      	orrs	r3, r2
 80033f8:	9304      	str	r3, [sp, #16]
 80033fa:	46a2      	mov	sl, r4
 80033fc:	e7d2      	b.n	80033a4 <_svfiprintf_r+0xa0>
 80033fe:	9b03      	ldr	r3, [sp, #12]
 8003400:	1d19      	adds	r1, r3, #4
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	9103      	str	r1, [sp, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	bfbb      	ittet	lt
 800340a:	425b      	neglt	r3, r3
 800340c:	f042 0202 	orrlt.w	r2, r2, #2
 8003410:	9307      	strge	r3, [sp, #28]
 8003412:	9307      	strlt	r3, [sp, #28]
 8003414:	bfb8      	it	lt
 8003416:	9204      	strlt	r2, [sp, #16]
 8003418:	7823      	ldrb	r3, [r4, #0]
 800341a:	2b2e      	cmp	r3, #46	@ 0x2e
 800341c:	d10a      	bne.n	8003434 <_svfiprintf_r+0x130>
 800341e:	7863      	ldrb	r3, [r4, #1]
 8003420:	2b2a      	cmp	r3, #42	@ 0x2a
 8003422:	d132      	bne.n	800348a <_svfiprintf_r+0x186>
 8003424:	9b03      	ldr	r3, [sp, #12]
 8003426:	1d1a      	adds	r2, r3, #4
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	9203      	str	r2, [sp, #12]
 800342c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003430:	3402      	adds	r4, #2
 8003432:	9305      	str	r3, [sp, #20]
 8003434:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80034f8 <_svfiprintf_r+0x1f4>
 8003438:	7821      	ldrb	r1, [r4, #0]
 800343a:	2203      	movs	r2, #3
 800343c:	4650      	mov	r0, sl
 800343e:	f7fc ff07 	bl	8000250 <memchr>
 8003442:	b138      	cbz	r0, 8003454 <_svfiprintf_r+0x150>
 8003444:	9b04      	ldr	r3, [sp, #16]
 8003446:	eba0 000a 	sub.w	r0, r0, sl
 800344a:	2240      	movs	r2, #64	@ 0x40
 800344c:	4082      	lsls	r2, r0
 800344e:	4313      	orrs	r3, r2
 8003450:	3401      	adds	r4, #1
 8003452:	9304      	str	r3, [sp, #16]
 8003454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003458:	4824      	ldr	r0, [pc, #144]	@ (80034ec <_svfiprintf_r+0x1e8>)
 800345a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800345e:	2206      	movs	r2, #6
 8003460:	f7fc fef6 	bl	8000250 <memchr>
 8003464:	2800      	cmp	r0, #0
 8003466:	d036      	beq.n	80034d6 <_svfiprintf_r+0x1d2>
 8003468:	4b21      	ldr	r3, [pc, #132]	@ (80034f0 <_svfiprintf_r+0x1ec>)
 800346a:	bb1b      	cbnz	r3, 80034b4 <_svfiprintf_r+0x1b0>
 800346c:	9b03      	ldr	r3, [sp, #12]
 800346e:	3307      	adds	r3, #7
 8003470:	f023 0307 	bic.w	r3, r3, #7
 8003474:	3308      	adds	r3, #8
 8003476:	9303      	str	r3, [sp, #12]
 8003478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800347a:	4433      	add	r3, r6
 800347c:	9309      	str	r3, [sp, #36]	@ 0x24
 800347e:	e76a      	b.n	8003356 <_svfiprintf_r+0x52>
 8003480:	fb0c 3202 	mla	r2, ip, r2, r3
 8003484:	460c      	mov	r4, r1
 8003486:	2001      	movs	r0, #1
 8003488:	e7a8      	b.n	80033dc <_svfiprintf_r+0xd8>
 800348a:	2300      	movs	r3, #0
 800348c:	3401      	adds	r4, #1
 800348e:	9305      	str	r3, [sp, #20]
 8003490:	4619      	mov	r1, r3
 8003492:	f04f 0c0a 	mov.w	ip, #10
 8003496:	4620      	mov	r0, r4
 8003498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800349c:	3a30      	subs	r2, #48	@ 0x30
 800349e:	2a09      	cmp	r2, #9
 80034a0:	d903      	bls.n	80034aa <_svfiprintf_r+0x1a6>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0c6      	beq.n	8003434 <_svfiprintf_r+0x130>
 80034a6:	9105      	str	r1, [sp, #20]
 80034a8:	e7c4      	b.n	8003434 <_svfiprintf_r+0x130>
 80034aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80034ae:	4604      	mov	r4, r0
 80034b0:	2301      	movs	r3, #1
 80034b2:	e7f0      	b.n	8003496 <_svfiprintf_r+0x192>
 80034b4:	ab03      	add	r3, sp, #12
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	462a      	mov	r2, r5
 80034ba:	4b0e      	ldr	r3, [pc, #56]	@ (80034f4 <_svfiprintf_r+0x1f0>)
 80034bc:	a904      	add	r1, sp, #16
 80034be:	4638      	mov	r0, r7
 80034c0:	f3af 8000 	nop.w
 80034c4:	1c42      	adds	r2, r0, #1
 80034c6:	4606      	mov	r6, r0
 80034c8:	d1d6      	bne.n	8003478 <_svfiprintf_r+0x174>
 80034ca:	89ab      	ldrh	r3, [r5, #12]
 80034cc:	065b      	lsls	r3, r3, #25
 80034ce:	f53f af2d 	bmi.w	800332c <_svfiprintf_r+0x28>
 80034d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80034d4:	e72c      	b.n	8003330 <_svfiprintf_r+0x2c>
 80034d6:	ab03      	add	r3, sp, #12
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	462a      	mov	r2, r5
 80034dc:	4b05      	ldr	r3, [pc, #20]	@ (80034f4 <_svfiprintf_r+0x1f0>)
 80034de:	a904      	add	r1, sp, #16
 80034e0:	4638      	mov	r0, r7
 80034e2:	f000 f879 	bl	80035d8 <_printf_i>
 80034e6:	e7ed      	b.n	80034c4 <_svfiprintf_r+0x1c0>
 80034e8:	0800391c 	.word	0x0800391c
 80034ec:	08003926 	.word	0x08003926
 80034f0:	00000000 	.word	0x00000000
 80034f4:	0800324d 	.word	0x0800324d
 80034f8:	08003922 	.word	0x08003922

080034fc <_printf_common>:
 80034fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003500:	4616      	mov	r6, r2
 8003502:	4698      	mov	r8, r3
 8003504:	688a      	ldr	r2, [r1, #8]
 8003506:	690b      	ldr	r3, [r1, #16]
 8003508:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800350c:	4293      	cmp	r3, r2
 800350e:	bfb8      	it	lt
 8003510:	4613      	movlt	r3, r2
 8003512:	6033      	str	r3, [r6, #0]
 8003514:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003518:	4607      	mov	r7, r0
 800351a:	460c      	mov	r4, r1
 800351c:	b10a      	cbz	r2, 8003522 <_printf_common+0x26>
 800351e:	3301      	adds	r3, #1
 8003520:	6033      	str	r3, [r6, #0]
 8003522:	6823      	ldr	r3, [r4, #0]
 8003524:	0699      	lsls	r1, r3, #26
 8003526:	bf42      	ittt	mi
 8003528:	6833      	ldrmi	r3, [r6, #0]
 800352a:	3302      	addmi	r3, #2
 800352c:	6033      	strmi	r3, [r6, #0]
 800352e:	6825      	ldr	r5, [r4, #0]
 8003530:	f015 0506 	ands.w	r5, r5, #6
 8003534:	d106      	bne.n	8003544 <_printf_common+0x48>
 8003536:	f104 0a19 	add.w	sl, r4, #25
 800353a:	68e3      	ldr	r3, [r4, #12]
 800353c:	6832      	ldr	r2, [r6, #0]
 800353e:	1a9b      	subs	r3, r3, r2
 8003540:	42ab      	cmp	r3, r5
 8003542:	dc26      	bgt.n	8003592 <_printf_common+0x96>
 8003544:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003548:	6822      	ldr	r2, [r4, #0]
 800354a:	3b00      	subs	r3, #0
 800354c:	bf18      	it	ne
 800354e:	2301      	movne	r3, #1
 8003550:	0692      	lsls	r2, r2, #26
 8003552:	d42b      	bmi.n	80035ac <_printf_common+0xb0>
 8003554:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003558:	4641      	mov	r1, r8
 800355a:	4638      	mov	r0, r7
 800355c:	47c8      	blx	r9
 800355e:	3001      	adds	r0, #1
 8003560:	d01e      	beq.n	80035a0 <_printf_common+0xa4>
 8003562:	6823      	ldr	r3, [r4, #0]
 8003564:	6922      	ldr	r2, [r4, #16]
 8003566:	f003 0306 	and.w	r3, r3, #6
 800356a:	2b04      	cmp	r3, #4
 800356c:	bf02      	ittt	eq
 800356e:	68e5      	ldreq	r5, [r4, #12]
 8003570:	6833      	ldreq	r3, [r6, #0]
 8003572:	1aed      	subeq	r5, r5, r3
 8003574:	68a3      	ldr	r3, [r4, #8]
 8003576:	bf0c      	ite	eq
 8003578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800357c:	2500      	movne	r5, #0
 800357e:	4293      	cmp	r3, r2
 8003580:	bfc4      	itt	gt
 8003582:	1a9b      	subgt	r3, r3, r2
 8003584:	18ed      	addgt	r5, r5, r3
 8003586:	2600      	movs	r6, #0
 8003588:	341a      	adds	r4, #26
 800358a:	42b5      	cmp	r5, r6
 800358c:	d11a      	bne.n	80035c4 <_printf_common+0xc8>
 800358e:	2000      	movs	r0, #0
 8003590:	e008      	b.n	80035a4 <_printf_common+0xa8>
 8003592:	2301      	movs	r3, #1
 8003594:	4652      	mov	r2, sl
 8003596:	4641      	mov	r1, r8
 8003598:	4638      	mov	r0, r7
 800359a:	47c8      	blx	r9
 800359c:	3001      	adds	r0, #1
 800359e:	d103      	bne.n	80035a8 <_printf_common+0xac>
 80035a0:	f04f 30ff 	mov.w	r0, #4294967295
 80035a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035a8:	3501      	adds	r5, #1
 80035aa:	e7c6      	b.n	800353a <_printf_common+0x3e>
 80035ac:	18e1      	adds	r1, r4, r3
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	2030      	movs	r0, #48	@ 0x30
 80035b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80035b6:	4422      	add	r2, r4
 80035b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80035bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80035c0:	3302      	adds	r3, #2
 80035c2:	e7c7      	b.n	8003554 <_printf_common+0x58>
 80035c4:	2301      	movs	r3, #1
 80035c6:	4622      	mov	r2, r4
 80035c8:	4641      	mov	r1, r8
 80035ca:	4638      	mov	r0, r7
 80035cc:	47c8      	blx	r9
 80035ce:	3001      	adds	r0, #1
 80035d0:	d0e6      	beq.n	80035a0 <_printf_common+0xa4>
 80035d2:	3601      	adds	r6, #1
 80035d4:	e7d9      	b.n	800358a <_printf_common+0x8e>
	...

080035d8 <_printf_i>:
 80035d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035dc:	7e0f      	ldrb	r7, [r1, #24]
 80035de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80035e0:	2f78      	cmp	r7, #120	@ 0x78
 80035e2:	4691      	mov	r9, r2
 80035e4:	4680      	mov	r8, r0
 80035e6:	460c      	mov	r4, r1
 80035e8:	469a      	mov	sl, r3
 80035ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80035ee:	d807      	bhi.n	8003600 <_printf_i+0x28>
 80035f0:	2f62      	cmp	r7, #98	@ 0x62
 80035f2:	d80a      	bhi.n	800360a <_printf_i+0x32>
 80035f4:	2f00      	cmp	r7, #0
 80035f6:	f000 80d2 	beq.w	800379e <_printf_i+0x1c6>
 80035fa:	2f58      	cmp	r7, #88	@ 0x58
 80035fc:	f000 80b9 	beq.w	8003772 <_printf_i+0x19a>
 8003600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003604:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003608:	e03a      	b.n	8003680 <_printf_i+0xa8>
 800360a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800360e:	2b15      	cmp	r3, #21
 8003610:	d8f6      	bhi.n	8003600 <_printf_i+0x28>
 8003612:	a101      	add	r1, pc, #4	@ (adr r1, 8003618 <_printf_i+0x40>)
 8003614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003618:	08003671 	.word	0x08003671
 800361c:	08003685 	.word	0x08003685
 8003620:	08003601 	.word	0x08003601
 8003624:	08003601 	.word	0x08003601
 8003628:	08003601 	.word	0x08003601
 800362c:	08003601 	.word	0x08003601
 8003630:	08003685 	.word	0x08003685
 8003634:	08003601 	.word	0x08003601
 8003638:	08003601 	.word	0x08003601
 800363c:	08003601 	.word	0x08003601
 8003640:	08003601 	.word	0x08003601
 8003644:	08003785 	.word	0x08003785
 8003648:	080036af 	.word	0x080036af
 800364c:	0800373f 	.word	0x0800373f
 8003650:	08003601 	.word	0x08003601
 8003654:	08003601 	.word	0x08003601
 8003658:	080037a7 	.word	0x080037a7
 800365c:	08003601 	.word	0x08003601
 8003660:	080036af 	.word	0x080036af
 8003664:	08003601 	.word	0x08003601
 8003668:	08003601 	.word	0x08003601
 800366c:	08003747 	.word	0x08003747
 8003670:	6833      	ldr	r3, [r6, #0]
 8003672:	1d1a      	adds	r2, r3, #4
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6032      	str	r2, [r6, #0]
 8003678:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800367c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003680:	2301      	movs	r3, #1
 8003682:	e09d      	b.n	80037c0 <_printf_i+0x1e8>
 8003684:	6833      	ldr	r3, [r6, #0]
 8003686:	6820      	ldr	r0, [r4, #0]
 8003688:	1d19      	adds	r1, r3, #4
 800368a:	6031      	str	r1, [r6, #0]
 800368c:	0606      	lsls	r6, r0, #24
 800368e:	d501      	bpl.n	8003694 <_printf_i+0xbc>
 8003690:	681d      	ldr	r5, [r3, #0]
 8003692:	e003      	b.n	800369c <_printf_i+0xc4>
 8003694:	0645      	lsls	r5, r0, #25
 8003696:	d5fb      	bpl.n	8003690 <_printf_i+0xb8>
 8003698:	f9b3 5000 	ldrsh.w	r5, [r3]
 800369c:	2d00      	cmp	r5, #0
 800369e:	da03      	bge.n	80036a8 <_printf_i+0xd0>
 80036a0:	232d      	movs	r3, #45	@ 0x2d
 80036a2:	426d      	negs	r5, r5
 80036a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036a8:	4859      	ldr	r0, [pc, #356]	@ (8003810 <_printf_i+0x238>)
 80036aa:	230a      	movs	r3, #10
 80036ac:	e011      	b.n	80036d2 <_printf_i+0xfa>
 80036ae:	6821      	ldr	r1, [r4, #0]
 80036b0:	6833      	ldr	r3, [r6, #0]
 80036b2:	0608      	lsls	r0, r1, #24
 80036b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80036b8:	d402      	bmi.n	80036c0 <_printf_i+0xe8>
 80036ba:	0649      	lsls	r1, r1, #25
 80036bc:	bf48      	it	mi
 80036be:	b2ad      	uxthmi	r5, r5
 80036c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80036c2:	4853      	ldr	r0, [pc, #332]	@ (8003810 <_printf_i+0x238>)
 80036c4:	6033      	str	r3, [r6, #0]
 80036c6:	bf14      	ite	ne
 80036c8:	230a      	movne	r3, #10
 80036ca:	2308      	moveq	r3, #8
 80036cc:	2100      	movs	r1, #0
 80036ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80036d2:	6866      	ldr	r6, [r4, #4]
 80036d4:	60a6      	str	r6, [r4, #8]
 80036d6:	2e00      	cmp	r6, #0
 80036d8:	bfa2      	ittt	ge
 80036da:	6821      	ldrge	r1, [r4, #0]
 80036dc:	f021 0104 	bicge.w	r1, r1, #4
 80036e0:	6021      	strge	r1, [r4, #0]
 80036e2:	b90d      	cbnz	r5, 80036e8 <_printf_i+0x110>
 80036e4:	2e00      	cmp	r6, #0
 80036e6:	d04b      	beq.n	8003780 <_printf_i+0x1a8>
 80036e8:	4616      	mov	r6, r2
 80036ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80036ee:	fb03 5711 	mls	r7, r3, r1, r5
 80036f2:	5dc7      	ldrb	r7, [r0, r7]
 80036f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80036f8:	462f      	mov	r7, r5
 80036fa:	42bb      	cmp	r3, r7
 80036fc:	460d      	mov	r5, r1
 80036fe:	d9f4      	bls.n	80036ea <_printf_i+0x112>
 8003700:	2b08      	cmp	r3, #8
 8003702:	d10b      	bne.n	800371c <_printf_i+0x144>
 8003704:	6823      	ldr	r3, [r4, #0]
 8003706:	07df      	lsls	r7, r3, #31
 8003708:	d508      	bpl.n	800371c <_printf_i+0x144>
 800370a:	6923      	ldr	r3, [r4, #16]
 800370c:	6861      	ldr	r1, [r4, #4]
 800370e:	4299      	cmp	r1, r3
 8003710:	bfde      	ittt	le
 8003712:	2330      	movle	r3, #48	@ 0x30
 8003714:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003718:	f106 36ff 	addle.w	r6, r6, #4294967295
 800371c:	1b92      	subs	r2, r2, r6
 800371e:	6122      	str	r2, [r4, #16]
 8003720:	f8cd a000 	str.w	sl, [sp]
 8003724:	464b      	mov	r3, r9
 8003726:	aa03      	add	r2, sp, #12
 8003728:	4621      	mov	r1, r4
 800372a:	4640      	mov	r0, r8
 800372c:	f7ff fee6 	bl	80034fc <_printf_common>
 8003730:	3001      	adds	r0, #1
 8003732:	d14a      	bne.n	80037ca <_printf_i+0x1f2>
 8003734:	f04f 30ff 	mov.w	r0, #4294967295
 8003738:	b004      	add	sp, #16
 800373a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	f043 0320 	orr.w	r3, r3, #32
 8003744:	6023      	str	r3, [r4, #0]
 8003746:	4833      	ldr	r0, [pc, #204]	@ (8003814 <_printf_i+0x23c>)
 8003748:	2778      	movs	r7, #120	@ 0x78
 800374a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	6831      	ldr	r1, [r6, #0]
 8003752:	061f      	lsls	r7, r3, #24
 8003754:	f851 5b04 	ldr.w	r5, [r1], #4
 8003758:	d402      	bmi.n	8003760 <_printf_i+0x188>
 800375a:	065f      	lsls	r7, r3, #25
 800375c:	bf48      	it	mi
 800375e:	b2ad      	uxthmi	r5, r5
 8003760:	6031      	str	r1, [r6, #0]
 8003762:	07d9      	lsls	r1, r3, #31
 8003764:	bf44      	itt	mi
 8003766:	f043 0320 	orrmi.w	r3, r3, #32
 800376a:	6023      	strmi	r3, [r4, #0]
 800376c:	b11d      	cbz	r5, 8003776 <_printf_i+0x19e>
 800376e:	2310      	movs	r3, #16
 8003770:	e7ac      	b.n	80036cc <_printf_i+0xf4>
 8003772:	4827      	ldr	r0, [pc, #156]	@ (8003810 <_printf_i+0x238>)
 8003774:	e7e9      	b.n	800374a <_printf_i+0x172>
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	f023 0320 	bic.w	r3, r3, #32
 800377c:	6023      	str	r3, [r4, #0]
 800377e:	e7f6      	b.n	800376e <_printf_i+0x196>
 8003780:	4616      	mov	r6, r2
 8003782:	e7bd      	b.n	8003700 <_printf_i+0x128>
 8003784:	6833      	ldr	r3, [r6, #0]
 8003786:	6825      	ldr	r5, [r4, #0]
 8003788:	6961      	ldr	r1, [r4, #20]
 800378a:	1d18      	adds	r0, r3, #4
 800378c:	6030      	str	r0, [r6, #0]
 800378e:	062e      	lsls	r6, r5, #24
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	d501      	bpl.n	8003798 <_printf_i+0x1c0>
 8003794:	6019      	str	r1, [r3, #0]
 8003796:	e002      	b.n	800379e <_printf_i+0x1c6>
 8003798:	0668      	lsls	r0, r5, #25
 800379a:	d5fb      	bpl.n	8003794 <_printf_i+0x1bc>
 800379c:	8019      	strh	r1, [r3, #0]
 800379e:	2300      	movs	r3, #0
 80037a0:	6123      	str	r3, [r4, #16]
 80037a2:	4616      	mov	r6, r2
 80037a4:	e7bc      	b.n	8003720 <_printf_i+0x148>
 80037a6:	6833      	ldr	r3, [r6, #0]
 80037a8:	1d1a      	adds	r2, r3, #4
 80037aa:	6032      	str	r2, [r6, #0]
 80037ac:	681e      	ldr	r6, [r3, #0]
 80037ae:	6862      	ldr	r2, [r4, #4]
 80037b0:	2100      	movs	r1, #0
 80037b2:	4630      	mov	r0, r6
 80037b4:	f7fc fd4c 	bl	8000250 <memchr>
 80037b8:	b108      	cbz	r0, 80037be <_printf_i+0x1e6>
 80037ba:	1b80      	subs	r0, r0, r6
 80037bc:	6060      	str	r0, [r4, #4]
 80037be:	6863      	ldr	r3, [r4, #4]
 80037c0:	6123      	str	r3, [r4, #16]
 80037c2:	2300      	movs	r3, #0
 80037c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037c8:	e7aa      	b.n	8003720 <_printf_i+0x148>
 80037ca:	6923      	ldr	r3, [r4, #16]
 80037cc:	4632      	mov	r2, r6
 80037ce:	4649      	mov	r1, r9
 80037d0:	4640      	mov	r0, r8
 80037d2:	47d0      	blx	sl
 80037d4:	3001      	adds	r0, #1
 80037d6:	d0ad      	beq.n	8003734 <_printf_i+0x15c>
 80037d8:	6823      	ldr	r3, [r4, #0]
 80037da:	079b      	lsls	r3, r3, #30
 80037dc:	d413      	bmi.n	8003806 <_printf_i+0x22e>
 80037de:	68e0      	ldr	r0, [r4, #12]
 80037e0:	9b03      	ldr	r3, [sp, #12]
 80037e2:	4298      	cmp	r0, r3
 80037e4:	bfb8      	it	lt
 80037e6:	4618      	movlt	r0, r3
 80037e8:	e7a6      	b.n	8003738 <_printf_i+0x160>
 80037ea:	2301      	movs	r3, #1
 80037ec:	4632      	mov	r2, r6
 80037ee:	4649      	mov	r1, r9
 80037f0:	4640      	mov	r0, r8
 80037f2:	47d0      	blx	sl
 80037f4:	3001      	adds	r0, #1
 80037f6:	d09d      	beq.n	8003734 <_printf_i+0x15c>
 80037f8:	3501      	adds	r5, #1
 80037fa:	68e3      	ldr	r3, [r4, #12]
 80037fc:	9903      	ldr	r1, [sp, #12]
 80037fe:	1a5b      	subs	r3, r3, r1
 8003800:	42ab      	cmp	r3, r5
 8003802:	dcf2      	bgt.n	80037ea <_printf_i+0x212>
 8003804:	e7eb      	b.n	80037de <_printf_i+0x206>
 8003806:	2500      	movs	r5, #0
 8003808:	f104 0619 	add.w	r6, r4, #25
 800380c:	e7f5      	b.n	80037fa <_printf_i+0x222>
 800380e:	bf00      	nop
 8003810:	0800392d 	.word	0x0800392d
 8003814:	0800393e 	.word	0x0800393e

08003818 <memmove>:
 8003818:	4288      	cmp	r0, r1
 800381a:	b510      	push	{r4, lr}
 800381c:	eb01 0402 	add.w	r4, r1, r2
 8003820:	d902      	bls.n	8003828 <memmove+0x10>
 8003822:	4284      	cmp	r4, r0
 8003824:	4623      	mov	r3, r4
 8003826:	d807      	bhi.n	8003838 <memmove+0x20>
 8003828:	1e43      	subs	r3, r0, #1
 800382a:	42a1      	cmp	r1, r4
 800382c:	d008      	beq.n	8003840 <memmove+0x28>
 800382e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003832:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003836:	e7f8      	b.n	800382a <memmove+0x12>
 8003838:	4402      	add	r2, r0
 800383a:	4601      	mov	r1, r0
 800383c:	428a      	cmp	r2, r1
 800383e:	d100      	bne.n	8003842 <memmove+0x2a>
 8003840:	bd10      	pop	{r4, pc}
 8003842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800384a:	e7f7      	b.n	800383c <memmove+0x24>

0800384c <_sbrk_r>:
 800384c:	b538      	push	{r3, r4, r5, lr}
 800384e:	4d06      	ldr	r5, [pc, #24]	@ (8003868 <_sbrk_r+0x1c>)
 8003850:	2300      	movs	r3, #0
 8003852:	4604      	mov	r4, r0
 8003854:	4608      	mov	r0, r1
 8003856:	602b      	str	r3, [r5, #0]
 8003858:	f7fd f81c 	bl	8000894 <_sbrk>
 800385c:	1c43      	adds	r3, r0, #1
 800385e:	d102      	bne.n	8003866 <_sbrk_r+0x1a>
 8003860:	682b      	ldr	r3, [r5, #0]
 8003862:	b103      	cbz	r3, 8003866 <_sbrk_r+0x1a>
 8003864:	6023      	str	r3, [r4, #0]
 8003866:	bd38      	pop	{r3, r4, r5, pc}
 8003868:	200002dc 	.word	0x200002dc

0800386c <memcpy>:
 800386c:	440a      	add	r2, r1
 800386e:	4291      	cmp	r1, r2
 8003870:	f100 33ff 	add.w	r3, r0, #4294967295
 8003874:	d100      	bne.n	8003878 <memcpy+0xc>
 8003876:	4770      	bx	lr
 8003878:	b510      	push	{r4, lr}
 800387a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800387e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003882:	4291      	cmp	r1, r2
 8003884:	d1f9      	bne.n	800387a <memcpy+0xe>
 8003886:	bd10      	pop	{r4, pc}

08003888 <_realloc_r>:
 8003888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800388c:	4680      	mov	r8, r0
 800388e:	4615      	mov	r5, r2
 8003890:	460c      	mov	r4, r1
 8003892:	b921      	cbnz	r1, 800389e <_realloc_r+0x16>
 8003894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003898:	4611      	mov	r1, r2
 800389a:	f7ff bc4b 	b.w	8003134 <_malloc_r>
 800389e:	b92a      	cbnz	r2, 80038ac <_realloc_r+0x24>
 80038a0:	f7ff fbdc 	bl	800305c <_free_r>
 80038a4:	2400      	movs	r4, #0
 80038a6:	4620      	mov	r0, r4
 80038a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038ac:	f000 f81a 	bl	80038e4 <_malloc_usable_size_r>
 80038b0:	4285      	cmp	r5, r0
 80038b2:	4606      	mov	r6, r0
 80038b4:	d802      	bhi.n	80038bc <_realloc_r+0x34>
 80038b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80038ba:	d8f4      	bhi.n	80038a6 <_realloc_r+0x1e>
 80038bc:	4629      	mov	r1, r5
 80038be:	4640      	mov	r0, r8
 80038c0:	f7ff fc38 	bl	8003134 <_malloc_r>
 80038c4:	4607      	mov	r7, r0
 80038c6:	2800      	cmp	r0, #0
 80038c8:	d0ec      	beq.n	80038a4 <_realloc_r+0x1c>
 80038ca:	42b5      	cmp	r5, r6
 80038cc:	462a      	mov	r2, r5
 80038ce:	4621      	mov	r1, r4
 80038d0:	bf28      	it	cs
 80038d2:	4632      	movcs	r2, r6
 80038d4:	f7ff ffca 	bl	800386c <memcpy>
 80038d8:	4621      	mov	r1, r4
 80038da:	4640      	mov	r0, r8
 80038dc:	f7ff fbbe 	bl	800305c <_free_r>
 80038e0:	463c      	mov	r4, r7
 80038e2:	e7e0      	b.n	80038a6 <_realloc_r+0x1e>

080038e4 <_malloc_usable_size_r>:
 80038e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038e8:	1f18      	subs	r0, r3, #4
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	bfbc      	itt	lt
 80038ee:	580b      	ldrlt	r3, [r1, r0]
 80038f0:	18c0      	addlt	r0, r0, r3
 80038f2:	4770      	bx	lr

080038f4 <_init>:
 80038f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f6:	bf00      	nop
 80038f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038fa:	bc08      	pop	{r3}
 80038fc:	469e      	mov	lr, r3
 80038fe:	4770      	bx	lr

08003900 <_fini>:
 8003900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003902:	bf00      	nop
 8003904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003906:	bc08      	pop	{r3}
 8003908:	469e      	mov	lr, r3
 800390a:	4770      	bx	lr
