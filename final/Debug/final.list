
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a78  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005c78  08005c78  00006c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cd4  08005cd4  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005cd4  08005cd4  00006cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cdc  08005cdc  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cdc  08005cdc  00006cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ce0  08005ce0  00006ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005ce4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000060  08005d44  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08005d44  00007344  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012168  00000000  00000000  0000708e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a0  00000000  00000000  000191f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  0001bb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bbe  00000000  00000000  0001cab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002903e  00000000  00000000  0001d66e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001477a  00000000  00000000  000466ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100d76  00000000  00000000  0005ae26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015bb9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004348  00000000  00000000  0015bbe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0015ff28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	08005c60 	.word	0x08005c60

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	08005c60 	.word	0x08005c60

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005f2:	4b21      	ldr	r3, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x98>)
 80005f4:	4a21      	ldr	r2, [pc, #132]	@ (800067c <MX_ADC1_Init+0x9c>)
 80005f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000678 <MX_ADC1_Init+0x98>)
 80005fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000600:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000606:	4b1c      	ldr	r3, [pc, #112]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800060c:	4b1a      	ldr	r3, [pc, #104]	@ (8000678 <MX_ADC1_Init+0x98>)
 800060e:	2201      	movs	r2, #1
 8000610:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000612:	4b19      	ldr	r3, [pc, #100]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061a:	4b17      	ldr	r3, [pc, #92]	@ (8000678 <MX_ADC1_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000620:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000622:	4a17      	ldr	r2, [pc, #92]	@ (8000680 <MX_ADC1_Init+0xa0>)
 8000624:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000626:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800062c:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <MX_ADC1_Init+0x98>)
 800062e:	2201      	movs	r2, #1
 8000630:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000632:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800063a:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000640:	480d      	ldr	r0, [pc, #52]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000642:	f000 fdb5 	bl	80011b0 <HAL_ADC_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800064c:	f000 fa6e 	bl	8000b2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000650:	2300      	movs	r3, #0
 8000652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000654:	2301      	movs	r3, #1
 8000656:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	4619      	mov	r1, r3
 8000660:	4805      	ldr	r0, [pc, #20]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000662:	f000 ff01 	bl	8001468 <HAL_ADC_ConfigChannel>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800066c:	f000 fa5e 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	2000007c 	.word	0x2000007c
 800067c:	40012000 	.word	0x40012000
 8000680:	0f000001 	.word	0x0f000001

08000684 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	@ 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a15      	ldr	r2, [pc, #84]	@ (80006f8 <HAL_ADC_MspInit+0x74>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d123      	bne.n	80006ee <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a6:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006aa:	4a14      	ldr	r2, [pc, #80]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80006b2:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a0e      	ldr	r2, [pc, #56]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d6:	2301      	movs	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006da:	2303      	movs	r3, #3
 80006dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4619      	mov	r1, r3
 80006e8:	4805      	ldr	r0, [pc, #20]	@ (8000700 <HAL_ADC_MspInit+0x7c>)
 80006ea:	f001 fba7 	bl	8001e3c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	@ 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40012000 	.word	0x40012000
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020000 	.word	0x40020000

08000704 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	@ 0x28
 8000708:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	4b3d      	ldr	r3, [pc, #244]	@ (8000810 <MX_GPIO_Init+0x10c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a3c      	ldr	r2, [pc, #240]	@ (8000810 <MX_GPIO_Init+0x10c>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b3a      	ldr	r3, [pc, #232]	@ (8000810 <MX_GPIO_Init+0x10c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	4b37      	ldr	r3, [pc, #220]	@ (8000810 <MX_GPIO_Init+0x10c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a36      	ldr	r2, [pc, #216]	@ (8000810 <MX_GPIO_Init+0x10c>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b34      	ldr	r3, [pc, #208]	@ (8000810 <MX_GPIO_Init+0x10c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	4b31      	ldr	r3, [pc, #196]	@ (8000810 <MX_GPIO_Init+0x10c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a30      	ldr	r2, [pc, #192]	@ (8000810 <MX_GPIO_Init+0x10c>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b2e      	ldr	r3, [pc, #184]	@ (8000810 <MX_GPIO_Init+0x10c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000762:	4b2b      	ldr	r3, [pc, #172]	@ (8000810 <MX_GPIO_Init+0x10c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a2a      	ldr	r2, [pc, #168]	@ (8000810 <MX_GPIO_Init+0x10c>)
 8000768:	f043 0308 	orr.w	r3, r3, #8
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b28      	ldr	r3, [pc, #160]	@ (8000810 <MX_GPIO_Init+0x10c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0308 	and.w	r3, r3, #8
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000780:	4824      	ldr	r0, [pc, #144]	@ (8000814 <MX_GPIO_Init+0x110>)
 8000782:	f001 fd07 	bl	8002194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000786:	2301      	movs	r3, #1
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800078a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800078e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	481f      	ldr	r0, [pc, #124]	@ (8000818 <MX_GPIO_Init+0x114>)
 800079c:	f001 fb4e 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80007a0:	2306      	movs	r3, #6
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	4817      	ldr	r0, [pc, #92]	@ (8000814 <MX_GPIO_Init+0x110>)
 80007b6:	f001 fb41 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	4810      	ldr	r0, [pc, #64]	@ (8000814 <MX_GPIO_Init+0x110>)
 80007d4:	f001 fb32 	bl	8001e3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	2102      	movs	r1, #2
 80007dc:	2006      	movs	r0, #6
 80007de:	f001 f9f0 	bl	8001bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007e2:	2006      	movs	r0, #6
 80007e4:	f001 fa09 	bl	8001bfa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2102      	movs	r1, #2
 80007ec:	2007      	movs	r0, #7
 80007ee:	f001 f9e8 	bl	8001bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007f2:	2007      	movs	r0, #7
 80007f4:	f001 fa01 	bl	8001bfa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2101      	movs	r1, #1
 80007fc:	2008      	movs	r0, #8
 80007fe:	f001 f9e0 	bl	8001bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000802:	2008      	movs	r0, #8
 8000804:	f001 f9f9 	bl	8001bfa <HAL_NVIC_EnableIRQ>

}
 8000808:	bf00      	nop
 800080a:	3728      	adds	r7, #40	@ 0x28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	40020400 	.word	0x40020400
 8000818:	40020800 	.word	0x40020800

0800081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000822:	f000 f957 	bl	8000ad4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000826:	f000 fc42 	bl	80010ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082a:	f000 f85d 	bl	80008e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082e:	f7ff ff69 	bl	8000704 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000832:	f7ff fed5 	bl	80005e0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000836:	f000 fa43 	bl	8000cc0 <MX_TIM2_Init>
  MX_TIM4_Init();
 800083a:	f000 fa8f 	bl	8000d5c <MX_TIM4_Init>
  MX_USART3_UART_Init();
 800083e:	f000 fb7d 	bl	8000f3c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 8000842:	4820      	ldr	r0, [pc, #128]	@ (80008c4 <main+0xa8>)
 8000844:	f002 fe3c 	bl	80034c0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000848:	2100      	movs	r1, #0
 800084a:	481f      	ldr	r0, [pc, #124]	@ (80008c8 <main+0xac>)
 800084c:	f002 ff12 	bl	8003674 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, adc_val_buffer, 1);
 8000850:	2201      	movs	r2, #1
 8000852:	491e      	ldr	r1, [pc, #120]	@ (80008cc <main+0xb0>)
 8000854:	481e      	ldr	r0, [pc, #120]	@ (80008d0 <main+0xb4>)
 8000856:	f000 fcef 	bl	8001238 <HAL_ADC_Start_DMA>

  float dutyCycle = 1.0;
 800085a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800085e:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (act == 1){
 8000860:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <main+0xb8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d1fb      	bne.n	8000860 <main+0x44>

		  pwm = (GPIOD->IDR & GPIO_PIN_12) >> 12;
 8000868:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <main+0xbc>)
 800086a:	691b      	ldr	r3, [r3, #16]
 800086c:	0b1b      	lsrs	r3, r3, #12
 800086e:	b2db      	uxtb	r3, r3
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b19      	ldr	r3, [pc, #100]	@ (80008dc <main+0xc0>)
 8000878:	701a      	strb	r2, [r3, #0]
		  htim4.Instance->CCR1 = (10000 - 1) * dutyCycle;
 800087a:	edd7 7a01 	vldr	s15, [r7, #4]
 800087e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80008e0 <main+0xc4>
 8000882:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <main+0xac>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800088e:	ee17 2a90 	vmov	r2, s15
 8000892:	635a      	str	r2, [r3, #52]	@ 0x34
		  HAL_Delay(1000);
 8000894:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000898:	f000 fc66 	bl	8001168 <HAL_Delay>
		  dutyCycle -= 0.25;
 800089c:	edd7 7a01 	vldr	s15, [r7, #4]
 80008a0:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80008a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80008a8:	edc7 7a01 	vstr	s15, [r7, #4]
		  if(dutyCycle < 0.0){
 80008ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80008b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b8:	d502      	bpl.n	80008c0 <main+0xa4>
//			  dutyCycle = 1.0;
			  pl=0;
 80008ba:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <main+0xc8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
	  if (act == 1){
 80008c0:	e7ce      	b.n	8000860 <main+0x44>
 80008c2:	bf00      	nop
 80008c4:	200000d8 	.word	0x200000d8
 80008c8:	20000124 	.word	0x20000124
 80008cc:	200000d0 	.word	0x200000d0
 80008d0:	2000007c 	.word	0x2000007c
 80008d4:	200000c8 	.word	0x200000c8
 80008d8:	40020c00 	.word	0x40020c00
 80008dc:	200000c4 	.word	0x200000c4
 80008e0:	461c3c00 	.word	0x461c3c00
 80008e4:	200000cc 	.word	0x200000cc

080008e8 <SystemClock_Config>:

  /* USER CODE END 3 */
}

void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b094      	sub	sp, #80	@ 0x50
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	2234      	movs	r2, #52	@ 0x34
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f004 fd32 	bl	8005360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800090c:	4b2b      	ldr	r3, [pc, #172]	@ (80009bc <SystemClock_Config+0xd4>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000910:	4a2a      	ldr	r2, [pc, #168]	@ (80009bc <SystemClock_Config+0xd4>)
 8000912:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000916:	6413      	str	r3, [r2, #64]	@ 0x40
 8000918:	4b28      	ldr	r3, [pc, #160]	@ (80009bc <SystemClock_Config+0xd4>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000924:	4b26      	ldr	r3, [pc, #152]	@ (80009c0 <SystemClock_Config+0xd8>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a25      	ldr	r2, [pc, #148]	@ (80009c0 <SystemClock_Config+0xd8>)
 800092a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800092e:	6013      	str	r3, [r2, #0]
 8000930:	4b23      	ldr	r3, [pc, #140]	@ (80009c0 <SystemClock_Config+0xd8>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800093c:	2302      	movs	r3, #2
 800093e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000940:	2301      	movs	r3, #1
 8000942:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000944:	2310      	movs	r3, #16
 8000946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000948:	2302      	movs	r3, #2
 800094a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800094c:	2300      	movs	r3, #0
 800094e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000950:	2308      	movs	r3, #8
 8000952:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000954:	23d8      	movs	r3, #216	@ 0xd8
 8000956:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000958:	2302      	movs	r3, #2
 800095a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800095c:	2302      	movs	r3, #2
 800095e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000960:	2302      	movs	r3, #2
 8000962:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4618      	mov	r0, r3
 800096a:	f001 fc95 	bl	8002298 <HAL_RCC_OscConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000974:	f000 f8da 	bl	8000b2c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000978:	f001 fc3e 	bl	80021f8 <HAL_PWREx_EnableOverDrive>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000982:	f000 f8d3 	bl	8000b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000986:	230f      	movs	r3, #15
 8000988:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098a:	2302      	movs	r3, #2
 800098c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000992:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000996:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000998:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800099c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	2107      	movs	r1, #7
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 ff25 	bl	80027f4 <HAL_RCC_ClockConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80009b0:	f000 f8bc 	bl	8000b2c <Error_Handler>
  }
}
 80009b4:	bf00      	nop
 80009b6:	3750      	adds	r7, #80	@ 0x50
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40007000 	.word	0x40007000

080009c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b09c      	sub	sp, #112	@ 0x70
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

    if (htim->Instance == TIM2) {
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009d4:	d134      	bne.n	8000a40 <HAL_TIM_PeriodElapsedCallback+0x7c>
    	if(pl == 0){
 80009d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d130      	bne.n	8000a40 <HAL_TIM_PeriodElapsedCallback+0x7c>
			if (counter >= 1002) {
 80009de:	4b1b      	ldr	r3, [pc, #108]	@ (8000a4c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d904      	bls.n	80009f4 <HAL_TIM_PeriodElapsedCallback+0x30>
				counter = counter - 2;  // Decrement the counter
 80009ea:	4b18      	ldr	r3, [pc, #96]	@ (8000a4c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	3b02      	subs	r3, #2
 80009f0:	4a16      	ldr	r2, [pc, #88]	@ (8000a4c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80009f2:	6013      	str	r3, [r2, #0]
			}
			char uartBuffer[100];
			sprintf(uartBuffer, "%d\r\n", counter);
 80009f4:	4b15      	ldr	r3, [pc, #84]	@ (8000a4c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	4914      	ldr	r1, [pc, #80]	@ (8000a50 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80009fe:	4618      	mov	r0, r3
 8000a00:	f004 fc8e 	bl	8005320 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fc19 	bl	8000240 <strlen>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	f107 010c 	add.w	r1, r7, #12
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	480e      	ldr	r0, [pc, #56]	@ (8000a54 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a1c:	f003 ff76 	bl	800490c <HAL_UART_Transmit>
			if(counter == 1002){
 8000a20:	4b0a      	ldr	r3, [pc, #40]	@ (8000a4c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f240 32ea 	movw	r2, #1002	@ 0x3ea
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d109      	bne.n	8000a40 <HAL_TIM_PeriodElapsedCallback+0x7c>
				HAL_UART_Transmit(&huart3, (uint8_t*)"STOP", strlen("STOP"), HAL_MAX_DELAY);
 8000a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a30:	2204      	movs	r2, #4
 8000a32:	4909      	ldr	r1, [pc, #36]	@ (8000a58 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000a34:	4807      	ldr	r0, [pc, #28]	@ (8000a54 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a36:	f003 ff69 	bl	800490c <HAL_UART_Transmit>
				act = 0;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
			}
    	}
    }
}
 8000a40:	bf00      	nop
 8000a42:	3770      	adds	r7, #112	@ 0x70
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200000cc 	.word	0x200000cc
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	08005c78 	.word	0x08005c78
 8000a54:	20000170 	.word	0x20000170
 8000a58:	08005c80 	.word	0x08005c80
 8000a5c:	200000c8 	.word	0x200000c8

08000a60 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0){
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d105      	bne.n	8000a7c <HAL_GPIO_EXTI_Callback+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a76:	4813      	ldr	r0, [pc, #76]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000a78:	f001 fb8c 	bl	8002194 <HAL_GPIO_WritePin>
	}
	if(GPIO_Pin == GPIO_PIN_1){
 8000a7c:	88fb      	ldrh	r3, [r7, #6]
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d10c      	bne.n	8000a9c <HAL_GPIO_EXTI_Callback+0x3c>
		  HAL_Delay(200);
 8000a82:	20c8      	movs	r0, #200	@ 0xc8
 8000a84:	f000 fb70 	bl	8001168 <HAL_Delay>
		  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000a88:	2100      	movs	r1, #0
 8000a8a:	480f      	ldr	r0, [pc, #60]	@ (8000ac8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000a8c:	f002 fdf2 	bl	8003674 <HAL_TIM_PWM_Start>
		  pl=1;
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <HAL_GPIO_EXTI_Callback+0x6c>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	601a      	str	r2, [r3, #0]
		  act = 1;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	601a      	str	r2, [r3, #0]
	}
	if (GPIO_Pin == GPIO_PIN_2){
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d10c      	bne.n	8000abc <HAL_GPIO_EXTI_Callback+0x5c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000aa8:	4806      	ldr	r0, [pc, #24]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000aaa:	f001 fb73 	bl	8002194 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000ab2:	f002 fed9 	bl	8003868 <HAL_TIM_PWM_Stop>
		act = 1;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	601a      	str	r2, [r3, #0]
	}
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	20000124 	.word	0x20000124
 8000acc:	200000cc 	.word	0x200000cc
 8000ad0:	200000c8 	.word	0x200000c8

08000ad4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ada:	463b      	mov	r3, r7
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ae6:	f001 f8a3 	bl	8001c30 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000aea:	2301      	movs	r3, #1
 8000aec:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000af6:	231f      	movs	r3, #31
 8000af8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000afa:	2387      	movs	r3, #135	@ 0x87
 8000afc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b02:	2300      	movs	r3, #0
 8000b04:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b06:	2301      	movs	r3, #1
 8000b08:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b16:	463b      	mov	r3, r7
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f001 f8c1 	bl	8001ca0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b1e:	2004      	movs	r0, #4
 8000b20:	f001 f89e 	bl	8001c60 <HAL_MPU_Enable>

}
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <Error_Handler+0x8>

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <HAL_MspInit+0x44>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b42:	4a0e      	ldr	r2, [pc, #56]	@ (8000b7c <HAL_MspInit+0x44>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <HAL_MspInit+0x44>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <HAL_MspInit+0x44>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5a:	4a08      	ldr	r2, [pc, #32]	@ (8000b7c <HAL_MspInit+0x44>)
 8000b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_MspInit+0x44>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000b6e:	2005      	movs	r0, #5
 8000b70:	f001 f81c 	bl	8001bac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <NMI_Handler+0x4>

08000b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <MemManage_Handler+0x4>

08000b98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd6:	f000 faa7 	bl	8001128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000be2:	2001      	movs	r0, #1
 8000be4:	f001 faf0 	bl	80021c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f001 fae9 	bl	80021c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000bfe:	2004      	movs	r0, #4
 8000c00:	f001 fae2 	bl	80021c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c0c:	4802      	ldr	r0, [pc, #8]	@ (8000c18 <TIM2_IRQHandler+0x10>)
 8000c0e:	f002 feab 	bl	8003968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200000d8 	.word	0x200000d8

08000c1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c20:	4802      	ldr	r0, [pc, #8]	@ (8000c2c <TIM4_IRQHandler+0x10>)
 8000c22:	f002 fea1 	bl	8003968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000124 	.word	0x20000124

08000c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c38:	4a14      	ldr	r2, [pc, #80]	@ (8000c8c <_sbrk+0x5c>)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <_sbrk+0x60>)
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c44:	4b13      	ldr	r3, [pc, #76]	@ (8000c94 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <_sbrk+0x64>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	@ (8000c98 <_sbrk+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c52:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d207      	bcs.n	8000c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c60:	f004 fb86 	bl	8005370 <__errno>
 8000c64:	4603      	mov	r3, r0
 8000c66:	220c      	movs	r2, #12
 8000c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e009      	b.n	8000c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c70:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c76:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a05      	ldr	r2, [pc, #20]	@ (8000c94 <_sbrk+0x64>)
 8000c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20080000 	.word	0x20080000
 8000c90:	00000400 	.word	0x00000400
 8000c94:	200000d4 	.word	0x200000d4
 8000c98:	20000348 	.word	0x20000348

08000c9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cde:	4b1e      	ldr	r3, [pc, #120]	@ (8000d58 <MX_TIM2_Init+0x98>)
 8000ce0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ce4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 21600-1;
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d58 <MX_TIM2_Init+0x98>)
 8000ce8:	f245 425f 	movw	r2, #21599	@ 0x545f
 8000cec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000cee:	4b1a      	ldr	r3, [pc, #104]	@ (8000d58 <MX_TIM2_Init+0x98>)
 8000cf0:	2210      	movs	r2, #16
 8000cf2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10190-1;
 8000cf4:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <MX_TIM2_Init+0x98>)
 8000cf6:	f242 72cd 	movw	r2, #10189	@ 0x27cd
 8000cfa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfc:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <MX_TIM2_Init+0x98>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <MX_TIM2_Init+0x98>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d08:	4813      	ldr	r0, [pc, #76]	@ (8000d58 <MX_TIM2_Init+0x98>)
 8000d0a:	f002 fb81 	bl	8003410 <HAL_TIM_Base_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000d14:	f7ff ff0a 	bl	8000b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d1e:	f107 0310 	add.w	r3, r7, #16
 8000d22:	4619      	mov	r1, r3
 8000d24:	480c      	ldr	r0, [pc, #48]	@ (8000d58 <MX_TIM2_Init+0x98>)
 8000d26:	f003 f83b 	bl	8003da0 <HAL_TIM_ConfigClockSource>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000d30:	f7ff fefc 	bl	8000b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d34:	2300      	movs	r3, #0
 8000d36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <MX_TIM2_Init+0x98>)
 8000d42:	f003 fce9 	bl	8004718 <HAL_TIMEx_MasterConfigSynchronization>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000d4c:	f7ff feee 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	3720      	adds	r7, #32
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	200000d8 	.word	0x200000d8

08000d5c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08e      	sub	sp, #56	@ 0x38
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]
 8000d8a:	615a      	str	r2, [r3, #20]
 8000d8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d8e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e44 <MX_TIM4_Init+0xe8>)
 8000d90:	4a2d      	ldr	r2, [pc, #180]	@ (8000e48 <MX_TIM4_Init+0xec>)
 8000d92:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d94:	4b2b      	ldr	r3, [pc, #172]	@ (8000e44 <MX_TIM4_Init+0xe8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e44 <MX_TIM4_Init+0xe8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000da0:	4b28      	ldr	r3, [pc, #160]	@ (8000e44 <MX_TIM4_Init+0xe8>)
 8000da2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000da6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da8:	4b26      	ldr	r3, [pc, #152]	@ (8000e44 <MX_TIM4_Init+0xe8>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dae:	4b25      	ldr	r3, [pc, #148]	@ (8000e44 <MX_TIM4_Init+0xe8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000db4:	4823      	ldr	r0, [pc, #140]	@ (8000e44 <MX_TIM4_Init+0xe8>)
 8000db6:	f002 fb2b 	bl	8003410 <HAL_TIM_Base_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000dc0:	f7ff feb4 	bl	8000b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000dca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	481c      	ldr	r0, [pc, #112]	@ (8000e44 <MX_TIM4_Init+0xe8>)
 8000dd2:	f002 ffe5 	bl	8003da0 <HAL_TIM_ConfigClockSource>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000ddc:	f7ff fea6 	bl	8000b2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000de0:	4818      	ldr	r0, [pc, #96]	@ (8000e44 <MX_TIM4_Init+0xe8>)
 8000de2:	f002 fbe5 	bl	80035b0 <HAL_TIM_PWM_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000dec:	f7ff fe9e 	bl	8000b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4811      	ldr	r0, [pc, #68]	@ (8000e44 <MX_TIM4_Init+0xe8>)
 8000e00:	f003 fc8a 	bl	8004718 <HAL_TIMEx_MasterConfigSynchronization>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000e0a:	f7ff fe8f 	bl	8000b2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e0e:	2360      	movs	r3, #96	@ 0x60
 8000e10:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e1e:	463b      	mov	r3, r7
 8000e20:	2200      	movs	r2, #0
 8000e22:	4619      	mov	r1, r3
 8000e24:	4807      	ldr	r0, [pc, #28]	@ (8000e44 <MX_TIM4_Init+0xe8>)
 8000e26:	f002 fea7 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000e30:	f7ff fe7c 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e34:	4803      	ldr	r0, [pc, #12]	@ (8000e44 <MX_TIM4_Init+0xe8>)
 8000e36:	f000 f849 	bl	8000ecc <HAL_TIM_MspPostInit>

}
 8000e3a:	bf00      	nop
 8000e3c:	3738      	adds	r7, #56	@ 0x38
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000124 	.word	0x20000124
 8000e48:	40000800 	.word	0x40000800

08000e4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e5c:	d114      	bne.n	8000e88 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x78>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e62:	4a18      	ldr	r2, [pc, #96]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x78>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x78>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2103      	movs	r1, #3
 8000e7a:	201c      	movs	r0, #28
 8000e7c:	f000 fea1 	bl	8001bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e80:	201c      	movs	r0, #28
 8000e82:	f000 feba 	bl	8001bfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000e86:	e018      	b.n	8000eba <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec8 <HAL_TIM_Base_MspInit+0x7c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d113      	bne.n	8000eba <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x78>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x78>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x78>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	f003 0304 	and.w	r3, r3, #4
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2103      	movs	r1, #3
 8000eae:	201e      	movs	r0, #30
 8000eb0:	f000 fe87 	bl	8001bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000eb4:	201e      	movs	r0, #30
 8000eb6:	f000 fea0 	bl	8001bfa <HAL_NVIC_EnableIRQ>
}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40000800 	.word	0x40000800

08000ecc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a11      	ldr	r2, [pc, #68]	@ (8000f30 <HAL_TIM_MspPostInit+0x64>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d11c      	bne.n	8000f28 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eee:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <HAL_TIM_MspPostInit+0x68>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a10      	ldr	r2, [pc, #64]	@ (8000f34 <HAL_TIM_MspPostInit+0x68>)
 8000ef4:	f043 0308 	orr.w	r3, r3, #8
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <HAL_TIM_MspPostInit+0x68>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0308 	and.w	r3, r3, #8
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	4619      	mov	r1, r3
 8000f22:	4805      	ldr	r0, [pc, #20]	@ (8000f38 <HAL_TIM_MspPostInit+0x6c>)
 8000f24:	f000 ff8a 	bl	8001e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000f28:	bf00      	nop
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40000800 	.word	0x40000800
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020c00 	.word	0x40020c00

08000f3c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f40:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <MX_USART3_UART_Init+0x58>)
 8000f42:	4a15      	ldr	r2, [pc, #84]	@ (8000f98 <MX_USART3_UART_Init+0x5c>)
 8000f44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f46:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <MX_USART3_UART_Init+0x58>)
 8000f48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <MX_USART3_UART_Init+0x58>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <MX_USART3_UART_Init+0x58>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <MX_USART3_UART_Init+0x58>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <MX_USART3_UART_Init+0x58>)
 8000f62:	220c      	movs	r2, #12
 8000f64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <MX_USART3_UART_Init+0x58>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <MX_USART3_UART_Init+0x58>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <MX_USART3_UART_Init+0x58>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <MX_USART3_UART_Init+0x58>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	@ (8000f94 <MX_USART3_UART_Init+0x58>)
 8000f80:	f003 fc76 	bl	8004870 <HAL_UART_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f8a:	f7ff fdcf 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000170 	.word	0x20000170
 8000f98:	40004800 	.word	0x40004800

08000f9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0ae      	sub	sp, #184	@ 0xb8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2290      	movs	r2, #144	@ 0x90
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f004 f9cf 	bl	8005360 <memset>
  if(uartHandle->Instance==USART3)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a22      	ldr	r2, [pc, #136]	@ (8001050 <HAL_UART_MspInit+0xb4>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d13c      	bne.n	8001046 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fd0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f001 fdf0 	bl	8002bc0 <HAL_RCCEx_PeriphCLKConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fe6:	f7ff fda1 	bl	8000b2c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fea:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <HAL_UART_MspInit+0xb8>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	4a19      	ldr	r2, [pc, #100]	@ (8001054 <HAL_UART_MspInit+0xb8>)
 8000ff0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff6:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <HAL_UART_MspInit+0xb8>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001002:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <HAL_UART_MspInit+0xb8>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a13      	ldr	r2, [pc, #76]	@ (8001054 <HAL_UART_MspInit+0xb8>)
 8001008:	f043 0308 	orr.w	r3, r3, #8
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <HAL_UART_MspInit+0xb8>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800101a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800101e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001034:	2307      	movs	r3, #7
 8001036:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800103a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	@ (8001058 <HAL_UART_MspInit+0xbc>)
 8001042:	f000 fefb 	bl	8001e3c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001046:	bf00      	nop
 8001048:	37b8      	adds	r7, #184	@ 0xb8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40004800 	.word	0x40004800
 8001054:	40023800 	.word	0x40023800
 8001058:	40020c00 	.word	0x40020c00

0800105c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800105c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001094 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001060:	f7ff fe1c 	bl	8000c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001064:	480c      	ldr	r0, [pc, #48]	@ (8001098 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001066:	490d      	ldr	r1, [pc, #52]	@ (800109c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001068:	4a0d      	ldr	r2, [pc, #52]	@ (80010a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800107c:	4c0a      	ldr	r4, [pc, #40]	@ (80010a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800108a:	f004 f977 	bl	800537c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108e:	f7ff fbc5 	bl	800081c <main>
  bx  lr    
 8001092:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001094:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800109c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80010a0:	08005ce4 	.word	0x08005ce4
  ldr r2, =_sbss
 80010a4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80010a8:	20000344 	.word	0x20000344

080010ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010ac:	e7fe      	b.n	80010ac <ADC_IRQHandler>

080010ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b2:	2003      	movs	r0, #3
 80010b4:	f000 fd7a 	bl	8001bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010b8:	2000      	movs	r0, #0
 80010ba:	f000 f805 	bl	80010c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010be:	f7ff fd3b 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <HAL_InitTick+0x54>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <HAL_InitTick+0x58>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010de:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 fd95 	bl	8001c16 <HAL_SYSTICK_Config>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00e      	b.n	8001114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b0f      	cmp	r3, #15
 80010fa:	d80a      	bhi.n	8001112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fc:	2200      	movs	r2, #0
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f000 fd5d 	bl	8001bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001108:	4a06      	ldr	r2, [pc, #24]	@ (8001124 <HAL_InitTick+0x5c>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	e000      	b.n	8001114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000004 	.word	0x20000004
 8001120:	2000000c 	.word	0x2000000c
 8001124:	20000008 	.word	0x20000008

08001128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800112c:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <HAL_IncTick+0x20>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	4b06      	ldr	r3, [pc, #24]	@ (800114c <HAL_IncTick+0x24>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4413      	add	r3, r2
 8001138:	4a04      	ldr	r2, [pc, #16]	@ (800114c <HAL_IncTick+0x24>)
 800113a:	6013      	str	r3, [r2, #0]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	2000000c 	.word	0x2000000c
 800114c:	200001f8 	.word	0x200001f8

08001150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return uwTick;
 8001154:	4b03      	ldr	r3, [pc, #12]	@ (8001164 <HAL_GetTick+0x14>)
 8001156:	681b      	ldr	r3, [r3, #0]
}
 8001158:	4618      	mov	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	200001f8 	.word	0x200001f8

08001168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001170:	f7ff ffee 	bl	8001150 <HAL_GetTick>
 8001174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001180:	d005      	beq.n	800118e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001182:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <HAL_Delay+0x44>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800118e:	bf00      	nop
 8001190:	f7ff ffde 	bl	8001150 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	429a      	cmp	r2, r3
 800119e:	d8f7      	bhi.n	8001190 <HAL_Delay+0x28>
  {
  }
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000000c 	.word	0x2000000c

080011b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e031      	b.n	800122a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d109      	bne.n	80011e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff fa58 	bl	8000684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d116      	bne.n	800121c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011f2:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <HAL_ADC_Init+0x84>)
 80011f4:	4013      	ands	r3, r2
 80011f6:	f043 0202 	orr.w	r2, r3, #2
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 fa88 	bl	8001714 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	f023 0303 	bic.w	r3, r3, #3
 8001212:	f043 0201 	orr.w	r2, r3, #1
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	641a      	str	r2, [r3, #64]	@ 0x40
 800121a:	e001      	b.n	8001220 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001228:	7bfb      	ldrb	r3, [r7, #15]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	ffffeefd 	.word	0xffffeefd

08001238 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800124e:	2b01      	cmp	r3, #1
 8001250:	d101      	bne.n	8001256 <HAL_ADC_Start_DMA+0x1e>
 8001252:	2302      	movs	r3, #2
 8001254:	e0d4      	b.n	8001400 <HAL_ADC_Start_DMA+0x1c8>
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	2b01      	cmp	r3, #1
 800126a:	d018      	beq.n	800129e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 0201 	orr.w	r2, r2, #1
 800127a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800127c:	4b62      	ldr	r3, [pc, #392]	@ (8001408 <HAL_ADC_Start_DMA+0x1d0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a62      	ldr	r2, [pc, #392]	@ (800140c <HAL_ADC_Start_DMA+0x1d4>)
 8001282:	fba2 2303 	umull	r2, r3, r2, r3
 8001286:	0c9a      	lsrs	r2, r3, #18
 8001288:	4613      	mov	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4413      	add	r3, r2
 800128e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001290:	e002      	b.n	8001298 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3b01      	subs	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f9      	bne.n	8001292 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	f040 809c 	bne.w	80013e6 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012b2:	4b57      	ldr	r3, [pc, #348]	@ (8001410 <HAL_ADC_Start_DMA+0x1d8>)
 80012b4:	4013      	ands	r3, r2
 80012b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d007      	beq.n	80012dc <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012e8:	d106      	bne.n	80012f8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ee:	f023 0206 	bic.w	r2, r3, #6
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	645a      	str	r2, [r3, #68]	@ 0x44
 80012f6:	e002      	b.n	80012fe <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2200      	movs	r2, #0
 80012fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800130a:	4a42      	ldr	r2, [pc, #264]	@ (8001414 <HAL_ADC_Start_DMA+0x1dc>)
 800130c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001312:	4a41      	ldr	r2, [pc, #260]	@ (8001418 <HAL_ADC_Start_DMA+0x1e0>)
 8001314:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800131a:	4a40      	ldr	r2, [pc, #256]	@ (800141c <HAL_ADC_Start_DMA+0x1e4>)
 800131c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001326:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001336:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001346:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	334c      	adds	r3, #76	@ 0x4c
 8001352:	4619      	mov	r1, r3
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f000 fce2 	bl	8001d20 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800135c:	4b30      	ldr	r3, [pc, #192]	@ (8001420 <HAL_ADC_Start_DMA+0x1e8>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 031f 	and.w	r3, r3, #31
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10f      	bne.n	8001388 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d143      	bne.n	80013fe <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	e03a      	b.n	80013fe <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a25      	ldr	r2, [pc, #148]	@ (8001424 <HAL_ADC_Start_DMA+0x1ec>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d10e      	bne.n	80013b0 <HAL_ADC_Start_DMA+0x178>
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d107      	bne.n	80013b0 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80013ae:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80013b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001420 <HAL_ADC_Start_DMA+0x1e8>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0310 	and.w	r3, r3, #16
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d120      	bne.n	80013fe <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a19      	ldr	r2, [pc, #100]	@ (8001428 <HAL_ADC_Start_DMA+0x1f0>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d11b      	bne.n	80013fe <HAL_ADC_Start_DMA+0x1c6>
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d114      	bne.n	80013fe <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	e00b      	b.n	80013fe <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	f043 0210 	orr.w	r2, r3, #16
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f6:	f043 0201 	orr.w	r2, r3, #1
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000004 	.word	0x20000004
 800140c:	431bde83 	.word	0x431bde83
 8001410:	fffff8fe 	.word	0xfffff8fe
 8001414:	08001909 	.word	0x08001909
 8001418:	080019c3 	.word	0x080019c3
 800141c:	080019df 	.word	0x080019df
 8001420:	40012300 	.word	0x40012300
 8001424:	40012000 	.word	0x40012000
 8001428:	40012200 	.word	0x40012200

0800142c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800147c:	2b01      	cmp	r3, #1
 800147e:	d101      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x1c>
 8001480:	2302      	movs	r3, #2
 8001482:	e136      	b.n	80016f2 <HAL_ADC_ConfigChannel+0x28a>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b09      	cmp	r3, #9
 8001492:	d93a      	bls.n	800150a <HAL_ADC_ConfigChannel+0xa2>
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800149c:	d035      	beq.n	800150a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68d9      	ldr	r1, [r3, #12]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	461a      	mov	r2, r3
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	3b1e      	subs	r3, #30
 80014b4:	2207      	movs	r2, #7
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43da      	mvns	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	400a      	ands	r2, r1
 80014c2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a8d      	ldr	r2, [pc, #564]	@ (8001700 <HAL_ADC_ConfigChannel+0x298>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d10a      	bne.n	80014e4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68d9      	ldr	r1, [r3, #12]
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	061a      	lsls	r2, r3, #24
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014e2:	e035      	b.n	8001550 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68d9      	ldr	r1, [r3, #12]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	4603      	mov	r3, r0
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4403      	add	r3, r0
 80014fc:	3b1e      	subs	r3, #30
 80014fe:	409a      	lsls	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001508:	e022      	b.n	8001550 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6919      	ldr	r1, [r3, #16]
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	b29b      	uxth	r3, r3
 8001516:	461a      	mov	r2, r3
 8001518:	4613      	mov	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	2207      	movs	r2, #7
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43da      	mvns	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	400a      	ands	r2, r1
 800152c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6919      	ldr	r1, [r3, #16]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	b29b      	uxth	r3, r3
 800153e:	4618      	mov	r0, r3
 8001540:	4603      	mov	r3, r0
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4403      	add	r3, r0
 8001546:	409a      	lsls	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b06      	cmp	r3, #6
 8001556:	d824      	bhi.n	80015a2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	3b05      	subs	r3, #5
 800156a:	221f      	movs	r2, #31
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43da      	mvns	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	400a      	ands	r2, r1
 8001578:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	b29b      	uxth	r3, r3
 8001586:	4618      	mov	r0, r3
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	3b05      	subs	r3, #5
 8001594:	fa00 f203 	lsl.w	r2, r0, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	635a      	str	r2, [r3, #52]	@ 0x34
 80015a0:	e04c      	b.n	800163c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b0c      	cmp	r3, #12
 80015a8:	d824      	bhi.n	80015f4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	3b23      	subs	r3, #35	@ 0x23
 80015bc:	221f      	movs	r2, #31
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43da      	mvns	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	400a      	ands	r2, r1
 80015ca:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	4618      	mov	r0, r3
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	3b23      	subs	r3, #35	@ 0x23
 80015e6:	fa00 f203 	lsl.w	r2, r0, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80015f2:	e023      	b.n	800163c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	3b41      	subs	r3, #65	@ 0x41
 8001606:	221f      	movs	r2, #31
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43da      	mvns	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	400a      	ands	r2, r1
 8001614:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	b29b      	uxth	r3, r3
 8001622:	4618      	mov	r0, r3
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	3b41      	subs	r3, #65	@ 0x41
 8001630:	fa00 f203 	lsl.w	r2, r0, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a30      	ldr	r2, [pc, #192]	@ (8001704 <HAL_ADC_ConfigChannel+0x29c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d10a      	bne.n	800165c <HAL_ADC_ConfigChannel+0x1f4>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800164e:	d105      	bne.n	800165c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001650:	4b2d      	ldr	r3, [pc, #180]	@ (8001708 <HAL_ADC_ConfigChannel+0x2a0>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	4a2c      	ldr	r2, [pc, #176]	@ (8001708 <HAL_ADC_ConfigChannel+0x2a0>)
 8001656:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800165a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a28      	ldr	r2, [pc, #160]	@ (8001704 <HAL_ADC_ConfigChannel+0x29c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d10f      	bne.n	8001686 <HAL_ADC_ConfigChannel+0x21e>
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b12      	cmp	r3, #18
 800166c:	d10b      	bne.n	8001686 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800166e:	4b26      	ldr	r3, [pc, #152]	@ (8001708 <HAL_ADC_ConfigChannel+0x2a0>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	4a25      	ldr	r2, [pc, #148]	@ (8001708 <HAL_ADC_ConfigChannel+0x2a0>)
 8001674:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001678:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800167a:	4b23      	ldr	r3, [pc, #140]	@ (8001708 <HAL_ADC_ConfigChannel+0x2a0>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4a22      	ldr	r2, [pc, #136]	@ (8001708 <HAL_ADC_ConfigChannel+0x2a0>)
 8001680:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001684:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a1e      	ldr	r2, [pc, #120]	@ (8001704 <HAL_ADC_ConfigChannel+0x29c>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d12b      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x280>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a1a      	ldr	r2, [pc, #104]	@ (8001700 <HAL_ADC_ConfigChannel+0x298>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d003      	beq.n	80016a2 <HAL_ADC_ConfigChannel+0x23a>
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b11      	cmp	r3, #17
 80016a0:	d122      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80016a2:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <HAL_ADC_ConfigChannel+0x2a0>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4a18      	ldr	r2, [pc, #96]	@ (8001708 <HAL_ADC_ConfigChannel+0x2a0>)
 80016a8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80016ac:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80016ae:	4b16      	ldr	r3, [pc, #88]	@ (8001708 <HAL_ADC_ConfigChannel+0x2a0>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4a15      	ldr	r2, [pc, #84]	@ (8001708 <HAL_ADC_ConfigChannel+0x2a0>)
 80016b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016b8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a10      	ldr	r2, [pc, #64]	@ (8001700 <HAL_ADC_ConfigChannel+0x298>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d111      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <HAL_ADC_ConfigChannel+0x2a4>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a11      	ldr	r2, [pc, #68]	@ (8001710 <HAL_ADC_ConfigChannel+0x2a8>)
 80016ca:	fba2 2303 	umull	r2, r3, r2, r3
 80016ce:	0c9a      	lsrs	r2, r3, #18
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80016da:	e002      	b.n	80016e2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	3b01      	subs	r3, #1
 80016e0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f9      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	10000012 	.word	0x10000012
 8001704:	40012000 	.word	0x40012000
 8001708:	40012300 	.word	0x40012300
 800170c:	20000004 	.word	0x20000004
 8001710:	431bde83 	.word	0x431bde83

08001714 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800171c:	4b78      	ldr	r3, [pc, #480]	@ (8001900 <ADC_Init+0x1ec>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	4a77      	ldr	r2, [pc, #476]	@ (8001900 <ADC_Init+0x1ec>)
 8001722:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001726:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001728:	4b75      	ldr	r3, [pc, #468]	@ (8001900 <ADC_Init+0x1ec>)
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4973      	ldr	r1, [pc, #460]	@ (8001900 <ADC_Init+0x1ec>)
 8001732:	4313      	orrs	r3, r2
 8001734:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001744:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6859      	ldr	r1, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	021a      	lsls	r2, r3, #8
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001768:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6859      	ldr	r1, [r3, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800178a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6899      	ldr	r1, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a2:	4a58      	ldr	r2, [pc, #352]	@ (8001904 <ADC_Init+0x1f0>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d022      	beq.n	80017ee <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6899      	ldr	r1, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6899      	ldr	r1, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	e00f      	b.n	800180e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800180c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0202 	bic.w	r2, r2, #2
 800181c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6899      	ldr	r1, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	005a      	lsls	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d01b      	beq.n	8001874 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800184a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800185a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6859      	ldr	r1, [r3, #4]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001866:	3b01      	subs	r3, #1
 8001868:	035a      	lsls	r2, r3, #13
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	e007      	b.n	8001884 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001882:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001892:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	3b01      	subs	r3, #1
 80018a0:	051a      	lsls	r2, r3, #20
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80018b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6899      	ldr	r1, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018c6:	025a      	lsls	r2, r3, #9
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6899      	ldr	r1, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	029a      	lsls	r2, r3, #10
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	609a      	str	r2, [r3, #8]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	40012300 	.word	0x40012300
 8001904:	0f000001 	.word	0x0f000001

08001908 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001914:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800191e:	2b00      	cmp	r3, #0
 8001920:	d13c      	bne.n	800199c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001926:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d12b      	bne.n	8001994 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001940:	2b00      	cmp	r3, #0
 8001942:	d127      	bne.n	8001994 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800194e:	2b00      	cmp	r3, #0
 8001950:	d006      	beq.n	8001960 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800195c:	2b00      	cmp	r3, #0
 800195e:	d119      	bne.n	8001994 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0220 	bic.w	r2, r2, #32
 800196e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001974:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d105      	bne.n	8001994 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198c:	f043 0201 	orr.w	r2, r3, #1
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f7ff fd49 	bl	800142c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800199a:	e00e      	b.n	80019ba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a0:	f003 0310 	and.w	r3, r3, #16
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f7ff fd53 	bl	8001454 <HAL_ADC_ErrorCallback>
}
 80019ae:	e004      	b.n	80019ba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	4798      	blx	r3
}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b084      	sub	sp, #16
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ce:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f7ff fd35 	bl	8001440 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b084      	sub	sp, #16
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2240      	movs	r2, #64	@ 0x40
 80019f0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f6:	f043 0204 	orr.w	r2, r3, #4
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f7ff fd28 	bl	8001454 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <__NVIC_SetPriorityGrouping+0x40>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a34:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3a:	4a04      	ldr	r2, [pc, #16]	@ (8001a4c <__NVIC_SetPriorityGrouping+0x40>)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	60d3      	str	r3, [r2, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00
 8001a50:	05fa0000 	.word	0x05fa0000

08001a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a58:	4b04      	ldr	r3, [pc, #16]	@ (8001a6c <__NVIC_GetPriorityGrouping+0x18>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	f003 0307 	and.w	r3, r3, #7
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	db0b      	blt.n	8001a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	f003 021f 	and.w	r2, r3, #31
 8001a88:	4907      	ldr	r1, [pc, #28]	@ (8001aa8 <__NVIC_EnableIRQ+0x38>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	2001      	movs	r0, #1
 8001a92:	fa00 f202 	lsl.w	r2, r0, r2
 8001a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000e100 	.word	0xe000e100

08001aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	6039      	str	r1, [r7, #0]
 8001ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	db0a      	blt.n	8001ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	490c      	ldr	r1, [pc, #48]	@ (8001af8 <__NVIC_SetPriority+0x4c>)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	0112      	lsls	r2, r2, #4
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	440b      	add	r3, r1
 8001ad0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad4:	e00a      	b.n	8001aec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	4908      	ldr	r1, [pc, #32]	@ (8001afc <__NVIC_SetPriority+0x50>)
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	3b04      	subs	r3, #4
 8001ae4:	0112      	lsls	r2, r2, #4
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	440b      	add	r3, r1
 8001aea:	761a      	strb	r2, [r3, #24]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000e100 	.word	0xe000e100
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b089      	sub	sp, #36	@ 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f1c3 0307 	rsb	r3, r3, #7
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	bf28      	it	cs
 8001b1e:	2304      	movcs	r3, #4
 8001b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3304      	adds	r3, #4
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	d902      	bls.n	8001b30 <NVIC_EncodePriority+0x30>
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3b03      	subs	r3, #3
 8001b2e:	e000      	b.n	8001b32 <NVIC_EncodePriority+0x32>
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	f04f 32ff 	mov.w	r2, #4294967295
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43da      	mvns	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	401a      	ands	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b48:	f04f 31ff 	mov.w	r1, #4294967295
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	43d9      	mvns	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	4313      	orrs	r3, r2
         );
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3724      	adds	r7, #36	@ 0x24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b78:	d301      	bcc.n	8001b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00f      	b.n	8001b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba8 <SysTick_Config+0x40>)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b86:	210f      	movs	r1, #15
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f7ff ff8e 	bl	8001aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b90:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <SysTick_Config+0x40>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b96:	4b04      	ldr	r3, [pc, #16]	@ (8001ba8 <SysTick_Config+0x40>)
 8001b98:	2207      	movs	r2, #7
 8001b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	e000e010 	.word	0xe000e010

08001bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ff29 	bl	8001a0c <__NVIC_SetPriorityGrouping>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b086      	sub	sp, #24
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd4:	f7ff ff3e 	bl	8001a54 <__NVIC_GetPriorityGrouping>
 8001bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	6978      	ldr	r0, [r7, #20]
 8001be0:	f7ff ff8e 	bl	8001b00 <NVIC_EncodePriority>
 8001be4:	4602      	mov	r2, r0
 8001be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff5d 	bl	8001aac <__NVIC_SetPriority>
}
 8001bf2:	bf00      	nop
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff31 	bl	8001a70 <__NVIC_EnableIRQ>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ffa2 	bl	8001b68 <SysTick_Config>
 8001c24:	4603      	mov	r3, r0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c34:	f3bf 8f5f 	dmb	sy
}
 8001c38:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c3a:	4b07      	ldr	r3, [pc, #28]	@ (8001c58 <HAL_MPU_Disable+0x28>)
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3e:	4a06      	ldr	r2, [pc, #24]	@ (8001c58 <HAL_MPU_Disable+0x28>)
 8001c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c44:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c46:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <HAL_MPU_Disable+0x2c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	605a      	str	r2, [r3, #4]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000ed00 	.word	0xe000ed00
 8001c5c:	e000ed90 	.word	0xe000ed90

08001c60 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c68:	4a0b      	ldr	r2, [pc, #44]	@ (8001c98 <HAL_MPU_Enable+0x38>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c72:	4b0a      	ldr	r3, [pc, #40]	@ (8001c9c <HAL_MPU_Enable+0x3c>)
 8001c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c76:	4a09      	ldr	r2, [pc, #36]	@ (8001c9c <HAL_MPU_Enable+0x3c>)
 8001c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c7c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001c7e:	f3bf 8f4f 	dsb	sy
}
 8001c82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c84:	f3bf 8f6f 	isb	sy
}
 8001c88:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000ed90 	.word	0xe000ed90
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	785a      	ldrb	r2, [r3, #1]
 8001cac:	4b1b      	ldr	r3, [pc, #108]	@ (8001d1c <HAL_MPU_ConfigRegion+0x7c>)
 8001cae:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d1c <HAL_MPU_ConfigRegion+0x7c>)
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	4a19      	ldr	r2, [pc, #100]	@ (8001d1c <HAL_MPU_ConfigRegion+0x7c>)
 8001cb6:	f023 0301 	bic.w	r3, r3, #1
 8001cba:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001cbc:	4a17      	ldr	r2, [pc, #92]	@ (8001d1c <HAL_MPU_ConfigRegion+0x7c>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	7b1b      	ldrb	r3, [r3, #12]
 8001cc8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	7adb      	ldrb	r3, [r3, #11]
 8001cce:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cd0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7a9b      	ldrb	r3, [r3, #10]
 8001cd6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cd8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	7b5b      	ldrb	r3, [r3, #13]
 8001cde:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ce0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	7b9b      	ldrb	r3, [r3, #14]
 8001ce6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ce8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	7bdb      	ldrb	r3, [r3, #15]
 8001cee:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cf0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	7a5b      	ldrb	r3, [r3, #9]
 8001cf6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001cf8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	7a1b      	ldrb	r3, [r3, #8]
 8001cfe:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d00:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	7812      	ldrb	r2, [r2, #0]
 8001d06:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d08:	4a04      	ldr	r2, [pc, #16]	@ (8001d1c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d0a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d0c:	6113      	str	r3, [r2, #16]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed90 	.word	0xe000ed90

08001d20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_DMA_Start_IT+0x26>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e048      	b.n	8001dd8 <HAL_DMA_Start_IT+0xb8>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d137      	bne.n	8001dca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 f836 	bl	8001de0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d78:	223f      	movs	r2, #63	@ 0x3f
 8001d7a:	409a      	lsls	r2, r3
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0216 	orr.w	r2, r2, #22
 8001d8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695a      	ldr	r2, [r3, #20]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d9e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d007      	beq.n	8001db8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0208 	orr.w	r2, r2, #8
 8001db6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	e005      	b.n	8001dd6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001dfc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b40      	cmp	r3, #64	@ 0x40
 8001e0c:	d108      	bne.n	8001e20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e1e:	e007      	b.n	8001e30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	60da      	str	r2, [r3, #12]
}
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b089      	sub	sp, #36	@ 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	e175      	b.n	8002148 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	f040 8164 	bne.w	8002142 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d005      	beq.n	8001e92 <HAL_GPIO_Init+0x56>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d130      	bne.n	8001ef4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec8:	2201      	movs	r2, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f003 0201 	and.w	r2, r3, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d017      	beq.n	8001f30 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d123      	bne.n	8001f84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	08da      	lsrs	r2, r3, #3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3208      	adds	r2, #8
 8001f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	220f      	movs	r2, #15
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	08da      	lsrs	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3208      	adds	r2, #8
 8001f7e:	69b9      	ldr	r1, [r7, #24]
 8001f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	2203      	movs	r2, #3
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0203 	and.w	r2, r3, #3
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 80be 	beq.w	8002142 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc6:	4b66      	ldr	r3, [pc, #408]	@ (8002160 <HAL_GPIO_Init+0x324>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fca:	4a65      	ldr	r2, [pc, #404]	@ (8002160 <HAL_GPIO_Init+0x324>)
 8001fcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fd2:	4b63      	ldr	r3, [pc, #396]	@ (8002160 <HAL_GPIO_Init+0x324>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001fde:	4a61      	ldr	r2, [pc, #388]	@ (8002164 <HAL_GPIO_Init+0x328>)
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	220f      	movs	r2, #15
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a58      	ldr	r2, [pc, #352]	@ (8002168 <HAL_GPIO_Init+0x32c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d037      	beq.n	800207a <HAL_GPIO_Init+0x23e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a57      	ldr	r2, [pc, #348]	@ (800216c <HAL_GPIO_Init+0x330>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d031      	beq.n	8002076 <HAL_GPIO_Init+0x23a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a56      	ldr	r2, [pc, #344]	@ (8002170 <HAL_GPIO_Init+0x334>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d02b      	beq.n	8002072 <HAL_GPIO_Init+0x236>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a55      	ldr	r2, [pc, #340]	@ (8002174 <HAL_GPIO_Init+0x338>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d025      	beq.n	800206e <HAL_GPIO_Init+0x232>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a54      	ldr	r2, [pc, #336]	@ (8002178 <HAL_GPIO_Init+0x33c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01f      	beq.n	800206a <HAL_GPIO_Init+0x22e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a53      	ldr	r2, [pc, #332]	@ (800217c <HAL_GPIO_Init+0x340>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d019      	beq.n	8002066 <HAL_GPIO_Init+0x22a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a52      	ldr	r2, [pc, #328]	@ (8002180 <HAL_GPIO_Init+0x344>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d013      	beq.n	8002062 <HAL_GPIO_Init+0x226>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a51      	ldr	r2, [pc, #324]	@ (8002184 <HAL_GPIO_Init+0x348>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d00d      	beq.n	800205e <HAL_GPIO_Init+0x222>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a50      	ldr	r2, [pc, #320]	@ (8002188 <HAL_GPIO_Init+0x34c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d007      	beq.n	800205a <HAL_GPIO_Init+0x21e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4f      	ldr	r2, [pc, #316]	@ (800218c <HAL_GPIO_Init+0x350>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d101      	bne.n	8002056 <HAL_GPIO_Init+0x21a>
 8002052:	2309      	movs	r3, #9
 8002054:	e012      	b.n	800207c <HAL_GPIO_Init+0x240>
 8002056:	230a      	movs	r3, #10
 8002058:	e010      	b.n	800207c <HAL_GPIO_Init+0x240>
 800205a:	2308      	movs	r3, #8
 800205c:	e00e      	b.n	800207c <HAL_GPIO_Init+0x240>
 800205e:	2307      	movs	r3, #7
 8002060:	e00c      	b.n	800207c <HAL_GPIO_Init+0x240>
 8002062:	2306      	movs	r3, #6
 8002064:	e00a      	b.n	800207c <HAL_GPIO_Init+0x240>
 8002066:	2305      	movs	r3, #5
 8002068:	e008      	b.n	800207c <HAL_GPIO_Init+0x240>
 800206a:	2304      	movs	r3, #4
 800206c:	e006      	b.n	800207c <HAL_GPIO_Init+0x240>
 800206e:	2303      	movs	r3, #3
 8002070:	e004      	b.n	800207c <HAL_GPIO_Init+0x240>
 8002072:	2302      	movs	r3, #2
 8002074:	e002      	b.n	800207c <HAL_GPIO_Init+0x240>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <HAL_GPIO_Init+0x240>
 800207a:	2300      	movs	r3, #0
 800207c:	69fa      	ldr	r2, [r7, #28]
 800207e:	f002 0203 	and.w	r2, r2, #3
 8002082:	0092      	lsls	r2, r2, #2
 8002084:	4093      	lsls	r3, r2
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800208c:	4935      	ldr	r1, [pc, #212]	@ (8002164 <HAL_GPIO_Init+0x328>)
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	089b      	lsrs	r3, r3, #2
 8002092:	3302      	adds	r3, #2
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800209a:	4b3d      	ldr	r3, [pc, #244]	@ (8002190 <HAL_GPIO_Init+0x354>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020be:	4a34      	ldr	r2, [pc, #208]	@ (8002190 <HAL_GPIO_Init+0x354>)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020c4:	4b32      	ldr	r3, [pc, #200]	@ (8002190 <HAL_GPIO_Init+0x354>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020e8:	4a29      	ldr	r2, [pc, #164]	@ (8002190 <HAL_GPIO_Init+0x354>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ee:	4b28      	ldr	r3, [pc, #160]	@ (8002190 <HAL_GPIO_Init+0x354>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002112:	4a1f      	ldr	r2, [pc, #124]	@ (8002190 <HAL_GPIO_Init+0x354>)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002118:	4b1d      	ldr	r3, [pc, #116]	@ (8002190 <HAL_GPIO_Init+0x354>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800213c:	4a14      	ldr	r2, [pc, #80]	@ (8002190 <HAL_GPIO_Init+0x354>)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3301      	adds	r3, #1
 8002146:	61fb      	str	r3, [r7, #28]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	2b0f      	cmp	r3, #15
 800214c:	f67f ae86 	bls.w	8001e5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002150:	bf00      	nop
 8002152:	bf00      	nop
 8002154:	3724      	adds	r7, #36	@ 0x24
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40023800 	.word	0x40023800
 8002164:	40013800 	.word	0x40013800
 8002168:	40020000 	.word	0x40020000
 800216c:	40020400 	.word	0x40020400
 8002170:	40020800 	.word	0x40020800
 8002174:	40020c00 	.word	0x40020c00
 8002178:	40021000 	.word	0x40021000
 800217c:	40021400 	.word	0x40021400
 8002180:	40021800 	.word	0x40021800
 8002184:	40021c00 	.word	0x40021c00
 8002188:	40022000 	.word	0x40022000
 800218c:	40022400 	.word	0x40022400
 8002190:	40013c00 	.word	0x40013c00

08002194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	807b      	strh	r3, [r7, #2]
 80021a0:	4613      	mov	r3, r2
 80021a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021a4:	787b      	ldrb	r3, [r7, #1]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021aa:	887a      	ldrh	r2, [r7, #2]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80021b0:	e003      	b.n	80021ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80021b2:	887b      	ldrh	r3, [r7, #2]
 80021b4:	041a      	lsls	r2, r3, #16
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	619a      	str	r2, [r3, #24]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021d2:	4b08      	ldr	r3, [pc, #32]	@ (80021f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	4013      	ands	r3, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d006      	beq.n	80021ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021de:	4a05      	ldr	r2, [pc, #20]	@ (80021f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe fc3a 	bl	8000a60 <HAL_GPIO_EXTI_Callback>
  }
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40013c00 	.word	0x40013c00

080021f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002202:	4b23      	ldr	r3, [pc, #140]	@ (8002290 <HAL_PWREx_EnableOverDrive+0x98>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002206:	4a22      	ldr	r2, [pc, #136]	@ (8002290 <HAL_PWREx_EnableOverDrive+0x98>)
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800220c:	6413      	str	r3, [r2, #64]	@ 0x40
 800220e:	4b20      	ldr	r3, [pc, #128]	@ (8002290 <HAL_PWREx_EnableOverDrive+0x98>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800221a:	4b1e      	ldr	r3, [pc, #120]	@ (8002294 <HAL_PWREx_EnableOverDrive+0x9c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a1d      	ldr	r2, [pc, #116]	@ (8002294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002224:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002226:	f7fe ff93 	bl	8001150 <HAL_GetTick>
 800222a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800222c:	e009      	b.n	8002242 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800222e:	f7fe ff8f 	bl	8001150 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800223c:	d901      	bls.n	8002242 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e022      	b.n	8002288 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002242:	4b14      	ldr	r3, [pc, #80]	@ (8002294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800224a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800224e:	d1ee      	bne.n	800222e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002250:	4b10      	ldr	r3, [pc, #64]	@ (8002294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a0f      	ldr	r2, [pc, #60]	@ (8002294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002256:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800225a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800225c:	f7fe ff78 	bl	8001150 <HAL_GetTick>
 8002260:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002262:	e009      	b.n	8002278 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002264:	f7fe ff74 	bl	8001150 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002272:	d901      	bls.n	8002278 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e007      	b.n	8002288 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002278:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <HAL_PWREx_EnableOverDrive+0x9c>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002280:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002284:	d1ee      	bne.n	8002264 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40023800 	.word	0x40023800
 8002294:	40007000 	.word	0x40007000

08002298 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80022a0:	2300      	movs	r3, #0
 80022a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e29b      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8087 	beq.w	80023ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022bc:	4b96      	ldr	r3, [pc, #600]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 030c 	and.w	r3, r3, #12
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d00c      	beq.n	80022e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c8:	4b93      	ldr	r3, [pc, #588]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d112      	bne.n	80022fa <HAL_RCC_OscConfig+0x62>
 80022d4:	4b90      	ldr	r3, [pc, #576]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022e0:	d10b      	bne.n	80022fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e2:	4b8d      	ldr	r3, [pc, #564]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d06c      	beq.n	80023c8 <HAL_RCC_OscConfig+0x130>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d168      	bne.n	80023c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e275      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002302:	d106      	bne.n	8002312 <HAL_RCC_OscConfig+0x7a>
 8002304:	4b84      	ldr	r3, [pc, #528]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a83      	ldr	r2, [pc, #524]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 800230a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	e02e      	b.n	8002370 <HAL_RCC_OscConfig+0xd8>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0x9c>
 800231a:	4b7f      	ldr	r3, [pc, #508]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a7e      	ldr	r2, [pc, #504]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 8002320:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b7c      	ldr	r3, [pc, #496]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a7b      	ldr	r2, [pc, #492]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 800232c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e01d      	b.n	8002370 <HAL_RCC_OscConfig+0xd8>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0xc0>
 800233e:	4b76      	ldr	r3, [pc, #472]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a75      	ldr	r2, [pc, #468]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 8002344:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b73      	ldr	r3, [pc, #460]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a72      	ldr	r2, [pc, #456]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e00b      	b.n	8002370 <HAL_RCC_OscConfig+0xd8>
 8002358:	4b6f      	ldr	r3, [pc, #444]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a6e      	ldr	r2, [pc, #440]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 800235e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	4b6c      	ldr	r3, [pc, #432]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a6b      	ldr	r2, [pc, #428]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 800236a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800236e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d013      	beq.n	80023a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7fe feea 	bl	8001150 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002380:	f7fe fee6 	bl	8001150 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	@ 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e229      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	4b61      	ldr	r3, [pc, #388]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0xe8>
 800239e:	e014      	b.n	80023ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe fed6 	bl	8001150 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a8:	f7fe fed2 	bl	8001150 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	@ 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e215      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ba:	4b57      	ldr	r3, [pc, #348]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x110>
 80023c6:	e000      	b.n	80023ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d069      	beq.n	80024aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023d6:	4b50      	ldr	r3, [pc, #320]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023e2:	4b4d      	ldr	r3, [pc, #308]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d11c      	bne.n	8002428 <HAL_RCC_OscConfig+0x190>
 80023ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d116      	bne.n	8002428 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fa:	4b47      	ldr	r3, [pc, #284]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <HAL_RCC_OscConfig+0x17a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d001      	beq.n	8002412 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e1e9      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002412:	4b41      	ldr	r3, [pc, #260]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	493d      	ldr	r1, [pc, #244]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	e040      	b.n	80024aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d023      	beq.n	8002478 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002430:	4b39      	ldr	r3, [pc, #228]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a38      	ldr	r2, [pc, #224]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe fe88 	bl	8001150 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002444:	f7fe fe84 	bl	8001150 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e1c7      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002456:	4b30      	ldr	r3, [pc, #192]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002462:	4b2d      	ldr	r3, [pc, #180]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4929      	ldr	r1, [pc, #164]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]
 8002476:	e018      	b.n	80024aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002478:	4b27      	ldr	r3, [pc, #156]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a26      	ldr	r2, [pc, #152]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 800247e:	f023 0301 	bic.w	r3, r3, #1
 8002482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7fe fe64 	bl	8001150 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800248c:	f7fe fe60 	bl	8001150 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e1a3      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249e:	4b1e      	ldr	r3, [pc, #120]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d038      	beq.n	8002528 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d019      	beq.n	80024f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024be:	4b16      	ldr	r3, [pc, #88]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 80024c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024c2:	4a15      	ldr	r2, [pc, #84]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ca:	f7fe fe41 	bl	8001150 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d2:	f7fe fe3d 	bl	8001150 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e180      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 80024e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x23a>
 80024f0:	e01a      	b.n	8002528 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f2:	4b09      	ldr	r3, [pc, #36]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 80024f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024f6:	4a08      	ldr	r2, [pc, #32]	@ (8002518 <HAL_RCC_OscConfig+0x280>)
 80024f8:	f023 0301 	bic.w	r3, r3, #1
 80024fc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fe:	f7fe fe27 	bl	8001150 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002504:	e00a      	b.n	800251c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002506:	f7fe fe23 	bl	8001150 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d903      	bls.n	800251c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e166      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
 8002518:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800251c:	4b92      	ldr	r3, [pc, #584]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 800251e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1ee      	bne.n	8002506 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80a4 	beq.w	800267e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002536:	4b8c      	ldr	r3, [pc, #560]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10d      	bne.n	800255e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002542:	4b89      	ldr	r3, [pc, #548]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	4a88      	ldr	r2, [pc, #544]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800254c:	6413      	str	r3, [r2, #64]	@ 0x40
 800254e:	4b86      	ldr	r3, [pc, #536]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255a:	2301      	movs	r3, #1
 800255c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800255e:	4b83      	ldr	r3, [pc, #524]	@ (800276c <HAL_RCC_OscConfig+0x4d4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d118      	bne.n	800259c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800256a:	4b80      	ldr	r3, [pc, #512]	@ (800276c <HAL_RCC_OscConfig+0x4d4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a7f      	ldr	r2, [pc, #508]	@ (800276c <HAL_RCC_OscConfig+0x4d4>)
 8002570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002576:	f7fe fdeb 	bl	8001150 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257e:	f7fe fde7 	bl	8001150 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b64      	cmp	r3, #100	@ 0x64
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e12a      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002590:	4b76      	ldr	r3, [pc, #472]	@ (800276c <HAL_RCC_OscConfig+0x4d4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x31a>
 80025a4:	4b70      	ldr	r3, [pc, #448]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a8:	4a6f      	ldr	r2, [pc, #444]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80025b0:	e02d      	b.n	800260e <HAL_RCC_OscConfig+0x376>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x33c>
 80025ba:	4b6b      	ldr	r3, [pc, #428]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025be:	4a6a      	ldr	r2, [pc, #424]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c6:	4b68      	ldr	r3, [pc, #416]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ca:	4a67      	ldr	r2, [pc, #412]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025cc:	f023 0304 	bic.w	r3, r3, #4
 80025d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d2:	e01c      	b.n	800260e <HAL_RCC_OscConfig+0x376>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b05      	cmp	r3, #5
 80025da:	d10c      	bne.n	80025f6 <HAL_RCC_OscConfig+0x35e>
 80025dc:	4b62      	ldr	r3, [pc, #392]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e0:	4a61      	ldr	r2, [pc, #388]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025e2:	f043 0304 	orr.w	r3, r3, #4
 80025e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025e8:	4b5f      	ldr	r3, [pc, #380]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ec:	4a5e      	ldr	r2, [pc, #376]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80025f4:	e00b      	b.n	800260e <HAL_RCC_OscConfig+0x376>
 80025f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025fa:	4a5b      	ldr	r2, [pc, #364]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025fc:	f023 0301 	bic.w	r3, r3, #1
 8002600:	6713      	str	r3, [r2, #112]	@ 0x70
 8002602:	4b59      	ldr	r3, [pc, #356]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002606:	4a58      	ldr	r2, [pc, #352]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002608:	f023 0304 	bic.w	r3, r3, #4
 800260c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d015      	beq.n	8002642 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002616:	f7fe fd9b 	bl	8001150 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261c:	e00a      	b.n	8002634 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7fe fd97 	bl	8001150 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262c:	4293      	cmp	r3, r2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e0d8      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002634:	4b4c      	ldr	r3, [pc, #304]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0ee      	beq.n	800261e <HAL_RCC_OscConfig+0x386>
 8002640:	e014      	b.n	800266c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002642:	f7fe fd85 	bl	8001150 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002648:	e00a      	b.n	8002660 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264a:	f7fe fd81 	bl	8001150 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002658:	4293      	cmp	r3, r2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e0c2      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002660:	4b41      	ldr	r3, [pc, #260]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1ee      	bne.n	800264a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800266c:	7dfb      	ldrb	r3, [r7, #23]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d105      	bne.n	800267e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002672:	4b3d      	ldr	r3, [pc, #244]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	4a3c      	ldr	r2, [pc, #240]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002678:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800267c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 80ae 	beq.w	80027e4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002688:	4b37      	ldr	r3, [pc, #220]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	2b08      	cmp	r3, #8
 8002692:	d06d      	beq.n	8002770 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d14b      	bne.n	8002734 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269c:	4b32      	ldr	r3, [pc, #200]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a31      	ldr	r2, [pc, #196]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80026a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7fe fd52 	bl	8001150 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b0:	f7fe fd4e 	bl	8001150 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e091      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c2:	4b29      	ldr	r3, [pc, #164]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69da      	ldr	r2, [r3, #28]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026dc:	019b      	lsls	r3, r3, #6
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e4:	085b      	lsrs	r3, r3, #1
 80026e6:	3b01      	subs	r3, #1
 80026e8:	041b      	lsls	r3, r3, #16
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f0:	061b      	lsls	r3, r3, #24
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f8:	071b      	lsls	r3, r3, #28
 80026fa:	491b      	ldr	r1, [pc, #108]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002700:	4b19      	ldr	r3, [pc, #100]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a18      	ldr	r2, [pc, #96]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002706:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800270a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7fe fd20 	bl	8001150 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002714:	f7fe fd1c 	bl	8001150 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e05f      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002726:	4b10      	ldr	r3, [pc, #64]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x47c>
 8002732:	e057      	b.n	80027e4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002734:	4b0c      	ldr	r3, [pc, #48]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0b      	ldr	r2, [pc, #44]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 800273a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800273e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7fe fd06 	bl	8001150 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002748:	f7fe fd02 	bl	8001150 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e045      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275a:	4b03      	ldr	r3, [pc, #12]	@ (8002768 <HAL_RCC_OscConfig+0x4d0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0x4b0>
 8002766:	e03d      	b.n	80027e4 <HAL_RCC_OscConfig+0x54c>
 8002768:	40023800 	.word	0x40023800
 800276c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002770:	4b1f      	ldr	r3, [pc, #124]	@ (80027f0 <HAL_RCC_OscConfig+0x558>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d030      	beq.n	80027e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002788:	429a      	cmp	r2, r3
 800278a:	d129      	bne.n	80027e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002796:	429a      	cmp	r2, r3
 8002798:	d122      	bne.n	80027e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027a0:	4013      	ands	r3, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d119      	bne.n	80027e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	3b01      	subs	r3, #1
 80027ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d10f      	bne.n	80027e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d107      	bne.n	80027e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800

080027f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0d0      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800280c:	4b6a      	ldr	r3, [pc, #424]	@ (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d910      	bls.n	800283c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281a:	4b67      	ldr	r3, [pc, #412]	@ (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 020f 	bic.w	r2, r3, #15
 8002822:	4965      	ldr	r1, [pc, #404]	@ (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b63      	ldr	r3, [pc, #396]	@ (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0b8      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d020      	beq.n	800288a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002854:	4b59      	ldr	r3, [pc, #356]	@ (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	4a58      	ldr	r2, [pc, #352]	@ (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800285a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800285e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800286c:	4b53      	ldr	r3, [pc, #332]	@ (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	4a52      	ldr	r2, [pc, #328]	@ (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002872:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002876:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002878:	4b50      	ldr	r3, [pc, #320]	@ (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	494d      	ldr	r1, [pc, #308]	@ (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002886:	4313      	orrs	r3, r2
 8002888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d040      	beq.n	8002918 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d107      	bne.n	80028ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289e:	4b47      	ldr	r3, [pc, #284]	@ (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d115      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e07f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d107      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b6:	4b41      	ldr	r3, [pc, #260]	@ (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e073      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c6:	4b3d      	ldr	r3, [pc, #244]	@ (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e06b      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028d6:	4b39      	ldr	r3, [pc, #228]	@ (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f023 0203 	bic.w	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4936      	ldr	r1, [pc, #216]	@ (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e8:	f7fe fc32 	bl	8001150 <HAL_GetTick>
 80028ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ee:	e00a      	b.n	8002906 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f0:	f7fe fc2e 	bl	8001150 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e053      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002906:	4b2d      	ldr	r3, [pc, #180]	@ (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 020c 	and.w	r2, r3, #12
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	429a      	cmp	r2, r3
 8002916:	d1eb      	bne.n	80028f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002918:	4b27      	ldr	r3, [pc, #156]	@ (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d210      	bcs.n	8002948 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b24      	ldr	r3, [pc, #144]	@ (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 020f 	bic.w	r2, r3, #15
 800292e:	4922      	ldr	r1, [pc, #136]	@ (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b20      	ldr	r3, [pc, #128]	@ (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e032      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002954:	4b19      	ldr	r3, [pc, #100]	@ (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4916      	ldr	r1, [pc, #88]	@ (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002972:	4b12      	ldr	r3, [pc, #72]	@ (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	490e      	ldr	r1, [pc, #56]	@ (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002986:	f000 f821 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 800298a:	4602      	mov	r2, r0
 800298c:	4b0b      	ldr	r3, [pc, #44]	@ (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	490a      	ldr	r1, [pc, #40]	@ (80029c0 <HAL_RCC_ClockConfig+0x1cc>)
 8002998:	5ccb      	ldrb	r3, [r1, r3]
 800299a:	fa22 f303 	lsr.w	r3, r2, r3
 800299e:	4a09      	ldr	r2, [pc, #36]	@ (80029c4 <HAL_RCC_ClockConfig+0x1d0>)
 80029a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029a2:	4b09      	ldr	r3, [pc, #36]	@ (80029c8 <HAL_RCC_ClockConfig+0x1d4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fb8e 	bl	80010c8 <HAL_InitTick>

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40023c00 	.word	0x40023c00
 80029bc:	40023800 	.word	0x40023800
 80029c0:	08005c88 	.word	0x08005c88
 80029c4:	20000004 	.word	0x20000004
 80029c8:	20000008 	.word	0x20000008

080029cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029d0:	b090      	sub	sp, #64	@ 0x40
 80029d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80029d8:	2300      	movs	r3, #0
 80029da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029dc:	2300      	movs	r3, #0
 80029de:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e4:	4b59      	ldr	r3, [pc, #356]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x180>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 030c 	and.w	r3, r3, #12
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d00d      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0x40>
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	f200 80a1 	bhi.w	8002b38 <HAL_RCC_GetSysClockFreq+0x16c>
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <HAL_RCC_GetSysClockFreq+0x34>
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d003      	beq.n	8002a06 <HAL_RCC_GetSysClockFreq+0x3a>
 80029fe:	e09b      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a00:	4b53      	ldr	r3, [pc, #332]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a04:	e09b      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a06:	4b53      	ldr	r3, [pc, #332]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a08:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a0a:	e098      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a0c:	4b4f      	ldr	r3, [pc, #316]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a14:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a16:	4b4d      	ldr	r3, [pc, #308]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d028      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a22:	4b4a      	ldr	r3, [pc, #296]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	099b      	lsrs	r3, r3, #6
 8002a28:	2200      	movs	r2, #0
 8002a2a:	623b      	str	r3, [r7, #32]
 8002a2c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a34:	2100      	movs	r1, #0
 8002a36:	4b47      	ldr	r3, [pc, #284]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a38:	fb03 f201 	mul.w	r2, r3, r1
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	fb00 f303 	mul.w	r3, r0, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	4a43      	ldr	r2, [pc, #268]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a46:	fba0 1202 	umull	r1, r2, r0, r2
 8002a4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a4c:	460a      	mov	r2, r1
 8002a4e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002a50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a52:	4413      	add	r3, r2
 8002a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a58:	2200      	movs	r2, #0
 8002a5a:	61bb      	str	r3, [r7, #24]
 8002a5c:	61fa      	str	r2, [r7, #28]
 8002a5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a66:	f7fd fc43 	bl	80002f0 <__aeabi_uldivmod>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4613      	mov	r3, r2
 8002a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a72:	e053      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a74:	4b35      	ldr	r3, [pc, #212]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	099b      	lsrs	r3, r3, #6
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	617a      	str	r2, [r7, #20]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a86:	f04f 0b00 	mov.w	fp, #0
 8002a8a:	4652      	mov	r2, sl
 8002a8c:	465b      	mov	r3, fp
 8002a8e:	f04f 0000 	mov.w	r0, #0
 8002a92:	f04f 0100 	mov.w	r1, #0
 8002a96:	0159      	lsls	r1, r3, #5
 8002a98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a9c:	0150      	lsls	r0, r2, #5
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	ebb2 080a 	subs.w	r8, r2, sl
 8002aa6:	eb63 090b 	sbc.w	r9, r3, fp
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ab6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002aba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002abe:	ebb2 0408 	subs.w	r4, r2, r8
 8002ac2:	eb63 0509 	sbc.w	r5, r3, r9
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	f04f 0300 	mov.w	r3, #0
 8002ace:	00eb      	lsls	r3, r5, #3
 8002ad0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ad4:	00e2      	lsls	r2, r4, #3
 8002ad6:	4614      	mov	r4, r2
 8002ad8:	461d      	mov	r5, r3
 8002ada:	eb14 030a 	adds.w	r3, r4, sl
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	eb45 030b 	adc.w	r3, r5, fp
 8002ae4:	607b      	str	r3, [r7, #4]
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002af2:	4629      	mov	r1, r5
 8002af4:	028b      	lsls	r3, r1, #10
 8002af6:	4621      	mov	r1, r4
 8002af8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002afc:	4621      	mov	r1, r4
 8002afe:	028a      	lsls	r2, r1, #10
 8002b00:	4610      	mov	r0, r2
 8002b02:	4619      	mov	r1, r3
 8002b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b06:	2200      	movs	r2, #0
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	60fa      	str	r2, [r7, #12]
 8002b0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b10:	f7fd fbee 	bl	80002f0 <__aeabi_uldivmod>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4613      	mov	r3, r2
 8002b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	0c1b      	lsrs	r3, r3, #16
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	3301      	adds	r3, #1
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002b2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b34:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b36:	e002      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b38:	4b05      	ldr	r3, [pc, #20]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3740      	adds	r7, #64	@ 0x40
 8002b44:	46bd      	mov	sp, r7
 8002b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	00f42400 	.word	0x00f42400
 8002b54:	017d7840 	.word	0x017d7840

08002b58 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b5c:	4b03      	ldr	r3, [pc, #12]	@ (8002b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	20000004 	.word	0x20000004

08002b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b74:	f7ff fff0 	bl	8002b58 <HAL_RCC_GetHCLKFreq>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	4b05      	ldr	r3, [pc, #20]	@ (8002b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	0a9b      	lsrs	r3, r3, #10
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	4903      	ldr	r1, [pc, #12]	@ (8002b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b86:	5ccb      	ldrb	r3, [r1, r3]
 8002b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40023800 	.word	0x40023800
 8002b94:	08005c98 	.word	0x08005c98

08002b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b9c:	f7ff ffdc 	bl	8002b58 <HAL_RCC_GetHCLKFreq>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	0b5b      	lsrs	r3, r3, #13
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	4903      	ldr	r1, [pc, #12]	@ (8002bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bae:	5ccb      	ldrb	r3, [r1, r3]
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	08005c98 	.word	0x08005c98

08002bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d012      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002be8:	4b69      	ldr	r3, [pc, #420]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	4a68      	ldr	r2, [pc, #416]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002bf2:	6093      	str	r3, [r2, #8]
 8002bf4:	4b66      	ldr	r3, [pc, #408]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bfc:	4964      	ldr	r1, [pc, #400]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d017      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c1a:	4b5d      	ldr	r3, [pc, #372]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c20:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c28:	4959      	ldr	r1, [pc, #356]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c38:	d101      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002c46:	2301      	movs	r3, #1
 8002c48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d017      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c56:	4b4e      	ldr	r3, [pc, #312]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c5c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c64:	494a      	ldr	r1, [pc, #296]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c74:	d101      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002c76:	2301      	movs	r3, #1
 8002c78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002c82:	2301      	movs	r3, #1
 8002c84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002c92:	2301      	movs	r3, #1
 8002c94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0320 	and.w	r3, r3, #32
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 808b 	beq.w	8002dba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ca4:	4b3a      	ldr	r3, [pc, #232]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	4a39      	ldr	r2, [pc, #228]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002caa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cae:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cb0:	4b37      	ldr	r3, [pc, #220]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002cbc:	4b35      	ldr	r3, [pc, #212]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a34      	ldr	r2, [pc, #208]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc8:	f7fe fa42 	bl	8001150 <HAL_GetTick>
 8002ccc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd0:	f7fe fa3e 	bl	8001150 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	@ 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e38f      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ce2:	4b2c      	ldr	r3, [pc, #176]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cee:	4b28      	ldr	r3, [pc, #160]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cf6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d035      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d02e      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d0c:	4b20      	ldr	r3, [pc, #128]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d14:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d16:	4b1e      	ldr	r3, [pc, #120]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d20:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d22:	4b1b      	ldr	r3, [pc, #108]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d26:	4a1a      	ldr	r2, [pc, #104]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d2c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d2e:	4a18      	ldr	r2, [pc, #96]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d34:	4b16      	ldr	r3, [pc, #88]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d114      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7fe fa06 	bl	8001150 <HAL_GetTick>
 8002d44:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d46:	e00a      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d48:	f7fe fa02 	bl	8001150 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e351      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0ee      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d76:	d111      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002d78:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d84:	4b04      	ldr	r3, [pc, #16]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d86:	400b      	ands	r3, r1
 8002d88:	4901      	ldr	r1, [pc, #4]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
 8002d8e:	e00b      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40007000 	.word	0x40007000
 8002d98:	0ffffcff 	.word	0x0ffffcff
 8002d9c:	4bac      	ldr	r3, [pc, #688]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4aab      	ldr	r2, [pc, #684]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002da6:	6093      	str	r3, [r2, #8]
 8002da8:	4ba9      	ldr	r3, [pc, #676]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002daa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db4:	49a6      	ldr	r1, [pc, #664]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d010      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002dc6:	4ba2      	ldr	r3, [pc, #648]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dcc:	4aa0      	ldr	r2, [pc, #640]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dd2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002dd6:	4b9e      	ldr	r3, [pc, #632]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de0:	499b      	ldr	r1, [pc, #620]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002df4:	4b96      	ldr	r3, [pc, #600]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dfa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e02:	4993      	ldr	r1, [pc, #588]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e16:	4b8e      	ldr	r3, [pc, #568]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e1c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e24:	498a      	ldr	r1, [pc, #552]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e38:	4b85      	ldr	r3, [pc, #532]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e46:	4982      	ldr	r1, [pc, #520]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e5a:	4b7d      	ldr	r3, [pc, #500]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e60:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e68:	4979      	ldr	r1, [pc, #484]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e7c:	4b74      	ldr	r3, [pc, #464]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e82:	f023 0203 	bic.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8a:	4971      	ldr	r1, [pc, #452]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e9e:	4b6c      	ldr	r3, [pc, #432]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea4:	f023 020c 	bic.w	r2, r3, #12
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eac:	4968      	ldr	r1, [pc, #416]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ec0:	4b63      	ldr	r3, [pc, #396]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ece:	4960      	ldr	r1, [pc, #384]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ee2:	4b5b      	ldr	r3, [pc, #364]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ef0:	4957      	ldr	r1, [pc, #348]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f04:	4b52      	ldr	r3, [pc, #328]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f0a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f12:	494f      	ldr	r1, [pc, #316]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f26:	4b4a      	ldr	r3, [pc, #296]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f2c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f34:	4946      	ldr	r1, [pc, #280]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00a      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f48:	4b41      	ldr	r3, [pc, #260]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f4e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f56:	493e      	ldr	r1, [pc, #248]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f6a:	4b39      	ldr	r3, [pc, #228]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f70:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f78:	4935      	ldr	r1, [pc, #212]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00a      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f8c:	4b30      	ldr	r3, [pc, #192]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f92:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f9a:	492d      	ldr	r1, [pc, #180]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d011      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002fae:	4b28      	ldr	r3, [pc, #160]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fbc:	4924      	ldr	r1, [pc, #144]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fee:	4b18      	ldr	r3, [pc, #96]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ffc:	4914      	ldr	r1, [pc, #80]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00b      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003010:	4b0f      	ldr	r3, [pc, #60]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003016:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003020:	490b      	ldr	r1, [pc, #44]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00f      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003034:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800303a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003044:	4902      	ldr	r1, [pc, #8]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800304c:	e002      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00b      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003060:	4b8a      	ldr	r3, [pc, #552]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003062:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003066:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003070:	4986      	ldr	r1, [pc, #536]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00b      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003084:	4b81      	ldr	r3, [pc, #516]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003086:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800308a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003094:	497d      	ldr	r1, [pc, #500]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d006      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 80d6 	beq.w	800325c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030b0:	4b76      	ldr	r3, [pc, #472]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a75      	ldr	r2, [pc, #468]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80030ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030bc:	f7fe f848 	bl	8001150 <HAL_GetTick>
 80030c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030c4:	f7fe f844 	bl	8001150 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b64      	cmp	r3, #100	@ 0x64
 80030d0:	d901      	bls.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e195      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030d6:	4b6d      	ldr	r3, [pc, #436]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d021      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d11d      	bne.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030f6:	4b65      	ldr	r3, [pc, #404]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030fc:	0c1b      	lsrs	r3, r3, #16
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003104:	4b61      	ldr	r3, [pc, #388]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003106:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800310a:	0e1b      	lsrs	r3, r3, #24
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	019a      	lsls	r2, r3, #6
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	041b      	lsls	r3, r3, #16
 800311c:	431a      	orrs	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	061b      	lsls	r3, r3, #24
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	071b      	lsls	r3, r3, #28
 800312a:	4958      	ldr	r1, [pc, #352]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d004      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003142:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003146:	d00a      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003150:	2b00      	cmp	r3, #0
 8003152:	d02e      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003158:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800315c:	d129      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800315e:	4b4b      	ldr	r3, [pc, #300]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003160:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003164:	0c1b      	lsrs	r3, r3, #16
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800316c:	4b47      	ldr	r3, [pc, #284]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800316e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003172:	0f1b      	lsrs	r3, r3, #28
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	019a      	lsls	r2, r3, #6
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	041b      	lsls	r3, r3, #16
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	061b      	lsls	r3, r3, #24
 800318c:	431a      	orrs	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	071b      	lsls	r3, r3, #28
 8003192:	493e      	ldr	r1, [pc, #248]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800319a:	4b3c      	ldr	r3, [pc, #240]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800319c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031a0:	f023 021f 	bic.w	r2, r3, #31
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	3b01      	subs	r3, #1
 80031aa:	4938      	ldr	r1, [pc, #224]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d01d      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031be:	4b33      	ldr	r3, [pc, #204]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031c4:	0e1b      	lsrs	r3, r3, #24
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031cc:	4b2f      	ldr	r3, [pc, #188]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031d2:	0f1b      	lsrs	r3, r3, #28
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	019a      	lsls	r2, r3, #6
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	041b      	lsls	r3, r3, #16
 80031e6:	431a      	orrs	r2, r3
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	061b      	lsls	r3, r3, #24
 80031ec:	431a      	orrs	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	071b      	lsls	r3, r3, #28
 80031f2:	4926      	ldr	r1, [pc, #152]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d011      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	019a      	lsls	r2, r3, #6
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	041b      	lsls	r3, r3, #16
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	061b      	lsls	r3, r3, #24
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	071b      	lsls	r3, r3, #28
 8003222:	491a      	ldr	r1, [pc, #104]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800322a:	4b18      	ldr	r3, [pc, #96]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a17      	ldr	r2, [pc, #92]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003230:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003234:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003236:	f7fd ff8b 	bl	8001150 <HAL_GetTick>
 800323a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800323c:	e008      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800323e:	f7fd ff87 	bl	8001150 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b64      	cmp	r3, #100	@ 0x64
 800324a:	d901      	bls.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e0d8      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003250:	4b0e      	ldr	r3, [pc, #56]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f0      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2b01      	cmp	r3, #1
 8003260:	f040 80ce 	bne.w	8003400 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003264:	4b09      	ldr	r3, [pc, #36]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a08      	ldr	r2, [pc, #32]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800326a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800326e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003270:	f7fd ff6e 	bl	8001150 <HAL_GetTick>
 8003274:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003276:	e00b      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003278:	f7fd ff6a 	bl	8001150 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b64      	cmp	r3, #100	@ 0x64
 8003284:	d904      	bls.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e0bb      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003290:	4b5e      	ldr	r3, [pc, #376]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003298:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800329c:	d0ec      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d009      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d02e      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d12a      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032c6:	4b51      	ldr	r3, [pc, #324]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032cc:	0c1b      	lsrs	r3, r3, #16
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032d4:	4b4d      	ldr	r3, [pc, #308]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032da:	0f1b      	lsrs	r3, r3, #28
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	019a      	lsls	r2, r3, #6
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	041b      	lsls	r3, r3, #16
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	061b      	lsls	r3, r3, #24
 80032f4:	431a      	orrs	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	071b      	lsls	r3, r3, #28
 80032fa:	4944      	ldr	r1, [pc, #272]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003302:	4b42      	ldr	r3, [pc, #264]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003304:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003308:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003310:	3b01      	subs	r3, #1
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	493d      	ldr	r1, [pc, #244]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d022      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800332c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003330:	d11d      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003332:	4b36      	ldr	r3, [pc, #216]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003338:	0e1b      	lsrs	r3, r3, #24
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003340:	4b32      	ldr	r3, [pc, #200]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003346:	0f1b      	lsrs	r3, r3, #28
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	019a      	lsls	r2, r3, #6
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	041b      	lsls	r3, r3, #16
 800335a:	431a      	orrs	r2, r3
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	061b      	lsls	r3, r3, #24
 8003360:	431a      	orrs	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	071b      	lsls	r3, r3, #28
 8003366:	4929      	ldr	r1, [pc, #164]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d028      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800337a:	4b24      	ldr	r3, [pc, #144]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800337c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003380:	0e1b      	lsrs	r3, r3, #24
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003388:	4b20      	ldr	r3, [pc, #128]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800338e:	0c1b      	lsrs	r3, r3, #16
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	019a      	lsls	r2, r3, #6
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	041b      	lsls	r3, r3, #16
 80033a0:	431a      	orrs	r2, r3
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	061b      	lsls	r3, r3, #24
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	071b      	lsls	r3, r3, #28
 80033ae:	4917      	ldr	r1, [pc, #92]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80033b6:	4b15      	ldr	r3, [pc, #84]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c4:	4911      	ldr	r1, [pc, #68]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80033cc:	4b0f      	ldr	r3, [pc, #60]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a0e      	ldr	r2, [pc, #56]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033d8:	f7fd feba 	bl	8001150 <HAL_GetTick>
 80033dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033e0:	f7fd feb6 	bl	8001150 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	@ 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e007      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033f2:	4b06      	ldr	r3, [pc, #24]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033fe:	d1ef      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3720      	adds	r7, #32
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40023800 	.word	0x40023800

08003410 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e049      	b.n	80034b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fd fd08 	bl	8000e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3304      	adds	r3, #4
 800344c:	4619      	mov	r1, r3
 800344e:	4610      	mov	r0, r2
 8003450:	f000 fd98 	bl	8003f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d001      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e054      	b.n	8003582 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a26      	ldr	r2, [pc, #152]	@ (8003590 <HAL_TIM_Base_Start_IT+0xd0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d022      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x80>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003502:	d01d      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x80>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a22      	ldr	r2, [pc, #136]	@ (8003594 <HAL_TIM_Base_Start_IT+0xd4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d018      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x80>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a21      	ldr	r2, [pc, #132]	@ (8003598 <HAL_TIM_Base_Start_IT+0xd8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d013      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x80>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a1f      	ldr	r2, [pc, #124]	@ (800359c <HAL_TIM_Base_Start_IT+0xdc>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00e      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x80>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a1e      	ldr	r2, [pc, #120]	@ (80035a0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d009      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x80>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1c      	ldr	r2, [pc, #112]	@ (80035a4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d004      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x80>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1b      	ldr	r2, [pc, #108]	@ (80035a8 <HAL_TIM_Base_Start_IT+0xe8>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d115      	bne.n	800356c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	4b19      	ldr	r3, [pc, #100]	@ (80035ac <HAL_TIM_Base_Start_IT+0xec>)
 8003548:	4013      	ands	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b06      	cmp	r3, #6
 8003550:	d015      	beq.n	800357e <HAL_TIM_Base_Start_IT+0xbe>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003558:	d011      	beq.n	800357e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 0201 	orr.w	r2, r2, #1
 8003568:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356a:	e008      	b.n	800357e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	e000      	b.n	8003580 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800357e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40010000 	.word	0x40010000
 8003594:	40000400 	.word	0x40000400
 8003598:	40000800 	.word	0x40000800
 800359c:	40000c00 	.word	0x40000c00
 80035a0:	40010400 	.word	0x40010400
 80035a4:	40014000 	.word	0x40014000
 80035a8:	40001800 	.word	0x40001800
 80035ac:	00010007 	.word	0x00010007

080035b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e049      	b.n	8003656 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f841 	bl	800365e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3304      	adds	r3, #4
 80035ec:	4619      	mov	r1, r3
 80035ee:	4610      	mov	r0, r2
 80035f0:	f000 fcc8 	bl	8003f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d109      	bne.n	8003698 <HAL_TIM_PWM_Start+0x24>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b01      	cmp	r3, #1
 800368e:	bf14      	ite	ne
 8003690:	2301      	movne	r3, #1
 8003692:	2300      	moveq	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e03c      	b.n	8003712 <HAL_TIM_PWM_Start+0x9e>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2b04      	cmp	r3, #4
 800369c:	d109      	bne.n	80036b2 <HAL_TIM_PWM_Start+0x3e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	bf14      	ite	ne
 80036aa:	2301      	movne	r3, #1
 80036ac:	2300      	moveq	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	e02f      	b.n	8003712 <HAL_TIM_PWM_Start+0x9e>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d109      	bne.n	80036cc <HAL_TIM_PWM_Start+0x58>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	bf14      	ite	ne
 80036c4:	2301      	movne	r3, #1
 80036c6:	2300      	moveq	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e022      	b.n	8003712 <HAL_TIM_PWM_Start+0x9e>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2b0c      	cmp	r3, #12
 80036d0:	d109      	bne.n	80036e6 <HAL_TIM_PWM_Start+0x72>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b01      	cmp	r3, #1
 80036dc:	bf14      	ite	ne
 80036de:	2301      	movne	r3, #1
 80036e0:	2300      	moveq	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	e015      	b.n	8003712 <HAL_TIM_PWM_Start+0x9e>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b10      	cmp	r3, #16
 80036ea:	d109      	bne.n	8003700 <HAL_TIM_PWM_Start+0x8c>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	bf14      	ite	ne
 80036f8:	2301      	movne	r3, #1
 80036fa:	2300      	moveq	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	e008      	b.n	8003712 <HAL_TIM_PWM_Start+0x9e>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b01      	cmp	r3, #1
 800370a:	bf14      	ite	ne
 800370c:	2301      	movne	r3, #1
 800370e:	2300      	moveq	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e092      	b.n	8003840 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d104      	bne.n	800372a <HAL_TIM_PWM_Start+0xb6>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003728:	e023      	b.n	8003772 <HAL_TIM_PWM_Start+0xfe>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b04      	cmp	r3, #4
 800372e:	d104      	bne.n	800373a <HAL_TIM_PWM_Start+0xc6>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003738:	e01b      	b.n	8003772 <HAL_TIM_PWM_Start+0xfe>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b08      	cmp	r3, #8
 800373e:	d104      	bne.n	800374a <HAL_TIM_PWM_Start+0xd6>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003748:	e013      	b.n	8003772 <HAL_TIM_PWM_Start+0xfe>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b0c      	cmp	r3, #12
 800374e:	d104      	bne.n	800375a <HAL_TIM_PWM_Start+0xe6>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003758:	e00b      	b.n	8003772 <HAL_TIM_PWM_Start+0xfe>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b10      	cmp	r3, #16
 800375e:	d104      	bne.n	800376a <HAL_TIM_PWM_Start+0xf6>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003768:	e003      	b.n	8003772 <HAL_TIM_PWM_Start+0xfe>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2202      	movs	r2, #2
 800376e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2201      	movs	r2, #1
 8003778:	6839      	ldr	r1, [r7, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f000 ffa6 	bl	80046cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a30      	ldr	r2, [pc, #192]	@ (8003848 <HAL_TIM_PWM_Start+0x1d4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d004      	beq.n	8003794 <HAL_TIM_PWM_Start+0x120>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a2f      	ldr	r2, [pc, #188]	@ (800384c <HAL_TIM_PWM_Start+0x1d8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d101      	bne.n	8003798 <HAL_TIM_PWM_Start+0x124>
 8003794:	2301      	movs	r3, #1
 8003796:	e000      	b.n	800379a <HAL_TIM_PWM_Start+0x126>
 8003798:	2300      	movs	r3, #0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a25      	ldr	r2, [pc, #148]	@ (8003848 <HAL_TIM_PWM_Start+0x1d4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d022      	beq.n	80037fe <HAL_TIM_PWM_Start+0x18a>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037c0:	d01d      	beq.n	80037fe <HAL_TIM_PWM_Start+0x18a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a22      	ldr	r2, [pc, #136]	@ (8003850 <HAL_TIM_PWM_Start+0x1dc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d018      	beq.n	80037fe <HAL_TIM_PWM_Start+0x18a>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a20      	ldr	r2, [pc, #128]	@ (8003854 <HAL_TIM_PWM_Start+0x1e0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d013      	beq.n	80037fe <HAL_TIM_PWM_Start+0x18a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1f      	ldr	r2, [pc, #124]	@ (8003858 <HAL_TIM_PWM_Start+0x1e4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00e      	beq.n	80037fe <HAL_TIM_PWM_Start+0x18a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a19      	ldr	r2, [pc, #100]	@ (800384c <HAL_TIM_PWM_Start+0x1d8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d009      	beq.n	80037fe <HAL_TIM_PWM_Start+0x18a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1b      	ldr	r2, [pc, #108]	@ (800385c <HAL_TIM_PWM_Start+0x1e8>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d004      	beq.n	80037fe <HAL_TIM_PWM_Start+0x18a>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a19      	ldr	r2, [pc, #100]	@ (8003860 <HAL_TIM_PWM_Start+0x1ec>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d115      	bne.n	800382a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	4b17      	ldr	r3, [pc, #92]	@ (8003864 <HAL_TIM_PWM_Start+0x1f0>)
 8003806:	4013      	ands	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2b06      	cmp	r3, #6
 800380e:	d015      	beq.n	800383c <HAL_TIM_PWM_Start+0x1c8>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003816:	d011      	beq.n	800383c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003828:	e008      	b.n	800383c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f042 0201 	orr.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	e000      	b.n	800383e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800383c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40010000 	.word	0x40010000
 800384c:	40010400 	.word	0x40010400
 8003850:	40000400 	.word	0x40000400
 8003854:	40000800 	.word	0x40000800
 8003858:	40000c00 	.word	0x40000c00
 800385c:	40014000 	.word	0x40014000
 8003860:	40001800 	.word	0x40001800
 8003864:	00010007 	.word	0x00010007

08003868 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2200      	movs	r2, #0
 8003878:	6839      	ldr	r1, [r7, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f000 ff26 	bl	80046cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a36      	ldr	r2, [pc, #216]	@ (8003960 <HAL_TIM_PWM_Stop+0xf8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d004      	beq.n	8003894 <HAL_TIM_PWM_Stop+0x2c>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a35      	ldr	r2, [pc, #212]	@ (8003964 <HAL_TIM_PWM_Stop+0xfc>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d101      	bne.n	8003898 <HAL_TIM_PWM_Stop+0x30>
 8003894:	2301      	movs	r3, #1
 8003896:	e000      	b.n	800389a <HAL_TIM_PWM_Stop+0x32>
 8003898:	2300      	movs	r3, #0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d017      	beq.n	80038ce <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6a1a      	ldr	r2, [r3, #32]
 80038a4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10f      	bne.n	80038ce <HAL_TIM_PWM_Stop+0x66>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6a1a      	ldr	r2, [r3, #32]
 80038b4:	f240 4344 	movw	r3, #1092	@ 0x444
 80038b8:	4013      	ands	r3, r2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d107      	bne.n	80038ce <HAL_TIM_PWM_Stop+0x66>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6a1a      	ldr	r2, [r3, #32]
 80038d4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80038d8:	4013      	ands	r3, r2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10f      	bne.n	80038fe <HAL_TIM_PWM_Stop+0x96>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6a1a      	ldr	r2, [r3, #32]
 80038e4:	f240 4344 	movw	r3, #1092	@ 0x444
 80038e8:	4013      	ands	r3, r2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d107      	bne.n	80038fe <HAL_TIM_PWM_Stop+0x96>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0201 	bic.w	r2, r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d104      	bne.n	800390e <HAL_TIM_PWM_Stop+0xa6>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800390c:	e023      	b.n	8003956 <HAL_TIM_PWM_Stop+0xee>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b04      	cmp	r3, #4
 8003912:	d104      	bne.n	800391e <HAL_TIM_PWM_Stop+0xb6>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800391c:	e01b      	b.n	8003956 <HAL_TIM_PWM_Stop+0xee>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b08      	cmp	r3, #8
 8003922:	d104      	bne.n	800392e <HAL_TIM_PWM_Stop+0xc6>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800392c:	e013      	b.n	8003956 <HAL_TIM_PWM_Stop+0xee>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b0c      	cmp	r3, #12
 8003932:	d104      	bne.n	800393e <HAL_TIM_PWM_Stop+0xd6>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800393c:	e00b      	b.n	8003956 <HAL_TIM_PWM_Stop+0xee>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b10      	cmp	r3, #16
 8003942:	d104      	bne.n	800394e <HAL_TIM_PWM_Stop+0xe6>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800394c:	e003      	b.n	8003956 <HAL_TIM_PWM_Stop+0xee>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40010000 	.word	0x40010000
 8003964:	40010400 	.word	0x40010400

08003968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d020      	beq.n	80039cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d01b      	beq.n	80039cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0202 	mvn.w	r2, #2
 800399c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fac8 	bl	8003f48 <HAL_TIM_IC_CaptureCallback>
 80039b8:	e005      	b.n	80039c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 faba 	bl	8003f34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 facb 	bl	8003f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d020      	beq.n	8003a18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d01b      	beq.n	8003a18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0204 	mvn.w	r2, #4
 80039e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2202      	movs	r2, #2
 80039ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 faa2 	bl	8003f48 <HAL_TIM_IC_CaptureCallback>
 8003a04:	e005      	b.n	8003a12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fa94 	bl	8003f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 faa5 	bl	8003f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d020      	beq.n	8003a64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01b      	beq.n	8003a64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0208 	mvn.w	r2, #8
 8003a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2204      	movs	r2, #4
 8003a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fa7c 	bl	8003f48 <HAL_TIM_IC_CaptureCallback>
 8003a50:	e005      	b.n	8003a5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fa6e 	bl	8003f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fa7f 	bl	8003f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f003 0310 	and.w	r3, r3, #16
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d020      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d01b      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0210 	mvn.w	r2, #16
 8003a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2208      	movs	r2, #8
 8003a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fa56 	bl	8003f48 <HAL_TIM_IC_CaptureCallback>
 8003a9c:	e005      	b.n	8003aaa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fa48 	bl	8003f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fa59 	bl	8003f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00c      	beq.n	8003ad4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d007      	beq.n	8003ad4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0201 	mvn.w	r2, #1
 8003acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fc ff78 	bl	80009c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d104      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00c      	beq.n	8003b02 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d007      	beq.n	8003b02 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fea3 	bl	8004848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00c      	beq.n	8003b26 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d007      	beq.n	8003b26 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fe9b 	bl	800485c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00c      	beq.n	8003b4a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d007      	beq.n	8003b4a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fa13 	bl	8003f70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00c      	beq.n	8003b6e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d007      	beq.n	8003b6e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f06f 0220 	mvn.w	r2, #32
 8003b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fe63 	bl	8004834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b6e:	bf00      	nop
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e0ff      	b.n	8003d96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b14      	cmp	r3, #20
 8003ba2:	f200 80f0 	bhi.w	8003d86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bac:	08003c01 	.word	0x08003c01
 8003bb0:	08003d87 	.word	0x08003d87
 8003bb4:	08003d87 	.word	0x08003d87
 8003bb8:	08003d87 	.word	0x08003d87
 8003bbc:	08003c41 	.word	0x08003c41
 8003bc0:	08003d87 	.word	0x08003d87
 8003bc4:	08003d87 	.word	0x08003d87
 8003bc8:	08003d87 	.word	0x08003d87
 8003bcc:	08003c83 	.word	0x08003c83
 8003bd0:	08003d87 	.word	0x08003d87
 8003bd4:	08003d87 	.word	0x08003d87
 8003bd8:	08003d87 	.word	0x08003d87
 8003bdc:	08003cc3 	.word	0x08003cc3
 8003be0:	08003d87 	.word	0x08003d87
 8003be4:	08003d87 	.word	0x08003d87
 8003be8:	08003d87 	.word	0x08003d87
 8003bec:	08003d05 	.word	0x08003d05
 8003bf0:	08003d87 	.word	0x08003d87
 8003bf4:	08003d87 	.word	0x08003d87
 8003bf8:	08003d87 	.word	0x08003d87
 8003bfc:	08003d45 	.word	0x08003d45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68b9      	ldr	r1, [r7, #8]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fa68 	bl	80040dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0208 	orr.w	r2, r2, #8
 8003c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699a      	ldr	r2, [r3, #24]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0204 	bic.w	r2, r2, #4
 8003c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6999      	ldr	r1, [r3, #24]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	619a      	str	r2, [r3, #24]
      break;
 8003c3e:	e0a5      	b.n	8003d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68b9      	ldr	r1, [r7, #8]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 faba 	bl	80041c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699a      	ldr	r2, [r3, #24]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699a      	ldr	r2, [r3, #24]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6999      	ldr	r1, [r3, #24]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	021a      	lsls	r2, r3, #8
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	619a      	str	r2, [r3, #24]
      break;
 8003c80:	e084      	b.n	8003d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68b9      	ldr	r1, [r7, #8]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fb11 	bl	80042b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69da      	ldr	r2, [r3, #28]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0208 	orr.w	r2, r2, #8
 8003c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69da      	ldr	r2, [r3, #28]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0204 	bic.w	r2, r2, #4
 8003cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69d9      	ldr	r1, [r3, #28]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	61da      	str	r2, [r3, #28]
      break;
 8003cc0:	e064      	b.n	8003d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68b9      	ldr	r1, [r7, #8]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fb67 	bl	800439c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69da      	ldr	r2, [r3, #28]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	69d9      	ldr	r1, [r3, #28]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	021a      	lsls	r2, r3, #8
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	61da      	str	r2, [r3, #28]
      break;
 8003d02:	e043      	b.n	8003d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fb9e 	bl	800444c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0208 	orr.w	r2, r2, #8
 8003d1e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0204 	bic.w	r2, r2, #4
 8003d2e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	691a      	ldr	r2, [r3, #16]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003d42:	e023      	b.n	8003d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fbd0 	bl	80044f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d5e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d6e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	021a      	lsls	r2, r3, #8
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003d84:	e002      	b.n	8003d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	75fb      	strb	r3, [r7, #23]
      break;
 8003d8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop

08003da0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_TIM_ConfigClockSource+0x1c>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e0b4      	b.n	8003f26 <HAL_TIM_ConfigClockSource+0x186>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	4b56      	ldr	r3, [pc, #344]	@ (8003f30 <HAL_TIM_ConfigClockSource+0x190>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003de2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003df4:	d03e      	beq.n	8003e74 <HAL_TIM_ConfigClockSource+0xd4>
 8003df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dfa:	f200 8087 	bhi.w	8003f0c <HAL_TIM_ConfigClockSource+0x16c>
 8003dfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e02:	f000 8086 	beq.w	8003f12 <HAL_TIM_ConfigClockSource+0x172>
 8003e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e0a:	d87f      	bhi.n	8003f0c <HAL_TIM_ConfigClockSource+0x16c>
 8003e0c:	2b70      	cmp	r3, #112	@ 0x70
 8003e0e:	d01a      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0xa6>
 8003e10:	2b70      	cmp	r3, #112	@ 0x70
 8003e12:	d87b      	bhi.n	8003f0c <HAL_TIM_ConfigClockSource+0x16c>
 8003e14:	2b60      	cmp	r3, #96	@ 0x60
 8003e16:	d050      	beq.n	8003eba <HAL_TIM_ConfigClockSource+0x11a>
 8003e18:	2b60      	cmp	r3, #96	@ 0x60
 8003e1a:	d877      	bhi.n	8003f0c <HAL_TIM_ConfigClockSource+0x16c>
 8003e1c:	2b50      	cmp	r3, #80	@ 0x50
 8003e1e:	d03c      	beq.n	8003e9a <HAL_TIM_ConfigClockSource+0xfa>
 8003e20:	2b50      	cmp	r3, #80	@ 0x50
 8003e22:	d873      	bhi.n	8003f0c <HAL_TIM_ConfigClockSource+0x16c>
 8003e24:	2b40      	cmp	r3, #64	@ 0x40
 8003e26:	d058      	beq.n	8003eda <HAL_TIM_ConfigClockSource+0x13a>
 8003e28:	2b40      	cmp	r3, #64	@ 0x40
 8003e2a:	d86f      	bhi.n	8003f0c <HAL_TIM_ConfigClockSource+0x16c>
 8003e2c:	2b30      	cmp	r3, #48	@ 0x30
 8003e2e:	d064      	beq.n	8003efa <HAL_TIM_ConfigClockSource+0x15a>
 8003e30:	2b30      	cmp	r3, #48	@ 0x30
 8003e32:	d86b      	bhi.n	8003f0c <HAL_TIM_ConfigClockSource+0x16c>
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d060      	beq.n	8003efa <HAL_TIM_ConfigClockSource+0x15a>
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d867      	bhi.n	8003f0c <HAL_TIM_ConfigClockSource+0x16c>
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d05c      	beq.n	8003efa <HAL_TIM_ConfigClockSource+0x15a>
 8003e40:	2b10      	cmp	r3, #16
 8003e42:	d05a      	beq.n	8003efa <HAL_TIM_ConfigClockSource+0x15a>
 8003e44:	e062      	b.n	8003f0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e56:	f000 fc19 	bl	800468c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	609a      	str	r2, [r3, #8]
      break;
 8003e72:	e04f      	b.n	8003f14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e84:	f000 fc02 	bl	800468c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e96:	609a      	str	r2, [r3, #8]
      break;
 8003e98:	e03c      	b.n	8003f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f000 fb76 	bl	8004598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2150      	movs	r1, #80	@ 0x50
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fbcf 	bl	8004656 <TIM_ITRx_SetConfig>
      break;
 8003eb8:	e02c      	b.n	8003f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f000 fb95 	bl	80045f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2160      	movs	r1, #96	@ 0x60
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fbbf 	bl	8004656 <TIM_ITRx_SetConfig>
      break;
 8003ed8:	e01c      	b.n	8003f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f000 fb56 	bl	8004598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2140      	movs	r1, #64	@ 0x40
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fbaf 	bl	8004656 <TIM_ITRx_SetConfig>
      break;
 8003ef8:	e00c      	b.n	8003f14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4619      	mov	r1, r3
 8003f04:	4610      	mov	r0, r2
 8003f06:	f000 fba6 	bl	8004656 <TIM_ITRx_SetConfig>
      break;
 8003f0a:	e003      	b.n	8003f14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f10:	e000      	b.n	8003f14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	fffeff88 	.word	0xfffeff88

08003f34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a46      	ldr	r2, [pc, #280]	@ (80040b0 <TIM_Base_SetConfig+0x12c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d013      	beq.n	8003fc4 <TIM_Base_SetConfig+0x40>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fa2:	d00f      	beq.n	8003fc4 <TIM_Base_SetConfig+0x40>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a43      	ldr	r2, [pc, #268]	@ (80040b4 <TIM_Base_SetConfig+0x130>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00b      	beq.n	8003fc4 <TIM_Base_SetConfig+0x40>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a42      	ldr	r2, [pc, #264]	@ (80040b8 <TIM_Base_SetConfig+0x134>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d007      	beq.n	8003fc4 <TIM_Base_SetConfig+0x40>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a41      	ldr	r2, [pc, #260]	@ (80040bc <TIM_Base_SetConfig+0x138>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d003      	beq.n	8003fc4 <TIM_Base_SetConfig+0x40>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a40      	ldr	r2, [pc, #256]	@ (80040c0 <TIM_Base_SetConfig+0x13c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d108      	bne.n	8003fd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a35      	ldr	r2, [pc, #212]	@ (80040b0 <TIM_Base_SetConfig+0x12c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d02b      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fe4:	d027      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a32      	ldr	r2, [pc, #200]	@ (80040b4 <TIM_Base_SetConfig+0x130>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d023      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a31      	ldr	r2, [pc, #196]	@ (80040b8 <TIM_Base_SetConfig+0x134>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d01f      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a30      	ldr	r2, [pc, #192]	@ (80040bc <TIM_Base_SetConfig+0x138>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d01b      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a2f      	ldr	r2, [pc, #188]	@ (80040c0 <TIM_Base_SetConfig+0x13c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d017      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a2e      	ldr	r2, [pc, #184]	@ (80040c4 <TIM_Base_SetConfig+0x140>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d013      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a2d      	ldr	r2, [pc, #180]	@ (80040c8 <TIM_Base_SetConfig+0x144>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00f      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a2c      	ldr	r2, [pc, #176]	@ (80040cc <TIM_Base_SetConfig+0x148>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00b      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a2b      	ldr	r2, [pc, #172]	@ (80040d0 <TIM_Base_SetConfig+0x14c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d007      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a2a      	ldr	r2, [pc, #168]	@ (80040d4 <TIM_Base_SetConfig+0x150>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d003      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a29      	ldr	r2, [pc, #164]	@ (80040d8 <TIM_Base_SetConfig+0x154>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d108      	bne.n	8004048 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800403c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4313      	orrs	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a10      	ldr	r2, [pc, #64]	@ (80040b0 <TIM_Base_SetConfig+0x12c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d003      	beq.n	800407c <TIM_Base_SetConfig+0xf8>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a12      	ldr	r2, [pc, #72]	@ (80040c0 <TIM_Base_SetConfig+0x13c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d103      	bne.n	8004084 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b01      	cmp	r3, #1
 8004094:	d105      	bne.n	80040a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f023 0201 	bic.w	r2, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	611a      	str	r2, [r3, #16]
  }
}
 80040a2:	bf00      	nop
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40010000 	.word	0x40010000
 80040b4:	40000400 	.word	0x40000400
 80040b8:	40000800 	.word	0x40000800
 80040bc:	40000c00 	.word	0x40000c00
 80040c0:	40010400 	.word	0x40010400
 80040c4:	40014000 	.word	0x40014000
 80040c8:	40014400 	.word	0x40014400
 80040cc:	40014800 	.word	0x40014800
 80040d0:	40001800 	.word	0x40001800
 80040d4:	40001c00 	.word	0x40001c00
 80040d8:	40002000 	.word	0x40002000

080040dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f023 0201 	bic.w	r2, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4b2b      	ldr	r3, [pc, #172]	@ (80041b4 <TIM_OC1_SetConfig+0xd8>)
 8004108:	4013      	ands	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0303 	bic.w	r3, r3, #3
 8004112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f023 0302 	bic.w	r3, r3, #2
 8004124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a21      	ldr	r2, [pc, #132]	@ (80041b8 <TIM_OC1_SetConfig+0xdc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d003      	beq.n	8004140 <TIM_OC1_SetConfig+0x64>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a20      	ldr	r2, [pc, #128]	@ (80041bc <TIM_OC1_SetConfig+0xe0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d10c      	bne.n	800415a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f023 0308 	bic.w	r3, r3, #8
 8004146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f023 0304 	bic.w	r3, r3, #4
 8004158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a16      	ldr	r2, [pc, #88]	@ (80041b8 <TIM_OC1_SetConfig+0xdc>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d003      	beq.n	800416a <TIM_OC1_SetConfig+0x8e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a15      	ldr	r2, [pc, #84]	@ (80041bc <TIM_OC1_SetConfig+0xe0>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d111      	bne.n	800418e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	621a      	str	r2, [r3, #32]
}
 80041a8:	bf00      	nop
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	fffeff8f 	.word	0xfffeff8f
 80041b8:	40010000 	.word	0x40010000
 80041bc:	40010400 	.word	0x40010400

080041c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f023 0210 	bic.w	r2, r3, #16
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4b2e      	ldr	r3, [pc, #184]	@ (80042a4 <TIM_OC2_SetConfig+0xe4>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	021b      	lsls	r3, r3, #8
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f023 0320 	bic.w	r3, r3, #32
 800420a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4313      	orrs	r3, r2
 8004216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a23      	ldr	r2, [pc, #140]	@ (80042a8 <TIM_OC2_SetConfig+0xe8>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d003      	beq.n	8004228 <TIM_OC2_SetConfig+0x68>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a22      	ldr	r2, [pc, #136]	@ (80042ac <TIM_OC2_SetConfig+0xec>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d10d      	bne.n	8004244 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800422e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004242:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a18      	ldr	r2, [pc, #96]	@ (80042a8 <TIM_OC2_SetConfig+0xe8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d003      	beq.n	8004254 <TIM_OC2_SetConfig+0x94>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a17      	ldr	r2, [pc, #92]	@ (80042ac <TIM_OC2_SetConfig+0xec>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d113      	bne.n	800427c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800425a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	621a      	str	r2, [r3, #32]
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	feff8fff 	.word	0xfeff8fff
 80042a8:	40010000 	.word	0x40010000
 80042ac:	40010400 	.word	0x40010400

080042b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4b2d      	ldr	r3, [pc, #180]	@ (8004390 <TIM_OC3_SetConfig+0xe0>)
 80042dc:	4013      	ands	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0303 	bic.w	r3, r3, #3
 80042e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	021b      	lsls	r3, r3, #8
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a22      	ldr	r2, [pc, #136]	@ (8004394 <TIM_OC3_SetConfig+0xe4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d003      	beq.n	8004316 <TIM_OC3_SetConfig+0x66>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a21      	ldr	r2, [pc, #132]	@ (8004398 <TIM_OC3_SetConfig+0xe8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d10d      	bne.n	8004332 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800431c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a17      	ldr	r2, [pc, #92]	@ (8004394 <TIM_OC3_SetConfig+0xe4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d003      	beq.n	8004342 <TIM_OC3_SetConfig+0x92>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a16      	ldr	r2, [pc, #88]	@ (8004398 <TIM_OC3_SetConfig+0xe8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d113      	bne.n	800436a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4313      	orrs	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	621a      	str	r2, [r3, #32]
}
 8004384:	bf00      	nop
 8004386:	371c      	adds	r7, #28
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	fffeff8f 	.word	0xfffeff8f
 8004394:	40010000 	.word	0x40010000
 8004398:	40010400 	.word	0x40010400

0800439c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004440 <TIM_OC4_SetConfig+0xa4>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	021b      	lsls	r3, r3, #8
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4313      	orrs	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	031b      	lsls	r3, r3, #12
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a13      	ldr	r2, [pc, #76]	@ (8004444 <TIM_OC4_SetConfig+0xa8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d003      	beq.n	8004404 <TIM_OC4_SetConfig+0x68>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a12      	ldr	r2, [pc, #72]	@ (8004448 <TIM_OC4_SetConfig+0xac>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d109      	bne.n	8004418 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800440a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	019b      	lsls	r3, r3, #6
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	4313      	orrs	r3, r2
 8004416:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	621a      	str	r2, [r3, #32]
}
 8004432:	bf00      	nop
 8004434:	371c      	adds	r7, #28
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	feff8fff 	.word	0xfeff8fff
 8004444:	40010000 	.word	0x40010000
 8004448:	40010400 	.word	0x40010400

0800444c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4b1b      	ldr	r3, [pc, #108]	@ (80044e4 <TIM_OC5_SetConfig+0x98>)
 8004478:	4013      	ands	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800448c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	041b      	lsls	r3, r3, #16
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	4313      	orrs	r3, r2
 8004498:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a12      	ldr	r2, [pc, #72]	@ (80044e8 <TIM_OC5_SetConfig+0x9c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d003      	beq.n	80044aa <TIM_OC5_SetConfig+0x5e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a11      	ldr	r2, [pc, #68]	@ (80044ec <TIM_OC5_SetConfig+0xa0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d109      	bne.n	80044be <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	021b      	lsls	r3, r3, #8
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	621a      	str	r2, [r3, #32]
}
 80044d8:	bf00      	nop
 80044da:	371c      	adds	r7, #28
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	fffeff8f 	.word	0xfffeff8f
 80044e8:	40010000 	.word	0x40010000
 80044ec:	40010400 	.word	0x40010400

080044f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4b1c      	ldr	r3, [pc, #112]	@ (800458c <TIM_OC6_SetConfig+0x9c>)
 800451c:	4013      	ands	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004532:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	051b      	lsls	r3, r3, #20
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a13      	ldr	r2, [pc, #76]	@ (8004590 <TIM_OC6_SetConfig+0xa0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d003      	beq.n	8004550 <TIM_OC6_SetConfig+0x60>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a12      	ldr	r2, [pc, #72]	@ (8004594 <TIM_OC6_SetConfig+0xa4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d109      	bne.n	8004564 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004556:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	029b      	lsls	r3, r3, #10
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	4313      	orrs	r3, r2
 8004562:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	621a      	str	r2, [r3, #32]
}
 800457e:	bf00      	nop
 8004580:	371c      	adds	r7, #28
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	feff8fff 	.word	0xfeff8fff
 8004590:	40010000 	.word	0x40010000
 8004594:	40010400 	.word	0x40010400

08004598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	f023 0201 	bic.w	r2, r3, #1
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f023 030a 	bic.w	r3, r3, #10
 80045d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4313      	orrs	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	621a      	str	r2, [r3, #32]
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b087      	sub	sp, #28
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	60f8      	str	r0, [r7, #12]
 80045fe:	60b9      	str	r1, [r7, #8]
 8004600:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	f023 0210 	bic.w	r2, r3, #16
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004620:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	031b      	lsls	r3, r3, #12
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004632:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	621a      	str	r2, [r3, #32]
}
 800464a:	bf00      	nop
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004656:	b480      	push	{r7}
 8004658:	b085      	sub	sp, #20
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800466c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	f043 0307 	orr.w	r3, r3, #7
 8004678:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	609a      	str	r2, [r3, #8]
}
 8004680:	bf00      	nop
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
 8004698:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	021a      	lsls	r2, r3, #8
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	431a      	orrs	r2, r3
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	609a      	str	r2, [r3, #8]
}
 80046c0:	bf00      	nop
 80046c2:	371c      	adds	r7, #28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f003 031f 	and.w	r3, r3, #31
 80046de:	2201      	movs	r2, #1
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a1a      	ldr	r2, [r3, #32]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	43db      	mvns	r3, r3
 80046ee:	401a      	ands	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a1a      	ldr	r2, [r3, #32]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f003 031f 	and.w	r3, r3, #31
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	fa01 f303 	lsl.w	r3, r1, r3
 8004704:	431a      	orrs	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	621a      	str	r2, [r3, #32]
}
 800470a:	bf00      	nop
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
	...

08004718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800472c:	2302      	movs	r3, #2
 800472e:	e06d      	b.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a30      	ldr	r2, [pc, #192]	@ (8004818 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a2f      	ldr	r2, [pc, #188]	@ (800481c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d108      	bne.n	8004776 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800476a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800477c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4313      	orrs	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a20      	ldr	r2, [pc, #128]	@ (8004818 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d022      	beq.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047a2:	d01d      	beq.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004820 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d018      	beq.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004824 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d013      	beq.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1a      	ldr	r2, [pc, #104]	@ (8004828 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00e      	beq.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a15      	ldr	r2, [pc, #84]	@ (800481c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d009      	beq.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a16      	ldr	r2, [pc, #88]	@ (800482c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d004      	beq.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a15      	ldr	r2, [pc, #84]	@ (8004830 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d10c      	bne.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	40010000 	.word	0x40010000
 800481c:	40010400 	.word	0x40010400
 8004820:	40000400 	.word	0x40000400
 8004824:	40000800 	.word	0x40000800
 8004828:	40000c00 	.word	0x40000c00
 800482c:	40014000 	.word	0x40014000
 8004830:	40001800 	.word	0x40001800

08004834 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e040      	b.n	8004904 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004886:	2b00      	cmp	r3, #0
 8004888:	d106      	bne.n	8004898 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7fc fb82 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2224      	movs	r2, #36	@ 0x24
 800489c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0201 	bic.w	r2, r2, #1
 80048ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fb16 	bl	8004ee8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f8af 	bl	8004a20 <UART_SetConfig>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e01b      	b.n	8004904 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0201 	orr.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fb95 	bl	800502c <UART_CheckIdleState>
 8004902:	4603      	mov	r3, r0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08a      	sub	sp, #40	@ 0x28
 8004910:	af02      	add	r7, sp, #8
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	4613      	mov	r3, r2
 800491a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004920:	2b20      	cmp	r3, #32
 8004922:	d177      	bne.n	8004a14 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <HAL_UART_Transmit+0x24>
 800492a:	88fb      	ldrh	r3, [r7, #6]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e070      	b.n	8004a16 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2221      	movs	r2, #33	@ 0x21
 8004940:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004942:	f7fc fc05 	bl	8001150 <HAL_GetTick>
 8004946:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	88fa      	ldrh	r2, [r7, #6]
 800494c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	88fa      	ldrh	r2, [r7, #6]
 8004954:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004960:	d108      	bne.n	8004974 <HAL_UART_Transmit+0x68>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d104      	bne.n	8004974 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800496a:	2300      	movs	r3, #0
 800496c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	61bb      	str	r3, [r7, #24]
 8004972:	e003      	b.n	800497c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004978:	2300      	movs	r3, #0
 800497a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800497c:	e02f      	b.n	80049de <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2200      	movs	r2, #0
 8004986:	2180      	movs	r1, #128	@ 0x80
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 fbf7 	bl	800517c <UART_WaitOnFlagUntilTimeout>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d004      	beq.n	800499e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e03b      	b.n	8004a16 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10b      	bne.n	80049bc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	461a      	mov	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	3302      	adds	r3, #2
 80049b8:	61bb      	str	r3, [r7, #24]
 80049ba:	e007      	b.n	80049cc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	781a      	ldrb	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	3301      	adds	r3, #1
 80049ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1c9      	bne.n	800497e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2200      	movs	r2, #0
 80049f2:	2140      	movs	r1, #64	@ 0x40
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 fbc1 	bl	800517c <UART_WaitOnFlagUntilTimeout>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d004      	beq.n	8004a0a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e005      	b.n	8004a16 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	e000      	b.n	8004a16 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004a14:	2302      	movs	r3, #2
  }
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3720      	adds	r7, #32
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
	...

08004a20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	4ba6      	ldr	r3, [pc, #664]	@ (8004ce4 <UART_SetConfig+0x2c4>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6812      	ldr	r2, [r2, #0]
 8004a52:	6979      	ldr	r1, [r7, #20]
 8004a54:	430b      	orrs	r3, r1
 8004a56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a94      	ldr	r2, [pc, #592]	@ (8004ce8 <UART_SetConfig+0x2c8>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d120      	bne.n	8004ade <UART_SetConfig+0xbe>
 8004a9c:	4b93      	ldr	r3, [pc, #588]	@ (8004cec <UART_SetConfig+0x2cc>)
 8004a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d816      	bhi.n	8004ad8 <UART_SetConfig+0xb8>
 8004aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab0 <UART_SetConfig+0x90>)
 8004aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab0:	08004ac1 	.word	0x08004ac1
 8004ab4:	08004acd 	.word	0x08004acd
 8004ab8:	08004ac7 	.word	0x08004ac7
 8004abc:	08004ad3 	.word	0x08004ad3
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	77fb      	strb	r3, [r7, #31]
 8004ac4:	e150      	b.n	8004d68 <UART_SetConfig+0x348>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	77fb      	strb	r3, [r7, #31]
 8004aca:	e14d      	b.n	8004d68 <UART_SetConfig+0x348>
 8004acc:	2304      	movs	r3, #4
 8004ace:	77fb      	strb	r3, [r7, #31]
 8004ad0:	e14a      	b.n	8004d68 <UART_SetConfig+0x348>
 8004ad2:	2308      	movs	r3, #8
 8004ad4:	77fb      	strb	r3, [r7, #31]
 8004ad6:	e147      	b.n	8004d68 <UART_SetConfig+0x348>
 8004ad8:	2310      	movs	r3, #16
 8004ada:	77fb      	strb	r3, [r7, #31]
 8004adc:	e144      	b.n	8004d68 <UART_SetConfig+0x348>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a83      	ldr	r2, [pc, #524]	@ (8004cf0 <UART_SetConfig+0x2d0>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d132      	bne.n	8004b4e <UART_SetConfig+0x12e>
 8004ae8:	4b80      	ldr	r3, [pc, #512]	@ (8004cec <UART_SetConfig+0x2cc>)
 8004aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	2b0c      	cmp	r3, #12
 8004af4:	d828      	bhi.n	8004b48 <UART_SetConfig+0x128>
 8004af6:	a201      	add	r2, pc, #4	@ (adr r2, 8004afc <UART_SetConfig+0xdc>)
 8004af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afc:	08004b31 	.word	0x08004b31
 8004b00:	08004b49 	.word	0x08004b49
 8004b04:	08004b49 	.word	0x08004b49
 8004b08:	08004b49 	.word	0x08004b49
 8004b0c:	08004b3d 	.word	0x08004b3d
 8004b10:	08004b49 	.word	0x08004b49
 8004b14:	08004b49 	.word	0x08004b49
 8004b18:	08004b49 	.word	0x08004b49
 8004b1c:	08004b37 	.word	0x08004b37
 8004b20:	08004b49 	.word	0x08004b49
 8004b24:	08004b49 	.word	0x08004b49
 8004b28:	08004b49 	.word	0x08004b49
 8004b2c:	08004b43 	.word	0x08004b43
 8004b30:	2300      	movs	r3, #0
 8004b32:	77fb      	strb	r3, [r7, #31]
 8004b34:	e118      	b.n	8004d68 <UART_SetConfig+0x348>
 8004b36:	2302      	movs	r3, #2
 8004b38:	77fb      	strb	r3, [r7, #31]
 8004b3a:	e115      	b.n	8004d68 <UART_SetConfig+0x348>
 8004b3c:	2304      	movs	r3, #4
 8004b3e:	77fb      	strb	r3, [r7, #31]
 8004b40:	e112      	b.n	8004d68 <UART_SetConfig+0x348>
 8004b42:	2308      	movs	r3, #8
 8004b44:	77fb      	strb	r3, [r7, #31]
 8004b46:	e10f      	b.n	8004d68 <UART_SetConfig+0x348>
 8004b48:	2310      	movs	r3, #16
 8004b4a:	77fb      	strb	r3, [r7, #31]
 8004b4c:	e10c      	b.n	8004d68 <UART_SetConfig+0x348>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a68      	ldr	r2, [pc, #416]	@ (8004cf4 <UART_SetConfig+0x2d4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d120      	bne.n	8004b9a <UART_SetConfig+0x17a>
 8004b58:	4b64      	ldr	r3, [pc, #400]	@ (8004cec <UART_SetConfig+0x2cc>)
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b5e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004b62:	2b30      	cmp	r3, #48	@ 0x30
 8004b64:	d013      	beq.n	8004b8e <UART_SetConfig+0x16e>
 8004b66:	2b30      	cmp	r3, #48	@ 0x30
 8004b68:	d814      	bhi.n	8004b94 <UART_SetConfig+0x174>
 8004b6a:	2b20      	cmp	r3, #32
 8004b6c:	d009      	beq.n	8004b82 <UART_SetConfig+0x162>
 8004b6e:	2b20      	cmp	r3, #32
 8004b70:	d810      	bhi.n	8004b94 <UART_SetConfig+0x174>
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <UART_SetConfig+0x15c>
 8004b76:	2b10      	cmp	r3, #16
 8004b78:	d006      	beq.n	8004b88 <UART_SetConfig+0x168>
 8004b7a:	e00b      	b.n	8004b94 <UART_SetConfig+0x174>
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	77fb      	strb	r3, [r7, #31]
 8004b80:	e0f2      	b.n	8004d68 <UART_SetConfig+0x348>
 8004b82:	2302      	movs	r3, #2
 8004b84:	77fb      	strb	r3, [r7, #31]
 8004b86:	e0ef      	b.n	8004d68 <UART_SetConfig+0x348>
 8004b88:	2304      	movs	r3, #4
 8004b8a:	77fb      	strb	r3, [r7, #31]
 8004b8c:	e0ec      	b.n	8004d68 <UART_SetConfig+0x348>
 8004b8e:	2308      	movs	r3, #8
 8004b90:	77fb      	strb	r3, [r7, #31]
 8004b92:	e0e9      	b.n	8004d68 <UART_SetConfig+0x348>
 8004b94:	2310      	movs	r3, #16
 8004b96:	77fb      	strb	r3, [r7, #31]
 8004b98:	e0e6      	b.n	8004d68 <UART_SetConfig+0x348>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a56      	ldr	r2, [pc, #344]	@ (8004cf8 <UART_SetConfig+0x2d8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d120      	bne.n	8004be6 <UART_SetConfig+0x1c6>
 8004ba4:	4b51      	ldr	r3, [pc, #324]	@ (8004cec <UART_SetConfig+0x2cc>)
 8004ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004baa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004bae:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bb0:	d013      	beq.n	8004bda <UART_SetConfig+0x1ba>
 8004bb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bb4:	d814      	bhi.n	8004be0 <UART_SetConfig+0x1c0>
 8004bb6:	2b80      	cmp	r3, #128	@ 0x80
 8004bb8:	d009      	beq.n	8004bce <UART_SetConfig+0x1ae>
 8004bba:	2b80      	cmp	r3, #128	@ 0x80
 8004bbc:	d810      	bhi.n	8004be0 <UART_SetConfig+0x1c0>
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <UART_SetConfig+0x1a8>
 8004bc2:	2b40      	cmp	r3, #64	@ 0x40
 8004bc4:	d006      	beq.n	8004bd4 <UART_SetConfig+0x1b4>
 8004bc6:	e00b      	b.n	8004be0 <UART_SetConfig+0x1c0>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	77fb      	strb	r3, [r7, #31]
 8004bcc:	e0cc      	b.n	8004d68 <UART_SetConfig+0x348>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	77fb      	strb	r3, [r7, #31]
 8004bd2:	e0c9      	b.n	8004d68 <UART_SetConfig+0x348>
 8004bd4:	2304      	movs	r3, #4
 8004bd6:	77fb      	strb	r3, [r7, #31]
 8004bd8:	e0c6      	b.n	8004d68 <UART_SetConfig+0x348>
 8004bda:	2308      	movs	r3, #8
 8004bdc:	77fb      	strb	r3, [r7, #31]
 8004bde:	e0c3      	b.n	8004d68 <UART_SetConfig+0x348>
 8004be0:	2310      	movs	r3, #16
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	e0c0      	b.n	8004d68 <UART_SetConfig+0x348>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a44      	ldr	r2, [pc, #272]	@ (8004cfc <UART_SetConfig+0x2dc>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d125      	bne.n	8004c3c <UART_SetConfig+0x21c>
 8004bf0:	4b3e      	ldr	r3, [pc, #248]	@ (8004cec <UART_SetConfig+0x2cc>)
 8004bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bfe:	d017      	beq.n	8004c30 <UART_SetConfig+0x210>
 8004c00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c04:	d817      	bhi.n	8004c36 <UART_SetConfig+0x216>
 8004c06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c0a:	d00b      	beq.n	8004c24 <UART_SetConfig+0x204>
 8004c0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c10:	d811      	bhi.n	8004c36 <UART_SetConfig+0x216>
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <UART_SetConfig+0x1fe>
 8004c16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c1a:	d006      	beq.n	8004c2a <UART_SetConfig+0x20a>
 8004c1c:	e00b      	b.n	8004c36 <UART_SetConfig+0x216>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	77fb      	strb	r3, [r7, #31]
 8004c22:	e0a1      	b.n	8004d68 <UART_SetConfig+0x348>
 8004c24:	2302      	movs	r3, #2
 8004c26:	77fb      	strb	r3, [r7, #31]
 8004c28:	e09e      	b.n	8004d68 <UART_SetConfig+0x348>
 8004c2a:	2304      	movs	r3, #4
 8004c2c:	77fb      	strb	r3, [r7, #31]
 8004c2e:	e09b      	b.n	8004d68 <UART_SetConfig+0x348>
 8004c30:	2308      	movs	r3, #8
 8004c32:	77fb      	strb	r3, [r7, #31]
 8004c34:	e098      	b.n	8004d68 <UART_SetConfig+0x348>
 8004c36:	2310      	movs	r3, #16
 8004c38:	77fb      	strb	r3, [r7, #31]
 8004c3a:	e095      	b.n	8004d68 <UART_SetConfig+0x348>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a2f      	ldr	r2, [pc, #188]	@ (8004d00 <UART_SetConfig+0x2e0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d125      	bne.n	8004c92 <UART_SetConfig+0x272>
 8004c46:	4b29      	ldr	r3, [pc, #164]	@ (8004cec <UART_SetConfig+0x2cc>)
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c54:	d017      	beq.n	8004c86 <UART_SetConfig+0x266>
 8004c56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c5a:	d817      	bhi.n	8004c8c <UART_SetConfig+0x26c>
 8004c5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c60:	d00b      	beq.n	8004c7a <UART_SetConfig+0x25a>
 8004c62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c66:	d811      	bhi.n	8004c8c <UART_SetConfig+0x26c>
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <UART_SetConfig+0x254>
 8004c6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c70:	d006      	beq.n	8004c80 <UART_SetConfig+0x260>
 8004c72:	e00b      	b.n	8004c8c <UART_SetConfig+0x26c>
 8004c74:	2301      	movs	r3, #1
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e076      	b.n	8004d68 <UART_SetConfig+0x348>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e073      	b.n	8004d68 <UART_SetConfig+0x348>
 8004c80:	2304      	movs	r3, #4
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e070      	b.n	8004d68 <UART_SetConfig+0x348>
 8004c86:	2308      	movs	r3, #8
 8004c88:	77fb      	strb	r3, [r7, #31]
 8004c8a:	e06d      	b.n	8004d68 <UART_SetConfig+0x348>
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	77fb      	strb	r3, [r7, #31]
 8004c90:	e06a      	b.n	8004d68 <UART_SetConfig+0x348>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a1b      	ldr	r2, [pc, #108]	@ (8004d04 <UART_SetConfig+0x2e4>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d138      	bne.n	8004d0e <UART_SetConfig+0x2ee>
 8004c9c:	4b13      	ldr	r3, [pc, #76]	@ (8004cec <UART_SetConfig+0x2cc>)
 8004c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004ca6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004caa:	d017      	beq.n	8004cdc <UART_SetConfig+0x2bc>
 8004cac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cb0:	d82a      	bhi.n	8004d08 <UART_SetConfig+0x2e8>
 8004cb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cb6:	d00b      	beq.n	8004cd0 <UART_SetConfig+0x2b0>
 8004cb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cbc:	d824      	bhi.n	8004d08 <UART_SetConfig+0x2e8>
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <UART_SetConfig+0x2aa>
 8004cc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cc6:	d006      	beq.n	8004cd6 <UART_SetConfig+0x2b6>
 8004cc8:	e01e      	b.n	8004d08 <UART_SetConfig+0x2e8>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	77fb      	strb	r3, [r7, #31]
 8004cce:	e04b      	b.n	8004d68 <UART_SetConfig+0x348>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	77fb      	strb	r3, [r7, #31]
 8004cd4:	e048      	b.n	8004d68 <UART_SetConfig+0x348>
 8004cd6:	2304      	movs	r3, #4
 8004cd8:	77fb      	strb	r3, [r7, #31]
 8004cda:	e045      	b.n	8004d68 <UART_SetConfig+0x348>
 8004cdc:	2308      	movs	r3, #8
 8004cde:	77fb      	strb	r3, [r7, #31]
 8004ce0:	e042      	b.n	8004d68 <UART_SetConfig+0x348>
 8004ce2:	bf00      	nop
 8004ce4:	efff69f3 	.word	0xefff69f3
 8004ce8:	40011000 	.word	0x40011000
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	40004400 	.word	0x40004400
 8004cf4:	40004800 	.word	0x40004800
 8004cf8:	40004c00 	.word	0x40004c00
 8004cfc:	40005000 	.word	0x40005000
 8004d00:	40011400 	.word	0x40011400
 8004d04:	40007800 	.word	0x40007800
 8004d08:	2310      	movs	r3, #16
 8004d0a:	77fb      	strb	r3, [r7, #31]
 8004d0c:	e02c      	b.n	8004d68 <UART_SetConfig+0x348>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a72      	ldr	r2, [pc, #456]	@ (8004edc <UART_SetConfig+0x4bc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d125      	bne.n	8004d64 <UART_SetConfig+0x344>
 8004d18:	4b71      	ldr	r3, [pc, #452]	@ (8004ee0 <UART_SetConfig+0x4c0>)
 8004d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d1e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004d22:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004d26:	d017      	beq.n	8004d58 <UART_SetConfig+0x338>
 8004d28:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004d2c:	d817      	bhi.n	8004d5e <UART_SetConfig+0x33e>
 8004d2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d32:	d00b      	beq.n	8004d4c <UART_SetConfig+0x32c>
 8004d34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d38:	d811      	bhi.n	8004d5e <UART_SetConfig+0x33e>
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <UART_SetConfig+0x326>
 8004d3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d42:	d006      	beq.n	8004d52 <UART_SetConfig+0x332>
 8004d44:	e00b      	b.n	8004d5e <UART_SetConfig+0x33e>
 8004d46:	2300      	movs	r3, #0
 8004d48:	77fb      	strb	r3, [r7, #31]
 8004d4a:	e00d      	b.n	8004d68 <UART_SetConfig+0x348>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	77fb      	strb	r3, [r7, #31]
 8004d50:	e00a      	b.n	8004d68 <UART_SetConfig+0x348>
 8004d52:	2304      	movs	r3, #4
 8004d54:	77fb      	strb	r3, [r7, #31]
 8004d56:	e007      	b.n	8004d68 <UART_SetConfig+0x348>
 8004d58:	2308      	movs	r3, #8
 8004d5a:	77fb      	strb	r3, [r7, #31]
 8004d5c:	e004      	b.n	8004d68 <UART_SetConfig+0x348>
 8004d5e:	2310      	movs	r3, #16
 8004d60:	77fb      	strb	r3, [r7, #31]
 8004d62:	e001      	b.n	8004d68 <UART_SetConfig+0x348>
 8004d64:	2310      	movs	r3, #16
 8004d66:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d70:	d15b      	bne.n	8004e2a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004d72:	7ffb      	ldrb	r3, [r7, #31]
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d828      	bhi.n	8004dca <UART_SetConfig+0x3aa>
 8004d78:	a201      	add	r2, pc, #4	@ (adr r2, 8004d80 <UART_SetConfig+0x360>)
 8004d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7e:	bf00      	nop
 8004d80:	08004da5 	.word	0x08004da5
 8004d84:	08004dad 	.word	0x08004dad
 8004d88:	08004db5 	.word	0x08004db5
 8004d8c:	08004dcb 	.word	0x08004dcb
 8004d90:	08004dbb 	.word	0x08004dbb
 8004d94:	08004dcb 	.word	0x08004dcb
 8004d98:	08004dcb 	.word	0x08004dcb
 8004d9c:	08004dcb 	.word	0x08004dcb
 8004da0:	08004dc3 	.word	0x08004dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da4:	f7fd fee4 	bl	8002b70 <HAL_RCC_GetPCLK1Freq>
 8004da8:	61b8      	str	r0, [r7, #24]
        break;
 8004daa:	e013      	b.n	8004dd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dac:	f7fd fef4 	bl	8002b98 <HAL_RCC_GetPCLK2Freq>
 8004db0:	61b8      	str	r0, [r7, #24]
        break;
 8004db2:	e00f      	b.n	8004dd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004db4:	4b4b      	ldr	r3, [pc, #300]	@ (8004ee4 <UART_SetConfig+0x4c4>)
 8004db6:	61bb      	str	r3, [r7, #24]
        break;
 8004db8:	e00c      	b.n	8004dd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dba:	f7fd fe07 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 8004dbe:	61b8      	str	r0, [r7, #24]
        break;
 8004dc0:	e008      	b.n	8004dd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dc6:	61bb      	str	r3, [r7, #24]
        break;
 8004dc8:	e004      	b.n	8004dd4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	77bb      	strb	r3, [r7, #30]
        break;
 8004dd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d074      	beq.n	8004ec4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	005a      	lsls	r2, r3, #1
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	085b      	lsrs	r3, r3, #1
 8004de4:	441a      	add	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b0f      	cmp	r3, #15
 8004df4:	d916      	bls.n	8004e24 <UART_SetConfig+0x404>
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dfc:	d212      	bcs.n	8004e24 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	f023 030f 	bic.w	r3, r3, #15
 8004e06:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	085b      	lsrs	r3, r3, #1
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	89fb      	ldrh	r3, [r7, #14]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	89fa      	ldrh	r2, [r7, #14]
 8004e20:	60da      	str	r2, [r3, #12]
 8004e22:	e04f      	b.n	8004ec4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	77bb      	strb	r3, [r7, #30]
 8004e28:	e04c      	b.n	8004ec4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e2a:	7ffb      	ldrb	r3, [r7, #31]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d828      	bhi.n	8004e82 <UART_SetConfig+0x462>
 8004e30:	a201      	add	r2, pc, #4	@ (adr r2, 8004e38 <UART_SetConfig+0x418>)
 8004e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e36:	bf00      	nop
 8004e38:	08004e5d 	.word	0x08004e5d
 8004e3c:	08004e65 	.word	0x08004e65
 8004e40:	08004e6d 	.word	0x08004e6d
 8004e44:	08004e83 	.word	0x08004e83
 8004e48:	08004e73 	.word	0x08004e73
 8004e4c:	08004e83 	.word	0x08004e83
 8004e50:	08004e83 	.word	0x08004e83
 8004e54:	08004e83 	.word	0x08004e83
 8004e58:	08004e7b 	.word	0x08004e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e5c:	f7fd fe88 	bl	8002b70 <HAL_RCC_GetPCLK1Freq>
 8004e60:	61b8      	str	r0, [r7, #24]
        break;
 8004e62:	e013      	b.n	8004e8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e64:	f7fd fe98 	bl	8002b98 <HAL_RCC_GetPCLK2Freq>
 8004e68:	61b8      	str	r0, [r7, #24]
        break;
 8004e6a:	e00f      	b.n	8004e8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee4 <UART_SetConfig+0x4c4>)
 8004e6e:	61bb      	str	r3, [r7, #24]
        break;
 8004e70:	e00c      	b.n	8004e8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e72:	f7fd fdab 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 8004e76:	61b8      	str	r0, [r7, #24]
        break;
 8004e78:	e008      	b.n	8004e8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e7e:	61bb      	str	r3, [r7, #24]
        break;
 8004e80:	e004      	b.n	8004e8c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	77bb      	strb	r3, [r7, #30]
        break;
 8004e8a:	bf00      	nop
    }

    if (pclk != 0U)
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d018      	beq.n	8004ec4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	085a      	lsrs	r2, r3, #1
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	441a      	add	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	2b0f      	cmp	r3, #15
 8004eaa:	d909      	bls.n	8004ec0 <UART_SetConfig+0x4a0>
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eb2:	d205      	bcs.n	8004ec0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	60da      	str	r2, [r3, #12]
 8004ebe:	e001      	b.n	8004ec4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ed0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3720      	adds	r7, #32
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	40007c00 	.word	0x40007c00
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	00f42400 	.word	0x00f42400

08004ee8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef4:	f003 0308 	and.w	r3, r3, #8
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00a      	beq.n	8004f56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5a:	f003 0304 	and.w	r3, r3, #4
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00a      	beq.n	8004f9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01a      	beq.n	8004ffe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fe6:	d10a      	bne.n	8004ffe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	605a      	str	r2, [r3, #4]
  }
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b098      	sub	sp, #96	@ 0x60
 8005030:	af02      	add	r7, sp, #8
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800503c:	f7fc f888 	bl	8001150 <HAL_GetTick>
 8005040:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b08      	cmp	r3, #8
 800504e:	d12e      	bne.n	80050ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005050:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005058:	2200      	movs	r2, #0
 800505a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f88c 	bl	800517c <UART_WaitOnFlagUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d021      	beq.n	80050ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005072:	e853 3f00 	ldrex	r3, [r3]
 8005076:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800507a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800507e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	461a      	mov	r2, r3
 8005086:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005088:	647b      	str	r3, [r7, #68]	@ 0x44
 800508a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800508e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005090:	e841 2300 	strex	r3, r2, [r1]
 8005094:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e6      	bne.n	800506a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2220      	movs	r2, #32
 80050a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e062      	b.n	8005174 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d149      	bne.n	8005150 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050c4:	2200      	movs	r2, #0
 80050c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f856 	bl	800517c <UART_WaitOnFlagUntilTimeout>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d03c      	beq.n	8005150 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	e853 3f00 	ldrex	r3, [r3]
 80050e2:	623b      	str	r3, [r7, #32]
   return(result);
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	461a      	mov	r2, r3
 80050f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80050f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050fc:	e841 2300 	strex	r3, r2, [r1]
 8005100:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1e6      	bne.n	80050d6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3308      	adds	r3, #8
 800510e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	e853 3f00 	ldrex	r3, [r3]
 8005116:	60fb      	str	r3, [r7, #12]
   return(result);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 0301 	bic.w	r3, r3, #1
 800511e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3308      	adds	r3, #8
 8005126:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005128:	61fa      	str	r2, [r7, #28]
 800512a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512c:	69b9      	ldr	r1, [r7, #24]
 800512e:	69fa      	ldr	r2, [r7, #28]
 8005130:	e841 2300 	strex	r3, r2, [r1]
 8005134:	617b      	str	r3, [r7, #20]
   return(result);
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e5      	bne.n	8005108 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2220      	movs	r2, #32
 8005140:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e011      	b.n	8005174 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2220      	movs	r2, #32
 8005154:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2220      	movs	r2, #32
 800515a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3758      	adds	r7, #88	@ 0x58
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	603b      	str	r3, [r7, #0]
 8005188:	4613      	mov	r3, r2
 800518a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800518c:	e04f      	b.n	800522e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005194:	d04b      	beq.n	800522e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005196:	f7fb ffdb 	bl	8001150 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d302      	bcc.n	80051ac <UART_WaitOnFlagUntilTimeout+0x30>
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e04e      	b.n	800524e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d037      	beq.n	800522e <UART_WaitOnFlagUntilTimeout+0xb2>
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b80      	cmp	r3, #128	@ 0x80
 80051c2:	d034      	beq.n	800522e <UART_WaitOnFlagUntilTimeout+0xb2>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b40      	cmp	r3, #64	@ 0x40
 80051c8:	d031      	beq.n	800522e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	f003 0308 	and.w	r3, r3, #8
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d110      	bne.n	80051fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2208      	movs	r2, #8
 80051de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 f838 	bl	8005256 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2208      	movs	r2, #8
 80051ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e029      	b.n	800524e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005204:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005208:	d111      	bne.n	800522e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005212:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 f81e 	bl	8005256 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2220      	movs	r2, #32
 800521e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e00f      	b.n	800524e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69da      	ldr	r2, [r3, #28]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4013      	ands	r3, r2
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	429a      	cmp	r2, r3
 800523c:	bf0c      	ite	eq
 800523e:	2301      	moveq	r3, #1
 8005240:	2300      	movne	r3, #0
 8005242:	b2db      	uxtb	r3, r3
 8005244:	461a      	mov	r2, r3
 8005246:	79fb      	ldrb	r3, [r7, #7]
 8005248:	429a      	cmp	r2, r3
 800524a:	d0a0      	beq.n	800518e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005256:	b480      	push	{r7}
 8005258:	b095      	sub	sp, #84	@ 0x54
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005266:	e853 3f00 	ldrex	r3, [r3]
 800526a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800526c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005272:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	461a      	mov	r2, r3
 800527a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800527c:	643b      	str	r3, [r7, #64]	@ 0x40
 800527e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005280:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005282:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005284:	e841 2300 	strex	r3, r2, [r1]
 8005288:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800528a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1e6      	bne.n	800525e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3308      	adds	r3, #8
 8005296:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	61fb      	str	r3, [r7, #28]
   return(result);
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	f023 0301 	bic.w	r3, r3, #1
 80052a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3308      	adds	r3, #8
 80052ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052b8:	e841 2300 	strex	r3, r2, [r1]
 80052bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e5      	bne.n	8005290 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d118      	bne.n	80052fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f023 0310 	bic.w	r3, r3, #16
 80052e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052ea:	61bb      	str	r3, [r7, #24]
 80052ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ee:	6979      	ldr	r1, [r7, #20]
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	613b      	str	r3, [r7, #16]
   return(result);
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1e6      	bne.n	80052cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2220      	movs	r2, #32
 8005302:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005312:	bf00      	nop
 8005314:	3754      	adds	r7, #84	@ 0x54
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
	...

08005320 <siprintf>:
 8005320:	b40e      	push	{r1, r2, r3}
 8005322:	b500      	push	{lr}
 8005324:	b09c      	sub	sp, #112	@ 0x70
 8005326:	ab1d      	add	r3, sp, #116	@ 0x74
 8005328:	9002      	str	r0, [sp, #8]
 800532a:	9006      	str	r0, [sp, #24]
 800532c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005330:	4809      	ldr	r0, [pc, #36]	@ (8005358 <siprintf+0x38>)
 8005332:	9107      	str	r1, [sp, #28]
 8005334:	9104      	str	r1, [sp, #16]
 8005336:	4909      	ldr	r1, [pc, #36]	@ (800535c <siprintf+0x3c>)
 8005338:	f853 2b04 	ldr.w	r2, [r3], #4
 800533c:	9105      	str	r1, [sp, #20]
 800533e:	6800      	ldr	r0, [r0, #0]
 8005340:	9301      	str	r3, [sp, #4]
 8005342:	a902      	add	r1, sp, #8
 8005344:	f000 f994 	bl	8005670 <_svfiprintf_r>
 8005348:	9b02      	ldr	r3, [sp, #8]
 800534a:	2200      	movs	r2, #0
 800534c:	701a      	strb	r2, [r3, #0]
 800534e:	b01c      	add	sp, #112	@ 0x70
 8005350:	f85d eb04 	ldr.w	lr, [sp], #4
 8005354:	b003      	add	sp, #12
 8005356:	4770      	bx	lr
 8005358:	20000010 	.word	0x20000010
 800535c:	ffff0208 	.word	0xffff0208

08005360 <memset>:
 8005360:	4402      	add	r2, r0
 8005362:	4603      	mov	r3, r0
 8005364:	4293      	cmp	r3, r2
 8005366:	d100      	bne.n	800536a <memset+0xa>
 8005368:	4770      	bx	lr
 800536a:	f803 1b01 	strb.w	r1, [r3], #1
 800536e:	e7f9      	b.n	8005364 <memset+0x4>

08005370 <__errno>:
 8005370:	4b01      	ldr	r3, [pc, #4]	@ (8005378 <__errno+0x8>)
 8005372:	6818      	ldr	r0, [r3, #0]
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	20000010 	.word	0x20000010

0800537c <__libc_init_array>:
 800537c:	b570      	push	{r4, r5, r6, lr}
 800537e:	4d0d      	ldr	r5, [pc, #52]	@ (80053b4 <__libc_init_array+0x38>)
 8005380:	4c0d      	ldr	r4, [pc, #52]	@ (80053b8 <__libc_init_array+0x3c>)
 8005382:	1b64      	subs	r4, r4, r5
 8005384:	10a4      	asrs	r4, r4, #2
 8005386:	2600      	movs	r6, #0
 8005388:	42a6      	cmp	r6, r4
 800538a:	d109      	bne.n	80053a0 <__libc_init_array+0x24>
 800538c:	4d0b      	ldr	r5, [pc, #44]	@ (80053bc <__libc_init_array+0x40>)
 800538e:	4c0c      	ldr	r4, [pc, #48]	@ (80053c0 <__libc_init_array+0x44>)
 8005390:	f000 fc66 	bl	8005c60 <_init>
 8005394:	1b64      	subs	r4, r4, r5
 8005396:	10a4      	asrs	r4, r4, #2
 8005398:	2600      	movs	r6, #0
 800539a:	42a6      	cmp	r6, r4
 800539c:	d105      	bne.n	80053aa <__libc_init_array+0x2e>
 800539e:	bd70      	pop	{r4, r5, r6, pc}
 80053a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a4:	4798      	blx	r3
 80053a6:	3601      	adds	r6, #1
 80053a8:	e7ee      	b.n	8005388 <__libc_init_array+0xc>
 80053aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ae:	4798      	blx	r3
 80053b0:	3601      	adds	r6, #1
 80053b2:	e7f2      	b.n	800539a <__libc_init_array+0x1e>
 80053b4:	08005cdc 	.word	0x08005cdc
 80053b8:	08005cdc 	.word	0x08005cdc
 80053bc:	08005cdc 	.word	0x08005cdc
 80053c0:	08005ce0 	.word	0x08005ce0

080053c4 <__retarget_lock_acquire_recursive>:
 80053c4:	4770      	bx	lr

080053c6 <__retarget_lock_release_recursive>:
 80053c6:	4770      	bx	lr

080053c8 <_free_r>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	4605      	mov	r5, r0
 80053cc:	2900      	cmp	r1, #0
 80053ce:	d041      	beq.n	8005454 <_free_r+0x8c>
 80053d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053d4:	1f0c      	subs	r4, r1, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	bfb8      	it	lt
 80053da:	18e4      	addlt	r4, r4, r3
 80053dc:	f000 f8e0 	bl	80055a0 <__malloc_lock>
 80053e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005458 <_free_r+0x90>)
 80053e2:	6813      	ldr	r3, [r2, #0]
 80053e4:	b933      	cbnz	r3, 80053f4 <_free_r+0x2c>
 80053e6:	6063      	str	r3, [r4, #4]
 80053e8:	6014      	str	r4, [r2, #0]
 80053ea:	4628      	mov	r0, r5
 80053ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053f0:	f000 b8dc 	b.w	80055ac <__malloc_unlock>
 80053f4:	42a3      	cmp	r3, r4
 80053f6:	d908      	bls.n	800540a <_free_r+0x42>
 80053f8:	6820      	ldr	r0, [r4, #0]
 80053fa:	1821      	adds	r1, r4, r0
 80053fc:	428b      	cmp	r3, r1
 80053fe:	bf01      	itttt	eq
 8005400:	6819      	ldreq	r1, [r3, #0]
 8005402:	685b      	ldreq	r3, [r3, #4]
 8005404:	1809      	addeq	r1, r1, r0
 8005406:	6021      	streq	r1, [r4, #0]
 8005408:	e7ed      	b.n	80053e6 <_free_r+0x1e>
 800540a:	461a      	mov	r2, r3
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	b10b      	cbz	r3, 8005414 <_free_r+0x4c>
 8005410:	42a3      	cmp	r3, r4
 8005412:	d9fa      	bls.n	800540a <_free_r+0x42>
 8005414:	6811      	ldr	r1, [r2, #0]
 8005416:	1850      	adds	r0, r2, r1
 8005418:	42a0      	cmp	r0, r4
 800541a:	d10b      	bne.n	8005434 <_free_r+0x6c>
 800541c:	6820      	ldr	r0, [r4, #0]
 800541e:	4401      	add	r1, r0
 8005420:	1850      	adds	r0, r2, r1
 8005422:	4283      	cmp	r3, r0
 8005424:	6011      	str	r1, [r2, #0]
 8005426:	d1e0      	bne.n	80053ea <_free_r+0x22>
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	6053      	str	r3, [r2, #4]
 800542e:	4408      	add	r0, r1
 8005430:	6010      	str	r0, [r2, #0]
 8005432:	e7da      	b.n	80053ea <_free_r+0x22>
 8005434:	d902      	bls.n	800543c <_free_r+0x74>
 8005436:	230c      	movs	r3, #12
 8005438:	602b      	str	r3, [r5, #0]
 800543a:	e7d6      	b.n	80053ea <_free_r+0x22>
 800543c:	6820      	ldr	r0, [r4, #0]
 800543e:	1821      	adds	r1, r4, r0
 8005440:	428b      	cmp	r3, r1
 8005442:	bf04      	itt	eq
 8005444:	6819      	ldreq	r1, [r3, #0]
 8005446:	685b      	ldreq	r3, [r3, #4]
 8005448:	6063      	str	r3, [r4, #4]
 800544a:	bf04      	itt	eq
 800544c:	1809      	addeq	r1, r1, r0
 800544e:	6021      	streq	r1, [r4, #0]
 8005450:	6054      	str	r4, [r2, #4]
 8005452:	e7ca      	b.n	80053ea <_free_r+0x22>
 8005454:	bd38      	pop	{r3, r4, r5, pc}
 8005456:	bf00      	nop
 8005458:	20000340 	.word	0x20000340

0800545c <sbrk_aligned>:
 800545c:	b570      	push	{r4, r5, r6, lr}
 800545e:	4e0f      	ldr	r6, [pc, #60]	@ (800549c <sbrk_aligned+0x40>)
 8005460:	460c      	mov	r4, r1
 8005462:	6831      	ldr	r1, [r6, #0]
 8005464:	4605      	mov	r5, r0
 8005466:	b911      	cbnz	r1, 800546e <sbrk_aligned+0x12>
 8005468:	f000 fba6 	bl	8005bb8 <_sbrk_r>
 800546c:	6030      	str	r0, [r6, #0]
 800546e:	4621      	mov	r1, r4
 8005470:	4628      	mov	r0, r5
 8005472:	f000 fba1 	bl	8005bb8 <_sbrk_r>
 8005476:	1c43      	adds	r3, r0, #1
 8005478:	d103      	bne.n	8005482 <sbrk_aligned+0x26>
 800547a:	f04f 34ff 	mov.w	r4, #4294967295
 800547e:	4620      	mov	r0, r4
 8005480:	bd70      	pop	{r4, r5, r6, pc}
 8005482:	1cc4      	adds	r4, r0, #3
 8005484:	f024 0403 	bic.w	r4, r4, #3
 8005488:	42a0      	cmp	r0, r4
 800548a:	d0f8      	beq.n	800547e <sbrk_aligned+0x22>
 800548c:	1a21      	subs	r1, r4, r0
 800548e:	4628      	mov	r0, r5
 8005490:	f000 fb92 	bl	8005bb8 <_sbrk_r>
 8005494:	3001      	adds	r0, #1
 8005496:	d1f2      	bne.n	800547e <sbrk_aligned+0x22>
 8005498:	e7ef      	b.n	800547a <sbrk_aligned+0x1e>
 800549a:	bf00      	nop
 800549c:	2000033c 	.word	0x2000033c

080054a0 <_malloc_r>:
 80054a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054a4:	1ccd      	adds	r5, r1, #3
 80054a6:	f025 0503 	bic.w	r5, r5, #3
 80054aa:	3508      	adds	r5, #8
 80054ac:	2d0c      	cmp	r5, #12
 80054ae:	bf38      	it	cc
 80054b0:	250c      	movcc	r5, #12
 80054b2:	2d00      	cmp	r5, #0
 80054b4:	4606      	mov	r6, r0
 80054b6:	db01      	blt.n	80054bc <_malloc_r+0x1c>
 80054b8:	42a9      	cmp	r1, r5
 80054ba:	d904      	bls.n	80054c6 <_malloc_r+0x26>
 80054bc:	230c      	movs	r3, #12
 80054be:	6033      	str	r3, [r6, #0]
 80054c0:	2000      	movs	r0, #0
 80054c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800559c <_malloc_r+0xfc>
 80054ca:	f000 f869 	bl	80055a0 <__malloc_lock>
 80054ce:	f8d8 3000 	ldr.w	r3, [r8]
 80054d2:	461c      	mov	r4, r3
 80054d4:	bb44      	cbnz	r4, 8005528 <_malloc_r+0x88>
 80054d6:	4629      	mov	r1, r5
 80054d8:	4630      	mov	r0, r6
 80054da:	f7ff ffbf 	bl	800545c <sbrk_aligned>
 80054de:	1c43      	adds	r3, r0, #1
 80054e0:	4604      	mov	r4, r0
 80054e2:	d158      	bne.n	8005596 <_malloc_r+0xf6>
 80054e4:	f8d8 4000 	ldr.w	r4, [r8]
 80054e8:	4627      	mov	r7, r4
 80054ea:	2f00      	cmp	r7, #0
 80054ec:	d143      	bne.n	8005576 <_malloc_r+0xd6>
 80054ee:	2c00      	cmp	r4, #0
 80054f0:	d04b      	beq.n	800558a <_malloc_r+0xea>
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	4639      	mov	r1, r7
 80054f6:	4630      	mov	r0, r6
 80054f8:	eb04 0903 	add.w	r9, r4, r3
 80054fc:	f000 fb5c 	bl	8005bb8 <_sbrk_r>
 8005500:	4581      	cmp	r9, r0
 8005502:	d142      	bne.n	800558a <_malloc_r+0xea>
 8005504:	6821      	ldr	r1, [r4, #0]
 8005506:	1a6d      	subs	r5, r5, r1
 8005508:	4629      	mov	r1, r5
 800550a:	4630      	mov	r0, r6
 800550c:	f7ff ffa6 	bl	800545c <sbrk_aligned>
 8005510:	3001      	adds	r0, #1
 8005512:	d03a      	beq.n	800558a <_malloc_r+0xea>
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	442b      	add	r3, r5
 8005518:	6023      	str	r3, [r4, #0]
 800551a:	f8d8 3000 	ldr.w	r3, [r8]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	bb62      	cbnz	r2, 800557c <_malloc_r+0xdc>
 8005522:	f8c8 7000 	str.w	r7, [r8]
 8005526:	e00f      	b.n	8005548 <_malloc_r+0xa8>
 8005528:	6822      	ldr	r2, [r4, #0]
 800552a:	1b52      	subs	r2, r2, r5
 800552c:	d420      	bmi.n	8005570 <_malloc_r+0xd0>
 800552e:	2a0b      	cmp	r2, #11
 8005530:	d917      	bls.n	8005562 <_malloc_r+0xc2>
 8005532:	1961      	adds	r1, r4, r5
 8005534:	42a3      	cmp	r3, r4
 8005536:	6025      	str	r5, [r4, #0]
 8005538:	bf18      	it	ne
 800553a:	6059      	strne	r1, [r3, #4]
 800553c:	6863      	ldr	r3, [r4, #4]
 800553e:	bf08      	it	eq
 8005540:	f8c8 1000 	streq.w	r1, [r8]
 8005544:	5162      	str	r2, [r4, r5]
 8005546:	604b      	str	r3, [r1, #4]
 8005548:	4630      	mov	r0, r6
 800554a:	f000 f82f 	bl	80055ac <__malloc_unlock>
 800554e:	f104 000b 	add.w	r0, r4, #11
 8005552:	1d23      	adds	r3, r4, #4
 8005554:	f020 0007 	bic.w	r0, r0, #7
 8005558:	1ac2      	subs	r2, r0, r3
 800555a:	bf1c      	itt	ne
 800555c:	1a1b      	subne	r3, r3, r0
 800555e:	50a3      	strne	r3, [r4, r2]
 8005560:	e7af      	b.n	80054c2 <_malloc_r+0x22>
 8005562:	6862      	ldr	r2, [r4, #4]
 8005564:	42a3      	cmp	r3, r4
 8005566:	bf0c      	ite	eq
 8005568:	f8c8 2000 	streq.w	r2, [r8]
 800556c:	605a      	strne	r2, [r3, #4]
 800556e:	e7eb      	b.n	8005548 <_malloc_r+0xa8>
 8005570:	4623      	mov	r3, r4
 8005572:	6864      	ldr	r4, [r4, #4]
 8005574:	e7ae      	b.n	80054d4 <_malloc_r+0x34>
 8005576:	463c      	mov	r4, r7
 8005578:	687f      	ldr	r7, [r7, #4]
 800557a:	e7b6      	b.n	80054ea <_malloc_r+0x4a>
 800557c:	461a      	mov	r2, r3
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	42a3      	cmp	r3, r4
 8005582:	d1fb      	bne.n	800557c <_malloc_r+0xdc>
 8005584:	2300      	movs	r3, #0
 8005586:	6053      	str	r3, [r2, #4]
 8005588:	e7de      	b.n	8005548 <_malloc_r+0xa8>
 800558a:	230c      	movs	r3, #12
 800558c:	6033      	str	r3, [r6, #0]
 800558e:	4630      	mov	r0, r6
 8005590:	f000 f80c 	bl	80055ac <__malloc_unlock>
 8005594:	e794      	b.n	80054c0 <_malloc_r+0x20>
 8005596:	6005      	str	r5, [r0, #0]
 8005598:	e7d6      	b.n	8005548 <_malloc_r+0xa8>
 800559a:	bf00      	nop
 800559c:	20000340 	.word	0x20000340

080055a0 <__malloc_lock>:
 80055a0:	4801      	ldr	r0, [pc, #4]	@ (80055a8 <__malloc_lock+0x8>)
 80055a2:	f7ff bf0f 	b.w	80053c4 <__retarget_lock_acquire_recursive>
 80055a6:	bf00      	nop
 80055a8:	20000338 	.word	0x20000338

080055ac <__malloc_unlock>:
 80055ac:	4801      	ldr	r0, [pc, #4]	@ (80055b4 <__malloc_unlock+0x8>)
 80055ae:	f7ff bf0a 	b.w	80053c6 <__retarget_lock_release_recursive>
 80055b2:	bf00      	nop
 80055b4:	20000338 	.word	0x20000338

080055b8 <__ssputs_r>:
 80055b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055bc:	688e      	ldr	r6, [r1, #8]
 80055be:	461f      	mov	r7, r3
 80055c0:	42be      	cmp	r6, r7
 80055c2:	680b      	ldr	r3, [r1, #0]
 80055c4:	4682      	mov	sl, r0
 80055c6:	460c      	mov	r4, r1
 80055c8:	4690      	mov	r8, r2
 80055ca:	d82d      	bhi.n	8005628 <__ssputs_r+0x70>
 80055cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80055d4:	d026      	beq.n	8005624 <__ssputs_r+0x6c>
 80055d6:	6965      	ldr	r5, [r4, #20]
 80055d8:	6909      	ldr	r1, [r1, #16]
 80055da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055de:	eba3 0901 	sub.w	r9, r3, r1
 80055e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055e6:	1c7b      	adds	r3, r7, #1
 80055e8:	444b      	add	r3, r9
 80055ea:	106d      	asrs	r5, r5, #1
 80055ec:	429d      	cmp	r5, r3
 80055ee:	bf38      	it	cc
 80055f0:	461d      	movcc	r5, r3
 80055f2:	0553      	lsls	r3, r2, #21
 80055f4:	d527      	bpl.n	8005646 <__ssputs_r+0x8e>
 80055f6:	4629      	mov	r1, r5
 80055f8:	f7ff ff52 	bl	80054a0 <_malloc_r>
 80055fc:	4606      	mov	r6, r0
 80055fe:	b360      	cbz	r0, 800565a <__ssputs_r+0xa2>
 8005600:	6921      	ldr	r1, [r4, #16]
 8005602:	464a      	mov	r2, r9
 8005604:	f000 fae8 	bl	8005bd8 <memcpy>
 8005608:	89a3      	ldrh	r3, [r4, #12]
 800560a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800560e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005612:	81a3      	strh	r3, [r4, #12]
 8005614:	6126      	str	r6, [r4, #16]
 8005616:	6165      	str	r5, [r4, #20]
 8005618:	444e      	add	r6, r9
 800561a:	eba5 0509 	sub.w	r5, r5, r9
 800561e:	6026      	str	r6, [r4, #0]
 8005620:	60a5      	str	r5, [r4, #8]
 8005622:	463e      	mov	r6, r7
 8005624:	42be      	cmp	r6, r7
 8005626:	d900      	bls.n	800562a <__ssputs_r+0x72>
 8005628:	463e      	mov	r6, r7
 800562a:	6820      	ldr	r0, [r4, #0]
 800562c:	4632      	mov	r2, r6
 800562e:	4641      	mov	r1, r8
 8005630:	f000 faa8 	bl	8005b84 <memmove>
 8005634:	68a3      	ldr	r3, [r4, #8]
 8005636:	1b9b      	subs	r3, r3, r6
 8005638:	60a3      	str	r3, [r4, #8]
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	4433      	add	r3, r6
 800563e:	6023      	str	r3, [r4, #0]
 8005640:	2000      	movs	r0, #0
 8005642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005646:	462a      	mov	r2, r5
 8005648:	f000 fad4 	bl	8005bf4 <_realloc_r>
 800564c:	4606      	mov	r6, r0
 800564e:	2800      	cmp	r0, #0
 8005650:	d1e0      	bne.n	8005614 <__ssputs_r+0x5c>
 8005652:	6921      	ldr	r1, [r4, #16]
 8005654:	4650      	mov	r0, sl
 8005656:	f7ff feb7 	bl	80053c8 <_free_r>
 800565a:	230c      	movs	r3, #12
 800565c:	f8ca 3000 	str.w	r3, [sl]
 8005660:	89a3      	ldrh	r3, [r4, #12]
 8005662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005666:	81a3      	strh	r3, [r4, #12]
 8005668:	f04f 30ff 	mov.w	r0, #4294967295
 800566c:	e7e9      	b.n	8005642 <__ssputs_r+0x8a>
	...

08005670 <_svfiprintf_r>:
 8005670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005674:	4698      	mov	r8, r3
 8005676:	898b      	ldrh	r3, [r1, #12]
 8005678:	061b      	lsls	r3, r3, #24
 800567a:	b09d      	sub	sp, #116	@ 0x74
 800567c:	4607      	mov	r7, r0
 800567e:	460d      	mov	r5, r1
 8005680:	4614      	mov	r4, r2
 8005682:	d510      	bpl.n	80056a6 <_svfiprintf_r+0x36>
 8005684:	690b      	ldr	r3, [r1, #16]
 8005686:	b973      	cbnz	r3, 80056a6 <_svfiprintf_r+0x36>
 8005688:	2140      	movs	r1, #64	@ 0x40
 800568a:	f7ff ff09 	bl	80054a0 <_malloc_r>
 800568e:	6028      	str	r0, [r5, #0]
 8005690:	6128      	str	r0, [r5, #16]
 8005692:	b930      	cbnz	r0, 80056a2 <_svfiprintf_r+0x32>
 8005694:	230c      	movs	r3, #12
 8005696:	603b      	str	r3, [r7, #0]
 8005698:	f04f 30ff 	mov.w	r0, #4294967295
 800569c:	b01d      	add	sp, #116	@ 0x74
 800569e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a2:	2340      	movs	r3, #64	@ 0x40
 80056a4:	616b      	str	r3, [r5, #20]
 80056a6:	2300      	movs	r3, #0
 80056a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80056aa:	2320      	movs	r3, #32
 80056ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80056b4:	2330      	movs	r3, #48	@ 0x30
 80056b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005854 <_svfiprintf_r+0x1e4>
 80056ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056be:	f04f 0901 	mov.w	r9, #1
 80056c2:	4623      	mov	r3, r4
 80056c4:	469a      	mov	sl, r3
 80056c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056ca:	b10a      	cbz	r2, 80056d0 <_svfiprintf_r+0x60>
 80056cc:	2a25      	cmp	r2, #37	@ 0x25
 80056ce:	d1f9      	bne.n	80056c4 <_svfiprintf_r+0x54>
 80056d0:	ebba 0b04 	subs.w	fp, sl, r4
 80056d4:	d00b      	beq.n	80056ee <_svfiprintf_r+0x7e>
 80056d6:	465b      	mov	r3, fp
 80056d8:	4622      	mov	r2, r4
 80056da:	4629      	mov	r1, r5
 80056dc:	4638      	mov	r0, r7
 80056de:	f7ff ff6b 	bl	80055b8 <__ssputs_r>
 80056e2:	3001      	adds	r0, #1
 80056e4:	f000 80a7 	beq.w	8005836 <_svfiprintf_r+0x1c6>
 80056e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056ea:	445a      	add	r2, fp
 80056ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80056ee:	f89a 3000 	ldrb.w	r3, [sl]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 809f 	beq.w	8005836 <_svfiprintf_r+0x1c6>
 80056f8:	2300      	movs	r3, #0
 80056fa:	f04f 32ff 	mov.w	r2, #4294967295
 80056fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005702:	f10a 0a01 	add.w	sl, sl, #1
 8005706:	9304      	str	r3, [sp, #16]
 8005708:	9307      	str	r3, [sp, #28]
 800570a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800570e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005710:	4654      	mov	r4, sl
 8005712:	2205      	movs	r2, #5
 8005714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005718:	484e      	ldr	r0, [pc, #312]	@ (8005854 <_svfiprintf_r+0x1e4>)
 800571a:	f7fa fd99 	bl	8000250 <memchr>
 800571e:	9a04      	ldr	r2, [sp, #16]
 8005720:	b9d8      	cbnz	r0, 800575a <_svfiprintf_r+0xea>
 8005722:	06d0      	lsls	r0, r2, #27
 8005724:	bf44      	itt	mi
 8005726:	2320      	movmi	r3, #32
 8005728:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800572c:	0711      	lsls	r1, r2, #28
 800572e:	bf44      	itt	mi
 8005730:	232b      	movmi	r3, #43	@ 0x2b
 8005732:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005736:	f89a 3000 	ldrb.w	r3, [sl]
 800573a:	2b2a      	cmp	r3, #42	@ 0x2a
 800573c:	d015      	beq.n	800576a <_svfiprintf_r+0xfa>
 800573e:	9a07      	ldr	r2, [sp, #28]
 8005740:	4654      	mov	r4, sl
 8005742:	2000      	movs	r0, #0
 8005744:	f04f 0c0a 	mov.w	ip, #10
 8005748:	4621      	mov	r1, r4
 800574a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800574e:	3b30      	subs	r3, #48	@ 0x30
 8005750:	2b09      	cmp	r3, #9
 8005752:	d94b      	bls.n	80057ec <_svfiprintf_r+0x17c>
 8005754:	b1b0      	cbz	r0, 8005784 <_svfiprintf_r+0x114>
 8005756:	9207      	str	r2, [sp, #28]
 8005758:	e014      	b.n	8005784 <_svfiprintf_r+0x114>
 800575a:	eba0 0308 	sub.w	r3, r0, r8
 800575e:	fa09 f303 	lsl.w	r3, r9, r3
 8005762:	4313      	orrs	r3, r2
 8005764:	9304      	str	r3, [sp, #16]
 8005766:	46a2      	mov	sl, r4
 8005768:	e7d2      	b.n	8005710 <_svfiprintf_r+0xa0>
 800576a:	9b03      	ldr	r3, [sp, #12]
 800576c:	1d19      	adds	r1, r3, #4
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	9103      	str	r1, [sp, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	bfbb      	ittet	lt
 8005776:	425b      	neglt	r3, r3
 8005778:	f042 0202 	orrlt.w	r2, r2, #2
 800577c:	9307      	strge	r3, [sp, #28]
 800577e:	9307      	strlt	r3, [sp, #28]
 8005780:	bfb8      	it	lt
 8005782:	9204      	strlt	r2, [sp, #16]
 8005784:	7823      	ldrb	r3, [r4, #0]
 8005786:	2b2e      	cmp	r3, #46	@ 0x2e
 8005788:	d10a      	bne.n	80057a0 <_svfiprintf_r+0x130>
 800578a:	7863      	ldrb	r3, [r4, #1]
 800578c:	2b2a      	cmp	r3, #42	@ 0x2a
 800578e:	d132      	bne.n	80057f6 <_svfiprintf_r+0x186>
 8005790:	9b03      	ldr	r3, [sp, #12]
 8005792:	1d1a      	adds	r2, r3, #4
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	9203      	str	r2, [sp, #12]
 8005798:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800579c:	3402      	adds	r4, #2
 800579e:	9305      	str	r3, [sp, #20]
 80057a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005864 <_svfiprintf_r+0x1f4>
 80057a4:	7821      	ldrb	r1, [r4, #0]
 80057a6:	2203      	movs	r2, #3
 80057a8:	4650      	mov	r0, sl
 80057aa:	f7fa fd51 	bl	8000250 <memchr>
 80057ae:	b138      	cbz	r0, 80057c0 <_svfiprintf_r+0x150>
 80057b0:	9b04      	ldr	r3, [sp, #16]
 80057b2:	eba0 000a 	sub.w	r0, r0, sl
 80057b6:	2240      	movs	r2, #64	@ 0x40
 80057b8:	4082      	lsls	r2, r0
 80057ba:	4313      	orrs	r3, r2
 80057bc:	3401      	adds	r4, #1
 80057be:	9304      	str	r3, [sp, #16]
 80057c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057c4:	4824      	ldr	r0, [pc, #144]	@ (8005858 <_svfiprintf_r+0x1e8>)
 80057c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057ca:	2206      	movs	r2, #6
 80057cc:	f7fa fd40 	bl	8000250 <memchr>
 80057d0:	2800      	cmp	r0, #0
 80057d2:	d036      	beq.n	8005842 <_svfiprintf_r+0x1d2>
 80057d4:	4b21      	ldr	r3, [pc, #132]	@ (800585c <_svfiprintf_r+0x1ec>)
 80057d6:	bb1b      	cbnz	r3, 8005820 <_svfiprintf_r+0x1b0>
 80057d8:	9b03      	ldr	r3, [sp, #12]
 80057da:	3307      	adds	r3, #7
 80057dc:	f023 0307 	bic.w	r3, r3, #7
 80057e0:	3308      	adds	r3, #8
 80057e2:	9303      	str	r3, [sp, #12]
 80057e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057e6:	4433      	add	r3, r6
 80057e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80057ea:	e76a      	b.n	80056c2 <_svfiprintf_r+0x52>
 80057ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80057f0:	460c      	mov	r4, r1
 80057f2:	2001      	movs	r0, #1
 80057f4:	e7a8      	b.n	8005748 <_svfiprintf_r+0xd8>
 80057f6:	2300      	movs	r3, #0
 80057f8:	3401      	adds	r4, #1
 80057fa:	9305      	str	r3, [sp, #20]
 80057fc:	4619      	mov	r1, r3
 80057fe:	f04f 0c0a 	mov.w	ip, #10
 8005802:	4620      	mov	r0, r4
 8005804:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005808:	3a30      	subs	r2, #48	@ 0x30
 800580a:	2a09      	cmp	r2, #9
 800580c:	d903      	bls.n	8005816 <_svfiprintf_r+0x1a6>
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0c6      	beq.n	80057a0 <_svfiprintf_r+0x130>
 8005812:	9105      	str	r1, [sp, #20]
 8005814:	e7c4      	b.n	80057a0 <_svfiprintf_r+0x130>
 8005816:	fb0c 2101 	mla	r1, ip, r1, r2
 800581a:	4604      	mov	r4, r0
 800581c:	2301      	movs	r3, #1
 800581e:	e7f0      	b.n	8005802 <_svfiprintf_r+0x192>
 8005820:	ab03      	add	r3, sp, #12
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	462a      	mov	r2, r5
 8005826:	4b0e      	ldr	r3, [pc, #56]	@ (8005860 <_svfiprintf_r+0x1f0>)
 8005828:	a904      	add	r1, sp, #16
 800582a:	4638      	mov	r0, r7
 800582c:	f3af 8000 	nop.w
 8005830:	1c42      	adds	r2, r0, #1
 8005832:	4606      	mov	r6, r0
 8005834:	d1d6      	bne.n	80057e4 <_svfiprintf_r+0x174>
 8005836:	89ab      	ldrh	r3, [r5, #12]
 8005838:	065b      	lsls	r3, r3, #25
 800583a:	f53f af2d 	bmi.w	8005698 <_svfiprintf_r+0x28>
 800583e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005840:	e72c      	b.n	800569c <_svfiprintf_r+0x2c>
 8005842:	ab03      	add	r3, sp, #12
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	462a      	mov	r2, r5
 8005848:	4b05      	ldr	r3, [pc, #20]	@ (8005860 <_svfiprintf_r+0x1f0>)
 800584a:	a904      	add	r1, sp, #16
 800584c:	4638      	mov	r0, r7
 800584e:	f000 f879 	bl	8005944 <_printf_i>
 8005852:	e7ed      	b.n	8005830 <_svfiprintf_r+0x1c0>
 8005854:	08005ca0 	.word	0x08005ca0
 8005858:	08005caa 	.word	0x08005caa
 800585c:	00000000 	.word	0x00000000
 8005860:	080055b9 	.word	0x080055b9
 8005864:	08005ca6 	.word	0x08005ca6

08005868 <_printf_common>:
 8005868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800586c:	4616      	mov	r6, r2
 800586e:	4698      	mov	r8, r3
 8005870:	688a      	ldr	r2, [r1, #8]
 8005872:	690b      	ldr	r3, [r1, #16]
 8005874:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005878:	4293      	cmp	r3, r2
 800587a:	bfb8      	it	lt
 800587c:	4613      	movlt	r3, r2
 800587e:	6033      	str	r3, [r6, #0]
 8005880:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005884:	4607      	mov	r7, r0
 8005886:	460c      	mov	r4, r1
 8005888:	b10a      	cbz	r2, 800588e <_printf_common+0x26>
 800588a:	3301      	adds	r3, #1
 800588c:	6033      	str	r3, [r6, #0]
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	0699      	lsls	r1, r3, #26
 8005892:	bf42      	ittt	mi
 8005894:	6833      	ldrmi	r3, [r6, #0]
 8005896:	3302      	addmi	r3, #2
 8005898:	6033      	strmi	r3, [r6, #0]
 800589a:	6825      	ldr	r5, [r4, #0]
 800589c:	f015 0506 	ands.w	r5, r5, #6
 80058a0:	d106      	bne.n	80058b0 <_printf_common+0x48>
 80058a2:	f104 0a19 	add.w	sl, r4, #25
 80058a6:	68e3      	ldr	r3, [r4, #12]
 80058a8:	6832      	ldr	r2, [r6, #0]
 80058aa:	1a9b      	subs	r3, r3, r2
 80058ac:	42ab      	cmp	r3, r5
 80058ae:	dc26      	bgt.n	80058fe <_printf_common+0x96>
 80058b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058b4:	6822      	ldr	r2, [r4, #0]
 80058b6:	3b00      	subs	r3, #0
 80058b8:	bf18      	it	ne
 80058ba:	2301      	movne	r3, #1
 80058bc:	0692      	lsls	r2, r2, #26
 80058be:	d42b      	bmi.n	8005918 <_printf_common+0xb0>
 80058c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058c4:	4641      	mov	r1, r8
 80058c6:	4638      	mov	r0, r7
 80058c8:	47c8      	blx	r9
 80058ca:	3001      	adds	r0, #1
 80058cc:	d01e      	beq.n	800590c <_printf_common+0xa4>
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	6922      	ldr	r2, [r4, #16]
 80058d2:	f003 0306 	and.w	r3, r3, #6
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	bf02      	ittt	eq
 80058da:	68e5      	ldreq	r5, [r4, #12]
 80058dc:	6833      	ldreq	r3, [r6, #0]
 80058de:	1aed      	subeq	r5, r5, r3
 80058e0:	68a3      	ldr	r3, [r4, #8]
 80058e2:	bf0c      	ite	eq
 80058e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058e8:	2500      	movne	r5, #0
 80058ea:	4293      	cmp	r3, r2
 80058ec:	bfc4      	itt	gt
 80058ee:	1a9b      	subgt	r3, r3, r2
 80058f0:	18ed      	addgt	r5, r5, r3
 80058f2:	2600      	movs	r6, #0
 80058f4:	341a      	adds	r4, #26
 80058f6:	42b5      	cmp	r5, r6
 80058f8:	d11a      	bne.n	8005930 <_printf_common+0xc8>
 80058fa:	2000      	movs	r0, #0
 80058fc:	e008      	b.n	8005910 <_printf_common+0xa8>
 80058fe:	2301      	movs	r3, #1
 8005900:	4652      	mov	r2, sl
 8005902:	4641      	mov	r1, r8
 8005904:	4638      	mov	r0, r7
 8005906:	47c8      	blx	r9
 8005908:	3001      	adds	r0, #1
 800590a:	d103      	bne.n	8005914 <_printf_common+0xac>
 800590c:	f04f 30ff 	mov.w	r0, #4294967295
 8005910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005914:	3501      	adds	r5, #1
 8005916:	e7c6      	b.n	80058a6 <_printf_common+0x3e>
 8005918:	18e1      	adds	r1, r4, r3
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	2030      	movs	r0, #48	@ 0x30
 800591e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005922:	4422      	add	r2, r4
 8005924:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005928:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800592c:	3302      	adds	r3, #2
 800592e:	e7c7      	b.n	80058c0 <_printf_common+0x58>
 8005930:	2301      	movs	r3, #1
 8005932:	4622      	mov	r2, r4
 8005934:	4641      	mov	r1, r8
 8005936:	4638      	mov	r0, r7
 8005938:	47c8      	blx	r9
 800593a:	3001      	adds	r0, #1
 800593c:	d0e6      	beq.n	800590c <_printf_common+0xa4>
 800593e:	3601      	adds	r6, #1
 8005940:	e7d9      	b.n	80058f6 <_printf_common+0x8e>
	...

08005944 <_printf_i>:
 8005944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005948:	7e0f      	ldrb	r7, [r1, #24]
 800594a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800594c:	2f78      	cmp	r7, #120	@ 0x78
 800594e:	4691      	mov	r9, r2
 8005950:	4680      	mov	r8, r0
 8005952:	460c      	mov	r4, r1
 8005954:	469a      	mov	sl, r3
 8005956:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800595a:	d807      	bhi.n	800596c <_printf_i+0x28>
 800595c:	2f62      	cmp	r7, #98	@ 0x62
 800595e:	d80a      	bhi.n	8005976 <_printf_i+0x32>
 8005960:	2f00      	cmp	r7, #0
 8005962:	f000 80d2 	beq.w	8005b0a <_printf_i+0x1c6>
 8005966:	2f58      	cmp	r7, #88	@ 0x58
 8005968:	f000 80b9 	beq.w	8005ade <_printf_i+0x19a>
 800596c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005970:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005974:	e03a      	b.n	80059ec <_printf_i+0xa8>
 8005976:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800597a:	2b15      	cmp	r3, #21
 800597c:	d8f6      	bhi.n	800596c <_printf_i+0x28>
 800597e:	a101      	add	r1, pc, #4	@ (adr r1, 8005984 <_printf_i+0x40>)
 8005980:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005984:	080059dd 	.word	0x080059dd
 8005988:	080059f1 	.word	0x080059f1
 800598c:	0800596d 	.word	0x0800596d
 8005990:	0800596d 	.word	0x0800596d
 8005994:	0800596d 	.word	0x0800596d
 8005998:	0800596d 	.word	0x0800596d
 800599c:	080059f1 	.word	0x080059f1
 80059a0:	0800596d 	.word	0x0800596d
 80059a4:	0800596d 	.word	0x0800596d
 80059a8:	0800596d 	.word	0x0800596d
 80059ac:	0800596d 	.word	0x0800596d
 80059b0:	08005af1 	.word	0x08005af1
 80059b4:	08005a1b 	.word	0x08005a1b
 80059b8:	08005aab 	.word	0x08005aab
 80059bc:	0800596d 	.word	0x0800596d
 80059c0:	0800596d 	.word	0x0800596d
 80059c4:	08005b13 	.word	0x08005b13
 80059c8:	0800596d 	.word	0x0800596d
 80059cc:	08005a1b 	.word	0x08005a1b
 80059d0:	0800596d 	.word	0x0800596d
 80059d4:	0800596d 	.word	0x0800596d
 80059d8:	08005ab3 	.word	0x08005ab3
 80059dc:	6833      	ldr	r3, [r6, #0]
 80059de:	1d1a      	adds	r2, r3, #4
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6032      	str	r2, [r6, #0]
 80059e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059ec:	2301      	movs	r3, #1
 80059ee:	e09d      	b.n	8005b2c <_printf_i+0x1e8>
 80059f0:	6833      	ldr	r3, [r6, #0]
 80059f2:	6820      	ldr	r0, [r4, #0]
 80059f4:	1d19      	adds	r1, r3, #4
 80059f6:	6031      	str	r1, [r6, #0]
 80059f8:	0606      	lsls	r6, r0, #24
 80059fa:	d501      	bpl.n	8005a00 <_printf_i+0xbc>
 80059fc:	681d      	ldr	r5, [r3, #0]
 80059fe:	e003      	b.n	8005a08 <_printf_i+0xc4>
 8005a00:	0645      	lsls	r5, r0, #25
 8005a02:	d5fb      	bpl.n	80059fc <_printf_i+0xb8>
 8005a04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a08:	2d00      	cmp	r5, #0
 8005a0a:	da03      	bge.n	8005a14 <_printf_i+0xd0>
 8005a0c:	232d      	movs	r3, #45	@ 0x2d
 8005a0e:	426d      	negs	r5, r5
 8005a10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a14:	4859      	ldr	r0, [pc, #356]	@ (8005b7c <_printf_i+0x238>)
 8005a16:	230a      	movs	r3, #10
 8005a18:	e011      	b.n	8005a3e <_printf_i+0xfa>
 8005a1a:	6821      	ldr	r1, [r4, #0]
 8005a1c:	6833      	ldr	r3, [r6, #0]
 8005a1e:	0608      	lsls	r0, r1, #24
 8005a20:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a24:	d402      	bmi.n	8005a2c <_printf_i+0xe8>
 8005a26:	0649      	lsls	r1, r1, #25
 8005a28:	bf48      	it	mi
 8005a2a:	b2ad      	uxthmi	r5, r5
 8005a2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a2e:	4853      	ldr	r0, [pc, #332]	@ (8005b7c <_printf_i+0x238>)
 8005a30:	6033      	str	r3, [r6, #0]
 8005a32:	bf14      	ite	ne
 8005a34:	230a      	movne	r3, #10
 8005a36:	2308      	moveq	r3, #8
 8005a38:	2100      	movs	r1, #0
 8005a3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a3e:	6866      	ldr	r6, [r4, #4]
 8005a40:	60a6      	str	r6, [r4, #8]
 8005a42:	2e00      	cmp	r6, #0
 8005a44:	bfa2      	ittt	ge
 8005a46:	6821      	ldrge	r1, [r4, #0]
 8005a48:	f021 0104 	bicge.w	r1, r1, #4
 8005a4c:	6021      	strge	r1, [r4, #0]
 8005a4e:	b90d      	cbnz	r5, 8005a54 <_printf_i+0x110>
 8005a50:	2e00      	cmp	r6, #0
 8005a52:	d04b      	beq.n	8005aec <_printf_i+0x1a8>
 8005a54:	4616      	mov	r6, r2
 8005a56:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a5a:	fb03 5711 	mls	r7, r3, r1, r5
 8005a5e:	5dc7      	ldrb	r7, [r0, r7]
 8005a60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a64:	462f      	mov	r7, r5
 8005a66:	42bb      	cmp	r3, r7
 8005a68:	460d      	mov	r5, r1
 8005a6a:	d9f4      	bls.n	8005a56 <_printf_i+0x112>
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d10b      	bne.n	8005a88 <_printf_i+0x144>
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	07df      	lsls	r7, r3, #31
 8005a74:	d508      	bpl.n	8005a88 <_printf_i+0x144>
 8005a76:	6923      	ldr	r3, [r4, #16]
 8005a78:	6861      	ldr	r1, [r4, #4]
 8005a7a:	4299      	cmp	r1, r3
 8005a7c:	bfde      	ittt	le
 8005a7e:	2330      	movle	r3, #48	@ 0x30
 8005a80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a88:	1b92      	subs	r2, r2, r6
 8005a8a:	6122      	str	r2, [r4, #16]
 8005a8c:	f8cd a000 	str.w	sl, [sp]
 8005a90:	464b      	mov	r3, r9
 8005a92:	aa03      	add	r2, sp, #12
 8005a94:	4621      	mov	r1, r4
 8005a96:	4640      	mov	r0, r8
 8005a98:	f7ff fee6 	bl	8005868 <_printf_common>
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d14a      	bne.n	8005b36 <_printf_i+0x1f2>
 8005aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa4:	b004      	add	sp, #16
 8005aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	f043 0320 	orr.w	r3, r3, #32
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	4833      	ldr	r0, [pc, #204]	@ (8005b80 <_printf_i+0x23c>)
 8005ab4:	2778      	movs	r7, #120	@ 0x78
 8005ab6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	6831      	ldr	r1, [r6, #0]
 8005abe:	061f      	lsls	r7, r3, #24
 8005ac0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ac4:	d402      	bmi.n	8005acc <_printf_i+0x188>
 8005ac6:	065f      	lsls	r7, r3, #25
 8005ac8:	bf48      	it	mi
 8005aca:	b2ad      	uxthmi	r5, r5
 8005acc:	6031      	str	r1, [r6, #0]
 8005ace:	07d9      	lsls	r1, r3, #31
 8005ad0:	bf44      	itt	mi
 8005ad2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ad6:	6023      	strmi	r3, [r4, #0]
 8005ad8:	b11d      	cbz	r5, 8005ae2 <_printf_i+0x19e>
 8005ada:	2310      	movs	r3, #16
 8005adc:	e7ac      	b.n	8005a38 <_printf_i+0xf4>
 8005ade:	4827      	ldr	r0, [pc, #156]	@ (8005b7c <_printf_i+0x238>)
 8005ae0:	e7e9      	b.n	8005ab6 <_printf_i+0x172>
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	f023 0320 	bic.w	r3, r3, #32
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	e7f6      	b.n	8005ada <_printf_i+0x196>
 8005aec:	4616      	mov	r6, r2
 8005aee:	e7bd      	b.n	8005a6c <_printf_i+0x128>
 8005af0:	6833      	ldr	r3, [r6, #0]
 8005af2:	6825      	ldr	r5, [r4, #0]
 8005af4:	6961      	ldr	r1, [r4, #20]
 8005af6:	1d18      	adds	r0, r3, #4
 8005af8:	6030      	str	r0, [r6, #0]
 8005afa:	062e      	lsls	r6, r5, #24
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	d501      	bpl.n	8005b04 <_printf_i+0x1c0>
 8005b00:	6019      	str	r1, [r3, #0]
 8005b02:	e002      	b.n	8005b0a <_printf_i+0x1c6>
 8005b04:	0668      	lsls	r0, r5, #25
 8005b06:	d5fb      	bpl.n	8005b00 <_printf_i+0x1bc>
 8005b08:	8019      	strh	r1, [r3, #0]
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	6123      	str	r3, [r4, #16]
 8005b0e:	4616      	mov	r6, r2
 8005b10:	e7bc      	b.n	8005a8c <_printf_i+0x148>
 8005b12:	6833      	ldr	r3, [r6, #0]
 8005b14:	1d1a      	adds	r2, r3, #4
 8005b16:	6032      	str	r2, [r6, #0]
 8005b18:	681e      	ldr	r6, [r3, #0]
 8005b1a:	6862      	ldr	r2, [r4, #4]
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	4630      	mov	r0, r6
 8005b20:	f7fa fb96 	bl	8000250 <memchr>
 8005b24:	b108      	cbz	r0, 8005b2a <_printf_i+0x1e6>
 8005b26:	1b80      	subs	r0, r0, r6
 8005b28:	6060      	str	r0, [r4, #4]
 8005b2a:	6863      	ldr	r3, [r4, #4]
 8005b2c:	6123      	str	r3, [r4, #16]
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b34:	e7aa      	b.n	8005a8c <_printf_i+0x148>
 8005b36:	6923      	ldr	r3, [r4, #16]
 8005b38:	4632      	mov	r2, r6
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	4640      	mov	r0, r8
 8005b3e:	47d0      	blx	sl
 8005b40:	3001      	adds	r0, #1
 8005b42:	d0ad      	beq.n	8005aa0 <_printf_i+0x15c>
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	079b      	lsls	r3, r3, #30
 8005b48:	d413      	bmi.n	8005b72 <_printf_i+0x22e>
 8005b4a:	68e0      	ldr	r0, [r4, #12]
 8005b4c:	9b03      	ldr	r3, [sp, #12]
 8005b4e:	4298      	cmp	r0, r3
 8005b50:	bfb8      	it	lt
 8005b52:	4618      	movlt	r0, r3
 8005b54:	e7a6      	b.n	8005aa4 <_printf_i+0x160>
 8005b56:	2301      	movs	r3, #1
 8005b58:	4632      	mov	r2, r6
 8005b5a:	4649      	mov	r1, r9
 8005b5c:	4640      	mov	r0, r8
 8005b5e:	47d0      	blx	sl
 8005b60:	3001      	adds	r0, #1
 8005b62:	d09d      	beq.n	8005aa0 <_printf_i+0x15c>
 8005b64:	3501      	adds	r5, #1
 8005b66:	68e3      	ldr	r3, [r4, #12]
 8005b68:	9903      	ldr	r1, [sp, #12]
 8005b6a:	1a5b      	subs	r3, r3, r1
 8005b6c:	42ab      	cmp	r3, r5
 8005b6e:	dcf2      	bgt.n	8005b56 <_printf_i+0x212>
 8005b70:	e7eb      	b.n	8005b4a <_printf_i+0x206>
 8005b72:	2500      	movs	r5, #0
 8005b74:	f104 0619 	add.w	r6, r4, #25
 8005b78:	e7f5      	b.n	8005b66 <_printf_i+0x222>
 8005b7a:	bf00      	nop
 8005b7c:	08005cb1 	.word	0x08005cb1
 8005b80:	08005cc2 	.word	0x08005cc2

08005b84 <memmove>:
 8005b84:	4288      	cmp	r0, r1
 8005b86:	b510      	push	{r4, lr}
 8005b88:	eb01 0402 	add.w	r4, r1, r2
 8005b8c:	d902      	bls.n	8005b94 <memmove+0x10>
 8005b8e:	4284      	cmp	r4, r0
 8005b90:	4623      	mov	r3, r4
 8005b92:	d807      	bhi.n	8005ba4 <memmove+0x20>
 8005b94:	1e43      	subs	r3, r0, #1
 8005b96:	42a1      	cmp	r1, r4
 8005b98:	d008      	beq.n	8005bac <memmove+0x28>
 8005b9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ba2:	e7f8      	b.n	8005b96 <memmove+0x12>
 8005ba4:	4402      	add	r2, r0
 8005ba6:	4601      	mov	r1, r0
 8005ba8:	428a      	cmp	r2, r1
 8005baa:	d100      	bne.n	8005bae <memmove+0x2a>
 8005bac:	bd10      	pop	{r4, pc}
 8005bae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bb6:	e7f7      	b.n	8005ba8 <memmove+0x24>

08005bb8 <_sbrk_r>:
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	4d06      	ldr	r5, [pc, #24]	@ (8005bd4 <_sbrk_r+0x1c>)
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	602b      	str	r3, [r5, #0]
 8005bc4:	f7fb f834 	bl	8000c30 <_sbrk>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d102      	bne.n	8005bd2 <_sbrk_r+0x1a>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	b103      	cbz	r3, 8005bd2 <_sbrk_r+0x1a>
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	20000334 	.word	0x20000334

08005bd8 <memcpy>:
 8005bd8:	440a      	add	r2, r1
 8005bda:	4291      	cmp	r1, r2
 8005bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005be0:	d100      	bne.n	8005be4 <memcpy+0xc>
 8005be2:	4770      	bx	lr
 8005be4:	b510      	push	{r4, lr}
 8005be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bee:	4291      	cmp	r1, r2
 8005bf0:	d1f9      	bne.n	8005be6 <memcpy+0xe>
 8005bf2:	bd10      	pop	{r4, pc}

08005bf4 <_realloc_r>:
 8005bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf8:	4680      	mov	r8, r0
 8005bfa:	4615      	mov	r5, r2
 8005bfc:	460c      	mov	r4, r1
 8005bfe:	b921      	cbnz	r1, 8005c0a <_realloc_r+0x16>
 8005c00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c04:	4611      	mov	r1, r2
 8005c06:	f7ff bc4b 	b.w	80054a0 <_malloc_r>
 8005c0a:	b92a      	cbnz	r2, 8005c18 <_realloc_r+0x24>
 8005c0c:	f7ff fbdc 	bl	80053c8 <_free_r>
 8005c10:	2400      	movs	r4, #0
 8005c12:	4620      	mov	r0, r4
 8005c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c18:	f000 f81a 	bl	8005c50 <_malloc_usable_size_r>
 8005c1c:	4285      	cmp	r5, r0
 8005c1e:	4606      	mov	r6, r0
 8005c20:	d802      	bhi.n	8005c28 <_realloc_r+0x34>
 8005c22:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005c26:	d8f4      	bhi.n	8005c12 <_realloc_r+0x1e>
 8005c28:	4629      	mov	r1, r5
 8005c2a:	4640      	mov	r0, r8
 8005c2c:	f7ff fc38 	bl	80054a0 <_malloc_r>
 8005c30:	4607      	mov	r7, r0
 8005c32:	2800      	cmp	r0, #0
 8005c34:	d0ec      	beq.n	8005c10 <_realloc_r+0x1c>
 8005c36:	42b5      	cmp	r5, r6
 8005c38:	462a      	mov	r2, r5
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	bf28      	it	cs
 8005c3e:	4632      	movcs	r2, r6
 8005c40:	f7ff ffca 	bl	8005bd8 <memcpy>
 8005c44:	4621      	mov	r1, r4
 8005c46:	4640      	mov	r0, r8
 8005c48:	f7ff fbbe 	bl	80053c8 <_free_r>
 8005c4c:	463c      	mov	r4, r7
 8005c4e:	e7e0      	b.n	8005c12 <_realloc_r+0x1e>

08005c50 <_malloc_usable_size_r>:
 8005c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c54:	1f18      	subs	r0, r3, #4
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	bfbc      	itt	lt
 8005c5a:	580b      	ldrlt	r3, [r1, r0]
 8005c5c:	18c0      	addlt	r0, r0, r3
 8005c5e:	4770      	bx	lr

08005c60 <_init>:
 8005c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c62:	bf00      	nop
 8005c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c66:	bc08      	pop	{r3}
 8005c68:	469e      	mov	lr, r3
 8005c6a:	4770      	bx	lr

08005c6c <_fini>:
 8005c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6e:	bf00      	nop
 8005c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c72:	bc08      	pop	{r3}
 8005c74:	469e      	mov	lr, r3
 8005c76:	4770      	bx	lr
