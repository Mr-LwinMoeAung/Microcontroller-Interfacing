
lab8_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006924  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08006b28  08006b28  00007b28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f48  08006f48  000081dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006f48  08006f48  00007f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f50  08006f50  000081dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f50  08006f50  00007f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f54  08006f54  00007f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08006f58  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  200001dc  08007134  000081dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08007134  0000842c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000081dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e01c  00000000  00000000  0000820a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021e5  00000000  00000000  00016226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  00018410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a7  00000000  00000000  00018f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282fe  00000000  00000000  000197ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010786  00000000  00000000  00041afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3d6e  00000000  00000000  00052283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145ff1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c5c  00000000  00000000  00146034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00149c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08006b0c 	.word	0x08006b0c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08006b0c 	.word	0x08006b0c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b17      	ldr	r3, [pc, #92]	@ (8000654 <MX_GPIO_Init+0x74>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a16      	ldr	r2, [pc, #88]	@ (8000654 <MX_GPIO_Init+0x74>)
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <MX_GPIO_Init+0x74>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060e:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <MX_GPIO_Init+0x74>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a10      	ldr	r2, [pc, #64]	@ (8000654 <MX_GPIO_Init+0x74>)
 8000614:	f043 0308 	orr.w	r3, r3, #8
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b0e      	ldr	r3, [pc, #56]	@ (8000654 <MX_GPIO_Init+0x74>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0308 	and.w	r3, r3, #8
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2101      	movs	r1, #1
 800062a:	480b      	ldr	r0, [pc, #44]	@ (8000658 <MX_GPIO_Init+0x78>)
 800062c:	f001 f834 	bl	8001698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000630:	2301      	movs	r3, #1
 8000632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	4619      	mov	r1, r3
 8000646:	4804      	ldr	r0, [pc, #16]	@ (8000658 <MX_GPIO_Init+0x78>)
 8000648:	f000 fe7a 	bl	8001340 <HAL_GPIO_Init>

}
 800064c:	bf00      	nop
 800064e:	3720      	adds	r7, #32
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40023800 	.word	0x40023800
 8000658:	40020400 	.word	0x40020400

0800065c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000660:	4b1b      	ldr	r3, [pc, #108]	@ (80006d0 <MX_I2C1_Init+0x74>)
 8000662:	4a1c      	ldr	r2, [pc, #112]	@ (80006d4 <MX_I2C1_Init+0x78>)
 8000664:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000666:	4b1a      	ldr	r3, [pc, #104]	@ (80006d0 <MX_I2C1_Init+0x74>)
 8000668:	4a1b      	ldr	r2, [pc, #108]	@ (80006d8 <MX_I2C1_Init+0x7c>)
 800066a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800066c:	4b18      	ldr	r3, [pc, #96]	@ (80006d0 <MX_I2C1_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000672:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <MX_I2C1_Init+0x74>)
 8000674:	2201      	movs	r2, #1
 8000676:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000678:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <MX_I2C1_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800067e:	4b14      	ldr	r3, [pc, #80]	@ (80006d0 <MX_I2C1_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000684:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <MX_I2C1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800068a:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <MX_I2C1_Init+0x74>)
 800068c:	2200      	movs	r2, #0
 800068e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000690:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <MX_I2C1_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000696:	480e      	ldr	r0, [pc, #56]	@ (80006d0 <MX_I2C1_Init+0x74>)
 8000698:	f001 f832 	bl	8001700 <HAL_I2C_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006a2:	f000 fa83 	bl	8000bac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006a6:	2100      	movs	r1, #0
 80006a8:	4809      	ldr	r0, [pc, #36]	@ (80006d0 <MX_I2C1_Init+0x74>)
 80006aa:	f001 fd79 	bl	80021a0 <HAL_I2CEx_ConfigAnalogFilter>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006b4:	f000 fa7a 	bl	8000bac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006b8:	2100      	movs	r1, #0
 80006ba:	4805      	ldr	r0, [pc, #20]	@ (80006d0 <MX_I2C1_Init+0x74>)
 80006bc:	f001 fdbb 	bl	8002236 <HAL_I2CEx_ConfigDigitalFilter>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006c6:	f000 fa71 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200001f8 	.word	0x200001f8
 80006d4:	40005400 	.word	0x40005400
 80006d8:	20404768 	.word	0x20404768

080006dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b0ae      	sub	sp, #184	@ 0xb8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	2290      	movs	r2, #144	@ 0x90
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f004 f9a8 	bl	8004a52 <memset>
  if(i2cHandle->Instance==I2C1)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a22      	ldr	r2, [pc, #136]	@ (8000790 <HAL_I2C_MspInit+0xb4>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d13c      	bne.n	8000786 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800070c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000710:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000712:	2300      	movs	r3, #0
 8000714:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4618      	mov	r0, r3
 800071c:	f002 fabc 	bl	8002c98 <HAL_RCCEx_PeriphCLKConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000726:	f000 fa41 	bl	8000bac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <HAL_I2C_MspInit+0xb8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <HAL_I2C_MspInit+0xb8>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <HAL_I2C_MspInit+0xb8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000742:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000746:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800074a:	2312      	movs	r3, #18
 800074c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000756:	2303      	movs	r3, #3
 8000758:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800075c:	2304      	movs	r3, #4
 800075e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000766:	4619      	mov	r1, r3
 8000768:	480b      	ldr	r0, [pc, #44]	@ (8000798 <HAL_I2C_MspInit+0xbc>)
 800076a:	f000 fde9 	bl	8001340 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <HAL_I2C_MspInit+0xb8>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000772:	4a08      	ldr	r2, [pc, #32]	@ (8000794 <HAL_I2C_MspInit+0xb8>)
 8000774:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000778:	6413      	str	r3, [r2, #64]	@ 0x40
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <HAL_I2C_MspInit+0xb8>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000786:	bf00      	nop
 8000788:	37b8      	adds	r7, #184	@ 0xb8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40005400 	.word	0x40005400
 8000794:	40023800 	.word	0x40023800
 8000798:	40020400 	.word	0x40020400

0800079c <main>:
void MX_I2C1_Init(void);
void MX_USART3_UART_Init(void);
uint16_t CRC16_2(uint8_t *, uint8_t);

int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	@ 0x50
 80007a0:	af02      	add	r7, sp, #8
    char str[50];
    uint8_t cmdBuffer[3];
    uint8_t dataBuffer[8];

    HAL_Init();
 80007a2:	f000 fbee 	bl	8000f82 <HAL_Init>
    MPU_Config();
 80007a6:	f000 f9d5 	bl	8000b54 <MPU_Config>
    SystemClock_Config();
 80007aa:	f000 f929 	bl	8000a00 <SystemClock_Config>
    MX_GPIO_Init();
 80007ae:	f7ff ff17 	bl	80005e0 <MX_GPIO_Init>
    MX_I2C1_Init();
 80007b2:	f7ff ff53 	bl	800065c <MX_I2C1_Init>
    MX_USART3_UART_Init();
 80007b6:	f000 fb2b 	bl	8000e10 <MX_USART3_UART_Init>

    sprintf(str, "\n\rAM2320 I2C DEMO Starting .. .\n\r");
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	4985      	ldr	r1, [pc, #532]	@ (80009d4 <main+0x238>)
 80007c0:	4618      	mov	r0, r3
 80007c2:	f004 f8e3 	bl	800498c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 200);
 80007c6:	f107 0310 	add.w	r3, r7, #16
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fd88 	bl	80002e0 <strlen>
 80007d0:	4603      	mov	r3, r0
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	f107 0110 	add.w	r1, r7, #16
 80007d8:	23c8      	movs	r3, #200	@ 0xc8
 80007da:	487f      	ldr	r0, [pc, #508]	@ (80009d8 <main+0x23c>)
 80007dc:	f002 fed2 	bl	8003584 <HAL_UART_Transmit>

    cmdBuffer[0] = 0x03;  // Command to read register
 80007e0:	2303      	movs	r3, #3
 80007e2:	733b      	strb	r3, [r7, #12]
    cmdBuffer[1] = 0x00;  // Starting address
 80007e4:	2300      	movs	r3, #0
 80007e6:	737b      	strb	r3, [r7, #13]
    cmdBuffer[2] = 0x04;  // Read 4 bytes (temperature + humidity)
 80007e8:	2304      	movs	r3, #4
 80007ea:	73bb      	strb	r3, [r7, #14]

    while (1)
    {
        sprintf(str, "Temperature = %4.1f\tHumidity = %4.1f\n\r", t, h);
 80007ec:	4b7b      	ldr	r3, [pc, #492]	@ (80009dc <main+0x240>)
 80007ee:	edd3 7a00 	vldr	s15, [r3]
 80007f2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80007f6:	4b7a      	ldr	r3, [pc, #488]	@ (80009e0 <main+0x244>)
 80007f8:	edd3 7a00 	vldr	s15, [r3]
 80007fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000800:	f107 0010 	add.w	r0, r7, #16
 8000804:	ed8d 7b00 	vstr	d7, [sp]
 8000808:	ec53 2b16 	vmov	r2, r3, d6
 800080c:	4975      	ldr	r1, [pc, #468]	@ (80009e4 <main+0x248>)
 800080e:	f004 f8bd 	bl	800498c <siprintf>
        while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET) {}
 8000812:	bf00      	nop
 8000814:	4b70      	ldr	r3, [pc, #448]	@ (80009d8 <main+0x23c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800081e:	2b40      	cmp	r3, #64	@ 0x40
 8000820:	d1f8      	bne.n	8000814 <main+0x78>
        HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 200);
 8000822:	f107 0310 	add.w	r3, r7, #16
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fd5a 	bl	80002e0 <strlen>
 800082c:	4603      	mov	r3, r0
 800082e:	b29a      	uxth	r2, r3
 8000830:	f107 0110 	add.w	r1, r7, #16
 8000834:	23c8      	movs	r3, #200	@ 0xc8
 8000836:	4868      	ldr	r0, [pc, #416]	@ (80009d8 <main+0x23c>)
 8000838:	f002 fea4 	bl	8003584 <HAL_UART_Transmit>

        HAL_Delay(5000);
 800083c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000840:	f000 fbfc 	bl	800103c <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000844:	2101      	movs	r1, #1
 8000846:	4868      	ldr	r0, [pc, #416]	@ (80009e8 <main+0x24c>)
 8000848:	f000 ff3f 	bl	80016ca <HAL_GPIO_TogglePin>

        // Wake up the sensor
        HAL_I2C_Master_Transmit(&hi2c1, 0x5c << 1, NULL, 0, 200);
 800084c:	23c8      	movs	r3, #200	@ 0xc8
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	2300      	movs	r3, #0
 8000852:	2200      	movs	r2, #0
 8000854:	21b8      	movs	r1, #184	@ 0xb8
 8000856:	4865      	ldr	r0, [pc, #404]	@ (80009ec <main+0x250>)
 8000858:	f000 ffee 	bl	8001838 <HAL_I2C_Master_Transmit>
        HAL_Delay(800);  // Allow time for sensor to wake up
 800085c:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000860:	f000 fbec 	bl	800103c <HAL_Delay>

        // Send read command to sensor
        status = HAL_I2C_Master_Transmit(&hi2c1, 0x5c << 1, cmdBuffer, 3, 200);
 8000864:	f107 020c 	add.w	r2, r7, #12
 8000868:	23c8      	movs	r3, #200	@ 0xc8
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	2303      	movs	r3, #3
 800086e:	21b8      	movs	r1, #184	@ 0xb8
 8000870:	485e      	ldr	r0, [pc, #376]	@ (80009ec <main+0x250>)
 8000872:	f000 ffe1 	bl	8001838 <HAL_I2C_Master_Transmit>
 8000876:	4603      	mov	r3, r0
 8000878:	461a      	mov	r2, r3
 800087a:	4b5d      	ldr	r3, [pc, #372]	@ (80009f0 <main+0x254>)
 800087c:	701a      	strb	r2, [r3, #0]
        if (status != HAL_OK)
 800087e:	4b5c      	ldr	r3, [pc, #368]	@ (80009f0 <main+0x254>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d016      	beq.n	80008b4 <main+0x118>
        {
            sprintf(str, "I2C Transmit Error, Status: %d\n\r", status);
 8000886:	4b5a      	ldr	r3, [pc, #360]	@ (80009f0 <main+0x254>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	461a      	mov	r2, r3
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	4958      	ldr	r1, [pc, #352]	@ (80009f4 <main+0x258>)
 8000892:	4618      	mov	r0, r3
 8000894:	f004 f87a 	bl	800498c <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 200);
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fd1f 	bl	80002e0 <strlen>
 80008a2:	4603      	mov	r3, r0
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	f107 0110 	add.w	r1, r7, #16
 80008aa:	23c8      	movs	r3, #200	@ 0xc8
 80008ac:	484a      	ldr	r0, [pc, #296]	@ (80009d8 <main+0x23c>)
 80008ae:	f002 fe69 	bl	8003584 <HAL_UART_Transmit>
            continue;
 80008b2:	e08e      	b.n	80009d2 <main+0x236>
        }

        HAL_Delay(2);  // Wait for sensor response
 80008b4:	2002      	movs	r0, #2
 80008b6:	f000 fbc1 	bl	800103c <HAL_Delay>

        // Receive data from sensor
        status = HAL_I2C_Master_Receive(&hi2c1, 0x5c << 1, dataBuffer, 8, 200);
 80008ba:	1d3a      	adds	r2, r7, #4
 80008bc:	23c8      	movs	r3, #200	@ 0xc8
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	2308      	movs	r3, #8
 80008c2:	21b8      	movs	r1, #184	@ 0xb8
 80008c4:	4849      	ldr	r0, [pc, #292]	@ (80009ec <main+0x250>)
 80008c6:	f001 f8cf 	bl	8001a68 <HAL_I2C_Master_Receive>
 80008ca:	4603      	mov	r3, r0
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b48      	ldr	r3, [pc, #288]	@ (80009f0 <main+0x254>)
 80008d0:	701a      	strb	r2, [r3, #0]
        if (status != HAL_OK)
 80008d2:	4b47      	ldr	r3, [pc, #284]	@ (80009f0 <main+0x254>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d013      	beq.n	8000902 <main+0x166>
        {
            sprintf(str, "I2C Receive Error\n\r");
 80008da:	f107 0310 	add.w	r3, r7, #16
 80008de:	4946      	ldr	r1, [pc, #280]	@ (80009f8 <main+0x25c>)
 80008e0:	4618      	mov	r0, r3
 80008e2:	f004 f853 	bl	800498c <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 200);
 80008e6:	f107 0310 	add.w	r3, r7, #16
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fcf8 	bl	80002e0 <strlen>
 80008f0:	4603      	mov	r3, r0
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	f107 0110 	add.w	r1, r7, #16
 80008f8:	23c8      	movs	r3, #200	@ 0xc8
 80008fa:	4837      	ldr	r0, [pc, #220]	@ (80009d8 <main+0x23c>)
 80008fc:	f002 fe42 	bl	8003584 <HAL_UART_Transmit>
            continue;  // Skip if there's a receive error
 8000900:	e067      	b.n	80009d2 <main+0x236>
        }

        // Validate CRC
        uint16_t Rcrc = dataBuffer[7] << 8 | dataBuffer[6];
 8000902:	7afb      	ldrb	r3, [r7, #11]
 8000904:	021b      	lsls	r3, r3, #8
 8000906:	b21a      	sxth	r2, r3
 8000908:	7abb      	ldrb	r3, [r7, #10]
 800090a:	b21b      	sxth	r3, r3
 800090c:	4313      	orrs	r3, r2
 800090e:	b21b      	sxth	r3, r3
 8000910:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        if (Rcrc == CRC16_2(dataBuffer, 6))
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2106      	movs	r1, #6
 8000918:	4618      	mov	r0, r3
 800091a:	f000 f8df 	bl	8000adc <CRC16_2>
 800091e:	4603      	mov	r3, r0
 8000920:	461a      	mov	r2, r3
 8000922:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000926:	4293      	cmp	r3, r2
 8000928:	d140      	bne.n	80009ac <main+0x210>
        {
            uint16_t temperature = ((dataBuffer[4] & 0x7F) << 8) + dataBuffer[5];
 800092a:	7a3b      	ldrb	r3, [r7, #8]
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	b29b      	uxth	r3, r3
 8000930:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 8000934:	b29b      	uxth	r3, r3
 8000936:	7a7a      	ldrb	r2, [r7, #9]
 8000938:	4413      	add	r3, r2
 800093a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            t = temperature / 10.0;
 800093e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000942:	ee07 3a90 	vmov	s15, r3
 8000946:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800094a:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800094e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000952:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000956:	4b21      	ldr	r3, [pc, #132]	@ (80009dc <main+0x240>)
 8000958:	edc3 7a00 	vstr	s15, [r3]
            t = (((dataBuffer[4] & 0x80) >> 7) == 1) ? (t * (-1)) : t;
 800095c:	7a3b      	ldrb	r3, [r7, #8]
 800095e:	09db      	lsrs	r3, r3, #7
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b01      	cmp	r3, #1
 8000964:	d105      	bne.n	8000972 <main+0x1d6>
 8000966:	4b1d      	ldr	r3, [pc, #116]	@ (80009dc <main+0x240>)
 8000968:	edd3 7a00 	vldr	s15, [r3]
 800096c:	eef1 7a67 	vneg.f32	s15, s15
 8000970:	e002      	b.n	8000978 <main+0x1dc>
 8000972:	4b1a      	ldr	r3, [pc, #104]	@ (80009dc <main+0x240>)
 8000974:	edd3 7a00 	vldr	s15, [r3]
 8000978:	4b18      	ldr	r3, [pc, #96]	@ (80009dc <main+0x240>)
 800097a:	edc3 7a00 	vstr	s15, [r3]

            uint16_t humidity = (dataBuffer[2] << 8) + dataBuffer[3];
 800097e:	79bb      	ldrb	r3, [r7, #6]
 8000980:	021b      	lsls	r3, r3, #8
 8000982:	b29b      	uxth	r3, r3
 8000984:	79fa      	ldrb	r2, [r7, #7]
 8000986:	4413      	add	r3, r2
 8000988:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            h = humidity / 10.0;
 800098c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000990:	ee07 3a90 	vmov	s15, r3
 8000994:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000998:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800099c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009a4:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <main+0x244>)
 80009a6:	edc3 7a00 	vstr	s15, [r3]
 80009aa:	e71f      	b.n	80007ec <main+0x50>
        }
        else
        {
            sprintf(str, "CRC mismatch\n\r");
 80009ac:	f107 0310 	add.w	r3, r7, #16
 80009b0:	4912      	ldr	r1, [pc, #72]	@ (80009fc <main+0x260>)
 80009b2:	4618      	mov	r0, r3
 80009b4:	f003 ffea 	bl	800498c <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 200);
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fc8f 	bl	80002e0 <strlen>
 80009c2:	4603      	mov	r3, r0
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	f107 0110 	add.w	r1, r7, #16
 80009ca:	23c8      	movs	r3, #200	@ 0xc8
 80009cc:	4802      	ldr	r0, [pc, #8]	@ (80009d8 <main+0x23c>)
 80009ce:	f002 fdd9 	bl	8003584 <HAL_UART_Transmit>
    {
 80009d2:	e70b      	b.n	80007ec <main+0x50>
 80009d4:	08006b28 	.word	0x08006b28
 80009d8:	20000254 	.word	0x20000254
 80009dc:	20000004 	.word	0x20000004
 80009e0:	20000000 	.word	0x20000000
 80009e4:	08006b4c 	.word	0x08006b4c
 80009e8:	40020400 	.word	0x40020400
 80009ec:	200001f8 	.word	0x200001f8
 80009f0:	2000024c 	.word	0x2000024c
 80009f4:	08006b74 	.word	0x08006b74
 80009f8:	08006b98 	.word	0x08006b98
 80009fc:	08006bac 	.word	0x08006bac

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b094      	sub	sp, #80	@ 0x50
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	2234      	movs	r2, #52	@ 0x34
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f004 f81f 	bl	8004a52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	f107 0308 	add.w	r3, r7, #8
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a24:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad4 <SystemClock_Config+0xd4>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a28:	4a2a      	ldr	r2, [pc, #168]	@ (8000ad4 <SystemClock_Config+0xd4>)
 8000a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a30:	4b28      	ldr	r3, [pc, #160]	@ (8000ad4 <SystemClock_Config+0xd4>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a3c:	4b26      	ldr	r3, [pc, #152]	@ (8000ad8 <SystemClock_Config+0xd8>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a25      	ldr	r2, [pc, #148]	@ (8000ad8 <SystemClock_Config+0xd8>)
 8000a42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a46:	6013      	str	r3, [r2, #0]
 8000a48:	4b23      	ldr	r3, [pc, #140]	@ (8000ad8 <SystemClock_Config+0xd8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a5c:	2310      	movs	r3, #16
 8000a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a60:	2302      	movs	r3, #2
 8000a62:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a64:	2300      	movs	r3, #0
 8000a66:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a68:	2308      	movs	r3, #8
 8000a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a6c:	23d8      	movs	r3, #216	@ 0xd8
 8000a6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 fc75 	bl	8002370 <HAL_RCC_OscConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a8c:	f000 f88e 	bl	8000bac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a90:	f001 fc1e 	bl	80022d0 <HAL_PWREx_EnableOverDrive>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a9a:	f000 f887 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aaa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000aae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ab0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ab4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	2107      	movs	r1, #7
 8000abc:	4618      	mov	r0, r3
 8000abe:	f001 ff05 	bl	80028cc <HAL_RCC_ClockConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000ac8:	f000 f870 	bl	8000bac <Error_Handler>
  }
}
 8000acc:	bf00      	nop
 8000ace:	3750      	adds	r7, #80	@ 0x50
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40007000 	.word	0x40007000

08000adc <CRC16_2>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
uint16_t CRC16_2 (uint8_t *ptr, uint8_t length){
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xFFFF;
 8000ae8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000aec:	81fb      	strh	r3, [r7, #14]
	uint8_t s = 0x00;
 8000aee:	2300      	movs	r3, #0
 8000af0:	737b      	strb	r3, [r7, #13]
	while (length -- ) {
 8000af2:	e023      	b.n	8000b3c <CRC16_2+0x60>
		crc ^= *ptr++;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	1c5a      	adds	r2, r3, #1
 8000af8:	607a      	str	r2, [r7, #4]
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	89fb      	ldrh	r3, [r7, #14]
 8000b00:	4053      	eors	r3, r2
 8000b02:	81fb      	strh	r3, [r7, #14]
		for(s = 0; s < 8; s++) {
 8000b04:	2300      	movs	r3, #0
 8000b06:	737b      	strb	r3, [r7, #13]
 8000b08:	e015      	b.n	8000b36 <CRC16_2+0x5a>
			if((crc & 0x01) != 0) {
 8000b0a:	89fb      	ldrh	r3, [r7, #14]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d00a      	beq.n	8000b2a <CRC16_2+0x4e>
				crc >>= 1;
 8000b14:	89fb      	ldrh	r3, [r7, #14]
 8000b16:	085b      	lsrs	r3, r3, #1
 8000b18:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 8000b1a:	89fb      	ldrh	r3, [r7, #14]
 8000b1c:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8000b20:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8000b24:	43db      	mvns	r3, r3
 8000b26:	81fb      	strh	r3, [r7, #14]
 8000b28:	e002      	b.n	8000b30 <CRC16_2+0x54>
			}else crc >>= 1;
 8000b2a:	89fb      	ldrh	r3, [r7, #14]
 8000b2c:	085b      	lsrs	r3, r3, #1
 8000b2e:	81fb      	strh	r3, [r7, #14]
		for(s = 0; s < 8; s++) {
 8000b30:	7b7b      	ldrb	r3, [r7, #13]
 8000b32:	3301      	adds	r3, #1
 8000b34:	737b      	strb	r3, [r7, #13]
 8000b36:	7b7b      	ldrb	r3, [r7, #13]
 8000b38:	2b07      	cmp	r3, #7
 8000b3a:	d9e6      	bls.n	8000b0a <CRC16_2+0x2e>
	while (length -- ) {
 8000b3c:	78fb      	ldrb	r3, [r7, #3]
 8000b3e:	1e5a      	subs	r2, r3, #1
 8000b40:	70fa      	strb	r2, [r7, #3]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d1d6      	bne.n	8000af4 <CRC16_2+0x18>
		}
	}
	return crc;
 8000b46:	89fb      	ldrh	r3, [r7, #14]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b66:	f000 fb73 	bl	8001250 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b76:	231f      	movs	r3, #31
 8000b78:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b7a:	2387      	movs	r3, #135	@ 0x87
 8000b7c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b82:	2300      	movs	r3, #0
 8000b84:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b86:	2301      	movs	r3, #1
 8000b88:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b96:	463b      	mov	r3, r7
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 fb91 	bl	80012c0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b9e:	2004      	movs	r0, #4
 8000ba0:	f000 fb6e 	bl	8001280 <HAL_MPU_Enable>

}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <Error_Handler+0x8>

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bca:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bda:	4a08      	ldr	r2, [pc, #32]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000be2:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_MspInit+0x44>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <NMI_Handler+0x4>

08000c08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <MemManage_Handler+0x4>

08000c18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c56:	f000 f9d1 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  return 1;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <_kill>:

int _kill(int pid, int sig)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c78:	f003 ff3e 	bl	8004af8 <__errno>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2216      	movs	r2, #22
 8000c80:	601a      	str	r2, [r3, #0]
  return -1;
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_exit>:

void _exit (int status)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c96:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ffe7 	bl	8000c6e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <_exit+0x12>

08000ca4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e00a      	b.n	8000ccc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cb6:	f3af 8000 	nop.w
 8000cba:	4601      	mov	r1, r0
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	60ba      	str	r2, [r7, #8]
 8000cc2:	b2ca      	uxtb	r2, r1
 8000cc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dbf0      	blt.n	8000cb6 <_read+0x12>
  }

  return len;
 8000cd4:	687b      	ldr	r3, [r7, #4]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	e009      	b.n	8000d04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	60ba      	str	r2, [r7, #8]
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3301      	adds	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	dbf1      	blt.n	8000cf0 <_write+0x12>
  }
  return len;
 8000d0c:	687b      	ldr	r3, [r7, #4]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_close>:

int _close(int file)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d3e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_isatty>:

int _isatty(int file)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d88:	4a14      	ldr	r2, [pc, #80]	@ (8000ddc <_sbrk+0x5c>)
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <_sbrk+0x60>)
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d94:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d102      	bne.n	8000da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <_sbrk+0x64>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	@ (8000de8 <_sbrk+0x68>)
 8000da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da2:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d207      	bcs.n	8000dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db0:	f003 fea2 	bl	8004af8 <__errno>
 8000db4:	4603      	mov	r3, r0
 8000db6:	220c      	movs	r2, #12
 8000db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	e009      	b.n	8000dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc0:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <_sbrk+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc6:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a05      	ldr	r2, [pc, #20]	@ (8000de4 <_sbrk+0x64>)
 8000dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20080000 	.word	0x20080000
 8000de0:	00000400 	.word	0x00000400
 8000de4:	20000250 	.word	0x20000250
 8000de8:	20000430 	.word	0x20000430

08000dec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <SystemInit+0x20>)
 8000df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000df6:	4a05      	ldr	r2, [pc, #20]	@ (8000e0c <SystemInit+0x20>)
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e14:	4b14      	ldr	r3, [pc, #80]	@ (8000e68 <MX_USART3_UART_Init+0x58>)
 8000e16:	4a15      	ldr	r2, [pc, #84]	@ (8000e6c <MX_USART3_UART_Init+0x5c>)
 8000e18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e1a:	4b13      	ldr	r3, [pc, #76]	@ (8000e68 <MX_USART3_UART_Init+0x58>)
 8000e1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e22:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <MX_USART3_UART_Init+0x58>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e28:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <MX_USART3_UART_Init+0x58>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e68 <MX_USART3_UART_Init+0x58>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e34:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <MX_USART3_UART_Init+0x58>)
 8000e36:	220c      	movs	r2, #12
 8000e38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e68 <MX_USART3_UART_Init+0x58>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e40:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <MX_USART3_UART_Init+0x58>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e46:	4b08      	ldr	r3, [pc, #32]	@ (8000e68 <MX_USART3_UART_Init+0x58>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <MX_USART3_UART_Init+0x58>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e52:	4805      	ldr	r0, [pc, #20]	@ (8000e68 <MX_USART3_UART_Init+0x58>)
 8000e54:	f002 fb48 	bl	80034e8 <HAL_UART_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e5e:	f7ff fea5 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000254 	.word	0x20000254
 8000e6c:	40004800 	.word	0x40004800

08000e70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b0ae      	sub	sp, #184	@ 0xb8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2290      	movs	r2, #144	@ 0x90
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f003 fdde 	bl	8004a52 <memset>
  if(uartHandle->Instance==USART3)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a22      	ldr	r2, [pc, #136]	@ (8000f24 <HAL_UART_MspInit+0xb4>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d13c      	bne.n	8000f1a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ea0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ea4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f001 fef2 	bl	8002c98 <HAL_RCCEx_PeriphCLKConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000eba:	f7ff fe77 	bl	8000bac <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <HAL_UART_MspInit+0xb8>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec2:	4a19      	ldr	r2, [pc, #100]	@ (8000f28 <HAL_UART_MspInit+0xb8>)
 8000ec4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eca:	4b17      	ldr	r3, [pc, #92]	@ (8000f28 <HAL_UART_MspInit+0xb8>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed6:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <HAL_UART_MspInit+0xb8>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	4a13      	ldr	r2, [pc, #76]	@ (8000f28 <HAL_UART_MspInit+0xb8>)
 8000edc:	f043 0308 	orr.w	r3, r3, #8
 8000ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee2:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <HAL_UART_MspInit+0xb8>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	f003 0308 	and.w	r3, r3, #8
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ef2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f02:	2303      	movs	r3, #3
 8000f04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f08:	2307      	movs	r3, #7
 8000f0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f0e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <HAL_UART_MspInit+0xbc>)
 8000f16:	f000 fa13 	bl	8001340 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	37b8      	adds	r7, #184	@ 0xb8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40004800 	.word	0x40004800
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020c00 	.word	0x40020c00

08000f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f34:	f7ff ff5a 	bl	8000dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f38:	480c      	ldr	r0, [pc, #48]	@ (8000f6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f3a:	490d      	ldr	r1, [pc, #52]	@ (8000f70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f50:	4c0a      	ldr	r4, [pc, #40]	@ (8000f7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f003 fdd1 	bl	8004b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f62:	f7ff fc1b 	bl	800079c <main>
  bx  lr    
 8000f66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f68:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000f74:	08006f58 	.word	0x08006f58
  ldr r2, =_sbss
 8000f78:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000f7c:	2000042c 	.word	0x2000042c

08000f80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC_IRQHandler>

08000f82 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f86:	2003      	movs	r0, #3
 8000f88:	f000 f92e 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8c:	200f      	movs	r0, #15
 8000f8e:	f000 f805 	bl	8000f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f92:	f7ff fe11 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa4:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <HAL_InitTick+0x54>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <HAL_InitTick+0x58>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f93b 	bl	8001236 <HAL_SYSTICK_Config>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00e      	b.n	8000fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	d80a      	bhi.n	8000fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f000 f911 	bl	80011fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fdc:	4a06      	ldr	r2, [pc, #24]	@ (8000ff8 <HAL_InitTick+0x5c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000010 	.word	0x20000010
 8000ff8:	2000000c 	.word	0x2000000c

08000ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <HAL_IncTick+0x20>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <HAL_IncTick+0x24>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a04      	ldr	r2, [pc, #16]	@ (8001020 <HAL_IncTick+0x24>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000010 	.word	0x20000010
 8001020:	200002dc 	.word	0x200002dc

08001024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b03      	ldr	r3, [pc, #12]	@ (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	200002dc 	.word	0x200002dc

0800103c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff ffee 	bl	8001024 <HAL_GetTick>
 8001048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001054:	d005      	beq.n	8001062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001056:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <HAL_Delay+0x44>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001062:	bf00      	nop
 8001064:	f7ff ffde 	bl	8001024 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	429a      	cmp	r2, r3
 8001072:	d8f7      	bhi.n	8001064 <HAL_Delay+0x28>
  {
  }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000010 	.word	0x20000010

08001084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010a0:	4013      	ands	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b2:	4a04      	ldr	r2, [pc, #16]	@ (80010c4 <__NVIC_SetPriorityGrouping+0x40>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	60d3      	str	r3, [r2, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00
 80010c8:	05fa0000 	.word	0x05fa0000

080010cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d0:	4b04      	ldr	r3, [pc, #16]	@ (80010e4 <__NVIC_GetPriorityGrouping+0x18>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	f003 0307 	and.w	r3, r3, #7
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	@ (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	@ (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	@ 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	@ 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011b4:	d301      	bcc.n	80011ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00f      	b.n	80011da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <SysTick_Config+0x40>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c2:	210f      	movs	r1, #15
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f7ff ff8e 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <SysTick_Config+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <SysTick_Config+0x40>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff47 	bl	8001084 <__NVIC_SetPriorityGrouping>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff5c 	bl	80010cc <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff8e 	bl	800113c <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5d 	bl	80010e8 <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffb0 	bl	80011a4 <SysTick_Config>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001254:	f3bf 8f5f 	dmb	sy
}
 8001258:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800125a:	4b07      	ldr	r3, [pc, #28]	@ (8001278 <HAL_MPU_Disable+0x28>)
 800125c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125e:	4a06      	ldr	r2, [pc, #24]	@ (8001278 <HAL_MPU_Disable+0x28>)
 8001260:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001264:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001266:	4b05      	ldr	r3, [pc, #20]	@ (800127c <HAL_MPU_Disable+0x2c>)
 8001268:	2200      	movs	r2, #0
 800126a:	605a      	str	r2, [r3, #4]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00
 800127c:	e000ed90 	.word	0xe000ed90

08001280 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001288:	4a0b      	ldr	r2, [pc, #44]	@ (80012b8 <HAL_MPU_Enable+0x38>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001292:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <HAL_MPU_Enable+0x3c>)
 8001294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001296:	4a09      	ldr	r2, [pc, #36]	@ (80012bc <HAL_MPU_Enable+0x3c>)
 8001298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800129c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800129e:	f3bf 8f4f 	dsb	sy
}
 80012a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012a4:	f3bf 8f6f 	isb	sy
}
 80012a8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed90 	.word	0xe000ed90
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	785a      	ldrb	r2, [r3, #1]
 80012cc:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <HAL_MPU_ConfigRegion+0x7c>)
 80012ce:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80012d0:	4b1a      	ldr	r3, [pc, #104]	@ (800133c <HAL_MPU_ConfigRegion+0x7c>)
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	4a19      	ldr	r2, [pc, #100]	@ (800133c <HAL_MPU_ConfigRegion+0x7c>)
 80012d6:	f023 0301 	bic.w	r3, r3, #1
 80012da:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80012dc:	4a17      	ldr	r2, [pc, #92]	@ (800133c <HAL_MPU_ConfigRegion+0x7c>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	7b1b      	ldrb	r3, [r3, #12]
 80012e8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	7adb      	ldrb	r3, [r3, #11]
 80012ee:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	7a9b      	ldrb	r3, [r3, #10]
 80012f6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7b5b      	ldrb	r3, [r3, #13]
 80012fe:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001300:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	7b9b      	ldrb	r3, [r3, #14]
 8001306:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001308:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	7bdb      	ldrb	r3, [r3, #15]
 800130e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001310:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	7a5b      	ldrb	r3, [r3, #9]
 8001316:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001318:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	7a1b      	ldrb	r3, [r3, #8]
 800131e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001320:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	7812      	ldrb	r2, [r2, #0]
 8001326:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001328:	4a04      	ldr	r2, [pc, #16]	@ (800133c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800132a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800132c:	6113      	str	r3, [r2, #16]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed90 	.word	0xe000ed90

08001340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	@ 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
 800135e:	e175      	b.n	800164c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001360:	2201      	movs	r2, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	429a      	cmp	r2, r3
 800137a:	f040 8164 	bne.w	8001646 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b01      	cmp	r3, #1
 8001388:	d005      	beq.n	8001396 <HAL_GPIO_Init+0x56>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d130      	bne.n	80013f8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	2203      	movs	r2, #3
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	68da      	ldr	r2, [r3, #12]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013cc:	2201      	movs	r2, #1
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	091b      	lsrs	r3, r3, #4
 80013e2:	f003 0201 	and.w	r2, r3, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b03      	cmp	r3, #3
 8001402:	d017      	beq.n	8001434 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d123      	bne.n	8001488 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	08da      	lsrs	r2, r3, #3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3208      	adds	r2, #8
 8001448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	220f      	movs	r2, #15
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	691a      	ldr	r2, [r3, #16]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	08da      	lsrs	r2, r3, #3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3208      	adds	r2, #8
 8001482:	69b9      	ldr	r1, [r7, #24]
 8001484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0203 	and.w	r2, r3, #3
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 80be 	beq.w	8001646 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	4b66      	ldr	r3, [pc, #408]	@ (8001664 <HAL_GPIO_Init+0x324>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ce:	4a65      	ldr	r2, [pc, #404]	@ (8001664 <HAL_GPIO_Init+0x324>)
 80014d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d6:	4b63      	ldr	r3, [pc, #396]	@ (8001664 <HAL_GPIO_Init+0x324>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80014e2:	4a61      	ldr	r2, [pc, #388]	@ (8001668 <HAL_GPIO_Init+0x328>)
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	089b      	lsrs	r3, r3, #2
 80014e8:	3302      	adds	r3, #2
 80014ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	220f      	movs	r2, #15
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a58      	ldr	r2, [pc, #352]	@ (800166c <HAL_GPIO_Init+0x32c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d037      	beq.n	800157e <HAL_GPIO_Init+0x23e>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a57      	ldr	r2, [pc, #348]	@ (8001670 <HAL_GPIO_Init+0x330>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d031      	beq.n	800157a <HAL_GPIO_Init+0x23a>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a56      	ldr	r2, [pc, #344]	@ (8001674 <HAL_GPIO_Init+0x334>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d02b      	beq.n	8001576 <HAL_GPIO_Init+0x236>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a55      	ldr	r2, [pc, #340]	@ (8001678 <HAL_GPIO_Init+0x338>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d025      	beq.n	8001572 <HAL_GPIO_Init+0x232>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a54      	ldr	r2, [pc, #336]	@ (800167c <HAL_GPIO_Init+0x33c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d01f      	beq.n	800156e <HAL_GPIO_Init+0x22e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a53      	ldr	r2, [pc, #332]	@ (8001680 <HAL_GPIO_Init+0x340>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d019      	beq.n	800156a <HAL_GPIO_Init+0x22a>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a52      	ldr	r2, [pc, #328]	@ (8001684 <HAL_GPIO_Init+0x344>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d013      	beq.n	8001566 <HAL_GPIO_Init+0x226>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a51      	ldr	r2, [pc, #324]	@ (8001688 <HAL_GPIO_Init+0x348>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d00d      	beq.n	8001562 <HAL_GPIO_Init+0x222>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a50      	ldr	r2, [pc, #320]	@ (800168c <HAL_GPIO_Init+0x34c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d007      	beq.n	800155e <HAL_GPIO_Init+0x21e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4f      	ldr	r2, [pc, #316]	@ (8001690 <HAL_GPIO_Init+0x350>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d101      	bne.n	800155a <HAL_GPIO_Init+0x21a>
 8001556:	2309      	movs	r3, #9
 8001558:	e012      	b.n	8001580 <HAL_GPIO_Init+0x240>
 800155a:	230a      	movs	r3, #10
 800155c:	e010      	b.n	8001580 <HAL_GPIO_Init+0x240>
 800155e:	2308      	movs	r3, #8
 8001560:	e00e      	b.n	8001580 <HAL_GPIO_Init+0x240>
 8001562:	2307      	movs	r3, #7
 8001564:	e00c      	b.n	8001580 <HAL_GPIO_Init+0x240>
 8001566:	2306      	movs	r3, #6
 8001568:	e00a      	b.n	8001580 <HAL_GPIO_Init+0x240>
 800156a:	2305      	movs	r3, #5
 800156c:	e008      	b.n	8001580 <HAL_GPIO_Init+0x240>
 800156e:	2304      	movs	r3, #4
 8001570:	e006      	b.n	8001580 <HAL_GPIO_Init+0x240>
 8001572:	2303      	movs	r3, #3
 8001574:	e004      	b.n	8001580 <HAL_GPIO_Init+0x240>
 8001576:	2302      	movs	r3, #2
 8001578:	e002      	b.n	8001580 <HAL_GPIO_Init+0x240>
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <HAL_GPIO_Init+0x240>
 800157e:	2300      	movs	r3, #0
 8001580:	69fa      	ldr	r2, [r7, #28]
 8001582:	f002 0203 	and.w	r2, r2, #3
 8001586:	0092      	lsls	r2, r2, #2
 8001588:	4093      	lsls	r3, r2
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001590:	4935      	ldr	r1, [pc, #212]	@ (8001668 <HAL_GPIO_Init+0x328>)
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	089b      	lsrs	r3, r3, #2
 8001596:	3302      	adds	r3, #2
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800159e:	4b3d      	ldr	r3, [pc, #244]	@ (8001694 <HAL_GPIO_Init+0x354>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015c2:	4a34      	ldr	r2, [pc, #208]	@ (8001694 <HAL_GPIO_Init+0x354>)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c8:	4b32      	ldr	r3, [pc, #200]	@ (8001694 <HAL_GPIO_Init+0x354>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015ec:	4a29      	ldr	r2, [pc, #164]	@ (8001694 <HAL_GPIO_Init+0x354>)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015f2:	4b28      	ldr	r3, [pc, #160]	@ (8001694 <HAL_GPIO_Init+0x354>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001616:	4a1f      	ldr	r2, [pc, #124]	@ (8001694 <HAL_GPIO_Init+0x354>)
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800161c:	4b1d      	ldr	r3, [pc, #116]	@ (8001694 <HAL_GPIO_Init+0x354>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001640:	4a14      	ldr	r2, [pc, #80]	@ (8001694 <HAL_GPIO_Init+0x354>)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3301      	adds	r3, #1
 800164a:	61fb      	str	r3, [r7, #28]
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	2b0f      	cmp	r3, #15
 8001650:	f67f ae86 	bls.w	8001360 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	3724      	adds	r7, #36	@ 0x24
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800
 8001668:	40013800 	.word	0x40013800
 800166c:	40020000 	.word	0x40020000
 8001670:	40020400 	.word	0x40020400
 8001674:	40020800 	.word	0x40020800
 8001678:	40020c00 	.word	0x40020c00
 800167c:	40021000 	.word	0x40021000
 8001680:	40021400 	.word	0x40021400
 8001684:	40021800 	.word	0x40021800
 8001688:	40021c00 	.word	0x40021c00
 800168c:	40022000 	.word	0x40022000
 8001690:	40022400 	.word	0x40022400
 8001694:	40013c00 	.word	0x40013c00

08001698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	807b      	strh	r3, [r7, #2]
 80016a4:	4613      	mov	r3, r2
 80016a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016a8:	787b      	ldrb	r3, [r7, #1]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ae:	887a      	ldrh	r2, [r7, #2]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80016b4:	e003      	b.n	80016be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80016b6:	887b      	ldrh	r3, [r7, #2]
 80016b8:	041a      	lsls	r2, r3, #16
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	619a      	str	r2, [r3, #24]
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b085      	sub	sp, #20
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	460b      	mov	r3, r1
 80016d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016dc:	887a      	ldrh	r2, [r7, #2]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4013      	ands	r3, r2
 80016e2:	041a      	lsls	r2, r3, #16
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	887b      	ldrh	r3, [r7, #2]
 80016ea:	400b      	ands	r3, r1
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	619a      	str	r2, [r3, #24]
}
 80016f2:	bf00      	nop
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e08b      	b.n	800182a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d106      	bne.n	800172c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7fe ffd8 	bl	80006dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2224      	movs	r2, #36	@ 0x24
 8001730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0201 	bic.w	r2, r2, #1
 8001742:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001750:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001760:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d107      	bne.n	800177a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	e006      	b.n	8001788 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001786:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	2b02      	cmp	r3, #2
 800178e:	d108      	bne.n	80017a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	e007      	b.n	80017b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001834 <HAL_I2C_Init+0x134>)
 80017be:	430b      	orrs	r3, r1
 80017c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691a      	ldr	r2, [r3, #16]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69d9      	ldr	r1, [r3, #28]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1a      	ldr	r2, [r3, #32]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 0201 	orr.w	r2, r2, #1
 800180a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2220      	movs	r2, #32
 8001816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	02008000 	.word	0x02008000

08001838 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af02      	add	r7, sp, #8
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	461a      	mov	r2, r3
 8001844:	460b      	mov	r3, r1
 8001846:	817b      	strh	r3, [r7, #10]
 8001848:	4613      	mov	r3, r2
 800184a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b20      	cmp	r3, #32
 8001856:	f040 80fd 	bne.w	8001a54 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <HAL_I2C_Master_Transmit+0x30>
 8001864:	2302      	movs	r3, #2
 8001866:	e0f6      	b.n	8001a56 <HAL_I2C_Master_Transmit+0x21e>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001870:	f7ff fbd8 	bl	8001024 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2319      	movs	r3, #25
 800187c:	2201      	movs	r2, #1
 800187e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 fa0a 	bl	8001c9c <I2C_WaitOnFlagUntilTimeout>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e0e1      	b.n	8001a56 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2221      	movs	r2, #33	@ 0x21
 8001896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2210      	movs	r2, #16
 800189e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	893a      	ldrh	r2, [r7, #8]
 80018b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018be:	b29b      	uxth	r3, r3
 80018c0:	2bff      	cmp	r3, #255	@ 0xff
 80018c2:	d906      	bls.n	80018d2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	22ff      	movs	r2, #255	@ 0xff
 80018c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80018ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	e007      	b.n	80018e2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80018dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018e0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d024      	beq.n	8001934 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ee:	781a      	ldrb	r2, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001904:	b29b      	uxth	r3, r3
 8001906:	3b01      	subs	r3, #1
 8001908:	b29a      	uxth	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001912:	3b01      	subs	r3, #1
 8001914:	b29a      	uxth	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800191e:	b2db      	uxtb	r3, r3
 8001920:	3301      	adds	r3, #1
 8001922:	b2da      	uxtb	r2, r3
 8001924:	8979      	ldrh	r1, [r7, #10]
 8001926:	4b4e      	ldr	r3, [pc, #312]	@ (8001a60 <HAL_I2C_Master_Transmit+0x228>)
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f000 fc05 	bl	800213c <I2C_TransferConfig>
 8001932:	e066      	b.n	8001a02 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001938:	b2da      	uxtb	r2, r3
 800193a:	8979      	ldrh	r1, [r7, #10]
 800193c:	4b48      	ldr	r3, [pc, #288]	@ (8001a60 <HAL_I2C_Master_Transmit+0x228>)
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 fbfa 	bl	800213c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001948:	e05b      	b.n	8001a02 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	6a39      	ldr	r1, [r7, #32]
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 f9fd 	bl	8001d4e <I2C_WaitOnTXISFlagUntilTimeout>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e07b      	b.n	8001a56 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	781a      	ldrb	r2, [r3, #0]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001978:	b29b      	uxth	r3, r3
 800197a:	3b01      	subs	r3, #1
 800197c:	b29a      	uxth	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001986:	3b01      	subs	r3, #1
 8001988:	b29a      	uxth	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001992:	b29b      	uxth	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d034      	beq.n	8001a02 <HAL_I2C_Master_Transmit+0x1ca>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800199c:	2b00      	cmp	r3, #0
 800199e:	d130      	bne.n	8001a02 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	2200      	movs	r2, #0
 80019a8:	2180      	movs	r1, #128	@ 0x80
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 f976 	bl	8001c9c <I2C_WaitOnFlagUntilTimeout>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e04d      	b.n	8001a56 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019be:	b29b      	uxth	r3, r3
 80019c0:	2bff      	cmp	r3, #255	@ 0xff
 80019c2:	d90e      	bls.n	80019e2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	22ff      	movs	r2, #255	@ 0xff
 80019c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	8979      	ldrh	r1, [r7, #10]
 80019d2:	2300      	movs	r3, #0
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f000 fbae 	bl	800213c <I2C_TransferConfig>
 80019e0:	e00f      	b.n	8001a02 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	8979      	ldrh	r1, [r7, #10]
 80019f4:	2300      	movs	r3, #0
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f000 fb9d 	bl	800213c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d19e      	bne.n	800194a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	6a39      	ldr	r1, [r7, #32]
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 f9e3 	bl	8001ddc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e01a      	b.n	8001a56 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2220      	movs	r2, #32
 8001a26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6859      	ldr	r1, [r3, #4]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <HAL_I2C_Master_Transmit+0x22c>)
 8001a34:	400b      	ands	r3, r1
 8001a36:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	e000      	b.n	8001a56 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001a54:	2302      	movs	r3, #2
  }
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	80002000 	.word	0x80002000
 8001a64:	fe00e800 	.word	0xfe00e800

08001a68 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	461a      	mov	r2, r3
 8001a74:	460b      	mov	r3, r1
 8001a76:	817b      	strh	r3, [r7, #10]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b20      	cmp	r3, #32
 8001a86:	f040 80db 	bne.w	8001c40 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <HAL_I2C_Master_Receive+0x30>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e0d4      	b.n	8001c42 <HAL_I2C_Master_Receive+0x1da>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001aa0:	f7ff fac0 	bl	8001024 <HAL_GetTick>
 8001aa4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	2319      	movs	r3, #25
 8001aac:	2201      	movs	r2, #1
 8001aae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 f8f2 	bl	8001c9c <I2C_WaitOnFlagUntilTimeout>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e0bf      	b.n	8001c42 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2222      	movs	r2, #34	@ 0x22
 8001ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2210      	movs	r2, #16
 8001ace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	893a      	ldrh	r2, [r7, #8]
 8001ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	2bff      	cmp	r3, #255	@ 0xff
 8001af2:	d90e      	bls.n	8001b12 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2201      	movs	r2, #1
 8001af8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	8979      	ldrh	r1, [r7, #10]
 8001b02:	4b52      	ldr	r3, [pc, #328]	@ (8001c4c <HAL_I2C_Master_Receive+0x1e4>)
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 fb16 	bl	800213c <I2C_TransferConfig>
 8001b10:	e06d      	b.n	8001bee <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	8979      	ldrh	r1, [r7, #10]
 8001b24:	4b49      	ldr	r3, [pc, #292]	@ (8001c4c <HAL_I2C_Master_Receive+0x1e4>)
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 fb05 	bl	800213c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001b32:	e05c      	b.n	8001bee <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	6a39      	ldr	r1, [r7, #32]
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 f993 	bl	8001e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e07c      	b.n	8001c42 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d034      	beq.n	8001bee <HAL_I2C_Master_Receive+0x186>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d130      	bne.n	8001bee <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	2200      	movs	r2, #0
 8001b94:	2180      	movs	r1, #128	@ 0x80
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 f880 	bl	8001c9c <I2C_WaitOnFlagUntilTimeout>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e04d      	b.n	8001c42 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	2bff      	cmp	r3, #255	@ 0xff
 8001bae:	d90e      	bls.n	8001bce <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	22ff      	movs	r2, #255	@ 0xff
 8001bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	8979      	ldrh	r1, [r7, #10]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 fab8 	bl	800213c <I2C_TransferConfig>
 8001bcc:	e00f      	b.n	8001bee <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	8979      	ldrh	r1, [r7, #10]
 8001be0:	2300      	movs	r3, #0
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f000 faa7 	bl	800213c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d19d      	bne.n	8001b34 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	6a39      	ldr	r1, [r7, #32]
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 f8ed 	bl	8001ddc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e01a      	b.n	8001c42 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2220      	movs	r2, #32
 8001c12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6859      	ldr	r1, [r3, #4]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c50 <HAL_I2C_Master_Receive+0x1e8>)
 8001c20:	400b      	ands	r3, r1
 8001c22:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2220      	movs	r2, #32
 8001c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	e000      	b.n	8001c42 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001c40:	2302      	movs	r3, #2
  }
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	80002400 	.word	0x80002400
 8001c50:	fe00e800 	.word	0xfe00e800

08001c54 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d103      	bne.n	8001c72 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d007      	beq.n	8001c90 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699a      	ldr	r2, [r3, #24]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	619a      	str	r2, [r3, #24]
  }
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cac:	e03b      	b.n	8001d26 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 f962 	bl	8001f7c <I2C_IsErrorOccurred>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e041      	b.n	8001d46 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d02d      	beq.n	8001d26 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cca:	f7ff f9ab 	bl	8001024 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d302      	bcc.n	8001ce0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d122      	bne.n	8001d26 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699a      	ldr	r2, [r3, #24]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	bf0c      	ite	eq
 8001cf0:	2301      	moveq	r3, #1
 8001cf2:	2300      	movne	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d113      	bne.n	8001d26 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	f043 0220 	orr.w	r2, r3, #32
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2220      	movs	r2, #32
 8001d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00f      	b.n	8001d46 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	699a      	ldr	r2, [r3, #24]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	bf0c      	ite	eq
 8001d36:	2301      	moveq	r3, #1
 8001d38:	2300      	movne	r3, #0
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d0b4      	beq.n	8001cae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d5a:	e033      	b.n	8001dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	68b9      	ldr	r1, [r7, #8]
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 f90b 	bl	8001f7c <I2C_IsErrorOccurred>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e031      	b.n	8001dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d76:	d025      	beq.n	8001dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d78:	f7ff f954 	bl	8001024 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d302      	bcc.n	8001d8e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d11a      	bne.n	8001dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d013      	beq.n	8001dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da0:	f043 0220 	orr.w	r2, r3, #32
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2220      	movs	r2, #32
 8001dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e007      	b.n	8001dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d1c4      	bne.n	8001d5c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001de8:	e02f      	b.n	8001e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 f8c4 	bl	8001f7c <I2C_IsErrorOccurred>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e02d      	b.n	8001e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dfe:	f7ff f911 	bl	8001024 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d302      	bcc.n	8001e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d11a      	bne.n	8001e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f003 0320 	and.w	r3, r3, #32
 8001e1e:	2b20      	cmp	r3, #32
 8001e20:	d013      	beq.n	8001e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e26:	f043 0220 	orr.w	r2, r3, #32
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2220      	movs	r2, #32
 8001e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e007      	b.n	8001e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f003 0320 	and.w	r3, r3, #32
 8001e54:	2b20      	cmp	r3, #32
 8001e56:	d1c8      	bne.n	8001dea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001e74:	e071      	b.n	8001f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 f87e 	bl	8001f7c <I2C_IsErrorOccurred>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d13b      	bne.n	8001f10 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001e98:	7dfb      	ldrb	r3, [r7, #23]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d138      	bne.n	8001f10 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d105      	bne.n	8001eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b10      	cmp	r3, #16
 8001ec4:	d121      	bne.n	8001f0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2210      	movs	r2, #16
 8001ecc:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2204      	movs	r2, #4
 8001ed2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2220      	movs	r2, #32
 8001eda:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6859      	ldr	r1, [r3, #4]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	4b24      	ldr	r3, [pc, #144]	@ (8001f78 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8001ee8:	400b      	ands	r3, r1
 8001eea:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	75fb      	strb	r3, [r7, #23]
 8001f08:	e002      	b.n	8001f10 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001f10:	f7ff f888 	bl	8001024 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d302      	bcc.n	8001f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d119      	bne.n	8001f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8001f26:	7dfb      	ldrb	r3, [r7, #23]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d116      	bne.n	8001f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d00f      	beq.n	8001f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	f043 0220 	orr.w	r2, r3, #32
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2220      	movs	r2, #32
 8001f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d002      	beq.n	8001f6e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d083      	beq.n	8001e76 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8001f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	fe00e800 	.word	0xfe00e800

08001f7c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	@ 0x28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d068      	beq.n	800207a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2210      	movs	r2, #16
 8001fae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fb0:	e049      	b.n	8002046 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb8:	d045      	beq.n	8002046 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001fba:	f7ff f833 	bl	8001024 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d302      	bcc.n	8001fd0 <I2C_IsErrorOccurred+0x54>
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d13a      	bne.n	8002046 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fda:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001fe2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ff2:	d121      	bne.n	8002038 <I2C_IsErrorOccurred+0xbc>
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ffa:	d01d      	beq.n	8002038 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001ffc:	7cfb      	ldrb	r3, [r7, #19]
 8001ffe:	2b20      	cmp	r3, #32
 8002000:	d01a      	beq.n	8002038 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002010:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002012:	f7ff f807 	bl	8001024 <HAL_GetTick>
 8002016:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002018:	e00e      	b.n	8002038 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800201a:	f7ff f803 	bl	8001024 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b19      	cmp	r3, #25
 8002026:	d907      	bls.n	8002038 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	f043 0320 	orr.w	r3, r3, #32
 800202e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002036:	e006      	b.n	8002046 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f003 0320 	and.w	r3, r3, #32
 8002042:	2b20      	cmp	r3, #32
 8002044:	d1e9      	bne.n	800201a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f003 0320 	and.w	r3, r3, #32
 8002050:	2b20      	cmp	r3, #32
 8002052:	d003      	beq.n	800205c <I2C_IsErrorOccurred+0xe0>
 8002054:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0aa      	beq.n	8001fb2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800205c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002060:	2b00      	cmp	r3, #0
 8002062:	d103      	bne.n	800206c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2220      	movs	r2, #32
 800206a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00b      	beq.n	80020a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800209c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00b      	beq.n	80020c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	f043 0308 	orr.w	r3, r3, #8
 80020b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00b      	beq.n	80020e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	f043 0302 	orr.w	r3, r3, #2
 80020d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80020e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d01c      	beq.n	800212a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f7ff fdaf 	bl	8001c54 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6859      	ldr	r1, [r3, #4]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b0d      	ldr	r3, [pc, #52]	@ (8002138 <I2C_IsErrorOccurred+0x1bc>)
 8002102:	400b      	ands	r3, r1
 8002104:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	431a      	orrs	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2220      	movs	r2, #32
 8002116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800212a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800212e:	4618      	mov	r0, r3
 8002130:	3728      	adds	r7, #40	@ 0x28
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	fe00e800 	.word	0xfe00e800

0800213c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	460b      	mov	r3, r1
 8002148:	817b      	strh	r3, [r7, #10]
 800214a:	4613      	mov	r3, r2
 800214c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800214e:	897b      	ldrh	r3, [r7, #10]
 8002150:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002154:	7a7b      	ldrb	r3, [r7, #9]
 8002156:	041b      	lsls	r3, r3, #16
 8002158:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800215c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	4313      	orrs	r3, r2
 8002166:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800216a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	0d5b      	lsrs	r3, r3, #21
 8002176:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800217a:	4b08      	ldr	r3, [pc, #32]	@ (800219c <I2C_TransferConfig+0x60>)
 800217c:	430b      	orrs	r3, r1
 800217e:	43db      	mvns	r3, r3
 8002180:	ea02 0103 	and.w	r1, r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	430a      	orrs	r2, r1
 800218c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800218e:	bf00      	nop
 8002190:	371c      	adds	r7, #28
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	03ff63ff 	.word	0x03ff63ff

080021a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b20      	cmp	r3, #32
 80021b4:	d138      	bne.n	8002228 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e032      	b.n	800222a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2224      	movs	r2, #36	@ 0x24
 80021d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80021f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6819      	ldr	r1, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	e000      	b.n	800222a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002228:	2302      	movs	r3, #2
  }
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002236:	b480      	push	{r7}
 8002238:	b085      	sub	sp, #20
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b20      	cmp	r3, #32
 800224a:	d139      	bne.n	80022c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002256:	2302      	movs	r3, #2
 8002258:	e033      	b.n	80022c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2224      	movs	r2, #36	@ 0x24
 8002266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0201 	bic.w	r2, r2, #1
 8002278:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002288:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	021b      	lsls	r3, r3, #8
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	4313      	orrs	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0201 	orr.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	e000      	b.n	80022c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022c0:	2302      	movs	r3, #2
  }
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80022da:	4b23      	ldr	r3, [pc, #140]	@ (8002368 <HAL_PWREx_EnableOverDrive+0x98>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022de:	4a22      	ldr	r2, [pc, #136]	@ (8002368 <HAL_PWREx_EnableOverDrive+0x98>)
 80022e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022e6:	4b20      	ldr	r3, [pc, #128]	@ (8002368 <HAL_PWREx_EnableOverDrive+0x98>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80022f2:	4b1e      	ldr	r3, [pc, #120]	@ (800236c <HAL_PWREx_EnableOverDrive+0x9c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a1d      	ldr	r2, [pc, #116]	@ (800236c <HAL_PWREx_EnableOverDrive+0x9c>)
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022fc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022fe:	f7fe fe91 	bl	8001024 <HAL_GetTick>
 8002302:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002304:	e009      	b.n	800231a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002306:	f7fe fe8d 	bl	8001024 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002314:	d901      	bls.n	800231a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e022      	b.n	8002360 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800231a:	4b14      	ldr	r3, [pc, #80]	@ (800236c <HAL_PWREx_EnableOverDrive+0x9c>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002322:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002326:	d1ee      	bne.n	8002306 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002328:	4b10      	ldr	r3, [pc, #64]	@ (800236c <HAL_PWREx_EnableOverDrive+0x9c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0f      	ldr	r2, [pc, #60]	@ (800236c <HAL_PWREx_EnableOverDrive+0x9c>)
 800232e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002332:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002334:	f7fe fe76 	bl	8001024 <HAL_GetTick>
 8002338:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800233a:	e009      	b.n	8002350 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800233c:	f7fe fe72 	bl	8001024 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800234a:	d901      	bls.n	8002350 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e007      	b.n	8002360 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002350:	4b06      	ldr	r3, [pc, #24]	@ (800236c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002358:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800235c:	d1ee      	bne.n	800233c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40023800 	.word	0x40023800
 800236c:	40007000 	.word	0x40007000

08002370 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002378:	2300      	movs	r3, #0
 800237a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e29b      	b.n	80028be <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 8087 	beq.w	80024a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002394:	4b96      	ldr	r3, [pc, #600]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 030c 	and.w	r3, r3, #12
 800239c:	2b04      	cmp	r3, #4
 800239e:	d00c      	beq.n	80023ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023a0:	4b93      	ldr	r3, [pc, #588]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 030c 	and.w	r3, r3, #12
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d112      	bne.n	80023d2 <HAL_RCC_OscConfig+0x62>
 80023ac:	4b90      	ldr	r3, [pc, #576]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023b8:	d10b      	bne.n	80023d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ba:	4b8d      	ldr	r3, [pc, #564]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d06c      	beq.n	80024a0 <HAL_RCC_OscConfig+0x130>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d168      	bne.n	80024a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e275      	b.n	80028be <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023da:	d106      	bne.n	80023ea <HAL_RCC_OscConfig+0x7a>
 80023dc:	4b84      	ldr	r3, [pc, #528]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a83      	ldr	r2, [pc, #524]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 80023e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	e02e      	b.n	8002448 <HAL_RCC_OscConfig+0xd8>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10c      	bne.n	800240c <HAL_RCC_OscConfig+0x9c>
 80023f2:	4b7f      	ldr	r3, [pc, #508]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a7e      	ldr	r2, [pc, #504]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 80023f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	4b7c      	ldr	r3, [pc, #496]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a7b      	ldr	r2, [pc, #492]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002404:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e01d      	b.n	8002448 <HAL_RCC_OscConfig+0xd8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002414:	d10c      	bne.n	8002430 <HAL_RCC_OscConfig+0xc0>
 8002416:	4b76      	ldr	r3, [pc, #472]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a75      	ldr	r2, [pc, #468]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 800241c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	4b73      	ldr	r3, [pc, #460]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a72      	ldr	r2, [pc, #456]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e00b      	b.n	8002448 <HAL_RCC_OscConfig+0xd8>
 8002430:	4b6f      	ldr	r3, [pc, #444]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a6e      	ldr	r2, [pc, #440]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	4b6c      	ldr	r3, [pc, #432]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a6b      	ldr	r2, [pc, #428]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002442:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d013      	beq.n	8002478 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fe fde8 	bl	8001024 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002458:	f7fe fde4 	bl	8001024 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	@ 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e229      	b.n	80028be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246a:	4b61      	ldr	r3, [pc, #388]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0xe8>
 8002476:	e014      	b.n	80024a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7fe fdd4 	bl	8001024 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002480:	f7fe fdd0 	bl	8001024 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b64      	cmp	r3, #100	@ 0x64
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e215      	b.n	80028be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002492:	4b57      	ldr	r3, [pc, #348]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x110>
 800249e:	e000      	b.n	80024a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d069      	beq.n	8002582 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ae:	4b50      	ldr	r3, [pc, #320]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00b      	beq.n	80024d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ba:	4b4d      	ldr	r3, [pc, #308]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d11c      	bne.n	8002500 <HAL_RCC_OscConfig+0x190>
 80024c6:	4b4a      	ldr	r3, [pc, #296]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d116      	bne.n	8002500 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d2:	4b47      	ldr	r3, [pc, #284]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <HAL_RCC_OscConfig+0x17a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d001      	beq.n	80024ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e1e9      	b.n	80028be <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ea:	4b41      	ldr	r3, [pc, #260]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	493d      	ldr	r1, [pc, #244]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fe:	e040      	b.n	8002582 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d023      	beq.n	8002550 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002508:	4b39      	ldr	r3, [pc, #228]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a38      	ldr	r2, [pc, #224]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7fe fd86 	bl	8001024 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800251c:	f7fe fd82 	bl	8001024 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e1c7      	b.n	80028be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252e:	4b30      	ldr	r3, [pc, #192]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253a:	4b2d      	ldr	r3, [pc, #180]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4929      	ldr	r1, [pc, #164]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]
 800254e:	e018      	b.n	8002582 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002550:	4b27      	ldr	r3, [pc, #156]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a26      	ldr	r2, [pc, #152]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002556:	f023 0301 	bic.w	r3, r3, #1
 800255a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7fe fd62 	bl	8001024 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002564:	f7fe fd5e 	bl	8001024 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e1a3      	b.n	80028be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002576:	4b1e      	ldr	r3, [pc, #120]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d038      	beq.n	8002600 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d019      	beq.n	80025ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002596:	4b16      	ldr	r3, [pc, #88]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 8002598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800259a:	4a15      	ldr	r2, [pc, #84]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a2:	f7fe fd3f 	bl	8001024 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025aa:	f7fe fd3b 	bl	8001024 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e180      	b.n	80028be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025bc:	4b0c      	ldr	r3, [pc, #48]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 80025be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x23a>
 80025c8:	e01a      	b.n	8002600 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ca:	4b09      	ldr	r3, [pc, #36]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 80025cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ce:	4a08      	ldr	r2, [pc, #32]	@ (80025f0 <HAL_RCC_OscConfig+0x280>)
 80025d0:	f023 0301 	bic.w	r3, r3, #1
 80025d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d6:	f7fe fd25 	bl	8001024 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025dc:	e00a      	b.n	80025f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025de:	f7fe fd21 	bl	8001024 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d903      	bls.n	80025f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e166      	b.n	80028be <HAL_RCC_OscConfig+0x54e>
 80025f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f4:	4b92      	ldr	r3, [pc, #584]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 80025f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1ee      	bne.n	80025de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80a4 	beq.w	8002756 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260e:	4b8c      	ldr	r3, [pc, #560]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10d      	bne.n	8002636 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	4b89      	ldr	r3, [pc, #548]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	4a88      	ldr	r2, [pc, #544]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 8002620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002624:	6413      	str	r3, [r2, #64]	@ 0x40
 8002626:	4b86      	ldr	r3, [pc, #536]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002632:	2301      	movs	r3, #1
 8002634:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002636:	4b83      	ldr	r3, [pc, #524]	@ (8002844 <HAL_RCC_OscConfig+0x4d4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	d118      	bne.n	8002674 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002642:	4b80      	ldr	r3, [pc, #512]	@ (8002844 <HAL_RCC_OscConfig+0x4d4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a7f      	ldr	r2, [pc, #508]	@ (8002844 <HAL_RCC_OscConfig+0x4d4>)
 8002648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800264c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800264e:	f7fe fce9 	bl	8001024 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002656:	f7fe fce5 	bl	8001024 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b64      	cmp	r3, #100	@ 0x64
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e12a      	b.n	80028be <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002668:	4b76      	ldr	r3, [pc, #472]	@ (8002844 <HAL_RCC_OscConfig+0x4d4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f0      	beq.n	8002656 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d106      	bne.n	800268a <HAL_RCC_OscConfig+0x31a>
 800267c:	4b70      	ldr	r3, [pc, #448]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002680:	4a6f      	ldr	r2, [pc, #444]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	6713      	str	r3, [r2, #112]	@ 0x70
 8002688:	e02d      	b.n	80026e6 <HAL_RCC_OscConfig+0x376>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10c      	bne.n	80026ac <HAL_RCC_OscConfig+0x33c>
 8002692:	4b6b      	ldr	r3, [pc, #428]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002696:	4a6a      	ldr	r2, [pc, #424]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 8002698:	f023 0301 	bic.w	r3, r3, #1
 800269c:	6713      	str	r3, [r2, #112]	@ 0x70
 800269e:	4b68      	ldr	r3, [pc, #416]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a2:	4a67      	ldr	r2, [pc, #412]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 80026a4:	f023 0304 	bic.w	r3, r3, #4
 80026a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026aa:	e01c      	b.n	80026e6 <HAL_RCC_OscConfig+0x376>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b05      	cmp	r3, #5
 80026b2:	d10c      	bne.n	80026ce <HAL_RCC_OscConfig+0x35e>
 80026b4:	4b62      	ldr	r3, [pc, #392]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b8:	4a61      	ldr	r2, [pc, #388]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 80026ba:	f043 0304 	orr.w	r3, r3, #4
 80026be:	6713      	str	r3, [r2, #112]	@ 0x70
 80026c0:	4b5f      	ldr	r3, [pc, #380]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 80026c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c4:	4a5e      	ldr	r2, [pc, #376]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80026cc:	e00b      	b.n	80026e6 <HAL_RCC_OscConfig+0x376>
 80026ce:	4b5c      	ldr	r3, [pc, #368]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d2:	4a5b      	ldr	r2, [pc, #364]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026da:	4b59      	ldr	r3, [pc, #356]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 80026dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026de:	4a58      	ldr	r2, [pc, #352]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 80026e0:	f023 0304 	bic.w	r3, r3, #4
 80026e4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d015      	beq.n	800271a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ee:	f7fe fc99 	bl	8001024 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f4:	e00a      	b.n	800270c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f6:	f7fe fc95 	bl	8001024 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002704:	4293      	cmp	r3, r2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e0d8      	b.n	80028be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270c:	4b4c      	ldr	r3, [pc, #304]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0ee      	beq.n	80026f6 <HAL_RCC_OscConfig+0x386>
 8002718:	e014      	b.n	8002744 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271a:	f7fe fc83 	bl	8001024 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002720:	e00a      	b.n	8002738 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002722:	f7fe fc7f 	bl	8001024 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002730:	4293      	cmp	r3, r2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e0c2      	b.n	80028be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002738:	4b41      	ldr	r3, [pc, #260]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1ee      	bne.n	8002722 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002744:	7dfb      	ldrb	r3, [r7, #23]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d105      	bne.n	8002756 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274a:	4b3d      	ldr	r3, [pc, #244]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	4a3c      	ldr	r2, [pc, #240]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 8002750:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002754:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 80ae 	beq.w	80028bc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002760:	4b37      	ldr	r3, [pc, #220]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 030c 	and.w	r3, r3, #12
 8002768:	2b08      	cmp	r3, #8
 800276a:	d06d      	beq.n	8002848 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d14b      	bne.n	800280c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002774:	4b32      	ldr	r3, [pc, #200]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a31      	ldr	r2, [pc, #196]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 800277a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800277e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002780:	f7fe fc50 	bl	8001024 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002788:	f7fe fc4c 	bl	8001024 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e091      	b.n	80028be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279a:	4b29      	ldr	r3, [pc, #164]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69da      	ldr	r2, [r3, #28]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b4:	019b      	lsls	r3, r3, #6
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027bc:	085b      	lsrs	r3, r3, #1
 80027be:	3b01      	subs	r3, #1
 80027c0:	041b      	lsls	r3, r3, #16
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c8:	061b      	lsls	r3, r3, #24
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d0:	071b      	lsls	r3, r3, #28
 80027d2:	491b      	ldr	r1, [pc, #108]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027d8:	4b19      	ldr	r3, [pc, #100]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a18      	ldr	r2, [pc, #96]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 80027de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7fe fc1e 	bl	8001024 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ec:	f7fe fc1a 	bl	8001024 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e05f      	b.n	80028be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fe:	4b10      	ldr	r3, [pc, #64]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0x47c>
 800280a:	e057      	b.n	80028bc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280c:	4b0c      	ldr	r3, [pc, #48]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0b      	ldr	r2, [pc, #44]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 8002812:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7fe fc04 	bl	8001024 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002820:	f7fe fc00 	bl	8001024 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e045      	b.n	80028be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002832:	4b03      	ldr	r3, [pc, #12]	@ (8002840 <HAL_RCC_OscConfig+0x4d0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x4b0>
 800283e:	e03d      	b.n	80028bc <HAL_RCC_OscConfig+0x54c>
 8002840:	40023800 	.word	0x40023800
 8002844:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002848:	4b1f      	ldr	r3, [pc, #124]	@ (80028c8 <HAL_RCC_OscConfig+0x558>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d030      	beq.n	80028b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002860:	429a      	cmp	r2, r3
 8002862:	d129      	bne.n	80028b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286e:	429a      	cmp	r2, r3
 8002870:	d122      	bne.n	80028b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002878:	4013      	ands	r3, r2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800287e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002880:	4293      	cmp	r3, r2
 8002882:	d119      	bne.n	80028b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288e:	085b      	lsrs	r3, r3, #1
 8002890:	3b01      	subs	r3, #1
 8002892:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002894:	429a      	cmp	r2, r3
 8002896:	d10f      	bne.n	80028b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d107      	bne.n	80028b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d001      	beq.n	80028bc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800

080028cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0d0      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 030f 	and.w	r3, r3, #15
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d910      	bls.n	8002914 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b67      	ldr	r3, [pc, #412]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 020f 	bic.w	r2, r3, #15
 80028fa:	4965      	ldr	r1, [pc, #404]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002902:	4b63      	ldr	r3, [pc, #396]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0b8      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d020      	beq.n	8002962 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800292c:	4b59      	ldr	r3, [pc, #356]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	4a58      	ldr	r2, [pc, #352]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002932:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002936:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002944:	4b53      	ldr	r3, [pc, #332]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4a52      	ldr	r2, [pc, #328]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 800294a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800294e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002950:	4b50      	ldr	r3, [pc, #320]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	494d      	ldr	r1, [pc, #308]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 800295e:	4313      	orrs	r3, r2
 8002960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d040      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d107      	bne.n	8002986 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002976:	4b47      	ldr	r3, [pc, #284]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d115      	bne.n	80029ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e07f      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298e:	4b41      	ldr	r3, [pc, #260]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e073      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e06b      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ae:	4b39      	ldr	r3, [pc, #228]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4936      	ldr	r1, [pc, #216]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c0:	f7fe fb30 	bl	8001024 <HAL_GetTick>
 80029c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	e00a      	b.n	80029de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c8:	f7fe fb2c 	bl	8001024 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e053      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	4b2d      	ldr	r3, [pc, #180]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 020c 	and.w	r2, r3, #12
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d1eb      	bne.n	80029c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029f0:	4b27      	ldr	r3, [pc, #156]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d210      	bcs.n	8002a20 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fe:	4b24      	ldr	r3, [pc, #144]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 020f 	bic.w	r2, r3, #15
 8002a06:	4922      	ldr	r1, [pc, #136]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0e:	4b20      	ldr	r3, [pc, #128]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e032      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a2c:	4b19      	ldr	r3, [pc, #100]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4916      	ldr	r1, [pc, #88]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d009      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a4a:	4b12      	ldr	r3, [pc, #72]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	490e      	ldr	r1, [pc, #56]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a5e:	f000 f821 	bl	8002aa4 <HAL_RCC_GetSysClockFreq>
 8002a62:	4602      	mov	r2, r0
 8002a64:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	490a      	ldr	r1, [pc, #40]	@ (8002a98 <HAL_RCC_ClockConfig+0x1cc>)
 8002a70:	5ccb      	ldrb	r3, [r1, r3]
 8002a72:	fa22 f303 	lsr.w	r3, r2, r3
 8002a76:	4a09      	ldr	r2, [pc, #36]	@ (8002a9c <HAL_RCC_ClockConfig+0x1d0>)
 8002a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a7a:	4b09      	ldr	r3, [pc, #36]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1d4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe fa8c 	bl	8000f9c <HAL_InitTick>

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023c00 	.word	0x40023c00
 8002a94:	40023800 	.word	0x40023800
 8002a98:	08006bbc 	.word	0x08006bbc
 8002a9c:	20000008 	.word	0x20000008
 8002aa0:	2000000c 	.word	0x2000000c

08002aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aa8:	b090      	sub	sp, #64	@ 0x40
 8002aaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002abc:	4b59      	ldr	r3, [pc, #356]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d00d      	beq.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	f200 80a1 	bhi.w	8002c10 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d003      	beq.n	8002ade <HAL_RCC_GetSysClockFreq+0x3a>
 8002ad6:	e09b      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ad8:	4b53      	ldr	r3, [pc, #332]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ada:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002adc:	e09b      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ade:	4b53      	ldr	r3, [pc, #332]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ae2:	e098      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ae4:	4b4f      	ldr	r3, [pc, #316]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002aec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002aee:	4b4d      	ldr	r3, [pc, #308]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d028      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afa:	4b4a      	ldr	r3, [pc, #296]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	099b      	lsrs	r3, r3, #6
 8002b00:	2200      	movs	r2, #0
 8002b02:	623b      	str	r3, [r7, #32]
 8002b04:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4b47      	ldr	r3, [pc, #284]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b10:	fb03 f201 	mul.w	r2, r3, r1
 8002b14:	2300      	movs	r3, #0
 8002b16:	fb00 f303 	mul.w	r3, r0, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	4a43      	ldr	r2, [pc, #268]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b1e:	fba0 1202 	umull	r1, r2, r0, r2
 8002b22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b24:	460a      	mov	r2, r1
 8002b26:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002b28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b2a:	4413      	add	r3, r2
 8002b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b30:	2200      	movs	r2, #0
 8002b32:	61bb      	str	r3, [r7, #24]
 8002b34:	61fa      	str	r2, [r7, #28]
 8002b36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b3e:	f7fd fbd7 	bl	80002f0 <__aeabi_uldivmod>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4613      	mov	r3, r2
 8002b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b4a:	e053      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b4c:	4b35      	ldr	r3, [pc, #212]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	099b      	lsrs	r3, r3, #6
 8002b52:	2200      	movs	r2, #0
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	617a      	str	r2, [r7, #20]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b5e:	f04f 0b00 	mov.w	fp, #0
 8002b62:	4652      	mov	r2, sl
 8002b64:	465b      	mov	r3, fp
 8002b66:	f04f 0000 	mov.w	r0, #0
 8002b6a:	f04f 0100 	mov.w	r1, #0
 8002b6e:	0159      	lsls	r1, r3, #5
 8002b70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b74:	0150      	lsls	r0, r2, #5
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	ebb2 080a 	subs.w	r8, r2, sl
 8002b7e:	eb63 090b 	sbc.w	r9, r3, fp
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b96:	ebb2 0408 	subs.w	r4, r2, r8
 8002b9a:	eb63 0509 	sbc.w	r5, r3, r9
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	00eb      	lsls	r3, r5, #3
 8002ba8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bac:	00e2      	lsls	r2, r4, #3
 8002bae:	4614      	mov	r4, r2
 8002bb0:	461d      	mov	r5, r3
 8002bb2:	eb14 030a 	adds.w	r3, r4, sl
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	eb45 030b 	adc.w	r3, r5, fp
 8002bbc:	607b      	str	r3, [r7, #4]
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bca:	4629      	mov	r1, r5
 8002bcc:	028b      	lsls	r3, r1, #10
 8002bce:	4621      	mov	r1, r4
 8002bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bd4:	4621      	mov	r1, r4
 8002bd6:	028a      	lsls	r2, r1, #10
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bde:	2200      	movs	r2, #0
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	60fa      	str	r2, [r7, #12]
 8002be4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002be8:	f7fd fb82 	bl	80002f0 <__aeabi_uldivmod>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	0c1b      	lsrs	r3, r3, #16
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002c04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c0e:	e002      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c10:	4b05      	ldr	r3, [pc, #20]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c12:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3740      	adds	r7, #64	@ 0x40
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800
 8002c28:	00f42400 	.word	0x00f42400
 8002c2c:	017d7840 	.word	0x017d7840

08002c30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c34:	4b03      	ldr	r3, [pc, #12]	@ (8002c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c36:	681b      	ldr	r3, [r3, #0]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000008 	.word	0x20000008

08002c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c4c:	f7ff fff0 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
 8002c50:	4602      	mov	r2, r0
 8002c52:	4b05      	ldr	r3, [pc, #20]	@ (8002c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	0a9b      	lsrs	r3, r3, #10
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	4903      	ldr	r1, [pc, #12]	@ (8002c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c5e:	5ccb      	ldrb	r3, [r1, r3]
 8002c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	08006bcc 	.word	0x08006bcc

08002c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c74:	f7ff ffdc 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	4b05      	ldr	r3, [pc, #20]	@ (8002c90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	0b5b      	lsrs	r3, r3, #13
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	4903      	ldr	r1, [pc, #12]	@ (8002c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c86:	5ccb      	ldrb	r3, [r1, r3]
 8002c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40023800 	.word	0x40023800
 8002c94:	08006bcc 	.word	0x08006bcc

08002c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d012      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002cc0:	4b69      	ldr	r3, [pc, #420]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4a68      	ldr	r2, [pc, #416]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002cca:	6093      	str	r3, [r2, #8]
 8002ccc:	4b66      	ldr	r3, [pc, #408]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd4:	4964      	ldr	r1, [pc, #400]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d017      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cf2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cf8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d00:	4959      	ldr	r1, [pc, #356]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d10:	d101      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d12:	2301      	movs	r3, #1
 8002d14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d017      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d2e:	4b4e      	ldr	r3, [pc, #312]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d34:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3c:	494a      	ldr	r1, [pc, #296]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 808b 	beq.w	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d7c:	4b3a      	ldr	r3, [pc, #232]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d80:	4a39      	ldr	r2, [pc, #228]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d86:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d88:	4b37      	ldr	r3, [pc, #220]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d94:	4b35      	ldr	r3, [pc, #212]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a34      	ldr	r2, [pc, #208]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da0:	f7fe f940 	bl	8001024 <HAL_GetTick>
 8002da4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da8:	f7fe f93c 	bl	8001024 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b64      	cmp	r3, #100	@ 0x64
 8002db4:	d901      	bls.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e38f      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002dba:	4b2c      	ldr	r3, [pc, #176]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dc6:	4b28      	ldr	r3, [pc, #160]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d035      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d02e      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002de4:	4b20      	ldr	r3, [pc, #128]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dee:	4b1e      	ldr	r3, [pc, #120]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df2:	4a1d      	ldr	r2, [pc, #116]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002df8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfe:	4a1a      	ldr	r2, [pc, #104]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e04:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e06:	4a18      	ldr	r2, [pc, #96]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e0c:	4b16      	ldr	r3, [pc, #88]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d114      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe f904 	bl	8001024 <HAL_GetTick>
 8002e1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e20:	f7fe f900 	bl	8001024 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e351      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e36:	4b0c      	ldr	r3, [pc, #48]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0ee      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e4e:	d111      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e50:	4b05      	ldr	r3, [pc, #20]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e5c:	4b04      	ldr	r3, [pc, #16]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e5e:	400b      	ands	r3, r1
 8002e60:	4901      	ldr	r1, [pc, #4]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	608b      	str	r3, [r1, #8]
 8002e66:	e00b      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40007000 	.word	0x40007000
 8002e70:	0ffffcff 	.word	0x0ffffcff
 8002e74:	4bac      	ldr	r3, [pc, #688]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	4aab      	ldr	r2, [pc, #684]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002e7e:	6093      	str	r3, [r2, #8]
 8002e80:	4ba9      	ldr	r3, [pc, #676]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e82:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8c:	49a6      	ldr	r1, [pc, #664]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0310 	and.w	r3, r3, #16
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d010      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e9e:	4ba2      	ldr	r3, [pc, #648]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ea4:	4aa0      	ldr	r2, [pc, #640]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eaa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002eae:	4b9e      	ldr	r3, [pc, #632]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb8:	499b      	ldr	r1, [pc, #620]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00a      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ecc:	4b96      	ldr	r3, [pc, #600]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002eda:	4993      	ldr	r1, [pc, #588]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00a      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002eee:	4b8e      	ldr	r3, [pc, #568]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002efc:	498a      	ldr	r1, [pc, #552]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00a      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f10:	4b85      	ldr	r3, [pc, #532]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f1e:	4982      	ldr	r1, [pc, #520]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f32:	4b7d      	ldr	r3, [pc, #500]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f38:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f40:	4979      	ldr	r1, [pc, #484]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f54:	4b74      	ldr	r3, [pc, #464]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5a:	f023 0203 	bic.w	r2, r3, #3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f62:	4971      	ldr	r1, [pc, #452]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f76:	4b6c      	ldr	r3, [pc, #432]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f7c:	f023 020c 	bic.w	r2, r3, #12
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f84:	4968      	ldr	r1, [pc, #416]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f98:	4b63      	ldr	r3, [pc, #396]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f9e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa6:	4960      	ldr	r1, [pc, #384]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fba:	4b5b      	ldr	r3, [pc, #364]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fc8:	4957      	ldr	r1, [pc, #348]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fdc:	4b52      	ldr	r3, [pc, #328]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fea:	494f      	ldr	r1, [pc, #316]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003004:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300c:	4946      	ldr	r1, [pc, #280]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003020:	4b41      	ldr	r3, [pc, #260]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003026:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302e:	493e      	ldr	r1, [pc, #248]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003042:	4b39      	ldr	r3, [pc, #228]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003048:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003050:	4935      	ldr	r1, [pc, #212]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003064:	4b30      	ldr	r3, [pc, #192]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003072:	492d      	ldr	r1, [pc, #180]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d011      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003086:	4b28      	ldr	r3, [pc, #160]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800308c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003094:	4924      	ldr	r1, [pc, #144]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030a4:	d101      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80030a6:	2301      	movs	r3, #1
 80030a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80030b6:	2301      	movs	r3, #1
 80030b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030c6:	4b18      	ldr	r3, [pc, #96]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030cc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030d4:	4914      	ldr	r1, [pc, #80]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00b      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ee:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030f8:	490b      	ldr	r1, [pc, #44]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00f      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800310c:	4b06      	ldr	r3, [pc, #24]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003112:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800311c:	4902      	ldr	r1, [pc, #8]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800311e:	4313      	orrs	r3, r2
 8003120:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003124:	e002      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003126:	bf00      	nop
 8003128:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00b      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003138:	4b8a      	ldr	r3, [pc, #552]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800313a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800313e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003148:	4986      	ldr	r1, [pc, #536]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00b      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800315c:	4b81      	ldr	r3, [pc, #516]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800315e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003162:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800316c:	497d      	ldr	r1, [pc, #500]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d006      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 80d6 	beq.w	8003334 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003188:	4b76      	ldr	r3, [pc, #472]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a75      	ldr	r2, [pc, #468]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800318e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003192:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003194:	f7fd ff46 	bl	8001024 <HAL_GetTick>
 8003198:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800319c:	f7fd ff42 	bl	8001024 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	@ 0x64
 80031a8:	d901      	bls.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e195      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031ae:	4b6d      	ldr	r3, [pc, #436]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d021      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d11d      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031ce:	4b65      	ldr	r3, [pc, #404]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031d4:	0c1b      	lsrs	r3, r3, #16
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031dc:	4b61      	ldr	r3, [pc, #388]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031e2:	0e1b      	lsrs	r3, r3, #24
 80031e4:	f003 030f 	and.w	r3, r3, #15
 80031e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	019a      	lsls	r2, r3, #6
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	041b      	lsls	r3, r3, #16
 80031f4:	431a      	orrs	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	061b      	lsls	r3, r3, #24
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	071b      	lsls	r3, r3, #28
 8003202:	4958      	ldr	r1, [pc, #352]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d004      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800321a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800321e:	d00a      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003228:	2b00      	cmp	r3, #0
 800322a:	d02e      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003230:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003234:	d129      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003236:	4b4b      	ldr	r3, [pc, #300]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800323c:	0c1b      	lsrs	r3, r3, #16
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003244:	4b47      	ldr	r3, [pc, #284]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003246:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800324a:	0f1b      	lsrs	r3, r3, #28
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	019a      	lsls	r2, r3, #6
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	041b      	lsls	r3, r3, #16
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	061b      	lsls	r3, r3, #24
 8003264:	431a      	orrs	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	071b      	lsls	r3, r3, #28
 800326a:	493e      	ldr	r1, [pc, #248]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800326c:	4313      	orrs	r3, r2
 800326e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003272:	4b3c      	ldr	r3, [pc, #240]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003274:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003278:	f023 021f 	bic.w	r2, r3, #31
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003280:	3b01      	subs	r3, #1
 8003282:	4938      	ldr	r1, [pc, #224]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d01d      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003296:	4b33      	ldr	r3, [pc, #204]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003298:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800329c:	0e1b      	lsrs	r3, r3, #24
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032a4:	4b2f      	ldr	r3, [pc, #188]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032aa:	0f1b      	lsrs	r3, r3, #28
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	019a      	lsls	r2, r3, #6
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	041b      	lsls	r3, r3, #16
 80032be:	431a      	orrs	r2, r3
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	061b      	lsls	r3, r3, #24
 80032c4:	431a      	orrs	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	071b      	lsls	r3, r3, #28
 80032ca:	4926      	ldr	r1, [pc, #152]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d011      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	019a      	lsls	r2, r3, #6
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	041b      	lsls	r3, r3, #16
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	061b      	lsls	r3, r3, #24
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	071b      	lsls	r3, r3, #28
 80032fa:	491a      	ldr	r1, [pc, #104]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003302:	4b18      	ldr	r3, [pc, #96]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a17      	ldr	r2, [pc, #92]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003308:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800330c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800330e:	f7fd fe89 	bl	8001024 <HAL_GetTick>
 8003312:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003314:	e008      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003316:	f7fd fe85 	bl	8001024 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b64      	cmp	r3, #100	@ 0x64
 8003322:	d901      	bls.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e0d8      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003328:	4b0e      	ldr	r3, [pc, #56]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0f0      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	2b01      	cmp	r3, #1
 8003338:	f040 80ce 	bne.w	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800333c:	4b09      	ldr	r3, [pc, #36]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a08      	ldr	r2, [pc, #32]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003342:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003346:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003348:	f7fd fe6c 	bl	8001024 <HAL_GetTick>
 800334c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800334e:	e00b      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003350:	f7fd fe68 	bl	8001024 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	@ 0x64
 800335c:	d904      	bls.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e0bb      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003368:	4b5e      	ldr	r3, [pc, #376]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003370:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003374:	d0ec      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003386:	2b00      	cmp	r3, #0
 8003388:	d009      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003392:	2b00      	cmp	r3, #0
 8003394:	d02e      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d12a      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800339e:	4b51      	ldr	r3, [pc, #324]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033ac:	4b4d      	ldr	r3, [pc, #308]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b2:	0f1b      	lsrs	r3, r3, #28
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	019a      	lsls	r2, r3, #6
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	041b      	lsls	r3, r3, #16
 80033c4:	431a      	orrs	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	061b      	lsls	r3, r3, #24
 80033cc:	431a      	orrs	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	071b      	lsls	r3, r3, #28
 80033d2:	4944      	ldr	r1, [pc, #272]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80033da:	4b42      	ldr	r3, [pc, #264]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033e0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e8:	3b01      	subs	r3, #1
 80033ea:	021b      	lsls	r3, r3, #8
 80033ec:	493d      	ldr	r1, [pc, #244]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d022      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003404:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003408:	d11d      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800340a:	4b36      	ldr	r3, [pc, #216]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800340c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003410:	0e1b      	lsrs	r3, r3, #24
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003418:	4b32      	ldr	r3, [pc, #200]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800341a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341e:	0f1b      	lsrs	r3, r3, #28
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	019a      	lsls	r2, r3, #6
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	041b      	lsls	r3, r3, #16
 8003432:	431a      	orrs	r2, r3
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	061b      	lsls	r3, r3, #24
 8003438:	431a      	orrs	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	071b      	lsls	r3, r3, #28
 800343e:	4929      	ldr	r1, [pc, #164]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003440:	4313      	orrs	r3, r2
 8003442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d028      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003452:	4b24      	ldr	r3, [pc, #144]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003458:	0e1b      	lsrs	r3, r3, #24
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003460:	4b20      	ldr	r3, [pc, #128]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003466:	0c1b      	lsrs	r3, r3, #16
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	019a      	lsls	r2, r3, #6
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	041b      	lsls	r3, r3, #16
 8003478:	431a      	orrs	r2, r3
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	061b      	lsls	r3, r3, #24
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	071b      	lsls	r3, r3, #28
 8003486:	4917      	ldr	r1, [pc, #92]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800348e:	4b15      	ldr	r3, [pc, #84]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003490:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003494:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349c:	4911      	ldr	r1, [pc, #68]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80034a4:	4b0f      	ldr	r3, [pc, #60]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a0e      	ldr	r2, [pc, #56]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b0:	f7fd fdb8 	bl	8001024 <HAL_GetTick>
 80034b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034b8:	f7fd fdb4 	bl	8001024 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b64      	cmp	r3, #100	@ 0x64
 80034c4:	d901      	bls.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e007      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034ca:	4b06      	ldr	r3, [pc, #24]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034d6:	d1ef      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3720      	adds	r7, #32
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800

080034e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e040      	b.n	800357c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fd fcb0 	bl	8000e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2224      	movs	r2, #36	@ 0x24
 8003514:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0201 	bic.w	r2, r2, #1
 8003524:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fb16 	bl	8003b60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f8af 	bl	8003698 <UART_SetConfig>
 800353a:	4603      	mov	r3, r0
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e01b      	b.n	800357c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003552:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003562:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 fb95 	bl	8003ca4 <UART_CheckIdleState>
 800357a:	4603      	mov	r3, r0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08a      	sub	sp, #40	@ 0x28
 8003588:	af02      	add	r7, sp, #8
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	4613      	mov	r3, r2
 8003592:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003598:	2b20      	cmp	r3, #32
 800359a:	d177      	bne.n	800368c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <HAL_UART_Transmit+0x24>
 80035a2:	88fb      	ldrh	r3, [r7, #6]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e070      	b.n	800368e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2221      	movs	r2, #33	@ 0x21
 80035b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035ba:	f7fd fd33 	bl	8001024 <HAL_GetTick>
 80035be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	88fa      	ldrh	r2, [r7, #6]
 80035c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	88fa      	ldrh	r2, [r7, #6]
 80035cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035d8:	d108      	bne.n	80035ec <HAL_UART_Transmit+0x68>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d104      	bne.n	80035ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	61bb      	str	r3, [r7, #24]
 80035ea:	e003      	b.n	80035f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035f4:	e02f      	b.n	8003656 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2200      	movs	r2, #0
 80035fe:	2180      	movs	r1, #128	@ 0x80
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 fbf7 	bl	8003df4 <UART_WaitOnFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d004      	beq.n	8003616 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e03b      	b.n	800368e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10b      	bne.n	8003634 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	461a      	mov	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800362a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	3302      	adds	r3, #2
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	e007      	b.n	8003644 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	781a      	ldrb	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	3301      	adds	r3, #1
 8003642:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800364a:	b29b      	uxth	r3, r3
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1c9      	bne.n	80035f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2200      	movs	r2, #0
 800366a:	2140      	movs	r1, #64	@ 0x40
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 fbc1 	bl	8003df4 <UART_WaitOnFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d004      	beq.n	8003682 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e005      	b.n	800368e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2220      	movs	r2, #32
 8003686:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	e000      	b.n	800368e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800368c:	2302      	movs	r3, #2
  }
}
 800368e:	4618      	mov	r0, r3
 8003690:	3720      	adds	r7, #32
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	4ba6      	ldr	r3, [pc, #664]	@ (800395c <UART_SetConfig+0x2c4>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	6979      	ldr	r1, [r7, #20]
 80036cc:	430b      	orrs	r3, r1
 80036ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	430a      	orrs	r2, r1
 8003708:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a94      	ldr	r2, [pc, #592]	@ (8003960 <UART_SetConfig+0x2c8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d120      	bne.n	8003756 <UART_SetConfig+0xbe>
 8003714:	4b93      	ldr	r3, [pc, #588]	@ (8003964 <UART_SetConfig+0x2cc>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b03      	cmp	r3, #3
 8003720:	d816      	bhi.n	8003750 <UART_SetConfig+0xb8>
 8003722:	a201      	add	r2, pc, #4	@ (adr r2, 8003728 <UART_SetConfig+0x90>)
 8003724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003728:	08003739 	.word	0x08003739
 800372c:	08003745 	.word	0x08003745
 8003730:	0800373f 	.word	0x0800373f
 8003734:	0800374b 	.word	0x0800374b
 8003738:	2301      	movs	r3, #1
 800373a:	77fb      	strb	r3, [r7, #31]
 800373c:	e150      	b.n	80039e0 <UART_SetConfig+0x348>
 800373e:	2302      	movs	r3, #2
 8003740:	77fb      	strb	r3, [r7, #31]
 8003742:	e14d      	b.n	80039e0 <UART_SetConfig+0x348>
 8003744:	2304      	movs	r3, #4
 8003746:	77fb      	strb	r3, [r7, #31]
 8003748:	e14a      	b.n	80039e0 <UART_SetConfig+0x348>
 800374a:	2308      	movs	r3, #8
 800374c:	77fb      	strb	r3, [r7, #31]
 800374e:	e147      	b.n	80039e0 <UART_SetConfig+0x348>
 8003750:	2310      	movs	r3, #16
 8003752:	77fb      	strb	r3, [r7, #31]
 8003754:	e144      	b.n	80039e0 <UART_SetConfig+0x348>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a83      	ldr	r2, [pc, #524]	@ (8003968 <UART_SetConfig+0x2d0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d132      	bne.n	80037c6 <UART_SetConfig+0x12e>
 8003760:	4b80      	ldr	r3, [pc, #512]	@ (8003964 <UART_SetConfig+0x2cc>)
 8003762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003766:	f003 030c 	and.w	r3, r3, #12
 800376a:	2b0c      	cmp	r3, #12
 800376c:	d828      	bhi.n	80037c0 <UART_SetConfig+0x128>
 800376e:	a201      	add	r2, pc, #4	@ (adr r2, 8003774 <UART_SetConfig+0xdc>)
 8003770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003774:	080037a9 	.word	0x080037a9
 8003778:	080037c1 	.word	0x080037c1
 800377c:	080037c1 	.word	0x080037c1
 8003780:	080037c1 	.word	0x080037c1
 8003784:	080037b5 	.word	0x080037b5
 8003788:	080037c1 	.word	0x080037c1
 800378c:	080037c1 	.word	0x080037c1
 8003790:	080037c1 	.word	0x080037c1
 8003794:	080037af 	.word	0x080037af
 8003798:	080037c1 	.word	0x080037c1
 800379c:	080037c1 	.word	0x080037c1
 80037a0:	080037c1 	.word	0x080037c1
 80037a4:	080037bb 	.word	0x080037bb
 80037a8:	2300      	movs	r3, #0
 80037aa:	77fb      	strb	r3, [r7, #31]
 80037ac:	e118      	b.n	80039e0 <UART_SetConfig+0x348>
 80037ae:	2302      	movs	r3, #2
 80037b0:	77fb      	strb	r3, [r7, #31]
 80037b2:	e115      	b.n	80039e0 <UART_SetConfig+0x348>
 80037b4:	2304      	movs	r3, #4
 80037b6:	77fb      	strb	r3, [r7, #31]
 80037b8:	e112      	b.n	80039e0 <UART_SetConfig+0x348>
 80037ba:	2308      	movs	r3, #8
 80037bc:	77fb      	strb	r3, [r7, #31]
 80037be:	e10f      	b.n	80039e0 <UART_SetConfig+0x348>
 80037c0:	2310      	movs	r3, #16
 80037c2:	77fb      	strb	r3, [r7, #31]
 80037c4:	e10c      	b.n	80039e0 <UART_SetConfig+0x348>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a68      	ldr	r2, [pc, #416]	@ (800396c <UART_SetConfig+0x2d4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d120      	bne.n	8003812 <UART_SetConfig+0x17a>
 80037d0:	4b64      	ldr	r3, [pc, #400]	@ (8003964 <UART_SetConfig+0x2cc>)
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80037da:	2b30      	cmp	r3, #48	@ 0x30
 80037dc:	d013      	beq.n	8003806 <UART_SetConfig+0x16e>
 80037de:	2b30      	cmp	r3, #48	@ 0x30
 80037e0:	d814      	bhi.n	800380c <UART_SetConfig+0x174>
 80037e2:	2b20      	cmp	r3, #32
 80037e4:	d009      	beq.n	80037fa <UART_SetConfig+0x162>
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	d810      	bhi.n	800380c <UART_SetConfig+0x174>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <UART_SetConfig+0x15c>
 80037ee:	2b10      	cmp	r3, #16
 80037f0:	d006      	beq.n	8003800 <UART_SetConfig+0x168>
 80037f2:	e00b      	b.n	800380c <UART_SetConfig+0x174>
 80037f4:	2300      	movs	r3, #0
 80037f6:	77fb      	strb	r3, [r7, #31]
 80037f8:	e0f2      	b.n	80039e0 <UART_SetConfig+0x348>
 80037fa:	2302      	movs	r3, #2
 80037fc:	77fb      	strb	r3, [r7, #31]
 80037fe:	e0ef      	b.n	80039e0 <UART_SetConfig+0x348>
 8003800:	2304      	movs	r3, #4
 8003802:	77fb      	strb	r3, [r7, #31]
 8003804:	e0ec      	b.n	80039e0 <UART_SetConfig+0x348>
 8003806:	2308      	movs	r3, #8
 8003808:	77fb      	strb	r3, [r7, #31]
 800380a:	e0e9      	b.n	80039e0 <UART_SetConfig+0x348>
 800380c:	2310      	movs	r3, #16
 800380e:	77fb      	strb	r3, [r7, #31]
 8003810:	e0e6      	b.n	80039e0 <UART_SetConfig+0x348>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a56      	ldr	r2, [pc, #344]	@ (8003970 <UART_SetConfig+0x2d8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d120      	bne.n	800385e <UART_SetConfig+0x1c6>
 800381c:	4b51      	ldr	r3, [pc, #324]	@ (8003964 <UART_SetConfig+0x2cc>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003822:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003826:	2bc0      	cmp	r3, #192	@ 0xc0
 8003828:	d013      	beq.n	8003852 <UART_SetConfig+0x1ba>
 800382a:	2bc0      	cmp	r3, #192	@ 0xc0
 800382c:	d814      	bhi.n	8003858 <UART_SetConfig+0x1c0>
 800382e:	2b80      	cmp	r3, #128	@ 0x80
 8003830:	d009      	beq.n	8003846 <UART_SetConfig+0x1ae>
 8003832:	2b80      	cmp	r3, #128	@ 0x80
 8003834:	d810      	bhi.n	8003858 <UART_SetConfig+0x1c0>
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <UART_SetConfig+0x1a8>
 800383a:	2b40      	cmp	r3, #64	@ 0x40
 800383c:	d006      	beq.n	800384c <UART_SetConfig+0x1b4>
 800383e:	e00b      	b.n	8003858 <UART_SetConfig+0x1c0>
 8003840:	2300      	movs	r3, #0
 8003842:	77fb      	strb	r3, [r7, #31]
 8003844:	e0cc      	b.n	80039e0 <UART_SetConfig+0x348>
 8003846:	2302      	movs	r3, #2
 8003848:	77fb      	strb	r3, [r7, #31]
 800384a:	e0c9      	b.n	80039e0 <UART_SetConfig+0x348>
 800384c:	2304      	movs	r3, #4
 800384e:	77fb      	strb	r3, [r7, #31]
 8003850:	e0c6      	b.n	80039e0 <UART_SetConfig+0x348>
 8003852:	2308      	movs	r3, #8
 8003854:	77fb      	strb	r3, [r7, #31]
 8003856:	e0c3      	b.n	80039e0 <UART_SetConfig+0x348>
 8003858:	2310      	movs	r3, #16
 800385a:	77fb      	strb	r3, [r7, #31]
 800385c:	e0c0      	b.n	80039e0 <UART_SetConfig+0x348>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a44      	ldr	r2, [pc, #272]	@ (8003974 <UART_SetConfig+0x2dc>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d125      	bne.n	80038b4 <UART_SetConfig+0x21c>
 8003868:	4b3e      	ldr	r3, [pc, #248]	@ (8003964 <UART_SetConfig+0x2cc>)
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003872:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003876:	d017      	beq.n	80038a8 <UART_SetConfig+0x210>
 8003878:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800387c:	d817      	bhi.n	80038ae <UART_SetConfig+0x216>
 800387e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003882:	d00b      	beq.n	800389c <UART_SetConfig+0x204>
 8003884:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003888:	d811      	bhi.n	80038ae <UART_SetConfig+0x216>
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <UART_SetConfig+0x1fe>
 800388e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003892:	d006      	beq.n	80038a2 <UART_SetConfig+0x20a>
 8003894:	e00b      	b.n	80038ae <UART_SetConfig+0x216>
 8003896:	2300      	movs	r3, #0
 8003898:	77fb      	strb	r3, [r7, #31]
 800389a:	e0a1      	b.n	80039e0 <UART_SetConfig+0x348>
 800389c:	2302      	movs	r3, #2
 800389e:	77fb      	strb	r3, [r7, #31]
 80038a0:	e09e      	b.n	80039e0 <UART_SetConfig+0x348>
 80038a2:	2304      	movs	r3, #4
 80038a4:	77fb      	strb	r3, [r7, #31]
 80038a6:	e09b      	b.n	80039e0 <UART_SetConfig+0x348>
 80038a8:	2308      	movs	r3, #8
 80038aa:	77fb      	strb	r3, [r7, #31]
 80038ac:	e098      	b.n	80039e0 <UART_SetConfig+0x348>
 80038ae:	2310      	movs	r3, #16
 80038b0:	77fb      	strb	r3, [r7, #31]
 80038b2:	e095      	b.n	80039e0 <UART_SetConfig+0x348>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a2f      	ldr	r2, [pc, #188]	@ (8003978 <UART_SetConfig+0x2e0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d125      	bne.n	800390a <UART_SetConfig+0x272>
 80038be:	4b29      	ldr	r3, [pc, #164]	@ (8003964 <UART_SetConfig+0x2cc>)
 80038c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80038c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038cc:	d017      	beq.n	80038fe <UART_SetConfig+0x266>
 80038ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038d2:	d817      	bhi.n	8003904 <UART_SetConfig+0x26c>
 80038d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038d8:	d00b      	beq.n	80038f2 <UART_SetConfig+0x25a>
 80038da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038de:	d811      	bhi.n	8003904 <UART_SetConfig+0x26c>
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <UART_SetConfig+0x254>
 80038e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038e8:	d006      	beq.n	80038f8 <UART_SetConfig+0x260>
 80038ea:	e00b      	b.n	8003904 <UART_SetConfig+0x26c>
 80038ec:	2301      	movs	r3, #1
 80038ee:	77fb      	strb	r3, [r7, #31]
 80038f0:	e076      	b.n	80039e0 <UART_SetConfig+0x348>
 80038f2:	2302      	movs	r3, #2
 80038f4:	77fb      	strb	r3, [r7, #31]
 80038f6:	e073      	b.n	80039e0 <UART_SetConfig+0x348>
 80038f8:	2304      	movs	r3, #4
 80038fa:	77fb      	strb	r3, [r7, #31]
 80038fc:	e070      	b.n	80039e0 <UART_SetConfig+0x348>
 80038fe:	2308      	movs	r3, #8
 8003900:	77fb      	strb	r3, [r7, #31]
 8003902:	e06d      	b.n	80039e0 <UART_SetConfig+0x348>
 8003904:	2310      	movs	r3, #16
 8003906:	77fb      	strb	r3, [r7, #31]
 8003908:	e06a      	b.n	80039e0 <UART_SetConfig+0x348>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a1b      	ldr	r2, [pc, #108]	@ (800397c <UART_SetConfig+0x2e4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d138      	bne.n	8003986 <UART_SetConfig+0x2ee>
 8003914:	4b13      	ldr	r3, [pc, #76]	@ (8003964 <UART_SetConfig+0x2cc>)
 8003916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800391a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800391e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003922:	d017      	beq.n	8003954 <UART_SetConfig+0x2bc>
 8003924:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003928:	d82a      	bhi.n	8003980 <UART_SetConfig+0x2e8>
 800392a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800392e:	d00b      	beq.n	8003948 <UART_SetConfig+0x2b0>
 8003930:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003934:	d824      	bhi.n	8003980 <UART_SetConfig+0x2e8>
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <UART_SetConfig+0x2aa>
 800393a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800393e:	d006      	beq.n	800394e <UART_SetConfig+0x2b6>
 8003940:	e01e      	b.n	8003980 <UART_SetConfig+0x2e8>
 8003942:	2300      	movs	r3, #0
 8003944:	77fb      	strb	r3, [r7, #31]
 8003946:	e04b      	b.n	80039e0 <UART_SetConfig+0x348>
 8003948:	2302      	movs	r3, #2
 800394a:	77fb      	strb	r3, [r7, #31]
 800394c:	e048      	b.n	80039e0 <UART_SetConfig+0x348>
 800394e:	2304      	movs	r3, #4
 8003950:	77fb      	strb	r3, [r7, #31]
 8003952:	e045      	b.n	80039e0 <UART_SetConfig+0x348>
 8003954:	2308      	movs	r3, #8
 8003956:	77fb      	strb	r3, [r7, #31]
 8003958:	e042      	b.n	80039e0 <UART_SetConfig+0x348>
 800395a:	bf00      	nop
 800395c:	efff69f3 	.word	0xefff69f3
 8003960:	40011000 	.word	0x40011000
 8003964:	40023800 	.word	0x40023800
 8003968:	40004400 	.word	0x40004400
 800396c:	40004800 	.word	0x40004800
 8003970:	40004c00 	.word	0x40004c00
 8003974:	40005000 	.word	0x40005000
 8003978:	40011400 	.word	0x40011400
 800397c:	40007800 	.word	0x40007800
 8003980:	2310      	movs	r3, #16
 8003982:	77fb      	strb	r3, [r7, #31]
 8003984:	e02c      	b.n	80039e0 <UART_SetConfig+0x348>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a72      	ldr	r2, [pc, #456]	@ (8003b54 <UART_SetConfig+0x4bc>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d125      	bne.n	80039dc <UART_SetConfig+0x344>
 8003990:	4b71      	ldr	r3, [pc, #452]	@ (8003b58 <UART_SetConfig+0x4c0>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003996:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800399a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800399e:	d017      	beq.n	80039d0 <UART_SetConfig+0x338>
 80039a0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80039a4:	d817      	bhi.n	80039d6 <UART_SetConfig+0x33e>
 80039a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039aa:	d00b      	beq.n	80039c4 <UART_SetConfig+0x32c>
 80039ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039b0:	d811      	bhi.n	80039d6 <UART_SetConfig+0x33e>
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <UART_SetConfig+0x326>
 80039b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039ba:	d006      	beq.n	80039ca <UART_SetConfig+0x332>
 80039bc:	e00b      	b.n	80039d6 <UART_SetConfig+0x33e>
 80039be:	2300      	movs	r3, #0
 80039c0:	77fb      	strb	r3, [r7, #31]
 80039c2:	e00d      	b.n	80039e0 <UART_SetConfig+0x348>
 80039c4:	2302      	movs	r3, #2
 80039c6:	77fb      	strb	r3, [r7, #31]
 80039c8:	e00a      	b.n	80039e0 <UART_SetConfig+0x348>
 80039ca:	2304      	movs	r3, #4
 80039cc:	77fb      	strb	r3, [r7, #31]
 80039ce:	e007      	b.n	80039e0 <UART_SetConfig+0x348>
 80039d0:	2308      	movs	r3, #8
 80039d2:	77fb      	strb	r3, [r7, #31]
 80039d4:	e004      	b.n	80039e0 <UART_SetConfig+0x348>
 80039d6:	2310      	movs	r3, #16
 80039d8:	77fb      	strb	r3, [r7, #31]
 80039da:	e001      	b.n	80039e0 <UART_SetConfig+0x348>
 80039dc:	2310      	movs	r3, #16
 80039de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039e8:	d15b      	bne.n	8003aa2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80039ea:	7ffb      	ldrb	r3, [r7, #31]
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d828      	bhi.n	8003a42 <UART_SetConfig+0x3aa>
 80039f0:	a201      	add	r2, pc, #4	@ (adr r2, 80039f8 <UART_SetConfig+0x360>)
 80039f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f6:	bf00      	nop
 80039f8:	08003a1d 	.word	0x08003a1d
 80039fc:	08003a25 	.word	0x08003a25
 8003a00:	08003a2d 	.word	0x08003a2d
 8003a04:	08003a43 	.word	0x08003a43
 8003a08:	08003a33 	.word	0x08003a33
 8003a0c:	08003a43 	.word	0x08003a43
 8003a10:	08003a43 	.word	0x08003a43
 8003a14:	08003a43 	.word	0x08003a43
 8003a18:	08003a3b 	.word	0x08003a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a1c:	f7ff f914 	bl	8002c48 <HAL_RCC_GetPCLK1Freq>
 8003a20:	61b8      	str	r0, [r7, #24]
        break;
 8003a22:	e013      	b.n	8003a4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a24:	f7ff f924 	bl	8002c70 <HAL_RCC_GetPCLK2Freq>
 8003a28:	61b8      	str	r0, [r7, #24]
        break;
 8003a2a:	e00f      	b.n	8003a4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a2c:	4b4b      	ldr	r3, [pc, #300]	@ (8003b5c <UART_SetConfig+0x4c4>)
 8003a2e:	61bb      	str	r3, [r7, #24]
        break;
 8003a30:	e00c      	b.n	8003a4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a32:	f7ff f837 	bl	8002aa4 <HAL_RCC_GetSysClockFreq>
 8003a36:	61b8      	str	r0, [r7, #24]
        break;
 8003a38:	e008      	b.n	8003a4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a3e:	61bb      	str	r3, [r7, #24]
        break;
 8003a40:	e004      	b.n	8003a4c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	77bb      	strb	r3, [r7, #30]
        break;
 8003a4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d074      	beq.n	8003b3c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	005a      	lsls	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	085b      	lsrs	r3, r3, #1
 8003a5c:	441a      	add	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	2b0f      	cmp	r3, #15
 8003a6c:	d916      	bls.n	8003a9c <UART_SetConfig+0x404>
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a74:	d212      	bcs.n	8003a9c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	f023 030f 	bic.w	r3, r3, #15
 8003a7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	085b      	lsrs	r3, r3, #1
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	89fb      	ldrh	r3, [r7, #14]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	89fa      	ldrh	r2, [r7, #14]
 8003a98:	60da      	str	r2, [r3, #12]
 8003a9a:	e04f      	b.n	8003b3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	77bb      	strb	r3, [r7, #30]
 8003aa0:	e04c      	b.n	8003b3c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003aa2:	7ffb      	ldrb	r3, [r7, #31]
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d828      	bhi.n	8003afa <UART_SetConfig+0x462>
 8003aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ab0 <UART_SetConfig+0x418>)
 8003aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aae:	bf00      	nop
 8003ab0:	08003ad5 	.word	0x08003ad5
 8003ab4:	08003add 	.word	0x08003add
 8003ab8:	08003ae5 	.word	0x08003ae5
 8003abc:	08003afb 	.word	0x08003afb
 8003ac0:	08003aeb 	.word	0x08003aeb
 8003ac4:	08003afb 	.word	0x08003afb
 8003ac8:	08003afb 	.word	0x08003afb
 8003acc:	08003afb 	.word	0x08003afb
 8003ad0:	08003af3 	.word	0x08003af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ad4:	f7ff f8b8 	bl	8002c48 <HAL_RCC_GetPCLK1Freq>
 8003ad8:	61b8      	str	r0, [r7, #24]
        break;
 8003ada:	e013      	b.n	8003b04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003adc:	f7ff f8c8 	bl	8002c70 <HAL_RCC_GetPCLK2Freq>
 8003ae0:	61b8      	str	r0, [r7, #24]
        break;
 8003ae2:	e00f      	b.n	8003b04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b5c <UART_SetConfig+0x4c4>)
 8003ae6:	61bb      	str	r3, [r7, #24]
        break;
 8003ae8:	e00c      	b.n	8003b04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aea:	f7fe ffdb 	bl	8002aa4 <HAL_RCC_GetSysClockFreq>
 8003aee:	61b8      	str	r0, [r7, #24]
        break;
 8003af0:	e008      	b.n	8003b04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003af2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003af6:	61bb      	str	r3, [r7, #24]
        break;
 8003af8:	e004      	b.n	8003b04 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	77bb      	strb	r3, [r7, #30]
        break;
 8003b02:	bf00      	nop
    }

    if (pclk != 0U)
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d018      	beq.n	8003b3c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	085a      	lsrs	r2, r3, #1
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	441a      	add	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	2b0f      	cmp	r3, #15
 8003b22:	d909      	bls.n	8003b38 <UART_SetConfig+0x4a0>
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b2a:	d205      	bcs.n	8003b38 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60da      	str	r2, [r3, #12]
 8003b36:	e001      	b.n	8003b3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b48:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3720      	adds	r7, #32
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40007c00 	.word	0x40007c00
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	00f42400 	.word	0x00f42400

08003b60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6c:	f003 0308 	and.w	r3, r3, #8
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00a      	beq.n	8003b8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d01a      	beq.n	8003c76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c5e:	d10a      	bne.n	8003c76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	605a      	str	r2, [r3, #4]
  }
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b098      	sub	sp, #96	@ 0x60
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cb4:	f7fd f9b6 	bl	8001024 <HAL_GetTick>
 8003cb8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d12e      	bne.n	8003d26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f88c 	bl	8003df4 <UART_WaitOnFlagUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d021      	beq.n	8003d26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cea:	e853 3f00 	ldrex	r3, [r3]
 8003cee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cf6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d00:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d02:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d08:	e841 2300 	strex	r3, r2, [r1]
 8003d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1e6      	bne.n	8003ce2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e062      	b.n	8003dec <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d149      	bne.n	8003dc8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f856 	bl	8003df4 <UART_WaitOnFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d03c      	beq.n	8003dc8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d56:	e853 3f00 	ldrex	r3, [r3]
 8003d5a:	623b      	str	r3, [r7, #32]
   return(result);
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d74:	e841 2300 	strex	r3, r2, [r1]
 8003d78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1e6      	bne.n	8003d4e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3308      	adds	r3, #8
 8003d86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0301 	bic.w	r3, r3, #1
 8003d96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3308      	adds	r3, #8
 8003d9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003da0:	61fa      	str	r2, [r7, #28]
 8003da2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	69b9      	ldr	r1, [r7, #24]
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	e841 2300 	strex	r3, r2, [r1]
 8003dac:	617b      	str	r3, [r7, #20]
   return(result);
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e5      	bne.n	8003d80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e011      	b.n	8003dec <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3758      	adds	r7, #88	@ 0x58
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	4613      	mov	r3, r2
 8003e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e04:	e04f      	b.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0c:	d04b      	beq.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e0e:	f7fd f909 	bl	8001024 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d302      	bcc.n	8003e24 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e04e      	b.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d037      	beq.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b80      	cmp	r3, #128	@ 0x80
 8003e3a:	d034      	beq.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b40      	cmp	r3, #64	@ 0x40
 8003e40:	d031      	beq.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d110      	bne.n	8003e72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2208      	movs	r2, #8
 8003e56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 f838 	bl	8003ece <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2208      	movs	r2, #8
 8003e62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e029      	b.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e80:	d111      	bne.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f81e 	bl	8003ece <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e00f      	b.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69da      	ldr	r2, [r3, #28]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	bf0c      	ite	eq
 8003eb6:	2301      	moveq	r3, #1
 8003eb8:	2300      	movne	r3, #0
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d0a0      	beq.n	8003e06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b095      	sub	sp, #84	@ 0x54
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ede:	e853 3f00 	ldrex	r3, [r3]
 8003ee2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ef4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ef6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003efa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003efc:	e841 2300 	strex	r3, r2, [r1]
 8003f00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1e6      	bne.n	8003ed6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	e853 3f00 	ldrex	r3, [r3]
 8003f16:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f023 0301 	bic.w	r3, r3, #1
 8003f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3308      	adds	r3, #8
 8003f26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f30:	e841 2300 	strex	r3, r2, [r1]
 8003f34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1e5      	bne.n	8003f08 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d118      	bne.n	8003f76 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	e853 3f00 	ldrex	r3, [r3]
 8003f50:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	f023 0310 	bic.w	r3, r3, #16
 8003f58:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f62:	61bb      	str	r3, [r7, #24]
 8003f64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f66:	6979      	ldr	r1, [r7, #20]
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	e841 2300 	strex	r3, r2, [r1]
 8003f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1e6      	bne.n	8003f44 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f8a:	bf00      	nop
 8003f8c:	3754      	adds	r7, #84	@ 0x54
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <__cvt>:
 8003f96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f98:	ed2d 8b02 	vpush	{d8}
 8003f9c:	eeb0 8b40 	vmov.f64	d8, d0
 8003fa0:	b085      	sub	sp, #20
 8003fa2:	4617      	mov	r7, r2
 8003fa4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8003fa6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003fa8:	ee18 2a90 	vmov	r2, s17
 8003fac:	f025 0520 	bic.w	r5, r5, #32
 8003fb0:	2a00      	cmp	r2, #0
 8003fb2:	bfb6      	itet	lt
 8003fb4:	222d      	movlt	r2, #45	@ 0x2d
 8003fb6:	2200      	movge	r2, #0
 8003fb8:	eeb1 8b40 	vneglt.f64	d8, d0
 8003fbc:	2d46      	cmp	r5, #70	@ 0x46
 8003fbe:	460c      	mov	r4, r1
 8003fc0:	701a      	strb	r2, [r3, #0]
 8003fc2:	d004      	beq.n	8003fce <__cvt+0x38>
 8003fc4:	2d45      	cmp	r5, #69	@ 0x45
 8003fc6:	d100      	bne.n	8003fca <__cvt+0x34>
 8003fc8:	3401      	adds	r4, #1
 8003fca:	2102      	movs	r1, #2
 8003fcc:	e000      	b.n	8003fd0 <__cvt+0x3a>
 8003fce:	2103      	movs	r1, #3
 8003fd0:	ab03      	add	r3, sp, #12
 8003fd2:	9301      	str	r3, [sp, #4]
 8003fd4:	ab02      	add	r3, sp, #8
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	4622      	mov	r2, r4
 8003fda:	4633      	mov	r3, r6
 8003fdc:	eeb0 0b48 	vmov.f64	d0, d8
 8003fe0:	f000 fe42 	bl	8004c68 <_dtoa_r>
 8003fe4:	2d47      	cmp	r5, #71	@ 0x47
 8003fe6:	d114      	bne.n	8004012 <__cvt+0x7c>
 8003fe8:	07fb      	lsls	r3, r7, #31
 8003fea:	d50a      	bpl.n	8004002 <__cvt+0x6c>
 8003fec:	1902      	adds	r2, r0, r4
 8003fee:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff6:	bf08      	it	eq
 8003ff8:	9203      	streq	r2, [sp, #12]
 8003ffa:	2130      	movs	r1, #48	@ 0x30
 8003ffc:	9b03      	ldr	r3, [sp, #12]
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d319      	bcc.n	8004036 <__cvt+0xa0>
 8004002:	9b03      	ldr	r3, [sp, #12]
 8004004:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004006:	1a1b      	subs	r3, r3, r0
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	b005      	add	sp, #20
 800400c:	ecbd 8b02 	vpop	{d8}
 8004010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004012:	2d46      	cmp	r5, #70	@ 0x46
 8004014:	eb00 0204 	add.w	r2, r0, r4
 8004018:	d1e9      	bne.n	8003fee <__cvt+0x58>
 800401a:	7803      	ldrb	r3, [r0, #0]
 800401c:	2b30      	cmp	r3, #48	@ 0x30
 800401e:	d107      	bne.n	8004030 <__cvt+0x9a>
 8004020:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004028:	bf1c      	itt	ne
 800402a:	f1c4 0401 	rsbne	r4, r4, #1
 800402e:	6034      	strne	r4, [r6, #0]
 8004030:	6833      	ldr	r3, [r6, #0]
 8004032:	441a      	add	r2, r3
 8004034:	e7db      	b.n	8003fee <__cvt+0x58>
 8004036:	1c5c      	adds	r4, r3, #1
 8004038:	9403      	str	r4, [sp, #12]
 800403a:	7019      	strb	r1, [r3, #0]
 800403c:	e7de      	b.n	8003ffc <__cvt+0x66>

0800403e <__exponent>:
 800403e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004040:	2900      	cmp	r1, #0
 8004042:	bfba      	itte	lt
 8004044:	4249      	neglt	r1, r1
 8004046:	232d      	movlt	r3, #45	@ 0x2d
 8004048:	232b      	movge	r3, #43	@ 0x2b
 800404a:	2909      	cmp	r1, #9
 800404c:	7002      	strb	r2, [r0, #0]
 800404e:	7043      	strb	r3, [r0, #1]
 8004050:	dd29      	ble.n	80040a6 <__exponent+0x68>
 8004052:	f10d 0307 	add.w	r3, sp, #7
 8004056:	461d      	mov	r5, r3
 8004058:	270a      	movs	r7, #10
 800405a:	461a      	mov	r2, r3
 800405c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004060:	fb07 1416 	mls	r4, r7, r6, r1
 8004064:	3430      	adds	r4, #48	@ 0x30
 8004066:	f802 4c01 	strb.w	r4, [r2, #-1]
 800406a:	460c      	mov	r4, r1
 800406c:	2c63      	cmp	r4, #99	@ 0x63
 800406e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004072:	4631      	mov	r1, r6
 8004074:	dcf1      	bgt.n	800405a <__exponent+0x1c>
 8004076:	3130      	adds	r1, #48	@ 0x30
 8004078:	1e94      	subs	r4, r2, #2
 800407a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800407e:	1c41      	adds	r1, r0, #1
 8004080:	4623      	mov	r3, r4
 8004082:	42ab      	cmp	r3, r5
 8004084:	d30a      	bcc.n	800409c <__exponent+0x5e>
 8004086:	f10d 0309 	add.w	r3, sp, #9
 800408a:	1a9b      	subs	r3, r3, r2
 800408c:	42ac      	cmp	r4, r5
 800408e:	bf88      	it	hi
 8004090:	2300      	movhi	r3, #0
 8004092:	3302      	adds	r3, #2
 8004094:	4403      	add	r3, r0
 8004096:	1a18      	subs	r0, r3, r0
 8004098:	b003      	add	sp, #12
 800409a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800409c:	f813 6b01 	ldrb.w	r6, [r3], #1
 80040a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80040a4:	e7ed      	b.n	8004082 <__exponent+0x44>
 80040a6:	2330      	movs	r3, #48	@ 0x30
 80040a8:	3130      	adds	r1, #48	@ 0x30
 80040aa:	7083      	strb	r3, [r0, #2]
 80040ac:	70c1      	strb	r1, [r0, #3]
 80040ae:	1d03      	adds	r3, r0, #4
 80040b0:	e7f1      	b.n	8004096 <__exponent+0x58>
 80040b2:	0000      	movs	r0, r0
 80040b4:	0000      	movs	r0, r0
	...

080040b8 <_printf_float>:
 80040b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040bc:	b08d      	sub	sp, #52	@ 0x34
 80040be:	460c      	mov	r4, r1
 80040c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80040c4:	4616      	mov	r6, r2
 80040c6:	461f      	mov	r7, r3
 80040c8:	4605      	mov	r5, r0
 80040ca:	f000 fccb 	bl	8004a64 <_localeconv_r>
 80040ce:	f8d0 b000 	ldr.w	fp, [r0]
 80040d2:	4658      	mov	r0, fp
 80040d4:	f7fc f904 	bl	80002e0 <strlen>
 80040d8:	2300      	movs	r3, #0
 80040da:	930a      	str	r3, [sp, #40]	@ 0x28
 80040dc:	f8d8 3000 	ldr.w	r3, [r8]
 80040e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80040e4:	6822      	ldr	r2, [r4, #0]
 80040e6:	9005      	str	r0, [sp, #20]
 80040e8:	3307      	adds	r3, #7
 80040ea:	f023 0307 	bic.w	r3, r3, #7
 80040ee:	f103 0108 	add.w	r1, r3, #8
 80040f2:	f8c8 1000 	str.w	r1, [r8]
 80040f6:	ed93 0b00 	vldr	d0, [r3]
 80040fa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8004358 <_printf_float+0x2a0>
 80040fe:	eeb0 7bc0 	vabs.f64	d7, d0
 8004102:	eeb4 7b46 	vcmp.f64	d7, d6
 8004106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800410a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800410e:	dd24      	ble.n	800415a <_printf_float+0xa2>
 8004110:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004118:	d502      	bpl.n	8004120 <_printf_float+0x68>
 800411a:	232d      	movs	r3, #45	@ 0x2d
 800411c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004120:	498f      	ldr	r1, [pc, #572]	@ (8004360 <_printf_float+0x2a8>)
 8004122:	4b90      	ldr	r3, [pc, #576]	@ (8004364 <_printf_float+0x2ac>)
 8004124:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8004128:	bf94      	ite	ls
 800412a:	4688      	movls	r8, r1
 800412c:	4698      	movhi	r8, r3
 800412e:	f022 0204 	bic.w	r2, r2, #4
 8004132:	2303      	movs	r3, #3
 8004134:	6123      	str	r3, [r4, #16]
 8004136:	6022      	str	r2, [r4, #0]
 8004138:	f04f 0a00 	mov.w	sl, #0
 800413c:	9700      	str	r7, [sp, #0]
 800413e:	4633      	mov	r3, r6
 8004140:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004142:	4621      	mov	r1, r4
 8004144:	4628      	mov	r0, r5
 8004146:	f000 f9d1 	bl	80044ec <_printf_common>
 800414a:	3001      	adds	r0, #1
 800414c:	f040 8089 	bne.w	8004262 <_printf_float+0x1aa>
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	b00d      	add	sp, #52	@ 0x34
 8004156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800415a:	eeb4 0b40 	vcmp.f64	d0, d0
 800415e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004162:	d709      	bvc.n	8004178 <_printf_float+0xc0>
 8004164:	ee10 3a90 	vmov	r3, s1
 8004168:	2b00      	cmp	r3, #0
 800416a:	bfbc      	itt	lt
 800416c:	232d      	movlt	r3, #45	@ 0x2d
 800416e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004172:	497d      	ldr	r1, [pc, #500]	@ (8004368 <_printf_float+0x2b0>)
 8004174:	4b7d      	ldr	r3, [pc, #500]	@ (800436c <_printf_float+0x2b4>)
 8004176:	e7d5      	b.n	8004124 <_printf_float+0x6c>
 8004178:	6863      	ldr	r3, [r4, #4]
 800417a:	1c59      	adds	r1, r3, #1
 800417c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8004180:	d139      	bne.n	80041f6 <_printf_float+0x13e>
 8004182:	2306      	movs	r3, #6
 8004184:	6063      	str	r3, [r4, #4]
 8004186:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800418a:	2300      	movs	r3, #0
 800418c:	6022      	str	r2, [r4, #0]
 800418e:	9303      	str	r3, [sp, #12]
 8004190:	ab0a      	add	r3, sp, #40	@ 0x28
 8004192:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004196:	ab09      	add	r3, sp, #36	@ 0x24
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	6861      	ldr	r1, [r4, #4]
 800419c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80041a0:	4628      	mov	r0, r5
 80041a2:	f7ff fef8 	bl	8003f96 <__cvt>
 80041a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80041aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80041ac:	4680      	mov	r8, r0
 80041ae:	d129      	bne.n	8004204 <_printf_float+0x14c>
 80041b0:	1cc8      	adds	r0, r1, #3
 80041b2:	db02      	blt.n	80041ba <_printf_float+0x102>
 80041b4:	6863      	ldr	r3, [r4, #4]
 80041b6:	4299      	cmp	r1, r3
 80041b8:	dd41      	ble.n	800423e <_printf_float+0x186>
 80041ba:	f1a9 0902 	sub.w	r9, r9, #2
 80041be:	fa5f f989 	uxtb.w	r9, r9
 80041c2:	3901      	subs	r1, #1
 80041c4:	464a      	mov	r2, r9
 80041c6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80041ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80041cc:	f7ff ff37 	bl	800403e <__exponent>
 80041d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80041d2:	1813      	adds	r3, r2, r0
 80041d4:	2a01      	cmp	r2, #1
 80041d6:	4682      	mov	sl, r0
 80041d8:	6123      	str	r3, [r4, #16]
 80041da:	dc02      	bgt.n	80041e2 <_printf_float+0x12a>
 80041dc:	6822      	ldr	r2, [r4, #0]
 80041de:	07d2      	lsls	r2, r2, #31
 80041e0:	d501      	bpl.n	80041e6 <_printf_float+0x12e>
 80041e2:	3301      	adds	r3, #1
 80041e4:	6123      	str	r3, [r4, #16]
 80041e6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0a6      	beq.n	800413c <_printf_float+0x84>
 80041ee:	232d      	movs	r3, #45	@ 0x2d
 80041f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041f4:	e7a2      	b.n	800413c <_printf_float+0x84>
 80041f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80041fa:	d1c4      	bne.n	8004186 <_printf_float+0xce>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1c2      	bne.n	8004186 <_printf_float+0xce>
 8004200:	2301      	movs	r3, #1
 8004202:	e7bf      	b.n	8004184 <_printf_float+0xcc>
 8004204:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004208:	d9db      	bls.n	80041c2 <_printf_float+0x10a>
 800420a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800420e:	d118      	bne.n	8004242 <_printf_float+0x18a>
 8004210:	2900      	cmp	r1, #0
 8004212:	6863      	ldr	r3, [r4, #4]
 8004214:	dd0b      	ble.n	800422e <_printf_float+0x176>
 8004216:	6121      	str	r1, [r4, #16]
 8004218:	b913      	cbnz	r3, 8004220 <_printf_float+0x168>
 800421a:	6822      	ldr	r2, [r4, #0]
 800421c:	07d0      	lsls	r0, r2, #31
 800421e:	d502      	bpl.n	8004226 <_printf_float+0x16e>
 8004220:	3301      	adds	r3, #1
 8004222:	440b      	add	r3, r1
 8004224:	6123      	str	r3, [r4, #16]
 8004226:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004228:	f04f 0a00 	mov.w	sl, #0
 800422c:	e7db      	b.n	80041e6 <_printf_float+0x12e>
 800422e:	b913      	cbnz	r3, 8004236 <_printf_float+0x17e>
 8004230:	6822      	ldr	r2, [r4, #0]
 8004232:	07d2      	lsls	r2, r2, #31
 8004234:	d501      	bpl.n	800423a <_printf_float+0x182>
 8004236:	3302      	adds	r3, #2
 8004238:	e7f4      	b.n	8004224 <_printf_float+0x16c>
 800423a:	2301      	movs	r3, #1
 800423c:	e7f2      	b.n	8004224 <_printf_float+0x16c>
 800423e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8004242:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004244:	4299      	cmp	r1, r3
 8004246:	db05      	blt.n	8004254 <_printf_float+0x19c>
 8004248:	6823      	ldr	r3, [r4, #0]
 800424a:	6121      	str	r1, [r4, #16]
 800424c:	07d8      	lsls	r0, r3, #31
 800424e:	d5ea      	bpl.n	8004226 <_printf_float+0x16e>
 8004250:	1c4b      	adds	r3, r1, #1
 8004252:	e7e7      	b.n	8004224 <_printf_float+0x16c>
 8004254:	2900      	cmp	r1, #0
 8004256:	bfd4      	ite	le
 8004258:	f1c1 0202 	rsble	r2, r1, #2
 800425c:	2201      	movgt	r2, #1
 800425e:	4413      	add	r3, r2
 8004260:	e7e0      	b.n	8004224 <_printf_float+0x16c>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	055a      	lsls	r2, r3, #21
 8004266:	d407      	bmi.n	8004278 <_printf_float+0x1c0>
 8004268:	6923      	ldr	r3, [r4, #16]
 800426a:	4642      	mov	r2, r8
 800426c:	4631      	mov	r1, r6
 800426e:	4628      	mov	r0, r5
 8004270:	47b8      	blx	r7
 8004272:	3001      	adds	r0, #1
 8004274:	d12a      	bne.n	80042cc <_printf_float+0x214>
 8004276:	e76b      	b.n	8004150 <_printf_float+0x98>
 8004278:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800427c:	f240 80e0 	bls.w	8004440 <_printf_float+0x388>
 8004280:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004284:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800428c:	d133      	bne.n	80042f6 <_printf_float+0x23e>
 800428e:	4a38      	ldr	r2, [pc, #224]	@ (8004370 <_printf_float+0x2b8>)
 8004290:	2301      	movs	r3, #1
 8004292:	4631      	mov	r1, r6
 8004294:	4628      	mov	r0, r5
 8004296:	47b8      	blx	r7
 8004298:	3001      	adds	r0, #1
 800429a:	f43f af59 	beq.w	8004150 <_printf_float+0x98>
 800429e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80042a2:	4543      	cmp	r3, r8
 80042a4:	db02      	blt.n	80042ac <_printf_float+0x1f4>
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	07d8      	lsls	r0, r3, #31
 80042aa:	d50f      	bpl.n	80042cc <_printf_float+0x214>
 80042ac:	9b05      	ldr	r3, [sp, #20]
 80042ae:	465a      	mov	r2, fp
 80042b0:	4631      	mov	r1, r6
 80042b2:	4628      	mov	r0, r5
 80042b4:	47b8      	blx	r7
 80042b6:	3001      	adds	r0, #1
 80042b8:	f43f af4a 	beq.w	8004150 <_printf_float+0x98>
 80042bc:	f04f 0900 	mov.w	r9, #0
 80042c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80042c4:	f104 0a1a 	add.w	sl, r4, #26
 80042c8:	45c8      	cmp	r8, r9
 80042ca:	dc09      	bgt.n	80042e0 <_printf_float+0x228>
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	079b      	lsls	r3, r3, #30
 80042d0:	f100 8107 	bmi.w	80044e2 <_printf_float+0x42a>
 80042d4:	68e0      	ldr	r0, [r4, #12]
 80042d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80042d8:	4298      	cmp	r0, r3
 80042da:	bfb8      	it	lt
 80042dc:	4618      	movlt	r0, r3
 80042de:	e739      	b.n	8004154 <_printf_float+0x9c>
 80042e0:	2301      	movs	r3, #1
 80042e2:	4652      	mov	r2, sl
 80042e4:	4631      	mov	r1, r6
 80042e6:	4628      	mov	r0, r5
 80042e8:	47b8      	blx	r7
 80042ea:	3001      	adds	r0, #1
 80042ec:	f43f af30 	beq.w	8004150 <_printf_float+0x98>
 80042f0:	f109 0901 	add.w	r9, r9, #1
 80042f4:	e7e8      	b.n	80042c8 <_printf_float+0x210>
 80042f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	dc3b      	bgt.n	8004374 <_printf_float+0x2bc>
 80042fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004370 <_printf_float+0x2b8>)
 80042fe:	2301      	movs	r3, #1
 8004300:	4631      	mov	r1, r6
 8004302:	4628      	mov	r0, r5
 8004304:	47b8      	blx	r7
 8004306:	3001      	adds	r0, #1
 8004308:	f43f af22 	beq.w	8004150 <_printf_float+0x98>
 800430c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004310:	ea59 0303 	orrs.w	r3, r9, r3
 8004314:	d102      	bne.n	800431c <_printf_float+0x264>
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	07d9      	lsls	r1, r3, #31
 800431a:	d5d7      	bpl.n	80042cc <_printf_float+0x214>
 800431c:	9b05      	ldr	r3, [sp, #20]
 800431e:	465a      	mov	r2, fp
 8004320:	4631      	mov	r1, r6
 8004322:	4628      	mov	r0, r5
 8004324:	47b8      	blx	r7
 8004326:	3001      	adds	r0, #1
 8004328:	f43f af12 	beq.w	8004150 <_printf_float+0x98>
 800432c:	f04f 0a00 	mov.w	sl, #0
 8004330:	f104 0b1a 	add.w	fp, r4, #26
 8004334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004336:	425b      	negs	r3, r3
 8004338:	4553      	cmp	r3, sl
 800433a:	dc01      	bgt.n	8004340 <_printf_float+0x288>
 800433c:	464b      	mov	r3, r9
 800433e:	e794      	b.n	800426a <_printf_float+0x1b2>
 8004340:	2301      	movs	r3, #1
 8004342:	465a      	mov	r2, fp
 8004344:	4631      	mov	r1, r6
 8004346:	4628      	mov	r0, r5
 8004348:	47b8      	blx	r7
 800434a:	3001      	adds	r0, #1
 800434c:	f43f af00 	beq.w	8004150 <_printf_float+0x98>
 8004350:	f10a 0a01 	add.w	sl, sl, #1
 8004354:	e7ee      	b.n	8004334 <_printf_float+0x27c>
 8004356:	bf00      	nop
 8004358:	ffffffff 	.word	0xffffffff
 800435c:	7fefffff 	.word	0x7fefffff
 8004360:	08006bd4 	.word	0x08006bd4
 8004364:	08006bd8 	.word	0x08006bd8
 8004368:	08006bdc 	.word	0x08006bdc
 800436c:	08006be0 	.word	0x08006be0
 8004370:	08006be4 	.word	0x08006be4
 8004374:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004376:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800437a:	4553      	cmp	r3, sl
 800437c:	bfa8      	it	ge
 800437e:	4653      	movge	r3, sl
 8004380:	2b00      	cmp	r3, #0
 8004382:	4699      	mov	r9, r3
 8004384:	dc37      	bgt.n	80043f6 <_printf_float+0x33e>
 8004386:	2300      	movs	r3, #0
 8004388:	9307      	str	r3, [sp, #28]
 800438a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800438e:	f104 021a 	add.w	r2, r4, #26
 8004392:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004394:	9907      	ldr	r1, [sp, #28]
 8004396:	9306      	str	r3, [sp, #24]
 8004398:	eba3 0309 	sub.w	r3, r3, r9
 800439c:	428b      	cmp	r3, r1
 800439e:	dc31      	bgt.n	8004404 <_printf_float+0x34c>
 80043a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043a2:	459a      	cmp	sl, r3
 80043a4:	dc3b      	bgt.n	800441e <_printf_float+0x366>
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	07da      	lsls	r2, r3, #31
 80043aa:	d438      	bmi.n	800441e <_printf_float+0x366>
 80043ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043ae:	ebaa 0903 	sub.w	r9, sl, r3
 80043b2:	9b06      	ldr	r3, [sp, #24]
 80043b4:	ebaa 0303 	sub.w	r3, sl, r3
 80043b8:	4599      	cmp	r9, r3
 80043ba:	bfa8      	it	ge
 80043bc:	4699      	movge	r9, r3
 80043be:	f1b9 0f00 	cmp.w	r9, #0
 80043c2:	dc34      	bgt.n	800442e <_printf_float+0x376>
 80043c4:	f04f 0800 	mov.w	r8, #0
 80043c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043cc:	f104 0b1a 	add.w	fp, r4, #26
 80043d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043d2:	ebaa 0303 	sub.w	r3, sl, r3
 80043d6:	eba3 0309 	sub.w	r3, r3, r9
 80043da:	4543      	cmp	r3, r8
 80043dc:	f77f af76 	ble.w	80042cc <_printf_float+0x214>
 80043e0:	2301      	movs	r3, #1
 80043e2:	465a      	mov	r2, fp
 80043e4:	4631      	mov	r1, r6
 80043e6:	4628      	mov	r0, r5
 80043e8:	47b8      	blx	r7
 80043ea:	3001      	adds	r0, #1
 80043ec:	f43f aeb0 	beq.w	8004150 <_printf_float+0x98>
 80043f0:	f108 0801 	add.w	r8, r8, #1
 80043f4:	e7ec      	b.n	80043d0 <_printf_float+0x318>
 80043f6:	4642      	mov	r2, r8
 80043f8:	4631      	mov	r1, r6
 80043fa:	4628      	mov	r0, r5
 80043fc:	47b8      	blx	r7
 80043fe:	3001      	adds	r0, #1
 8004400:	d1c1      	bne.n	8004386 <_printf_float+0x2ce>
 8004402:	e6a5      	b.n	8004150 <_printf_float+0x98>
 8004404:	2301      	movs	r3, #1
 8004406:	4631      	mov	r1, r6
 8004408:	4628      	mov	r0, r5
 800440a:	9206      	str	r2, [sp, #24]
 800440c:	47b8      	blx	r7
 800440e:	3001      	adds	r0, #1
 8004410:	f43f ae9e 	beq.w	8004150 <_printf_float+0x98>
 8004414:	9b07      	ldr	r3, [sp, #28]
 8004416:	9a06      	ldr	r2, [sp, #24]
 8004418:	3301      	adds	r3, #1
 800441a:	9307      	str	r3, [sp, #28]
 800441c:	e7b9      	b.n	8004392 <_printf_float+0x2da>
 800441e:	9b05      	ldr	r3, [sp, #20]
 8004420:	465a      	mov	r2, fp
 8004422:	4631      	mov	r1, r6
 8004424:	4628      	mov	r0, r5
 8004426:	47b8      	blx	r7
 8004428:	3001      	adds	r0, #1
 800442a:	d1bf      	bne.n	80043ac <_printf_float+0x2f4>
 800442c:	e690      	b.n	8004150 <_printf_float+0x98>
 800442e:	9a06      	ldr	r2, [sp, #24]
 8004430:	464b      	mov	r3, r9
 8004432:	4442      	add	r2, r8
 8004434:	4631      	mov	r1, r6
 8004436:	4628      	mov	r0, r5
 8004438:	47b8      	blx	r7
 800443a:	3001      	adds	r0, #1
 800443c:	d1c2      	bne.n	80043c4 <_printf_float+0x30c>
 800443e:	e687      	b.n	8004150 <_printf_float+0x98>
 8004440:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8004444:	f1b9 0f01 	cmp.w	r9, #1
 8004448:	dc01      	bgt.n	800444e <_printf_float+0x396>
 800444a:	07db      	lsls	r3, r3, #31
 800444c:	d536      	bpl.n	80044bc <_printf_float+0x404>
 800444e:	2301      	movs	r3, #1
 8004450:	4642      	mov	r2, r8
 8004452:	4631      	mov	r1, r6
 8004454:	4628      	mov	r0, r5
 8004456:	47b8      	blx	r7
 8004458:	3001      	adds	r0, #1
 800445a:	f43f ae79 	beq.w	8004150 <_printf_float+0x98>
 800445e:	9b05      	ldr	r3, [sp, #20]
 8004460:	465a      	mov	r2, fp
 8004462:	4631      	mov	r1, r6
 8004464:	4628      	mov	r0, r5
 8004466:	47b8      	blx	r7
 8004468:	3001      	adds	r0, #1
 800446a:	f43f ae71 	beq.w	8004150 <_printf_float+0x98>
 800446e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004472:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800447a:	f109 39ff 	add.w	r9, r9, #4294967295
 800447e:	d018      	beq.n	80044b2 <_printf_float+0x3fa>
 8004480:	464b      	mov	r3, r9
 8004482:	f108 0201 	add.w	r2, r8, #1
 8004486:	4631      	mov	r1, r6
 8004488:	4628      	mov	r0, r5
 800448a:	47b8      	blx	r7
 800448c:	3001      	adds	r0, #1
 800448e:	d10c      	bne.n	80044aa <_printf_float+0x3f2>
 8004490:	e65e      	b.n	8004150 <_printf_float+0x98>
 8004492:	2301      	movs	r3, #1
 8004494:	465a      	mov	r2, fp
 8004496:	4631      	mov	r1, r6
 8004498:	4628      	mov	r0, r5
 800449a:	47b8      	blx	r7
 800449c:	3001      	adds	r0, #1
 800449e:	f43f ae57 	beq.w	8004150 <_printf_float+0x98>
 80044a2:	f108 0801 	add.w	r8, r8, #1
 80044a6:	45c8      	cmp	r8, r9
 80044a8:	dbf3      	blt.n	8004492 <_printf_float+0x3da>
 80044aa:	4653      	mov	r3, sl
 80044ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80044b0:	e6dc      	b.n	800426c <_printf_float+0x1b4>
 80044b2:	f04f 0800 	mov.w	r8, #0
 80044b6:	f104 0b1a 	add.w	fp, r4, #26
 80044ba:	e7f4      	b.n	80044a6 <_printf_float+0x3ee>
 80044bc:	2301      	movs	r3, #1
 80044be:	4642      	mov	r2, r8
 80044c0:	e7e1      	b.n	8004486 <_printf_float+0x3ce>
 80044c2:	2301      	movs	r3, #1
 80044c4:	464a      	mov	r2, r9
 80044c6:	4631      	mov	r1, r6
 80044c8:	4628      	mov	r0, r5
 80044ca:	47b8      	blx	r7
 80044cc:	3001      	adds	r0, #1
 80044ce:	f43f ae3f 	beq.w	8004150 <_printf_float+0x98>
 80044d2:	f108 0801 	add.w	r8, r8, #1
 80044d6:	68e3      	ldr	r3, [r4, #12]
 80044d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80044da:	1a5b      	subs	r3, r3, r1
 80044dc:	4543      	cmp	r3, r8
 80044de:	dcf0      	bgt.n	80044c2 <_printf_float+0x40a>
 80044e0:	e6f8      	b.n	80042d4 <_printf_float+0x21c>
 80044e2:	f04f 0800 	mov.w	r8, #0
 80044e6:	f104 0919 	add.w	r9, r4, #25
 80044ea:	e7f4      	b.n	80044d6 <_printf_float+0x41e>

080044ec <_printf_common>:
 80044ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044f0:	4616      	mov	r6, r2
 80044f2:	4698      	mov	r8, r3
 80044f4:	688a      	ldr	r2, [r1, #8]
 80044f6:	690b      	ldr	r3, [r1, #16]
 80044f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044fc:	4293      	cmp	r3, r2
 80044fe:	bfb8      	it	lt
 8004500:	4613      	movlt	r3, r2
 8004502:	6033      	str	r3, [r6, #0]
 8004504:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004508:	4607      	mov	r7, r0
 800450a:	460c      	mov	r4, r1
 800450c:	b10a      	cbz	r2, 8004512 <_printf_common+0x26>
 800450e:	3301      	adds	r3, #1
 8004510:	6033      	str	r3, [r6, #0]
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	0699      	lsls	r1, r3, #26
 8004516:	bf42      	ittt	mi
 8004518:	6833      	ldrmi	r3, [r6, #0]
 800451a:	3302      	addmi	r3, #2
 800451c:	6033      	strmi	r3, [r6, #0]
 800451e:	6825      	ldr	r5, [r4, #0]
 8004520:	f015 0506 	ands.w	r5, r5, #6
 8004524:	d106      	bne.n	8004534 <_printf_common+0x48>
 8004526:	f104 0a19 	add.w	sl, r4, #25
 800452a:	68e3      	ldr	r3, [r4, #12]
 800452c:	6832      	ldr	r2, [r6, #0]
 800452e:	1a9b      	subs	r3, r3, r2
 8004530:	42ab      	cmp	r3, r5
 8004532:	dc26      	bgt.n	8004582 <_printf_common+0x96>
 8004534:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004538:	6822      	ldr	r2, [r4, #0]
 800453a:	3b00      	subs	r3, #0
 800453c:	bf18      	it	ne
 800453e:	2301      	movne	r3, #1
 8004540:	0692      	lsls	r2, r2, #26
 8004542:	d42b      	bmi.n	800459c <_printf_common+0xb0>
 8004544:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004548:	4641      	mov	r1, r8
 800454a:	4638      	mov	r0, r7
 800454c:	47c8      	blx	r9
 800454e:	3001      	adds	r0, #1
 8004550:	d01e      	beq.n	8004590 <_printf_common+0xa4>
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	6922      	ldr	r2, [r4, #16]
 8004556:	f003 0306 	and.w	r3, r3, #6
 800455a:	2b04      	cmp	r3, #4
 800455c:	bf02      	ittt	eq
 800455e:	68e5      	ldreq	r5, [r4, #12]
 8004560:	6833      	ldreq	r3, [r6, #0]
 8004562:	1aed      	subeq	r5, r5, r3
 8004564:	68a3      	ldr	r3, [r4, #8]
 8004566:	bf0c      	ite	eq
 8004568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800456c:	2500      	movne	r5, #0
 800456e:	4293      	cmp	r3, r2
 8004570:	bfc4      	itt	gt
 8004572:	1a9b      	subgt	r3, r3, r2
 8004574:	18ed      	addgt	r5, r5, r3
 8004576:	2600      	movs	r6, #0
 8004578:	341a      	adds	r4, #26
 800457a:	42b5      	cmp	r5, r6
 800457c:	d11a      	bne.n	80045b4 <_printf_common+0xc8>
 800457e:	2000      	movs	r0, #0
 8004580:	e008      	b.n	8004594 <_printf_common+0xa8>
 8004582:	2301      	movs	r3, #1
 8004584:	4652      	mov	r2, sl
 8004586:	4641      	mov	r1, r8
 8004588:	4638      	mov	r0, r7
 800458a:	47c8      	blx	r9
 800458c:	3001      	adds	r0, #1
 800458e:	d103      	bne.n	8004598 <_printf_common+0xac>
 8004590:	f04f 30ff 	mov.w	r0, #4294967295
 8004594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004598:	3501      	adds	r5, #1
 800459a:	e7c6      	b.n	800452a <_printf_common+0x3e>
 800459c:	18e1      	adds	r1, r4, r3
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	2030      	movs	r0, #48	@ 0x30
 80045a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045a6:	4422      	add	r2, r4
 80045a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80045b0:	3302      	adds	r3, #2
 80045b2:	e7c7      	b.n	8004544 <_printf_common+0x58>
 80045b4:	2301      	movs	r3, #1
 80045b6:	4622      	mov	r2, r4
 80045b8:	4641      	mov	r1, r8
 80045ba:	4638      	mov	r0, r7
 80045bc:	47c8      	blx	r9
 80045be:	3001      	adds	r0, #1
 80045c0:	d0e6      	beq.n	8004590 <_printf_common+0xa4>
 80045c2:	3601      	adds	r6, #1
 80045c4:	e7d9      	b.n	800457a <_printf_common+0x8e>
	...

080045c8 <_printf_i>:
 80045c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045cc:	7e0f      	ldrb	r7, [r1, #24]
 80045ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80045d0:	2f78      	cmp	r7, #120	@ 0x78
 80045d2:	4691      	mov	r9, r2
 80045d4:	4680      	mov	r8, r0
 80045d6:	460c      	mov	r4, r1
 80045d8:	469a      	mov	sl, r3
 80045da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80045de:	d807      	bhi.n	80045f0 <_printf_i+0x28>
 80045e0:	2f62      	cmp	r7, #98	@ 0x62
 80045e2:	d80a      	bhi.n	80045fa <_printf_i+0x32>
 80045e4:	2f00      	cmp	r7, #0
 80045e6:	f000 80d2 	beq.w	800478e <_printf_i+0x1c6>
 80045ea:	2f58      	cmp	r7, #88	@ 0x58
 80045ec:	f000 80b9 	beq.w	8004762 <_printf_i+0x19a>
 80045f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80045f8:	e03a      	b.n	8004670 <_printf_i+0xa8>
 80045fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80045fe:	2b15      	cmp	r3, #21
 8004600:	d8f6      	bhi.n	80045f0 <_printf_i+0x28>
 8004602:	a101      	add	r1, pc, #4	@ (adr r1, 8004608 <_printf_i+0x40>)
 8004604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004608:	08004661 	.word	0x08004661
 800460c:	08004675 	.word	0x08004675
 8004610:	080045f1 	.word	0x080045f1
 8004614:	080045f1 	.word	0x080045f1
 8004618:	080045f1 	.word	0x080045f1
 800461c:	080045f1 	.word	0x080045f1
 8004620:	08004675 	.word	0x08004675
 8004624:	080045f1 	.word	0x080045f1
 8004628:	080045f1 	.word	0x080045f1
 800462c:	080045f1 	.word	0x080045f1
 8004630:	080045f1 	.word	0x080045f1
 8004634:	08004775 	.word	0x08004775
 8004638:	0800469f 	.word	0x0800469f
 800463c:	0800472f 	.word	0x0800472f
 8004640:	080045f1 	.word	0x080045f1
 8004644:	080045f1 	.word	0x080045f1
 8004648:	08004797 	.word	0x08004797
 800464c:	080045f1 	.word	0x080045f1
 8004650:	0800469f 	.word	0x0800469f
 8004654:	080045f1 	.word	0x080045f1
 8004658:	080045f1 	.word	0x080045f1
 800465c:	08004737 	.word	0x08004737
 8004660:	6833      	ldr	r3, [r6, #0]
 8004662:	1d1a      	adds	r2, r3, #4
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6032      	str	r2, [r6, #0]
 8004668:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800466c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004670:	2301      	movs	r3, #1
 8004672:	e09d      	b.n	80047b0 <_printf_i+0x1e8>
 8004674:	6833      	ldr	r3, [r6, #0]
 8004676:	6820      	ldr	r0, [r4, #0]
 8004678:	1d19      	adds	r1, r3, #4
 800467a:	6031      	str	r1, [r6, #0]
 800467c:	0606      	lsls	r6, r0, #24
 800467e:	d501      	bpl.n	8004684 <_printf_i+0xbc>
 8004680:	681d      	ldr	r5, [r3, #0]
 8004682:	e003      	b.n	800468c <_printf_i+0xc4>
 8004684:	0645      	lsls	r5, r0, #25
 8004686:	d5fb      	bpl.n	8004680 <_printf_i+0xb8>
 8004688:	f9b3 5000 	ldrsh.w	r5, [r3]
 800468c:	2d00      	cmp	r5, #0
 800468e:	da03      	bge.n	8004698 <_printf_i+0xd0>
 8004690:	232d      	movs	r3, #45	@ 0x2d
 8004692:	426d      	negs	r5, r5
 8004694:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004698:	4859      	ldr	r0, [pc, #356]	@ (8004800 <_printf_i+0x238>)
 800469a:	230a      	movs	r3, #10
 800469c:	e011      	b.n	80046c2 <_printf_i+0xfa>
 800469e:	6821      	ldr	r1, [r4, #0]
 80046a0:	6833      	ldr	r3, [r6, #0]
 80046a2:	0608      	lsls	r0, r1, #24
 80046a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80046a8:	d402      	bmi.n	80046b0 <_printf_i+0xe8>
 80046aa:	0649      	lsls	r1, r1, #25
 80046ac:	bf48      	it	mi
 80046ae:	b2ad      	uxthmi	r5, r5
 80046b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80046b2:	4853      	ldr	r0, [pc, #332]	@ (8004800 <_printf_i+0x238>)
 80046b4:	6033      	str	r3, [r6, #0]
 80046b6:	bf14      	ite	ne
 80046b8:	230a      	movne	r3, #10
 80046ba:	2308      	moveq	r3, #8
 80046bc:	2100      	movs	r1, #0
 80046be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80046c2:	6866      	ldr	r6, [r4, #4]
 80046c4:	60a6      	str	r6, [r4, #8]
 80046c6:	2e00      	cmp	r6, #0
 80046c8:	bfa2      	ittt	ge
 80046ca:	6821      	ldrge	r1, [r4, #0]
 80046cc:	f021 0104 	bicge.w	r1, r1, #4
 80046d0:	6021      	strge	r1, [r4, #0]
 80046d2:	b90d      	cbnz	r5, 80046d8 <_printf_i+0x110>
 80046d4:	2e00      	cmp	r6, #0
 80046d6:	d04b      	beq.n	8004770 <_printf_i+0x1a8>
 80046d8:	4616      	mov	r6, r2
 80046da:	fbb5 f1f3 	udiv	r1, r5, r3
 80046de:	fb03 5711 	mls	r7, r3, r1, r5
 80046e2:	5dc7      	ldrb	r7, [r0, r7]
 80046e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046e8:	462f      	mov	r7, r5
 80046ea:	42bb      	cmp	r3, r7
 80046ec:	460d      	mov	r5, r1
 80046ee:	d9f4      	bls.n	80046da <_printf_i+0x112>
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d10b      	bne.n	800470c <_printf_i+0x144>
 80046f4:	6823      	ldr	r3, [r4, #0]
 80046f6:	07df      	lsls	r7, r3, #31
 80046f8:	d508      	bpl.n	800470c <_printf_i+0x144>
 80046fa:	6923      	ldr	r3, [r4, #16]
 80046fc:	6861      	ldr	r1, [r4, #4]
 80046fe:	4299      	cmp	r1, r3
 8004700:	bfde      	ittt	le
 8004702:	2330      	movle	r3, #48	@ 0x30
 8004704:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004708:	f106 36ff 	addle.w	r6, r6, #4294967295
 800470c:	1b92      	subs	r2, r2, r6
 800470e:	6122      	str	r2, [r4, #16]
 8004710:	f8cd a000 	str.w	sl, [sp]
 8004714:	464b      	mov	r3, r9
 8004716:	aa03      	add	r2, sp, #12
 8004718:	4621      	mov	r1, r4
 800471a:	4640      	mov	r0, r8
 800471c:	f7ff fee6 	bl	80044ec <_printf_common>
 8004720:	3001      	adds	r0, #1
 8004722:	d14a      	bne.n	80047ba <_printf_i+0x1f2>
 8004724:	f04f 30ff 	mov.w	r0, #4294967295
 8004728:	b004      	add	sp, #16
 800472a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	f043 0320 	orr.w	r3, r3, #32
 8004734:	6023      	str	r3, [r4, #0]
 8004736:	4833      	ldr	r0, [pc, #204]	@ (8004804 <_printf_i+0x23c>)
 8004738:	2778      	movs	r7, #120	@ 0x78
 800473a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	6831      	ldr	r1, [r6, #0]
 8004742:	061f      	lsls	r7, r3, #24
 8004744:	f851 5b04 	ldr.w	r5, [r1], #4
 8004748:	d402      	bmi.n	8004750 <_printf_i+0x188>
 800474a:	065f      	lsls	r7, r3, #25
 800474c:	bf48      	it	mi
 800474e:	b2ad      	uxthmi	r5, r5
 8004750:	6031      	str	r1, [r6, #0]
 8004752:	07d9      	lsls	r1, r3, #31
 8004754:	bf44      	itt	mi
 8004756:	f043 0320 	orrmi.w	r3, r3, #32
 800475a:	6023      	strmi	r3, [r4, #0]
 800475c:	b11d      	cbz	r5, 8004766 <_printf_i+0x19e>
 800475e:	2310      	movs	r3, #16
 8004760:	e7ac      	b.n	80046bc <_printf_i+0xf4>
 8004762:	4827      	ldr	r0, [pc, #156]	@ (8004800 <_printf_i+0x238>)
 8004764:	e7e9      	b.n	800473a <_printf_i+0x172>
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	f023 0320 	bic.w	r3, r3, #32
 800476c:	6023      	str	r3, [r4, #0]
 800476e:	e7f6      	b.n	800475e <_printf_i+0x196>
 8004770:	4616      	mov	r6, r2
 8004772:	e7bd      	b.n	80046f0 <_printf_i+0x128>
 8004774:	6833      	ldr	r3, [r6, #0]
 8004776:	6825      	ldr	r5, [r4, #0]
 8004778:	6961      	ldr	r1, [r4, #20]
 800477a:	1d18      	adds	r0, r3, #4
 800477c:	6030      	str	r0, [r6, #0]
 800477e:	062e      	lsls	r6, r5, #24
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	d501      	bpl.n	8004788 <_printf_i+0x1c0>
 8004784:	6019      	str	r1, [r3, #0]
 8004786:	e002      	b.n	800478e <_printf_i+0x1c6>
 8004788:	0668      	lsls	r0, r5, #25
 800478a:	d5fb      	bpl.n	8004784 <_printf_i+0x1bc>
 800478c:	8019      	strh	r1, [r3, #0]
 800478e:	2300      	movs	r3, #0
 8004790:	6123      	str	r3, [r4, #16]
 8004792:	4616      	mov	r6, r2
 8004794:	e7bc      	b.n	8004710 <_printf_i+0x148>
 8004796:	6833      	ldr	r3, [r6, #0]
 8004798:	1d1a      	adds	r2, r3, #4
 800479a:	6032      	str	r2, [r6, #0]
 800479c:	681e      	ldr	r6, [r3, #0]
 800479e:	6862      	ldr	r2, [r4, #4]
 80047a0:	2100      	movs	r1, #0
 80047a2:	4630      	mov	r0, r6
 80047a4:	f7fb fd4c 	bl	8000240 <memchr>
 80047a8:	b108      	cbz	r0, 80047ae <_printf_i+0x1e6>
 80047aa:	1b80      	subs	r0, r0, r6
 80047ac:	6060      	str	r0, [r4, #4]
 80047ae:	6863      	ldr	r3, [r4, #4]
 80047b0:	6123      	str	r3, [r4, #16]
 80047b2:	2300      	movs	r3, #0
 80047b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047b8:	e7aa      	b.n	8004710 <_printf_i+0x148>
 80047ba:	6923      	ldr	r3, [r4, #16]
 80047bc:	4632      	mov	r2, r6
 80047be:	4649      	mov	r1, r9
 80047c0:	4640      	mov	r0, r8
 80047c2:	47d0      	blx	sl
 80047c4:	3001      	adds	r0, #1
 80047c6:	d0ad      	beq.n	8004724 <_printf_i+0x15c>
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	079b      	lsls	r3, r3, #30
 80047cc:	d413      	bmi.n	80047f6 <_printf_i+0x22e>
 80047ce:	68e0      	ldr	r0, [r4, #12]
 80047d0:	9b03      	ldr	r3, [sp, #12]
 80047d2:	4298      	cmp	r0, r3
 80047d4:	bfb8      	it	lt
 80047d6:	4618      	movlt	r0, r3
 80047d8:	e7a6      	b.n	8004728 <_printf_i+0x160>
 80047da:	2301      	movs	r3, #1
 80047dc:	4632      	mov	r2, r6
 80047de:	4649      	mov	r1, r9
 80047e0:	4640      	mov	r0, r8
 80047e2:	47d0      	blx	sl
 80047e4:	3001      	adds	r0, #1
 80047e6:	d09d      	beq.n	8004724 <_printf_i+0x15c>
 80047e8:	3501      	adds	r5, #1
 80047ea:	68e3      	ldr	r3, [r4, #12]
 80047ec:	9903      	ldr	r1, [sp, #12]
 80047ee:	1a5b      	subs	r3, r3, r1
 80047f0:	42ab      	cmp	r3, r5
 80047f2:	dcf2      	bgt.n	80047da <_printf_i+0x212>
 80047f4:	e7eb      	b.n	80047ce <_printf_i+0x206>
 80047f6:	2500      	movs	r5, #0
 80047f8:	f104 0619 	add.w	r6, r4, #25
 80047fc:	e7f5      	b.n	80047ea <_printf_i+0x222>
 80047fe:	bf00      	nop
 8004800:	08006be6 	.word	0x08006be6
 8004804:	08006bf7 	.word	0x08006bf7

08004808 <std>:
 8004808:	2300      	movs	r3, #0
 800480a:	b510      	push	{r4, lr}
 800480c:	4604      	mov	r4, r0
 800480e:	e9c0 3300 	strd	r3, r3, [r0]
 8004812:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004816:	6083      	str	r3, [r0, #8]
 8004818:	8181      	strh	r1, [r0, #12]
 800481a:	6643      	str	r3, [r0, #100]	@ 0x64
 800481c:	81c2      	strh	r2, [r0, #14]
 800481e:	6183      	str	r3, [r0, #24]
 8004820:	4619      	mov	r1, r3
 8004822:	2208      	movs	r2, #8
 8004824:	305c      	adds	r0, #92	@ 0x5c
 8004826:	f000 f914 	bl	8004a52 <memset>
 800482a:	4b0d      	ldr	r3, [pc, #52]	@ (8004860 <std+0x58>)
 800482c:	6263      	str	r3, [r4, #36]	@ 0x24
 800482e:	4b0d      	ldr	r3, [pc, #52]	@ (8004864 <std+0x5c>)
 8004830:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004832:	4b0d      	ldr	r3, [pc, #52]	@ (8004868 <std+0x60>)
 8004834:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004836:	4b0d      	ldr	r3, [pc, #52]	@ (800486c <std+0x64>)
 8004838:	6323      	str	r3, [r4, #48]	@ 0x30
 800483a:	4b0d      	ldr	r3, [pc, #52]	@ (8004870 <std+0x68>)
 800483c:	6224      	str	r4, [r4, #32]
 800483e:	429c      	cmp	r4, r3
 8004840:	d006      	beq.n	8004850 <std+0x48>
 8004842:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004846:	4294      	cmp	r4, r2
 8004848:	d002      	beq.n	8004850 <std+0x48>
 800484a:	33d0      	adds	r3, #208	@ 0xd0
 800484c:	429c      	cmp	r4, r3
 800484e:	d105      	bne.n	800485c <std+0x54>
 8004850:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004858:	f000 b978 	b.w	8004b4c <__retarget_lock_init_recursive>
 800485c:	bd10      	pop	{r4, pc}
 800485e:	bf00      	nop
 8004860:	080049cd 	.word	0x080049cd
 8004864:	080049ef 	.word	0x080049ef
 8004868:	08004a27 	.word	0x08004a27
 800486c:	08004a4b 	.word	0x08004a4b
 8004870:	200002e0 	.word	0x200002e0

08004874 <stdio_exit_handler>:
 8004874:	4a02      	ldr	r2, [pc, #8]	@ (8004880 <stdio_exit_handler+0xc>)
 8004876:	4903      	ldr	r1, [pc, #12]	@ (8004884 <stdio_exit_handler+0x10>)
 8004878:	4803      	ldr	r0, [pc, #12]	@ (8004888 <stdio_exit_handler+0x14>)
 800487a:	f000 b869 	b.w	8004950 <_fwalk_sglue>
 800487e:	bf00      	nop
 8004880:	20000014 	.word	0x20000014
 8004884:	080063d1 	.word	0x080063d1
 8004888:	20000024 	.word	0x20000024

0800488c <cleanup_stdio>:
 800488c:	6841      	ldr	r1, [r0, #4]
 800488e:	4b0c      	ldr	r3, [pc, #48]	@ (80048c0 <cleanup_stdio+0x34>)
 8004890:	4299      	cmp	r1, r3
 8004892:	b510      	push	{r4, lr}
 8004894:	4604      	mov	r4, r0
 8004896:	d001      	beq.n	800489c <cleanup_stdio+0x10>
 8004898:	f001 fd9a 	bl	80063d0 <_fflush_r>
 800489c:	68a1      	ldr	r1, [r4, #8]
 800489e:	4b09      	ldr	r3, [pc, #36]	@ (80048c4 <cleanup_stdio+0x38>)
 80048a0:	4299      	cmp	r1, r3
 80048a2:	d002      	beq.n	80048aa <cleanup_stdio+0x1e>
 80048a4:	4620      	mov	r0, r4
 80048a6:	f001 fd93 	bl	80063d0 <_fflush_r>
 80048aa:	68e1      	ldr	r1, [r4, #12]
 80048ac:	4b06      	ldr	r3, [pc, #24]	@ (80048c8 <cleanup_stdio+0x3c>)
 80048ae:	4299      	cmp	r1, r3
 80048b0:	d004      	beq.n	80048bc <cleanup_stdio+0x30>
 80048b2:	4620      	mov	r0, r4
 80048b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048b8:	f001 bd8a 	b.w	80063d0 <_fflush_r>
 80048bc:	bd10      	pop	{r4, pc}
 80048be:	bf00      	nop
 80048c0:	200002e0 	.word	0x200002e0
 80048c4:	20000348 	.word	0x20000348
 80048c8:	200003b0 	.word	0x200003b0

080048cc <global_stdio_init.part.0>:
 80048cc:	b510      	push	{r4, lr}
 80048ce:	4b0b      	ldr	r3, [pc, #44]	@ (80048fc <global_stdio_init.part.0+0x30>)
 80048d0:	4c0b      	ldr	r4, [pc, #44]	@ (8004900 <global_stdio_init.part.0+0x34>)
 80048d2:	4a0c      	ldr	r2, [pc, #48]	@ (8004904 <global_stdio_init.part.0+0x38>)
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	4620      	mov	r0, r4
 80048d8:	2200      	movs	r2, #0
 80048da:	2104      	movs	r1, #4
 80048dc:	f7ff ff94 	bl	8004808 <std>
 80048e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80048e4:	2201      	movs	r2, #1
 80048e6:	2109      	movs	r1, #9
 80048e8:	f7ff ff8e 	bl	8004808 <std>
 80048ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80048f0:	2202      	movs	r2, #2
 80048f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048f6:	2112      	movs	r1, #18
 80048f8:	f7ff bf86 	b.w	8004808 <std>
 80048fc:	20000418 	.word	0x20000418
 8004900:	200002e0 	.word	0x200002e0
 8004904:	08004875 	.word	0x08004875

08004908 <__sfp_lock_acquire>:
 8004908:	4801      	ldr	r0, [pc, #4]	@ (8004910 <__sfp_lock_acquire+0x8>)
 800490a:	f000 b920 	b.w	8004b4e <__retarget_lock_acquire_recursive>
 800490e:	bf00      	nop
 8004910:	20000421 	.word	0x20000421

08004914 <__sfp_lock_release>:
 8004914:	4801      	ldr	r0, [pc, #4]	@ (800491c <__sfp_lock_release+0x8>)
 8004916:	f000 b91b 	b.w	8004b50 <__retarget_lock_release_recursive>
 800491a:	bf00      	nop
 800491c:	20000421 	.word	0x20000421

08004920 <__sinit>:
 8004920:	b510      	push	{r4, lr}
 8004922:	4604      	mov	r4, r0
 8004924:	f7ff fff0 	bl	8004908 <__sfp_lock_acquire>
 8004928:	6a23      	ldr	r3, [r4, #32]
 800492a:	b11b      	cbz	r3, 8004934 <__sinit+0x14>
 800492c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004930:	f7ff bff0 	b.w	8004914 <__sfp_lock_release>
 8004934:	4b04      	ldr	r3, [pc, #16]	@ (8004948 <__sinit+0x28>)
 8004936:	6223      	str	r3, [r4, #32]
 8004938:	4b04      	ldr	r3, [pc, #16]	@ (800494c <__sinit+0x2c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1f5      	bne.n	800492c <__sinit+0xc>
 8004940:	f7ff ffc4 	bl	80048cc <global_stdio_init.part.0>
 8004944:	e7f2      	b.n	800492c <__sinit+0xc>
 8004946:	bf00      	nop
 8004948:	0800488d 	.word	0x0800488d
 800494c:	20000418 	.word	0x20000418

08004950 <_fwalk_sglue>:
 8004950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004954:	4607      	mov	r7, r0
 8004956:	4688      	mov	r8, r1
 8004958:	4614      	mov	r4, r2
 800495a:	2600      	movs	r6, #0
 800495c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004960:	f1b9 0901 	subs.w	r9, r9, #1
 8004964:	d505      	bpl.n	8004972 <_fwalk_sglue+0x22>
 8004966:	6824      	ldr	r4, [r4, #0]
 8004968:	2c00      	cmp	r4, #0
 800496a:	d1f7      	bne.n	800495c <_fwalk_sglue+0xc>
 800496c:	4630      	mov	r0, r6
 800496e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004972:	89ab      	ldrh	r3, [r5, #12]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d907      	bls.n	8004988 <_fwalk_sglue+0x38>
 8004978:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800497c:	3301      	adds	r3, #1
 800497e:	d003      	beq.n	8004988 <_fwalk_sglue+0x38>
 8004980:	4629      	mov	r1, r5
 8004982:	4638      	mov	r0, r7
 8004984:	47c0      	blx	r8
 8004986:	4306      	orrs	r6, r0
 8004988:	3568      	adds	r5, #104	@ 0x68
 800498a:	e7e9      	b.n	8004960 <_fwalk_sglue+0x10>

0800498c <siprintf>:
 800498c:	b40e      	push	{r1, r2, r3}
 800498e:	b500      	push	{lr}
 8004990:	b09c      	sub	sp, #112	@ 0x70
 8004992:	ab1d      	add	r3, sp, #116	@ 0x74
 8004994:	9002      	str	r0, [sp, #8]
 8004996:	9006      	str	r0, [sp, #24]
 8004998:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800499c:	4809      	ldr	r0, [pc, #36]	@ (80049c4 <siprintf+0x38>)
 800499e:	9107      	str	r1, [sp, #28]
 80049a0:	9104      	str	r1, [sp, #16]
 80049a2:	4909      	ldr	r1, [pc, #36]	@ (80049c8 <siprintf+0x3c>)
 80049a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80049a8:	9105      	str	r1, [sp, #20]
 80049aa:	6800      	ldr	r0, [r0, #0]
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	a902      	add	r1, sp, #8
 80049b0:	f001 fb8e 	bl	80060d0 <_svfiprintf_r>
 80049b4:	9b02      	ldr	r3, [sp, #8]
 80049b6:	2200      	movs	r2, #0
 80049b8:	701a      	strb	r2, [r3, #0]
 80049ba:	b01c      	add	sp, #112	@ 0x70
 80049bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80049c0:	b003      	add	sp, #12
 80049c2:	4770      	bx	lr
 80049c4:	20000020 	.word	0x20000020
 80049c8:	ffff0208 	.word	0xffff0208

080049cc <__sread>:
 80049cc:	b510      	push	{r4, lr}
 80049ce:	460c      	mov	r4, r1
 80049d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049d4:	f000 f86c 	bl	8004ab0 <_read_r>
 80049d8:	2800      	cmp	r0, #0
 80049da:	bfab      	itete	ge
 80049dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80049de:	89a3      	ldrhlt	r3, [r4, #12]
 80049e0:	181b      	addge	r3, r3, r0
 80049e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80049e6:	bfac      	ite	ge
 80049e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80049ea:	81a3      	strhlt	r3, [r4, #12]
 80049ec:	bd10      	pop	{r4, pc}

080049ee <__swrite>:
 80049ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f2:	461f      	mov	r7, r3
 80049f4:	898b      	ldrh	r3, [r1, #12]
 80049f6:	05db      	lsls	r3, r3, #23
 80049f8:	4605      	mov	r5, r0
 80049fa:	460c      	mov	r4, r1
 80049fc:	4616      	mov	r6, r2
 80049fe:	d505      	bpl.n	8004a0c <__swrite+0x1e>
 8004a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a04:	2302      	movs	r3, #2
 8004a06:	2200      	movs	r2, #0
 8004a08:	f000 f840 	bl	8004a8c <_lseek_r>
 8004a0c:	89a3      	ldrh	r3, [r4, #12]
 8004a0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a16:	81a3      	strh	r3, [r4, #12]
 8004a18:	4632      	mov	r2, r6
 8004a1a:	463b      	mov	r3, r7
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a22:	f000 b857 	b.w	8004ad4 <_write_r>

08004a26 <__sseek>:
 8004a26:	b510      	push	{r4, lr}
 8004a28:	460c      	mov	r4, r1
 8004a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a2e:	f000 f82d 	bl	8004a8c <_lseek_r>
 8004a32:	1c43      	adds	r3, r0, #1
 8004a34:	89a3      	ldrh	r3, [r4, #12]
 8004a36:	bf15      	itete	ne
 8004a38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004a3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004a3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004a42:	81a3      	strheq	r3, [r4, #12]
 8004a44:	bf18      	it	ne
 8004a46:	81a3      	strhne	r3, [r4, #12]
 8004a48:	bd10      	pop	{r4, pc}

08004a4a <__sclose>:
 8004a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a4e:	f000 b80d 	b.w	8004a6c <_close_r>

08004a52 <memset>:
 8004a52:	4402      	add	r2, r0
 8004a54:	4603      	mov	r3, r0
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d100      	bne.n	8004a5c <memset+0xa>
 8004a5a:	4770      	bx	lr
 8004a5c:	f803 1b01 	strb.w	r1, [r3], #1
 8004a60:	e7f9      	b.n	8004a56 <memset+0x4>
	...

08004a64 <_localeconv_r>:
 8004a64:	4800      	ldr	r0, [pc, #0]	@ (8004a68 <_localeconv_r+0x4>)
 8004a66:	4770      	bx	lr
 8004a68:	20000160 	.word	0x20000160

08004a6c <_close_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4d06      	ldr	r5, [pc, #24]	@ (8004a88 <_close_r+0x1c>)
 8004a70:	2300      	movs	r3, #0
 8004a72:	4604      	mov	r4, r0
 8004a74:	4608      	mov	r0, r1
 8004a76:	602b      	str	r3, [r5, #0]
 8004a78:	f7fc f94d 	bl	8000d16 <_close>
 8004a7c:	1c43      	adds	r3, r0, #1
 8004a7e:	d102      	bne.n	8004a86 <_close_r+0x1a>
 8004a80:	682b      	ldr	r3, [r5, #0]
 8004a82:	b103      	cbz	r3, 8004a86 <_close_r+0x1a>
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	bd38      	pop	{r3, r4, r5, pc}
 8004a88:	2000041c 	.word	0x2000041c

08004a8c <_lseek_r>:
 8004a8c:	b538      	push	{r3, r4, r5, lr}
 8004a8e:	4d07      	ldr	r5, [pc, #28]	@ (8004aac <_lseek_r+0x20>)
 8004a90:	4604      	mov	r4, r0
 8004a92:	4608      	mov	r0, r1
 8004a94:	4611      	mov	r1, r2
 8004a96:	2200      	movs	r2, #0
 8004a98:	602a      	str	r2, [r5, #0]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f7fc f962 	bl	8000d64 <_lseek>
 8004aa0:	1c43      	adds	r3, r0, #1
 8004aa2:	d102      	bne.n	8004aaa <_lseek_r+0x1e>
 8004aa4:	682b      	ldr	r3, [r5, #0]
 8004aa6:	b103      	cbz	r3, 8004aaa <_lseek_r+0x1e>
 8004aa8:	6023      	str	r3, [r4, #0]
 8004aaa:	bd38      	pop	{r3, r4, r5, pc}
 8004aac:	2000041c 	.word	0x2000041c

08004ab0 <_read_r>:
 8004ab0:	b538      	push	{r3, r4, r5, lr}
 8004ab2:	4d07      	ldr	r5, [pc, #28]	@ (8004ad0 <_read_r+0x20>)
 8004ab4:	4604      	mov	r4, r0
 8004ab6:	4608      	mov	r0, r1
 8004ab8:	4611      	mov	r1, r2
 8004aba:	2200      	movs	r2, #0
 8004abc:	602a      	str	r2, [r5, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f7fc f8f0 	bl	8000ca4 <_read>
 8004ac4:	1c43      	adds	r3, r0, #1
 8004ac6:	d102      	bne.n	8004ace <_read_r+0x1e>
 8004ac8:	682b      	ldr	r3, [r5, #0]
 8004aca:	b103      	cbz	r3, 8004ace <_read_r+0x1e>
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	bd38      	pop	{r3, r4, r5, pc}
 8004ad0:	2000041c 	.word	0x2000041c

08004ad4 <_write_r>:
 8004ad4:	b538      	push	{r3, r4, r5, lr}
 8004ad6:	4d07      	ldr	r5, [pc, #28]	@ (8004af4 <_write_r+0x20>)
 8004ad8:	4604      	mov	r4, r0
 8004ada:	4608      	mov	r0, r1
 8004adc:	4611      	mov	r1, r2
 8004ade:	2200      	movs	r2, #0
 8004ae0:	602a      	str	r2, [r5, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f7fc f8fb 	bl	8000cde <_write>
 8004ae8:	1c43      	adds	r3, r0, #1
 8004aea:	d102      	bne.n	8004af2 <_write_r+0x1e>
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	b103      	cbz	r3, 8004af2 <_write_r+0x1e>
 8004af0:	6023      	str	r3, [r4, #0]
 8004af2:	bd38      	pop	{r3, r4, r5, pc}
 8004af4:	2000041c 	.word	0x2000041c

08004af8 <__errno>:
 8004af8:	4b01      	ldr	r3, [pc, #4]	@ (8004b00 <__errno+0x8>)
 8004afa:	6818      	ldr	r0, [r3, #0]
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	20000020 	.word	0x20000020

08004b04 <__libc_init_array>:
 8004b04:	b570      	push	{r4, r5, r6, lr}
 8004b06:	4d0d      	ldr	r5, [pc, #52]	@ (8004b3c <__libc_init_array+0x38>)
 8004b08:	4c0d      	ldr	r4, [pc, #52]	@ (8004b40 <__libc_init_array+0x3c>)
 8004b0a:	1b64      	subs	r4, r4, r5
 8004b0c:	10a4      	asrs	r4, r4, #2
 8004b0e:	2600      	movs	r6, #0
 8004b10:	42a6      	cmp	r6, r4
 8004b12:	d109      	bne.n	8004b28 <__libc_init_array+0x24>
 8004b14:	4d0b      	ldr	r5, [pc, #44]	@ (8004b44 <__libc_init_array+0x40>)
 8004b16:	4c0c      	ldr	r4, [pc, #48]	@ (8004b48 <__libc_init_array+0x44>)
 8004b18:	f001 fff8 	bl	8006b0c <_init>
 8004b1c:	1b64      	subs	r4, r4, r5
 8004b1e:	10a4      	asrs	r4, r4, #2
 8004b20:	2600      	movs	r6, #0
 8004b22:	42a6      	cmp	r6, r4
 8004b24:	d105      	bne.n	8004b32 <__libc_init_array+0x2e>
 8004b26:	bd70      	pop	{r4, r5, r6, pc}
 8004b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b2c:	4798      	blx	r3
 8004b2e:	3601      	adds	r6, #1
 8004b30:	e7ee      	b.n	8004b10 <__libc_init_array+0xc>
 8004b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b36:	4798      	blx	r3
 8004b38:	3601      	adds	r6, #1
 8004b3a:	e7f2      	b.n	8004b22 <__libc_init_array+0x1e>
 8004b3c:	08006f50 	.word	0x08006f50
 8004b40:	08006f50 	.word	0x08006f50
 8004b44:	08006f50 	.word	0x08006f50
 8004b48:	08006f54 	.word	0x08006f54

08004b4c <__retarget_lock_init_recursive>:
 8004b4c:	4770      	bx	lr

08004b4e <__retarget_lock_acquire_recursive>:
 8004b4e:	4770      	bx	lr

08004b50 <__retarget_lock_release_recursive>:
 8004b50:	4770      	bx	lr

08004b52 <quorem>:
 8004b52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b56:	6903      	ldr	r3, [r0, #16]
 8004b58:	690c      	ldr	r4, [r1, #16]
 8004b5a:	42a3      	cmp	r3, r4
 8004b5c:	4607      	mov	r7, r0
 8004b5e:	db7e      	blt.n	8004c5e <quorem+0x10c>
 8004b60:	3c01      	subs	r4, #1
 8004b62:	f101 0814 	add.w	r8, r1, #20
 8004b66:	00a3      	lsls	r3, r4, #2
 8004b68:	f100 0514 	add.w	r5, r0, #20
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b72:	9301      	str	r3, [sp, #4]
 8004b74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b84:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b88:	d32e      	bcc.n	8004be8 <quorem+0x96>
 8004b8a:	f04f 0a00 	mov.w	sl, #0
 8004b8e:	46c4      	mov	ip, r8
 8004b90:	46ae      	mov	lr, r5
 8004b92:	46d3      	mov	fp, sl
 8004b94:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004b98:	b298      	uxth	r0, r3
 8004b9a:	fb06 a000 	mla	r0, r6, r0, sl
 8004b9e:	0c02      	lsrs	r2, r0, #16
 8004ba0:	0c1b      	lsrs	r3, r3, #16
 8004ba2:	fb06 2303 	mla	r3, r6, r3, r2
 8004ba6:	f8de 2000 	ldr.w	r2, [lr]
 8004baa:	b280      	uxth	r0, r0
 8004bac:	b292      	uxth	r2, r2
 8004bae:	1a12      	subs	r2, r2, r0
 8004bb0:	445a      	add	r2, fp
 8004bb2:	f8de 0000 	ldr.w	r0, [lr]
 8004bb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004bc0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004bc4:	b292      	uxth	r2, r2
 8004bc6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004bca:	45e1      	cmp	r9, ip
 8004bcc:	f84e 2b04 	str.w	r2, [lr], #4
 8004bd0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004bd4:	d2de      	bcs.n	8004b94 <quorem+0x42>
 8004bd6:	9b00      	ldr	r3, [sp, #0]
 8004bd8:	58eb      	ldr	r3, [r5, r3]
 8004bda:	b92b      	cbnz	r3, 8004be8 <quorem+0x96>
 8004bdc:	9b01      	ldr	r3, [sp, #4]
 8004bde:	3b04      	subs	r3, #4
 8004be0:	429d      	cmp	r5, r3
 8004be2:	461a      	mov	r2, r3
 8004be4:	d32f      	bcc.n	8004c46 <quorem+0xf4>
 8004be6:	613c      	str	r4, [r7, #16]
 8004be8:	4638      	mov	r0, r7
 8004bea:	f001 f90d 	bl	8005e08 <__mcmp>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	db25      	blt.n	8004c3e <quorem+0xec>
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	f858 2b04 	ldr.w	r2, [r8], #4
 8004bfa:	f8d1 c000 	ldr.w	ip, [r1]
 8004bfe:	fa1f fe82 	uxth.w	lr, r2
 8004c02:	fa1f f38c 	uxth.w	r3, ip
 8004c06:	eba3 030e 	sub.w	r3, r3, lr
 8004c0a:	4403      	add	r3, r0
 8004c0c:	0c12      	lsrs	r2, r2, #16
 8004c0e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004c12:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c1c:	45c1      	cmp	r9, r8
 8004c1e:	f841 3b04 	str.w	r3, [r1], #4
 8004c22:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004c26:	d2e6      	bcs.n	8004bf6 <quorem+0xa4>
 8004c28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c30:	b922      	cbnz	r2, 8004c3c <quorem+0xea>
 8004c32:	3b04      	subs	r3, #4
 8004c34:	429d      	cmp	r5, r3
 8004c36:	461a      	mov	r2, r3
 8004c38:	d30b      	bcc.n	8004c52 <quorem+0x100>
 8004c3a:	613c      	str	r4, [r7, #16]
 8004c3c:	3601      	adds	r6, #1
 8004c3e:	4630      	mov	r0, r6
 8004c40:	b003      	add	sp, #12
 8004c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c46:	6812      	ldr	r2, [r2, #0]
 8004c48:	3b04      	subs	r3, #4
 8004c4a:	2a00      	cmp	r2, #0
 8004c4c:	d1cb      	bne.n	8004be6 <quorem+0x94>
 8004c4e:	3c01      	subs	r4, #1
 8004c50:	e7c6      	b.n	8004be0 <quorem+0x8e>
 8004c52:	6812      	ldr	r2, [r2, #0]
 8004c54:	3b04      	subs	r3, #4
 8004c56:	2a00      	cmp	r2, #0
 8004c58:	d1ef      	bne.n	8004c3a <quorem+0xe8>
 8004c5a:	3c01      	subs	r4, #1
 8004c5c:	e7ea      	b.n	8004c34 <quorem+0xe2>
 8004c5e:	2000      	movs	r0, #0
 8004c60:	e7ee      	b.n	8004c40 <quorem+0xee>
 8004c62:	0000      	movs	r0, r0
 8004c64:	0000      	movs	r0, r0
	...

08004c68 <_dtoa_r>:
 8004c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c6c:	ed2d 8b02 	vpush	{d8}
 8004c70:	69c7      	ldr	r7, [r0, #28]
 8004c72:	b091      	sub	sp, #68	@ 0x44
 8004c74:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004c78:	ec55 4b10 	vmov	r4, r5, d0
 8004c7c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8004c7e:	9107      	str	r1, [sp, #28]
 8004c80:	4681      	mov	r9, r0
 8004c82:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c84:	930d      	str	r3, [sp, #52]	@ 0x34
 8004c86:	b97f      	cbnz	r7, 8004ca8 <_dtoa_r+0x40>
 8004c88:	2010      	movs	r0, #16
 8004c8a:	f000 fd8d 	bl	80057a8 <malloc>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	f8c9 001c 	str.w	r0, [r9, #28]
 8004c94:	b920      	cbnz	r0, 8004ca0 <_dtoa_r+0x38>
 8004c96:	4ba0      	ldr	r3, [pc, #640]	@ (8004f18 <_dtoa_r+0x2b0>)
 8004c98:	21ef      	movs	r1, #239	@ 0xef
 8004c9a:	48a0      	ldr	r0, [pc, #640]	@ (8004f1c <_dtoa_r+0x2b4>)
 8004c9c:	f001 fbf8 	bl	8006490 <__assert_func>
 8004ca0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004ca4:	6007      	str	r7, [r0, #0]
 8004ca6:	60c7      	str	r7, [r0, #12]
 8004ca8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004cac:	6819      	ldr	r1, [r3, #0]
 8004cae:	b159      	cbz	r1, 8004cc8 <_dtoa_r+0x60>
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	604a      	str	r2, [r1, #4]
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	4093      	lsls	r3, r2
 8004cb8:	608b      	str	r3, [r1, #8]
 8004cba:	4648      	mov	r0, r9
 8004cbc:	f000 fe6a 	bl	8005994 <_Bfree>
 8004cc0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	1e2b      	subs	r3, r5, #0
 8004cca:	bfbb      	ittet	lt
 8004ccc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004cd0:	9303      	strlt	r3, [sp, #12]
 8004cd2:	2300      	movge	r3, #0
 8004cd4:	2201      	movlt	r2, #1
 8004cd6:	bfac      	ite	ge
 8004cd8:	6033      	strge	r3, [r6, #0]
 8004cda:	6032      	strlt	r2, [r6, #0]
 8004cdc:	4b90      	ldr	r3, [pc, #576]	@ (8004f20 <_dtoa_r+0x2b8>)
 8004cde:	9e03      	ldr	r6, [sp, #12]
 8004ce0:	43b3      	bics	r3, r6
 8004ce2:	d110      	bne.n	8004d06 <_dtoa_r+0x9e>
 8004ce4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004ce6:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8004cf0:	4323      	orrs	r3, r4
 8004cf2:	f000 84de 	beq.w	80056b2 <_dtoa_r+0xa4a>
 8004cf6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004cf8:	4f8a      	ldr	r7, [pc, #552]	@ (8004f24 <_dtoa_r+0x2bc>)
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 84e0 	beq.w	80056c0 <_dtoa_r+0xa58>
 8004d00:	1cfb      	adds	r3, r7, #3
 8004d02:	f000 bcdb 	b.w	80056bc <_dtoa_r+0xa54>
 8004d06:	ed9d 8b02 	vldr	d8, [sp, #8]
 8004d0a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d12:	d10a      	bne.n	8004d2a <_dtoa_r+0xc2>
 8004d14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004d16:	2301      	movs	r3, #1
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004d1c:	b113      	cbz	r3, 8004d24 <_dtoa_r+0xbc>
 8004d1e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8004d20:	4b81      	ldr	r3, [pc, #516]	@ (8004f28 <_dtoa_r+0x2c0>)
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	4f81      	ldr	r7, [pc, #516]	@ (8004f2c <_dtoa_r+0x2c4>)
 8004d26:	f000 bccb 	b.w	80056c0 <_dtoa_r+0xa58>
 8004d2a:	aa0e      	add	r2, sp, #56	@ 0x38
 8004d2c:	a90f      	add	r1, sp, #60	@ 0x3c
 8004d2e:	4648      	mov	r0, r9
 8004d30:	eeb0 0b48 	vmov.f64	d0, d8
 8004d34:	f001 f918 	bl	8005f68 <__d2b>
 8004d38:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8004d3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004d3e:	9001      	str	r0, [sp, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d045      	beq.n	8004dd0 <_dtoa_r+0x168>
 8004d44:	eeb0 7b48 	vmov.f64	d7, d8
 8004d48:	ee18 1a90 	vmov	r1, s17
 8004d4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004d50:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8004d54:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8004d58:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8004d5c:	2500      	movs	r5, #0
 8004d5e:	ee07 1a90 	vmov	s15, r1
 8004d62:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8004d66:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8004f00 <_dtoa_r+0x298>
 8004d6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004d6e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8004f08 <_dtoa_r+0x2a0>
 8004d72:	eea7 6b05 	vfma.f64	d6, d7, d5
 8004d76:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8004f10 <_dtoa_r+0x2a8>
 8004d7a:	ee07 3a90 	vmov	s15, r3
 8004d7e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8004d82:	eeb0 7b46 	vmov.f64	d7, d6
 8004d86:	eea4 7b05 	vfma.f64	d7, d4, d5
 8004d8a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8004d8e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d96:	ee16 8a90 	vmov	r8, s13
 8004d9a:	d508      	bpl.n	8004dae <_dtoa_r+0x146>
 8004d9c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004da0:	eeb4 6b47 	vcmp.f64	d6, d7
 8004da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da8:	bf18      	it	ne
 8004daa:	f108 38ff 	addne.w	r8, r8, #4294967295
 8004dae:	f1b8 0f16 	cmp.w	r8, #22
 8004db2:	d82b      	bhi.n	8004e0c <_dtoa_r+0x1a4>
 8004db4:	495e      	ldr	r1, [pc, #376]	@ (8004f30 <_dtoa_r+0x2c8>)
 8004db6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8004dba:	ed91 7b00 	vldr	d7, [r1]
 8004dbe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8004dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc6:	d501      	bpl.n	8004dcc <_dtoa_r+0x164>
 8004dc8:	f108 38ff 	add.w	r8, r8, #4294967295
 8004dcc:	2100      	movs	r1, #0
 8004dce:	e01e      	b.n	8004e0e <_dtoa_r+0x1a6>
 8004dd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8004dd8:	2920      	cmp	r1, #32
 8004dda:	bfc1      	itttt	gt
 8004ddc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8004de0:	408e      	lslgt	r6, r1
 8004de2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8004de6:	fa24 f101 	lsrgt.w	r1, r4, r1
 8004dea:	bfd6      	itet	le
 8004dec:	f1c1 0120 	rsble	r1, r1, #32
 8004df0:	4331      	orrgt	r1, r6
 8004df2:	fa04 f101 	lslle.w	r1, r4, r1
 8004df6:	ee07 1a90 	vmov	s15, r1
 8004dfa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	ee17 1a90 	vmov	r1, s15
 8004e04:	2501      	movs	r5, #1
 8004e06:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8004e0a:	e7a8      	b.n	8004d5e <_dtoa_r+0xf6>
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	1ad2      	subs	r2, r2, r3
 8004e10:	1e53      	subs	r3, r2, #1
 8004e12:	9306      	str	r3, [sp, #24]
 8004e14:	bf45      	ittet	mi
 8004e16:	f1c2 0301 	rsbmi	r3, r2, #1
 8004e1a:	9305      	strmi	r3, [sp, #20]
 8004e1c:	2300      	movpl	r3, #0
 8004e1e:	2300      	movmi	r3, #0
 8004e20:	bf4c      	ite	mi
 8004e22:	9306      	strmi	r3, [sp, #24]
 8004e24:	9305      	strpl	r3, [sp, #20]
 8004e26:	f1b8 0f00 	cmp.w	r8, #0
 8004e2a:	910c      	str	r1, [sp, #48]	@ 0x30
 8004e2c:	db18      	blt.n	8004e60 <_dtoa_r+0x1f8>
 8004e2e:	9b06      	ldr	r3, [sp, #24]
 8004e30:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004e34:	4443      	add	r3, r8
 8004e36:	9306      	str	r3, [sp, #24]
 8004e38:	2300      	movs	r3, #0
 8004e3a:	9a07      	ldr	r2, [sp, #28]
 8004e3c:	2a09      	cmp	r2, #9
 8004e3e:	d849      	bhi.n	8004ed4 <_dtoa_r+0x26c>
 8004e40:	2a05      	cmp	r2, #5
 8004e42:	bfc4      	itt	gt
 8004e44:	3a04      	subgt	r2, #4
 8004e46:	9207      	strgt	r2, [sp, #28]
 8004e48:	9a07      	ldr	r2, [sp, #28]
 8004e4a:	f1a2 0202 	sub.w	r2, r2, #2
 8004e4e:	bfcc      	ite	gt
 8004e50:	2400      	movgt	r4, #0
 8004e52:	2401      	movle	r4, #1
 8004e54:	2a03      	cmp	r2, #3
 8004e56:	d848      	bhi.n	8004eea <_dtoa_r+0x282>
 8004e58:	e8df f002 	tbb	[pc, r2]
 8004e5c:	3a2c2e0b 	.word	0x3a2c2e0b
 8004e60:	9b05      	ldr	r3, [sp, #20]
 8004e62:	2200      	movs	r2, #0
 8004e64:	eba3 0308 	sub.w	r3, r3, r8
 8004e68:	9305      	str	r3, [sp, #20]
 8004e6a:	920a      	str	r2, [sp, #40]	@ 0x28
 8004e6c:	f1c8 0300 	rsb	r3, r8, #0
 8004e70:	e7e3      	b.n	8004e3a <_dtoa_r+0x1d2>
 8004e72:	2200      	movs	r2, #0
 8004e74:	9208      	str	r2, [sp, #32]
 8004e76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e78:	2a00      	cmp	r2, #0
 8004e7a:	dc39      	bgt.n	8004ef0 <_dtoa_r+0x288>
 8004e7c:	f04f 0b01 	mov.w	fp, #1
 8004e80:	46da      	mov	sl, fp
 8004e82:	465a      	mov	r2, fp
 8004e84:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8004e88:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	2004      	movs	r0, #4
 8004e90:	f100 0614 	add.w	r6, r0, #20
 8004e94:	4296      	cmp	r6, r2
 8004e96:	d930      	bls.n	8004efa <_dtoa_r+0x292>
 8004e98:	6079      	str	r1, [r7, #4]
 8004e9a:	4648      	mov	r0, r9
 8004e9c:	9304      	str	r3, [sp, #16]
 8004e9e:	f000 fd39 	bl	8005914 <_Balloc>
 8004ea2:	9b04      	ldr	r3, [sp, #16]
 8004ea4:	4607      	mov	r7, r0
 8004ea6:	2800      	cmp	r0, #0
 8004ea8:	d146      	bne.n	8004f38 <_dtoa_r+0x2d0>
 8004eaa:	4b22      	ldr	r3, [pc, #136]	@ (8004f34 <_dtoa_r+0x2cc>)
 8004eac:	4602      	mov	r2, r0
 8004eae:	f240 11af 	movw	r1, #431	@ 0x1af
 8004eb2:	e6f2      	b.n	8004c9a <_dtoa_r+0x32>
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	e7dd      	b.n	8004e74 <_dtoa_r+0x20c>
 8004eb8:	2200      	movs	r2, #0
 8004eba:	9208      	str	r2, [sp, #32]
 8004ebc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ebe:	eb08 0b02 	add.w	fp, r8, r2
 8004ec2:	f10b 0a01 	add.w	sl, fp, #1
 8004ec6:	4652      	mov	r2, sl
 8004ec8:	2a01      	cmp	r2, #1
 8004eca:	bfb8      	it	lt
 8004ecc:	2201      	movlt	r2, #1
 8004ece:	e7db      	b.n	8004e88 <_dtoa_r+0x220>
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	e7f2      	b.n	8004eba <_dtoa_r+0x252>
 8004ed4:	2401      	movs	r4, #1
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8004edc:	f04f 3bff 	mov.w	fp, #4294967295
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	46da      	mov	sl, fp
 8004ee4:	2212      	movs	r2, #18
 8004ee6:	9109      	str	r1, [sp, #36]	@ 0x24
 8004ee8:	e7ce      	b.n	8004e88 <_dtoa_r+0x220>
 8004eea:	2201      	movs	r2, #1
 8004eec:	9208      	str	r2, [sp, #32]
 8004eee:	e7f5      	b.n	8004edc <_dtoa_r+0x274>
 8004ef0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8004ef4:	46da      	mov	sl, fp
 8004ef6:	465a      	mov	r2, fp
 8004ef8:	e7c6      	b.n	8004e88 <_dtoa_r+0x220>
 8004efa:	3101      	adds	r1, #1
 8004efc:	0040      	lsls	r0, r0, #1
 8004efe:	e7c7      	b.n	8004e90 <_dtoa_r+0x228>
 8004f00:	636f4361 	.word	0x636f4361
 8004f04:	3fd287a7 	.word	0x3fd287a7
 8004f08:	8b60c8b3 	.word	0x8b60c8b3
 8004f0c:	3fc68a28 	.word	0x3fc68a28
 8004f10:	509f79fb 	.word	0x509f79fb
 8004f14:	3fd34413 	.word	0x3fd34413
 8004f18:	08006c15 	.word	0x08006c15
 8004f1c:	08006c2c 	.word	0x08006c2c
 8004f20:	7ff00000 	.word	0x7ff00000
 8004f24:	08006c11 	.word	0x08006c11
 8004f28:	08006be5 	.word	0x08006be5
 8004f2c:	08006be4 	.word	0x08006be4
 8004f30:	08006d28 	.word	0x08006d28
 8004f34:	08006c84 	.word	0x08006c84
 8004f38:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8004f3c:	f1ba 0f0e 	cmp.w	sl, #14
 8004f40:	6010      	str	r0, [r2, #0]
 8004f42:	d86f      	bhi.n	8005024 <_dtoa_r+0x3bc>
 8004f44:	2c00      	cmp	r4, #0
 8004f46:	d06d      	beq.n	8005024 <_dtoa_r+0x3bc>
 8004f48:	f1b8 0f00 	cmp.w	r8, #0
 8004f4c:	f340 80c2 	ble.w	80050d4 <_dtoa_r+0x46c>
 8004f50:	4aca      	ldr	r2, [pc, #808]	@ (800527c <_dtoa_r+0x614>)
 8004f52:	f008 010f 	and.w	r1, r8, #15
 8004f56:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004f5a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8004f5e:	ed92 7b00 	vldr	d7, [r2]
 8004f62:	ea4f 1128 	mov.w	r1, r8, asr #4
 8004f66:	f000 80a9 	beq.w	80050bc <_dtoa_r+0x454>
 8004f6a:	4ac5      	ldr	r2, [pc, #788]	@ (8005280 <_dtoa_r+0x618>)
 8004f6c:	ed92 6b08 	vldr	d6, [r2, #32]
 8004f70:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8004f74:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004f78:	f001 010f 	and.w	r1, r1, #15
 8004f7c:	2203      	movs	r2, #3
 8004f7e:	48c0      	ldr	r0, [pc, #768]	@ (8005280 <_dtoa_r+0x618>)
 8004f80:	2900      	cmp	r1, #0
 8004f82:	f040 809d 	bne.w	80050c0 <_dtoa_r+0x458>
 8004f86:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004f8a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004f8e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004f92:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004f94:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004f98:	2900      	cmp	r1, #0
 8004f9a:	f000 80c1 	beq.w	8005120 <_dtoa_r+0x4b8>
 8004f9e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8004fa2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004faa:	f140 80b9 	bpl.w	8005120 <_dtoa_r+0x4b8>
 8004fae:	f1ba 0f00 	cmp.w	sl, #0
 8004fb2:	f000 80b5 	beq.w	8005120 <_dtoa_r+0x4b8>
 8004fb6:	f1bb 0f00 	cmp.w	fp, #0
 8004fba:	dd31      	ble.n	8005020 <_dtoa_r+0x3b8>
 8004fbc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8004fc0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004fc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004fc8:	f108 31ff 	add.w	r1, r8, #4294967295
 8004fcc:	9104      	str	r1, [sp, #16]
 8004fce:	3201      	adds	r2, #1
 8004fd0:	465c      	mov	r4, fp
 8004fd2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004fd6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8004fda:	ee07 2a90 	vmov	s15, r2
 8004fde:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004fe2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8004fe6:	ee15 2a90 	vmov	r2, s11
 8004fea:	ec51 0b15 	vmov	r0, r1, d5
 8004fee:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8004ff2:	2c00      	cmp	r4, #0
 8004ff4:	f040 8098 	bne.w	8005128 <_dtoa_r+0x4c0>
 8004ff8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8004ffc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005000:	ec41 0b17 	vmov	d7, r0, r1
 8005004:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800500c:	f300 8261 	bgt.w	80054d2 <_dtoa_r+0x86a>
 8005010:	eeb1 7b47 	vneg.f64	d7, d7
 8005014:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800501c:	f100 80f5 	bmi.w	800520a <_dtoa_r+0x5a2>
 8005020:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005024:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005026:	2a00      	cmp	r2, #0
 8005028:	f2c0 812c 	blt.w	8005284 <_dtoa_r+0x61c>
 800502c:	f1b8 0f0e 	cmp.w	r8, #14
 8005030:	f300 8128 	bgt.w	8005284 <_dtoa_r+0x61c>
 8005034:	4b91      	ldr	r3, [pc, #580]	@ (800527c <_dtoa_r+0x614>)
 8005036:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800503a:	ed93 6b00 	vldr	d6, [r3]
 800503e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005040:	2b00      	cmp	r3, #0
 8005042:	da03      	bge.n	800504c <_dtoa_r+0x3e4>
 8005044:	f1ba 0f00 	cmp.w	sl, #0
 8005048:	f340 80d2 	ble.w	80051f0 <_dtoa_r+0x588>
 800504c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8005050:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005054:	463e      	mov	r6, r7
 8005056:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800505a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800505e:	ee15 3a10 	vmov	r3, s10
 8005062:	3330      	adds	r3, #48	@ 0x30
 8005064:	f806 3b01 	strb.w	r3, [r6], #1
 8005068:	1bf3      	subs	r3, r6, r7
 800506a:	459a      	cmp	sl, r3
 800506c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005070:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005074:	f040 80f8 	bne.w	8005268 <_dtoa_r+0x600>
 8005078:	ee37 7b07 	vadd.f64	d7, d7, d7
 800507c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005084:	f300 80dd 	bgt.w	8005242 <_dtoa_r+0x5da>
 8005088:	eeb4 7b46 	vcmp.f64	d7, d6
 800508c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005090:	d104      	bne.n	800509c <_dtoa_r+0x434>
 8005092:	ee15 3a10 	vmov	r3, s10
 8005096:	07db      	lsls	r3, r3, #31
 8005098:	f100 80d3 	bmi.w	8005242 <_dtoa_r+0x5da>
 800509c:	9901      	ldr	r1, [sp, #4]
 800509e:	4648      	mov	r0, r9
 80050a0:	f000 fc78 	bl	8005994 <_Bfree>
 80050a4:	2300      	movs	r3, #0
 80050a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80050a8:	7033      	strb	r3, [r6, #0]
 80050aa:	f108 0301 	add.w	r3, r8, #1
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 8304 	beq.w	80056c0 <_dtoa_r+0xa58>
 80050b8:	601e      	str	r6, [r3, #0]
 80050ba:	e301      	b.n	80056c0 <_dtoa_r+0xa58>
 80050bc:	2202      	movs	r2, #2
 80050be:	e75e      	b.n	8004f7e <_dtoa_r+0x316>
 80050c0:	07cc      	lsls	r4, r1, #31
 80050c2:	d504      	bpl.n	80050ce <_dtoa_r+0x466>
 80050c4:	ed90 6b00 	vldr	d6, [r0]
 80050c8:	3201      	adds	r2, #1
 80050ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80050ce:	1049      	asrs	r1, r1, #1
 80050d0:	3008      	adds	r0, #8
 80050d2:	e755      	b.n	8004f80 <_dtoa_r+0x318>
 80050d4:	d022      	beq.n	800511c <_dtoa_r+0x4b4>
 80050d6:	f1c8 0100 	rsb	r1, r8, #0
 80050da:	4a68      	ldr	r2, [pc, #416]	@ (800527c <_dtoa_r+0x614>)
 80050dc:	f001 000f 	and.w	r0, r1, #15
 80050e0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80050e4:	ed92 7b00 	vldr	d7, [r2]
 80050e8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80050ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80050f0:	4863      	ldr	r0, [pc, #396]	@ (8005280 <_dtoa_r+0x618>)
 80050f2:	1109      	asrs	r1, r1, #4
 80050f4:	2400      	movs	r4, #0
 80050f6:	2202      	movs	r2, #2
 80050f8:	b929      	cbnz	r1, 8005106 <_dtoa_r+0x49e>
 80050fa:	2c00      	cmp	r4, #0
 80050fc:	f43f af49 	beq.w	8004f92 <_dtoa_r+0x32a>
 8005100:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005104:	e745      	b.n	8004f92 <_dtoa_r+0x32a>
 8005106:	07ce      	lsls	r6, r1, #31
 8005108:	d505      	bpl.n	8005116 <_dtoa_r+0x4ae>
 800510a:	ed90 6b00 	vldr	d6, [r0]
 800510e:	3201      	adds	r2, #1
 8005110:	2401      	movs	r4, #1
 8005112:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005116:	1049      	asrs	r1, r1, #1
 8005118:	3008      	adds	r0, #8
 800511a:	e7ed      	b.n	80050f8 <_dtoa_r+0x490>
 800511c:	2202      	movs	r2, #2
 800511e:	e738      	b.n	8004f92 <_dtoa_r+0x32a>
 8005120:	f8cd 8010 	str.w	r8, [sp, #16]
 8005124:	4654      	mov	r4, sl
 8005126:	e754      	b.n	8004fd2 <_dtoa_r+0x36a>
 8005128:	4a54      	ldr	r2, [pc, #336]	@ (800527c <_dtoa_r+0x614>)
 800512a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800512e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005132:	9a08      	ldr	r2, [sp, #32]
 8005134:	ec41 0b17 	vmov	d7, r0, r1
 8005138:	443c      	add	r4, r7
 800513a:	b34a      	cbz	r2, 8005190 <_dtoa_r+0x528>
 800513c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8005140:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8005144:	463e      	mov	r6, r7
 8005146:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800514a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800514e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005152:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005156:	ee14 2a90 	vmov	r2, s9
 800515a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800515e:	3230      	adds	r2, #48	@ 0x30
 8005160:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005164:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800516c:	f806 2b01 	strb.w	r2, [r6], #1
 8005170:	d438      	bmi.n	80051e4 <_dtoa_r+0x57c>
 8005172:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005176:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800517a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517e:	d462      	bmi.n	8005246 <_dtoa_r+0x5de>
 8005180:	42a6      	cmp	r6, r4
 8005182:	f43f af4d 	beq.w	8005020 <_dtoa_r+0x3b8>
 8005186:	ee27 7b03 	vmul.f64	d7, d7, d3
 800518a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800518e:	e7e0      	b.n	8005152 <_dtoa_r+0x4ea>
 8005190:	4621      	mov	r1, r4
 8005192:	463e      	mov	r6, r7
 8005194:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005198:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800519c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80051a0:	ee14 2a90 	vmov	r2, s9
 80051a4:	3230      	adds	r2, #48	@ 0x30
 80051a6:	f806 2b01 	strb.w	r2, [r6], #1
 80051aa:	42a6      	cmp	r6, r4
 80051ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80051b0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80051b4:	d119      	bne.n	80051ea <_dtoa_r+0x582>
 80051b6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80051ba:	ee37 4b05 	vadd.f64	d4, d7, d5
 80051be:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80051c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c6:	dc3e      	bgt.n	8005246 <_dtoa_r+0x5de>
 80051c8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80051cc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80051d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d4:	f57f af24 	bpl.w	8005020 <_dtoa_r+0x3b8>
 80051d8:	460e      	mov	r6, r1
 80051da:	3901      	subs	r1, #1
 80051dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80051e0:	2b30      	cmp	r3, #48	@ 0x30
 80051e2:	d0f9      	beq.n	80051d8 <_dtoa_r+0x570>
 80051e4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80051e8:	e758      	b.n	800509c <_dtoa_r+0x434>
 80051ea:	ee26 6b03 	vmul.f64	d6, d6, d3
 80051ee:	e7d5      	b.n	800519c <_dtoa_r+0x534>
 80051f0:	d10b      	bne.n	800520a <_dtoa_r+0x5a2>
 80051f2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80051f6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80051fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80051fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005206:	f2c0 8161 	blt.w	80054cc <_dtoa_r+0x864>
 800520a:	2400      	movs	r4, #0
 800520c:	4625      	mov	r5, r4
 800520e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005210:	43db      	mvns	r3, r3
 8005212:	9304      	str	r3, [sp, #16]
 8005214:	463e      	mov	r6, r7
 8005216:	f04f 0800 	mov.w	r8, #0
 800521a:	4621      	mov	r1, r4
 800521c:	4648      	mov	r0, r9
 800521e:	f000 fbb9 	bl	8005994 <_Bfree>
 8005222:	2d00      	cmp	r5, #0
 8005224:	d0de      	beq.n	80051e4 <_dtoa_r+0x57c>
 8005226:	f1b8 0f00 	cmp.w	r8, #0
 800522a:	d005      	beq.n	8005238 <_dtoa_r+0x5d0>
 800522c:	45a8      	cmp	r8, r5
 800522e:	d003      	beq.n	8005238 <_dtoa_r+0x5d0>
 8005230:	4641      	mov	r1, r8
 8005232:	4648      	mov	r0, r9
 8005234:	f000 fbae 	bl	8005994 <_Bfree>
 8005238:	4629      	mov	r1, r5
 800523a:	4648      	mov	r0, r9
 800523c:	f000 fbaa 	bl	8005994 <_Bfree>
 8005240:	e7d0      	b.n	80051e4 <_dtoa_r+0x57c>
 8005242:	f8cd 8010 	str.w	r8, [sp, #16]
 8005246:	4633      	mov	r3, r6
 8005248:	461e      	mov	r6, r3
 800524a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800524e:	2a39      	cmp	r2, #57	@ 0x39
 8005250:	d106      	bne.n	8005260 <_dtoa_r+0x5f8>
 8005252:	429f      	cmp	r7, r3
 8005254:	d1f8      	bne.n	8005248 <_dtoa_r+0x5e0>
 8005256:	9a04      	ldr	r2, [sp, #16]
 8005258:	3201      	adds	r2, #1
 800525a:	9204      	str	r2, [sp, #16]
 800525c:	2230      	movs	r2, #48	@ 0x30
 800525e:	703a      	strb	r2, [r7, #0]
 8005260:	781a      	ldrb	r2, [r3, #0]
 8005262:	3201      	adds	r2, #1
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	e7bd      	b.n	80051e4 <_dtoa_r+0x57c>
 8005268:	ee27 7b04 	vmul.f64	d7, d7, d4
 800526c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005274:	f47f aeef 	bne.w	8005056 <_dtoa_r+0x3ee>
 8005278:	e710      	b.n	800509c <_dtoa_r+0x434>
 800527a:	bf00      	nop
 800527c:	08006d28 	.word	0x08006d28
 8005280:	08006d00 	.word	0x08006d00
 8005284:	9908      	ldr	r1, [sp, #32]
 8005286:	2900      	cmp	r1, #0
 8005288:	f000 80e3 	beq.w	8005452 <_dtoa_r+0x7ea>
 800528c:	9907      	ldr	r1, [sp, #28]
 800528e:	2901      	cmp	r1, #1
 8005290:	f300 80c8 	bgt.w	8005424 <_dtoa_r+0x7bc>
 8005294:	2d00      	cmp	r5, #0
 8005296:	f000 80c1 	beq.w	800541c <_dtoa_r+0x7b4>
 800529a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800529e:	9e05      	ldr	r6, [sp, #20]
 80052a0:	461c      	mov	r4, r3
 80052a2:	9304      	str	r3, [sp, #16]
 80052a4:	9b05      	ldr	r3, [sp, #20]
 80052a6:	4413      	add	r3, r2
 80052a8:	9305      	str	r3, [sp, #20]
 80052aa:	9b06      	ldr	r3, [sp, #24]
 80052ac:	2101      	movs	r1, #1
 80052ae:	4413      	add	r3, r2
 80052b0:	4648      	mov	r0, r9
 80052b2:	9306      	str	r3, [sp, #24]
 80052b4:	f000 fc22 	bl	8005afc <__i2b>
 80052b8:	9b04      	ldr	r3, [sp, #16]
 80052ba:	4605      	mov	r5, r0
 80052bc:	b166      	cbz	r6, 80052d8 <_dtoa_r+0x670>
 80052be:	9a06      	ldr	r2, [sp, #24]
 80052c0:	2a00      	cmp	r2, #0
 80052c2:	dd09      	ble.n	80052d8 <_dtoa_r+0x670>
 80052c4:	42b2      	cmp	r2, r6
 80052c6:	9905      	ldr	r1, [sp, #20]
 80052c8:	bfa8      	it	ge
 80052ca:	4632      	movge	r2, r6
 80052cc:	1a89      	subs	r1, r1, r2
 80052ce:	9105      	str	r1, [sp, #20]
 80052d0:	9906      	ldr	r1, [sp, #24]
 80052d2:	1ab6      	subs	r6, r6, r2
 80052d4:	1a8a      	subs	r2, r1, r2
 80052d6:	9206      	str	r2, [sp, #24]
 80052d8:	b1fb      	cbz	r3, 800531a <_dtoa_r+0x6b2>
 80052da:	9a08      	ldr	r2, [sp, #32]
 80052dc:	2a00      	cmp	r2, #0
 80052de:	f000 80bc 	beq.w	800545a <_dtoa_r+0x7f2>
 80052e2:	b19c      	cbz	r4, 800530c <_dtoa_r+0x6a4>
 80052e4:	4629      	mov	r1, r5
 80052e6:	4622      	mov	r2, r4
 80052e8:	4648      	mov	r0, r9
 80052ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052ec:	f000 fcc6 	bl	8005c7c <__pow5mult>
 80052f0:	9a01      	ldr	r2, [sp, #4]
 80052f2:	4601      	mov	r1, r0
 80052f4:	4605      	mov	r5, r0
 80052f6:	4648      	mov	r0, r9
 80052f8:	f000 fc16 	bl	8005b28 <__multiply>
 80052fc:	9901      	ldr	r1, [sp, #4]
 80052fe:	9004      	str	r0, [sp, #16]
 8005300:	4648      	mov	r0, r9
 8005302:	f000 fb47 	bl	8005994 <_Bfree>
 8005306:	9a04      	ldr	r2, [sp, #16]
 8005308:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800530a:	9201      	str	r2, [sp, #4]
 800530c:	1b1a      	subs	r2, r3, r4
 800530e:	d004      	beq.n	800531a <_dtoa_r+0x6b2>
 8005310:	9901      	ldr	r1, [sp, #4]
 8005312:	4648      	mov	r0, r9
 8005314:	f000 fcb2 	bl	8005c7c <__pow5mult>
 8005318:	9001      	str	r0, [sp, #4]
 800531a:	2101      	movs	r1, #1
 800531c:	4648      	mov	r0, r9
 800531e:	f000 fbed 	bl	8005afc <__i2b>
 8005322:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005324:	4604      	mov	r4, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 81d0 	beq.w	80056cc <_dtoa_r+0xa64>
 800532c:	461a      	mov	r2, r3
 800532e:	4601      	mov	r1, r0
 8005330:	4648      	mov	r0, r9
 8005332:	f000 fca3 	bl	8005c7c <__pow5mult>
 8005336:	9b07      	ldr	r3, [sp, #28]
 8005338:	2b01      	cmp	r3, #1
 800533a:	4604      	mov	r4, r0
 800533c:	f300 8095 	bgt.w	800546a <_dtoa_r+0x802>
 8005340:	9b02      	ldr	r3, [sp, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	f040 808b 	bne.w	800545e <_dtoa_r+0x7f6>
 8005348:	9b03      	ldr	r3, [sp, #12]
 800534a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800534e:	2a00      	cmp	r2, #0
 8005350:	f040 8087 	bne.w	8005462 <_dtoa_r+0x7fa>
 8005354:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005358:	0d12      	lsrs	r2, r2, #20
 800535a:	0512      	lsls	r2, r2, #20
 800535c:	2a00      	cmp	r2, #0
 800535e:	f000 8082 	beq.w	8005466 <_dtoa_r+0x7fe>
 8005362:	9b05      	ldr	r3, [sp, #20]
 8005364:	3301      	adds	r3, #1
 8005366:	9305      	str	r3, [sp, #20]
 8005368:	9b06      	ldr	r3, [sp, #24]
 800536a:	3301      	adds	r3, #1
 800536c:	9306      	str	r3, [sp, #24]
 800536e:	2301      	movs	r3, #1
 8005370:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005372:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 81af 	beq.w	80056d8 <_dtoa_r+0xa70>
 800537a:	6922      	ldr	r2, [r4, #16]
 800537c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005380:	6910      	ldr	r0, [r2, #16]
 8005382:	f000 fb6f 	bl	8005a64 <__hi0bits>
 8005386:	f1c0 0020 	rsb	r0, r0, #32
 800538a:	9b06      	ldr	r3, [sp, #24]
 800538c:	4418      	add	r0, r3
 800538e:	f010 001f 	ands.w	r0, r0, #31
 8005392:	d076      	beq.n	8005482 <_dtoa_r+0x81a>
 8005394:	f1c0 0220 	rsb	r2, r0, #32
 8005398:	2a04      	cmp	r2, #4
 800539a:	dd69      	ble.n	8005470 <_dtoa_r+0x808>
 800539c:	9b05      	ldr	r3, [sp, #20]
 800539e:	f1c0 001c 	rsb	r0, r0, #28
 80053a2:	4403      	add	r3, r0
 80053a4:	9305      	str	r3, [sp, #20]
 80053a6:	9b06      	ldr	r3, [sp, #24]
 80053a8:	4406      	add	r6, r0
 80053aa:	4403      	add	r3, r0
 80053ac:	9306      	str	r3, [sp, #24]
 80053ae:	9b05      	ldr	r3, [sp, #20]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	dd05      	ble.n	80053c0 <_dtoa_r+0x758>
 80053b4:	9901      	ldr	r1, [sp, #4]
 80053b6:	461a      	mov	r2, r3
 80053b8:	4648      	mov	r0, r9
 80053ba:	f000 fcb9 	bl	8005d30 <__lshift>
 80053be:	9001      	str	r0, [sp, #4]
 80053c0:	9b06      	ldr	r3, [sp, #24]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	dd05      	ble.n	80053d2 <_dtoa_r+0x76a>
 80053c6:	4621      	mov	r1, r4
 80053c8:	461a      	mov	r2, r3
 80053ca:	4648      	mov	r0, r9
 80053cc:	f000 fcb0 	bl	8005d30 <__lshift>
 80053d0:	4604      	mov	r4, r0
 80053d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d056      	beq.n	8005486 <_dtoa_r+0x81e>
 80053d8:	9801      	ldr	r0, [sp, #4]
 80053da:	4621      	mov	r1, r4
 80053dc:	f000 fd14 	bl	8005e08 <__mcmp>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	da50      	bge.n	8005486 <_dtoa_r+0x81e>
 80053e4:	f108 33ff 	add.w	r3, r8, #4294967295
 80053e8:	9304      	str	r3, [sp, #16]
 80053ea:	9901      	ldr	r1, [sp, #4]
 80053ec:	2300      	movs	r3, #0
 80053ee:	220a      	movs	r2, #10
 80053f0:	4648      	mov	r0, r9
 80053f2:	f000 faf1 	bl	80059d8 <__multadd>
 80053f6:	9b08      	ldr	r3, [sp, #32]
 80053f8:	9001      	str	r0, [sp, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 816e 	beq.w	80056dc <_dtoa_r+0xa74>
 8005400:	4629      	mov	r1, r5
 8005402:	2300      	movs	r3, #0
 8005404:	220a      	movs	r2, #10
 8005406:	4648      	mov	r0, r9
 8005408:	f000 fae6 	bl	80059d8 <__multadd>
 800540c:	f1bb 0f00 	cmp.w	fp, #0
 8005410:	4605      	mov	r5, r0
 8005412:	dc64      	bgt.n	80054de <_dtoa_r+0x876>
 8005414:	9b07      	ldr	r3, [sp, #28]
 8005416:	2b02      	cmp	r3, #2
 8005418:	dc3e      	bgt.n	8005498 <_dtoa_r+0x830>
 800541a:	e060      	b.n	80054de <_dtoa_r+0x876>
 800541c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800541e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005422:	e73c      	b.n	800529e <_dtoa_r+0x636>
 8005424:	f10a 34ff 	add.w	r4, sl, #4294967295
 8005428:	42a3      	cmp	r3, r4
 800542a:	bfbf      	itttt	lt
 800542c:	1ae2      	sublt	r2, r4, r3
 800542e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005430:	189b      	addlt	r3, r3, r2
 8005432:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8005434:	bfae      	itee	ge
 8005436:	1b1c      	subge	r4, r3, r4
 8005438:	4623      	movlt	r3, r4
 800543a:	2400      	movlt	r4, #0
 800543c:	f1ba 0f00 	cmp.w	sl, #0
 8005440:	bfb5      	itete	lt
 8005442:	9a05      	ldrlt	r2, [sp, #20]
 8005444:	9e05      	ldrge	r6, [sp, #20]
 8005446:	eba2 060a 	sublt.w	r6, r2, sl
 800544a:	4652      	movge	r2, sl
 800544c:	bfb8      	it	lt
 800544e:	2200      	movlt	r2, #0
 8005450:	e727      	b.n	80052a2 <_dtoa_r+0x63a>
 8005452:	9e05      	ldr	r6, [sp, #20]
 8005454:	9d08      	ldr	r5, [sp, #32]
 8005456:	461c      	mov	r4, r3
 8005458:	e730      	b.n	80052bc <_dtoa_r+0x654>
 800545a:	461a      	mov	r2, r3
 800545c:	e758      	b.n	8005310 <_dtoa_r+0x6a8>
 800545e:	2300      	movs	r3, #0
 8005460:	e786      	b.n	8005370 <_dtoa_r+0x708>
 8005462:	9b02      	ldr	r3, [sp, #8]
 8005464:	e784      	b.n	8005370 <_dtoa_r+0x708>
 8005466:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005468:	e783      	b.n	8005372 <_dtoa_r+0x70a>
 800546a:	2300      	movs	r3, #0
 800546c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800546e:	e784      	b.n	800537a <_dtoa_r+0x712>
 8005470:	d09d      	beq.n	80053ae <_dtoa_r+0x746>
 8005472:	9b05      	ldr	r3, [sp, #20]
 8005474:	321c      	adds	r2, #28
 8005476:	4413      	add	r3, r2
 8005478:	9305      	str	r3, [sp, #20]
 800547a:	9b06      	ldr	r3, [sp, #24]
 800547c:	4416      	add	r6, r2
 800547e:	4413      	add	r3, r2
 8005480:	e794      	b.n	80053ac <_dtoa_r+0x744>
 8005482:	4602      	mov	r2, r0
 8005484:	e7f5      	b.n	8005472 <_dtoa_r+0x80a>
 8005486:	f1ba 0f00 	cmp.w	sl, #0
 800548a:	f8cd 8010 	str.w	r8, [sp, #16]
 800548e:	46d3      	mov	fp, sl
 8005490:	dc21      	bgt.n	80054d6 <_dtoa_r+0x86e>
 8005492:	9b07      	ldr	r3, [sp, #28]
 8005494:	2b02      	cmp	r3, #2
 8005496:	dd1e      	ble.n	80054d6 <_dtoa_r+0x86e>
 8005498:	f1bb 0f00 	cmp.w	fp, #0
 800549c:	f47f aeb7 	bne.w	800520e <_dtoa_r+0x5a6>
 80054a0:	4621      	mov	r1, r4
 80054a2:	465b      	mov	r3, fp
 80054a4:	2205      	movs	r2, #5
 80054a6:	4648      	mov	r0, r9
 80054a8:	f000 fa96 	bl	80059d8 <__multadd>
 80054ac:	4601      	mov	r1, r0
 80054ae:	4604      	mov	r4, r0
 80054b0:	9801      	ldr	r0, [sp, #4]
 80054b2:	f000 fca9 	bl	8005e08 <__mcmp>
 80054b6:	2800      	cmp	r0, #0
 80054b8:	f77f aea9 	ble.w	800520e <_dtoa_r+0x5a6>
 80054bc:	463e      	mov	r6, r7
 80054be:	2331      	movs	r3, #49	@ 0x31
 80054c0:	f806 3b01 	strb.w	r3, [r6], #1
 80054c4:	9b04      	ldr	r3, [sp, #16]
 80054c6:	3301      	adds	r3, #1
 80054c8:	9304      	str	r3, [sp, #16]
 80054ca:	e6a4      	b.n	8005216 <_dtoa_r+0x5ae>
 80054cc:	f8cd 8010 	str.w	r8, [sp, #16]
 80054d0:	4654      	mov	r4, sl
 80054d2:	4625      	mov	r5, r4
 80054d4:	e7f2      	b.n	80054bc <_dtoa_r+0x854>
 80054d6:	9b08      	ldr	r3, [sp, #32]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 8103 	beq.w	80056e4 <_dtoa_r+0xa7c>
 80054de:	2e00      	cmp	r6, #0
 80054e0:	dd05      	ble.n	80054ee <_dtoa_r+0x886>
 80054e2:	4629      	mov	r1, r5
 80054e4:	4632      	mov	r2, r6
 80054e6:	4648      	mov	r0, r9
 80054e8:	f000 fc22 	bl	8005d30 <__lshift>
 80054ec:	4605      	mov	r5, r0
 80054ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d058      	beq.n	80055a6 <_dtoa_r+0x93e>
 80054f4:	6869      	ldr	r1, [r5, #4]
 80054f6:	4648      	mov	r0, r9
 80054f8:	f000 fa0c 	bl	8005914 <_Balloc>
 80054fc:	4606      	mov	r6, r0
 80054fe:	b928      	cbnz	r0, 800550c <_dtoa_r+0x8a4>
 8005500:	4b82      	ldr	r3, [pc, #520]	@ (800570c <_dtoa_r+0xaa4>)
 8005502:	4602      	mov	r2, r0
 8005504:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005508:	f7ff bbc7 	b.w	8004c9a <_dtoa_r+0x32>
 800550c:	692a      	ldr	r2, [r5, #16]
 800550e:	3202      	adds	r2, #2
 8005510:	0092      	lsls	r2, r2, #2
 8005512:	f105 010c 	add.w	r1, r5, #12
 8005516:	300c      	adds	r0, #12
 8005518:	f000 ffac 	bl	8006474 <memcpy>
 800551c:	2201      	movs	r2, #1
 800551e:	4631      	mov	r1, r6
 8005520:	4648      	mov	r0, r9
 8005522:	f000 fc05 	bl	8005d30 <__lshift>
 8005526:	1c7b      	adds	r3, r7, #1
 8005528:	9305      	str	r3, [sp, #20]
 800552a:	eb07 030b 	add.w	r3, r7, fp
 800552e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005530:	9b02      	ldr	r3, [sp, #8]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	46a8      	mov	r8, r5
 8005538:	9308      	str	r3, [sp, #32]
 800553a:	4605      	mov	r5, r0
 800553c:	9b05      	ldr	r3, [sp, #20]
 800553e:	9801      	ldr	r0, [sp, #4]
 8005540:	4621      	mov	r1, r4
 8005542:	f103 3bff 	add.w	fp, r3, #4294967295
 8005546:	f7ff fb04 	bl	8004b52 <quorem>
 800554a:	4641      	mov	r1, r8
 800554c:	9002      	str	r0, [sp, #8]
 800554e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8005552:	9801      	ldr	r0, [sp, #4]
 8005554:	f000 fc58 	bl	8005e08 <__mcmp>
 8005558:	462a      	mov	r2, r5
 800555a:	9006      	str	r0, [sp, #24]
 800555c:	4621      	mov	r1, r4
 800555e:	4648      	mov	r0, r9
 8005560:	f000 fc6e 	bl	8005e40 <__mdiff>
 8005564:	68c2      	ldr	r2, [r0, #12]
 8005566:	4606      	mov	r6, r0
 8005568:	b9fa      	cbnz	r2, 80055aa <_dtoa_r+0x942>
 800556a:	4601      	mov	r1, r0
 800556c:	9801      	ldr	r0, [sp, #4]
 800556e:	f000 fc4b 	bl	8005e08 <__mcmp>
 8005572:	4602      	mov	r2, r0
 8005574:	4631      	mov	r1, r6
 8005576:	4648      	mov	r0, r9
 8005578:	920a      	str	r2, [sp, #40]	@ 0x28
 800557a:	f000 fa0b 	bl	8005994 <_Bfree>
 800557e:	9b07      	ldr	r3, [sp, #28]
 8005580:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005582:	9e05      	ldr	r6, [sp, #20]
 8005584:	ea43 0102 	orr.w	r1, r3, r2
 8005588:	9b08      	ldr	r3, [sp, #32]
 800558a:	4319      	orrs	r1, r3
 800558c:	d10f      	bne.n	80055ae <_dtoa_r+0x946>
 800558e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005592:	d028      	beq.n	80055e6 <_dtoa_r+0x97e>
 8005594:	9b06      	ldr	r3, [sp, #24]
 8005596:	2b00      	cmp	r3, #0
 8005598:	dd02      	ble.n	80055a0 <_dtoa_r+0x938>
 800559a:	9b02      	ldr	r3, [sp, #8]
 800559c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80055a0:	f88b a000 	strb.w	sl, [fp]
 80055a4:	e639      	b.n	800521a <_dtoa_r+0x5b2>
 80055a6:	4628      	mov	r0, r5
 80055a8:	e7bd      	b.n	8005526 <_dtoa_r+0x8be>
 80055aa:	2201      	movs	r2, #1
 80055ac:	e7e2      	b.n	8005574 <_dtoa_r+0x90c>
 80055ae:	9b06      	ldr	r3, [sp, #24]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	db04      	blt.n	80055be <_dtoa_r+0x956>
 80055b4:	9907      	ldr	r1, [sp, #28]
 80055b6:	430b      	orrs	r3, r1
 80055b8:	9908      	ldr	r1, [sp, #32]
 80055ba:	430b      	orrs	r3, r1
 80055bc:	d120      	bne.n	8005600 <_dtoa_r+0x998>
 80055be:	2a00      	cmp	r2, #0
 80055c0:	ddee      	ble.n	80055a0 <_dtoa_r+0x938>
 80055c2:	9901      	ldr	r1, [sp, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	4648      	mov	r0, r9
 80055c8:	f000 fbb2 	bl	8005d30 <__lshift>
 80055cc:	4621      	mov	r1, r4
 80055ce:	9001      	str	r0, [sp, #4]
 80055d0:	f000 fc1a 	bl	8005e08 <__mcmp>
 80055d4:	2800      	cmp	r0, #0
 80055d6:	dc03      	bgt.n	80055e0 <_dtoa_r+0x978>
 80055d8:	d1e2      	bne.n	80055a0 <_dtoa_r+0x938>
 80055da:	f01a 0f01 	tst.w	sl, #1
 80055de:	d0df      	beq.n	80055a0 <_dtoa_r+0x938>
 80055e0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80055e4:	d1d9      	bne.n	800559a <_dtoa_r+0x932>
 80055e6:	2339      	movs	r3, #57	@ 0x39
 80055e8:	f88b 3000 	strb.w	r3, [fp]
 80055ec:	4633      	mov	r3, r6
 80055ee:	461e      	mov	r6, r3
 80055f0:	3b01      	subs	r3, #1
 80055f2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80055f6:	2a39      	cmp	r2, #57	@ 0x39
 80055f8:	d053      	beq.n	80056a2 <_dtoa_r+0xa3a>
 80055fa:	3201      	adds	r2, #1
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	e60c      	b.n	800521a <_dtoa_r+0x5b2>
 8005600:	2a00      	cmp	r2, #0
 8005602:	dd07      	ble.n	8005614 <_dtoa_r+0x9ac>
 8005604:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005608:	d0ed      	beq.n	80055e6 <_dtoa_r+0x97e>
 800560a:	f10a 0301 	add.w	r3, sl, #1
 800560e:	f88b 3000 	strb.w	r3, [fp]
 8005612:	e602      	b.n	800521a <_dtoa_r+0x5b2>
 8005614:	9b05      	ldr	r3, [sp, #20]
 8005616:	9a05      	ldr	r2, [sp, #20]
 8005618:	f803 ac01 	strb.w	sl, [r3, #-1]
 800561c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800561e:	4293      	cmp	r3, r2
 8005620:	d029      	beq.n	8005676 <_dtoa_r+0xa0e>
 8005622:	9901      	ldr	r1, [sp, #4]
 8005624:	2300      	movs	r3, #0
 8005626:	220a      	movs	r2, #10
 8005628:	4648      	mov	r0, r9
 800562a:	f000 f9d5 	bl	80059d8 <__multadd>
 800562e:	45a8      	cmp	r8, r5
 8005630:	9001      	str	r0, [sp, #4]
 8005632:	f04f 0300 	mov.w	r3, #0
 8005636:	f04f 020a 	mov.w	r2, #10
 800563a:	4641      	mov	r1, r8
 800563c:	4648      	mov	r0, r9
 800563e:	d107      	bne.n	8005650 <_dtoa_r+0x9e8>
 8005640:	f000 f9ca 	bl	80059d8 <__multadd>
 8005644:	4680      	mov	r8, r0
 8005646:	4605      	mov	r5, r0
 8005648:	9b05      	ldr	r3, [sp, #20]
 800564a:	3301      	adds	r3, #1
 800564c:	9305      	str	r3, [sp, #20]
 800564e:	e775      	b.n	800553c <_dtoa_r+0x8d4>
 8005650:	f000 f9c2 	bl	80059d8 <__multadd>
 8005654:	4629      	mov	r1, r5
 8005656:	4680      	mov	r8, r0
 8005658:	2300      	movs	r3, #0
 800565a:	220a      	movs	r2, #10
 800565c:	4648      	mov	r0, r9
 800565e:	f000 f9bb 	bl	80059d8 <__multadd>
 8005662:	4605      	mov	r5, r0
 8005664:	e7f0      	b.n	8005648 <_dtoa_r+0x9e0>
 8005666:	f1bb 0f00 	cmp.w	fp, #0
 800566a:	bfcc      	ite	gt
 800566c:	465e      	movgt	r6, fp
 800566e:	2601      	movle	r6, #1
 8005670:	443e      	add	r6, r7
 8005672:	f04f 0800 	mov.w	r8, #0
 8005676:	9901      	ldr	r1, [sp, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	4648      	mov	r0, r9
 800567c:	f000 fb58 	bl	8005d30 <__lshift>
 8005680:	4621      	mov	r1, r4
 8005682:	9001      	str	r0, [sp, #4]
 8005684:	f000 fbc0 	bl	8005e08 <__mcmp>
 8005688:	2800      	cmp	r0, #0
 800568a:	dcaf      	bgt.n	80055ec <_dtoa_r+0x984>
 800568c:	d102      	bne.n	8005694 <_dtoa_r+0xa2c>
 800568e:	f01a 0f01 	tst.w	sl, #1
 8005692:	d1ab      	bne.n	80055ec <_dtoa_r+0x984>
 8005694:	4633      	mov	r3, r6
 8005696:	461e      	mov	r6, r3
 8005698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800569c:	2a30      	cmp	r2, #48	@ 0x30
 800569e:	d0fa      	beq.n	8005696 <_dtoa_r+0xa2e>
 80056a0:	e5bb      	b.n	800521a <_dtoa_r+0x5b2>
 80056a2:	429f      	cmp	r7, r3
 80056a4:	d1a3      	bne.n	80055ee <_dtoa_r+0x986>
 80056a6:	9b04      	ldr	r3, [sp, #16]
 80056a8:	3301      	adds	r3, #1
 80056aa:	9304      	str	r3, [sp, #16]
 80056ac:	2331      	movs	r3, #49	@ 0x31
 80056ae:	703b      	strb	r3, [r7, #0]
 80056b0:	e5b3      	b.n	800521a <_dtoa_r+0x5b2>
 80056b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80056b4:	4f16      	ldr	r7, [pc, #88]	@ (8005710 <_dtoa_r+0xaa8>)
 80056b6:	b11b      	cbz	r3, 80056c0 <_dtoa_r+0xa58>
 80056b8:	f107 0308 	add.w	r3, r7, #8
 80056bc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	4638      	mov	r0, r7
 80056c2:	b011      	add	sp, #68	@ 0x44
 80056c4:	ecbd 8b02 	vpop	{d8}
 80056c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056cc:	9b07      	ldr	r3, [sp, #28]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	f77f ae36 	ble.w	8005340 <_dtoa_r+0x6d8>
 80056d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80056d8:	2001      	movs	r0, #1
 80056da:	e656      	b.n	800538a <_dtoa_r+0x722>
 80056dc:	f1bb 0f00 	cmp.w	fp, #0
 80056e0:	f77f aed7 	ble.w	8005492 <_dtoa_r+0x82a>
 80056e4:	463e      	mov	r6, r7
 80056e6:	9801      	ldr	r0, [sp, #4]
 80056e8:	4621      	mov	r1, r4
 80056ea:	f7ff fa32 	bl	8004b52 <quorem>
 80056ee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80056f2:	f806 ab01 	strb.w	sl, [r6], #1
 80056f6:	1bf2      	subs	r2, r6, r7
 80056f8:	4593      	cmp	fp, r2
 80056fa:	ddb4      	ble.n	8005666 <_dtoa_r+0x9fe>
 80056fc:	9901      	ldr	r1, [sp, #4]
 80056fe:	2300      	movs	r3, #0
 8005700:	220a      	movs	r2, #10
 8005702:	4648      	mov	r0, r9
 8005704:	f000 f968 	bl	80059d8 <__multadd>
 8005708:	9001      	str	r0, [sp, #4]
 800570a:	e7ec      	b.n	80056e6 <_dtoa_r+0xa7e>
 800570c:	08006c84 	.word	0x08006c84
 8005710:	08006c08 	.word	0x08006c08

08005714 <_free_r>:
 8005714:	b538      	push	{r3, r4, r5, lr}
 8005716:	4605      	mov	r5, r0
 8005718:	2900      	cmp	r1, #0
 800571a:	d041      	beq.n	80057a0 <_free_r+0x8c>
 800571c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005720:	1f0c      	subs	r4, r1, #4
 8005722:	2b00      	cmp	r3, #0
 8005724:	bfb8      	it	lt
 8005726:	18e4      	addlt	r4, r4, r3
 8005728:	f000 f8e8 	bl	80058fc <__malloc_lock>
 800572c:	4a1d      	ldr	r2, [pc, #116]	@ (80057a4 <_free_r+0x90>)
 800572e:	6813      	ldr	r3, [r2, #0]
 8005730:	b933      	cbnz	r3, 8005740 <_free_r+0x2c>
 8005732:	6063      	str	r3, [r4, #4]
 8005734:	6014      	str	r4, [r2, #0]
 8005736:	4628      	mov	r0, r5
 8005738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800573c:	f000 b8e4 	b.w	8005908 <__malloc_unlock>
 8005740:	42a3      	cmp	r3, r4
 8005742:	d908      	bls.n	8005756 <_free_r+0x42>
 8005744:	6820      	ldr	r0, [r4, #0]
 8005746:	1821      	adds	r1, r4, r0
 8005748:	428b      	cmp	r3, r1
 800574a:	bf01      	itttt	eq
 800574c:	6819      	ldreq	r1, [r3, #0]
 800574e:	685b      	ldreq	r3, [r3, #4]
 8005750:	1809      	addeq	r1, r1, r0
 8005752:	6021      	streq	r1, [r4, #0]
 8005754:	e7ed      	b.n	8005732 <_free_r+0x1e>
 8005756:	461a      	mov	r2, r3
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	b10b      	cbz	r3, 8005760 <_free_r+0x4c>
 800575c:	42a3      	cmp	r3, r4
 800575e:	d9fa      	bls.n	8005756 <_free_r+0x42>
 8005760:	6811      	ldr	r1, [r2, #0]
 8005762:	1850      	adds	r0, r2, r1
 8005764:	42a0      	cmp	r0, r4
 8005766:	d10b      	bne.n	8005780 <_free_r+0x6c>
 8005768:	6820      	ldr	r0, [r4, #0]
 800576a:	4401      	add	r1, r0
 800576c:	1850      	adds	r0, r2, r1
 800576e:	4283      	cmp	r3, r0
 8005770:	6011      	str	r1, [r2, #0]
 8005772:	d1e0      	bne.n	8005736 <_free_r+0x22>
 8005774:	6818      	ldr	r0, [r3, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	6053      	str	r3, [r2, #4]
 800577a:	4408      	add	r0, r1
 800577c:	6010      	str	r0, [r2, #0]
 800577e:	e7da      	b.n	8005736 <_free_r+0x22>
 8005780:	d902      	bls.n	8005788 <_free_r+0x74>
 8005782:	230c      	movs	r3, #12
 8005784:	602b      	str	r3, [r5, #0]
 8005786:	e7d6      	b.n	8005736 <_free_r+0x22>
 8005788:	6820      	ldr	r0, [r4, #0]
 800578a:	1821      	adds	r1, r4, r0
 800578c:	428b      	cmp	r3, r1
 800578e:	bf04      	itt	eq
 8005790:	6819      	ldreq	r1, [r3, #0]
 8005792:	685b      	ldreq	r3, [r3, #4]
 8005794:	6063      	str	r3, [r4, #4]
 8005796:	bf04      	itt	eq
 8005798:	1809      	addeq	r1, r1, r0
 800579a:	6021      	streq	r1, [r4, #0]
 800579c:	6054      	str	r4, [r2, #4]
 800579e:	e7ca      	b.n	8005736 <_free_r+0x22>
 80057a0:	bd38      	pop	{r3, r4, r5, pc}
 80057a2:	bf00      	nop
 80057a4:	20000428 	.word	0x20000428

080057a8 <malloc>:
 80057a8:	4b02      	ldr	r3, [pc, #8]	@ (80057b4 <malloc+0xc>)
 80057aa:	4601      	mov	r1, r0
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	f000 b825 	b.w	80057fc <_malloc_r>
 80057b2:	bf00      	nop
 80057b4:	20000020 	.word	0x20000020

080057b8 <sbrk_aligned>:
 80057b8:	b570      	push	{r4, r5, r6, lr}
 80057ba:	4e0f      	ldr	r6, [pc, #60]	@ (80057f8 <sbrk_aligned+0x40>)
 80057bc:	460c      	mov	r4, r1
 80057be:	6831      	ldr	r1, [r6, #0]
 80057c0:	4605      	mov	r5, r0
 80057c2:	b911      	cbnz	r1, 80057ca <sbrk_aligned+0x12>
 80057c4:	f000 fe46 	bl	8006454 <_sbrk_r>
 80057c8:	6030      	str	r0, [r6, #0]
 80057ca:	4621      	mov	r1, r4
 80057cc:	4628      	mov	r0, r5
 80057ce:	f000 fe41 	bl	8006454 <_sbrk_r>
 80057d2:	1c43      	adds	r3, r0, #1
 80057d4:	d103      	bne.n	80057de <sbrk_aligned+0x26>
 80057d6:	f04f 34ff 	mov.w	r4, #4294967295
 80057da:	4620      	mov	r0, r4
 80057dc:	bd70      	pop	{r4, r5, r6, pc}
 80057de:	1cc4      	adds	r4, r0, #3
 80057e0:	f024 0403 	bic.w	r4, r4, #3
 80057e4:	42a0      	cmp	r0, r4
 80057e6:	d0f8      	beq.n	80057da <sbrk_aligned+0x22>
 80057e8:	1a21      	subs	r1, r4, r0
 80057ea:	4628      	mov	r0, r5
 80057ec:	f000 fe32 	bl	8006454 <_sbrk_r>
 80057f0:	3001      	adds	r0, #1
 80057f2:	d1f2      	bne.n	80057da <sbrk_aligned+0x22>
 80057f4:	e7ef      	b.n	80057d6 <sbrk_aligned+0x1e>
 80057f6:	bf00      	nop
 80057f8:	20000424 	.word	0x20000424

080057fc <_malloc_r>:
 80057fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005800:	1ccd      	adds	r5, r1, #3
 8005802:	f025 0503 	bic.w	r5, r5, #3
 8005806:	3508      	adds	r5, #8
 8005808:	2d0c      	cmp	r5, #12
 800580a:	bf38      	it	cc
 800580c:	250c      	movcc	r5, #12
 800580e:	2d00      	cmp	r5, #0
 8005810:	4606      	mov	r6, r0
 8005812:	db01      	blt.n	8005818 <_malloc_r+0x1c>
 8005814:	42a9      	cmp	r1, r5
 8005816:	d904      	bls.n	8005822 <_malloc_r+0x26>
 8005818:	230c      	movs	r3, #12
 800581a:	6033      	str	r3, [r6, #0]
 800581c:	2000      	movs	r0, #0
 800581e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005822:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80058f8 <_malloc_r+0xfc>
 8005826:	f000 f869 	bl	80058fc <__malloc_lock>
 800582a:	f8d8 3000 	ldr.w	r3, [r8]
 800582e:	461c      	mov	r4, r3
 8005830:	bb44      	cbnz	r4, 8005884 <_malloc_r+0x88>
 8005832:	4629      	mov	r1, r5
 8005834:	4630      	mov	r0, r6
 8005836:	f7ff ffbf 	bl	80057b8 <sbrk_aligned>
 800583a:	1c43      	adds	r3, r0, #1
 800583c:	4604      	mov	r4, r0
 800583e:	d158      	bne.n	80058f2 <_malloc_r+0xf6>
 8005840:	f8d8 4000 	ldr.w	r4, [r8]
 8005844:	4627      	mov	r7, r4
 8005846:	2f00      	cmp	r7, #0
 8005848:	d143      	bne.n	80058d2 <_malloc_r+0xd6>
 800584a:	2c00      	cmp	r4, #0
 800584c:	d04b      	beq.n	80058e6 <_malloc_r+0xea>
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	4639      	mov	r1, r7
 8005852:	4630      	mov	r0, r6
 8005854:	eb04 0903 	add.w	r9, r4, r3
 8005858:	f000 fdfc 	bl	8006454 <_sbrk_r>
 800585c:	4581      	cmp	r9, r0
 800585e:	d142      	bne.n	80058e6 <_malloc_r+0xea>
 8005860:	6821      	ldr	r1, [r4, #0]
 8005862:	1a6d      	subs	r5, r5, r1
 8005864:	4629      	mov	r1, r5
 8005866:	4630      	mov	r0, r6
 8005868:	f7ff ffa6 	bl	80057b8 <sbrk_aligned>
 800586c:	3001      	adds	r0, #1
 800586e:	d03a      	beq.n	80058e6 <_malloc_r+0xea>
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	442b      	add	r3, r5
 8005874:	6023      	str	r3, [r4, #0]
 8005876:	f8d8 3000 	ldr.w	r3, [r8]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	bb62      	cbnz	r2, 80058d8 <_malloc_r+0xdc>
 800587e:	f8c8 7000 	str.w	r7, [r8]
 8005882:	e00f      	b.n	80058a4 <_malloc_r+0xa8>
 8005884:	6822      	ldr	r2, [r4, #0]
 8005886:	1b52      	subs	r2, r2, r5
 8005888:	d420      	bmi.n	80058cc <_malloc_r+0xd0>
 800588a:	2a0b      	cmp	r2, #11
 800588c:	d917      	bls.n	80058be <_malloc_r+0xc2>
 800588e:	1961      	adds	r1, r4, r5
 8005890:	42a3      	cmp	r3, r4
 8005892:	6025      	str	r5, [r4, #0]
 8005894:	bf18      	it	ne
 8005896:	6059      	strne	r1, [r3, #4]
 8005898:	6863      	ldr	r3, [r4, #4]
 800589a:	bf08      	it	eq
 800589c:	f8c8 1000 	streq.w	r1, [r8]
 80058a0:	5162      	str	r2, [r4, r5]
 80058a2:	604b      	str	r3, [r1, #4]
 80058a4:	4630      	mov	r0, r6
 80058a6:	f000 f82f 	bl	8005908 <__malloc_unlock>
 80058aa:	f104 000b 	add.w	r0, r4, #11
 80058ae:	1d23      	adds	r3, r4, #4
 80058b0:	f020 0007 	bic.w	r0, r0, #7
 80058b4:	1ac2      	subs	r2, r0, r3
 80058b6:	bf1c      	itt	ne
 80058b8:	1a1b      	subne	r3, r3, r0
 80058ba:	50a3      	strne	r3, [r4, r2]
 80058bc:	e7af      	b.n	800581e <_malloc_r+0x22>
 80058be:	6862      	ldr	r2, [r4, #4]
 80058c0:	42a3      	cmp	r3, r4
 80058c2:	bf0c      	ite	eq
 80058c4:	f8c8 2000 	streq.w	r2, [r8]
 80058c8:	605a      	strne	r2, [r3, #4]
 80058ca:	e7eb      	b.n	80058a4 <_malloc_r+0xa8>
 80058cc:	4623      	mov	r3, r4
 80058ce:	6864      	ldr	r4, [r4, #4]
 80058d0:	e7ae      	b.n	8005830 <_malloc_r+0x34>
 80058d2:	463c      	mov	r4, r7
 80058d4:	687f      	ldr	r7, [r7, #4]
 80058d6:	e7b6      	b.n	8005846 <_malloc_r+0x4a>
 80058d8:	461a      	mov	r2, r3
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	42a3      	cmp	r3, r4
 80058de:	d1fb      	bne.n	80058d8 <_malloc_r+0xdc>
 80058e0:	2300      	movs	r3, #0
 80058e2:	6053      	str	r3, [r2, #4]
 80058e4:	e7de      	b.n	80058a4 <_malloc_r+0xa8>
 80058e6:	230c      	movs	r3, #12
 80058e8:	6033      	str	r3, [r6, #0]
 80058ea:	4630      	mov	r0, r6
 80058ec:	f000 f80c 	bl	8005908 <__malloc_unlock>
 80058f0:	e794      	b.n	800581c <_malloc_r+0x20>
 80058f2:	6005      	str	r5, [r0, #0]
 80058f4:	e7d6      	b.n	80058a4 <_malloc_r+0xa8>
 80058f6:	bf00      	nop
 80058f8:	20000428 	.word	0x20000428

080058fc <__malloc_lock>:
 80058fc:	4801      	ldr	r0, [pc, #4]	@ (8005904 <__malloc_lock+0x8>)
 80058fe:	f7ff b926 	b.w	8004b4e <__retarget_lock_acquire_recursive>
 8005902:	bf00      	nop
 8005904:	20000420 	.word	0x20000420

08005908 <__malloc_unlock>:
 8005908:	4801      	ldr	r0, [pc, #4]	@ (8005910 <__malloc_unlock+0x8>)
 800590a:	f7ff b921 	b.w	8004b50 <__retarget_lock_release_recursive>
 800590e:	bf00      	nop
 8005910:	20000420 	.word	0x20000420

08005914 <_Balloc>:
 8005914:	b570      	push	{r4, r5, r6, lr}
 8005916:	69c6      	ldr	r6, [r0, #28]
 8005918:	4604      	mov	r4, r0
 800591a:	460d      	mov	r5, r1
 800591c:	b976      	cbnz	r6, 800593c <_Balloc+0x28>
 800591e:	2010      	movs	r0, #16
 8005920:	f7ff ff42 	bl	80057a8 <malloc>
 8005924:	4602      	mov	r2, r0
 8005926:	61e0      	str	r0, [r4, #28]
 8005928:	b920      	cbnz	r0, 8005934 <_Balloc+0x20>
 800592a:	4b18      	ldr	r3, [pc, #96]	@ (800598c <_Balloc+0x78>)
 800592c:	4818      	ldr	r0, [pc, #96]	@ (8005990 <_Balloc+0x7c>)
 800592e:	216b      	movs	r1, #107	@ 0x6b
 8005930:	f000 fdae 	bl	8006490 <__assert_func>
 8005934:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005938:	6006      	str	r6, [r0, #0]
 800593a:	60c6      	str	r6, [r0, #12]
 800593c:	69e6      	ldr	r6, [r4, #28]
 800593e:	68f3      	ldr	r3, [r6, #12]
 8005940:	b183      	cbz	r3, 8005964 <_Balloc+0x50>
 8005942:	69e3      	ldr	r3, [r4, #28]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800594a:	b9b8      	cbnz	r0, 800597c <_Balloc+0x68>
 800594c:	2101      	movs	r1, #1
 800594e:	fa01 f605 	lsl.w	r6, r1, r5
 8005952:	1d72      	adds	r2, r6, #5
 8005954:	0092      	lsls	r2, r2, #2
 8005956:	4620      	mov	r0, r4
 8005958:	f000 fdb8 	bl	80064cc <_calloc_r>
 800595c:	b160      	cbz	r0, 8005978 <_Balloc+0x64>
 800595e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005962:	e00e      	b.n	8005982 <_Balloc+0x6e>
 8005964:	2221      	movs	r2, #33	@ 0x21
 8005966:	2104      	movs	r1, #4
 8005968:	4620      	mov	r0, r4
 800596a:	f000 fdaf 	bl	80064cc <_calloc_r>
 800596e:	69e3      	ldr	r3, [r4, #28]
 8005970:	60f0      	str	r0, [r6, #12]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1e4      	bne.n	8005942 <_Balloc+0x2e>
 8005978:	2000      	movs	r0, #0
 800597a:	bd70      	pop	{r4, r5, r6, pc}
 800597c:	6802      	ldr	r2, [r0, #0]
 800597e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005982:	2300      	movs	r3, #0
 8005984:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005988:	e7f7      	b.n	800597a <_Balloc+0x66>
 800598a:	bf00      	nop
 800598c:	08006c15 	.word	0x08006c15
 8005990:	08006c95 	.word	0x08006c95

08005994 <_Bfree>:
 8005994:	b570      	push	{r4, r5, r6, lr}
 8005996:	69c6      	ldr	r6, [r0, #28]
 8005998:	4605      	mov	r5, r0
 800599a:	460c      	mov	r4, r1
 800599c:	b976      	cbnz	r6, 80059bc <_Bfree+0x28>
 800599e:	2010      	movs	r0, #16
 80059a0:	f7ff ff02 	bl	80057a8 <malloc>
 80059a4:	4602      	mov	r2, r0
 80059a6:	61e8      	str	r0, [r5, #28]
 80059a8:	b920      	cbnz	r0, 80059b4 <_Bfree+0x20>
 80059aa:	4b09      	ldr	r3, [pc, #36]	@ (80059d0 <_Bfree+0x3c>)
 80059ac:	4809      	ldr	r0, [pc, #36]	@ (80059d4 <_Bfree+0x40>)
 80059ae:	218f      	movs	r1, #143	@ 0x8f
 80059b0:	f000 fd6e 	bl	8006490 <__assert_func>
 80059b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059b8:	6006      	str	r6, [r0, #0]
 80059ba:	60c6      	str	r6, [r0, #12]
 80059bc:	b13c      	cbz	r4, 80059ce <_Bfree+0x3a>
 80059be:	69eb      	ldr	r3, [r5, #28]
 80059c0:	6862      	ldr	r2, [r4, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059c8:	6021      	str	r1, [r4, #0]
 80059ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80059ce:	bd70      	pop	{r4, r5, r6, pc}
 80059d0:	08006c15 	.word	0x08006c15
 80059d4:	08006c95 	.word	0x08006c95

080059d8 <__multadd>:
 80059d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059dc:	690d      	ldr	r5, [r1, #16]
 80059de:	4607      	mov	r7, r0
 80059e0:	460c      	mov	r4, r1
 80059e2:	461e      	mov	r6, r3
 80059e4:	f101 0c14 	add.w	ip, r1, #20
 80059e8:	2000      	movs	r0, #0
 80059ea:	f8dc 3000 	ldr.w	r3, [ip]
 80059ee:	b299      	uxth	r1, r3
 80059f0:	fb02 6101 	mla	r1, r2, r1, r6
 80059f4:	0c1e      	lsrs	r6, r3, #16
 80059f6:	0c0b      	lsrs	r3, r1, #16
 80059f8:	fb02 3306 	mla	r3, r2, r6, r3
 80059fc:	b289      	uxth	r1, r1
 80059fe:	3001      	adds	r0, #1
 8005a00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a04:	4285      	cmp	r5, r0
 8005a06:	f84c 1b04 	str.w	r1, [ip], #4
 8005a0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a0e:	dcec      	bgt.n	80059ea <__multadd+0x12>
 8005a10:	b30e      	cbz	r6, 8005a56 <__multadd+0x7e>
 8005a12:	68a3      	ldr	r3, [r4, #8]
 8005a14:	42ab      	cmp	r3, r5
 8005a16:	dc19      	bgt.n	8005a4c <__multadd+0x74>
 8005a18:	6861      	ldr	r1, [r4, #4]
 8005a1a:	4638      	mov	r0, r7
 8005a1c:	3101      	adds	r1, #1
 8005a1e:	f7ff ff79 	bl	8005914 <_Balloc>
 8005a22:	4680      	mov	r8, r0
 8005a24:	b928      	cbnz	r0, 8005a32 <__multadd+0x5a>
 8005a26:	4602      	mov	r2, r0
 8005a28:	4b0c      	ldr	r3, [pc, #48]	@ (8005a5c <__multadd+0x84>)
 8005a2a:	480d      	ldr	r0, [pc, #52]	@ (8005a60 <__multadd+0x88>)
 8005a2c:	21ba      	movs	r1, #186	@ 0xba
 8005a2e:	f000 fd2f 	bl	8006490 <__assert_func>
 8005a32:	6922      	ldr	r2, [r4, #16]
 8005a34:	3202      	adds	r2, #2
 8005a36:	f104 010c 	add.w	r1, r4, #12
 8005a3a:	0092      	lsls	r2, r2, #2
 8005a3c:	300c      	adds	r0, #12
 8005a3e:	f000 fd19 	bl	8006474 <memcpy>
 8005a42:	4621      	mov	r1, r4
 8005a44:	4638      	mov	r0, r7
 8005a46:	f7ff ffa5 	bl	8005994 <_Bfree>
 8005a4a:	4644      	mov	r4, r8
 8005a4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a50:	3501      	adds	r5, #1
 8005a52:	615e      	str	r6, [r3, #20]
 8005a54:	6125      	str	r5, [r4, #16]
 8005a56:	4620      	mov	r0, r4
 8005a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a5c:	08006c84 	.word	0x08006c84
 8005a60:	08006c95 	.word	0x08006c95

08005a64 <__hi0bits>:
 8005a64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005a68:	4603      	mov	r3, r0
 8005a6a:	bf36      	itet	cc
 8005a6c:	0403      	lslcc	r3, r0, #16
 8005a6e:	2000      	movcs	r0, #0
 8005a70:	2010      	movcc	r0, #16
 8005a72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a76:	bf3c      	itt	cc
 8005a78:	021b      	lslcc	r3, r3, #8
 8005a7a:	3008      	addcc	r0, #8
 8005a7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a80:	bf3c      	itt	cc
 8005a82:	011b      	lslcc	r3, r3, #4
 8005a84:	3004      	addcc	r0, #4
 8005a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a8a:	bf3c      	itt	cc
 8005a8c:	009b      	lslcc	r3, r3, #2
 8005a8e:	3002      	addcc	r0, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	db05      	blt.n	8005aa0 <__hi0bits+0x3c>
 8005a94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005a98:	f100 0001 	add.w	r0, r0, #1
 8005a9c:	bf08      	it	eq
 8005a9e:	2020      	moveq	r0, #32
 8005aa0:	4770      	bx	lr

08005aa2 <__lo0bits>:
 8005aa2:	6803      	ldr	r3, [r0, #0]
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	f013 0007 	ands.w	r0, r3, #7
 8005aaa:	d00b      	beq.n	8005ac4 <__lo0bits+0x22>
 8005aac:	07d9      	lsls	r1, r3, #31
 8005aae:	d421      	bmi.n	8005af4 <__lo0bits+0x52>
 8005ab0:	0798      	lsls	r0, r3, #30
 8005ab2:	bf49      	itett	mi
 8005ab4:	085b      	lsrmi	r3, r3, #1
 8005ab6:	089b      	lsrpl	r3, r3, #2
 8005ab8:	2001      	movmi	r0, #1
 8005aba:	6013      	strmi	r3, [r2, #0]
 8005abc:	bf5c      	itt	pl
 8005abe:	6013      	strpl	r3, [r2, #0]
 8005ac0:	2002      	movpl	r0, #2
 8005ac2:	4770      	bx	lr
 8005ac4:	b299      	uxth	r1, r3
 8005ac6:	b909      	cbnz	r1, 8005acc <__lo0bits+0x2a>
 8005ac8:	0c1b      	lsrs	r3, r3, #16
 8005aca:	2010      	movs	r0, #16
 8005acc:	b2d9      	uxtb	r1, r3
 8005ace:	b909      	cbnz	r1, 8005ad4 <__lo0bits+0x32>
 8005ad0:	3008      	adds	r0, #8
 8005ad2:	0a1b      	lsrs	r3, r3, #8
 8005ad4:	0719      	lsls	r1, r3, #28
 8005ad6:	bf04      	itt	eq
 8005ad8:	091b      	lsreq	r3, r3, #4
 8005ada:	3004      	addeq	r0, #4
 8005adc:	0799      	lsls	r1, r3, #30
 8005ade:	bf04      	itt	eq
 8005ae0:	089b      	lsreq	r3, r3, #2
 8005ae2:	3002      	addeq	r0, #2
 8005ae4:	07d9      	lsls	r1, r3, #31
 8005ae6:	d403      	bmi.n	8005af0 <__lo0bits+0x4e>
 8005ae8:	085b      	lsrs	r3, r3, #1
 8005aea:	f100 0001 	add.w	r0, r0, #1
 8005aee:	d003      	beq.n	8005af8 <__lo0bits+0x56>
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	4770      	bx	lr
 8005af4:	2000      	movs	r0, #0
 8005af6:	4770      	bx	lr
 8005af8:	2020      	movs	r0, #32
 8005afa:	4770      	bx	lr

08005afc <__i2b>:
 8005afc:	b510      	push	{r4, lr}
 8005afe:	460c      	mov	r4, r1
 8005b00:	2101      	movs	r1, #1
 8005b02:	f7ff ff07 	bl	8005914 <_Balloc>
 8005b06:	4602      	mov	r2, r0
 8005b08:	b928      	cbnz	r0, 8005b16 <__i2b+0x1a>
 8005b0a:	4b05      	ldr	r3, [pc, #20]	@ (8005b20 <__i2b+0x24>)
 8005b0c:	4805      	ldr	r0, [pc, #20]	@ (8005b24 <__i2b+0x28>)
 8005b0e:	f240 1145 	movw	r1, #325	@ 0x145
 8005b12:	f000 fcbd 	bl	8006490 <__assert_func>
 8005b16:	2301      	movs	r3, #1
 8005b18:	6144      	str	r4, [r0, #20]
 8005b1a:	6103      	str	r3, [r0, #16]
 8005b1c:	bd10      	pop	{r4, pc}
 8005b1e:	bf00      	nop
 8005b20:	08006c84 	.word	0x08006c84
 8005b24:	08006c95 	.word	0x08006c95

08005b28 <__multiply>:
 8005b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b2c:	4614      	mov	r4, r2
 8005b2e:	690a      	ldr	r2, [r1, #16]
 8005b30:	6923      	ldr	r3, [r4, #16]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	bfa8      	it	ge
 8005b36:	4623      	movge	r3, r4
 8005b38:	460f      	mov	r7, r1
 8005b3a:	bfa4      	itt	ge
 8005b3c:	460c      	movge	r4, r1
 8005b3e:	461f      	movge	r7, r3
 8005b40:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005b44:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005b48:	68a3      	ldr	r3, [r4, #8]
 8005b4a:	6861      	ldr	r1, [r4, #4]
 8005b4c:	eb0a 0609 	add.w	r6, sl, r9
 8005b50:	42b3      	cmp	r3, r6
 8005b52:	b085      	sub	sp, #20
 8005b54:	bfb8      	it	lt
 8005b56:	3101      	addlt	r1, #1
 8005b58:	f7ff fedc 	bl	8005914 <_Balloc>
 8005b5c:	b930      	cbnz	r0, 8005b6c <__multiply+0x44>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	4b44      	ldr	r3, [pc, #272]	@ (8005c74 <__multiply+0x14c>)
 8005b62:	4845      	ldr	r0, [pc, #276]	@ (8005c78 <__multiply+0x150>)
 8005b64:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005b68:	f000 fc92 	bl	8006490 <__assert_func>
 8005b6c:	f100 0514 	add.w	r5, r0, #20
 8005b70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005b74:	462b      	mov	r3, r5
 8005b76:	2200      	movs	r2, #0
 8005b78:	4543      	cmp	r3, r8
 8005b7a:	d321      	bcc.n	8005bc0 <__multiply+0x98>
 8005b7c:	f107 0114 	add.w	r1, r7, #20
 8005b80:	f104 0214 	add.w	r2, r4, #20
 8005b84:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005b88:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005b8c:	9302      	str	r3, [sp, #8]
 8005b8e:	1b13      	subs	r3, r2, r4
 8005b90:	3b15      	subs	r3, #21
 8005b92:	f023 0303 	bic.w	r3, r3, #3
 8005b96:	3304      	adds	r3, #4
 8005b98:	f104 0715 	add.w	r7, r4, #21
 8005b9c:	42ba      	cmp	r2, r7
 8005b9e:	bf38      	it	cc
 8005ba0:	2304      	movcc	r3, #4
 8005ba2:	9301      	str	r3, [sp, #4]
 8005ba4:	9b02      	ldr	r3, [sp, #8]
 8005ba6:	9103      	str	r1, [sp, #12]
 8005ba8:	428b      	cmp	r3, r1
 8005baa:	d80c      	bhi.n	8005bc6 <__multiply+0x9e>
 8005bac:	2e00      	cmp	r6, #0
 8005bae:	dd03      	ble.n	8005bb8 <__multiply+0x90>
 8005bb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d05b      	beq.n	8005c70 <__multiply+0x148>
 8005bb8:	6106      	str	r6, [r0, #16]
 8005bba:	b005      	add	sp, #20
 8005bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc0:	f843 2b04 	str.w	r2, [r3], #4
 8005bc4:	e7d8      	b.n	8005b78 <__multiply+0x50>
 8005bc6:	f8b1 a000 	ldrh.w	sl, [r1]
 8005bca:	f1ba 0f00 	cmp.w	sl, #0
 8005bce:	d024      	beq.n	8005c1a <__multiply+0xf2>
 8005bd0:	f104 0e14 	add.w	lr, r4, #20
 8005bd4:	46a9      	mov	r9, r5
 8005bd6:	f04f 0c00 	mov.w	ip, #0
 8005bda:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005bde:	f8d9 3000 	ldr.w	r3, [r9]
 8005be2:	fa1f fb87 	uxth.w	fp, r7
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	fb0a 330b 	mla	r3, sl, fp, r3
 8005bec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005bf0:	f8d9 7000 	ldr.w	r7, [r9]
 8005bf4:	4463      	add	r3, ip
 8005bf6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005bfa:	fb0a c70b 	mla	r7, sl, fp, ip
 8005bfe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005c08:	4572      	cmp	r2, lr
 8005c0a:	f849 3b04 	str.w	r3, [r9], #4
 8005c0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005c12:	d8e2      	bhi.n	8005bda <__multiply+0xb2>
 8005c14:	9b01      	ldr	r3, [sp, #4]
 8005c16:	f845 c003 	str.w	ip, [r5, r3]
 8005c1a:	9b03      	ldr	r3, [sp, #12]
 8005c1c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005c20:	3104      	adds	r1, #4
 8005c22:	f1b9 0f00 	cmp.w	r9, #0
 8005c26:	d021      	beq.n	8005c6c <__multiply+0x144>
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	f104 0c14 	add.w	ip, r4, #20
 8005c2e:	46ae      	mov	lr, r5
 8005c30:	f04f 0a00 	mov.w	sl, #0
 8005c34:	f8bc b000 	ldrh.w	fp, [ip]
 8005c38:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005c3c:	fb09 770b 	mla	r7, r9, fp, r7
 8005c40:	4457      	add	r7, sl
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005c48:	f84e 3b04 	str.w	r3, [lr], #4
 8005c4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005c50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c54:	f8be 3000 	ldrh.w	r3, [lr]
 8005c58:	fb09 330a 	mla	r3, r9, sl, r3
 8005c5c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005c60:	4562      	cmp	r2, ip
 8005c62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c66:	d8e5      	bhi.n	8005c34 <__multiply+0x10c>
 8005c68:	9f01      	ldr	r7, [sp, #4]
 8005c6a:	51eb      	str	r3, [r5, r7]
 8005c6c:	3504      	adds	r5, #4
 8005c6e:	e799      	b.n	8005ba4 <__multiply+0x7c>
 8005c70:	3e01      	subs	r6, #1
 8005c72:	e79b      	b.n	8005bac <__multiply+0x84>
 8005c74:	08006c84 	.word	0x08006c84
 8005c78:	08006c95 	.word	0x08006c95

08005c7c <__pow5mult>:
 8005c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c80:	4615      	mov	r5, r2
 8005c82:	f012 0203 	ands.w	r2, r2, #3
 8005c86:	4607      	mov	r7, r0
 8005c88:	460e      	mov	r6, r1
 8005c8a:	d007      	beq.n	8005c9c <__pow5mult+0x20>
 8005c8c:	4c25      	ldr	r4, [pc, #148]	@ (8005d24 <__pow5mult+0xa8>)
 8005c8e:	3a01      	subs	r2, #1
 8005c90:	2300      	movs	r3, #0
 8005c92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c96:	f7ff fe9f 	bl	80059d8 <__multadd>
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	10ad      	asrs	r5, r5, #2
 8005c9e:	d03d      	beq.n	8005d1c <__pow5mult+0xa0>
 8005ca0:	69fc      	ldr	r4, [r7, #28]
 8005ca2:	b97c      	cbnz	r4, 8005cc4 <__pow5mult+0x48>
 8005ca4:	2010      	movs	r0, #16
 8005ca6:	f7ff fd7f 	bl	80057a8 <malloc>
 8005caa:	4602      	mov	r2, r0
 8005cac:	61f8      	str	r0, [r7, #28]
 8005cae:	b928      	cbnz	r0, 8005cbc <__pow5mult+0x40>
 8005cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8005d28 <__pow5mult+0xac>)
 8005cb2:	481e      	ldr	r0, [pc, #120]	@ (8005d2c <__pow5mult+0xb0>)
 8005cb4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005cb8:	f000 fbea 	bl	8006490 <__assert_func>
 8005cbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005cc0:	6004      	str	r4, [r0, #0]
 8005cc2:	60c4      	str	r4, [r0, #12]
 8005cc4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005cc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ccc:	b94c      	cbnz	r4, 8005ce2 <__pow5mult+0x66>
 8005cce:	f240 2171 	movw	r1, #625	@ 0x271
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	f7ff ff12 	bl	8005afc <__i2b>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f8c8 0008 	str.w	r0, [r8, #8]
 8005cde:	4604      	mov	r4, r0
 8005ce0:	6003      	str	r3, [r0, #0]
 8005ce2:	f04f 0900 	mov.w	r9, #0
 8005ce6:	07eb      	lsls	r3, r5, #31
 8005ce8:	d50a      	bpl.n	8005d00 <__pow5mult+0x84>
 8005cea:	4631      	mov	r1, r6
 8005cec:	4622      	mov	r2, r4
 8005cee:	4638      	mov	r0, r7
 8005cf0:	f7ff ff1a 	bl	8005b28 <__multiply>
 8005cf4:	4631      	mov	r1, r6
 8005cf6:	4680      	mov	r8, r0
 8005cf8:	4638      	mov	r0, r7
 8005cfa:	f7ff fe4b 	bl	8005994 <_Bfree>
 8005cfe:	4646      	mov	r6, r8
 8005d00:	106d      	asrs	r5, r5, #1
 8005d02:	d00b      	beq.n	8005d1c <__pow5mult+0xa0>
 8005d04:	6820      	ldr	r0, [r4, #0]
 8005d06:	b938      	cbnz	r0, 8005d18 <__pow5mult+0x9c>
 8005d08:	4622      	mov	r2, r4
 8005d0a:	4621      	mov	r1, r4
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	f7ff ff0b 	bl	8005b28 <__multiply>
 8005d12:	6020      	str	r0, [r4, #0]
 8005d14:	f8c0 9000 	str.w	r9, [r0]
 8005d18:	4604      	mov	r4, r0
 8005d1a:	e7e4      	b.n	8005ce6 <__pow5mult+0x6a>
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d22:	bf00      	nop
 8005d24:	08006cf0 	.word	0x08006cf0
 8005d28:	08006c15 	.word	0x08006c15
 8005d2c:	08006c95 	.word	0x08006c95

08005d30 <__lshift>:
 8005d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d34:	460c      	mov	r4, r1
 8005d36:	6849      	ldr	r1, [r1, #4]
 8005d38:	6923      	ldr	r3, [r4, #16]
 8005d3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005d3e:	68a3      	ldr	r3, [r4, #8]
 8005d40:	4607      	mov	r7, r0
 8005d42:	4691      	mov	r9, r2
 8005d44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d48:	f108 0601 	add.w	r6, r8, #1
 8005d4c:	42b3      	cmp	r3, r6
 8005d4e:	db0b      	blt.n	8005d68 <__lshift+0x38>
 8005d50:	4638      	mov	r0, r7
 8005d52:	f7ff fddf 	bl	8005914 <_Balloc>
 8005d56:	4605      	mov	r5, r0
 8005d58:	b948      	cbnz	r0, 8005d6e <__lshift+0x3e>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	4b28      	ldr	r3, [pc, #160]	@ (8005e00 <__lshift+0xd0>)
 8005d5e:	4829      	ldr	r0, [pc, #164]	@ (8005e04 <__lshift+0xd4>)
 8005d60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005d64:	f000 fb94 	bl	8006490 <__assert_func>
 8005d68:	3101      	adds	r1, #1
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	e7ee      	b.n	8005d4c <__lshift+0x1c>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f100 0114 	add.w	r1, r0, #20
 8005d74:	f100 0210 	add.w	r2, r0, #16
 8005d78:	4618      	mov	r0, r3
 8005d7a:	4553      	cmp	r3, sl
 8005d7c:	db33      	blt.n	8005de6 <__lshift+0xb6>
 8005d7e:	6920      	ldr	r0, [r4, #16]
 8005d80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d84:	f104 0314 	add.w	r3, r4, #20
 8005d88:	f019 091f 	ands.w	r9, r9, #31
 8005d8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005d94:	d02b      	beq.n	8005dee <__lshift+0xbe>
 8005d96:	f1c9 0e20 	rsb	lr, r9, #32
 8005d9a:	468a      	mov	sl, r1
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	6818      	ldr	r0, [r3, #0]
 8005da0:	fa00 f009 	lsl.w	r0, r0, r9
 8005da4:	4310      	orrs	r0, r2
 8005da6:	f84a 0b04 	str.w	r0, [sl], #4
 8005daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dae:	459c      	cmp	ip, r3
 8005db0:	fa22 f20e 	lsr.w	r2, r2, lr
 8005db4:	d8f3      	bhi.n	8005d9e <__lshift+0x6e>
 8005db6:	ebac 0304 	sub.w	r3, ip, r4
 8005dba:	3b15      	subs	r3, #21
 8005dbc:	f023 0303 	bic.w	r3, r3, #3
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	f104 0015 	add.w	r0, r4, #21
 8005dc6:	4584      	cmp	ip, r0
 8005dc8:	bf38      	it	cc
 8005dca:	2304      	movcc	r3, #4
 8005dcc:	50ca      	str	r2, [r1, r3]
 8005dce:	b10a      	cbz	r2, 8005dd4 <__lshift+0xa4>
 8005dd0:	f108 0602 	add.w	r6, r8, #2
 8005dd4:	3e01      	subs	r6, #1
 8005dd6:	4638      	mov	r0, r7
 8005dd8:	612e      	str	r6, [r5, #16]
 8005dda:	4621      	mov	r1, r4
 8005ddc:	f7ff fdda 	bl	8005994 <_Bfree>
 8005de0:	4628      	mov	r0, r5
 8005de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de6:	f842 0f04 	str.w	r0, [r2, #4]!
 8005dea:	3301      	adds	r3, #1
 8005dec:	e7c5      	b.n	8005d7a <__lshift+0x4a>
 8005dee:	3904      	subs	r1, #4
 8005df0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005df4:	f841 2f04 	str.w	r2, [r1, #4]!
 8005df8:	459c      	cmp	ip, r3
 8005dfa:	d8f9      	bhi.n	8005df0 <__lshift+0xc0>
 8005dfc:	e7ea      	b.n	8005dd4 <__lshift+0xa4>
 8005dfe:	bf00      	nop
 8005e00:	08006c84 	.word	0x08006c84
 8005e04:	08006c95 	.word	0x08006c95

08005e08 <__mcmp>:
 8005e08:	690a      	ldr	r2, [r1, #16]
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	6900      	ldr	r0, [r0, #16]
 8005e0e:	1a80      	subs	r0, r0, r2
 8005e10:	b530      	push	{r4, r5, lr}
 8005e12:	d10e      	bne.n	8005e32 <__mcmp+0x2a>
 8005e14:	3314      	adds	r3, #20
 8005e16:	3114      	adds	r1, #20
 8005e18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005e1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005e20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e28:	4295      	cmp	r5, r2
 8005e2a:	d003      	beq.n	8005e34 <__mcmp+0x2c>
 8005e2c:	d205      	bcs.n	8005e3a <__mcmp+0x32>
 8005e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e32:	bd30      	pop	{r4, r5, pc}
 8005e34:	42a3      	cmp	r3, r4
 8005e36:	d3f3      	bcc.n	8005e20 <__mcmp+0x18>
 8005e38:	e7fb      	b.n	8005e32 <__mcmp+0x2a>
 8005e3a:	2001      	movs	r0, #1
 8005e3c:	e7f9      	b.n	8005e32 <__mcmp+0x2a>
	...

08005e40 <__mdiff>:
 8005e40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e44:	4689      	mov	r9, r1
 8005e46:	4606      	mov	r6, r0
 8005e48:	4611      	mov	r1, r2
 8005e4a:	4648      	mov	r0, r9
 8005e4c:	4614      	mov	r4, r2
 8005e4e:	f7ff ffdb 	bl	8005e08 <__mcmp>
 8005e52:	1e05      	subs	r5, r0, #0
 8005e54:	d112      	bne.n	8005e7c <__mdiff+0x3c>
 8005e56:	4629      	mov	r1, r5
 8005e58:	4630      	mov	r0, r6
 8005e5a:	f7ff fd5b 	bl	8005914 <_Balloc>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	b928      	cbnz	r0, 8005e6e <__mdiff+0x2e>
 8005e62:	4b3f      	ldr	r3, [pc, #252]	@ (8005f60 <__mdiff+0x120>)
 8005e64:	f240 2137 	movw	r1, #567	@ 0x237
 8005e68:	483e      	ldr	r0, [pc, #248]	@ (8005f64 <__mdiff+0x124>)
 8005e6a:	f000 fb11 	bl	8006490 <__assert_func>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005e74:	4610      	mov	r0, r2
 8005e76:	b003      	add	sp, #12
 8005e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e7c:	bfbc      	itt	lt
 8005e7e:	464b      	movlt	r3, r9
 8005e80:	46a1      	movlt	r9, r4
 8005e82:	4630      	mov	r0, r6
 8005e84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005e88:	bfba      	itte	lt
 8005e8a:	461c      	movlt	r4, r3
 8005e8c:	2501      	movlt	r5, #1
 8005e8e:	2500      	movge	r5, #0
 8005e90:	f7ff fd40 	bl	8005914 <_Balloc>
 8005e94:	4602      	mov	r2, r0
 8005e96:	b918      	cbnz	r0, 8005ea0 <__mdiff+0x60>
 8005e98:	4b31      	ldr	r3, [pc, #196]	@ (8005f60 <__mdiff+0x120>)
 8005e9a:	f240 2145 	movw	r1, #581	@ 0x245
 8005e9e:	e7e3      	b.n	8005e68 <__mdiff+0x28>
 8005ea0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005ea4:	6926      	ldr	r6, [r4, #16]
 8005ea6:	60c5      	str	r5, [r0, #12]
 8005ea8:	f109 0310 	add.w	r3, r9, #16
 8005eac:	f109 0514 	add.w	r5, r9, #20
 8005eb0:	f104 0e14 	add.w	lr, r4, #20
 8005eb4:	f100 0b14 	add.w	fp, r0, #20
 8005eb8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005ebc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005ec0:	9301      	str	r3, [sp, #4]
 8005ec2:	46d9      	mov	r9, fp
 8005ec4:	f04f 0c00 	mov.w	ip, #0
 8005ec8:	9b01      	ldr	r3, [sp, #4]
 8005eca:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005ece:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005ed2:	9301      	str	r3, [sp, #4]
 8005ed4:	fa1f f38a 	uxth.w	r3, sl
 8005ed8:	4619      	mov	r1, r3
 8005eda:	b283      	uxth	r3, r0
 8005edc:	1acb      	subs	r3, r1, r3
 8005ede:	0c00      	lsrs	r0, r0, #16
 8005ee0:	4463      	add	r3, ip
 8005ee2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005ee6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005ef0:	4576      	cmp	r6, lr
 8005ef2:	f849 3b04 	str.w	r3, [r9], #4
 8005ef6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005efa:	d8e5      	bhi.n	8005ec8 <__mdiff+0x88>
 8005efc:	1b33      	subs	r3, r6, r4
 8005efe:	3b15      	subs	r3, #21
 8005f00:	f023 0303 	bic.w	r3, r3, #3
 8005f04:	3415      	adds	r4, #21
 8005f06:	3304      	adds	r3, #4
 8005f08:	42a6      	cmp	r6, r4
 8005f0a:	bf38      	it	cc
 8005f0c:	2304      	movcc	r3, #4
 8005f0e:	441d      	add	r5, r3
 8005f10:	445b      	add	r3, fp
 8005f12:	461e      	mov	r6, r3
 8005f14:	462c      	mov	r4, r5
 8005f16:	4544      	cmp	r4, r8
 8005f18:	d30e      	bcc.n	8005f38 <__mdiff+0xf8>
 8005f1a:	f108 0103 	add.w	r1, r8, #3
 8005f1e:	1b49      	subs	r1, r1, r5
 8005f20:	f021 0103 	bic.w	r1, r1, #3
 8005f24:	3d03      	subs	r5, #3
 8005f26:	45a8      	cmp	r8, r5
 8005f28:	bf38      	it	cc
 8005f2a:	2100      	movcc	r1, #0
 8005f2c:	440b      	add	r3, r1
 8005f2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005f32:	b191      	cbz	r1, 8005f5a <__mdiff+0x11a>
 8005f34:	6117      	str	r7, [r2, #16]
 8005f36:	e79d      	b.n	8005e74 <__mdiff+0x34>
 8005f38:	f854 1b04 	ldr.w	r1, [r4], #4
 8005f3c:	46e6      	mov	lr, ip
 8005f3e:	0c08      	lsrs	r0, r1, #16
 8005f40:	fa1c fc81 	uxtah	ip, ip, r1
 8005f44:	4471      	add	r1, lr
 8005f46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005f4a:	b289      	uxth	r1, r1
 8005f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005f50:	f846 1b04 	str.w	r1, [r6], #4
 8005f54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005f58:	e7dd      	b.n	8005f16 <__mdiff+0xd6>
 8005f5a:	3f01      	subs	r7, #1
 8005f5c:	e7e7      	b.n	8005f2e <__mdiff+0xee>
 8005f5e:	bf00      	nop
 8005f60:	08006c84 	.word	0x08006c84
 8005f64:	08006c95 	.word	0x08006c95

08005f68 <__d2b>:
 8005f68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005f6c:	460f      	mov	r7, r1
 8005f6e:	2101      	movs	r1, #1
 8005f70:	ec59 8b10 	vmov	r8, r9, d0
 8005f74:	4616      	mov	r6, r2
 8005f76:	f7ff fccd 	bl	8005914 <_Balloc>
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	b930      	cbnz	r0, 8005f8c <__d2b+0x24>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	4b23      	ldr	r3, [pc, #140]	@ (8006010 <__d2b+0xa8>)
 8005f82:	4824      	ldr	r0, [pc, #144]	@ (8006014 <__d2b+0xac>)
 8005f84:	f240 310f 	movw	r1, #783	@ 0x30f
 8005f88:	f000 fa82 	bl	8006490 <__assert_func>
 8005f8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005f90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f94:	b10d      	cbz	r5, 8005f9a <__d2b+0x32>
 8005f96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f9a:	9301      	str	r3, [sp, #4]
 8005f9c:	f1b8 0300 	subs.w	r3, r8, #0
 8005fa0:	d023      	beq.n	8005fea <__d2b+0x82>
 8005fa2:	4668      	mov	r0, sp
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	f7ff fd7c 	bl	8005aa2 <__lo0bits>
 8005faa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005fae:	b1d0      	cbz	r0, 8005fe6 <__d2b+0x7e>
 8005fb0:	f1c0 0320 	rsb	r3, r0, #32
 8005fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	40c2      	lsrs	r2, r0
 8005fbc:	6163      	str	r3, [r4, #20]
 8005fbe:	9201      	str	r2, [sp, #4]
 8005fc0:	9b01      	ldr	r3, [sp, #4]
 8005fc2:	61a3      	str	r3, [r4, #24]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	bf0c      	ite	eq
 8005fc8:	2201      	moveq	r2, #1
 8005fca:	2202      	movne	r2, #2
 8005fcc:	6122      	str	r2, [r4, #16]
 8005fce:	b1a5      	cbz	r5, 8005ffa <__d2b+0x92>
 8005fd0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005fd4:	4405      	add	r5, r0
 8005fd6:	603d      	str	r5, [r7, #0]
 8005fd8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005fdc:	6030      	str	r0, [r6, #0]
 8005fde:	4620      	mov	r0, r4
 8005fe0:	b003      	add	sp, #12
 8005fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fe6:	6161      	str	r1, [r4, #20]
 8005fe8:	e7ea      	b.n	8005fc0 <__d2b+0x58>
 8005fea:	a801      	add	r0, sp, #4
 8005fec:	f7ff fd59 	bl	8005aa2 <__lo0bits>
 8005ff0:	9b01      	ldr	r3, [sp, #4]
 8005ff2:	6163      	str	r3, [r4, #20]
 8005ff4:	3020      	adds	r0, #32
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	e7e8      	b.n	8005fcc <__d2b+0x64>
 8005ffa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005ffe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006002:	6038      	str	r0, [r7, #0]
 8006004:	6918      	ldr	r0, [r3, #16]
 8006006:	f7ff fd2d 	bl	8005a64 <__hi0bits>
 800600a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800600e:	e7e5      	b.n	8005fdc <__d2b+0x74>
 8006010:	08006c84 	.word	0x08006c84
 8006014:	08006c95 	.word	0x08006c95

08006018 <__ssputs_r>:
 8006018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800601c:	688e      	ldr	r6, [r1, #8]
 800601e:	461f      	mov	r7, r3
 8006020:	42be      	cmp	r6, r7
 8006022:	680b      	ldr	r3, [r1, #0]
 8006024:	4682      	mov	sl, r0
 8006026:	460c      	mov	r4, r1
 8006028:	4690      	mov	r8, r2
 800602a:	d82d      	bhi.n	8006088 <__ssputs_r+0x70>
 800602c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006030:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006034:	d026      	beq.n	8006084 <__ssputs_r+0x6c>
 8006036:	6965      	ldr	r5, [r4, #20]
 8006038:	6909      	ldr	r1, [r1, #16]
 800603a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800603e:	eba3 0901 	sub.w	r9, r3, r1
 8006042:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006046:	1c7b      	adds	r3, r7, #1
 8006048:	444b      	add	r3, r9
 800604a:	106d      	asrs	r5, r5, #1
 800604c:	429d      	cmp	r5, r3
 800604e:	bf38      	it	cc
 8006050:	461d      	movcc	r5, r3
 8006052:	0553      	lsls	r3, r2, #21
 8006054:	d527      	bpl.n	80060a6 <__ssputs_r+0x8e>
 8006056:	4629      	mov	r1, r5
 8006058:	f7ff fbd0 	bl	80057fc <_malloc_r>
 800605c:	4606      	mov	r6, r0
 800605e:	b360      	cbz	r0, 80060ba <__ssputs_r+0xa2>
 8006060:	6921      	ldr	r1, [r4, #16]
 8006062:	464a      	mov	r2, r9
 8006064:	f000 fa06 	bl	8006474 <memcpy>
 8006068:	89a3      	ldrh	r3, [r4, #12]
 800606a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800606e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006072:	81a3      	strh	r3, [r4, #12]
 8006074:	6126      	str	r6, [r4, #16]
 8006076:	6165      	str	r5, [r4, #20]
 8006078:	444e      	add	r6, r9
 800607a:	eba5 0509 	sub.w	r5, r5, r9
 800607e:	6026      	str	r6, [r4, #0]
 8006080:	60a5      	str	r5, [r4, #8]
 8006082:	463e      	mov	r6, r7
 8006084:	42be      	cmp	r6, r7
 8006086:	d900      	bls.n	800608a <__ssputs_r+0x72>
 8006088:	463e      	mov	r6, r7
 800608a:	6820      	ldr	r0, [r4, #0]
 800608c:	4632      	mov	r2, r6
 800608e:	4641      	mov	r1, r8
 8006090:	f000 f9c6 	bl	8006420 <memmove>
 8006094:	68a3      	ldr	r3, [r4, #8]
 8006096:	1b9b      	subs	r3, r3, r6
 8006098:	60a3      	str	r3, [r4, #8]
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	4433      	add	r3, r6
 800609e:	6023      	str	r3, [r4, #0]
 80060a0:	2000      	movs	r0, #0
 80060a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a6:	462a      	mov	r2, r5
 80060a8:	f000 fa36 	bl	8006518 <_realloc_r>
 80060ac:	4606      	mov	r6, r0
 80060ae:	2800      	cmp	r0, #0
 80060b0:	d1e0      	bne.n	8006074 <__ssputs_r+0x5c>
 80060b2:	6921      	ldr	r1, [r4, #16]
 80060b4:	4650      	mov	r0, sl
 80060b6:	f7ff fb2d 	bl	8005714 <_free_r>
 80060ba:	230c      	movs	r3, #12
 80060bc:	f8ca 3000 	str.w	r3, [sl]
 80060c0:	89a3      	ldrh	r3, [r4, #12]
 80060c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060c6:	81a3      	strh	r3, [r4, #12]
 80060c8:	f04f 30ff 	mov.w	r0, #4294967295
 80060cc:	e7e9      	b.n	80060a2 <__ssputs_r+0x8a>
	...

080060d0 <_svfiprintf_r>:
 80060d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d4:	4698      	mov	r8, r3
 80060d6:	898b      	ldrh	r3, [r1, #12]
 80060d8:	061b      	lsls	r3, r3, #24
 80060da:	b09d      	sub	sp, #116	@ 0x74
 80060dc:	4607      	mov	r7, r0
 80060de:	460d      	mov	r5, r1
 80060e0:	4614      	mov	r4, r2
 80060e2:	d510      	bpl.n	8006106 <_svfiprintf_r+0x36>
 80060e4:	690b      	ldr	r3, [r1, #16]
 80060e6:	b973      	cbnz	r3, 8006106 <_svfiprintf_r+0x36>
 80060e8:	2140      	movs	r1, #64	@ 0x40
 80060ea:	f7ff fb87 	bl	80057fc <_malloc_r>
 80060ee:	6028      	str	r0, [r5, #0]
 80060f0:	6128      	str	r0, [r5, #16]
 80060f2:	b930      	cbnz	r0, 8006102 <_svfiprintf_r+0x32>
 80060f4:	230c      	movs	r3, #12
 80060f6:	603b      	str	r3, [r7, #0]
 80060f8:	f04f 30ff 	mov.w	r0, #4294967295
 80060fc:	b01d      	add	sp, #116	@ 0x74
 80060fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006102:	2340      	movs	r3, #64	@ 0x40
 8006104:	616b      	str	r3, [r5, #20]
 8006106:	2300      	movs	r3, #0
 8006108:	9309      	str	r3, [sp, #36]	@ 0x24
 800610a:	2320      	movs	r3, #32
 800610c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006110:	f8cd 800c 	str.w	r8, [sp, #12]
 8006114:	2330      	movs	r3, #48	@ 0x30
 8006116:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80062b4 <_svfiprintf_r+0x1e4>
 800611a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800611e:	f04f 0901 	mov.w	r9, #1
 8006122:	4623      	mov	r3, r4
 8006124:	469a      	mov	sl, r3
 8006126:	f813 2b01 	ldrb.w	r2, [r3], #1
 800612a:	b10a      	cbz	r2, 8006130 <_svfiprintf_r+0x60>
 800612c:	2a25      	cmp	r2, #37	@ 0x25
 800612e:	d1f9      	bne.n	8006124 <_svfiprintf_r+0x54>
 8006130:	ebba 0b04 	subs.w	fp, sl, r4
 8006134:	d00b      	beq.n	800614e <_svfiprintf_r+0x7e>
 8006136:	465b      	mov	r3, fp
 8006138:	4622      	mov	r2, r4
 800613a:	4629      	mov	r1, r5
 800613c:	4638      	mov	r0, r7
 800613e:	f7ff ff6b 	bl	8006018 <__ssputs_r>
 8006142:	3001      	adds	r0, #1
 8006144:	f000 80a7 	beq.w	8006296 <_svfiprintf_r+0x1c6>
 8006148:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800614a:	445a      	add	r2, fp
 800614c:	9209      	str	r2, [sp, #36]	@ 0x24
 800614e:	f89a 3000 	ldrb.w	r3, [sl]
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 809f 	beq.w	8006296 <_svfiprintf_r+0x1c6>
 8006158:	2300      	movs	r3, #0
 800615a:	f04f 32ff 	mov.w	r2, #4294967295
 800615e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006162:	f10a 0a01 	add.w	sl, sl, #1
 8006166:	9304      	str	r3, [sp, #16]
 8006168:	9307      	str	r3, [sp, #28]
 800616a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800616e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006170:	4654      	mov	r4, sl
 8006172:	2205      	movs	r2, #5
 8006174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006178:	484e      	ldr	r0, [pc, #312]	@ (80062b4 <_svfiprintf_r+0x1e4>)
 800617a:	f7fa f861 	bl	8000240 <memchr>
 800617e:	9a04      	ldr	r2, [sp, #16]
 8006180:	b9d8      	cbnz	r0, 80061ba <_svfiprintf_r+0xea>
 8006182:	06d0      	lsls	r0, r2, #27
 8006184:	bf44      	itt	mi
 8006186:	2320      	movmi	r3, #32
 8006188:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800618c:	0711      	lsls	r1, r2, #28
 800618e:	bf44      	itt	mi
 8006190:	232b      	movmi	r3, #43	@ 0x2b
 8006192:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006196:	f89a 3000 	ldrb.w	r3, [sl]
 800619a:	2b2a      	cmp	r3, #42	@ 0x2a
 800619c:	d015      	beq.n	80061ca <_svfiprintf_r+0xfa>
 800619e:	9a07      	ldr	r2, [sp, #28]
 80061a0:	4654      	mov	r4, sl
 80061a2:	2000      	movs	r0, #0
 80061a4:	f04f 0c0a 	mov.w	ip, #10
 80061a8:	4621      	mov	r1, r4
 80061aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061ae:	3b30      	subs	r3, #48	@ 0x30
 80061b0:	2b09      	cmp	r3, #9
 80061b2:	d94b      	bls.n	800624c <_svfiprintf_r+0x17c>
 80061b4:	b1b0      	cbz	r0, 80061e4 <_svfiprintf_r+0x114>
 80061b6:	9207      	str	r2, [sp, #28]
 80061b8:	e014      	b.n	80061e4 <_svfiprintf_r+0x114>
 80061ba:	eba0 0308 	sub.w	r3, r0, r8
 80061be:	fa09 f303 	lsl.w	r3, r9, r3
 80061c2:	4313      	orrs	r3, r2
 80061c4:	9304      	str	r3, [sp, #16]
 80061c6:	46a2      	mov	sl, r4
 80061c8:	e7d2      	b.n	8006170 <_svfiprintf_r+0xa0>
 80061ca:	9b03      	ldr	r3, [sp, #12]
 80061cc:	1d19      	adds	r1, r3, #4
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	9103      	str	r1, [sp, #12]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	bfbb      	ittet	lt
 80061d6:	425b      	neglt	r3, r3
 80061d8:	f042 0202 	orrlt.w	r2, r2, #2
 80061dc:	9307      	strge	r3, [sp, #28]
 80061de:	9307      	strlt	r3, [sp, #28]
 80061e0:	bfb8      	it	lt
 80061e2:	9204      	strlt	r2, [sp, #16]
 80061e4:	7823      	ldrb	r3, [r4, #0]
 80061e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80061e8:	d10a      	bne.n	8006200 <_svfiprintf_r+0x130>
 80061ea:	7863      	ldrb	r3, [r4, #1]
 80061ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80061ee:	d132      	bne.n	8006256 <_svfiprintf_r+0x186>
 80061f0:	9b03      	ldr	r3, [sp, #12]
 80061f2:	1d1a      	adds	r2, r3, #4
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	9203      	str	r2, [sp, #12]
 80061f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061fc:	3402      	adds	r4, #2
 80061fe:	9305      	str	r3, [sp, #20]
 8006200:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80062c4 <_svfiprintf_r+0x1f4>
 8006204:	7821      	ldrb	r1, [r4, #0]
 8006206:	2203      	movs	r2, #3
 8006208:	4650      	mov	r0, sl
 800620a:	f7fa f819 	bl	8000240 <memchr>
 800620e:	b138      	cbz	r0, 8006220 <_svfiprintf_r+0x150>
 8006210:	9b04      	ldr	r3, [sp, #16]
 8006212:	eba0 000a 	sub.w	r0, r0, sl
 8006216:	2240      	movs	r2, #64	@ 0x40
 8006218:	4082      	lsls	r2, r0
 800621a:	4313      	orrs	r3, r2
 800621c:	3401      	adds	r4, #1
 800621e:	9304      	str	r3, [sp, #16]
 8006220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006224:	4824      	ldr	r0, [pc, #144]	@ (80062b8 <_svfiprintf_r+0x1e8>)
 8006226:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800622a:	2206      	movs	r2, #6
 800622c:	f7fa f808 	bl	8000240 <memchr>
 8006230:	2800      	cmp	r0, #0
 8006232:	d036      	beq.n	80062a2 <_svfiprintf_r+0x1d2>
 8006234:	4b21      	ldr	r3, [pc, #132]	@ (80062bc <_svfiprintf_r+0x1ec>)
 8006236:	bb1b      	cbnz	r3, 8006280 <_svfiprintf_r+0x1b0>
 8006238:	9b03      	ldr	r3, [sp, #12]
 800623a:	3307      	adds	r3, #7
 800623c:	f023 0307 	bic.w	r3, r3, #7
 8006240:	3308      	adds	r3, #8
 8006242:	9303      	str	r3, [sp, #12]
 8006244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006246:	4433      	add	r3, r6
 8006248:	9309      	str	r3, [sp, #36]	@ 0x24
 800624a:	e76a      	b.n	8006122 <_svfiprintf_r+0x52>
 800624c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006250:	460c      	mov	r4, r1
 8006252:	2001      	movs	r0, #1
 8006254:	e7a8      	b.n	80061a8 <_svfiprintf_r+0xd8>
 8006256:	2300      	movs	r3, #0
 8006258:	3401      	adds	r4, #1
 800625a:	9305      	str	r3, [sp, #20]
 800625c:	4619      	mov	r1, r3
 800625e:	f04f 0c0a 	mov.w	ip, #10
 8006262:	4620      	mov	r0, r4
 8006264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006268:	3a30      	subs	r2, #48	@ 0x30
 800626a:	2a09      	cmp	r2, #9
 800626c:	d903      	bls.n	8006276 <_svfiprintf_r+0x1a6>
 800626e:	2b00      	cmp	r3, #0
 8006270:	d0c6      	beq.n	8006200 <_svfiprintf_r+0x130>
 8006272:	9105      	str	r1, [sp, #20]
 8006274:	e7c4      	b.n	8006200 <_svfiprintf_r+0x130>
 8006276:	fb0c 2101 	mla	r1, ip, r1, r2
 800627a:	4604      	mov	r4, r0
 800627c:	2301      	movs	r3, #1
 800627e:	e7f0      	b.n	8006262 <_svfiprintf_r+0x192>
 8006280:	ab03      	add	r3, sp, #12
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	462a      	mov	r2, r5
 8006286:	4b0e      	ldr	r3, [pc, #56]	@ (80062c0 <_svfiprintf_r+0x1f0>)
 8006288:	a904      	add	r1, sp, #16
 800628a:	4638      	mov	r0, r7
 800628c:	f7fd ff14 	bl	80040b8 <_printf_float>
 8006290:	1c42      	adds	r2, r0, #1
 8006292:	4606      	mov	r6, r0
 8006294:	d1d6      	bne.n	8006244 <_svfiprintf_r+0x174>
 8006296:	89ab      	ldrh	r3, [r5, #12]
 8006298:	065b      	lsls	r3, r3, #25
 800629a:	f53f af2d 	bmi.w	80060f8 <_svfiprintf_r+0x28>
 800629e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062a0:	e72c      	b.n	80060fc <_svfiprintf_r+0x2c>
 80062a2:	ab03      	add	r3, sp, #12
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	462a      	mov	r2, r5
 80062a8:	4b05      	ldr	r3, [pc, #20]	@ (80062c0 <_svfiprintf_r+0x1f0>)
 80062aa:	a904      	add	r1, sp, #16
 80062ac:	4638      	mov	r0, r7
 80062ae:	f7fe f98b 	bl	80045c8 <_printf_i>
 80062b2:	e7ed      	b.n	8006290 <_svfiprintf_r+0x1c0>
 80062b4:	08006df0 	.word	0x08006df0
 80062b8:	08006dfa 	.word	0x08006dfa
 80062bc:	080040b9 	.word	0x080040b9
 80062c0:	08006019 	.word	0x08006019
 80062c4:	08006df6 	.word	0x08006df6

080062c8 <__sflush_r>:
 80062c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062d0:	0716      	lsls	r6, r2, #28
 80062d2:	4605      	mov	r5, r0
 80062d4:	460c      	mov	r4, r1
 80062d6:	d454      	bmi.n	8006382 <__sflush_r+0xba>
 80062d8:	684b      	ldr	r3, [r1, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	dc02      	bgt.n	80062e4 <__sflush_r+0x1c>
 80062de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	dd48      	ble.n	8006376 <__sflush_r+0xae>
 80062e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062e6:	2e00      	cmp	r6, #0
 80062e8:	d045      	beq.n	8006376 <__sflush_r+0xae>
 80062ea:	2300      	movs	r3, #0
 80062ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80062f0:	682f      	ldr	r7, [r5, #0]
 80062f2:	6a21      	ldr	r1, [r4, #32]
 80062f4:	602b      	str	r3, [r5, #0]
 80062f6:	d030      	beq.n	800635a <__sflush_r+0x92>
 80062f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	0759      	lsls	r1, r3, #29
 80062fe:	d505      	bpl.n	800630c <__sflush_r+0x44>
 8006300:	6863      	ldr	r3, [r4, #4]
 8006302:	1ad2      	subs	r2, r2, r3
 8006304:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006306:	b10b      	cbz	r3, 800630c <__sflush_r+0x44>
 8006308:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800630a:	1ad2      	subs	r2, r2, r3
 800630c:	2300      	movs	r3, #0
 800630e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006310:	6a21      	ldr	r1, [r4, #32]
 8006312:	4628      	mov	r0, r5
 8006314:	47b0      	blx	r6
 8006316:	1c43      	adds	r3, r0, #1
 8006318:	89a3      	ldrh	r3, [r4, #12]
 800631a:	d106      	bne.n	800632a <__sflush_r+0x62>
 800631c:	6829      	ldr	r1, [r5, #0]
 800631e:	291d      	cmp	r1, #29
 8006320:	d82b      	bhi.n	800637a <__sflush_r+0xb2>
 8006322:	4a2a      	ldr	r2, [pc, #168]	@ (80063cc <__sflush_r+0x104>)
 8006324:	410a      	asrs	r2, r1
 8006326:	07d6      	lsls	r6, r2, #31
 8006328:	d427      	bmi.n	800637a <__sflush_r+0xb2>
 800632a:	2200      	movs	r2, #0
 800632c:	6062      	str	r2, [r4, #4]
 800632e:	04d9      	lsls	r1, r3, #19
 8006330:	6922      	ldr	r2, [r4, #16]
 8006332:	6022      	str	r2, [r4, #0]
 8006334:	d504      	bpl.n	8006340 <__sflush_r+0x78>
 8006336:	1c42      	adds	r2, r0, #1
 8006338:	d101      	bne.n	800633e <__sflush_r+0x76>
 800633a:	682b      	ldr	r3, [r5, #0]
 800633c:	b903      	cbnz	r3, 8006340 <__sflush_r+0x78>
 800633e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006340:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006342:	602f      	str	r7, [r5, #0]
 8006344:	b1b9      	cbz	r1, 8006376 <__sflush_r+0xae>
 8006346:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800634a:	4299      	cmp	r1, r3
 800634c:	d002      	beq.n	8006354 <__sflush_r+0x8c>
 800634e:	4628      	mov	r0, r5
 8006350:	f7ff f9e0 	bl	8005714 <_free_r>
 8006354:	2300      	movs	r3, #0
 8006356:	6363      	str	r3, [r4, #52]	@ 0x34
 8006358:	e00d      	b.n	8006376 <__sflush_r+0xae>
 800635a:	2301      	movs	r3, #1
 800635c:	4628      	mov	r0, r5
 800635e:	47b0      	blx	r6
 8006360:	4602      	mov	r2, r0
 8006362:	1c50      	adds	r0, r2, #1
 8006364:	d1c9      	bne.n	80062fa <__sflush_r+0x32>
 8006366:	682b      	ldr	r3, [r5, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d0c6      	beq.n	80062fa <__sflush_r+0x32>
 800636c:	2b1d      	cmp	r3, #29
 800636e:	d001      	beq.n	8006374 <__sflush_r+0xac>
 8006370:	2b16      	cmp	r3, #22
 8006372:	d11e      	bne.n	80063b2 <__sflush_r+0xea>
 8006374:	602f      	str	r7, [r5, #0]
 8006376:	2000      	movs	r0, #0
 8006378:	e022      	b.n	80063c0 <__sflush_r+0xf8>
 800637a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800637e:	b21b      	sxth	r3, r3
 8006380:	e01b      	b.n	80063ba <__sflush_r+0xf2>
 8006382:	690f      	ldr	r7, [r1, #16]
 8006384:	2f00      	cmp	r7, #0
 8006386:	d0f6      	beq.n	8006376 <__sflush_r+0xae>
 8006388:	0793      	lsls	r3, r2, #30
 800638a:	680e      	ldr	r6, [r1, #0]
 800638c:	bf08      	it	eq
 800638e:	694b      	ldreq	r3, [r1, #20]
 8006390:	600f      	str	r7, [r1, #0]
 8006392:	bf18      	it	ne
 8006394:	2300      	movne	r3, #0
 8006396:	eba6 0807 	sub.w	r8, r6, r7
 800639a:	608b      	str	r3, [r1, #8]
 800639c:	f1b8 0f00 	cmp.w	r8, #0
 80063a0:	dde9      	ble.n	8006376 <__sflush_r+0xae>
 80063a2:	6a21      	ldr	r1, [r4, #32]
 80063a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80063a6:	4643      	mov	r3, r8
 80063a8:	463a      	mov	r2, r7
 80063aa:	4628      	mov	r0, r5
 80063ac:	47b0      	blx	r6
 80063ae:	2800      	cmp	r0, #0
 80063b0:	dc08      	bgt.n	80063c4 <__sflush_r+0xfc>
 80063b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063ba:	81a3      	strh	r3, [r4, #12]
 80063bc:	f04f 30ff 	mov.w	r0, #4294967295
 80063c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063c4:	4407      	add	r7, r0
 80063c6:	eba8 0800 	sub.w	r8, r8, r0
 80063ca:	e7e7      	b.n	800639c <__sflush_r+0xd4>
 80063cc:	dfbffffe 	.word	0xdfbffffe

080063d0 <_fflush_r>:
 80063d0:	b538      	push	{r3, r4, r5, lr}
 80063d2:	690b      	ldr	r3, [r1, #16]
 80063d4:	4605      	mov	r5, r0
 80063d6:	460c      	mov	r4, r1
 80063d8:	b913      	cbnz	r3, 80063e0 <_fflush_r+0x10>
 80063da:	2500      	movs	r5, #0
 80063dc:	4628      	mov	r0, r5
 80063de:	bd38      	pop	{r3, r4, r5, pc}
 80063e0:	b118      	cbz	r0, 80063ea <_fflush_r+0x1a>
 80063e2:	6a03      	ldr	r3, [r0, #32]
 80063e4:	b90b      	cbnz	r3, 80063ea <_fflush_r+0x1a>
 80063e6:	f7fe fa9b 	bl	8004920 <__sinit>
 80063ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0f3      	beq.n	80063da <_fflush_r+0xa>
 80063f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80063f4:	07d0      	lsls	r0, r2, #31
 80063f6:	d404      	bmi.n	8006402 <_fflush_r+0x32>
 80063f8:	0599      	lsls	r1, r3, #22
 80063fa:	d402      	bmi.n	8006402 <_fflush_r+0x32>
 80063fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063fe:	f7fe fba6 	bl	8004b4e <__retarget_lock_acquire_recursive>
 8006402:	4628      	mov	r0, r5
 8006404:	4621      	mov	r1, r4
 8006406:	f7ff ff5f 	bl	80062c8 <__sflush_r>
 800640a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800640c:	07da      	lsls	r2, r3, #31
 800640e:	4605      	mov	r5, r0
 8006410:	d4e4      	bmi.n	80063dc <_fflush_r+0xc>
 8006412:	89a3      	ldrh	r3, [r4, #12]
 8006414:	059b      	lsls	r3, r3, #22
 8006416:	d4e1      	bmi.n	80063dc <_fflush_r+0xc>
 8006418:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800641a:	f7fe fb99 	bl	8004b50 <__retarget_lock_release_recursive>
 800641e:	e7dd      	b.n	80063dc <_fflush_r+0xc>

08006420 <memmove>:
 8006420:	4288      	cmp	r0, r1
 8006422:	b510      	push	{r4, lr}
 8006424:	eb01 0402 	add.w	r4, r1, r2
 8006428:	d902      	bls.n	8006430 <memmove+0x10>
 800642a:	4284      	cmp	r4, r0
 800642c:	4623      	mov	r3, r4
 800642e:	d807      	bhi.n	8006440 <memmove+0x20>
 8006430:	1e43      	subs	r3, r0, #1
 8006432:	42a1      	cmp	r1, r4
 8006434:	d008      	beq.n	8006448 <memmove+0x28>
 8006436:	f811 2b01 	ldrb.w	r2, [r1], #1
 800643a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800643e:	e7f8      	b.n	8006432 <memmove+0x12>
 8006440:	4402      	add	r2, r0
 8006442:	4601      	mov	r1, r0
 8006444:	428a      	cmp	r2, r1
 8006446:	d100      	bne.n	800644a <memmove+0x2a>
 8006448:	bd10      	pop	{r4, pc}
 800644a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800644e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006452:	e7f7      	b.n	8006444 <memmove+0x24>

08006454 <_sbrk_r>:
 8006454:	b538      	push	{r3, r4, r5, lr}
 8006456:	4d06      	ldr	r5, [pc, #24]	@ (8006470 <_sbrk_r+0x1c>)
 8006458:	2300      	movs	r3, #0
 800645a:	4604      	mov	r4, r0
 800645c:	4608      	mov	r0, r1
 800645e:	602b      	str	r3, [r5, #0]
 8006460:	f7fa fc8e 	bl	8000d80 <_sbrk>
 8006464:	1c43      	adds	r3, r0, #1
 8006466:	d102      	bne.n	800646e <_sbrk_r+0x1a>
 8006468:	682b      	ldr	r3, [r5, #0]
 800646a:	b103      	cbz	r3, 800646e <_sbrk_r+0x1a>
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	bd38      	pop	{r3, r4, r5, pc}
 8006470:	2000041c 	.word	0x2000041c

08006474 <memcpy>:
 8006474:	440a      	add	r2, r1
 8006476:	4291      	cmp	r1, r2
 8006478:	f100 33ff 	add.w	r3, r0, #4294967295
 800647c:	d100      	bne.n	8006480 <memcpy+0xc>
 800647e:	4770      	bx	lr
 8006480:	b510      	push	{r4, lr}
 8006482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006486:	f803 4f01 	strb.w	r4, [r3, #1]!
 800648a:	4291      	cmp	r1, r2
 800648c:	d1f9      	bne.n	8006482 <memcpy+0xe>
 800648e:	bd10      	pop	{r4, pc}

08006490 <__assert_func>:
 8006490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006492:	4614      	mov	r4, r2
 8006494:	461a      	mov	r2, r3
 8006496:	4b09      	ldr	r3, [pc, #36]	@ (80064bc <__assert_func+0x2c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4605      	mov	r5, r0
 800649c:	68d8      	ldr	r0, [r3, #12]
 800649e:	b954      	cbnz	r4, 80064b6 <__assert_func+0x26>
 80064a0:	4b07      	ldr	r3, [pc, #28]	@ (80064c0 <__assert_func+0x30>)
 80064a2:	461c      	mov	r4, r3
 80064a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064a8:	9100      	str	r1, [sp, #0]
 80064aa:	462b      	mov	r3, r5
 80064ac:	4905      	ldr	r1, [pc, #20]	@ (80064c4 <__assert_func+0x34>)
 80064ae:	f000 f86f 	bl	8006590 <fiprintf>
 80064b2:	f000 f87f 	bl	80065b4 <abort>
 80064b6:	4b04      	ldr	r3, [pc, #16]	@ (80064c8 <__assert_func+0x38>)
 80064b8:	e7f4      	b.n	80064a4 <__assert_func+0x14>
 80064ba:	bf00      	nop
 80064bc:	20000020 	.word	0x20000020
 80064c0:	08006e46 	.word	0x08006e46
 80064c4:	08006e18 	.word	0x08006e18
 80064c8:	08006e0b 	.word	0x08006e0b

080064cc <_calloc_r>:
 80064cc:	b570      	push	{r4, r5, r6, lr}
 80064ce:	fba1 5402 	umull	r5, r4, r1, r2
 80064d2:	b93c      	cbnz	r4, 80064e4 <_calloc_r+0x18>
 80064d4:	4629      	mov	r1, r5
 80064d6:	f7ff f991 	bl	80057fc <_malloc_r>
 80064da:	4606      	mov	r6, r0
 80064dc:	b928      	cbnz	r0, 80064ea <_calloc_r+0x1e>
 80064de:	2600      	movs	r6, #0
 80064e0:	4630      	mov	r0, r6
 80064e2:	bd70      	pop	{r4, r5, r6, pc}
 80064e4:	220c      	movs	r2, #12
 80064e6:	6002      	str	r2, [r0, #0]
 80064e8:	e7f9      	b.n	80064de <_calloc_r+0x12>
 80064ea:	462a      	mov	r2, r5
 80064ec:	4621      	mov	r1, r4
 80064ee:	f7fe fab0 	bl	8004a52 <memset>
 80064f2:	e7f5      	b.n	80064e0 <_calloc_r+0x14>

080064f4 <__ascii_mbtowc>:
 80064f4:	b082      	sub	sp, #8
 80064f6:	b901      	cbnz	r1, 80064fa <__ascii_mbtowc+0x6>
 80064f8:	a901      	add	r1, sp, #4
 80064fa:	b142      	cbz	r2, 800650e <__ascii_mbtowc+0x1a>
 80064fc:	b14b      	cbz	r3, 8006512 <__ascii_mbtowc+0x1e>
 80064fe:	7813      	ldrb	r3, [r2, #0]
 8006500:	600b      	str	r3, [r1, #0]
 8006502:	7812      	ldrb	r2, [r2, #0]
 8006504:	1e10      	subs	r0, r2, #0
 8006506:	bf18      	it	ne
 8006508:	2001      	movne	r0, #1
 800650a:	b002      	add	sp, #8
 800650c:	4770      	bx	lr
 800650e:	4610      	mov	r0, r2
 8006510:	e7fb      	b.n	800650a <__ascii_mbtowc+0x16>
 8006512:	f06f 0001 	mvn.w	r0, #1
 8006516:	e7f8      	b.n	800650a <__ascii_mbtowc+0x16>

08006518 <_realloc_r>:
 8006518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800651c:	4680      	mov	r8, r0
 800651e:	4615      	mov	r5, r2
 8006520:	460c      	mov	r4, r1
 8006522:	b921      	cbnz	r1, 800652e <_realloc_r+0x16>
 8006524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006528:	4611      	mov	r1, r2
 800652a:	f7ff b967 	b.w	80057fc <_malloc_r>
 800652e:	b92a      	cbnz	r2, 800653c <_realloc_r+0x24>
 8006530:	f7ff f8f0 	bl	8005714 <_free_r>
 8006534:	2400      	movs	r4, #0
 8006536:	4620      	mov	r0, r4
 8006538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800653c:	f000 f841 	bl	80065c2 <_malloc_usable_size_r>
 8006540:	4285      	cmp	r5, r0
 8006542:	4606      	mov	r6, r0
 8006544:	d802      	bhi.n	800654c <_realloc_r+0x34>
 8006546:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800654a:	d8f4      	bhi.n	8006536 <_realloc_r+0x1e>
 800654c:	4629      	mov	r1, r5
 800654e:	4640      	mov	r0, r8
 8006550:	f7ff f954 	bl	80057fc <_malloc_r>
 8006554:	4607      	mov	r7, r0
 8006556:	2800      	cmp	r0, #0
 8006558:	d0ec      	beq.n	8006534 <_realloc_r+0x1c>
 800655a:	42b5      	cmp	r5, r6
 800655c:	462a      	mov	r2, r5
 800655e:	4621      	mov	r1, r4
 8006560:	bf28      	it	cs
 8006562:	4632      	movcs	r2, r6
 8006564:	f7ff ff86 	bl	8006474 <memcpy>
 8006568:	4621      	mov	r1, r4
 800656a:	4640      	mov	r0, r8
 800656c:	f7ff f8d2 	bl	8005714 <_free_r>
 8006570:	463c      	mov	r4, r7
 8006572:	e7e0      	b.n	8006536 <_realloc_r+0x1e>

08006574 <__ascii_wctomb>:
 8006574:	4603      	mov	r3, r0
 8006576:	4608      	mov	r0, r1
 8006578:	b141      	cbz	r1, 800658c <__ascii_wctomb+0x18>
 800657a:	2aff      	cmp	r2, #255	@ 0xff
 800657c:	d904      	bls.n	8006588 <__ascii_wctomb+0x14>
 800657e:	228a      	movs	r2, #138	@ 0x8a
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	f04f 30ff 	mov.w	r0, #4294967295
 8006586:	4770      	bx	lr
 8006588:	700a      	strb	r2, [r1, #0]
 800658a:	2001      	movs	r0, #1
 800658c:	4770      	bx	lr
	...

08006590 <fiprintf>:
 8006590:	b40e      	push	{r1, r2, r3}
 8006592:	b503      	push	{r0, r1, lr}
 8006594:	4601      	mov	r1, r0
 8006596:	ab03      	add	r3, sp, #12
 8006598:	4805      	ldr	r0, [pc, #20]	@ (80065b0 <fiprintf+0x20>)
 800659a:	f853 2b04 	ldr.w	r2, [r3], #4
 800659e:	6800      	ldr	r0, [r0, #0]
 80065a0:	9301      	str	r3, [sp, #4]
 80065a2:	f000 f83f 	bl	8006624 <_vfiprintf_r>
 80065a6:	b002      	add	sp, #8
 80065a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80065ac:	b003      	add	sp, #12
 80065ae:	4770      	bx	lr
 80065b0:	20000020 	.word	0x20000020

080065b4 <abort>:
 80065b4:	b508      	push	{r3, lr}
 80065b6:	2006      	movs	r0, #6
 80065b8:	f000 fa08 	bl	80069cc <raise>
 80065bc:	2001      	movs	r0, #1
 80065be:	f7fa fb66 	bl	8000c8e <_exit>

080065c2 <_malloc_usable_size_r>:
 80065c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065c6:	1f18      	subs	r0, r3, #4
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	bfbc      	itt	lt
 80065cc:	580b      	ldrlt	r3, [r1, r0]
 80065ce:	18c0      	addlt	r0, r0, r3
 80065d0:	4770      	bx	lr

080065d2 <__sfputc_r>:
 80065d2:	6893      	ldr	r3, [r2, #8]
 80065d4:	3b01      	subs	r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	b410      	push	{r4}
 80065da:	6093      	str	r3, [r2, #8]
 80065dc:	da08      	bge.n	80065f0 <__sfputc_r+0x1e>
 80065de:	6994      	ldr	r4, [r2, #24]
 80065e0:	42a3      	cmp	r3, r4
 80065e2:	db01      	blt.n	80065e8 <__sfputc_r+0x16>
 80065e4:	290a      	cmp	r1, #10
 80065e6:	d103      	bne.n	80065f0 <__sfputc_r+0x1e>
 80065e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065ec:	f000 b932 	b.w	8006854 <__swbuf_r>
 80065f0:	6813      	ldr	r3, [r2, #0]
 80065f2:	1c58      	adds	r0, r3, #1
 80065f4:	6010      	str	r0, [r2, #0]
 80065f6:	7019      	strb	r1, [r3, #0]
 80065f8:	4608      	mov	r0, r1
 80065fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <__sfputs_r>:
 8006600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006602:	4606      	mov	r6, r0
 8006604:	460f      	mov	r7, r1
 8006606:	4614      	mov	r4, r2
 8006608:	18d5      	adds	r5, r2, r3
 800660a:	42ac      	cmp	r4, r5
 800660c:	d101      	bne.n	8006612 <__sfputs_r+0x12>
 800660e:	2000      	movs	r0, #0
 8006610:	e007      	b.n	8006622 <__sfputs_r+0x22>
 8006612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006616:	463a      	mov	r2, r7
 8006618:	4630      	mov	r0, r6
 800661a:	f7ff ffda 	bl	80065d2 <__sfputc_r>
 800661e:	1c43      	adds	r3, r0, #1
 8006620:	d1f3      	bne.n	800660a <__sfputs_r+0xa>
 8006622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006624 <_vfiprintf_r>:
 8006624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006628:	460d      	mov	r5, r1
 800662a:	b09d      	sub	sp, #116	@ 0x74
 800662c:	4614      	mov	r4, r2
 800662e:	4698      	mov	r8, r3
 8006630:	4606      	mov	r6, r0
 8006632:	b118      	cbz	r0, 800663c <_vfiprintf_r+0x18>
 8006634:	6a03      	ldr	r3, [r0, #32]
 8006636:	b90b      	cbnz	r3, 800663c <_vfiprintf_r+0x18>
 8006638:	f7fe f972 	bl	8004920 <__sinit>
 800663c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800663e:	07d9      	lsls	r1, r3, #31
 8006640:	d405      	bmi.n	800664e <_vfiprintf_r+0x2a>
 8006642:	89ab      	ldrh	r3, [r5, #12]
 8006644:	059a      	lsls	r2, r3, #22
 8006646:	d402      	bmi.n	800664e <_vfiprintf_r+0x2a>
 8006648:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800664a:	f7fe fa80 	bl	8004b4e <__retarget_lock_acquire_recursive>
 800664e:	89ab      	ldrh	r3, [r5, #12]
 8006650:	071b      	lsls	r3, r3, #28
 8006652:	d501      	bpl.n	8006658 <_vfiprintf_r+0x34>
 8006654:	692b      	ldr	r3, [r5, #16]
 8006656:	b99b      	cbnz	r3, 8006680 <_vfiprintf_r+0x5c>
 8006658:	4629      	mov	r1, r5
 800665a:	4630      	mov	r0, r6
 800665c:	f000 f938 	bl	80068d0 <__swsetup_r>
 8006660:	b170      	cbz	r0, 8006680 <_vfiprintf_r+0x5c>
 8006662:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006664:	07dc      	lsls	r4, r3, #31
 8006666:	d504      	bpl.n	8006672 <_vfiprintf_r+0x4e>
 8006668:	f04f 30ff 	mov.w	r0, #4294967295
 800666c:	b01d      	add	sp, #116	@ 0x74
 800666e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006672:	89ab      	ldrh	r3, [r5, #12]
 8006674:	0598      	lsls	r0, r3, #22
 8006676:	d4f7      	bmi.n	8006668 <_vfiprintf_r+0x44>
 8006678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800667a:	f7fe fa69 	bl	8004b50 <__retarget_lock_release_recursive>
 800667e:	e7f3      	b.n	8006668 <_vfiprintf_r+0x44>
 8006680:	2300      	movs	r3, #0
 8006682:	9309      	str	r3, [sp, #36]	@ 0x24
 8006684:	2320      	movs	r3, #32
 8006686:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800668a:	f8cd 800c 	str.w	r8, [sp, #12]
 800668e:	2330      	movs	r3, #48	@ 0x30
 8006690:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006840 <_vfiprintf_r+0x21c>
 8006694:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006698:	f04f 0901 	mov.w	r9, #1
 800669c:	4623      	mov	r3, r4
 800669e:	469a      	mov	sl, r3
 80066a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066a4:	b10a      	cbz	r2, 80066aa <_vfiprintf_r+0x86>
 80066a6:	2a25      	cmp	r2, #37	@ 0x25
 80066a8:	d1f9      	bne.n	800669e <_vfiprintf_r+0x7a>
 80066aa:	ebba 0b04 	subs.w	fp, sl, r4
 80066ae:	d00b      	beq.n	80066c8 <_vfiprintf_r+0xa4>
 80066b0:	465b      	mov	r3, fp
 80066b2:	4622      	mov	r2, r4
 80066b4:	4629      	mov	r1, r5
 80066b6:	4630      	mov	r0, r6
 80066b8:	f7ff ffa2 	bl	8006600 <__sfputs_r>
 80066bc:	3001      	adds	r0, #1
 80066be:	f000 80a7 	beq.w	8006810 <_vfiprintf_r+0x1ec>
 80066c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066c4:	445a      	add	r2, fp
 80066c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80066c8:	f89a 3000 	ldrb.w	r3, [sl]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 809f 	beq.w	8006810 <_vfiprintf_r+0x1ec>
 80066d2:	2300      	movs	r3, #0
 80066d4:	f04f 32ff 	mov.w	r2, #4294967295
 80066d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066dc:	f10a 0a01 	add.w	sl, sl, #1
 80066e0:	9304      	str	r3, [sp, #16]
 80066e2:	9307      	str	r3, [sp, #28]
 80066e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80066e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80066ea:	4654      	mov	r4, sl
 80066ec:	2205      	movs	r2, #5
 80066ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066f2:	4853      	ldr	r0, [pc, #332]	@ (8006840 <_vfiprintf_r+0x21c>)
 80066f4:	f7f9 fda4 	bl	8000240 <memchr>
 80066f8:	9a04      	ldr	r2, [sp, #16]
 80066fa:	b9d8      	cbnz	r0, 8006734 <_vfiprintf_r+0x110>
 80066fc:	06d1      	lsls	r1, r2, #27
 80066fe:	bf44      	itt	mi
 8006700:	2320      	movmi	r3, #32
 8006702:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006706:	0713      	lsls	r3, r2, #28
 8006708:	bf44      	itt	mi
 800670a:	232b      	movmi	r3, #43	@ 0x2b
 800670c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006710:	f89a 3000 	ldrb.w	r3, [sl]
 8006714:	2b2a      	cmp	r3, #42	@ 0x2a
 8006716:	d015      	beq.n	8006744 <_vfiprintf_r+0x120>
 8006718:	9a07      	ldr	r2, [sp, #28]
 800671a:	4654      	mov	r4, sl
 800671c:	2000      	movs	r0, #0
 800671e:	f04f 0c0a 	mov.w	ip, #10
 8006722:	4621      	mov	r1, r4
 8006724:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006728:	3b30      	subs	r3, #48	@ 0x30
 800672a:	2b09      	cmp	r3, #9
 800672c:	d94b      	bls.n	80067c6 <_vfiprintf_r+0x1a2>
 800672e:	b1b0      	cbz	r0, 800675e <_vfiprintf_r+0x13a>
 8006730:	9207      	str	r2, [sp, #28]
 8006732:	e014      	b.n	800675e <_vfiprintf_r+0x13a>
 8006734:	eba0 0308 	sub.w	r3, r0, r8
 8006738:	fa09 f303 	lsl.w	r3, r9, r3
 800673c:	4313      	orrs	r3, r2
 800673e:	9304      	str	r3, [sp, #16]
 8006740:	46a2      	mov	sl, r4
 8006742:	e7d2      	b.n	80066ea <_vfiprintf_r+0xc6>
 8006744:	9b03      	ldr	r3, [sp, #12]
 8006746:	1d19      	adds	r1, r3, #4
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	9103      	str	r1, [sp, #12]
 800674c:	2b00      	cmp	r3, #0
 800674e:	bfbb      	ittet	lt
 8006750:	425b      	neglt	r3, r3
 8006752:	f042 0202 	orrlt.w	r2, r2, #2
 8006756:	9307      	strge	r3, [sp, #28]
 8006758:	9307      	strlt	r3, [sp, #28]
 800675a:	bfb8      	it	lt
 800675c:	9204      	strlt	r2, [sp, #16]
 800675e:	7823      	ldrb	r3, [r4, #0]
 8006760:	2b2e      	cmp	r3, #46	@ 0x2e
 8006762:	d10a      	bne.n	800677a <_vfiprintf_r+0x156>
 8006764:	7863      	ldrb	r3, [r4, #1]
 8006766:	2b2a      	cmp	r3, #42	@ 0x2a
 8006768:	d132      	bne.n	80067d0 <_vfiprintf_r+0x1ac>
 800676a:	9b03      	ldr	r3, [sp, #12]
 800676c:	1d1a      	adds	r2, r3, #4
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	9203      	str	r2, [sp, #12]
 8006772:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006776:	3402      	adds	r4, #2
 8006778:	9305      	str	r3, [sp, #20]
 800677a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006850 <_vfiprintf_r+0x22c>
 800677e:	7821      	ldrb	r1, [r4, #0]
 8006780:	2203      	movs	r2, #3
 8006782:	4650      	mov	r0, sl
 8006784:	f7f9 fd5c 	bl	8000240 <memchr>
 8006788:	b138      	cbz	r0, 800679a <_vfiprintf_r+0x176>
 800678a:	9b04      	ldr	r3, [sp, #16]
 800678c:	eba0 000a 	sub.w	r0, r0, sl
 8006790:	2240      	movs	r2, #64	@ 0x40
 8006792:	4082      	lsls	r2, r0
 8006794:	4313      	orrs	r3, r2
 8006796:	3401      	adds	r4, #1
 8006798:	9304      	str	r3, [sp, #16]
 800679a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800679e:	4829      	ldr	r0, [pc, #164]	@ (8006844 <_vfiprintf_r+0x220>)
 80067a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067a4:	2206      	movs	r2, #6
 80067a6:	f7f9 fd4b 	bl	8000240 <memchr>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	d03f      	beq.n	800682e <_vfiprintf_r+0x20a>
 80067ae:	4b26      	ldr	r3, [pc, #152]	@ (8006848 <_vfiprintf_r+0x224>)
 80067b0:	bb1b      	cbnz	r3, 80067fa <_vfiprintf_r+0x1d6>
 80067b2:	9b03      	ldr	r3, [sp, #12]
 80067b4:	3307      	adds	r3, #7
 80067b6:	f023 0307 	bic.w	r3, r3, #7
 80067ba:	3308      	adds	r3, #8
 80067bc:	9303      	str	r3, [sp, #12]
 80067be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067c0:	443b      	add	r3, r7
 80067c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80067c4:	e76a      	b.n	800669c <_vfiprintf_r+0x78>
 80067c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80067ca:	460c      	mov	r4, r1
 80067cc:	2001      	movs	r0, #1
 80067ce:	e7a8      	b.n	8006722 <_vfiprintf_r+0xfe>
 80067d0:	2300      	movs	r3, #0
 80067d2:	3401      	adds	r4, #1
 80067d4:	9305      	str	r3, [sp, #20]
 80067d6:	4619      	mov	r1, r3
 80067d8:	f04f 0c0a 	mov.w	ip, #10
 80067dc:	4620      	mov	r0, r4
 80067de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067e2:	3a30      	subs	r2, #48	@ 0x30
 80067e4:	2a09      	cmp	r2, #9
 80067e6:	d903      	bls.n	80067f0 <_vfiprintf_r+0x1cc>
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0c6      	beq.n	800677a <_vfiprintf_r+0x156>
 80067ec:	9105      	str	r1, [sp, #20]
 80067ee:	e7c4      	b.n	800677a <_vfiprintf_r+0x156>
 80067f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80067f4:	4604      	mov	r4, r0
 80067f6:	2301      	movs	r3, #1
 80067f8:	e7f0      	b.n	80067dc <_vfiprintf_r+0x1b8>
 80067fa:	ab03      	add	r3, sp, #12
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	462a      	mov	r2, r5
 8006800:	4b12      	ldr	r3, [pc, #72]	@ (800684c <_vfiprintf_r+0x228>)
 8006802:	a904      	add	r1, sp, #16
 8006804:	4630      	mov	r0, r6
 8006806:	f7fd fc57 	bl	80040b8 <_printf_float>
 800680a:	4607      	mov	r7, r0
 800680c:	1c78      	adds	r0, r7, #1
 800680e:	d1d6      	bne.n	80067be <_vfiprintf_r+0x19a>
 8006810:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006812:	07d9      	lsls	r1, r3, #31
 8006814:	d405      	bmi.n	8006822 <_vfiprintf_r+0x1fe>
 8006816:	89ab      	ldrh	r3, [r5, #12]
 8006818:	059a      	lsls	r2, r3, #22
 800681a:	d402      	bmi.n	8006822 <_vfiprintf_r+0x1fe>
 800681c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800681e:	f7fe f997 	bl	8004b50 <__retarget_lock_release_recursive>
 8006822:	89ab      	ldrh	r3, [r5, #12]
 8006824:	065b      	lsls	r3, r3, #25
 8006826:	f53f af1f 	bmi.w	8006668 <_vfiprintf_r+0x44>
 800682a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800682c:	e71e      	b.n	800666c <_vfiprintf_r+0x48>
 800682e:	ab03      	add	r3, sp, #12
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	462a      	mov	r2, r5
 8006834:	4b05      	ldr	r3, [pc, #20]	@ (800684c <_vfiprintf_r+0x228>)
 8006836:	a904      	add	r1, sp, #16
 8006838:	4630      	mov	r0, r6
 800683a:	f7fd fec5 	bl	80045c8 <_printf_i>
 800683e:	e7e4      	b.n	800680a <_vfiprintf_r+0x1e6>
 8006840:	08006df0 	.word	0x08006df0
 8006844:	08006dfa 	.word	0x08006dfa
 8006848:	080040b9 	.word	0x080040b9
 800684c:	08006601 	.word	0x08006601
 8006850:	08006df6 	.word	0x08006df6

08006854 <__swbuf_r>:
 8006854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006856:	460e      	mov	r6, r1
 8006858:	4614      	mov	r4, r2
 800685a:	4605      	mov	r5, r0
 800685c:	b118      	cbz	r0, 8006866 <__swbuf_r+0x12>
 800685e:	6a03      	ldr	r3, [r0, #32]
 8006860:	b90b      	cbnz	r3, 8006866 <__swbuf_r+0x12>
 8006862:	f7fe f85d 	bl	8004920 <__sinit>
 8006866:	69a3      	ldr	r3, [r4, #24]
 8006868:	60a3      	str	r3, [r4, #8]
 800686a:	89a3      	ldrh	r3, [r4, #12]
 800686c:	071a      	lsls	r2, r3, #28
 800686e:	d501      	bpl.n	8006874 <__swbuf_r+0x20>
 8006870:	6923      	ldr	r3, [r4, #16]
 8006872:	b943      	cbnz	r3, 8006886 <__swbuf_r+0x32>
 8006874:	4621      	mov	r1, r4
 8006876:	4628      	mov	r0, r5
 8006878:	f000 f82a 	bl	80068d0 <__swsetup_r>
 800687c:	b118      	cbz	r0, 8006886 <__swbuf_r+0x32>
 800687e:	f04f 37ff 	mov.w	r7, #4294967295
 8006882:	4638      	mov	r0, r7
 8006884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	6922      	ldr	r2, [r4, #16]
 800688a:	1a98      	subs	r0, r3, r2
 800688c:	6963      	ldr	r3, [r4, #20]
 800688e:	b2f6      	uxtb	r6, r6
 8006890:	4283      	cmp	r3, r0
 8006892:	4637      	mov	r7, r6
 8006894:	dc05      	bgt.n	80068a2 <__swbuf_r+0x4e>
 8006896:	4621      	mov	r1, r4
 8006898:	4628      	mov	r0, r5
 800689a:	f7ff fd99 	bl	80063d0 <_fflush_r>
 800689e:	2800      	cmp	r0, #0
 80068a0:	d1ed      	bne.n	800687e <__swbuf_r+0x2a>
 80068a2:	68a3      	ldr	r3, [r4, #8]
 80068a4:	3b01      	subs	r3, #1
 80068a6:	60a3      	str	r3, [r4, #8]
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	1c5a      	adds	r2, r3, #1
 80068ac:	6022      	str	r2, [r4, #0]
 80068ae:	701e      	strb	r6, [r3, #0]
 80068b0:	6962      	ldr	r2, [r4, #20]
 80068b2:	1c43      	adds	r3, r0, #1
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d004      	beq.n	80068c2 <__swbuf_r+0x6e>
 80068b8:	89a3      	ldrh	r3, [r4, #12]
 80068ba:	07db      	lsls	r3, r3, #31
 80068bc:	d5e1      	bpl.n	8006882 <__swbuf_r+0x2e>
 80068be:	2e0a      	cmp	r6, #10
 80068c0:	d1df      	bne.n	8006882 <__swbuf_r+0x2e>
 80068c2:	4621      	mov	r1, r4
 80068c4:	4628      	mov	r0, r5
 80068c6:	f7ff fd83 	bl	80063d0 <_fflush_r>
 80068ca:	2800      	cmp	r0, #0
 80068cc:	d0d9      	beq.n	8006882 <__swbuf_r+0x2e>
 80068ce:	e7d6      	b.n	800687e <__swbuf_r+0x2a>

080068d0 <__swsetup_r>:
 80068d0:	b538      	push	{r3, r4, r5, lr}
 80068d2:	4b29      	ldr	r3, [pc, #164]	@ (8006978 <__swsetup_r+0xa8>)
 80068d4:	4605      	mov	r5, r0
 80068d6:	6818      	ldr	r0, [r3, #0]
 80068d8:	460c      	mov	r4, r1
 80068da:	b118      	cbz	r0, 80068e4 <__swsetup_r+0x14>
 80068dc:	6a03      	ldr	r3, [r0, #32]
 80068de:	b90b      	cbnz	r3, 80068e4 <__swsetup_r+0x14>
 80068e0:	f7fe f81e 	bl	8004920 <__sinit>
 80068e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068e8:	0719      	lsls	r1, r3, #28
 80068ea:	d422      	bmi.n	8006932 <__swsetup_r+0x62>
 80068ec:	06da      	lsls	r2, r3, #27
 80068ee:	d407      	bmi.n	8006900 <__swsetup_r+0x30>
 80068f0:	2209      	movs	r2, #9
 80068f2:	602a      	str	r2, [r5, #0]
 80068f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068f8:	81a3      	strh	r3, [r4, #12]
 80068fa:	f04f 30ff 	mov.w	r0, #4294967295
 80068fe:	e033      	b.n	8006968 <__swsetup_r+0x98>
 8006900:	0758      	lsls	r0, r3, #29
 8006902:	d512      	bpl.n	800692a <__swsetup_r+0x5a>
 8006904:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006906:	b141      	cbz	r1, 800691a <__swsetup_r+0x4a>
 8006908:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800690c:	4299      	cmp	r1, r3
 800690e:	d002      	beq.n	8006916 <__swsetup_r+0x46>
 8006910:	4628      	mov	r0, r5
 8006912:	f7fe feff 	bl	8005714 <_free_r>
 8006916:	2300      	movs	r3, #0
 8006918:	6363      	str	r3, [r4, #52]	@ 0x34
 800691a:	89a3      	ldrh	r3, [r4, #12]
 800691c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006920:	81a3      	strh	r3, [r4, #12]
 8006922:	2300      	movs	r3, #0
 8006924:	6063      	str	r3, [r4, #4]
 8006926:	6923      	ldr	r3, [r4, #16]
 8006928:	6023      	str	r3, [r4, #0]
 800692a:	89a3      	ldrh	r3, [r4, #12]
 800692c:	f043 0308 	orr.w	r3, r3, #8
 8006930:	81a3      	strh	r3, [r4, #12]
 8006932:	6923      	ldr	r3, [r4, #16]
 8006934:	b94b      	cbnz	r3, 800694a <__swsetup_r+0x7a>
 8006936:	89a3      	ldrh	r3, [r4, #12]
 8006938:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800693c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006940:	d003      	beq.n	800694a <__swsetup_r+0x7a>
 8006942:	4621      	mov	r1, r4
 8006944:	4628      	mov	r0, r5
 8006946:	f000 f883 	bl	8006a50 <__smakebuf_r>
 800694a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800694e:	f013 0201 	ands.w	r2, r3, #1
 8006952:	d00a      	beq.n	800696a <__swsetup_r+0x9a>
 8006954:	2200      	movs	r2, #0
 8006956:	60a2      	str	r2, [r4, #8]
 8006958:	6962      	ldr	r2, [r4, #20]
 800695a:	4252      	negs	r2, r2
 800695c:	61a2      	str	r2, [r4, #24]
 800695e:	6922      	ldr	r2, [r4, #16]
 8006960:	b942      	cbnz	r2, 8006974 <__swsetup_r+0xa4>
 8006962:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006966:	d1c5      	bne.n	80068f4 <__swsetup_r+0x24>
 8006968:	bd38      	pop	{r3, r4, r5, pc}
 800696a:	0799      	lsls	r1, r3, #30
 800696c:	bf58      	it	pl
 800696e:	6962      	ldrpl	r2, [r4, #20]
 8006970:	60a2      	str	r2, [r4, #8]
 8006972:	e7f4      	b.n	800695e <__swsetup_r+0x8e>
 8006974:	2000      	movs	r0, #0
 8006976:	e7f7      	b.n	8006968 <__swsetup_r+0x98>
 8006978:	20000020 	.word	0x20000020

0800697c <_raise_r>:
 800697c:	291f      	cmp	r1, #31
 800697e:	b538      	push	{r3, r4, r5, lr}
 8006980:	4605      	mov	r5, r0
 8006982:	460c      	mov	r4, r1
 8006984:	d904      	bls.n	8006990 <_raise_r+0x14>
 8006986:	2316      	movs	r3, #22
 8006988:	6003      	str	r3, [r0, #0]
 800698a:	f04f 30ff 	mov.w	r0, #4294967295
 800698e:	bd38      	pop	{r3, r4, r5, pc}
 8006990:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006992:	b112      	cbz	r2, 800699a <_raise_r+0x1e>
 8006994:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006998:	b94b      	cbnz	r3, 80069ae <_raise_r+0x32>
 800699a:	4628      	mov	r0, r5
 800699c:	f000 f830 	bl	8006a00 <_getpid_r>
 80069a0:	4622      	mov	r2, r4
 80069a2:	4601      	mov	r1, r0
 80069a4:	4628      	mov	r0, r5
 80069a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069aa:	f000 b817 	b.w	80069dc <_kill_r>
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d00a      	beq.n	80069c8 <_raise_r+0x4c>
 80069b2:	1c59      	adds	r1, r3, #1
 80069b4:	d103      	bne.n	80069be <_raise_r+0x42>
 80069b6:	2316      	movs	r3, #22
 80069b8:	6003      	str	r3, [r0, #0]
 80069ba:	2001      	movs	r0, #1
 80069bc:	e7e7      	b.n	800698e <_raise_r+0x12>
 80069be:	2100      	movs	r1, #0
 80069c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80069c4:	4620      	mov	r0, r4
 80069c6:	4798      	blx	r3
 80069c8:	2000      	movs	r0, #0
 80069ca:	e7e0      	b.n	800698e <_raise_r+0x12>

080069cc <raise>:
 80069cc:	4b02      	ldr	r3, [pc, #8]	@ (80069d8 <raise+0xc>)
 80069ce:	4601      	mov	r1, r0
 80069d0:	6818      	ldr	r0, [r3, #0]
 80069d2:	f7ff bfd3 	b.w	800697c <_raise_r>
 80069d6:	bf00      	nop
 80069d8:	20000020 	.word	0x20000020

080069dc <_kill_r>:
 80069dc:	b538      	push	{r3, r4, r5, lr}
 80069de:	4d07      	ldr	r5, [pc, #28]	@ (80069fc <_kill_r+0x20>)
 80069e0:	2300      	movs	r3, #0
 80069e2:	4604      	mov	r4, r0
 80069e4:	4608      	mov	r0, r1
 80069e6:	4611      	mov	r1, r2
 80069e8:	602b      	str	r3, [r5, #0]
 80069ea:	f7fa f940 	bl	8000c6e <_kill>
 80069ee:	1c43      	adds	r3, r0, #1
 80069f0:	d102      	bne.n	80069f8 <_kill_r+0x1c>
 80069f2:	682b      	ldr	r3, [r5, #0]
 80069f4:	b103      	cbz	r3, 80069f8 <_kill_r+0x1c>
 80069f6:	6023      	str	r3, [r4, #0]
 80069f8:	bd38      	pop	{r3, r4, r5, pc}
 80069fa:	bf00      	nop
 80069fc:	2000041c 	.word	0x2000041c

08006a00 <_getpid_r>:
 8006a00:	f7fa b92d 	b.w	8000c5e <_getpid>

08006a04 <__swhatbuf_r>:
 8006a04:	b570      	push	{r4, r5, r6, lr}
 8006a06:	460c      	mov	r4, r1
 8006a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a0c:	2900      	cmp	r1, #0
 8006a0e:	b096      	sub	sp, #88	@ 0x58
 8006a10:	4615      	mov	r5, r2
 8006a12:	461e      	mov	r6, r3
 8006a14:	da0d      	bge.n	8006a32 <__swhatbuf_r+0x2e>
 8006a16:	89a3      	ldrh	r3, [r4, #12]
 8006a18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a1c:	f04f 0100 	mov.w	r1, #0
 8006a20:	bf14      	ite	ne
 8006a22:	2340      	movne	r3, #64	@ 0x40
 8006a24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a28:	2000      	movs	r0, #0
 8006a2a:	6031      	str	r1, [r6, #0]
 8006a2c:	602b      	str	r3, [r5, #0]
 8006a2e:	b016      	add	sp, #88	@ 0x58
 8006a30:	bd70      	pop	{r4, r5, r6, pc}
 8006a32:	466a      	mov	r2, sp
 8006a34:	f000 f848 	bl	8006ac8 <_fstat_r>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	dbec      	blt.n	8006a16 <__swhatbuf_r+0x12>
 8006a3c:	9901      	ldr	r1, [sp, #4]
 8006a3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a46:	4259      	negs	r1, r3
 8006a48:	4159      	adcs	r1, r3
 8006a4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a4e:	e7eb      	b.n	8006a28 <__swhatbuf_r+0x24>

08006a50 <__smakebuf_r>:
 8006a50:	898b      	ldrh	r3, [r1, #12]
 8006a52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a54:	079d      	lsls	r5, r3, #30
 8006a56:	4606      	mov	r6, r0
 8006a58:	460c      	mov	r4, r1
 8006a5a:	d507      	bpl.n	8006a6c <__smakebuf_r+0x1c>
 8006a5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a60:	6023      	str	r3, [r4, #0]
 8006a62:	6123      	str	r3, [r4, #16]
 8006a64:	2301      	movs	r3, #1
 8006a66:	6163      	str	r3, [r4, #20]
 8006a68:	b003      	add	sp, #12
 8006a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a6c:	ab01      	add	r3, sp, #4
 8006a6e:	466a      	mov	r2, sp
 8006a70:	f7ff ffc8 	bl	8006a04 <__swhatbuf_r>
 8006a74:	9f00      	ldr	r7, [sp, #0]
 8006a76:	4605      	mov	r5, r0
 8006a78:	4639      	mov	r1, r7
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	f7fe febe 	bl	80057fc <_malloc_r>
 8006a80:	b948      	cbnz	r0, 8006a96 <__smakebuf_r+0x46>
 8006a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a86:	059a      	lsls	r2, r3, #22
 8006a88:	d4ee      	bmi.n	8006a68 <__smakebuf_r+0x18>
 8006a8a:	f023 0303 	bic.w	r3, r3, #3
 8006a8e:	f043 0302 	orr.w	r3, r3, #2
 8006a92:	81a3      	strh	r3, [r4, #12]
 8006a94:	e7e2      	b.n	8006a5c <__smakebuf_r+0xc>
 8006a96:	89a3      	ldrh	r3, [r4, #12]
 8006a98:	6020      	str	r0, [r4, #0]
 8006a9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a9e:	81a3      	strh	r3, [r4, #12]
 8006aa0:	9b01      	ldr	r3, [sp, #4]
 8006aa2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006aa6:	b15b      	cbz	r3, 8006ac0 <__smakebuf_r+0x70>
 8006aa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aac:	4630      	mov	r0, r6
 8006aae:	f000 f81d 	bl	8006aec <_isatty_r>
 8006ab2:	b128      	cbz	r0, 8006ac0 <__smakebuf_r+0x70>
 8006ab4:	89a3      	ldrh	r3, [r4, #12]
 8006ab6:	f023 0303 	bic.w	r3, r3, #3
 8006aba:	f043 0301 	orr.w	r3, r3, #1
 8006abe:	81a3      	strh	r3, [r4, #12]
 8006ac0:	89a3      	ldrh	r3, [r4, #12]
 8006ac2:	431d      	orrs	r5, r3
 8006ac4:	81a5      	strh	r5, [r4, #12]
 8006ac6:	e7cf      	b.n	8006a68 <__smakebuf_r+0x18>

08006ac8 <_fstat_r>:
 8006ac8:	b538      	push	{r3, r4, r5, lr}
 8006aca:	4d07      	ldr	r5, [pc, #28]	@ (8006ae8 <_fstat_r+0x20>)
 8006acc:	2300      	movs	r3, #0
 8006ace:	4604      	mov	r4, r0
 8006ad0:	4608      	mov	r0, r1
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	602b      	str	r3, [r5, #0]
 8006ad6:	f7fa f92a 	bl	8000d2e <_fstat>
 8006ada:	1c43      	adds	r3, r0, #1
 8006adc:	d102      	bne.n	8006ae4 <_fstat_r+0x1c>
 8006ade:	682b      	ldr	r3, [r5, #0]
 8006ae0:	b103      	cbz	r3, 8006ae4 <_fstat_r+0x1c>
 8006ae2:	6023      	str	r3, [r4, #0]
 8006ae4:	bd38      	pop	{r3, r4, r5, pc}
 8006ae6:	bf00      	nop
 8006ae8:	2000041c 	.word	0x2000041c

08006aec <_isatty_r>:
 8006aec:	b538      	push	{r3, r4, r5, lr}
 8006aee:	4d06      	ldr	r5, [pc, #24]	@ (8006b08 <_isatty_r+0x1c>)
 8006af0:	2300      	movs	r3, #0
 8006af2:	4604      	mov	r4, r0
 8006af4:	4608      	mov	r0, r1
 8006af6:	602b      	str	r3, [r5, #0]
 8006af8:	f7fa f929 	bl	8000d4e <_isatty>
 8006afc:	1c43      	adds	r3, r0, #1
 8006afe:	d102      	bne.n	8006b06 <_isatty_r+0x1a>
 8006b00:	682b      	ldr	r3, [r5, #0]
 8006b02:	b103      	cbz	r3, 8006b06 <_isatty_r+0x1a>
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	bd38      	pop	{r3, r4, r5, pc}
 8006b08:	2000041c 	.word	0x2000041c

08006b0c <_init>:
 8006b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0e:	bf00      	nop
 8006b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b12:	bc08      	pop	{r3}
 8006b14:	469e      	mov	lr, r3
 8006b16:	4770      	bx	lr

08006b18 <_fini>:
 8006b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1a:	bf00      	nop
 8006b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b1e:	bc08      	pop	{r3}
 8006b20:	469e      	mov	lr, r3
 8006b22:	4770      	bx	lr
