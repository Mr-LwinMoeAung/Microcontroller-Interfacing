
lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029cc  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002bc4  08002bc4  00003bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bd4  08002bd4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002bd4  08002bd4  00003bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002bdc  08002bdc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bdc  08002bdc  00003bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002be0  08002be0  00003be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002be4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08002bf0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08002bf0  0000407c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d11  00000000  00000000  0000403a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001938  00000000  00000000  0000dd4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0000f688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ee  00000000  00000000  000100e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002676d  00000000  00000000  000108ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4d5  00000000  00000000  0003703b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2101  00000000  00000000  00043510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135611  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a60  00000000  00000000  00135654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001380b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002bac 	.word	0x08002bac

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002bac 	.word	0x08002bac

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <MX_GPIO_Init>:
/** Configure pins
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 030c 	add.w	r3, r7, #12
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b16      	ldr	r3, [pc, #88]	@ (8000598 <MX_GPIO_Init+0x70>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	4a15      	ldr	r2, [pc, #84]	@ (8000598 <MX_GPIO_Init+0x70>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6313      	str	r3, [r2, #48]	@ 0x30
 800054a:	4b13      	ldr	r3, [pc, #76]	@ (8000598 <MX_GPIO_Init+0x70>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000556:	4b10      	ldr	r3, [pc, #64]	@ (8000598 <MX_GPIO_Init+0x70>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a0f      	ldr	r2, [pc, #60]	@ (8000598 <MX_GPIO_Init+0x70>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b0d      	ldr	r3, [pc, #52]	@ (8000598 <MX_GPIO_Init+0x70>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800056e:	230c      	movs	r3, #12
 8000570:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000572:	2302      	movs	r3, #2
 8000574:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800057a:	2303      	movs	r3, #3
 800057c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800057e:	2307      	movs	r3, #7
 8000580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	f107 030c 	add.w	r3, r7, #12
 8000586:	4619      	mov	r1, r3
 8000588:	4804      	ldr	r0, [pc, #16]	@ (800059c <MX_GPIO_Init+0x74>)
 800058a:	f000 fc1f 	bl	8000dcc <HAL_GPIO_Init>

}
 800058e:	bf00      	nop
 8000590:	3720      	adds	r7, #32
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40023800 	.word	0x40023800
 800059c:	40020000 	.word	0x40020000

080005a0 <main>:

// Declare TIM handle
extern TIM_HandleTypeDef htim2;

int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005a6:	f000 f8a5 	bl	80006f4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 fa30 	bl	8000a0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f833 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f7ff ffb9 	bl	8000528 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005b6:	f000 f935 	bl	8000824 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float dutyCycle = 2.0;
 80005ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005be:	607b      	str	r3, [r7, #4]
    /* USER CODE END WHILE */
	  // Point 1: Record the time when duty cycle is set
//	          point1_time = HAL_GetTick();

	          // Adjust CCR3 value to change duty cycle
	          htim2.Instance->CCR3 = (10000 - 1) * dutyCycle;
 80005c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80005c4:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000608 <main+0x68>
 80005c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005cc:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <main+0x6c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005d4:	ee17 2a90 	vmov	r2, s15
 80005d8:	63da      	str	r2, [r3, #60]	@ 0x3c

	          // Start PWM signal generation on TIM2_CH3
	          HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80005da:	2108      	movs	r1, #8
 80005dc:	480b      	ldr	r0, [pc, #44]	@ (800060c <main+0x6c>)
 80005de:	f001 fb09 	bl	8001bf4 <HAL_TIM_PWM_Start>

	          // Point 2: Record the time when PWM starts
//	          point2_time = HAL_GetTick();

	          // Delay to allow PWM signal generation for a while
	          HAL_Delay(100);
 80005e2:	2064      	movs	r0, #100	@ 0x64
 80005e4:	f000 fa70 	bl	8000ac8 <HAL_Delay>

	          // Stop PWM signal generation on TIM2_CH3
	          HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80005e8:	2108      	movs	r1, #8
 80005ea:	4808      	ldr	r0, [pc, #32]	@ (800060c <main+0x6c>)
 80005ec:	f001 fbfc 	bl	8001de8 <HAL_TIM_PWM_Stop>

	          // Point 3: Record the time when PWM stops
//	          point3_time = HAL_GetTick();

	          // Read the state of pin GPIO_PIN_10 and store in pwm variable
	          pwm_state = (GPIOB->IDR & GPIO_PIN_10) >> 10;
 80005f0:	4b07      	ldr	r3, [pc, #28]	@ (8000610 <main+0x70>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	0a9b      	lsrs	r3, r3, #10
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <main+0x74>)
 8000600:	701a      	strb	r2, [r3, #0]
	          htim2.Instance->CCR3 = (10000 - 1) * dutyCycle;
 8000602:	bf00      	nop
 8000604:	e7dc      	b.n	80005c0 <main+0x20>
 8000606:	bf00      	nop
 8000608:	461c3c00 	.word	0x461c3c00
 800060c:	2000002c 	.word	0x2000002c
 8000610:	40020400 	.word	0x40020400
 8000614:	20000028 	.word	0x20000028

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	@ 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2234      	movs	r2, #52	@ 0x34
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fa94 	bl	8002b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	4b2b      	ldr	r3, [pc, #172]	@ (80006ec <SystemClock_Config+0xd4>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	4a2a      	ldr	r2, [pc, #168]	@ (80006ec <SystemClock_Config+0xd4>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	@ 0x40
 8000648:	4b28      	ldr	r3, [pc, #160]	@ (80006ec <SystemClock_Config+0xd4>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	4b26      	ldr	r3, [pc, #152]	@ (80006f0 <SystemClock_Config+0xd8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a25      	ldr	r2, [pc, #148]	@ (80006f0 <SystemClock_Config+0xd8>)
 800065a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <SystemClock_Config+0xd8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000674:	2310      	movs	r3, #16
 8000676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	2302      	movs	r3, #2
 800067a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067c:	2300      	movs	r3, #0
 800067e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000680:	2308      	movs	r3, #8
 8000682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000684:	23d8      	movs	r3, #216	@ 0xd8
 8000686:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800068c:	2302      	movs	r3, #2
 800068e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000690:	2302      	movs	r3, #2
 8000692:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fd93 	bl	80011c4 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006a4:	f000 f852 	bl	800074c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006a8:	f000 fd3c 	bl	8001124 <HAL_PWREx_EnableOverDrive>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006b2:	f000 f84b 	bl	800074c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2302      	movs	r3, #2
 80006bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006cc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	2107      	movs	r1, #7
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 f823 	bl	8001720 <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006e0:	f000 f834 	bl	800074c <Error_Handler>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3750      	adds	r7, #80	@ 0x50
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000706:	f000 fae9 	bl	8000cdc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800070a:	2301      	movs	r3, #1
 800070c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800070e:	2300      	movs	r3, #0
 8000710:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000716:	231f      	movs	r3, #31
 8000718:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800071a:	2387      	movs	r3, #135	@ 0x87
 800071c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800071e:	2300      	movs	r3, #0
 8000720:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000722:	2300      	movs	r3, #0
 8000724:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000726:	2301      	movs	r3, #1
 8000728:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800072a:	2301      	movs	r3, #1
 800072c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800072e:	2300      	movs	r3, #0
 8000730:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000732:	2300      	movs	r3, #0
 8000734:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000736:	463b      	mov	r3, r7
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fb07 	bl	8000d4c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800073e:	2004      	movs	r0, #4
 8000740:	f000 fae4 	bl	8000d0c <HAL_MPU_Enable>

}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
}
 8000752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <Error_Handler+0x8>

08000758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <HAL_MspInit+0x44>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000762:	4a0e      	ldr	r2, [pc, #56]	@ (800079c <HAL_MspInit+0x44>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000768:	6413      	str	r3, [r2, #64]	@ 0x40
 800076a:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <HAL_MspInit+0x44>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	4b09      	ldr	r3, [pc, #36]	@ (800079c <HAL_MspInit+0x44>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800077a:	4a08      	ldr	r2, [pc, #32]	@ (800079c <HAL_MspInit+0x44>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000780:	6453      	str	r3, [r2, #68]	@ 0x44
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <HAL_MspInit+0x44>)
 8000784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000786:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <NMI_Handler+0x4>

080007a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <HardFault_Handler+0x4>

080007b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <MemManage_Handler+0x4>

080007b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f6:	f000 f947 	bl	8000a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <SystemInit+0x20>)
 8000806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800080a:	4a05      	ldr	r2, [pc, #20]	@ (8000820 <SystemInit+0x20>)
 800080c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000810:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08e      	sub	sp, #56	@ 0x38
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000844:	463b      	mov	r3, r7
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
 8000852:	615a      	str	r2, [r3, #20]
 8000854:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000856:	4b2e      	ldr	r3, [pc, #184]	@ (8000910 <MX_TIM2_Init+0xec>)
 8000858:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800085c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 800085e:	4b2c      	ldr	r3, [pc, #176]	@ (8000910 <MX_TIM2_Init+0xec>)
 8000860:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 8000864:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000866:	4b2a      	ldr	r3, [pc, #168]	@ (8000910 <MX_TIM2_Init+0xec>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800086c:	4b28      	ldr	r3, [pc, #160]	@ (8000910 <MX_TIM2_Init+0xec>)
 800086e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000872:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000874:	4b26      	ldr	r3, [pc, #152]	@ (8000910 <MX_TIM2_Init+0xec>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087a:	4b25      	ldr	r3, [pc, #148]	@ (8000910 <MX_TIM2_Init+0xec>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000880:	4823      	ldr	r0, [pc, #140]	@ (8000910 <MX_TIM2_Init+0xec>)
 8000882:	f001 f8ff 	bl	8001a84 <HAL_TIM_Base_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800088c:	f7ff ff5e 	bl	800074c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000890:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000894:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000896:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800089a:	4619      	mov	r1, r3
 800089c:	481c      	ldr	r0, [pc, #112]	@ (8000910 <MX_TIM2_Init+0xec>)
 800089e:	f001 fc37 	bl	8002110 <HAL_TIM_ConfigClockSource>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80008a8:	f7ff ff50 	bl	800074c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008ac:	4818      	ldr	r0, [pc, #96]	@ (8000910 <MX_TIM2_Init+0xec>)
 80008ae:	f001 f940 	bl	8001b32 <HAL_TIM_PWM_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80008b8:	f7ff ff48 	bl	800074c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4811      	ldr	r0, [pc, #68]	@ (8000910 <MX_TIM2_Init+0xec>)
 80008cc:	f002 f8b4 	bl	8002a38 <HAL_TIMEx_MasterConfigSynchronization>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80008d6:	f7ff ff39 	bl	800074c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008da:	2360      	movs	r3, #96	@ 0x60
 80008dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000/4-1;
 80008de:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 80008e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008ec:	463b      	mov	r3, r7
 80008ee:	2208      	movs	r2, #8
 80008f0:	4619      	mov	r1, r3
 80008f2:	4807      	ldr	r0, [pc, #28]	@ (8000910 <MX_TIM2_Init+0xec>)
 80008f4:	f001 faf8 	bl	8001ee8 <HAL_TIM_PWM_ConfigChannel>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 80008fe:	f7ff ff25 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000902:	4803      	ldr	r0, [pc, #12]	@ (8000910 <MX_TIM2_Init+0xec>)
 8000904:	f000 f824 	bl	8000950 <HAL_TIM_MspPostInit>

}
 8000908:	bf00      	nop
 800090a:	3738      	adds	r7, #56	@ 0x38
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000002c 	.word	0x2000002c

08000914 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000924:	d10b      	bne.n	800093e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <HAL_TIM_Base_MspInit+0x38>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	4a08      	ldr	r2, [pc, #32]	@ (800094c <HAL_TIM_Base_MspInit+0x38>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6413      	str	r3, [r2, #64]	@ 0x40
 8000932:	4b06      	ldr	r3, [pc, #24]	@ (800094c <HAL_TIM_Base_MspInit+0x38>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800093e:	bf00      	nop
 8000940:	3714      	adds	r7, #20
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000970:	d11c      	bne.n	80009ac <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <HAL_TIM_MspPostInit+0x64>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a0f      	ldr	r2, [pc, #60]	@ (80009b4 <HAL_TIM_MspPostInit+0x64>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b0d      	ldr	r3, [pc, #52]	@ (80009b4 <HAL_TIM_MspPostInit+0x64>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800098a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800098e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800099c:	2301      	movs	r3, #1
 800099e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	4619      	mov	r1, r3
 80009a6:	4804      	ldr	r0, [pc, #16]	@ (80009b8 <HAL_TIM_MspPostInit+0x68>)
 80009a8:	f000 fa10 	bl	8000dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009ac:	bf00      	nop
 80009ae:	3720      	adds	r7, #32
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020400 	.word	0x40020400

080009bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009c0:	f7ff ff1e 	bl	8000800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c4:	480c      	ldr	r0, [pc, #48]	@ (80009f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009c6:	490d      	ldr	r1, [pc, #52]	@ (80009fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009cc:	e002      	b.n	80009d4 <LoopCopyDataInit>

080009ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d2:	3304      	adds	r3, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d8:	d3f9      	bcc.n	80009ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009da:	4a0a      	ldr	r2, [pc, #40]	@ (8000a04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000a08 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e0:	e001      	b.n	80009e6 <LoopFillZerobss>

080009e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e4:	3204      	adds	r2, #4

080009e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e8:	d3fb      	bcc.n	80009e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009ea:	f002 f8bb 	bl	8002b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ee:	f7ff fdd7 	bl	80005a0 <main>
  bx  lr    
 80009f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009f4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a00:	08002be4 	.word	0x08002be4
  ldr r2, =_sbss
 8000a04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a08:	2000007c 	.word	0x2000007c

08000a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC_IRQHandler>

08000a0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a12:	2003      	movs	r0, #3
 8000a14:	f000 f92e 	bl	8000c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a18:	200f      	movs	r0, #15
 8000a1a:	f000 f805 	bl	8000a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a1e:	f7ff fe9b 	bl	8000758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a22:	2300      	movs	r3, #0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <HAL_InitTick+0x54>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <HAL_InitTick+0x58>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f93b 	bl	8000cc2 <HAL_SYSTICK_Config>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e00e      	b.n	8000a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d80a      	bhi.n	8000a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	f000 f911 	bl	8000c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a68:	4a06      	ldr	r2, [pc, #24]	@ (8000a84 <HAL_InitTick+0x5c>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e000      	b.n	8000a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000004 	.word	0x20000004

08000a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <HAL_IncTick+0x20>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <HAL_IncTick+0x24>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4413      	add	r3, r2
 8000a98:	4a04      	ldr	r2, [pc, #16]	@ (8000aac <HAL_IncTick+0x24>)
 8000a9a:	6013      	str	r3, [r2, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	20000078 	.word	0x20000078

08000ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab4:	4b03      	ldr	r3, [pc, #12]	@ (8000ac4 <HAL_GetTick+0x14>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000078 	.word	0x20000078

08000ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad0:	f7ff ffee 	bl	8000ab0 <HAL_GetTick>
 8000ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae0:	d005      	beq.n	8000aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <HAL_Delay+0x44>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4413      	add	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aee:	bf00      	nop
 8000af0:	f7ff ffde 	bl	8000ab0 <HAL_GetTick>
 8000af4:	4602      	mov	r2, r0
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d8f7      	bhi.n	8000af0 <HAL_Delay+0x28>
  {
  }
}
 8000b00:	bf00      	nop
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000008 	.word	0x20000008

08000b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b20:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <__NVIC_SetPriorityGrouping+0x40>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	@ (8000b50 <__NVIC_SetPriorityGrouping+0x40>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00
 8000b54:	05fa0000 	.word	0x05fa0000

08000b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b5c:	4b04      	ldr	r3, [pc, #16]	@ (8000b70 <__NVIC_GetPriorityGrouping+0x18>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	f003 0307 	and.w	r3, r3, #7
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db0a      	blt.n	8000b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	490c      	ldr	r1, [pc, #48]	@ (8000bc0 <__NVIC_SetPriority+0x4c>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	0112      	lsls	r2, r2, #4
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	440b      	add	r3, r1
 8000b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b9c:	e00a      	b.n	8000bb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4908      	ldr	r1, [pc, #32]	@ (8000bc4 <__NVIC_SetPriority+0x50>)
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	3b04      	subs	r3, #4
 8000bac:	0112      	lsls	r2, r2, #4
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	761a      	strb	r2, [r3, #24]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000e100 	.word	0xe000e100
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	@ 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f1c3 0307 	rsb	r3, r3, #7
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	bf28      	it	cs
 8000be6:	2304      	movcs	r3, #4
 8000be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3304      	adds	r3, #4
 8000bee:	2b06      	cmp	r3, #6
 8000bf0:	d902      	bls.n	8000bf8 <NVIC_EncodePriority+0x30>
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	e000      	b.n	8000bfa <NVIC_EncodePriority+0x32>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43da      	mvns	r2, r3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c10:	f04f 31ff 	mov.w	r1, #4294967295
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43d9      	mvns	r1, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	4313      	orrs	r3, r2
         );
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3724      	adds	r7, #36	@ 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c40:	d301      	bcc.n	8000c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00f      	b.n	8000c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c46:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <SysTick_Config+0x40>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4e:	210f      	movs	r1, #15
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f7ff ff8e 	bl	8000b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c58:	4b05      	ldr	r3, [pc, #20]	@ (8000c70 <SysTick_Config+0x40>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5e:	4b04      	ldr	r3, [pc, #16]	@ (8000c70 <SysTick_Config+0x40>)
 8000c60:	2207      	movs	r2, #7
 8000c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	e000e010 	.word	0xe000e010

08000c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ff47 	bl	8000b10 <__NVIC_SetPriorityGrouping>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
 8000c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c9c:	f7ff ff5c 	bl	8000b58 <__NVIC_GetPriorityGrouping>
 8000ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	68b9      	ldr	r1, [r7, #8]
 8000ca6:	6978      	ldr	r0, [r7, #20]
 8000ca8:	f7ff ff8e 	bl	8000bc8 <NVIC_EncodePriority>
 8000cac:	4602      	mov	r2, r0
 8000cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff5d 	bl	8000b74 <__NVIC_SetPriority>
}
 8000cba:	bf00      	nop
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ffb0 	bl	8000c30 <SysTick_Config>
 8000cd0:	4603      	mov	r3, r0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000ce0:	f3bf 8f5f 	dmb	sy
}
 8000ce4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000ce6:	4b07      	ldr	r3, [pc, #28]	@ (8000d04 <HAL_MPU_Disable+0x28>)
 8000ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cea:	4a06      	ldr	r2, [pc, #24]	@ (8000d04 <HAL_MPU_Disable+0x28>)
 8000cec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cf0:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000cf2:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <HAL_MPU_Disable+0x2c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	605a      	str	r2, [r3, #4]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00
 8000d08:	e000ed90 	.word	0xe000ed90

08000d0c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000d14:	4a0b      	ldr	r2, [pc, #44]	@ (8000d44 <HAL_MPU_Enable+0x38>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <HAL_MPU_Enable+0x3c>)
 8000d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d22:	4a09      	ldr	r2, [pc, #36]	@ (8000d48 <HAL_MPU_Enable+0x3c>)
 8000d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d28:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000d2a:	f3bf 8f4f 	dsb	sy
}
 8000d2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d30:	f3bf 8f6f 	isb	sy
}
 8000d34:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed90 	.word	0xe000ed90
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	785a      	ldrb	r2, [r3, #1]
 8000d58:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc8 <HAL_MPU_ConfigRegion+0x7c>)
 8000d5a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc8 <HAL_MPU_ConfigRegion+0x7c>)
 8000d5e:	691b      	ldr	r3, [r3, #16]
 8000d60:	4a19      	ldr	r2, [pc, #100]	@ (8000dc8 <HAL_MPU_ConfigRegion+0x7c>)
 8000d62:	f023 0301 	bic.w	r3, r3, #1
 8000d66:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000d68:	4a17      	ldr	r2, [pc, #92]	@ (8000dc8 <HAL_MPU_ConfigRegion+0x7c>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	7b1b      	ldrb	r3, [r3, #12]
 8000d74:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	7adb      	ldrb	r3, [r3, #11]
 8000d7a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	7a9b      	ldrb	r3, [r3, #10]
 8000d82:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	7b5b      	ldrb	r3, [r3, #13]
 8000d8a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	7b9b      	ldrb	r3, [r3, #14]
 8000d92:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	7bdb      	ldrb	r3, [r3, #15]
 8000d9a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	7a5b      	ldrb	r3, [r3, #9]
 8000da2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000da4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7a1b      	ldrb	r3, [r3, #8]
 8000daa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000dac:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	7812      	ldrb	r2, [r2, #0]
 8000db2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000db4:	4a04      	ldr	r2, [pc, #16]	@ (8000dc8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000db6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000db8:	6113      	str	r3, [r2, #16]
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed90 	.word	0xe000ed90

08000dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	@ 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
 8000dea:	e175      	b.n	80010d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000dec:	2201      	movs	r2, #1
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	f040 8164 	bne.w	80010d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d005      	beq.n	8000e22 <HAL_GPIO_Init+0x56>
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d130      	bne.n	8000e84 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4013      	ands	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	68da      	ldr	r2, [r3, #12]
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	091b      	lsrs	r3, r3, #4
 8000e6e:	f003 0201 	and.w	r2, r3, #1
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d017      	beq.n	8000ec0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d123      	bne.n	8000f14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	08da      	lsrs	r2, r3, #3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3208      	adds	r2, #8
 8000ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	f003 0307 	and.w	r3, r3, #7
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	220f      	movs	r2, #15
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	691a      	ldr	r2, [r3, #16]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	08da      	lsrs	r2, r3, #3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3208      	adds	r2, #8
 8000f0e:	69b9      	ldr	r1, [r7, #24]
 8000f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0203 	and.w	r2, r3, #3
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f000 80be 	beq.w	80010d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	4b66      	ldr	r3, [pc, #408]	@ (80010f0 <HAL_GPIO_Init+0x324>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5a:	4a65      	ldr	r2, [pc, #404]	@ (80010f0 <HAL_GPIO_Init+0x324>)
 8000f5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f62:	4b63      	ldr	r3, [pc, #396]	@ (80010f0 <HAL_GPIO_Init+0x324>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f6e:	4a61      	ldr	r2, [pc, #388]	@ (80010f4 <HAL_GPIO_Init+0x328>)
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	3302      	adds	r3, #2
 8000f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	220f      	movs	r2, #15
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a58      	ldr	r2, [pc, #352]	@ (80010f8 <HAL_GPIO_Init+0x32c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d037      	beq.n	800100a <HAL_GPIO_Init+0x23e>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a57      	ldr	r2, [pc, #348]	@ (80010fc <HAL_GPIO_Init+0x330>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d031      	beq.n	8001006 <HAL_GPIO_Init+0x23a>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a56      	ldr	r2, [pc, #344]	@ (8001100 <HAL_GPIO_Init+0x334>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d02b      	beq.n	8001002 <HAL_GPIO_Init+0x236>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a55      	ldr	r2, [pc, #340]	@ (8001104 <HAL_GPIO_Init+0x338>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d025      	beq.n	8000ffe <HAL_GPIO_Init+0x232>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a54      	ldr	r2, [pc, #336]	@ (8001108 <HAL_GPIO_Init+0x33c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d01f      	beq.n	8000ffa <HAL_GPIO_Init+0x22e>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a53      	ldr	r2, [pc, #332]	@ (800110c <HAL_GPIO_Init+0x340>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d019      	beq.n	8000ff6 <HAL_GPIO_Init+0x22a>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a52      	ldr	r2, [pc, #328]	@ (8001110 <HAL_GPIO_Init+0x344>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d013      	beq.n	8000ff2 <HAL_GPIO_Init+0x226>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a51      	ldr	r2, [pc, #324]	@ (8001114 <HAL_GPIO_Init+0x348>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d00d      	beq.n	8000fee <HAL_GPIO_Init+0x222>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a50      	ldr	r2, [pc, #320]	@ (8001118 <HAL_GPIO_Init+0x34c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d007      	beq.n	8000fea <HAL_GPIO_Init+0x21e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4f      	ldr	r2, [pc, #316]	@ (800111c <HAL_GPIO_Init+0x350>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d101      	bne.n	8000fe6 <HAL_GPIO_Init+0x21a>
 8000fe2:	2309      	movs	r3, #9
 8000fe4:	e012      	b.n	800100c <HAL_GPIO_Init+0x240>
 8000fe6:	230a      	movs	r3, #10
 8000fe8:	e010      	b.n	800100c <HAL_GPIO_Init+0x240>
 8000fea:	2308      	movs	r3, #8
 8000fec:	e00e      	b.n	800100c <HAL_GPIO_Init+0x240>
 8000fee:	2307      	movs	r3, #7
 8000ff0:	e00c      	b.n	800100c <HAL_GPIO_Init+0x240>
 8000ff2:	2306      	movs	r3, #6
 8000ff4:	e00a      	b.n	800100c <HAL_GPIO_Init+0x240>
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	e008      	b.n	800100c <HAL_GPIO_Init+0x240>
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	e006      	b.n	800100c <HAL_GPIO_Init+0x240>
 8000ffe:	2303      	movs	r3, #3
 8001000:	e004      	b.n	800100c <HAL_GPIO_Init+0x240>
 8001002:	2302      	movs	r3, #2
 8001004:	e002      	b.n	800100c <HAL_GPIO_Init+0x240>
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <HAL_GPIO_Init+0x240>
 800100a:	2300      	movs	r3, #0
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	f002 0203 	and.w	r2, r2, #3
 8001012:	0092      	lsls	r2, r2, #2
 8001014:	4093      	lsls	r3, r2
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800101c:	4935      	ldr	r1, [pc, #212]	@ (80010f4 <HAL_GPIO_Init+0x328>)
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800102a:	4b3d      	ldr	r3, [pc, #244]	@ (8001120 <HAL_GPIO_Init+0x354>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800104e:	4a34      	ldr	r2, [pc, #208]	@ (8001120 <HAL_GPIO_Init+0x354>)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001054:	4b32      	ldr	r3, [pc, #200]	@ (8001120 <HAL_GPIO_Init+0x354>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001078:	4a29      	ldr	r2, [pc, #164]	@ (8001120 <HAL_GPIO_Init+0x354>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800107e:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <HAL_GPIO_Init+0x354>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001120 <HAL_GPIO_Init+0x354>)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001120 <HAL_GPIO_Init+0x354>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010cc:	4a14      	ldr	r2, [pc, #80]	@ (8001120 <HAL_GPIO_Init+0x354>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3301      	adds	r3, #1
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	2b0f      	cmp	r3, #15
 80010dc:	f67f ae86 	bls.w	8000dec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3724      	adds	r7, #36	@ 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40013800 	.word	0x40013800
 80010f8:	40020000 	.word	0x40020000
 80010fc:	40020400 	.word	0x40020400
 8001100:	40020800 	.word	0x40020800
 8001104:	40020c00 	.word	0x40020c00
 8001108:	40021000 	.word	0x40021000
 800110c:	40021400 	.word	0x40021400
 8001110:	40021800 	.word	0x40021800
 8001114:	40021c00 	.word	0x40021c00
 8001118:	40022000 	.word	0x40022000
 800111c:	40022400 	.word	0x40022400
 8001120:	40013c00 	.word	0x40013c00

08001124 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	4b23      	ldr	r3, [pc, #140]	@ (80011bc <HAL_PWREx_EnableOverDrive+0x98>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	4a22      	ldr	r2, [pc, #136]	@ (80011bc <HAL_PWREx_EnableOverDrive+0x98>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001138:	6413      	str	r3, [r2, #64]	@ 0x40
 800113a:	4b20      	ldr	r3, [pc, #128]	@ (80011bc <HAL_PWREx_EnableOverDrive+0x98>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001146:	4b1e      	ldr	r3, [pc, #120]	@ (80011c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a1d      	ldr	r2, [pc, #116]	@ (80011c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800114c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001150:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001152:	f7ff fcad 	bl	8000ab0 <HAL_GetTick>
 8001156:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001158:	e009      	b.n	800116e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800115a:	f7ff fca9 	bl	8000ab0 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001168:	d901      	bls.n	800116e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e022      	b.n	80011b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800116e:	4b14      	ldr	r3, [pc, #80]	@ (80011c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001176:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800117a:	d1ee      	bne.n	800115a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800117c:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0f      	ldr	r2, [pc, #60]	@ (80011c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001186:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001188:	f7ff fc92 	bl	8000ab0 <HAL_GetTick>
 800118c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800118e:	e009      	b.n	80011a4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001190:	f7ff fc8e 	bl	8000ab0 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800119e:	d901      	bls.n	80011a4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e007      	b.n	80011b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011a4:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80011b0:	d1ee      	bne.n	8001190 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40007000 	.word	0x40007000

080011c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80011cc:	2300      	movs	r3, #0
 80011ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e29b      	b.n	8001712 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 8087 	beq.w	80012f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011e8:	4b96      	ldr	r3, [pc, #600]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	d00c      	beq.n	800120e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011f4:	4b93      	ldr	r3, [pc, #588]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 030c 	and.w	r3, r3, #12
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d112      	bne.n	8001226 <HAL_RCC_OscConfig+0x62>
 8001200:	4b90      	ldr	r3, [pc, #576]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001208:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800120c:	d10b      	bne.n	8001226 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120e:	4b8d      	ldr	r3, [pc, #564]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d06c      	beq.n	80012f4 <HAL_RCC_OscConfig+0x130>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d168      	bne.n	80012f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e275      	b.n	8001712 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800122e:	d106      	bne.n	800123e <HAL_RCC_OscConfig+0x7a>
 8001230:	4b84      	ldr	r3, [pc, #528]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a83      	ldr	r2, [pc, #524]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 8001236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	e02e      	b.n	800129c <HAL_RCC_OscConfig+0xd8>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10c      	bne.n	8001260 <HAL_RCC_OscConfig+0x9c>
 8001246:	4b7f      	ldr	r3, [pc, #508]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a7e      	ldr	r2, [pc, #504]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 800124c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	4b7c      	ldr	r3, [pc, #496]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a7b      	ldr	r2, [pc, #492]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 8001258:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	e01d      	b.n	800129c <HAL_RCC_OscConfig+0xd8>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001268:	d10c      	bne.n	8001284 <HAL_RCC_OscConfig+0xc0>
 800126a:	4b76      	ldr	r3, [pc, #472]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a75      	ldr	r2, [pc, #468]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 8001270:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4b73      	ldr	r3, [pc, #460]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a72      	ldr	r2, [pc, #456]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 800127c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e00b      	b.n	800129c <HAL_RCC_OscConfig+0xd8>
 8001284:	4b6f      	ldr	r3, [pc, #444]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a6e      	ldr	r2, [pc, #440]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 800128a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	4b6c      	ldr	r3, [pc, #432]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a6b      	ldr	r2, [pc, #428]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 8001296:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800129a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d013      	beq.n	80012cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a4:	f7ff fc04 	bl	8000ab0 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ac:	f7ff fc00 	bl	8000ab0 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b64      	cmp	r3, #100	@ 0x64
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e229      	b.n	8001712 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012be:	4b61      	ldr	r3, [pc, #388]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f0      	beq.n	80012ac <HAL_RCC_OscConfig+0xe8>
 80012ca:	e014      	b.n	80012f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012cc:	f7ff fbf0 	bl	8000ab0 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d4:	f7ff fbec 	bl	8000ab0 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b64      	cmp	r3, #100	@ 0x64
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e215      	b.n	8001712 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e6:	4b57      	ldr	r3, [pc, #348]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f0      	bne.n	80012d4 <HAL_RCC_OscConfig+0x110>
 80012f2:	e000      	b.n	80012f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d069      	beq.n	80013d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001302:	4b50      	ldr	r3, [pc, #320]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 030c 	and.w	r3, r3, #12
 800130a:	2b00      	cmp	r3, #0
 800130c:	d00b      	beq.n	8001326 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800130e:	4b4d      	ldr	r3, [pc, #308]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b08      	cmp	r3, #8
 8001318:	d11c      	bne.n	8001354 <HAL_RCC_OscConfig+0x190>
 800131a:	4b4a      	ldr	r3, [pc, #296]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d116      	bne.n	8001354 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001326:	4b47      	ldr	r3, [pc, #284]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d005      	beq.n	800133e <HAL_RCC_OscConfig+0x17a>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d001      	beq.n	800133e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e1e9      	b.n	8001712 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133e:	4b41      	ldr	r3, [pc, #260]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	493d      	ldr	r1, [pc, #244]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 800134e:	4313      	orrs	r3, r2
 8001350:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001352:	e040      	b.n	80013d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d023      	beq.n	80013a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800135c:	4b39      	ldr	r3, [pc, #228]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a38      	ldr	r2, [pc, #224]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001368:	f7ff fba2 	bl	8000ab0 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001370:	f7ff fb9e 	bl	8000ab0 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e1c7      	b.n	8001712 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001382:	4b30      	ldr	r3, [pc, #192]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138e:	4b2d      	ldr	r3, [pc, #180]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4929      	ldr	r1, [pc, #164]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]
 80013a2:	e018      	b.n	80013d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a4:	4b27      	ldr	r3, [pc, #156]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a26      	ldr	r2, [pc, #152]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 80013aa:	f023 0301 	bic.w	r3, r3, #1
 80013ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b0:	f7ff fb7e 	bl	8000ab0 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b8:	f7ff fb7a 	bl	8000ab0 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e1a3      	b.n	8001712 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d038      	beq.n	8001454 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d019      	beq.n	800141e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ea:	4b16      	ldr	r3, [pc, #88]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 80013ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013ee:	4a15      	ldr	r2, [pc, #84]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f6:	f7ff fb5b 	bl	8000ab0 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013fe:	f7ff fb57 	bl	8000ab0 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e180      	b.n	8001712 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001410:	4b0c      	ldr	r3, [pc, #48]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 8001412:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0x23a>
 800141c:	e01a      	b.n	8001454 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800141e:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 8001420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001422:	4a08      	ldr	r2, [pc, #32]	@ (8001444 <HAL_RCC_OscConfig+0x280>)
 8001424:	f023 0301 	bic.w	r3, r3, #1
 8001428:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142a:	f7ff fb41 	bl	8000ab0 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001430:	e00a      	b.n	8001448 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001432:	f7ff fb3d 	bl	8000ab0 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d903      	bls.n	8001448 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e166      	b.n	8001712 <HAL_RCC_OscConfig+0x54e>
 8001444:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001448:	4b92      	ldr	r3, [pc, #584]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 800144a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1ee      	bne.n	8001432 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 80a4 	beq.w	80015aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001462:	4b8c      	ldr	r3, [pc, #560]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10d      	bne.n	800148a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	4b89      	ldr	r3, [pc, #548]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001472:	4a88      	ldr	r2, [pc, #544]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001478:	6413      	str	r3, [r2, #64]	@ 0x40
 800147a:	4b86      	ldr	r3, [pc, #536]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001486:	2301      	movs	r3, #1
 8001488:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800148a:	4b83      	ldr	r3, [pc, #524]	@ (8001698 <HAL_RCC_OscConfig+0x4d4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001492:	2b00      	cmp	r3, #0
 8001494:	d118      	bne.n	80014c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001496:	4b80      	ldr	r3, [pc, #512]	@ (8001698 <HAL_RCC_OscConfig+0x4d4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a7f      	ldr	r2, [pc, #508]	@ (8001698 <HAL_RCC_OscConfig+0x4d4>)
 800149c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a2:	f7ff fb05 	bl	8000ab0 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014aa:	f7ff fb01 	bl	8000ab0 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b64      	cmp	r3, #100	@ 0x64
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e12a      	b.n	8001712 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014bc:	4b76      	ldr	r3, [pc, #472]	@ (8001698 <HAL_RCC_OscConfig+0x4d4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d106      	bne.n	80014de <HAL_RCC_OscConfig+0x31a>
 80014d0:	4b70      	ldr	r3, [pc, #448]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 80014d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014d4:	4a6f      	ldr	r2, [pc, #444]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6713      	str	r3, [r2, #112]	@ 0x70
 80014dc:	e02d      	b.n	800153a <HAL_RCC_OscConfig+0x376>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0x33c>
 80014e6:	4b6b      	ldr	r3, [pc, #428]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 80014e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ea:	4a6a      	ldr	r2, [pc, #424]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 80014ec:	f023 0301 	bic.w	r3, r3, #1
 80014f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80014f2:	4b68      	ldr	r3, [pc, #416]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014f6:	4a67      	ldr	r2, [pc, #412]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 80014f8:	f023 0304 	bic.w	r3, r3, #4
 80014fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80014fe:	e01c      	b.n	800153a <HAL_RCC_OscConfig+0x376>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b05      	cmp	r3, #5
 8001506:	d10c      	bne.n	8001522 <HAL_RCC_OscConfig+0x35e>
 8001508:	4b62      	ldr	r3, [pc, #392]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 800150a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800150c:	4a61      	ldr	r2, [pc, #388]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6713      	str	r3, [r2, #112]	@ 0x70
 8001514:	4b5f      	ldr	r3, [pc, #380]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001518:	4a5e      	ldr	r2, [pc, #376]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001520:	e00b      	b.n	800153a <HAL_RCC_OscConfig+0x376>
 8001522:	4b5c      	ldr	r3, [pc, #368]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001526:	4a5b      	ldr	r2, [pc, #364]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	6713      	str	r3, [r2, #112]	@ 0x70
 800152e:	4b59      	ldr	r3, [pc, #356]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001532:	4a58      	ldr	r2, [pc, #352]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 8001534:	f023 0304 	bic.w	r3, r3, #4
 8001538:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d015      	beq.n	800156e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001542:	f7ff fab5 	bl	8000ab0 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001548:	e00a      	b.n	8001560 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800154a:	f7ff fab1 	bl	8000ab0 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001558:	4293      	cmp	r3, r2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e0d8      	b.n	8001712 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001560:	4b4c      	ldr	r3, [pc, #304]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0ee      	beq.n	800154a <HAL_RCC_OscConfig+0x386>
 800156c:	e014      	b.n	8001598 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156e:	f7ff fa9f 	bl	8000ab0 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001574:	e00a      	b.n	800158c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001576:	f7ff fa9b 	bl	8000ab0 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001584:	4293      	cmp	r3, r2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e0c2      	b.n	8001712 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158c:	4b41      	ldr	r3, [pc, #260]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 800158e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1ee      	bne.n	8001576 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001598:	7dfb      	ldrb	r3, [r7, #23]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d105      	bne.n	80015aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800159e:	4b3d      	ldr	r3, [pc, #244]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	4a3c      	ldr	r2, [pc, #240]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 80015a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015a8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 80ae 	beq.w	8001710 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015b4:	4b37      	ldr	r3, [pc, #220]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d06d      	beq.n	800169c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d14b      	bne.n	8001660 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c8:	4b32      	ldr	r3, [pc, #200]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a31      	ldr	r2, [pc, #196]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 80015ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80015d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff fa6c 	bl	8000ab0 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015dc:	f7ff fa68 	bl	8000ab0 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e091      	b.n	8001712 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ee:	4b29      	ldr	r3, [pc, #164]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69da      	ldr	r2, [r3, #28]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001608:	019b      	lsls	r3, r3, #6
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001610:	085b      	lsrs	r3, r3, #1
 8001612:	3b01      	subs	r3, #1
 8001614:	041b      	lsls	r3, r3, #16
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800161c:	061b      	lsls	r3, r3, #24
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001624:	071b      	lsls	r3, r3, #28
 8001626:	491b      	ldr	r1, [pc, #108]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 8001628:	4313      	orrs	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800162c:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a18      	ldr	r2, [pc, #96]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 8001632:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001638:	f7ff fa3a 	bl	8000ab0 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001640:	f7ff fa36 	bl	8000ab0 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e05f      	b.n	8001712 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001652:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x47c>
 800165e:	e057      	b.n	8001710 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001660:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0b      	ldr	r2, [pc, #44]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 8001666:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800166a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166c:	f7ff fa20 	bl	8000ab0 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff fa1c 	bl	8000ab0 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e045      	b.n	8001712 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	4b03      	ldr	r3, [pc, #12]	@ (8001694 <HAL_RCC_OscConfig+0x4d0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x4b0>
 8001692:	e03d      	b.n	8001710 <HAL_RCC_OscConfig+0x54c>
 8001694:	40023800 	.word	0x40023800
 8001698:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800169c:	4b1f      	ldr	r3, [pc, #124]	@ (800171c <HAL_RCC_OscConfig+0x558>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d030      	beq.n	800170c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d129      	bne.n	800170c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d122      	bne.n	800170c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016cc:	4013      	ands	r3, r2
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d119      	bne.n	800170c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e2:	085b      	lsrs	r3, r3, #1
 80016e4:	3b01      	subs	r3, #1
 80016e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d10f      	bne.n	800170c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d107      	bne.n	800170c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800

08001720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0d0      	b.n	80018da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001738:	4b6a      	ldr	r3, [pc, #424]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 030f 	and.w	r3, r3, #15
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d910      	bls.n	8001768 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001746:	4b67      	ldr	r3, [pc, #412]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 020f 	bic.w	r2, r3, #15
 800174e:	4965      	ldr	r1, [pc, #404]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001756:	4b63      	ldr	r3, [pc, #396]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0b8      	b.n	80018da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d020      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001780:	4b59      	ldr	r3, [pc, #356]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4a58      	ldr	r2, [pc, #352]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001786:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800178a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001798:	4b53      	ldr	r3, [pc, #332]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a52      	ldr	r2, [pc, #328]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 800179e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a4:	4b50      	ldr	r3, [pc, #320]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	494d      	ldr	r1, [pc, #308]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d040      	beq.n	8001844 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	4b47      	ldr	r3, [pc, #284]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d115      	bne.n	8001802 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e07f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e2:	4b41      	ldr	r3, [pc, #260]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d109      	bne.n	8001802 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e073      	b.n	80018da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f2:	4b3d      	ldr	r3, [pc, #244]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e06b      	b.n	80018da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001802:	4b39      	ldr	r3, [pc, #228]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f023 0203 	bic.w	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4936      	ldr	r1, [pc, #216]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001810:	4313      	orrs	r3, r2
 8001812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001814:	f7ff f94c 	bl	8000ab0 <HAL_GetTick>
 8001818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181a:	e00a      	b.n	8001832 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800181c:	f7ff f948 	bl	8000ab0 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e053      	b.n	80018da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	4b2d      	ldr	r3, [pc, #180]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 020c 	and.w	r2, r3, #12
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	429a      	cmp	r2, r3
 8001842:	d1eb      	bne.n	800181c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001844:	4b27      	ldr	r3, [pc, #156]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 030f 	and.w	r3, r3, #15
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d210      	bcs.n	8001874 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001852:	4b24      	ldr	r3, [pc, #144]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 020f 	bic.w	r2, r3, #15
 800185a:	4922      	ldr	r1, [pc, #136]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	4313      	orrs	r3, r2
 8001860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001862:	4b20      	ldr	r3, [pc, #128]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d001      	beq.n	8001874 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e032      	b.n	80018da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d008      	beq.n	8001892 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001880:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	4916      	ldr	r1, [pc, #88]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d009      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800189e:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	490e      	ldr	r1, [pc, #56]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018b2:	f000 f821 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 80018b6:	4602      	mov	r2, r0
 80018b8:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	490a      	ldr	r1, [pc, #40]	@ (80018ec <HAL_RCC_ClockConfig+0x1cc>)
 80018c4:	5ccb      	ldrb	r3, [r1, r3]
 80018c6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ca:	4a09      	ldr	r2, [pc, #36]	@ (80018f0 <HAL_RCC_ClockConfig+0x1d0>)
 80018cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018ce:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <HAL_RCC_ClockConfig+0x1d4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff f8a8 	bl	8000a28 <HAL_InitTick>

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00
 80018e8:	40023800 	.word	0x40023800
 80018ec:	08002bc4 	.word	0x08002bc4
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000004 	.word	0x20000004

080018f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018fc:	b090      	sub	sp, #64	@ 0x40
 80018fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	637b      	str	r3, [r7, #52]	@ 0x34
 8001904:	2300      	movs	r3, #0
 8001906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001908:	2300      	movs	r3, #0
 800190a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001910:	4b59      	ldr	r3, [pc, #356]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 030c 	and.w	r3, r3, #12
 8001918:	2b08      	cmp	r3, #8
 800191a:	d00d      	beq.n	8001938 <HAL_RCC_GetSysClockFreq+0x40>
 800191c:	2b08      	cmp	r3, #8
 800191e:	f200 80a1 	bhi.w	8001a64 <HAL_RCC_GetSysClockFreq+0x16c>
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x34>
 8001926:	2b04      	cmp	r3, #4
 8001928:	d003      	beq.n	8001932 <HAL_RCC_GetSysClockFreq+0x3a>
 800192a:	e09b      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800192c:	4b53      	ldr	r3, [pc, #332]	@ (8001a7c <HAL_RCC_GetSysClockFreq+0x184>)
 800192e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001930:	e09b      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001932:	4b53      	ldr	r3, [pc, #332]	@ (8001a80 <HAL_RCC_GetSysClockFreq+0x188>)
 8001934:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001936:	e098      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001938:	4b4f      	ldr	r3, [pc, #316]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0x180>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001940:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001942:	4b4d      	ldr	r3, [pc, #308]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d028      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800194e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	099b      	lsrs	r3, r3, #6
 8001954:	2200      	movs	r2, #0
 8001956:	623b      	str	r3, [r7, #32]
 8001958:	627a      	str	r2, [r7, #36]	@ 0x24
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001960:	2100      	movs	r1, #0
 8001962:	4b47      	ldr	r3, [pc, #284]	@ (8001a80 <HAL_RCC_GetSysClockFreq+0x188>)
 8001964:	fb03 f201 	mul.w	r2, r3, r1
 8001968:	2300      	movs	r3, #0
 800196a:	fb00 f303 	mul.w	r3, r0, r3
 800196e:	4413      	add	r3, r2
 8001970:	4a43      	ldr	r2, [pc, #268]	@ (8001a80 <HAL_RCC_GetSysClockFreq+0x188>)
 8001972:	fba0 1202 	umull	r1, r2, r0, r2
 8001976:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001978:	460a      	mov	r2, r1
 800197a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800197c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800197e:	4413      	add	r3, r2
 8001980:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001984:	2200      	movs	r2, #0
 8001986:	61bb      	str	r3, [r7, #24]
 8001988:	61fa      	str	r2, [r7, #28]
 800198a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800198e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001992:	f7fe fc51 	bl	8000238 <__aeabi_uldivmod>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4613      	mov	r3, r2
 800199c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800199e:	e053      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a0:	4b35      	ldr	r3, [pc, #212]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0x180>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	099b      	lsrs	r3, r3, #6
 80019a6:	2200      	movs	r2, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	617a      	str	r2, [r7, #20]
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019b2:	f04f 0b00 	mov.w	fp, #0
 80019b6:	4652      	mov	r2, sl
 80019b8:	465b      	mov	r3, fp
 80019ba:	f04f 0000 	mov.w	r0, #0
 80019be:	f04f 0100 	mov.w	r1, #0
 80019c2:	0159      	lsls	r1, r3, #5
 80019c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c8:	0150      	lsls	r0, r2, #5
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	ebb2 080a 	subs.w	r8, r2, sl
 80019d2:	eb63 090b 	sbc.w	r9, r3, fp
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019ea:	ebb2 0408 	subs.w	r4, r2, r8
 80019ee:	eb63 0509 	sbc.w	r5, r3, r9
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	00eb      	lsls	r3, r5, #3
 80019fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a00:	00e2      	lsls	r2, r4, #3
 8001a02:	4614      	mov	r4, r2
 8001a04:	461d      	mov	r5, r3
 8001a06:	eb14 030a 	adds.w	r3, r4, sl
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	eb45 030b 	adc.w	r3, r5, fp
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a1e:	4629      	mov	r1, r5
 8001a20:	028b      	lsls	r3, r1, #10
 8001a22:	4621      	mov	r1, r4
 8001a24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a28:	4621      	mov	r1, r4
 8001a2a:	028a      	lsls	r2, r1, #10
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a32:	2200      	movs	r2, #0
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	60fa      	str	r2, [r7, #12]
 8001a38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a3c:	f7fe fbfc 	bl	8000238 <__aeabi_uldivmod>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4613      	mov	r3, r2
 8001a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001a48:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	0c1b      	lsrs	r3, r3, #16
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	3301      	adds	r3, #1
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001a58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a62:	e002      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a64:	4b05      	ldr	r3, [pc, #20]	@ (8001a7c <HAL_RCC_GetSysClockFreq+0x184>)
 8001a66:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3740      	adds	r7, #64	@ 0x40
 8001a70:	46bd      	mov	sp, r7
 8001a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	00f42400 	.word	0x00f42400
 8001a80:	017d7840 	.word	0x017d7840

08001a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e049      	b.n	8001b2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7fe ff32 	bl	8000914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3304      	adds	r3, #4
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	f000 fbee 	bl	80022a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e049      	b.n	8001bd8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d106      	bne.n	8001b5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f841 	bl	8001be0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2202      	movs	r2, #2
 8001b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4610      	mov	r0, r2
 8001b72:	f000 fb97 	bl	80022a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d109      	bne.n	8001c18 <HAL_TIM_PWM_Start+0x24>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	bf14      	ite	ne
 8001c10:	2301      	movne	r3, #1
 8001c12:	2300      	moveq	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	e03c      	b.n	8001c92 <HAL_TIM_PWM_Start+0x9e>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d109      	bne.n	8001c32 <HAL_TIM_PWM_Start+0x3e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	bf14      	ite	ne
 8001c2a:	2301      	movne	r3, #1
 8001c2c:	2300      	moveq	r3, #0
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	e02f      	b.n	8001c92 <HAL_TIM_PWM_Start+0x9e>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d109      	bne.n	8001c4c <HAL_TIM_PWM_Start+0x58>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	bf14      	ite	ne
 8001c44:	2301      	movne	r3, #1
 8001c46:	2300      	moveq	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	e022      	b.n	8001c92 <HAL_TIM_PWM_Start+0x9e>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	2b0c      	cmp	r3, #12
 8001c50:	d109      	bne.n	8001c66 <HAL_TIM_PWM_Start+0x72>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	bf14      	ite	ne
 8001c5e:	2301      	movne	r3, #1
 8001c60:	2300      	moveq	r3, #0
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	e015      	b.n	8001c92 <HAL_TIM_PWM_Start+0x9e>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b10      	cmp	r3, #16
 8001c6a:	d109      	bne.n	8001c80 <HAL_TIM_PWM_Start+0x8c>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	bf14      	ite	ne
 8001c78:	2301      	movne	r3, #1
 8001c7a:	2300      	moveq	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	e008      	b.n	8001c92 <HAL_TIM_PWM_Start+0x9e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	bf14      	ite	ne
 8001c8c:	2301      	movne	r3, #1
 8001c8e:	2300      	moveq	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e092      	b.n	8001dc0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d104      	bne.n	8001caa <HAL_TIM_PWM_Start+0xb6>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ca8:	e023      	b.n	8001cf2 <HAL_TIM_PWM_Start+0xfe>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d104      	bne.n	8001cba <HAL_TIM_PWM_Start+0xc6>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001cb8:	e01b      	b.n	8001cf2 <HAL_TIM_PWM_Start+0xfe>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d104      	bne.n	8001cca <HAL_TIM_PWM_Start+0xd6>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cc8:	e013      	b.n	8001cf2 <HAL_TIM_PWM_Start+0xfe>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b0c      	cmp	r3, #12
 8001cce:	d104      	bne.n	8001cda <HAL_TIM_PWM_Start+0xe6>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001cd8:	e00b      	b.n	8001cf2 <HAL_TIM_PWM_Start+0xfe>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b10      	cmp	r3, #16
 8001cde:	d104      	bne.n	8001cea <HAL_TIM_PWM_Start+0xf6>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ce8:	e003      	b.n	8001cf2 <HAL_TIM_PWM_Start+0xfe>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2202      	movs	r2, #2
 8001cee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	6839      	ldr	r1, [r7, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fe76 	bl	80029ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a30      	ldr	r2, [pc, #192]	@ (8001dc8 <HAL_TIM_PWM_Start+0x1d4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d004      	beq.n	8001d14 <HAL_TIM_PWM_Start+0x120>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a2f      	ldr	r2, [pc, #188]	@ (8001dcc <HAL_TIM_PWM_Start+0x1d8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d101      	bne.n	8001d18 <HAL_TIM_PWM_Start+0x124>
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <HAL_TIM_PWM_Start+0x126>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d007      	beq.n	8001d2e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a25      	ldr	r2, [pc, #148]	@ (8001dc8 <HAL_TIM_PWM_Start+0x1d4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d022      	beq.n	8001d7e <HAL_TIM_PWM_Start+0x18a>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d40:	d01d      	beq.n	8001d7e <HAL_TIM_PWM_Start+0x18a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a22      	ldr	r2, [pc, #136]	@ (8001dd0 <HAL_TIM_PWM_Start+0x1dc>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d018      	beq.n	8001d7e <HAL_TIM_PWM_Start+0x18a>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a20      	ldr	r2, [pc, #128]	@ (8001dd4 <HAL_TIM_PWM_Start+0x1e0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d013      	beq.n	8001d7e <HAL_TIM_PWM_Start+0x18a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd8 <HAL_TIM_PWM_Start+0x1e4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d00e      	beq.n	8001d7e <HAL_TIM_PWM_Start+0x18a>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a19      	ldr	r2, [pc, #100]	@ (8001dcc <HAL_TIM_PWM_Start+0x1d8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d009      	beq.n	8001d7e <HAL_TIM_PWM_Start+0x18a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8001ddc <HAL_TIM_PWM_Start+0x1e8>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d004      	beq.n	8001d7e <HAL_TIM_PWM_Start+0x18a>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a19      	ldr	r2, [pc, #100]	@ (8001de0 <HAL_TIM_PWM_Start+0x1ec>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d115      	bne.n	8001daa <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	4b17      	ldr	r3, [pc, #92]	@ (8001de4 <HAL_TIM_PWM_Start+0x1f0>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b06      	cmp	r3, #6
 8001d8e:	d015      	beq.n	8001dbc <HAL_TIM_PWM_Start+0x1c8>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d96:	d011      	beq.n	8001dbc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0201 	orr.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da8:	e008      	b.n	8001dbc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 0201 	orr.w	r2, r2, #1
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	e000      	b.n	8001dbe <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dbc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40010000 	.word	0x40010000
 8001dcc:	40010400 	.word	0x40010400
 8001dd0:	40000400 	.word	0x40000400
 8001dd4:	40000800 	.word	0x40000800
 8001dd8:	40000c00 	.word	0x40000c00
 8001ddc:	40014000 	.word	0x40014000
 8001de0:	40001800 	.word	0x40001800
 8001de4:	00010007 	.word	0x00010007

08001de8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2200      	movs	r2, #0
 8001df8:	6839      	ldr	r1, [r7, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 fdf6 	bl	80029ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a36      	ldr	r2, [pc, #216]	@ (8001ee0 <HAL_TIM_PWM_Stop+0xf8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d004      	beq.n	8001e14 <HAL_TIM_PWM_Stop+0x2c>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a35      	ldr	r2, [pc, #212]	@ (8001ee4 <HAL_TIM_PWM_Stop+0xfc>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d101      	bne.n	8001e18 <HAL_TIM_PWM_Stop+0x30>
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <HAL_TIM_PWM_Stop+0x32>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d017      	beq.n	8001e4e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6a1a      	ldr	r2, [r3, #32]
 8001e24:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10f      	bne.n	8001e4e <HAL_TIM_PWM_Stop+0x66>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6a1a      	ldr	r2, [r3, #32]
 8001e34:	f240 4344 	movw	r3, #1092	@ 0x444
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d107      	bne.n	8001e4e <HAL_TIM_PWM_Stop+0x66>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6a1a      	ldr	r2, [r3, #32]
 8001e54:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10f      	bne.n	8001e7e <HAL_TIM_PWM_Stop+0x96>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6a1a      	ldr	r2, [r3, #32]
 8001e64:	f240 4344 	movw	r3, #1092	@ 0x444
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d107      	bne.n	8001e7e <HAL_TIM_PWM_Stop+0x96>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0201 	bic.w	r2, r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d104      	bne.n	8001e8e <HAL_TIM_PWM_Stop+0xa6>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e8c:	e023      	b.n	8001ed6 <HAL_TIM_PWM_Stop+0xee>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d104      	bne.n	8001e9e <HAL_TIM_PWM_Stop+0xb6>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e9c:	e01b      	b.n	8001ed6 <HAL_TIM_PWM_Stop+0xee>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d104      	bne.n	8001eae <HAL_TIM_PWM_Stop+0xc6>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001eac:	e013      	b.n	8001ed6 <HAL_TIM_PWM_Stop+0xee>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b0c      	cmp	r3, #12
 8001eb2:	d104      	bne.n	8001ebe <HAL_TIM_PWM_Stop+0xd6>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001ebc:	e00b      	b.n	8001ed6 <HAL_TIM_PWM_Stop+0xee>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b10      	cmp	r3, #16
 8001ec2:	d104      	bne.n	8001ece <HAL_TIM_PWM_Stop+0xe6>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ecc:	e003      	b.n	8001ed6 <HAL_TIM_PWM_Stop+0xee>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40010000 	.word	0x40010000
 8001ee4:	40010400 	.word	0x40010400

08001ee8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d101      	bne.n	8001f06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001f02:	2302      	movs	r3, #2
 8001f04:	e0ff      	b.n	8002106 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b14      	cmp	r3, #20
 8001f12:	f200 80f0 	bhi.w	80020f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001f16:	a201      	add	r2, pc, #4	@ (adr r2, 8001f1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1c:	08001f71 	.word	0x08001f71
 8001f20:	080020f7 	.word	0x080020f7
 8001f24:	080020f7 	.word	0x080020f7
 8001f28:	080020f7 	.word	0x080020f7
 8001f2c:	08001fb1 	.word	0x08001fb1
 8001f30:	080020f7 	.word	0x080020f7
 8001f34:	080020f7 	.word	0x080020f7
 8001f38:	080020f7 	.word	0x080020f7
 8001f3c:	08001ff3 	.word	0x08001ff3
 8001f40:	080020f7 	.word	0x080020f7
 8001f44:	080020f7 	.word	0x080020f7
 8001f48:	080020f7 	.word	0x080020f7
 8001f4c:	08002033 	.word	0x08002033
 8001f50:	080020f7 	.word	0x080020f7
 8001f54:	080020f7 	.word	0x080020f7
 8001f58:	080020f7 	.word	0x080020f7
 8001f5c:	08002075 	.word	0x08002075
 8001f60:	080020f7 	.word	0x080020f7
 8001f64:	080020f7 	.word	0x080020f7
 8001f68:	080020f7 	.word	0x080020f7
 8001f6c:	080020b5 	.word	0x080020b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 fa40 	bl	80023fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699a      	ldr	r2, [r3, #24]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0208 	orr.w	r2, r2, #8
 8001f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699a      	ldr	r2, [r3, #24]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0204 	bic.w	r2, r2, #4
 8001f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6999      	ldr	r1, [r3, #24]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	619a      	str	r2, [r3, #24]
      break;
 8001fae:	e0a5      	b.n	80020fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 fa92 	bl	80024e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699a      	ldr	r2, [r3, #24]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699a      	ldr	r2, [r3, #24]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6999      	ldr	r1, [r3, #24]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	021a      	lsls	r2, r3, #8
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	619a      	str	r2, [r3, #24]
      break;
 8001ff0:	e084      	b.n	80020fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68b9      	ldr	r1, [r7, #8]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fae9 	bl	80025d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	69da      	ldr	r2, [r3, #28]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f042 0208 	orr.w	r2, r2, #8
 800200c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	69da      	ldr	r2, [r3, #28]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0204 	bic.w	r2, r2, #4
 800201c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	69d9      	ldr	r1, [r3, #28]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	61da      	str	r2, [r3, #28]
      break;
 8002030:	e064      	b.n	80020fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68b9      	ldr	r1, [r7, #8]
 8002038:	4618      	mov	r0, r3
 800203a:	f000 fb3f 	bl	80026bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	69da      	ldr	r2, [r3, #28]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800204c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	69da      	ldr	r2, [r3, #28]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800205c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	69d9      	ldr	r1, [r3, #28]
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	021a      	lsls	r2, r3, #8
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	61da      	str	r2, [r3, #28]
      break;
 8002072:	e043      	b.n	80020fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fb76 	bl	800276c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0208 	orr.w	r2, r2, #8
 800208e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0204 	bic.w	r2, r2, #4
 800209e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80020b2:	e023      	b.n	80020fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 fba8 	bl	8002810 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	021a      	lsls	r2, r3, #8
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80020f4:	e002      	b.n	80020fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	75fb      	strb	r3, [r7, #23]
      break;
 80020fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002104:	7dfb      	ldrb	r3, [r7, #23]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop

08002110 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_TIM_ConfigClockSource+0x1c>
 8002128:	2302      	movs	r3, #2
 800212a:	e0b4      	b.n	8002296 <HAL_TIM_ConfigClockSource+0x186>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	4b56      	ldr	r3, [pc, #344]	@ (80022a0 <HAL_TIM_ConfigClockSource+0x190>)
 8002148:	4013      	ands	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002152:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002164:	d03e      	beq.n	80021e4 <HAL_TIM_ConfigClockSource+0xd4>
 8002166:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800216a:	f200 8087 	bhi.w	800227c <HAL_TIM_ConfigClockSource+0x16c>
 800216e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002172:	f000 8086 	beq.w	8002282 <HAL_TIM_ConfigClockSource+0x172>
 8002176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800217a:	d87f      	bhi.n	800227c <HAL_TIM_ConfigClockSource+0x16c>
 800217c:	2b70      	cmp	r3, #112	@ 0x70
 800217e:	d01a      	beq.n	80021b6 <HAL_TIM_ConfigClockSource+0xa6>
 8002180:	2b70      	cmp	r3, #112	@ 0x70
 8002182:	d87b      	bhi.n	800227c <HAL_TIM_ConfigClockSource+0x16c>
 8002184:	2b60      	cmp	r3, #96	@ 0x60
 8002186:	d050      	beq.n	800222a <HAL_TIM_ConfigClockSource+0x11a>
 8002188:	2b60      	cmp	r3, #96	@ 0x60
 800218a:	d877      	bhi.n	800227c <HAL_TIM_ConfigClockSource+0x16c>
 800218c:	2b50      	cmp	r3, #80	@ 0x50
 800218e:	d03c      	beq.n	800220a <HAL_TIM_ConfigClockSource+0xfa>
 8002190:	2b50      	cmp	r3, #80	@ 0x50
 8002192:	d873      	bhi.n	800227c <HAL_TIM_ConfigClockSource+0x16c>
 8002194:	2b40      	cmp	r3, #64	@ 0x40
 8002196:	d058      	beq.n	800224a <HAL_TIM_ConfigClockSource+0x13a>
 8002198:	2b40      	cmp	r3, #64	@ 0x40
 800219a:	d86f      	bhi.n	800227c <HAL_TIM_ConfigClockSource+0x16c>
 800219c:	2b30      	cmp	r3, #48	@ 0x30
 800219e:	d064      	beq.n	800226a <HAL_TIM_ConfigClockSource+0x15a>
 80021a0:	2b30      	cmp	r3, #48	@ 0x30
 80021a2:	d86b      	bhi.n	800227c <HAL_TIM_ConfigClockSource+0x16c>
 80021a4:	2b20      	cmp	r3, #32
 80021a6:	d060      	beq.n	800226a <HAL_TIM_ConfigClockSource+0x15a>
 80021a8:	2b20      	cmp	r3, #32
 80021aa:	d867      	bhi.n	800227c <HAL_TIM_ConfigClockSource+0x16c>
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d05c      	beq.n	800226a <HAL_TIM_ConfigClockSource+0x15a>
 80021b0:	2b10      	cmp	r3, #16
 80021b2:	d05a      	beq.n	800226a <HAL_TIM_ConfigClockSource+0x15a>
 80021b4:	e062      	b.n	800227c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021c6:	f000 fbf1 	bl	80029ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80021d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	609a      	str	r2, [r3, #8]
      break;
 80021e2:	e04f      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021f4:	f000 fbda 	bl	80029ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002206:	609a      	str	r2, [r3, #8]
      break;
 8002208:	e03c      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002216:	461a      	mov	r2, r3
 8002218:	f000 fb4e 	bl	80028b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2150      	movs	r1, #80	@ 0x50
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fba7 	bl	8002976 <TIM_ITRx_SetConfig>
      break;
 8002228:	e02c      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002236:	461a      	mov	r2, r3
 8002238:	f000 fb6d 	bl	8002916 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2160      	movs	r1, #96	@ 0x60
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fb97 	bl	8002976 <TIM_ITRx_SetConfig>
      break;
 8002248:	e01c      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002256:	461a      	mov	r2, r3
 8002258:	f000 fb2e 	bl	80028b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2140      	movs	r1, #64	@ 0x40
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fb87 	bl	8002976 <TIM_ITRx_SetConfig>
      break;
 8002268:	e00c      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4619      	mov	r1, r3
 8002274:	4610      	mov	r0, r2
 8002276:	f000 fb7e 	bl	8002976 <TIM_ITRx_SetConfig>
      break;
 800227a:	e003      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
      break;
 8002280:	e000      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002282:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	fffeff88 	.word	0xfffeff88

080022a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a46      	ldr	r2, [pc, #280]	@ (80023d0 <TIM_Base_SetConfig+0x12c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d013      	beq.n	80022e4 <TIM_Base_SetConfig+0x40>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022c2:	d00f      	beq.n	80022e4 <TIM_Base_SetConfig+0x40>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a43      	ldr	r2, [pc, #268]	@ (80023d4 <TIM_Base_SetConfig+0x130>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d00b      	beq.n	80022e4 <TIM_Base_SetConfig+0x40>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a42      	ldr	r2, [pc, #264]	@ (80023d8 <TIM_Base_SetConfig+0x134>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d007      	beq.n	80022e4 <TIM_Base_SetConfig+0x40>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a41      	ldr	r2, [pc, #260]	@ (80023dc <TIM_Base_SetConfig+0x138>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d003      	beq.n	80022e4 <TIM_Base_SetConfig+0x40>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a40      	ldr	r2, [pc, #256]	@ (80023e0 <TIM_Base_SetConfig+0x13c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d108      	bne.n	80022f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a35      	ldr	r2, [pc, #212]	@ (80023d0 <TIM_Base_SetConfig+0x12c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d02b      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002304:	d027      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a32      	ldr	r2, [pc, #200]	@ (80023d4 <TIM_Base_SetConfig+0x130>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d023      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a31      	ldr	r2, [pc, #196]	@ (80023d8 <TIM_Base_SetConfig+0x134>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d01f      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a30      	ldr	r2, [pc, #192]	@ (80023dc <TIM_Base_SetConfig+0x138>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d01b      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a2f      	ldr	r2, [pc, #188]	@ (80023e0 <TIM_Base_SetConfig+0x13c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d017      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a2e      	ldr	r2, [pc, #184]	@ (80023e4 <TIM_Base_SetConfig+0x140>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d013      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a2d      	ldr	r2, [pc, #180]	@ (80023e8 <TIM_Base_SetConfig+0x144>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d00f      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a2c      	ldr	r2, [pc, #176]	@ (80023ec <TIM_Base_SetConfig+0x148>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00b      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a2b      	ldr	r2, [pc, #172]	@ (80023f0 <TIM_Base_SetConfig+0x14c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d007      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a2a      	ldr	r2, [pc, #168]	@ (80023f4 <TIM_Base_SetConfig+0x150>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d003      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a29      	ldr	r2, [pc, #164]	@ (80023f8 <TIM_Base_SetConfig+0x154>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d108      	bne.n	8002368 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800235c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4313      	orrs	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	4313      	orrs	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a10      	ldr	r2, [pc, #64]	@ (80023d0 <TIM_Base_SetConfig+0x12c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d003      	beq.n	800239c <TIM_Base_SetConfig+0xf8>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a12      	ldr	r2, [pc, #72]	@ (80023e0 <TIM_Base_SetConfig+0x13c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d103      	bne.n	80023a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d105      	bne.n	80023c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f023 0201 	bic.w	r2, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	611a      	str	r2, [r3, #16]
  }
}
 80023c2:	bf00      	nop
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40010000 	.word	0x40010000
 80023d4:	40000400 	.word	0x40000400
 80023d8:	40000800 	.word	0x40000800
 80023dc:	40000c00 	.word	0x40000c00
 80023e0:	40010400 	.word	0x40010400
 80023e4:	40014000 	.word	0x40014000
 80023e8:	40014400 	.word	0x40014400
 80023ec:	40014800 	.word	0x40014800
 80023f0:	40001800 	.word	0x40001800
 80023f4:	40001c00 	.word	0x40001c00
 80023f8:	40002000 	.word	0x40002000

080023fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	f023 0201 	bic.w	r2, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4b2b      	ldr	r3, [pc, #172]	@ (80024d4 <TIM_OC1_SetConfig+0xd8>)
 8002428:	4013      	ands	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f023 0303 	bic.w	r3, r3, #3
 8002432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f023 0302 	bic.w	r3, r3, #2
 8002444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	4313      	orrs	r3, r2
 800244e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a21      	ldr	r2, [pc, #132]	@ (80024d8 <TIM_OC1_SetConfig+0xdc>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d003      	beq.n	8002460 <TIM_OC1_SetConfig+0x64>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a20      	ldr	r2, [pc, #128]	@ (80024dc <TIM_OC1_SetConfig+0xe0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d10c      	bne.n	800247a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f023 0308 	bic.w	r3, r3, #8
 8002466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	4313      	orrs	r3, r2
 8002470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f023 0304 	bic.w	r3, r3, #4
 8002478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a16      	ldr	r2, [pc, #88]	@ (80024d8 <TIM_OC1_SetConfig+0xdc>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d003      	beq.n	800248a <TIM_OC1_SetConfig+0x8e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a15      	ldr	r2, [pc, #84]	@ (80024dc <TIM_OC1_SetConfig+0xe0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d111      	bne.n	80024ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	621a      	str	r2, [r3, #32]
}
 80024c8:	bf00      	nop
 80024ca:	371c      	adds	r7, #28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	fffeff8f 	.word	0xfffeff8f
 80024d8:	40010000 	.word	0x40010000
 80024dc:	40010400 	.word	0x40010400

080024e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f023 0210 	bic.w	r2, r3, #16
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4b2e      	ldr	r3, [pc, #184]	@ (80025c4 <TIM_OC2_SetConfig+0xe4>)
 800250c:	4013      	ands	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	021b      	lsls	r3, r3, #8
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f023 0320 	bic.w	r3, r3, #32
 800252a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4313      	orrs	r3, r2
 8002536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a23      	ldr	r2, [pc, #140]	@ (80025c8 <TIM_OC2_SetConfig+0xe8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d003      	beq.n	8002548 <TIM_OC2_SetConfig+0x68>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a22      	ldr	r2, [pc, #136]	@ (80025cc <TIM_OC2_SetConfig+0xec>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d10d      	bne.n	8002564 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800254e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	4313      	orrs	r3, r2
 800255a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002562:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a18      	ldr	r2, [pc, #96]	@ (80025c8 <TIM_OC2_SetConfig+0xe8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d003      	beq.n	8002574 <TIM_OC2_SetConfig+0x94>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a17      	ldr	r2, [pc, #92]	@ (80025cc <TIM_OC2_SetConfig+0xec>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d113      	bne.n	800259c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800257a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002582:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	621a      	str	r2, [r3, #32]
}
 80025b6:	bf00      	nop
 80025b8:	371c      	adds	r7, #28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	feff8fff 	.word	0xfeff8fff
 80025c8:	40010000 	.word	0x40010000
 80025cc:	40010400 	.word	0x40010400

080025d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4b2d      	ldr	r3, [pc, #180]	@ (80026b0 <TIM_OC3_SetConfig+0xe0>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f023 0303 	bic.w	r3, r3, #3
 8002606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	4313      	orrs	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	021b      	lsls	r3, r3, #8
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	4313      	orrs	r3, r2
 8002624:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a22      	ldr	r2, [pc, #136]	@ (80026b4 <TIM_OC3_SetConfig+0xe4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d003      	beq.n	8002636 <TIM_OC3_SetConfig+0x66>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a21      	ldr	r2, [pc, #132]	@ (80026b8 <TIM_OC3_SetConfig+0xe8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d10d      	bne.n	8002652 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800263c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	021b      	lsls	r3, r3, #8
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	4313      	orrs	r3, r2
 8002648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a17      	ldr	r2, [pc, #92]	@ (80026b4 <TIM_OC3_SetConfig+0xe4>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d003      	beq.n	8002662 <TIM_OC3_SetConfig+0x92>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a16      	ldr	r2, [pc, #88]	@ (80026b8 <TIM_OC3_SetConfig+0xe8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d113      	bne.n	800268a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	621a      	str	r2, [r3, #32]
}
 80026a4:	bf00      	nop
 80026a6:	371c      	adds	r7, #28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	fffeff8f 	.word	0xfffeff8f
 80026b4:	40010000 	.word	0x40010000
 80026b8:	40010400 	.word	0x40010400

080026bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002760 <TIM_OC4_SetConfig+0xa4>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	021b      	lsls	r3, r3, #8
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	031b      	lsls	r3, r3, #12
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a13      	ldr	r2, [pc, #76]	@ (8002764 <TIM_OC4_SetConfig+0xa8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d003      	beq.n	8002724 <TIM_OC4_SetConfig+0x68>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a12      	ldr	r2, [pc, #72]	@ (8002768 <TIM_OC4_SetConfig+0xac>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d109      	bne.n	8002738 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800272a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	019b      	lsls	r3, r3, #6
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4313      	orrs	r3, r2
 8002736:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	621a      	str	r2, [r3, #32]
}
 8002752:	bf00      	nop
 8002754:	371c      	adds	r7, #28
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	feff8fff 	.word	0xfeff8fff
 8002764:	40010000 	.word	0x40010000
 8002768:	40010400 	.word	0x40010400

0800276c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4b1b      	ldr	r3, [pc, #108]	@ (8002804 <TIM_OC5_SetConfig+0x98>)
 8002798:	4013      	ands	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80027ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	041b      	lsls	r3, r3, #16
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a12      	ldr	r2, [pc, #72]	@ (8002808 <TIM_OC5_SetConfig+0x9c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d003      	beq.n	80027ca <TIM_OC5_SetConfig+0x5e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a11      	ldr	r2, [pc, #68]	@ (800280c <TIM_OC5_SetConfig+0xa0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d109      	bne.n	80027de <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	4313      	orrs	r3, r2
 80027dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	621a      	str	r2, [r3, #32]
}
 80027f8:	bf00      	nop
 80027fa:	371c      	adds	r7, #28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	fffeff8f 	.word	0xfffeff8f
 8002808:	40010000 	.word	0x40010000
 800280c:	40010400 	.word	0x40010400

08002810 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4b1c      	ldr	r3, [pc, #112]	@ (80028ac <TIM_OC6_SetConfig+0x9c>)
 800283c:	4013      	ands	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4313      	orrs	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002852:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	051b      	lsls	r3, r3, #20
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a13      	ldr	r2, [pc, #76]	@ (80028b0 <TIM_OC6_SetConfig+0xa0>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d003      	beq.n	8002870 <TIM_OC6_SetConfig+0x60>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a12      	ldr	r2, [pc, #72]	@ (80028b4 <TIM_OC6_SetConfig+0xa4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d109      	bne.n	8002884 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002876:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	029b      	lsls	r3, r3, #10
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	4313      	orrs	r3, r2
 8002882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	621a      	str	r2, [r3, #32]
}
 800289e:	bf00      	nop
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	feff8fff 	.word	0xfeff8fff
 80028b0:	40010000 	.word	0x40010000
 80028b4:	40010400 	.word	0x40010400

080028b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	f023 0201 	bic.w	r2, r3, #1
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f023 030a 	bic.w	r3, r3, #10
 80028f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	621a      	str	r2, [r3, #32]
}
 800290a:	bf00      	nop
 800290c:	371c      	adds	r7, #28
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002916:	b480      	push	{r7}
 8002918:	b087      	sub	sp, #28
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	f023 0210 	bic.w	r2, r3, #16
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002940:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	031b      	lsls	r3, r3, #12
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002952:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	4313      	orrs	r3, r2
 800295c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	621a      	str	r2, [r3, #32]
}
 800296a:	bf00      	nop
 800296c:	371c      	adds	r7, #28
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002976:	b480      	push	{r7}
 8002978:	b085      	sub	sp, #20
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800298c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	f043 0307 	orr.w	r3, r3, #7
 8002998:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	609a      	str	r2, [r3, #8]
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	021a      	lsls	r2, r3, #8
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	609a      	str	r2, [r3, #8]
}
 80029e0:	bf00      	nop
 80029e2:	371c      	adds	r7, #28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	2201      	movs	r2, #1
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a1a      	ldr	r2, [r3, #32]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	401a      	ands	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a1a      	ldr	r2, [r3, #32]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f003 031f 	and.w	r3, r3, #31
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	fa01 f303 	lsl.w	r3, r1, r3
 8002a24:	431a      	orrs	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	621a      	str	r2, [r3, #32]
}
 8002a2a:	bf00      	nop
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e06d      	b.n	8002b2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a30      	ldr	r2, [pc, #192]	@ (8002b38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d004      	beq.n	8002a84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a2f      	ldr	r2, [pc, #188]	@ (8002b3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d108      	bne.n	8002a96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002a8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a20      	ldr	r2, [pc, #128]	@ (8002b38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d022      	beq.n	8002b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ac2:	d01d      	beq.n	8002b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8002b40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d018      	beq.n	8002b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d013      	beq.n	8002b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1a      	ldr	r2, [pc, #104]	@ (8002b48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00e      	beq.n	8002b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a15      	ldr	r2, [pc, #84]	@ (8002b3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d009      	beq.n	8002b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a16      	ldr	r2, [pc, #88]	@ (8002b4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d004      	beq.n	8002b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a15      	ldr	r2, [pc, #84]	@ (8002b50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d10c      	bne.n	8002b1a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	40010000 	.word	0x40010000
 8002b3c:	40010400 	.word	0x40010400
 8002b40:	40000400 	.word	0x40000400
 8002b44:	40000800 	.word	0x40000800
 8002b48:	40000c00 	.word	0x40000c00
 8002b4c:	40014000 	.word	0x40014000
 8002b50:	40001800 	.word	0x40001800

08002b54 <memset>:
 8002b54:	4402      	add	r2, r0
 8002b56:	4603      	mov	r3, r0
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d100      	bne.n	8002b5e <memset+0xa>
 8002b5c:	4770      	bx	lr
 8002b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b62:	e7f9      	b.n	8002b58 <memset+0x4>

08002b64 <__libc_init_array>:
 8002b64:	b570      	push	{r4, r5, r6, lr}
 8002b66:	4d0d      	ldr	r5, [pc, #52]	@ (8002b9c <__libc_init_array+0x38>)
 8002b68:	4c0d      	ldr	r4, [pc, #52]	@ (8002ba0 <__libc_init_array+0x3c>)
 8002b6a:	1b64      	subs	r4, r4, r5
 8002b6c:	10a4      	asrs	r4, r4, #2
 8002b6e:	2600      	movs	r6, #0
 8002b70:	42a6      	cmp	r6, r4
 8002b72:	d109      	bne.n	8002b88 <__libc_init_array+0x24>
 8002b74:	4d0b      	ldr	r5, [pc, #44]	@ (8002ba4 <__libc_init_array+0x40>)
 8002b76:	4c0c      	ldr	r4, [pc, #48]	@ (8002ba8 <__libc_init_array+0x44>)
 8002b78:	f000 f818 	bl	8002bac <_init>
 8002b7c:	1b64      	subs	r4, r4, r5
 8002b7e:	10a4      	asrs	r4, r4, #2
 8002b80:	2600      	movs	r6, #0
 8002b82:	42a6      	cmp	r6, r4
 8002b84:	d105      	bne.n	8002b92 <__libc_init_array+0x2e>
 8002b86:	bd70      	pop	{r4, r5, r6, pc}
 8002b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b8c:	4798      	blx	r3
 8002b8e:	3601      	adds	r6, #1
 8002b90:	e7ee      	b.n	8002b70 <__libc_init_array+0xc>
 8002b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b96:	4798      	blx	r3
 8002b98:	3601      	adds	r6, #1
 8002b9a:	e7f2      	b.n	8002b82 <__libc_init_array+0x1e>
 8002b9c:	08002bdc 	.word	0x08002bdc
 8002ba0:	08002bdc 	.word	0x08002bdc
 8002ba4:	08002bdc 	.word	0x08002bdc
 8002ba8:	08002be0 	.word	0x08002be0

08002bac <_init>:
 8002bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bae:	bf00      	nop
 8002bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb2:	bc08      	pop	{r3}
 8002bb4:	469e      	mov	lr, r3
 8002bb6:	4770      	bx	lr

08002bb8 <_fini>:
 8002bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bba:	bf00      	nop
 8002bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bbe:	bc08      	pop	{r3}
 8002bc0:	469e      	mov	lr, r3
 8002bc2:	4770      	bx	lr
