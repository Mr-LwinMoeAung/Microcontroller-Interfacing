
lab5next.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006534  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08006738  08006738  00007738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b00  08006b00  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006b00  08006b00  00007b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b08  08006b08  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b08  08006b08  00007b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b0c  08006b0c  00007b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006b10  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  200001d4  08006ce4  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08006ce4  00008490  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfcd  00000000  00000000  00008202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002021  00000000  00000000  000141cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  000161f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000720  00000000  00000000  00016b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028899  00000000  00000000  00017280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9f3  00000000  00000000  0003fb19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8215  00000000  00000000  0004d50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145721  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033e8  00000000  00000000  00145764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00148b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800671c 	.word	0x0800671c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	0800671c 	.word	0x0800671c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
//}

// ADC1 initialization function
// ADC1 initialization function
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]

    // Configure the global features of the ADC (Clock, Resolution, Data Alignment, etc.)
    hadc1.Instance = ADC1;
 80005f2:	4b20      	ldr	r3, [pc, #128]	@ (8000674 <MX_ADC1_Init+0x94>)
 80005f4:	4a20      	ldr	r2, [pc, #128]	@ (8000678 <MX_ADC1_Init+0x98>)
 80005f6:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV4;
 80005f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000674 <MX_ADC1_Init+0x94>)
 80005fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fe:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000600:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_ADC1_Init+0x94>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT; // Set to Left Alignment
 8000606:	4b1b      	ldr	r3, [pc, #108]	@ (8000674 <MX_ADC1_Init+0x94>)
 8000608:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800060c:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC1_Init+0x94>)
 8000610:	2201      	movs	r2, #1
 8000612:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000614:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_ADC1_Init+0x94>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
    hadc1.Init.ContinuousConvMode = DISABLE;
 800061a:	4b16      	ldr	r3, [pc, #88]	@ (8000674 <MX_ADC1_Init+0x94>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8000620:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC1_Init+0x94>)
 8000622:	2200      	movs	r2, #0
 8000624:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
//    hadc1.Init.Overrun = OVR_DATA_OVERWRITTEN; // Correct overrun handling
    hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_ADC1_Init+0x94>)
 800062a:	2201      	movs	r2, #1
 800062c:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.NbrOfDiscConversion = 1;
 8000630:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <MX_ADC1_Init+0x94>)
 8000632:	2201      	movs	r2, #1
 8000634:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000636:	480f      	ldr	r0, [pc, #60]	@ (8000674 <MX_ADC1_Init+0x94>)
 8000638:	f000 fd02 	bl	8001040 <HAL_ADC_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0x66>
    {
        Error_Handler();
 8000642:	f000 fa91 	bl	8000b68 <Error_Handler>
    }

    // Configure Regular Channel
    sConfig.Channel = ADC_CHANNEL_0;
 8000646:	2300      	movs	r3, #0
 8000648:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 800064a:	2301      	movs	r3, #1
 800064c:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
    sConfig.Offset = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000656:	463b      	mov	r3, r7
 8000658:	4619      	mov	r1, r3
 800065a:	4806      	ldr	r0, [pc, #24]	@ (8000674 <MX_ADC1_Init+0x94>)
 800065c:	f000 fece 	bl	80013fc <HAL_ADC_ConfigChannel>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_ADC1_Init+0x8a>
    {
        Error_Handler();
 8000666:	f000 fa7f 	bl	8000b68 <Error_Handler>
    }
}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200001f0 	.word	0x200001f0
 8000678:	40012000 	.word	0x40012000

0800067c <HAL_ADC_MspInit>:




void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	@ 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a15      	ldr	r2, [pc, #84]	@ (80006f0 <HAL_ADC_MspInit+0x74>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d123      	bne.n	80006e6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800069e:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <HAL_ADC_MspInit+0x78>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a2:	4a14      	ldr	r2, [pc, #80]	@ (80006f4 <HAL_ADC_MspInit+0x78>)
 80006a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80006aa:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <HAL_ADC_MspInit+0x78>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b6:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <HAL_ADC_MspInit+0x78>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a0e      	ldr	r2, [pc, #56]	@ (80006f4 <HAL_ADC_MspInit+0x78>)
 80006bc:	f043 0304 	orr.w	r3, r3, #4
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <HAL_ADC_MspInit+0x78>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0304 	and.w	r3, r3, #4
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ce:	2301      	movs	r3, #1
 80006d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d2:	2303      	movs	r3, #3
 80006d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <HAL_ADC_MspInit+0x7c>)
 80006e2:	f001 fa39 	bl	8001b58 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	@ 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40012000 	.word	0x40012000
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020800 	.word	0x40020800

080006fc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <MX_GPIO_Init+0x6c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a18      	ldr	r2, [pc, #96]	@ (8000768 <MX_GPIO_Init+0x6c>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <MX_GPIO_Init+0x6c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071a:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <MX_GPIO_Init+0x6c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a12      	ldr	r2, [pc, #72]	@ (8000768 <MX_GPIO_Init+0x6c>)
 8000720:	f043 0308 	orr.w	r3, r3, #8
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <MX_GPIO_Init+0x6c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0308 	and.w	r3, r3, #8
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

      /* GPIO Ports Clock Enable */


  GPIO_InitStruct.Pin = LED3_PIN | LED4_PIN | LED5_PIN | LED6_PIN;
 8000742:	2378      	movs	r3, #120	@ 0x78
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_PORT, &GPIO_InitStruct);
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4619      	mov	r1, r3
 8000758:	4804      	ldr	r0, [pc, #16]	@ (800076c <MX_GPIO_Init+0x70>)
 800075a:	f001 f9fd 	bl	8001b58 <HAL_GPIO_Init>

}
 800075e:	bf00      	nop
 8000760:	3720      	adds	r7, #32
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40020c00 	.word	0x40020c00

08000770 <average_8>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MPU_Config(void);
int avg_val_8 = 0;  // Variable to store 8-sample moving average
int avg_val_16 = 0; // Variable to store 16-sample moving average
int average_8(int x) {
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
    static int samples[8];
    static int i = 0;
    static int total = 0;

    /* Update the moving average */
    total += x - samples[i];
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <average_8+0x54>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a12      	ldr	r2, [pc, #72]	@ (80007c8 <average_8+0x58>)
 800077e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	1ad2      	subs	r2, r2, r3
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <average_8+0x5c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4413      	add	r3, r2
 800078c:	4a0f      	ldr	r2, [pc, #60]	@ (80007cc <average_8+0x5c>)
 800078e:	6013      	str	r3, [r2, #0]
    samples[i] = x;
 8000790:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <average_8+0x54>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	490c      	ldr	r1, [pc, #48]	@ (80007c8 <average_8+0x58>)
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* Update the index */
    i = (i == 7 ? 0 : i + 1);
 800079c:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <average_8+0x54>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b07      	cmp	r3, #7
 80007a2:	d003      	beq.n	80007ac <average_8+0x3c>
 80007a4:	4b07      	ldr	r3, [pc, #28]	@ (80007c4 <average_8+0x54>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	3301      	adds	r3, #1
 80007aa:	e000      	b.n	80007ae <average_8+0x3e>
 80007ac:	2300      	movs	r3, #0
 80007ae:	4a05      	ldr	r2, [pc, #20]	@ (80007c4 <average_8+0x54>)
 80007b0:	6013      	str	r3, [r2, #0]

    return total >> 3; // Divide by 8
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <average_8+0x5c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	10db      	asrs	r3, r3, #3
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	20000244 	.word	0x20000244
 80007c8:	20000248 	.word	0x20000248
 80007cc:	20000268 	.word	0x20000268

080007d0 <average_16>:

int average_16(int x) {
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
    static int samples[16];
    static int i = 0;
    static int total = 0;

    /* Update the moving average */
    total += x - samples[i];
 80007d8:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <average_16+0x54>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a12      	ldr	r2, [pc, #72]	@ (8000828 <average_16+0x58>)
 80007de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	1ad2      	subs	r2, r2, r3
 80007e6:	4b11      	ldr	r3, [pc, #68]	@ (800082c <average_16+0x5c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	4a0f      	ldr	r2, [pc, #60]	@ (800082c <average_16+0x5c>)
 80007ee:	6013      	str	r3, [r2, #0]
    samples[i] = x;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <average_16+0x54>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	490c      	ldr	r1, [pc, #48]	@ (8000828 <average_16+0x58>)
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* Update the index */
    i = (i == 15 ? 0 : i + 1);
 80007fc:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <average_16+0x54>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b0f      	cmp	r3, #15
 8000802:	d003      	beq.n	800080c <average_16+0x3c>
 8000804:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <average_16+0x54>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	3301      	adds	r3, #1
 800080a:	e000      	b.n	800080e <average_16+0x3e>
 800080c:	2300      	movs	r3, #0
 800080e:	4a05      	ldr	r2, [pc, #20]	@ (8000824 <average_16+0x54>)
 8000810:	6013      	str	r3, [r2, #0]

    return total >> 4; // Divide by 16
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <average_16+0x5c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	111b      	asrs	r3, r3, #4
}
 8000818:	4618      	mov	r0, r3
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	2000026c 	.word	0x2000026c
 8000828:	20000270 	.word	0x20000270
 800082c:	200002b0 	.word	0x200002b0

08000830 <displayHEX.0>:
//      char output[50];
//      sprintf(output, "Channel: %d, Value: 0x%08lX, Voltage: %.2fV\r\n", channel, value, voltage);
//      HAL_UART_Transmit(&huart3, (uint8_t*)output, strlen(output), HAL_MAX_DELAY);
//  }

  void displayHEX(uint32_t value, uint8_t channel, float voltage) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b0a2      	sub	sp, #136	@ 0x88
 8000834:	af04      	add	r7, sp, #16
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	460b      	mov	r3, r1
 800083a:	ed87 0a01 	vstr	s0, [r7, #4]
 800083e:	72fb      	strb	r3, [r7, #11]
 8000840:	f8c7 c000 	str.w	ip, [r7]
      char output[100];
      sprintf(output, "Channel: %u, Value: 0x%08lX, Value_in_d: %d, Voltage: %.2fV\r\n", channel, value,value, voltage);
 8000844:	7afa      	ldrb	r2, [r7, #11]
 8000846:	edd7 7a01 	vldr	s15, [r7, #4]
 800084a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800084e:	f107 0014 	add.w	r0, r7, #20
 8000852:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	490a      	ldr	r1, [pc, #40]	@ (8000888 <displayHEX.0+0x58>)
 800085e:	f003 fe9d 	bl	800459c <siprintf>
//      sprintf(output, "Channel: %u, Value: %d, Voltage: %.2fV\r\n", channel, value, voltage);
      HAL_UART_Transmit(&huart3, (uint8_t *)output, strlen(output), HAL_MAX_DELAY);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fd3a 	bl	80002e0 <strlen>
 800086c:	4603      	mov	r3, r0
 800086e:	b29a      	uxth	r2, r3
 8000870:	f107 0114 	add.w	r1, r7, #20
 8000874:	f04f 33ff 	mov.w	r3, #4294967295
 8000878:	4804      	ldr	r0, [pc, #16]	@ (800088c <displayHEX.0+0x5c>)
 800087a:	f002 fc8d 	bl	8003198 <HAL_UART_Transmit>
  }
 800087e:	bf00      	nop
 8000880:	3778      	adds	r7, #120	@ 0x78
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	08006738 	.word	0x08006738
 800088c:	200002b8 	.word	0x200002b8

08000890 <main>:
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
int main(void)
 8000896:	f107 0318 	add.w	r3, r7, #24
 800089a:	607b      	str	r3, [r7, #4]
  MPU_Config();
 800089c:	f000 f938 	bl	8000b10 <MPU_Config>
  HAL_Init();
 80008a0:	f000 fb4d 	bl	8000f3e <HAL_Init>
  SystemClock_Config();
 80008a4:	f000 f8c6 	bl	8000a34 <SystemClock_Config>
  MX_GPIO_Init();
 80008a8:	f7ff ff28 	bl	80006fc <MX_GPIO_Init>
  MX_ADC1_Init();
 80008ac:	f7ff fe98 	bl	80005e0 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80008b0:	f000 fa8c 	bl	8000dcc <MX_USART3_UART_Init>
  HAL_ADC_Start(&hadc1);
 80008b4:	482e      	ldr	r0, [pc, #184]	@ (8000970 <main+0xe0>)
 80008b6:	f000 fc07 	bl	80010c8 <HAL_ADC_Start>
//          HAL_ADC_Stop(&hadc1);
//
//          HAL_Delay(400);
//      }
  while (1) {
      HAL_ADC_Start(&hadc1);
 80008ba:	482d      	ldr	r0, [pc, #180]	@ (8000970 <main+0xe0>)
 80008bc:	f000 fc04 	bl	80010c8 <HAL_ADC_Start>
      if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80008c0:	f04f 31ff 	mov.w	r1, #4294967295
 80008c4:	482a      	ldr	r0, [pc, #168]	@ (8000970 <main+0xe0>)
 80008c6:	f000 fd01 	bl	80012cc <HAL_ADC_PollForConversion>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d13e      	bne.n	800094e <main+0xbe>
          adc_val = HAL_ADC_GetValue(&hadc1);
 80008d0:	4827      	ldr	r0, [pc, #156]	@ (8000970 <main+0xe0>)
 80008d2:	f000 fd86 	bl	80013e2 <HAL_ADC_GetValue>
 80008d6:	4603      	mov	r3, r0
 80008d8:	4a26      	ldr	r2, [pc, #152]	@ (8000974 <main+0xe4>)
 80008da:	6013      	str	r3, [r2, #0]

          // Adjust the ADC value handling for left alignment
          uint32_t adjusted_adc_val = adc_val >> 4;  // Shift right to get the 12 MSBs
 80008dc:	4b25      	ldr	r3, [pc, #148]	@ (8000974 <main+0xe4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	091b      	lsrs	r3, r3, #4
 80008e2:	60fb      	str	r3, [r7, #12]

          // Calculate average values to reduce swing effect
          avg_val_8 = average_8(adjusted_adc_val);
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff ff42 	bl	8000770 <average_8>
 80008ec:	4603      	mov	r3, r0
 80008ee:	4a22      	ldr	r2, [pc, #136]	@ (8000978 <main+0xe8>)
 80008f0:	6013      	str	r3, [r2, #0]
          avg_val_16 = average_16(adjusted_adc_val);
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff6b 	bl	80007d0 <average_16>
 80008fa:	4603      	mov	r3, r0
 80008fc:	4a1f      	ldr	r2, [pc, #124]	@ (800097c <main+0xec>)
 80008fe:	6013      	str	r3, [r2, #0]

          // Calculate voltage based on ADC value
          float voltage = ((float)avg_val_16 / 4095.0) * 3.3;
 8000900:	4b1e      	ldr	r3, [pc, #120]	@ (800097c <main+0xec>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	ee07 3a90 	vmov	s15, r3
 8000908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800090c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000910:	ed9f 5b13 	vldr	d5, [pc, #76]	@ 8000960 <main+0xd0>
 8000914:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000918:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8000968 <main+0xd8>
 800091c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000920:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000924:	edc7 7a02 	vstr	s15, [r7, #8]

          // Display the HEX value, channel, and voltage
          displayHEX(avg_val_16, 0, voltage);
 8000928:	4b14      	ldr	r3, [pc, #80]	@ (800097c <main+0xec>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	469c      	mov	ip, r3
 8000932:	ed97 0a02 	vldr	s0, [r7, #8]
 8000936:	2100      	movs	r1, #0
 8000938:	4610      	mov	r0, r2
 800093a:	f7ff ff79 	bl	8000830 <displayHEX.0>

          // Display ADC value range using LEDs
          displayLEDs(avg_val_16);
 800093e:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <main+0xec>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	469c      	mov	ip, r3
 8000948:	4610      	mov	r0, r2
 800094a:	f000 f819 	bl	8000980 <displayLEDs.1>
      }
      HAL_ADC_Stop(&hadc1);
 800094e:	4808      	ldr	r0, [pc, #32]	@ (8000970 <main+0xe0>)
 8000950:	f000 fc88 	bl	8001264 <HAL_ADC_Stop>

      HAL_Delay(400);
 8000954:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000958:	f000 fb4e 	bl	8000ff8 <HAL_Delay>
      HAL_ADC_Start(&hadc1);
 800095c:	e7ad      	b.n	80008ba <main+0x2a>
 800095e:	bf00      	nop
 8000960:	00000000 	.word	0x00000000
 8000964:	40affe00 	.word	0x40affe00
 8000968:	66666666 	.word	0x66666666
 800096c:	400a6666 	.word	0x400a6666
 8000970:	200001f0 	.word	0x200001f0
 8000974:	20000238 	.word	0x20000238
 8000978:	2000023c 	.word	0x2000023c
 800097c:	20000240 	.word	0x20000240

08000980 <displayLEDs.1>:
  void displayLEDs(uint32_t value) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	f8c7 c000 	str.w	ip, [r7]
      HAL_GPIO_WritePin(LED_GPIO_PORT, LED3_PIN | LED4_PIN | LED5_PIN | LED6_PIN, GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	2178      	movs	r1, #120	@ 0x78
 8000990:	4827      	ldr	r0, [pc, #156]	@ (8000a30 <displayLEDs.1+0xb0>)
 8000992:	f001 fa8d 	bl	8001eb0 <HAL_GPIO_WritePin>
      if (value >= 0 && value <= 819) {
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f5b3 7f4d 	cmp.w	r3, #820	@ 0x334
 800099c:	d205      	bcs.n	80009aa <displayLEDs.1+0x2a>
          HAL_GPIO_WritePin(LED_GPIO_PORT, LED3_PIN | LED4_PIN | LED5_PIN | LED6_PIN, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	2178      	movs	r1, #120	@ 0x78
 80009a2:	4823      	ldr	r0, [pc, #140]	@ (8000a30 <displayLEDs.1+0xb0>)
 80009a4:	f001 fa84 	bl	8001eb0 <HAL_GPIO_WritePin>
  }
 80009a8:	e03d      	b.n	8000a26 <displayLEDs.1+0xa6>
      } else if (value > 819 && value <= 1638) {
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f5b3 7f4d 	cmp.w	r3, #820	@ 0x334
 80009b0:	d30a      	bcc.n	80009c8 <displayLEDs.1+0x48>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	f240 6266 	movw	r2, #1638	@ 0x666
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d805      	bhi.n	80009c8 <displayLEDs.1+0x48>
          HAL_GPIO_WritePin(LED_GPIO_PORT, LED3_PIN, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	2108      	movs	r1, #8
 80009c0:	481b      	ldr	r0, [pc, #108]	@ (8000a30 <displayLEDs.1+0xb0>)
 80009c2:	f001 fa75 	bl	8001eb0 <HAL_GPIO_WritePin>
 80009c6:	e02e      	b.n	8000a26 <displayLEDs.1+0xa6>
      } else if (value > 1638 && value <= 2457) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f240 6266 	movw	r2, #1638	@ 0x666
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d90a      	bls.n	80009e8 <displayLEDs.1+0x68>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f640 1299 	movw	r2, #2457	@ 0x999
 80009d8:	4293      	cmp	r3, r2
 80009da:	d805      	bhi.n	80009e8 <displayLEDs.1+0x68>
          HAL_GPIO_WritePin(LED_GPIO_PORT, LED3_PIN | LED4_PIN, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2118      	movs	r1, #24
 80009e0:	4813      	ldr	r0, [pc, #76]	@ (8000a30 <displayLEDs.1+0xb0>)
 80009e2:	f001 fa65 	bl	8001eb0 <HAL_GPIO_WritePin>
 80009e6:	e01e      	b.n	8000a26 <displayLEDs.1+0xa6>
      } else if (value > 2457 && value <= 3276) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f640 1299 	movw	r2, #2457	@ 0x999
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d90a      	bls.n	8000a08 <displayLEDs.1+0x88>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f640 42cc 	movw	r2, #3276	@ 0xccc
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d805      	bhi.n	8000a08 <displayLEDs.1+0x88>
          HAL_GPIO_WritePin(LED_GPIO_PORT, LED3_PIN | LED4_PIN | LED5_PIN , GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2138      	movs	r1, #56	@ 0x38
 8000a00:	480b      	ldr	r0, [pc, #44]	@ (8000a30 <displayLEDs.1+0xb0>)
 8000a02:	f001 fa55 	bl	8001eb0 <HAL_GPIO_WritePin>
 8000a06:	e00e      	b.n	8000a26 <displayLEDs.1+0xa6>
      }else if (value > 3276 && value <= 4095) {
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f640 42cc 	movw	r2, #3276	@ 0xccc
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d909      	bls.n	8000a26 <displayLEDs.1+0xa6>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000a18:	d205      	bcs.n	8000a26 <displayLEDs.1+0xa6>
          HAL_GPIO_WritePin(LED_GPIO_PORT, LED3_PIN | LED4_PIN | LED5_PIN | LED6_PIN, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2178      	movs	r1, #120	@ 0x78
 8000a1e:	4804      	ldr	r0, [pc, #16]	@ (8000a30 <displayLEDs.1+0xb0>)
 8000a20:	f001 fa46 	bl	8001eb0 <HAL_GPIO_WritePin>
  }
 8000a24:	e7ff      	b.n	8000a26 <displayLEDs.1+0xa6>
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40020c00 	.word	0x40020c00

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b094      	sub	sp, #80	@ 0x50
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	2234      	movs	r2, #52	@ 0x34
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f003 fe0d 	bl	8004662 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a48:	f107 0308 	add.w	r3, r7, #8
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a58:	4b2b      	ldr	r3, [pc, #172]	@ (8000b08 <SystemClock_Config+0xd4>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8000b08 <SystemClock_Config+0xd4>)
 8000a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a64:	4b28      	ldr	r3, [pc, #160]	@ (8000b08 <SystemClock_Config+0xd4>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a70:	4b26      	ldr	r3, [pc, #152]	@ (8000b0c <SystemClock_Config+0xd8>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a25      	ldr	r2, [pc, #148]	@ (8000b0c <SystemClock_Config+0xd8>)
 8000a76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	4b23      	ldr	r3, [pc, #140]	@ (8000b0c <SystemClock_Config+0xd8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a90:	2310      	movs	r3, #16
 8000a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a94:	2302      	movs	r3, #2
 8000a96:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000aa0:	23d8      	movs	r3, #216	@ 0xd8
 8000aa2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 fa65 	bl	8001f84 <HAL_RCC_OscConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000ac0:	f000 f852 	bl	8000b68 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ac4:	f001 fa0e 	bl	8001ee4 <HAL_PWREx_EnableOverDrive>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ace:	f000 f84b 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad2:	230f      	movs	r3, #15
 8000ad4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ade:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ae2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ae4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	2107      	movs	r1, #7
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 fcf5 	bl	80024e0 <HAL_RCC_ClockConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000afc:	f000 f834 	bl	8000b68 <Error_Handler>
  }
}
 8000b00:	bf00      	nop
 8000b02:	3750      	adds	r7, #80	@ 0x50
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40007000 	.word	0x40007000

08000b10 <MPU_Config>:

/* MPU Configuration */

void MPU_Config(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b16:	463b      	mov	r3, r7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b22:	f000 ffa1 	bl	8001a68 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b26:	2301      	movs	r3, #1
 8000b28:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b32:	231f      	movs	r3, #31
 8000b34:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b36:	2387      	movs	r3, #135	@ 0x87
 8000b38:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b42:	2301      	movs	r3, #1
 8000b44:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b46:	2301      	movs	r3, #1
 8000b48:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b52:	463b      	mov	r3, r7
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 ffbf 	bl	8001ad8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b5a:	2004      	movs	r0, #4
 8000b5c:	f000 ff9c 	bl	8001a98 <HAL_MPU_Enable>
}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <Error_Handler+0x8>

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b86:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b96:	4a08      	ldr	r2, [pc, #32]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c12:	f000 f9d1 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  return 1;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <_kill>:

int _kill(int pid, int sig)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c34:	f003 fd68 	bl	8004708 <__errno>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2216      	movs	r2, #22
 8000c3c:	601a      	str	r2, [r3, #0]
  return -1;
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <_exit>:

void _exit (int status)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c52:	f04f 31ff 	mov.w	r1, #4294967295
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ffe7 	bl	8000c2a <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <_exit+0x12>

08000c60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	e00a      	b.n	8000c88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c72:	f3af 8000 	nop.w
 8000c76:	4601      	mov	r1, r0
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	1c5a      	adds	r2, r3, #1
 8000c7c:	60ba      	str	r2, [r7, #8]
 8000c7e:	b2ca      	uxtb	r2, r1
 8000c80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	3301      	adds	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	dbf0      	blt.n	8000c72 <_read+0x12>
  }

  return len;
 8000c90:	687b      	ldr	r3, [r7, #4]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	60f8      	str	r0, [r7, #12]
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	e009      	b.n	8000cc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	60ba      	str	r2, [r7, #8]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	dbf1      	blt.n	8000cac <_write+0x12>
  }
  return len;
 8000cc8:	687b      	ldr	r3, [r7, #4]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <_close>:

int _close(int file)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cfa:	605a      	str	r2, [r3, #4]
  return 0;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <_isatty>:

int _isatty(int file)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d12:	2301      	movs	r3, #1
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d44:	4a14      	ldr	r2, [pc, #80]	@ (8000d98 <_sbrk+0x5c>)
 8000d46:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <_sbrk+0x60>)
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d50:	4b13      	ldr	r3, [pc, #76]	@ (8000da0 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d58:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <_sbrk+0x64>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	@ (8000da4 <_sbrk+0x68>)
 8000d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5e:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d207      	bcs.n	8000d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d6c:	f003 fccc 	bl	8004708 <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	220c      	movs	r2, #12
 8000d74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7a:	e009      	b.n	8000d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d82:	4b07      	ldr	r3, [pc, #28]	@ (8000da0 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	4a05      	ldr	r2, [pc, #20]	@ (8000da0 <_sbrk+0x64>)
 8000d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20080000 	.word	0x20080000
 8000d9c:	00000400 	.word	0x00000400
 8000da0:	200002b4 	.word	0x200002b4
 8000da4:	20000490 	.word	0x20000490

08000da8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dac:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <SystemInit+0x20>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000db2:	4a05      	ldr	r2, [pc, #20]	@ (8000dc8 <SystemInit+0x20>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000dd2:	4a15      	ldr	r2, [pc, #84]	@ (8000e28 <MX_USART3_UART_Init+0x5c>)
 8000dd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dd6:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000dd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ddc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dde:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000df2:	220c      	movs	r2, #12
 8000df4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e02:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <MX_USART3_UART_Init+0x58>)
 8000e10:	f002 f974 	bl	80030fc <HAL_UART_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e1a:	f7ff fea5 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200002b8 	.word	0x200002b8
 8000e28:	40004800 	.word	0x40004800

08000e2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b0ae      	sub	sp, #184	@ 0xb8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2290      	movs	r2, #144	@ 0x90
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f003 fc08 	bl	8004662 <memset>
  if(uartHandle->Instance==USART3)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a22      	ldr	r2, [pc, #136]	@ (8000ee0 <HAL_UART_MspInit+0xb4>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d13c      	bne.n	8000ed6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e60:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f001 fd1e 	bl	80028ac <HAL_RCCEx_PeriphCLKConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e76:	f7ff fe77 	bl	8000b68 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <HAL_UART_MspInit+0xb8>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7e:	4a19      	ldr	r2, [pc, #100]	@ (8000ee4 <HAL_UART_MspInit+0xb8>)
 8000e80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e86:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <HAL_UART_MspInit+0xb8>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e92:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <HAL_UART_MspInit+0xb8>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	4a13      	ldr	r2, [pc, #76]	@ (8000ee4 <HAL_UART_MspInit+0xb8>)
 8000e98:	f043 0308 	orr.w	r3, r3, #8
 8000e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <HAL_UART_MspInit+0xb8>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	f003 0308 	and.w	r3, r3, #8
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eaa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ec4:	2307      	movs	r3, #7
 8000ec6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eca:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <HAL_UART_MspInit+0xbc>)
 8000ed2:	f000 fe41 	bl	8001b58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	37b8      	adds	r7, #184	@ 0xb8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40004800 	.word	0x40004800
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020c00 	.word	0x40020c00

08000eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000eec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ef0:	f7ff ff5a 	bl	8000da8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef4:	480c      	ldr	r0, [pc, #48]	@ (8000f28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ef6:	490d      	ldr	r1, [pc, #52]	@ (8000f2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f1a:	f003 fbfb 	bl	8004714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1e:	f7ff fcb7 	bl	8000890 <main>
  bx  lr    
 8000f22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f24:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f2c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000f30:	08006b10 	.word	0x08006b10
  ldr r2, =_sbss
 8000f34:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000f38:	20000490 	.word	0x20000490

08000f3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC_IRQHandler>

08000f3e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f42:	2003      	movs	r0, #3
 8000f44:	f000 fd5c 	bl	8001a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f48:	200f      	movs	r0, #15
 8000f4a:	f000 f805 	bl	8000f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4e:	f7ff fe11 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <HAL_InitTick+0x54>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <HAL_InitTick+0x58>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fd69 	bl	8001a4e <HAL_SYSTICK_Config>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00e      	b.n	8000fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d80a      	bhi.n	8000fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f000 fd3f 	bl	8001a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f98:	4a06      	ldr	r2, [pc, #24]	@ (8000fb4 <HAL_InitTick+0x5c>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e000      	b.n	8000fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <HAL_IncTick+0x20>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_IncTick+0x24>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a04      	ldr	r2, [pc, #16]	@ (8000fdc <HAL_IncTick+0x24>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000340 	.word	0x20000340

08000fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	@ (8000ff4 <HAL_GetTick+0x14>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000340 	.word	0x20000340

08000ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001000:	f7ff ffee 	bl	8000fe0 <HAL_GetTick>
 8001004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001010:	d005      	beq.n	800101e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001012:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <HAL_Delay+0x44>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4413      	add	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800101e:	bf00      	nop
 8001020:	f7ff ffde 	bl	8000fe0 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	429a      	cmp	r2, r3
 800102e:	d8f7      	bhi.n	8001020 <HAL_Delay+0x28>
  {
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008

08001040 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001048:	2300      	movs	r3, #0
 800104a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e031      	b.n	80010ba <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	2b00      	cmp	r3, #0
 800105c:	d109      	bne.n	8001072 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff fb0c 	bl	800067c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	2b00      	cmp	r3, #0
 800107c:	d116      	bne.n	80010ac <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001082:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <HAL_ADC_Init+0x84>)
 8001084:	4013      	ands	r3, r2
 8001086:	f043 0202 	orr.w	r2, r3, #2
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 fb0a 	bl	80016a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109e:	f023 0303 	bic.w	r3, r3, #3
 80010a2:	f043 0201 	orr.w	r2, r3, #1
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80010aa:	e001      	b.n	80010b0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	ffffeefd 	.word	0xffffeefd

080010c8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d101      	bne.n	80010e2 <HAL_ADC_Start+0x1a>
 80010de:	2302      	movs	r3, #2
 80010e0:	e0ad      	b.n	800123e <HAL_ADC_Start+0x176>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d018      	beq.n	800112a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f042 0201 	orr.w	r2, r2, #1
 8001106:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001108:	4b50      	ldr	r3, [pc, #320]	@ (800124c <HAL_ADC_Start+0x184>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a50      	ldr	r2, [pc, #320]	@ (8001250 <HAL_ADC_Start+0x188>)
 800110e:	fba2 2303 	umull	r2, r3, r2, r3
 8001112:	0c9a      	lsrs	r2, r3, #18
 8001114:	4613      	mov	r3, r2
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4413      	add	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800111c:	e002      	b.n	8001124 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3b01      	subs	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f9      	bne.n	800111e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b01      	cmp	r3, #1
 8001136:	d175      	bne.n	8001224 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800113c:	4b45      	ldr	r3, [pc, #276]	@ (8001254 <HAL_ADC_Start+0x18c>)
 800113e:	4013      	ands	r3, r2
 8001140:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001152:	2b00      	cmp	r3, #0
 8001154:	d007      	beq.n	8001166 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800115e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800116e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001172:	d106      	bne.n	8001182 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001178:	f023 0206 	bic.w	r2, r3, #6
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001180:	e002      	b.n	8001188 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001198:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800119a:	4b2f      	ldr	r3, [pc, #188]	@ (8001258 <HAL_ADC_Start+0x190>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 031f 	and.w	r3, r3, #31
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10f      	bne.n	80011c6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d143      	bne.n	800123c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	e03a      	b.n	800123c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a24      	ldr	r2, [pc, #144]	@ (800125c <HAL_ADC_Start+0x194>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d10e      	bne.n	80011ee <HAL_ADC_Start+0x126>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d107      	bne.n	80011ee <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80011ec:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80011ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <HAL_ADC_Start+0x190>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0310 	and.w	r3, r3, #16
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d120      	bne.n	800123c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a18      	ldr	r2, [pc, #96]	@ (8001260 <HAL_ADC_Start+0x198>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d11b      	bne.n	800123c <HAL_ADC_Start+0x174>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d114      	bne.n	800123c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	e00b      	b.n	800123c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001228:	f043 0210 	orr.w	r2, r3, #16
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001234:	f043 0201 	orr.w	r2, r3, #1
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000000 	.word	0x20000000
 8001250:	431bde83 	.word	0x431bde83
 8001254:	fffff8fe 	.word	0xfffff8fe
 8001258:	40012300 	.word	0x40012300
 800125c:	40012000 	.word	0x40012000
 8001260:	40012200 	.word	0x40012200

08001264 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001272:	2b01      	cmp	r3, #1
 8001274:	d101      	bne.n	800127a <HAL_ADC_Stop+0x16>
 8001276:	2302      	movs	r3, #2
 8001278:	e01f      	b.n	80012ba <HAL_ADC_Stop+0x56>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 0201 	bic.w	r2, r2, #1
 8001290:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b00      	cmp	r3, #0
 800129e:	d107      	bne.n	80012b0 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012a4:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <HAL_ADC_Stop+0x64>)
 80012a6:	4013      	ands	r3, r2
 80012a8:	f043 0201 	orr.w	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	ffffeefe 	.word	0xffffeefe

080012cc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012e8:	d113      	bne.n	8001312 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012f8:	d10b      	bne.n	8001312 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	f043 0220 	orr.w	r2, r3, #32
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e063      	b.n	80013da <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001312:	f7ff fe65 	bl	8000fe0 <HAL_GetTick>
 8001316:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001318:	e021      	b.n	800135e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001320:	d01d      	beq.n	800135e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d007      	beq.n	8001338 <HAL_ADC_PollForConversion+0x6c>
 8001328:	f7ff fe5a 	bl	8000fe0 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	d212      	bcs.n	800135e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b02      	cmp	r3, #2
 8001344:	d00b      	beq.n	800135e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	f043 0204 	orr.w	r2, r3, #4
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e03d      	b.n	80013da <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b02      	cmp	r3, #2
 800136a:	d1d6      	bne.n	800131a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f06f 0212 	mvn.w	r2, #18
 8001374:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d123      	bne.n	80013d8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001394:	2b00      	cmp	r3, #0
 8001396:	d11f      	bne.n	80013d8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800139e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d006      	beq.n	80013b4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d111      	bne.n	80013d8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d105      	bne.n	80013d8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d0:	f043 0201 	orr.w	r2, r3, #1
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001410:	2b01      	cmp	r3, #1
 8001412:	d101      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x1c>
 8001414:	2302      	movs	r3, #2
 8001416:	e136      	b.n	8001686 <HAL_ADC_ConfigChannel+0x28a>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b09      	cmp	r3, #9
 8001426:	d93a      	bls.n	800149e <HAL_ADC_ConfigChannel+0xa2>
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001430:	d035      	beq.n	800149e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68d9      	ldr	r1, [r3, #12]
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	b29b      	uxth	r3, r3
 800143e:	461a      	mov	r2, r3
 8001440:	4613      	mov	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4413      	add	r3, r2
 8001446:	3b1e      	subs	r3, #30
 8001448:	2207      	movs	r2, #7
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	400a      	ands	r2, r1
 8001456:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a8d      	ldr	r2, [pc, #564]	@ (8001694 <HAL_ADC_ConfigChannel+0x298>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d10a      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68d9      	ldr	r1, [r3, #12]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	061a      	lsls	r2, r3, #24
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001476:	e035      	b.n	80014e4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68d9      	ldr	r1, [r3, #12]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	b29b      	uxth	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	4603      	mov	r3, r0
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4403      	add	r3, r0
 8001490:	3b1e      	subs	r3, #30
 8001492:	409a      	lsls	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800149c:	e022      	b.n	80014e4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6919      	ldr	r1, [r3, #16]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	461a      	mov	r2, r3
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	2207      	movs	r2, #7
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43da      	mvns	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	400a      	ands	r2, r1
 80014c0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6919      	ldr	r1, [r3, #16]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	4603      	mov	r3, r0
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4403      	add	r3, r0
 80014da:	409a      	lsls	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b06      	cmp	r3, #6
 80014ea:	d824      	bhi.n	8001536 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	3b05      	subs	r3, #5
 80014fe:	221f      	movs	r2, #31
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43da      	mvns	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	400a      	ands	r2, r1
 800150c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	b29b      	uxth	r3, r3
 800151a:	4618      	mov	r0, r3
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	3b05      	subs	r3, #5
 8001528:	fa00 f203 	lsl.w	r2, r0, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	635a      	str	r2, [r3, #52]	@ 0x34
 8001534:	e04c      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b0c      	cmp	r3, #12
 800153c:	d824      	bhi.n	8001588 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	3b23      	subs	r3, #35	@ 0x23
 8001550:	221f      	movs	r2, #31
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	400a      	ands	r2, r1
 800155e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	4618      	mov	r0, r3
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	3b23      	subs	r3, #35	@ 0x23
 800157a:	fa00 f203 	lsl.w	r2, r0, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	631a      	str	r2, [r3, #48]	@ 0x30
 8001586:	e023      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	3b41      	subs	r3, #65	@ 0x41
 800159a:	221f      	movs	r2, #31
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43da      	mvns	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	400a      	ands	r2, r1
 80015a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	3b41      	subs	r3, #65	@ 0x41
 80015c4:	fa00 f203 	lsl.w	r2, r0, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a30      	ldr	r2, [pc, #192]	@ (8001698 <HAL_ADC_ConfigChannel+0x29c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d10a      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x1f4>
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80015e2:	d105      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80015e4:	4b2d      	ldr	r3, [pc, #180]	@ (800169c <HAL_ADC_ConfigChannel+0x2a0>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	4a2c      	ldr	r2, [pc, #176]	@ (800169c <HAL_ADC_ConfigChannel+0x2a0>)
 80015ea:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80015ee:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a28      	ldr	r2, [pc, #160]	@ (8001698 <HAL_ADC_ConfigChannel+0x29c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d10f      	bne.n	800161a <HAL_ADC_ConfigChannel+0x21e>
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b12      	cmp	r3, #18
 8001600:	d10b      	bne.n	800161a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001602:	4b26      	ldr	r3, [pc, #152]	@ (800169c <HAL_ADC_ConfigChannel+0x2a0>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	4a25      	ldr	r2, [pc, #148]	@ (800169c <HAL_ADC_ConfigChannel+0x2a0>)
 8001608:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800160c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800160e:	4b23      	ldr	r3, [pc, #140]	@ (800169c <HAL_ADC_ConfigChannel+0x2a0>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4a22      	ldr	r2, [pc, #136]	@ (800169c <HAL_ADC_ConfigChannel+0x2a0>)
 8001614:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001618:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a1e      	ldr	r2, [pc, #120]	@ (8001698 <HAL_ADC_ConfigChannel+0x29c>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d12b      	bne.n	800167c <HAL_ADC_ConfigChannel+0x280>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a1a      	ldr	r2, [pc, #104]	@ (8001694 <HAL_ADC_ConfigChannel+0x298>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d003      	beq.n	8001636 <HAL_ADC_ConfigChannel+0x23a>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b11      	cmp	r3, #17
 8001634:	d122      	bne.n	800167c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001636:	4b19      	ldr	r3, [pc, #100]	@ (800169c <HAL_ADC_ConfigChannel+0x2a0>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4a18      	ldr	r2, [pc, #96]	@ (800169c <HAL_ADC_ConfigChannel+0x2a0>)
 800163c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001640:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001642:	4b16      	ldr	r3, [pc, #88]	@ (800169c <HAL_ADC_ConfigChannel+0x2a0>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4a15      	ldr	r2, [pc, #84]	@ (800169c <HAL_ADC_ConfigChannel+0x2a0>)
 8001648:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800164c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a10      	ldr	r2, [pc, #64]	@ (8001694 <HAL_ADC_ConfigChannel+0x298>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d111      	bne.n	800167c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001658:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <HAL_ADC_ConfigChannel+0x2a4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a11      	ldr	r2, [pc, #68]	@ (80016a4 <HAL_ADC_ConfigChannel+0x2a8>)
 800165e:	fba2 2303 	umull	r2, r3, r2, r3
 8001662:	0c9a      	lsrs	r2, r3, #18
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800166e:	e002      	b.n	8001676 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	3b01      	subs	r3, #1
 8001674:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1f9      	bne.n	8001670 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	10000012 	.word	0x10000012
 8001698:	40012000 	.word	0x40012000
 800169c:	40012300 	.word	0x40012300
 80016a0:	20000000 	.word	0x20000000
 80016a4:	431bde83 	.word	0x431bde83

080016a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80016b0:	4b78      	ldr	r3, [pc, #480]	@ (8001894 <ADC_Init+0x1ec>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4a77      	ldr	r2, [pc, #476]	@ (8001894 <ADC_Init+0x1ec>)
 80016b6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80016ba:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80016bc:	4b75      	ldr	r3, [pc, #468]	@ (8001894 <ADC_Init+0x1ec>)
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4973      	ldr	r1, [pc, #460]	@ (8001894 <ADC_Init+0x1ec>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6859      	ldr	r1, [r3, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	021a      	lsls	r2, r3, #8
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80016fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6859      	ldr	r1, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800171e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6899      	ldr	r1, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001736:	4a58      	ldr	r2, [pc, #352]	@ (8001898 <ADC_Init+0x1f0>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d022      	beq.n	8001782 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800174a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6899      	ldr	r1, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800176c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6899      	ldr	r1, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	e00f      	b.n	80017a2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001790:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0202 	bic.w	r2, r2, #2
 80017b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6899      	ldr	r1, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	005a      	lsls	r2, r3, #1
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d01b      	beq.n	8001808 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80017ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6859      	ldr	r1, [r3, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fa:	3b01      	subs	r3, #1
 80017fc:	035a      	lsls	r2, r3, #13
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	e007      	b.n	8001818 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001816:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001826:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	3b01      	subs	r3, #1
 8001834:	051a      	lsls	r2, r3, #20
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800184c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6899      	ldr	r1, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800185a:	025a      	lsls	r2, r3, #9
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001872:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6899      	ldr	r1, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	029a      	lsls	r2, r3, #10
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	609a      	str	r2, [r3, #8]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	40012300 	.word	0x40012300
 8001898:	0f000001 	.word	0x0f000001

0800189c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ac:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <__NVIC_SetPriorityGrouping+0x40>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018b8:	4013      	ands	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ca:	4a04      	ldr	r2, [pc, #16]	@ (80018dc <__NVIC_SetPriorityGrouping+0x40>)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	60d3      	str	r3, [r2, #12]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00
 80018e0:	05fa0000 	.word	0x05fa0000

080018e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e8:	4b04      	ldr	r3, [pc, #16]	@ (80018fc <__NVIC_GetPriorityGrouping+0x18>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	f003 0307 	and.w	r3, r3, #7
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	2b00      	cmp	r3, #0
 8001912:	db0a      	blt.n	800192a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	490c      	ldr	r1, [pc, #48]	@ (800194c <__NVIC_SetPriority+0x4c>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	0112      	lsls	r2, r2, #4
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	440b      	add	r3, r1
 8001924:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001928:	e00a      	b.n	8001940 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4908      	ldr	r1, [pc, #32]	@ (8001950 <__NVIC_SetPriority+0x50>)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	3b04      	subs	r3, #4
 8001938:	0112      	lsls	r2, r2, #4
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	440b      	add	r3, r1
 800193e:	761a      	strb	r2, [r3, #24]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000e100 	.word	0xe000e100
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	@ 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f1c3 0307 	rsb	r3, r3, #7
 800196e:	2b04      	cmp	r3, #4
 8001970:	bf28      	it	cs
 8001972:	2304      	movcs	r3, #4
 8001974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3304      	adds	r3, #4
 800197a:	2b06      	cmp	r3, #6
 800197c:	d902      	bls.n	8001984 <NVIC_EncodePriority+0x30>
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3b03      	subs	r3, #3
 8001982:	e000      	b.n	8001986 <NVIC_EncodePriority+0x32>
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	f04f 32ff 	mov.w	r2, #4294967295
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	401a      	ands	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800199c:	f04f 31ff 	mov.w	r1, #4294967295
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43d9      	mvns	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	4313      	orrs	r3, r2
         );
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3724      	adds	r7, #36	@ 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019cc:	d301      	bcc.n	80019d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00f      	b.n	80019f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d2:	4a0a      	ldr	r2, [pc, #40]	@ (80019fc <SysTick_Config+0x40>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019da:	210f      	movs	r1, #15
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f7ff ff8e 	bl	8001900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e4:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <SysTick_Config+0x40>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ea:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <SysTick_Config+0x40>)
 80019ec:	2207      	movs	r2, #7
 80019ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	e000e010 	.word	0xe000e010

08001a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff47 	bl	800189c <__NVIC_SetPriorityGrouping>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a28:	f7ff ff5c 	bl	80018e4 <__NVIC_GetPriorityGrouping>
 8001a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	6978      	ldr	r0, [r7, #20]
 8001a34:	f7ff ff8e 	bl	8001954 <NVIC_EncodePriority>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff5d 	bl	8001900 <__NVIC_SetPriority>
}
 8001a46:	bf00      	nop
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ffb0 	bl	80019bc <SysTick_Config>
 8001a5c:	4603      	mov	r3, r0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a6c:	f3bf 8f5f 	dmb	sy
}
 8001a70:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001a72:	4b07      	ldr	r3, [pc, #28]	@ (8001a90 <HAL_MPU_Disable+0x28>)
 8001a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a76:	4a06      	ldr	r2, [pc, #24]	@ (8001a90 <HAL_MPU_Disable+0x28>)
 8001a78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a7c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001a7e:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <HAL_MPU_Disable+0x2c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	605a      	str	r2, [r3, #4]
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000ed00 	.word	0xe000ed00
 8001a94:	e000ed90 	.word	0xe000ed90

08001a98 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad0 <HAL_MPU_Enable+0x38>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad4 <HAL_MPU_Enable+0x3c>)
 8001aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aae:	4a09      	ldr	r2, [pc, #36]	@ (8001ad4 <HAL_MPU_Enable+0x3c>)
 8001ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001ab6:	f3bf 8f4f 	dsb	sy
}
 8001aba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001abc:	f3bf 8f6f 	isb	sy
}
 8001ac0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000ed90 	.word	0xe000ed90
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	785a      	ldrb	r2, [r3, #1]
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b54 <HAL_MPU_ConfigRegion+0x7c>)
 8001ae6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b54 <HAL_MPU_ConfigRegion+0x7c>)
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	4a19      	ldr	r2, [pc, #100]	@ (8001b54 <HAL_MPU_ConfigRegion+0x7c>)
 8001aee:	f023 0301 	bic.w	r3, r3, #1
 8001af2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001af4:	4a17      	ldr	r2, [pc, #92]	@ (8001b54 <HAL_MPU_ConfigRegion+0x7c>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7b1b      	ldrb	r3, [r3, #12]
 8001b00:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	7adb      	ldrb	r3, [r3, #11]
 8001b06:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	7a9b      	ldrb	r3, [r3, #10]
 8001b0e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	7b5b      	ldrb	r3, [r3, #13]
 8001b16:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	7b9b      	ldrb	r3, [r3, #14]
 8001b1e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	7bdb      	ldrb	r3, [r3, #15]
 8001b26:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7a5b      	ldrb	r3, [r3, #9]
 8001b2e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7a1b      	ldrb	r3, [r3, #8]
 8001b36:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b38:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	7812      	ldrb	r2, [r2, #0]
 8001b3e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b40:	4a04      	ldr	r2, [pc, #16]	@ (8001b54 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b42:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b44:	6113      	str	r3, [r2, #16]
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000ed90 	.word	0xe000ed90

08001b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	@ 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	e175      	b.n	8001e64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b78:	2201      	movs	r2, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	f040 8164 	bne.w	8001e5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d005      	beq.n	8001bae <HAL_GPIO_Init+0x56>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d130      	bne.n	8001c10 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	2203      	movs	r2, #3
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001be4:	2201      	movs	r2, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 0201 	and.w	r2, r3, #1
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d017      	beq.n	8001c4c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d123      	bne.n	8001ca0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	08da      	lsrs	r2, r3, #3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3208      	adds	r2, #8
 8001c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	220f      	movs	r2, #15
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	08da      	lsrs	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3208      	adds	r2, #8
 8001c9a:	69b9      	ldr	r1, [r7, #24]
 8001c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	2203      	movs	r2, #3
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0203 	and.w	r2, r3, #3
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80be 	beq.w	8001e5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce2:	4b66      	ldr	r3, [pc, #408]	@ (8001e7c <HAL_GPIO_Init+0x324>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	4a65      	ldr	r2, [pc, #404]	@ (8001e7c <HAL_GPIO_Init+0x324>)
 8001ce8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cee:	4b63      	ldr	r3, [pc, #396]	@ (8001e7c <HAL_GPIO_Init+0x324>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001cfa:	4a61      	ldr	r2, [pc, #388]	@ (8001e80 <HAL_GPIO_Init+0x328>)
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	089b      	lsrs	r3, r3, #2
 8001d00:	3302      	adds	r3, #2
 8001d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	220f      	movs	r2, #15
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a58      	ldr	r2, [pc, #352]	@ (8001e84 <HAL_GPIO_Init+0x32c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d037      	beq.n	8001d96 <HAL_GPIO_Init+0x23e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a57      	ldr	r2, [pc, #348]	@ (8001e88 <HAL_GPIO_Init+0x330>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d031      	beq.n	8001d92 <HAL_GPIO_Init+0x23a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a56      	ldr	r2, [pc, #344]	@ (8001e8c <HAL_GPIO_Init+0x334>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d02b      	beq.n	8001d8e <HAL_GPIO_Init+0x236>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a55      	ldr	r2, [pc, #340]	@ (8001e90 <HAL_GPIO_Init+0x338>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d025      	beq.n	8001d8a <HAL_GPIO_Init+0x232>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a54      	ldr	r2, [pc, #336]	@ (8001e94 <HAL_GPIO_Init+0x33c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d01f      	beq.n	8001d86 <HAL_GPIO_Init+0x22e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a53      	ldr	r2, [pc, #332]	@ (8001e98 <HAL_GPIO_Init+0x340>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d019      	beq.n	8001d82 <HAL_GPIO_Init+0x22a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a52      	ldr	r2, [pc, #328]	@ (8001e9c <HAL_GPIO_Init+0x344>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d013      	beq.n	8001d7e <HAL_GPIO_Init+0x226>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a51      	ldr	r2, [pc, #324]	@ (8001ea0 <HAL_GPIO_Init+0x348>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00d      	beq.n	8001d7a <HAL_GPIO_Init+0x222>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a50      	ldr	r2, [pc, #320]	@ (8001ea4 <HAL_GPIO_Init+0x34c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d007      	beq.n	8001d76 <HAL_GPIO_Init+0x21e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4f      	ldr	r2, [pc, #316]	@ (8001ea8 <HAL_GPIO_Init+0x350>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d101      	bne.n	8001d72 <HAL_GPIO_Init+0x21a>
 8001d6e:	2309      	movs	r3, #9
 8001d70:	e012      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d72:	230a      	movs	r3, #10
 8001d74:	e010      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d76:	2308      	movs	r3, #8
 8001d78:	e00e      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d7a:	2307      	movs	r3, #7
 8001d7c:	e00c      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d7e:	2306      	movs	r3, #6
 8001d80:	e00a      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d82:	2305      	movs	r3, #5
 8001d84:	e008      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d86:	2304      	movs	r3, #4
 8001d88:	e006      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e004      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e002      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d96:	2300      	movs	r3, #0
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	f002 0203 	and.w	r2, r2, #3
 8001d9e:	0092      	lsls	r2, r2, #2
 8001da0:	4093      	lsls	r3, r2
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001da8:	4935      	ldr	r1, [pc, #212]	@ (8001e80 <HAL_GPIO_Init+0x328>)
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	089b      	lsrs	r3, r3, #2
 8001dae:	3302      	adds	r3, #2
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001db6:	4b3d      	ldr	r3, [pc, #244]	@ (8001eac <HAL_GPIO_Init+0x354>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dda:	4a34      	ldr	r2, [pc, #208]	@ (8001eac <HAL_GPIO_Init+0x354>)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de0:	4b32      	ldr	r3, [pc, #200]	@ (8001eac <HAL_GPIO_Init+0x354>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e04:	4a29      	ldr	r2, [pc, #164]	@ (8001eac <HAL_GPIO_Init+0x354>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e0a:	4b28      	ldr	r3, [pc, #160]	@ (8001eac <HAL_GPIO_Init+0x354>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8001eac <HAL_GPIO_Init+0x354>)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e34:	4b1d      	ldr	r3, [pc, #116]	@ (8001eac <HAL_GPIO_Init+0x354>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e58:	4a14      	ldr	r2, [pc, #80]	@ (8001eac <HAL_GPIO_Init+0x354>)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3301      	adds	r3, #1
 8001e62:	61fb      	str	r3, [r7, #28]
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	2b0f      	cmp	r3, #15
 8001e68:	f67f ae86 	bls.w	8001b78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	3724      	adds	r7, #36	@ 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40013800 	.word	0x40013800
 8001e84:	40020000 	.word	0x40020000
 8001e88:	40020400 	.word	0x40020400
 8001e8c:	40020800 	.word	0x40020800
 8001e90:	40020c00 	.word	0x40020c00
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40021400 	.word	0x40021400
 8001e9c:	40021800 	.word	0x40021800
 8001ea0:	40021c00 	.word	0x40021c00
 8001ea4:	40022000 	.word	0x40022000
 8001ea8:	40022400 	.word	0x40022400
 8001eac:	40013c00 	.word	0x40013c00

08001eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	807b      	strh	r3, [r7, #2]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ec0:	787b      	ldrb	r3, [r7, #1]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ecc:	e003      	b.n	8001ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ece:	887b      	ldrh	r3, [r7, #2]
 8001ed0:	041a      	lsls	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	619a      	str	r2, [r3, #24]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001eee:	4b23      	ldr	r3, [pc, #140]	@ (8001f7c <HAL_PWREx_EnableOverDrive+0x98>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	4a22      	ldr	r2, [pc, #136]	@ (8001f7c <HAL_PWREx_EnableOverDrive+0x98>)
 8001ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001efa:	4b20      	ldr	r3, [pc, #128]	@ (8001f7c <HAL_PWREx_EnableOverDrive+0x98>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f06:	4b1e      	ldr	r3, [pc, #120]	@ (8001f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1d      	ldr	r2, [pc, #116]	@ (8001f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f10:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f12:	f7ff f865 	bl	8000fe0 <HAL_GetTick>
 8001f16:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f18:	e009      	b.n	8001f2e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f1a:	f7ff f861 	bl	8000fe0 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f28:	d901      	bls.n	8001f2e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e022      	b.n	8001f74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f2e:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f3a:	d1ee      	bne.n	8001f1a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f3c:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0f      	ldr	r2, [pc, #60]	@ (8001f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f46:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f48:	f7ff f84a 	bl	8000fe0 <HAL_GetTick>
 8001f4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f4e:	e009      	b.n	8001f64 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f50:	f7ff f846 	bl	8000fe0 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f5e:	d901      	bls.n	8001f64 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e007      	b.n	8001f74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001f70:	d1ee      	bne.n	8001f50 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40007000 	.word	0x40007000

08001f84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e29b      	b.n	80024d2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 8087 	beq.w	80020b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fa8:	4b96      	ldr	r3, [pc, #600]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 030c 	and.w	r3, r3, #12
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d00c      	beq.n	8001fce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fb4:	4b93      	ldr	r3, [pc, #588]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d112      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x62>
 8001fc0:	4b90      	ldr	r3, [pc, #576]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fcc:	d10b      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fce:	4b8d      	ldr	r3, [pc, #564]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d06c      	beq.n	80020b4 <HAL_RCC_OscConfig+0x130>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d168      	bne.n	80020b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e275      	b.n	80024d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fee:	d106      	bne.n	8001ffe <HAL_RCC_OscConfig+0x7a>
 8001ff0:	4b84      	ldr	r3, [pc, #528]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a83      	ldr	r2, [pc, #524]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 8001ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	e02e      	b.n	800205c <HAL_RCC_OscConfig+0xd8>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0x9c>
 8002006:	4b7f      	ldr	r3, [pc, #508]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a7e      	ldr	r2, [pc, #504]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 800200c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	4b7c      	ldr	r3, [pc, #496]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a7b      	ldr	r2, [pc, #492]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 8002018:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e01d      	b.n	800205c <HAL_RCC_OscConfig+0xd8>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0xc0>
 800202a:	4b76      	ldr	r3, [pc, #472]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a75      	ldr	r2, [pc, #468]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 8002030:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	4b73      	ldr	r3, [pc, #460]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a72      	ldr	r2, [pc, #456]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 800203c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	e00b      	b.n	800205c <HAL_RCC_OscConfig+0xd8>
 8002044:	4b6f      	ldr	r3, [pc, #444]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a6e      	ldr	r2, [pc, #440]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 800204a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b6c      	ldr	r3, [pc, #432]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a6b      	ldr	r2, [pc, #428]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 8002056:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800205a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d013      	beq.n	800208c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7fe ffbc 	bl	8000fe0 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800206c:	f7fe ffb8 	bl	8000fe0 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	@ 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e229      	b.n	80024d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	4b61      	ldr	r3, [pc, #388]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0xe8>
 800208a:	e014      	b.n	80020b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7fe ffa8 	bl	8000fe0 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002094:	f7fe ffa4 	bl	8000fe0 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	@ 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e215      	b.n	80024d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a6:	4b57      	ldr	r3, [pc, #348]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x110>
 80020b2:	e000      	b.n	80020b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d069      	beq.n	8002196 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020c2:	4b50      	ldr	r3, [pc, #320]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00b      	beq.n	80020e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d11c      	bne.n	8002114 <HAL_RCC_OscConfig+0x190>
 80020da:	4b4a      	ldr	r3, [pc, #296]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d116      	bne.n	8002114 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e6:	4b47      	ldr	r3, [pc, #284]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <HAL_RCC_OscConfig+0x17a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d001      	beq.n	80020fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e1e9      	b.n	80024d2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fe:	4b41      	ldr	r3, [pc, #260]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	493d      	ldr	r1, [pc, #244]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002112:	e040      	b.n	8002196 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d023      	beq.n	8002164 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800211c:	4b39      	ldr	r3, [pc, #228]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a38      	ldr	r2, [pc, #224]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7fe ff5a 	bl	8000fe0 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002130:	f7fe ff56 	bl	8000fe0 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e1c7      	b.n	80024d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002142:	4b30      	ldr	r3, [pc, #192]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214e:	4b2d      	ldr	r3, [pc, #180]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4929      	ldr	r1, [pc, #164]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]
 8002162:	e018      	b.n	8002196 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002164:	4b27      	ldr	r3, [pc, #156]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a26      	ldr	r2, [pc, #152]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 800216a:	f023 0301 	bic.w	r3, r3, #1
 800216e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7fe ff36 	bl	8000fe0 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002178:	f7fe ff32 	bl	8000fe0 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e1a3      	b.n	80024d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218a:	4b1e      	ldr	r3, [pc, #120]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d038      	beq.n	8002214 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d019      	beq.n	80021de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021aa:	4b16      	ldr	r3, [pc, #88]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 80021ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021ae:	4a15      	ldr	r2, [pc, #84]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b6:	f7fe ff13 	bl	8000fe0 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021be:	f7fe ff0f 	bl	8000fe0 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e180      	b.n	80024d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 80021d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x23a>
 80021dc:	e01a      	b.n	8002214 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021de:	4b09      	ldr	r3, [pc, #36]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 80021e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021e2:	4a08      	ldr	r2, [pc, #32]	@ (8002204 <HAL_RCC_OscConfig+0x280>)
 80021e4:	f023 0301 	bic.w	r3, r3, #1
 80021e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ea:	f7fe fef9 	bl	8000fe0 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f0:	e00a      	b.n	8002208 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f2:	f7fe fef5 	bl	8000fe0 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d903      	bls.n	8002208 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e166      	b.n	80024d2 <HAL_RCC_OscConfig+0x54e>
 8002204:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002208:	4b92      	ldr	r3, [pc, #584]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 800220a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1ee      	bne.n	80021f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 80a4 	beq.w	800236a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002222:	4b8c      	ldr	r3, [pc, #560]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10d      	bne.n	800224a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	4b89      	ldr	r3, [pc, #548]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	4a88      	ldr	r2, [pc, #544]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 8002234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002238:	6413      	str	r3, [r2, #64]	@ 0x40
 800223a:	4b86      	ldr	r3, [pc, #536]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002246:	2301      	movs	r3, #1
 8002248:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800224a:	4b83      	ldr	r3, [pc, #524]	@ (8002458 <HAL_RCC_OscConfig+0x4d4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d118      	bne.n	8002288 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002256:	4b80      	ldr	r3, [pc, #512]	@ (8002458 <HAL_RCC_OscConfig+0x4d4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a7f      	ldr	r2, [pc, #508]	@ (8002458 <HAL_RCC_OscConfig+0x4d4>)
 800225c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002262:	f7fe febd 	bl	8000fe0 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800226a:	f7fe feb9 	bl	8000fe0 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b64      	cmp	r3, #100	@ 0x64
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e12a      	b.n	80024d2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800227c:	4b76      	ldr	r3, [pc, #472]	@ (8002458 <HAL_RCC_OscConfig+0x4d4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d106      	bne.n	800229e <HAL_RCC_OscConfig+0x31a>
 8002290:	4b70      	ldr	r3, [pc, #448]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 8002292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002294:	4a6f      	ldr	r2, [pc, #444]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6713      	str	r3, [r2, #112]	@ 0x70
 800229c:	e02d      	b.n	80022fa <HAL_RCC_OscConfig+0x376>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x33c>
 80022a6:	4b6b      	ldr	r3, [pc, #428]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 80022a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022aa:	4a6a      	ldr	r2, [pc, #424]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 80022ac:	f023 0301 	bic.w	r3, r3, #1
 80022b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80022b2:	4b68      	ldr	r3, [pc, #416]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b6:	4a67      	ldr	r2, [pc, #412]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 80022b8:	f023 0304 	bic.w	r3, r3, #4
 80022bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80022be:	e01c      	b.n	80022fa <HAL_RCC_OscConfig+0x376>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b05      	cmp	r3, #5
 80022c6:	d10c      	bne.n	80022e2 <HAL_RCC_OscConfig+0x35e>
 80022c8:	4b62      	ldr	r3, [pc, #392]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022cc:	4a61      	ldr	r2, [pc, #388]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 80022ce:	f043 0304 	orr.w	r3, r3, #4
 80022d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80022d4:	4b5f      	ldr	r3, [pc, #380]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 80022d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d8:	4a5e      	ldr	r2, [pc, #376]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6713      	str	r3, [r2, #112]	@ 0x70
 80022e0:	e00b      	b.n	80022fa <HAL_RCC_OscConfig+0x376>
 80022e2:	4b5c      	ldr	r3, [pc, #368]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 80022e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 80022e8:	f023 0301 	bic.w	r3, r3, #1
 80022ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ee:	4b59      	ldr	r3, [pc, #356]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f2:	4a58      	ldr	r2, [pc, #352]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 80022f4:	f023 0304 	bic.w	r3, r3, #4
 80022f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d015      	beq.n	800232e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002302:	f7fe fe6d 	bl	8000fe0 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002308:	e00a      	b.n	8002320 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230a:	f7fe fe69 	bl	8000fe0 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002318:	4293      	cmp	r3, r2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e0d8      	b.n	80024d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002320:	4b4c      	ldr	r3, [pc, #304]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0ee      	beq.n	800230a <HAL_RCC_OscConfig+0x386>
 800232c:	e014      	b.n	8002358 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232e:	f7fe fe57 	bl	8000fe0 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002334:	e00a      	b.n	800234c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002336:	f7fe fe53 	bl	8000fe0 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002344:	4293      	cmp	r3, r2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e0c2      	b.n	80024d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800234c:	4b41      	ldr	r3, [pc, #260]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 800234e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1ee      	bne.n	8002336 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002358:	7dfb      	ldrb	r3, [r7, #23]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d105      	bne.n	800236a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800235e:	4b3d      	ldr	r3, [pc, #244]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	4a3c      	ldr	r2, [pc, #240]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 8002364:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002368:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 80ae 	beq.w	80024d0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002374:	4b37      	ldr	r3, [pc, #220]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 030c 	and.w	r3, r3, #12
 800237c:	2b08      	cmp	r3, #8
 800237e:	d06d      	beq.n	800245c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d14b      	bne.n	8002420 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002388:	4b32      	ldr	r3, [pc, #200]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a31      	ldr	r2, [pc, #196]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 800238e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7fe fe24 	bl	8000fe0 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239c:	f7fe fe20 	bl	8000fe0 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e091      	b.n	80024d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ae:	4b29      	ldr	r3, [pc, #164]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69da      	ldr	r2, [r3, #28]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c8:	019b      	lsls	r3, r3, #6
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d0:	085b      	lsrs	r3, r3, #1
 80023d2:	3b01      	subs	r3, #1
 80023d4:	041b      	lsls	r3, r3, #16
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023dc:	061b      	lsls	r3, r3, #24
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e4:	071b      	lsls	r3, r3, #28
 80023e6:	491b      	ldr	r1, [pc, #108]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ec:	4b19      	ldr	r3, [pc, #100]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a18      	ldr	r2, [pc, #96]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 80023f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f8:	f7fe fdf2 	bl	8000fe0 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002400:	f7fe fdee 	bl	8000fe0 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e05f      	b.n	80024d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002412:	4b10      	ldr	r3, [pc, #64]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0x47c>
 800241e:	e057      	b.n	80024d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002420:	4b0c      	ldr	r3, [pc, #48]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0b      	ldr	r2, [pc, #44]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 8002426:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800242a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7fe fdd8 	bl	8000fe0 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002434:	f7fe fdd4 	bl	8000fe0 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e045      	b.n	80024d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002446:	4b03      	ldr	r3, [pc, #12]	@ (8002454 <HAL_RCC_OscConfig+0x4d0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x4b0>
 8002452:	e03d      	b.n	80024d0 <HAL_RCC_OscConfig+0x54c>
 8002454:	40023800 	.word	0x40023800
 8002458:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800245c:	4b1f      	ldr	r3, [pc, #124]	@ (80024dc <HAL_RCC_OscConfig+0x558>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d030      	beq.n	80024cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002474:	429a      	cmp	r2, r3
 8002476:	d129      	bne.n	80024cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002482:	429a      	cmp	r2, r3
 8002484:	d122      	bne.n	80024cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800248c:	4013      	ands	r3, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002492:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002494:	4293      	cmp	r3, r2
 8002496:	d119      	bne.n	80024cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a2:	085b      	lsrs	r3, r3, #1
 80024a4:	3b01      	subs	r3, #1
 80024a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d10f      	bne.n	80024cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d107      	bne.n	80024cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800

080024e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0d0      	b.n	800269a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024f8:	4b6a      	ldr	r3, [pc, #424]	@ (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d910      	bls.n	8002528 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002506:	4b67      	ldr	r3, [pc, #412]	@ (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f023 020f 	bic.w	r2, r3, #15
 800250e:	4965      	ldr	r1, [pc, #404]	@ (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	4313      	orrs	r3, r2
 8002514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002516:	4b63      	ldr	r3, [pc, #396]	@ (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d001      	beq.n	8002528 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0b8      	b.n	800269a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d020      	beq.n	8002576 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002540:	4b59      	ldr	r3, [pc, #356]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4a58      	ldr	r2, [pc, #352]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002546:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800254a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002558:	4b53      	ldr	r3, [pc, #332]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	4a52      	ldr	r2, [pc, #328]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 800255e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002562:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002564:	4b50      	ldr	r3, [pc, #320]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	494d      	ldr	r1, [pc, #308]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d040      	beq.n	8002604 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d107      	bne.n	800259a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258a:	4b47      	ldr	r3, [pc, #284]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d115      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e07f      	b.n	800269a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d107      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a2:	4b41      	ldr	r3, [pc, #260]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d109      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e073      	b.n	800269a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b2:	4b3d      	ldr	r3, [pc, #244]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e06b      	b.n	800269a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025c2:	4b39      	ldr	r3, [pc, #228]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f023 0203 	bic.w	r2, r3, #3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4936      	ldr	r1, [pc, #216]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d4:	f7fe fd04 	bl	8000fe0 <HAL_GetTick>
 80025d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025dc:	f7fe fd00 	bl	8000fe0 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e053      	b.n	800269a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f2:	4b2d      	ldr	r3, [pc, #180]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 020c 	and.w	r2, r3, #12
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	429a      	cmp	r2, r3
 8002602:	d1eb      	bne.n	80025dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002604:	4b27      	ldr	r3, [pc, #156]	@ (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d210      	bcs.n	8002634 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b24      	ldr	r3, [pc, #144]	@ (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 020f 	bic.w	r2, r3, #15
 800261a:	4922      	ldr	r1, [pc, #136]	@ (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b20      	ldr	r3, [pc, #128]	@ (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e032      	b.n	800269a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002640:	4b19      	ldr	r3, [pc, #100]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4916      	ldr	r1, [pc, #88]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 800264e:	4313      	orrs	r3, r2
 8002650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800265e:	4b12      	ldr	r3, [pc, #72]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	490e      	ldr	r1, [pc, #56]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002672:	f000 f821 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 8002676:	4602      	mov	r2, r0
 8002678:	4b0b      	ldr	r3, [pc, #44]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	490a      	ldr	r1, [pc, #40]	@ (80026ac <HAL_RCC_ClockConfig+0x1cc>)
 8002684:	5ccb      	ldrb	r3, [r1, r3]
 8002686:	fa22 f303 	lsr.w	r3, r2, r3
 800268a:	4a09      	ldr	r2, [pc, #36]	@ (80026b0 <HAL_RCC_ClockConfig+0x1d0>)
 800268c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800268e:	4b09      	ldr	r3, [pc, #36]	@ (80026b4 <HAL_RCC_ClockConfig+0x1d4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fc60 	bl	8000f58 <HAL_InitTick>

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40023c00 	.word	0x40023c00
 80026a8:	40023800 	.word	0x40023800
 80026ac:	08006778 	.word	0x08006778
 80026b0:	20000000 	.word	0x20000000
 80026b4:	20000004 	.word	0x20000004

080026b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026bc:	b090      	sub	sp, #64	@ 0x40
 80026be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80026c4:	2300      	movs	r3, #0
 80026c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026c8:	2300      	movs	r3, #0
 80026ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026d0:	4b59      	ldr	r3, [pc, #356]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x180>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 030c 	and.w	r3, r3, #12
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d00d      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x40>
 80026dc:	2b08      	cmp	r3, #8
 80026de:	f200 80a1 	bhi.w	8002824 <HAL_RCC_GetSysClockFreq+0x16c>
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0x34>
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d003      	beq.n	80026f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ea:	e09b      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026ec:	4b53      	ldr	r3, [pc, #332]	@ (800283c <HAL_RCC_GetSysClockFreq+0x184>)
 80026ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026f0:	e09b      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026f2:	4b53      	ldr	r3, [pc, #332]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x188>)
 80026f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026f6:	e098      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026f8:	4b4f      	ldr	r3, [pc, #316]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x180>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002700:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002702:	4b4d      	ldr	r3, [pc, #308]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x180>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d028      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800270e:	4b4a      	ldr	r3, [pc, #296]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x180>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	099b      	lsrs	r3, r3, #6
 8002714:	2200      	movs	r2, #0
 8002716:	623b      	str	r3, [r7, #32]
 8002718:	627a      	str	r2, [r7, #36]	@ 0x24
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002720:	2100      	movs	r1, #0
 8002722:	4b47      	ldr	r3, [pc, #284]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x188>)
 8002724:	fb03 f201 	mul.w	r2, r3, r1
 8002728:	2300      	movs	r3, #0
 800272a:	fb00 f303 	mul.w	r3, r0, r3
 800272e:	4413      	add	r3, r2
 8002730:	4a43      	ldr	r2, [pc, #268]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x188>)
 8002732:	fba0 1202 	umull	r1, r2, r0, r2
 8002736:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002738:	460a      	mov	r2, r1
 800273a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800273c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800273e:	4413      	add	r3, r2
 8002740:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002744:	2200      	movs	r2, #0
 8002746:	61bb      	str	r3, [r7, #24]
 8002748:	61fa      	str	r2, [r7, #28]
 800274a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800274e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002752:	f7fd fdcd 	bl	80002f0 <__aeabi_uldivmod>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4613      	mov	r3, r2
 800275c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800275e:	e053      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002760:	4b35      	ldr	r3, [pc, #212]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x180>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	099b      	lsrs	r3, r3, #6
 8002766:	2200      	movs	r2, #0
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	617a      	str	r2, [r7, #20]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002772:	f04f 0b00 	mov.w	fp, #0
 8002776:	4652      	mov	r2, sl
 8002778:	465b      	mov	r3, fp
 800277a:	f04f 0000 	mov.w	r0, #0
 800277e:	f04f 0100 	mov.w	r1, #0
 8002782:	0159      	lsls	r1, r3, #5
 8002784:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002788:	0150      	lsls	r0, r2, #5
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	ebb2 080a 	subs.w	r8, r2, sl
 8002792:	eb63 090b 	sbc.w	r9, r3, fp
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027aa:	ebb2 0408 	subs.w	r4, r2, r8
 80027ae:	eb63 0509 	sbc.w	r5, r3, r9
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	00eb      	lsls	r3, r5, #3
 80027bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027c0:	00e2      	lsls	r2, r4, #3
 80027c2:	4614      	mov	r4, r2
 80027c4:	461d      	mov	r5, r3
 80027c6:	eb14 030a 	adds.w	r3, r4, sl
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	eb45 030b 	adc.w	r3, r5, fp
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027de:	4629      	mov	r1, r5
 80027e0:	028b      	lsls	r3, r1, #10
 80027e2:	4621      	mov	r1, r4
 80027e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027e8:	4621      	mov	r1, r4
 80027ea:	028a      	lsls	r2, r1, #10
 80027ec:	4610      	mov	r0, r2
 80027ee:	4619      	mov	r1, r3
 80027f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027f2:	2200      	movs	r2, #0
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	60fa      	str	r2, [r7, #12]
 80027f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027fc:	f7fd fd78 	bl	80002f0 <__aeabi_uldivmod>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	4613      	mov	r3, r2
 8002806:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002808:	4b0b      	ldr	r3, [pc, #44]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x180>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	0c1b      	lsrs	r3, r3, #16
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	3301      	adds	r3, #1
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002818:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800281a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800281c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002820:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002822:	e002      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002824:	4b05      	ldr	r3, [pc, #20]	@ (800283c <HAL_RCC_GetSysClockFreq+0x184>)
 8002826:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800282c:	4618      	mov	r0, r3
 800282e:	3740      	adds	r7, #64	@ 0x40
 8002830:	46bd      	mov	sp, r7
 8002832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800
 800283c:	00f42400 	.word	0x00f42400
 8002840:	017d7840 	.word	0x017d7840

08002844 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002848:	4b03      	ldr	r3, [pc, #12]	@ (8002858 <HAL_RCC_GetHCLKFreq+0x14>)
 800284a:	681b      	ldr	r3, [r3, #0]
}
 800284c:	4618      	mov	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	20000000 	.word	0x20000000

0800285c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002860:	f7ff fff0 	bl	8002844 <HAL_RCC_GetHCLKFreq>
 8002864:	4602      	mov	r2, r0
 8002866:	4b05      	ldr	r3, [pc, #20]	@ (800287c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	0a9b      	lsrs	r3, r3, #10
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	4903      	ldr	r1, [pc, #12]	@ (8002880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002872:	5ccb      	ldrb	r3, [r1, r3]
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40023800 	.word	0x40023800
 8002880:	08006788 	.word	0x08006788

08002884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002888:	f7ff ffdc 	bl	8002844 <HAL_RCC_GetHCLKFreq>
 800288c:	4602      	mov	r2, r0
 800288e:	4b05      	ldr	r3, [pc, #20]	@ (80028a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	0b5b      	lsrs	r3, r3, #13
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	4903      	ldr	r1, [pc, #12]	@ (80028a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800289a:	5ccb      	ldrb	r3, [r1, r3]
 800289c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40023800 	.word	0x40023800
 80028a8:	08006788 	.word	0x08006788

080028ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d012      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028d4:	4b69      	ldr	r3, [pc, #420]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	4a68      	ldr	r2, [pc, #416]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028da:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80028de:	6093      	str	r3, [r2, #8]
 80028e0:	4b66      	ldr	r3, [pc, #408]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028e8:	4964      	ldr	r1, [pc, #400]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80028f6:	2301      	movs	r3, #1
 80028f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d017      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002906:	4b5d      	ldr	r3, [pc, #372]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002908:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800290c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002914:	4959      	ldr	r1, [pc, #356]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002920:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002924:	d101      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002926:	2301      	movs	r3, #1
 8002928:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002932:	2301      	movs	r3, #1
 8002934:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d017      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002942:	4b4e      	ldr	r3, [pc, #312]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002944:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002948:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002950:	494a      	ldr	r1, [pc, #296]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002960:	d101      	bne.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002962:	2301      	movs	r3, #1
 8002964:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800296e:	2301      	movs	r3, #1
 8002970:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800297e:	2301      	movs	r3, #1
 8002980:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0320 	and.w	r3, r3, #32
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 808b 	beq.w	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002990:	4b3a      	ldr	r3, [pc, #232]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002994:	4a39      	ldr	r2, [pc, #228]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002996:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800299a:	6413      	str	r3, [r2, #64]	@ 0x40
 800299c:	4b37      	ldr	r3, [pc, #220]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029a8:	4b35      	ldr	r3, [pc, #212]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a34      	ldr	r2, [pc, #208]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b4:	f7fe fb14 	bl	8000fe0 <HAL_GetTick>
 80029b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029bc:	f7fe fb10 	bl	8000fe0 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	@ 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e38f      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029da:	4b28      	ldr	r3, [pc, #160]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d035      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d02e      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029f8:	4b20      	ldr	r3, [pc, #128]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a00:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a02:	4b1e      	ldr	r3, [pc, #120]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a06:	4a1d      	ldr	r2, [pc, #116]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a0c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a12:	4a1a      	ldr	r2, [pc, #104]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a18:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a1a:	4a18      	ldr	r2, [pc, #96]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a20:	4b16      	ldr	r3, [pc, #88]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d114      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fad8 	bl	8000fe0 <HAL_GetTick>
 8002a30:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a32:	e00a      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a34:	f7fe fad4 	bl	8000fe0 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e351      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0ee      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a62:	d111      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a64:	4b05      	ldr	r3, [pc, #20]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a70:	4b04      	ldr	r3, [pc, #16]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a72:	400b      	ands	r3, r1
 8002a74:	4901      	ldr	r1, [pc, #4]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
 8002a7a:	e00b      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40007000 	.word	0x40007000
 8002a84:	0ffffcff 	.word	0x0ffffcff
 8002a88:	4bac      	ldr	r3, [pc, #688]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4aab      	ldr	r2, [pc, #684]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002a92:	6093      	str	r3, [r2, #8]
 8002a94:	4ba9      	ldr	r3, [pc, #676]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa0:	49a6      	ldr	r1, [pc, #664]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d010      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ab2:	4ba2      	ldr	r3, [pc, #648]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ab8:	4aa0      	ldr	r2, [pc, #640]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002abe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002ac2:	4b9e      	ldr	r3, [pc, #632]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002acc:	499b      	ldr	r1, [pc, #620]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ae0:	4b96      	ldr	r3, [pc, #600]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002aee:	4993      	ldr	r1, [pc, #588]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b02:	4b8e      	ldr	r3, [pc, #568]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b10:	498a      	ldr	r1, [pc, #552]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b24:	4b85      	ldr	r3, [pc, #532]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b32:	4982      	ldr	r1, [pc, #520]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b46:	4b7d      	ldr	r3, [pc, #500]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b54:	4979      	ldr	r1, [pc, #484]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b68:	4b74      	ldr	r3, [pc, #464]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6e:	f023 0203 	bic.w	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b76:	4971      	ldr	r1, [pc, #452]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b8a:	4b6c      	ldr	r3, [pc, #432]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b90:	f023 020c 	bic.w	r2, r3, #12
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b98:	4968      	ldr	r1, [pc, #416]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00a      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bac:	4b63      	ldr	r3, [pc, #396]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bba:	4960      	ldr	r1, [pc, #384]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bce:	4b5b      	ldr	r3, [pc, #364]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bdc:	4957      	ldr	r1, [pc, #348]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bf0:	4b52      	ldr	r3, [pc, #328]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfe:	494f      	ldr	r1, [pc, #316]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c12:	4b4a      	ldr	r3, [pc, #296]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c18:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c20:	4946      	ldr	r1, [pc, #280]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00a      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c34:	4b41      	ldr	r3, [pc, #260]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c3a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c42:	493e      	ldr	r1, [pc, #248]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c56:	4b39      	ldr	r3, [pc, #228]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c5c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c64:	4935      	ldr	r1, [pc, #212]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00a      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c78:	4b30      	ldr	r3, [pc, #192]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c86:	492d      	ldr	r1, [pc, #180]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d011      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c9a:	4b28      	ldr	r3, [pc, #160]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ca8:	4924      	ldr	r1, [pc, #144]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cb8:	d101      	bne.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cda:	4b18      	ldr	r3, [pc, #96]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ce8:	4914      	ldr	r1, [pc, #80]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00b      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d02:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d0c:	490b      	ldr	r1, [pc, #44]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00f      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002d20:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d26:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d30:	4902      	ldr	r1, [pc, #8]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d38:	e002      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00b      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d4c:	4b8a      	ldr	r3, [pc, #552]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d52:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d5c:	4986      	ldr	r1, [pc, #536]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00b      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d70:	4b81      	ldr	r3, [pc, #516]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d76:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d80:	497d      	ldr	r1, [pc, #500]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d006      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 80d6 	beq.w	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d9c:	4b76      	ldr	r3, [pc, #472]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a75      	ldr	r2, [pc, #468]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002da2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002da6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da8:	f7fe f91a 	bl	8000fe0 <HAL_GetTick>
 8002dac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002db0:	f7fe f916 	bl	8000fe0 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	@ 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e195      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dc2:	4b6d      	ldr	r3, [pc, #436]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d021      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d11d      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002de2:	4b65      	ldr	r3, [pc, #404]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002de8:	0c1b      	lsrs	r3, r3, #16
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002df0:	4b61      	ldr	r3, [pc, #388]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002df6:	0e1b      	lsrs	r3, r3, #24
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	019a      	lsls	r2, r3, #6
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	041b      	lsls	r3, r3, #16
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	061b      	lsls	r3, r3, #24
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	071b      	lsls	r3, r3, #28
 8002e16:	4958      	ldr	r1, [pc, #352]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d004      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d02e      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e48:	d129      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e4a:	4b4b      	ldr	r3, [pc, #300]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e50:	0c1b      	lsrs	r3, r3, #16
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e58:	4b47      	ldr	r3, [pc, #284]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e5e:	0f1b      	lsrs	r3, r3, #28
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	019a      	lsls	r2, r3, #6
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	041b      	lsls	r3, r3, #16
 8002e70:	431a      	orrs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	061b      	lsls	r3, r3, #24
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	071b      	lsls	r3, r3, #28
 8002e7e:	493e      	ldr	r1, [pc, #248]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e86:	4b3c      	ldr	r3, [pc, #240]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e8c:	f023 021f 	bic.w	r2, r3, #31
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e94:	3b01      	subs	r3, #1
 8002e96:	4938      	ldr	r1, [pc, #224]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d01d      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002eaa:	4b33      	ldr	r3, [pc, #204]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eb0:	0e1b      	lsrs	r3, r3, #24
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002eb8:	4b2f      	ldr	r3, [pc, #188]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ebe:	0f1b      	lsrs	r3, r3, #28
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	019a      	lsls	r2, r3, #6
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	041b      	lsls	r3, r3, #16
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	061b      	lsls	r3, r3, #24
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	071b      	lsls	r3, r3, #28
 8002ede:	4926      	ldr	r1, [pc, #152]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d011      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	019a      	lsls	r2, r3, #6
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	041b      	lsls	r3, r3, #16
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	061b      	lsls	r3, r3, #24
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	071b      	lsls	r3, r3, #28
 8002f0e:	491a      	ldr	r1, [pc, #104]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f16:	4b18      	ldr	r3, [pc, #96]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a17      	ldr	r2, [pc, #92]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f22:	f7fe f85d 	bl	8000fe0 <HAL_GetTick>
 8002f26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f2a:	f7fe f859 	bl	8000fe0 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b64      	cmp	r3, #100	@ 0x64
 8002f36:	d901      	bls.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e0d8      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	f040 80ce 	bne.w	80030ec <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f50:	4b09      	ldr	r3, [pc, #36]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a08      	ldr	r2, [pc, #32]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f5c:	f7fe f840 	bl	8000fe0 <HAL_GetTick>
 8002f60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f62:	e00b      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f64:	f7fe f83c 	bl	8000fe0 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	@ 0x64
 8002f70:	d904      	bls.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e0bb      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f76:	bf00      	nop
 8002f78:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f7c:	4b5e      	ldr	r3, [pc, #376]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f88:	d0ec      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d009      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d02e      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d12a      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fb2:	4b51      	ldr	r3, [pc, #324]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fc0:	4b4d      	ldr	r3, [pc, #308]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc6:	0f1b      	lsrs	r3, r3, #28
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	019a      	lsls	r2, r3, #6
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	041b      	lsls	r3, r3, #16
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	061b      	lsls	r3, r3, #24
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	071b      	lsls	r3, r3, #28
 8002fe6:	4944      	ldr	r1, [pc, #272]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002fee:	4b42      	ldr	r3, [pc, #264]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ff4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	021b      	lsls	r3, r3, #8
 8003000:	493d      	ldr	r1, [pc, #244]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003002:	4313      	orrs	r3, r2
 8003004:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d022      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003018:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800301c:	d11d      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800301e:	4b36      	ldr	r3, [pc, #216]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003024:	0e1b      	lsrs	r3, r3, #24
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800302c:	4b32      	ldr	r3, [pc, #200]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800302e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003032:	0f1b      	lsrs	r3, r3, #28
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	019a      	lsls	r2, r3, #6
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	041b      	lsls	r3, r3, #16
 8003046:	431a      	orrs	r2, r3
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	061b      	lsls	r3, r3, #24
 800304c:	431a      	orrs	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	071b      	lsls	r3, r3, #28
 8003052:	4929      	ldr	r1, [pc, #164]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d028      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003066:	4b24      	ldr	r3, [pc, #144]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800306c:	0e1b      	lsrs	r3, r3, #24
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003074:	4b20      	ldr	r3, [pc, #128]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307a:	0c1b      	lsrs	r3, r3, #16
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	019a      	lsls	r2, r3, #6
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	041b      	lsls	r3, r3, #16
 800308c:	431a      	orrs	r2, r3
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	061b      	lsls	r3, r3, #24
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	071b      	lsls	r3, r3, #28
 800309a:	4917      	ldr	r1, [pc, #92]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80030a2:	4b15      	ldr	r3, [pc, #84]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b0:	4911      	ldr	r1, [pc, #68]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030b8:	4b0f      	ldr	r3, [pc, #60]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a0e      	ldr	r2, [pc, #56]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c4:	f7fd ff8c 	bl	8000fe0 <HAL_GetTick>
 80030c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030cc:	f7fd ff88 	bl	8000fe0 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	@ 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e007      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030de:	4b06      	ldr	r3, [pc, #24]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030ea:	d1ef      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3720      	adds	r7, #32
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40023800 	.word	0x40023800

080030fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e040      	b.n	8003190 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003112:	2b00      	cmp	r3, #0
 8003114:	d106      	bne.n	8003124 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fd fe84 	bl	8000e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2224      	movs	r2, #36	@ 0x24
 8003128:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0201 	bic.w	r2, r2, #1
 8003138:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fb16 	bl	8003774 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f8af 	bl	80032ac <UART_SetConfig>
 800314e:	4603      	mov	r3, r0
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e01b      	b.n	8003190 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003166:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003176:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fb95 	bl	80038b8 <UART_CheckIdleState>
 800318e:	4603      	mov	r3, r0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b08a      	sub	sp, #40	@ 0x28
 800319c:	af02      	add	r7, sp, #8
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	4613      	mov	r3, r2
 80031a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031ac:	2b20      	cmp	r3, #32
 80031ae:	d177      	bne.n	80032a0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <HAL_UART_Transmit+0x24>
 80031b6:	88fb      	ldrh	r3, [r7, #6]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e070      	b.n	80032a2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2221      	movs	r2, #33	@ 0x21
 80031cc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031ce:	f7fd ff07 	bl	8000fe0 <HAL_GetTick>
 80031d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	88fa      	ldrh	r2, [r7, #6]
 80031d8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	88fa      	ldrh	r2, [r7, #6]
 80031e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ec:	d108      	bne.n	8003200 <HAL_UART_Transmit+0x68>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d104      	bne.n	8003200 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	e003      	b.n	8003208 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003204:	2300      	movs	r3, #0
 8003206:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003208:	e02f      	b.n	800326a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2200      	movs	r2, #0
 8003212:	2180      	movs	r1, #128	@ 0x80
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 fbf7 	bl	8003a08 <UART_WaitOnFlagUntilTimeout>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d004      	beq.n	800322a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e03b      	b.n	80032a2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10b      	bne.n	8003248 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	461a      	mov	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800323e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	3302      	adds	r3, #2
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	e007      	b.n	8003258 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	781a      	ldrb	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3301      	adds	r3, #1
 8003256:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003270:	b29b      	uxth	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1c9      	bne.n	800320a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2200      	movs	r2, #0
 800327e:	2140      	movs	r1, #64	@ 0x40
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 fbc1 	bl	8003a08 <UART_WaitOnFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d004      	beq.n	8003296 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e005      	b.n	80032a2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2220      	movs	r2, #32
 800329a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	e000      	b.n	80032a2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80032a0:	2302      	movs	r3, #2
  }
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3720      	adds	r7, #32
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	4ba6      	ldr	r3, [pc, #664]	@ (8003570 <UART_SetConfig+0x2c4>)
 80032d8:	4013      	ands	r3, r2
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6812      	ldr	r2, [r2, #0]
 80032de:	6979      	ldr	r1, [r7, #20]
 80032e0:	430b      	orrs	r3, r1
 80032e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	430a      	orrs	r2, r1
 800331c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a94      	ldr	r2, [pc, #592]	@ (8003574 <UART_SetConfig+0x2c8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d120      	bne.n	800336a <UART_SetConfig+0xbe>
 8003328:	4b93      	ldr	r3, [pc, #588]	@ (8003578 <UART_SetConfig+0x2cc>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	2b03      	cmp	r3, #3
 8003334:	d816      	bhi.n	8003364 <UART_SetConfig+0xb8>
 8003336:	a201      	add	r2, pc, #4	@ (adr r2, 800333c <UART_SetConfig+0x90>)
 8003338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333c:	0800334d 	.word	0x0800334d
 8003340:	08003359 	.word	0x08003359
 8003344:	08003353 	.word	0x08003353
 8003348:	0800335f 	.word	0x0800335f
 800334c:	2301      	movs	r3, #1
 800334e:	77fb      	strb	r3, [r7, #31]
 8003350:	e150      	b.n	80035f4 <UART_SetConfig+0x348>
 8003352:	2302      	movs	r3, #2
 8003354:	77fb      	strb	r3, [r7, #31]
 8003356:	e14d      	b.n	80035f4 <UART_SetConfig+0x348>
 8003358:	2304      	movs	r3, #4
 800335a:	77fb      	strb	r3, [r7, #31]
 800335c:	e14a      	b.n	80035f4 <UART_SetConfig+0x348>
 800335e:	2308      	movs	r3, #8
 8003360:	77fb      	strb	r3, [r7, #31]
 8003362:	e147      	b.n	80035f4 <UART_SetConfig+0x348>
 8003364:	2310      	movs	r3, #16
 8003366:	77fb      	strb	r3, [r7, #31]
 8003368:	e144      	b.n	80035f4 <UART_SetConfig+0x348>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a83      	ldr	r2, [pc, #524]	@ (800357c <UART_SetConfig+0x2d0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d132      	bne.n	80033da <UART_SetConfig+0x12e>
 8003374:	4b80      	ldr	r3, [pc, #512]	@ (8003578 <UART_SetConfig+0x2cc>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800337a:	f003 030c 	and.w	r3, r3, #12
 800337e:	2b0c      	cmp	r3, #12
 8003380:	d828      	bhi.n	80033d4 <UART_SetConfig+0x128>
 8003382:	a201      	add	r2, pc, #4	@ (adr r2, 8003388 <UART_SetConfig+0xdc>)
 8003384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003388:	080033bd 	.word	0x080033bd
 800338c:	080033d5 	.word	0x080033d5
 8003390:	080033d5 	.word	0x080033d5
 8003394:	080033d5 	.word	0x080033d5
 8003398:	080033c9 	.word	0x080033c9
 800339c:	080033d5 	.word	0x080033d5
 80033a0:	080033d5 	.word	0x080033d5
 80033a4:	080033d5 	.word	0x080033d5
 80033a8:	080033c3 	.word	0x080033c3
 80033ac:	080033d5 	.word	0x080033d5
 80033b0:	080033d5 	.word	0x080033d5
 80033b4:	080033d5 	.word	0x080033d5
 80033b8:	080033cf 	.word	0x080033cf
 80033bc:	2300      	movs	r3, #0
 80033be:	77fb      	strb	r3, [r7, #31]
 80033c0:	e118      	b.n	80035f4 <UART_SetConfig+0x348>
 80033c2:	2302      	movs	r3, #2
 80033c4:	77fb      	strb	r3, [r7, #31]
 80033c6:	e115      	b.n	80035f4 <UART_SetConfig+0x348>
 80033c8:	2304      	movs	r3, #4
 80033ca:	77fb      	strb	r3, [r7, #31]
 80033cc:	e112      	b.n	80035f4 <UART_SetConfig+0x348>
 80033ce:	2308      	movs	r3, #8
 80033d0:	77fb      	strb	r3, [r7, #31]
 80033d2:	e10f      	b.n	80035f4 <UART_SetConfig+0x348>
 80033d4:	2310      	movs	r3, #16
 80033d6:	77fb      	strb	r3, [r7, #31]
 80033d8:	e10c      	b.n	80035f4 <UART_SetConfig+0x348>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a68      	ldr	r2, [pc, #416]	@ (8003580 <UART_SetConfig+0x2d4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d120      	bne.n	8003426 <UART_SetConfig+0x17a>
 80033e4:	4b64      	ldr	r3, [pc, #400]	@ (8003578 <UART_SetConfig+0x2cc>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80033ee:	2b30      	cmp	r3, #48	@ 0x30
 80033f0:	d013      	beq.n	800341a <UART_SetConfig+0x16e>
 80033f2:	2b30      	cmp	r3, #48	@ 0x30
 80033f4:	d814      	bhi.n	8003420 <UART_SetConfig+0x174>
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	d009      	beq.n	800340e <UART_SetConfig+0x162>
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d810      	bhi.n	8003420 <UART_SetConfig+0x174>
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <UART_SetConfig+0x15c>
 8003402:	2b10      	cmp	r3, #16
 8003404:	d006      	beq.n	8003414 <UART_SetConfig+0x168>
 8003406:	e00b      	b.n	8003420 <UART_SetConfig+0x174>
 8003408:	2300      	movs	r3, #0
 800340a:	77fb      	strb	r3, [r7, #31]
 800340c:	e0f2      	b.n	80035f4 <UART_SetConfig+0x348>
 800340e:	2302      	movs	r3, #2
 8003410:	77fb      	strb	r3, [r7, #31]
 8003412:	e0ef      	b.n	80035f4 <UART_SetConfig+0x348>
 8003414:	2304      	movs	r3, #4
 8003416:	77fb      	strb	r3, [r7, #31]
 8003418:	e0ec      	b.n	80035f4 <UART_SetConfig+0x348>
 800341a:	2308      	movs	r3, #8
 800341c:	77fb      	strb	r3, [r7, #31]
 800341e:	e0e9      	b.n	80035f4 <UART_SetConfig+0x348>
 8003420:	2310      	movs	r3, #16
 8003422:	77fb      	strb	r3, [r7, #31]
 8003424:	e0e6      	b.n	80035f4 <UART_SetConfig+0x348>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a56      	ldr	r2, [pc, #344]	@ (8003584 <UART_SetConfig+0x2d8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d120      	bne.n	8003472 <UART_SetConfig+0x1c6>
 8003430:	4b51      	ldr	r3, [pc, #324]	@ (8003578 <UART_SetConfig+0x2cc>)
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003436:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800343a:	2bc0      	cmp	r3, #192	@ 0xc0
 800343c:	d013      	beq.n	8003466 <UART_SetConfig+0x1ba>
 800343e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003440:	d814      	bhi.n	800346c <UART_SetConfig+0x1c0>
 8003442:	2b80      	cmp	r3, #128	@ 0x80
 8003444:	d009      	beq.n	800345a <UART_SetConfig+0x1ae>
 8003446:	2b80      	cmp	r3, #128	@ 0x80
 8003448:	d810      	bhi.n	800346c <UART_SetConfig+0x1c0>
 800344a:	2b00      	cmp	r3, #0
 800344c:	d002      	beq.n	8003454 <UART_SetConfig+0x1a8>
 800344e:	2b40      	cmp	r3, #64	@ 0x40
 8003450:	d006      	beq.n	8003460 <UART_SetConfig+0x1b4>
 8003452:	e00b      	b.n	800346c <UART_SetConfig+0x1c0>
 8003454:	2300      	movs	r3, #0
 8003456:	77fb      	strb	r3, [r7, #31]
 8003458:	e0cc      	b.n	80035f4 <UART_SetConfig+0x348>
 800345a:	2302      	movs	r3, #2
 800345c:	77fb      	strb	r3, [r7, #31]
 800345e:	e0c9      	b.n	80035f4 <UART_SetConfig+0x348>
 8003460:	2304      	movs	r3, #4
 8003462:	77fb      	strb	r3, [r7, #31]
 8003464:	e0c6      	b.n	80035f4 <UART_SetConfig+0x348>
 8003466:	2308      	movs	r3, #8
 8003468:	77fb      	strb	r3, [r7, #31]
 800346a:	e0c3      	b.n	80035f4 <UART_SetConfig+0x348>
 800346c:	2310      	movs	r3, #16
 800346e:	77fb      	strb	r3, [r7, #31]
 8003470:	e0c0      	b.n	80035f4 <UART_SetConfig+0x348>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a44      	ldr	r2, [pc, #272]	@ (8003588 <UART_SetConfig+0x2dc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d125      	bne.n	80034c8 <UART_SetConfig+0x21c>
 800347c:	4b3e      	ldr	r3, [pc, #248]	@ (8003578 <UART_SetConfig+0x2cc>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003486:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800348a:	d017      	beq.n	80034bc <UART_SetConfig+0x210>
 800348c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003490:	d817      	bhi.n	80034c2 <UART_SetConfig+0x216>
 8003492:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003496:	d00b      	beq.n	80034b0 <UART_SetConfig+0x204>
 8003498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800349c:	d811      	bhi.n	80034c2 <UART_SetConfig+0x216>
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <UART_SetConfig+0x1fe>
 80034a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034a6:	d006      	beq.n	80034b6 <UART_SetConfig+0x20a>
 80034a8:	e00b      	b.n	80034c2 <UART_SetConfig+0x216>
 80034aa:	2300      	movs	r3, #0
 80034ac:	77fb      	strb	r3, [r7, #31]
 80034ae:	e0a1      	b.n	80035f4 <UART_SetConfig+0x348>
 80034b0:	2302      	movs	r3, #2
 80034b2:	77fb      	strb	r3, [r7, #31]
 80034b4:	e09e      	b.n	80035f4 <UART_SetConfig+0x348>
 80034b6:	2304      	movs	r3, #4
 80034b8:	77fb      	strb	r3, [r7, #31]
 80034ba:	e09b      	b.n	80035f4 <UART_SetConfig+0x348>
 80034bc:	2308      	movs	r3, #8
 80034be:	77fb      	strb	r3, [r7, #31]
 80034c0:	e098      	b.n	80035f4 <UART_SetConfig+0x348>
 80034c2:	2310      	movs	r3, #16
 80034c4:	77fb      	strb	r3, [r7, #31]
 80034c6:	e095      	b.n	80035f4 <UART_SetConfig+0x348>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a2f      	ldr	r2, [pc, #188]	@ (800358c <UART_SetConfig+0x2e0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d125      	bne.n	800351e <UART_SetConfig+0x272>
 80034d2:	4b29      	ldr	r3, [pc, #164]	@ (8003578 <UART_SetConfig+0x2cc>)
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80034dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034e0:	d017      	beq.n	8003512 <UART_SetConfig+0x266>
 80034e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034e6:	d817      	bhi.n	8003518 <UART_SetConfig+0x26c>
 80034e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034ec:	d00b      	beq.n	8003506 <UART_SetConfig+0x25a>
 80034ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034f2:	d811      	bhi.n	8003518 <UART_SetConfig+0x26c>
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <UART_SetConfig+0x254>
 80034f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034fc:	d006      	beq.n	800350c <UART_SetConfig+0x260>
 80034fe:	e00b      	b.n	8003518 <UART_SetConfig+0x26c>
 8003500:	2301      	movs	r3, #1
 8003502:	77fb      	strb	r3, [r7, #31]
 8003504:	e076      	b.n	80035f4 <UART_SetConfig+0x348>
 8003506:	2302      	movs	r3, #2
 8003508:	77fb      	strb	r3, [r7, #31]
 800350a:	e073      	b.n	80035f4 <UART_SetConfig+0x348>
 800350c:	2304      	movs	r3, #4
 800350e:	77fb      	strb	r3, [r7, #31]
 8003510:	e070      	b.n	80035f4 <UART_SetConfig+0x348>
 8003512:	2308      	movs	r3, #8
 8003514:	77fb      	strb	r3, [r7, #31]
 8003516:	e06d      	b.n	80035f4 <UART_SetConfig+0x348>
 8003518:	2310      	movs	r3, #16
 800351a:	77fb      	strb	r3, [r7, #31]
 800351c:	e06a      	b.n	80035f4 <UART_SetConfig+0x348>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1b      	ldr	r2, [pc, #108]	@ (8003590 <UART_SetConfig+0x2e4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d138      	bne.n	800359a <UART_SetConfig+0x2ee>
 8003528:	4b13      	ldr	r3, [pc, #76]	@ (8003578 <UART_SetConfig+0x2cc>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003532:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003536:	d017      	beq.n	8003568 <UART_SetConfig+0x2bc>
 8003538:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800353c:	d82a      	bhi.n	8003594 <UART_SetConfig+0x2e8>
 800353e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003542:	d00b      	beq.n	800355c <UART_SetConfig+0x2b0>
 8003544:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003548:	d824      	bhi.n	8003594 <UART_SetConfig+0x2e8>
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <UART_SetConfig+0x2aa>
 800354e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003552:	d006      	beq.n	8003562 <UART_SetConfig+0x2b6>
 8003554:	e01e      	b.n	8003594 <UART_SetConfig+0x2e8>
 8003556:	2300      	movs	r3, #0
 8003558:	77fb      	strb	r3, [r7, #31]
 800355a:	e04b      	b.n	80035f4 <UART_SetConfig+0x348>
 800355c:	2302      	movs	r3, #2
 800355e:	77fb      	strb	r3, [r7, #31]
 8003560:	e048      	b.n	80035f4 <UART_SetConfig+0x348>
 8003562:	2304      	movs	r3, #4
 8003564:	77fb      	strb	r3, [r7, #31]
 8003566:	e045      	b.n	80035f4 <UART_SetConfig+0x348>
 8003568:	2308      	movs	r3, #8
 800356a:	77fb      	strb	r3, [r7, #31]
 800356c:	e042      	b.n	80035f4 <UART_SetConfig+0x348>
 800356e:	bf00      	nop
 8003570:	efff69f3 	.word	0xefff69f3
 8003574:	40011000 	.word	0x40011000
 8003578:	40023800 	.word	0x40023800
 800357c:	40004400 	.word	0x40004400
 8003580:	40004800 	.word	0x40004800
 8003584:	40004c00 	.word	0x40004c00
 8003588:	40005000 	.word	0x40005000
 800358c:	40011400 	.word	0x40011400
 8003590:	40007800 	.word	0x40007800
 8003594:	2310      	movs	r3, #16
 8003596:	77fb      	strb	r3, [r7, #31]
 8003598:	e02c      	b.n	80035f4 <UART_SetConfig+0x348>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a72      	ldr	r2, [pc, #456]	@ (8003768 <UART_SetConfig+0x4bc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d125      	bne.n	80035f0 <UART_SetConfig+0x344>
 80035a4:	4b71      	ldr	r3, [pc, #452]	@ (800376c <UART_SetConfig+0x4c0>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035aa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80035ae:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80035b2:	d017      	beq.n	80035e4 <UART_SetConfig+0x338>
 80035b4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80035b8:	d817      	bhi.n	80035ea <UART_SetConfig+0x33e>
 80035ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035be:	d00b      	beq.n	80035d8 <UART_SetConfig+0x32c>
 80035c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035c4:	d811      	bhi.n	80035ea <UART_SetConfig+0x33e>
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <UART_SetConfig+0x326>
 80035ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035ce:	d006      	beq.n	80035de <UART_SetConfig+0x332>
 80035d0:	e00b      	b.n	80035ea <UART_SetConfig+0x33e>
 80035d2:	2300      	movs	r3, #0
 80035d4:	77fb      	strb	r3, [r7, #31]
 80035d6:	e00d      	b.n	80035f4 <UART_SetConfig+0x348>
 80035d8:	2302      	movs	r3, #2
 80035da:	77fb      	strb	r3, [r7, #31]
 80035dc:	e00a      	b.n	80035f4 <UART_SetConfig+0x348>
 80035de:	2304      	movs	r3, #4
 80035e0:	77fb      	strb	r3, [r7, #31]
 80035e2:	e007      	b.n	80035f4 <UART_SetConfig+0x348>
 80035e4:	2308      	movs	r3, #8
 80035e6:	77fb      	strb	r3, [r7, #31]
 80035e8:	e004      	b.n	80035f4 <UART_SetConfig+0x348>
 80035ea:	2310      	movs	r3, #16
 80035ec:	77fb      	strb	r3, [r7, #31]
 80035ee:	e001      	b.n	80035f4 <UART_SetConfig+0x348>
 80035f0:	2310      	movs	r3, #16
 80035f2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035fc:	d15b      	bne.n	80036b6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80035fe:	7ffb      	ldrb	r3, [r7, #31]
 8003600:	2b08      	cmp	r3, #8
 8003602:	d828      	bhi.n	8003656 <UART_SetConfig+0x3aa>
 8003604:	a201      	add	r2, pc, #4	@ (adr r2, 800360c <UART_SetConfig+0x360>)
 8003606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360a:	bf00      	nop
 800360c:	08003631 	.word	0x08003631
 8003610:	08003639 	.word	0x08003639
 8003614:	08003641 	.word	0x08003641
 8003618:	08003657 	.word	0x08003657
 800361c:	08003647 	.word	0x08003647
 8003620:	08003657 	.word	0x08003657
 8003624:	08003657 	.word	0x08003657
 8003628:	08003657 	.word	0x08003657
 800362c:	0800364f 	.word	0x0800364f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003630:	f7ff f914 	bl	800285c <HAL_RCC_GetPCLK1Freq>
 8003634:	61b8      	str	r0, [r7, #24]
        break;
 8003636:	e013      	b.n	8003660 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003638:	f7ff f924 	bl	8002884 <HAL_RCC_GetPCLK2Freq>
 800363c:	61b8      	str	r0, [r7, #24]
        break;
 800363e:	e00f      	b.n	8003660 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003640:	4b4b      	ldr	r3, [pc, #300]	@ (8003770 <UART_SetConfig+0x4c4>)
 8003642:	61bb      	str	r3, [r7, #24]
        break;
 8003644:	e00c      	b.n	8003660 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003646:	f7ff f837 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 800364a:	61b8      	str	r0, [r7, #24]
        break;
 800364c:	e008      	b.n	8003660 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800364e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003652:	61bb      	str	r3, [r7, #24]
        break;
 8003654:	e004      	b.n	8003660 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	77bb      	strb	r3, [r7, #30]
        break;
 800365e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d074      	beq.n	8003750 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	005a      	lsls	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	085b      	lsrs	r3, r3, #1
 8003670:	441a      	add	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	fbb2 f3f3 	udiv	r3, r2, r3
 800367a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	2b0f      	cmp	r3, #15
 8003680:	d916      	bls.n	80036b0 <UART_SetConfig+0x404>
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003688:	d212      	bcs.n	80036b0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	b29b      	uxth	r3, r3
 800368e:	f023 030f 	bic.w	r3, r3, #15
 8003692:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	085b      	lsrs	r3, r3, #1
 8003698:	b29b      	uxth	r3, r3
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	b29a      	uxth	r2, r3
 80036a0:	89fb      	ldrh	r3, [r7, #14]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	89fa      	ldrh	r2, [r7, #14]
 80036ac:	60da      	str	r2, [r3, #12]
 80036ae:	e04f      	b.n	8003750 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	77bb      	strb	r3, [r7, #30]
 80036b4:	e04c      	b.n	8003750 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036b6:	7ffb      	ldrb	r3, [r7, #31]
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d828      	bhi.n	800370e <UART_SetConfig+0x462>
 80036bc:	a201      	add	r2, pc, #4	@ (adr r2, 80036c4 <UART_SetConfig+0x418>)
 80036be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c2:	bf00      	nop
 80036c4:	080036e9 	.word	0x080036e9
 80036c8:	080036f1 	.word	0x080036f1
 80036cc:	080036f9 	.word	0x080036f9
 80036d0:	0800370f 	.word	0x0800370f
 80036d4:	080036ff 	.word	0x080036ff
 80036d8:	0800370f 	.word	0x0800370f
 80036dc:	0800370f 	.word	0x0800370f
 80036e0:	0800370f 	.word	0x0800370f
 80036e4:	08003707 	.word	0x08003707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e8:	f7ff f8b8 	bl	800285c <HAL_RCC_GetPCLK1Freq>
 80036ec:	61b8      	str	r0, [r7, #24]
        break;
 80036ee:	e013      	b.n	8003718 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036f0:	f7ff f8c8 	bl	8002884 <HAL_RCC_GetPCLK2Freq>
 80036f4:	61b8      	str	r0, [r7, #24]
        break;
 80036f6:	e00f      	b.n	8003718 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003770 <UART_SetConfig+0x4c4>)
 80036fa:	61bb      	str	r3, [r7, #24]
        break;
 80036fc:	e00c      	b.n	8003718 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036fe:	f7fe ffdb 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 8003702:	61b8      	str	r0, [r7, #24]
        break;
 8003704:	e008      	b.n	8003718 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800370a:	61bb      	str	r3, [r7, #24]
        break;
 800370c:	e004      	b.n	8003718 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	77bb      	strb	r3, [r7, #30]
        break;
 8003716:	bf00      	nop
    }

    if (pclk != 0U)
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d018      	beq.n	8003750 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	085a      	lsrs	r2, r3, #1
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	441a      	add	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003730:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b0f      	cmp	r3, #15
 8003736:	d909      	bls.n	800374c <UART_SetConfig+0x4a0>
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800373e:	d205      	bcs.n	800374c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	b29a      	uxth	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60da      	str	r2, [r3, #12]
 800374a:	e001      	b.n	8003750 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800375c:	7fbb      	ldrb	r3, [r7, #30]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3720      	adds	r7, #32
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40007c00 	.word	0x40007c00
 800376c:	40023800 	.word	0x40023800
 8003770:	00f42400 	.word	0x00f42400

08003774 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003850:	2b00      	cmp	r3, #0
 8003852:	d01a      	beq.n	800388a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003872:	d10a      	bne.n	800388a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	605a      	str	r2, [r3, #4]
  }
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b098      	sub	sp, #96	@ 0x60
 80038bc:	af02      	add	r7, sp, #8
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038c8:	f7fd fb8a 	bl	8000fe0 <HAL_GetTick>
 80038cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d12e      	bne.n	800393a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e4:	2200      	movs	r2, #0
 80038e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f88c 	bl	8003a08 <UART_WaitOnFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d021      	beq.n	800393a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038fe:	e853 3f00 	ldrex	r3, [r3]
 8003902:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003906:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800390a:	653b      	str	r3, [r7, #80]	@ 0x50
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003914:	647b      	str	r3, [r7, #68]	@ 0x44
 8003916:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003918:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800391a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800391c:	e841 2300 	strex	r3, r2, [r1]
 8003920:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e6      	bne.n	80038f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e062      	b.n	8003a00 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b04      	cmp	r3, #4
 8003946:	d149      	bne.n	80039dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003948:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003950:	2200      	movs	r2, #0
 8003952:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f856 	bl	8003a08 <UART_WaitOnFlagUntilTimeout>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d03c      	beq.n	80039dc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396a:	e853 3f00 	ldrex	r3, [r3]
 800396e:	623b      	str	r3, [r7, #32]
   return(result);
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003976:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	461a      	mov	r2, r3
 800397e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003980:	633b      	str	r3, [r7, #48]	@ 0x30
 8003982:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003984:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003988:	e841 2300 	strex	r3, r2, [r1]
 800398c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800398e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1e6      	bne.n	8003962 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3308      	adds	r3, #8
 800399a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	e853 3f00 	ldrex	r3, [r3]
 80039a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0301 	bic.w	r3, r3, #1
 80039aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3308      	adds	r3, #8
 80039b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039b4:	61fa      	str	r2, [r7, #28]
 80039b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b8:	69b9      	ldr	r1, [r7, #24]
 80039ba:	69fa      	ldr	r2, [r7, #28]
 80039bc:	e841 2300 	strex	r3, r2, [r1]
 80039c0:	617b      	str	r3, [r7, #20]
   return(result);
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e5      	bne.n	8003994 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e011      	b.n	8003a00 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3758      	adds	r7, #88	@ 0x58
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	4613      	mov	r3, r2
 8003a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a18:	e04f      	b.n	8003aba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d04b      	beq.n	8003aba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a22:	f7fd fadd 	bl	8000fe0 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d302      	bcc.n	8003a38 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e04e      	b.n	8003ada <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d037      	beq.n	8003aba <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b80      	cmp	r3, #128	@ 0x80
 8003a4e:	d034      	beq.n	8003aba <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b40      	cmp	r3, #64	@ 0x40
 8003a54:	d031      	beq.n	8003aba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d110      	bne.n	8003a86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2208      	movs	r2, #8
 8003a6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 f838 	bl	8003ae2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2208      	movs	r2, #8
 8003a76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e029      	b.n	8003ada <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a94:	d111      	bne.n	8003aba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f81e 	bl	8003ae2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e00f      	b.n	8003ada <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	69da      	ldr	r2, [r3, #28]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	bf0c      	ite	eq
 8003aca:	2301      	moveq	r3, #1
 8003acc:	2300      	movne	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	79fb      	ldrb	r3, [r7, #7]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d0a0      	beq.n	8003a1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b095      	sub	sp, #84	@ 0x54
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af2:	e853 3f00 	ldrex	r3, [r3]
 8003af6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	461a      	mov	r2, r3
 8003b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b08:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b0a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b10:	e841 2300 	strex	r3, r2, [r1]
 8003b14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e6      	bne.n	8003aea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3308      	adds	r3, #8
 8003b22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	e853 3f00 	ldrex	r3, [r3]
 8003b2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f023 0301 	bic.w	r3, r3, #1
 8003b32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3308      	adds	r3, #8
 8003b3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b44:	e841 2300 	strex	r3, r2, [r1]
 8003b48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e5      	bne.n	8003b1c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d118      	bne.n	8003b8a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	e853 3f00 	ldrex	r3, [r3]
 8003b64:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f023 0310 	bic.w	r3, r3, #16
 8003b6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	461a      	mov	r2, r3
 8003b74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b76:	61bb      	str	r3, [r7, #24]
 8003b78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7a:	6979      	ldr	r1, [r7, #20]
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	e841 2300 	strex	r3, r2, [r1]
 8003b82:	613b      	str	r3, [r7, #16]
   return(result);
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1e6      	bne.n	8003b58 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b9e:	bf00      	nop
 8003ba0:	3754      	adds	r7, #84	@ 0x54
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <__cvt>:
 8003baa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bac:	ed2d 8b02 	vpush	{d8}
 8003bb0:	eeb0 8b40 	vmov.f64	d8, d0
 8003bb4:	b085      	sub	sp, #20
 8003bb6:	4617      	mov	r7, r2
 8003bb8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8003bba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003bbc:	ee18 2a90 	vmov	r2, s17
 8003bc0:	f025 0520 	bic.w	r5, r5, #32
 8003bc4:	2a00      	cmp	r2, #0
 8003bc6:	bfb6      	itet	lt
 8003bc8:	222d      	movlt	r2, #45	@ 0x2d
 8003bca:	2200      	movge	r2, #0
 8003bcc:	eeb1 8b40 	vneglt.f64	d8, d0
 8003bd0:	2d46      	cmp	r5, #70	@ 0x46
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	701a      	strb	r2, [r3, #0]
 8003bd6:	d004      	beq.n	8003be2 <__cvt+0x38>
 8003bd8:	2d45      	cmp	r5, #69	@ 0x45
 8003bda:	d100      	bne.n	8003bde <__cvt+0x34>
 8003bdc:	3401      	adds	r4, #1
 8003bde:	2102      	movs	r1, #2
 8003be0:	e000      	b.n	8003be4 <__cvt+0x3a>
 8003be2:	2103      	movs	r1, #3
 8003be4:	ab03      	add	r3, sp, #12
 8003be6:	9301      	str	r3, [sp, #4]
 8003be8:	ab02      	add	r3, sp, #8
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	4622      	mov	r2, r4
 8003bee:	4633      	mov	r3, r6
 8003bf0:	eeb0 0b48 	vmov.f64	d0, d8
 8003bf4:	f000 fe40 	bl	8004878 <_dtoa_r>
 8003bf8:	2d47      	cmp	r5, #71	@ 0x47
 8003bfa:	d114      	bne.n	8003c26 <__cvt+0x7c>
 8003bfc:	07fb      	lsls	r3, r7, #31
 8003bfe:	d50a      	bpl.n	8003c16 <__cvt+0x6c>
 8003c00:	1902      	adds	r2, r0, r4
 8003c02:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0a:	bf08      	it	eq
 8003c0c:	9203      	streq	r2, [sp, #12]
 8003c0e:	2130      	movs	r1, #48	@ 0x30
 8003c10:	9b03      	ldr	r3, [sp, #12]
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d319      	bcc.n	8003c4a <__cvt+0xa0>
 8003c16:	9b03      	ldr	r3, [sp, #12]
 8003c18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003c1a:	1a1b      	subs	r3, r3, r0
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	b005      	add	sp, #20
 8003c20:	ecbd 8b02 	vpop	{d8}
 8003c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c26:	2d46      	cmp	r5, #70	@ 0x46
 8003c28:	eb00 0204 	add.w	r2, r0, r4
 8003c2c:	d1e9      	bne.n	8003c02 <__cvt+0x58>
 8003c2e:	7803      	ldrb	r3, [r0, #0]
 8003c30:	2b30      	cmp	r3, #48	@ 0x30
 8003c32:	d107      	bne.n	8003c44 <__cvt+0x9a>
 8003c34:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c3c:	bf1c      	itt	ne
 8003c3e:	f1c4 0401 	rsbne	r4, r4, #1
 8003c42:	6034      	strne	r4, [r6, #0]
 8003c44:	6833      	ldr	r3, [r6, #0]
 8003c46:	441a      	add	r2, r3
 8003c48:	e7db      	b.n	8003c02 <__cvt+0x58>
 8003c4a:	1c5c      	adds	r4, r3, #1
 8003c4c:	9403      	str	r4, [sp, #12]
 8003c4e:	7019      	strb	r1, [r3, #0]
 8003c50:	e7de      	b.n	8003c10 <__cvt+0x66>

08003c52 <__exponent>:
 8003c52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c54:	2900      	cmp	r1, #0
 8003c56:	bfba      	itte	lt
 8003c58:	4249      	neglt	r1, r1
 8003c5a:	232d      	movlt	r3, #45	@ 0x2d
 8003c5c:	232b      	movge	r3, #43	@ 0x2b
 8003c5e:	2909      	cmp	r1, #9
 8003c60:	7002      	strb	r2, [r0, #0]
 8003c62:	7043      	strb	r3, [r0, #1]
 8003c64:	dd29      	ble.n	8003cba <__exponent+0x68>
 8003c66:	f10d 0307 	add.w	r3, sp, #7
 8003c6a:	461d      	mov	r5, r3
 8003c6c:	270a      	movs	r7, #10
 8003c6e:	461a      	mov	r2, r3
 8003c70:	fbb1 f6f7 	udiv	r6, r1, r7
 8003c74:	fb07 1416 	mls	r4, r7, r6, r1
 8003c78:	3430      	adds	r4, #48	@ 0x30
 8003c7a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003c7e:	460c      	mov	r4, r1
 8003c80:	2c63      	cmp	r4, #99	@ 0x63
 8003c82:	f103 33ff 	add.w	r3, r3, #4294967295
 8003c86:	4631      	mov	r1, r6
 8003c88:	dcf1      	bgt.n	8003c6e <__exponent+0x1c>
 8003c8a:	3130      	adds	r1, #48	@ 0x30
 8003c8c:	1e94      	subs	r4, r2, #2
 8003c8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003c92:	1c41      	adds	r1, r0, #1
 8003c94:	4623      	mov	r3, r4
 8003c96:	42ab      	cmp	r3, r5
 8003c98:	d30a      	bcc.n	8003cb0 <__exponent+0x5e>
 8003c9a:	f10d 0309 	add.w	r3, sp, #9
 8003c9e:	1a9b      	subs	r3, r3, r2
 8003ca0:	42ac      	cmp	r4, r5
 8003ca2:	bf88      	it	hi
 8003ca4:	2300      	movhi	r3, #0
 8003ca6:	3302      	adds	r3, #2
 8003ca8:	4403      	add	r3, r0
 8003caa:	1a18      	subs	r0, r3, r0
 8003cac:	b003      	add	sp, #12
 8003cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cb0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003cb4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003cb8:	e7ed      	b.n	8003c96 <__exponent+0x44>
 8003cba:	2330      	movs	r3, #48	@ 0x30
 8003cbc:	3130      	adds	r1, #48	@ 0x30
 8003cbe:	7083      	strb	r3, [r0, #2]
 8003cc0:	70c1      	strb	r1, [r0, #3]
 8003cc2:	1d03      	adds	r3, r0, #4
 8003cc4:	e7f1      	b.n	8003caa <__exponent+0x58>
	...

08003cc8 <_printf_float>:
 8003cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ccc:	b08d      	sub	sp, #52	@ 0x34
 8003cce:	460c      	mov	r4, r1
 8003cd0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003cd4:	4616      	mov	r6, r2
 8003cd6:	461f      	mov	r7, r3
 8003cd8:	4605      	mov	r5, r0
 8003cda:	f000 fccb 	bl	8004674 <_localeconv_r>
 8003cde:	f8d0 b000 	ldr.w	fp, [r0]
 8003ce2:	4658      	mov	r0, fp
 8003ce4:	f7fc fafc 	bl	80002e0 <strlen>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	930a      	str	r3, [sp, #40]	@ 0x28
 8003cec:	f8d8 3000 	ldr.w	r3, [r8]
 8003cf0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003cf4:	6822      	ldr	r2, [r4, #0]
 8003cf6:	9005      	str	r0, [sp, #20]
 8003cf8:	3307      	adds	r3, #7
 8003cfa:	f023 0307 	bic.w	r3, r3, #7
 8003cfe:	f103 0108 	add.w	r1, r3, #8
 8003d02:	f8c8 1000 	str.w	r1, [r8]
 8003d06:	ed93 0b00 	vldr	d0, [r3]
 8003d0a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8003f68 <_printf_float+0x2a0>
 8003d0e:	eeb0 7bc0 	vabs.f64	d7, d0
 8003d12:	eeb4 7b46 	vcmp.f64	d7, d6
 8003d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8003d1e:	dd24      	ble.n	8003d6a <_printf_float+0xa2>
 8003d20:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8003d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d28:	d502      	bpl.n	8003d30 <_printf_float+0x68>
 8003d2a:	232d      	movs	r3, #45	@ 0x2d
 8003d2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d30:	498f      	ldr	r1, [pc, #572]	@ (8003f70 <_printf_float+0x2a8>)
 8003d32:	4b90      	ldr	r3, [pc, #576]	@ (8003f74 <_printf_float+0x2ac>)
 8003d34:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8003d38:	bf94      	ite	ls
 8003d3a:	4688      	movls	r8, r1
 8003d3c:	4698      	movhi	r8, r3
 8003d3e:	f022 0204 	bic.w	r2, r2, #4
 8003d42:	2303      	movs	r3, #3
 8003d44:	6123      	str	r3, [r4, #16]
 8003d46:	6022      	str	r2, [r4, #0]
 8003d48:	f04f 0a00 	mov.w	sl, #0
 8003d4c:	9700      	str	r7, [sp, #0]
 8003d4e:	4633      	mov	r3, r6
 8003d50:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003d52:	4621      	mov	r1, r4
 8003d54:	4628      	mov	r0, r5
 8003d56:	f000 f9d1 	bl	80040fc <_printf_common>
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	f040 8089 	bne.w	8003e72 <_printf_float+0x1aa>
 8003d60:	f04f 30ff 	mov.w	r0, #4294967295
 8003d64:	b00d      	add	sp, #52	@ 0x34
 8003d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d6a:	eeb4 0b40 	vcmp.f64	d0, d0
 8003d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d72:	d709      	bvc.n	8003d88 <_printf_float+0xc0>
 8003d74:	ee10 3a90 	vmov	r3, s1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bfbc      	itt	lt
 8003d7c:	232d      	movlt	r3, #45	@ 0x2d
 8003d7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003d82:	497d      	ldr	r1, [pc, #500]	@ (8003f78 <_printf_float+0x2b0>)
 8003d84:	4b7d      	ldr	r3, [pc, #500]	@ (8003f7c <_printf_float+0x2b4>)
 8003d86:	e7d5      	b.n	8003d34 <_printf_float+0x6c>
 8003d88:	6863      	ldr	r3, [r4, #4]
 8003d8a:	1c59      	adds	r1, r3, #1
 8003d8c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8003d90:	d139      	bne.n	8003e06 <_printf_float+0x13e>
 8003d92:	2306      	movs	r3, #6
 8003d94:	6063      	str	r3, [r4, #4]
 8003d96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	6022      	str	r2, [r4, #0]
 8003d9e:	9303      	str	r3, [sp, #12]
 8003da0:	ab0a      	add	r3, sp, #40	@ 0x28
 8003da2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8003da6:	ab09      	add	r3, sp, #36	@ 0x24
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	6861      	ldr	r1, [r4, #4]
 8003dac:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003db0:	4628      	mov	r0, r5
 8003db2:	f7ff fefa 	bl	8003baa <__cvt>
 8003db6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003dba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003dbc:	4680      	mov	r8, r0
 8003dbe:	d129      	bne.n	8003e14 <_printf_float+0x14c>
 8003dc0:	1cc8      	adds	r0, r1, #3
 8003dc2:	db02      	blt.n	8003dca <_printf_float+0x102>
 8003dc4:	6863      	ldr	r3, [r4, #4]
 8003dc6:	4299      	cmp	r1, r3
 8003dc8:	dd41      	ble.n	8003e4e <_printf_float+0x186>
 8003dca:	f1a9 0902 	sub.w	r9, r9, #2
 8003dce:	fa5f f989 	uxtb.w	r9, r9
 8003dd2:	3901      	subs	r1, #1
 8003dd4:	464a      	mov	r2, r9
 8003dd6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003dda:	9109      	str	r1, [sp, #36]	@ 0x24
 8003ddc:	f7ff ff39 	bl	8003c52 <__exponent>
 8003de0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003de2:	1813      	adds	r3, r2, r0
 8003de4:	2a01      	cmp	r2, #1
 8003de6:	4682      	mov	sl, r0
 8003de8:	6123      	str	r3, [r4, #16]
 8003dea:	dc02      	bgt.n	8003df2 <_printf_float+0x12a>
 8003dec:	6822      	ldr	r2, [r4, #0]
 8003dee:	07d2      	lsls	r2, r2, #31
 8003df0:	d501      	bpl.n	8003df6 <_printf_float+0x12e>
 8003df2:	3301      	adds	r3, #1
 8003df4:	6123      	str	r3, [r4, #16]
 8003df6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0a6      	beq.n	8003d4c <_printf_float+0x84>
 8003dfe:	232d      	movs	r3, #45	@ 0x2d
 8003e00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e04:	e7a2      	b.n	8003d4c <_printf_float+0x84>
 8003e06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003e0a:	d1c4      	bne.n	8003d96 <_printf_float+0xce>
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1c2      	bne.n	8003d96 <_printf_float+0xce>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e7bf      	b.n	8003d94 <_printf_float+0xcc>
 8003e14:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8003e18:	d9db      	bls.n	8003dd2 <_printf_float+0x10a>
 8003e1a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8003e1e:	d118      	bne.n	8003e52 <_printf_float+0x18a>
 8003e20:	2900      	cmp	r1, #0
 8003e22:	6863      	ldr	r3, [r4, #4]
 8003e24:	dd0b      	ble.n	8003e3e <_printf_float+0x176>
 8003e26:	6121      	str	r1, [r4, #16]
 8003e28:	b913      	cbnz	r3, 8003e30 <_printf_float+0x168>
 8003e2a:	6822      	ldr	r2, [r4, #0]
 8003e2c:	07d0      	lsls	r0, r2, #31
 8003e2e:	d502      	bpl.n	8003e36 <_printf_float+0x16e>
 8003e30:	3301      	adds	r3, #1
 8003e32:	440b      	add	r3, r1
 8003e34:	6123      	str	r3, [r4, #16]
 8003e36:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003e38:	f04f 0a00 	mov.w	sl, #0
 8003e3c:	e7db      	b.n	8003df6 <_printf_float+0x12e>
 8003e3e:	b913      	cbnz	r3, 8003e46 <_printf_float+0x17e>
 8003e40:	6822      	ldr	r2, [r4, #0]
 8003e42:	07d2      	lsls	r2, r2, #31
 8003e44:	d501      	bpl.n	8003e4a <_printf_float+0x182>
 8003e46:	3302      	adds	r3, #2
 8003e48:	e7f4      	b.n	8003e34 <_printf_float+0x16c>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e7f2      	b.n	8003e34 <_printf_float+0x16c>
 8003e4e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8003e52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003e54:	4299      	cmp	r1, r3
 8003e56:	db05      	blt.n	8003e64 <_printf_float+0x19c>
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	6121      	str	r1, [r4, #16]
 8003e5c:	07d8      	lsls	r0, r3, #31
 8003e5e:	d5ea      	bpl.n	8003e36 <_printf_float+0x16e>
 8003e60:	1c4b      	adds	r3, r1, #1
 8003e62:	e7e7      	b.n	8003e34 <_printf_float+0x16c>
 8003e64:	2900      	cmp	r1, #0
 8003e66:	bfd4      	ite	le
 8003e68:	f1c1 0202 	rsble	r2, r1, #2
 8003e6c:	2201      	movgt	r2, #1
 8003e6e:	4413      	add	r3, r2
 8003e70:	e7e0      	b.n	8003e34 <_printf_float+0x16c>
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	055a      	lsls	r2, r3, #21
 8003e76:	d407      	bmi.n	8003e88 <_printf_float+0x1c0>
 8003e78:	6923      	ldr	r3, [r4, #16]
 8003e7a:	4642      	mov	r2, r8
 8003e7c:	4631      	mov	r1, r6
 8003e7e:	4628      	mov	r0, r5
 8003e80:	47b8      	blx	r7
 8003e82:	3001      	adds	r0, #1
 8003e84:	d12a      	bne.n	8003edc <_printf_float+0x214>
 8003e86:	e76b      	b.n	8003d60 <_printf_float+0x98>
 8003e88:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8003e8c:	f240 80e0 	bls.w	8004050 <_printf_float+0x388>
 8003e90:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8003e94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e9c:	d133      	bne.n	8003f06 <_printf_float+0x23e>
 8003e9e:	4a38      	ldr	r2, [pc, #224]	@ (8003f80 <_printf_float+0x2b8>)
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	4631      	mov	r1, r6
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	47b8      	blx	r7
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	f43f af59 	beq.w	8003d60 <_printf_float+0x98>
 8003eae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003eb2:	4543      	cmp	r3, r8
 8003eb4:	db02      	blt.n	8003ebc <_printf_float+0x1f4>
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	07d8      	lsls	r0, r3, #31
 8003eba:	d50f      	bpl.n	8003edc <_printf_float+0x214>
 8003ebc:	9b05      	ldr	r3, [sp, #20]
 8003ebe:	465a      	mov	r2, fp
 8003ec0:	4631      	mov	r1, r6
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	47b8      	blx	r7
 8003ec6:	3001      	adds	r0, #1
 8003ec8:	f43f af4a 	beq.w	8003d60 <_printf_float+0x98>
 8003ecc:	f04f 0900 	mov.w	r9, #0
 8003ed0:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ed4:	f104 0a1a 	add.w	sl, r4, #26
 8003ed8:	45c8      	cmp	r8, r9
 8003eda:	dc09      	bgt.n	8003ef0 <_printf_float+0x228>
 8003edc:	6823      	ldr	r3, [r4, #0]
 8003ede:	079b      	lsls	r3, r3, #30
 8003ee0:	f100 8107 	bmi.w	80040f2 <_printf_float+0x42a>
 8003ee4:	68e0      	ldr	r0, [r4, #12]
 8003ee6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003ee8:	4298      	cmp	r0, r3
 8003eea:	bfb8      	it	lt
 8003eec:	4618      	movlt	r0, r3
 8003eee:	e739      	b.n	8003d64 <_printf_float+0x9c>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	4652      	mov	r2, sl
 8003ef4:	4631      	mov	r1, r6
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	47b8      	blx	r7
 8003efa:	3001      	adds	r0, #1
 8003efc:	f43f af30 	beq.w	8003d60 <_printf_float+0x98>
 8003f00:	f109 0901 	add.w	r9, r9, #1
 8003f04:	e7e8      	b.n	8003ed8 <_printf_float+0x210>
 8003f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	dc3b      	bgt.n	8003f84 <_printf_float+0x2bc>
 8003f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8003f80 <_printf_float+0x2b8>)
 8003f0e:	2301      	movs	r3, #1
 8003f10:	4631      	mov	r1, r6
 8003f12:	4628      	mov	r0, r5
 8003f14:	47b8      	blx	r7
 8003f16:	3001      	adds	r0, #1
 8003f18:	f43f af22 	beq.w	8003d60 <_printf_float+0x98>
 8003f1c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003f20:	ea59 0303 	orrs.w	r3, r9, r3
 8003f24:	d102      	bne.n	8003f2c <_printf_float+0x264>
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	07d9      	lsls	r1, r3, #31
 8003f2a:	d5d7      	bpl.n	8003edc <_printf_float+0x214>
 8003f2c:	9b05      	ldr	r3, [sp, #20]
 8003f2e:	465a      	mov	r2, fp
 8003f30:	4631      	mov	r1, r6
 8003f32:	4628      	mov	r0, r5
 8003f34:	47b8      	blx	r7
 8003f36:	3001      	adds	r0, #1
 8003f38:	f43f af12 	beq.w	8003d60 <_printf_float+0x98>
 8003f3c:	f04f 0a00 	mov.w	sl, #0
 8003f40:	f104 0b1a 	add.w	fp, r4, #26
 8003f44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f46:	425b      	negs	r3, r3
 8003f48:	4553      	cmp	r3, sl
 8003f4a:	dc01      	bgt.n	8003f50 <_printf_float+0x288>
 8003f4c:	464b      	mov	r3, r9
 8003f4e:	e794      	b.n	8003e7a <_printf_float+0x1b2>
 8003f50:	2301      	movs	r3, #1
 8003f52:	465a      	mov	r2, fp
 8003f54:	4631      	mov	r1, r6
 8003f56:	4628      	mov	r0, r5
 8003f58:	47b8      	blx	r7
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	f43f af00 	beq.w	8003d60 <_printf_float+0x98>
 8003f60:	f10a 0a01 	add.w	sl, sl, #1
 8003f64:	e7ee      	b.n	8003f44 <_printf_float+0x27c>
 8003f66:	bf00      	nop
 8003f68:	ffffffff 	.word	0xffffffff
 8003f6c:	7fefffff 	.word	0x7fefffff
 8003f70:	08006790 	.word	0x08006790
 8003f74:	08006794 	.word	0x08006794
 8003f78:	08006798 	.word	0x08006798
 8003f7c:	0800679c 	.word	0x0800679c
 8003f80:	080067a0 	.word	0x080067a0
 8003f84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003f8a:	4553      	cmp	r3, sl
 8003f8c:	bfa8      	it	ge
 8003f8e:	4653      	movge	r3, sl
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	4699      	mov	r9, r3
 8003f94:	dc37      	bgt.n	8004006 <_printf_float+0x33e>
 8003f96:	2300      	movs	r3, #0
 8003f98:	9307      	str	r3, [sp, #28]
 8003f9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f9e:	f104 021a 	add.w	r2, r4, #26
 8003fa2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003fa4:	9907      	ldr	r1, [sp, #28]
 8003fa6:	9306      	str	r3, [sp, #24]
 8003fa8:	eba3 0309 	sub.w	r3, r3, r9
 8003fac:	428b      	cmp	r3, r1
 8003fae:	dc31      	bgt.n	8004014 <_printf_float+0x34c>
 8003fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fb2:	459a      	cmp	sl, r3
 8003fb4:	dc3b      	bgt.n	800402e <_printf_float+0x366>
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	07da      	lsls	r2, r3, #31
 8003fba:	d438      	bmi.n	800402e <_printf_float+0x366>
 8003fbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fbe:	ebaa 0903 	sub.w	r9, sl, r3
 8003fc2:	9b06      	ldr	r3, [sp, #24]
 8003fc4:	ebaa 0303 	sub.w	r3, sl, r3
 8003fc8:	4599      	cmp	r9, r3
 8003fca:	bfa8      	it	ge
 8003fcc:	4699      	movge	r9, r3
 8003fce:	f1b9 0f00 	cmp.w	r9, #0
 8003fd2:	dc34      	bgt.n	800403e <_printf_float+0x376>
 8003fd4:	f04f 0800 	mov.w	r8, #0
 8003fd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fdc:	f104 0b1a 	add.w	fp, r4, #26
 8003fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fe2:	ebaa 0303 	sub.w	r3, sl, r3
 8003fe6:	eba3 0309 	sub.w	r3, r3, r9
 8003fea:	4543      	cmp	r3, r8
 8003fec:	f77f af76 	ble.w	8003edc <_printf_float+0x214>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	465a      	mov	r2, fp
 8003ff4:	4631      	mov	r1, r6
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	47b8      	blx	r7
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	f43f aeb0 	beq.w	8003d60 <_printf_float+0x98>
 8004000:	f108 0801 	add.w	r8, r8, #1
 8004004:	e7ec      	b.n	8003fe0 <_printf_float+0x318>
 8004006:	4642      	mov	r2, r8
 8004008:	4631      	mov	r1, r6
 800400a:	4628      	mov	r0, r5
 800400c:	47b8      	blx	r7
 800400e:	3001      	adds	r0, #1
 8004010:	d1c1      	bne.n	8003f96 <_printf_float+0x2ce>
 8004012:	e6a5      	b.n	8003d60 <_printf_float+0x98>
 8004014:	2301      	movs	r3, #1
 8004016:	4631      	mov	r1, r6
 8004018:	4628      	mov	r0, r5
 800401a:	9206      	str	r2, [sp, #24]
 800401c:	47b8      	blx	r7
 800401e:	3001      	adds	r0, #1
 8004020:	f43f ae9e 	beq.w	8003d60 <_printf_float+0x98>
 8004024:	9b07      	ldr	r3, [sp, #28]
 8004026:	9a06      	ldr	r2, [sp, #24]
 8004028:	3301      	adds	r3, #1
 800402a:	9307      	str	r3, [sp, #28]
 800402c:	e7b9      	b.n	8003fa2 <_printf_float+0x2da>
 800402e:	9b05      	ldr	r3, [sp, #20]
 8004030:	465a      	mov	r2, fp
 8004032:	4631      	mov	r1, r6
 8004034:	4628      	mov	r0, r5
 8004036:	47b8      	blx	r7
 8004038:	3001      	adds	r0, #1
 800403a:	d1bf      	bne.n	8003fbc <_printf_float+0x2f4>
 800403c:	e690      	b.n	8003d60 <_printf_float+0x98>
 800403e:	9a06      	ldr	r2, [sp, #24]
 8004040:	464b      	mov	r3, r9
 8004042:	4442      	add	r2, r8
 8004044:	4631      	mov	r1, r6
 8004046:	4628      	mov	r0, r5
 8004048:	47b8      	blx	r7
 800404a:	3001      	adds	r0, #1
 800404c:	d1c2      	bne.n	8003fd4 <_printf_float+0x30c>
 800404e:	e687      	b.n	8003d60 <_printf_float+0x98>
 8004050:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8004054:	f1b9 0f01 	cmp.w	r9, #1
 8004058:	dc01      	bgt.n	800405e <_printf_float+0x396>
 800405a:	07db      	lsls	r3, r3, #31
 800405c:	d536      	bpl.n	80040cc <_printf_float+0x404>
 800405e:	2301      	movs	r3, #1
 8004060:	4642      	mov	r2, r8
 8004062:	4631      	mov	r1, r6
 8004064:	4628      	mov	r0, r5
 8004066:	47b8      	blx	r7
 8004068:	3001      	adds	r0, #1
 800406a:	f43f ae79 	beq.w	8003d60 <_printf_float+0x98>
 800406e:	9b05      	ldr	r3, [sp, #20]
 8004070:	465a      	mov	r2, fp
 8004072:	4631      	mov	r1, r6
 8004074:	4628      	mov	r0, r5
 8004076:	47b8      	blx	r7
 8004078:	3001      	adds	r0, #1
 800407a:	f43f ae71 	beq.w	8003d60 <_printf_float+0x98>
 800407e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004082:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800408a:	f109 39ff 	add.w	r9, r9, #4294967295
 800408e:	d018      	beq.n	80040c2 <_printf_float+0x3fa>
 8004090:	464b      	mov	r3, r9
 8004092:	f108 0201 	add.w	r2, r8, #1
 8004096:	4631      	mov	r1, r6
 8004098:	4628      	mov	r0, r5
 800409a:	47b8      	blx	r7
 800409c:	3001      	adds	r0, #1
 800409e:	d10c      	bne.n	80040ba <_printf_float+0x3f2>
 80040a0:	e65e      	b.n	8003d60 <_printf_float+0x98>
 80040a2:	2301      	movs	r3, #1
 80040a4:	465a      	mov	r2, fp
 80040a6:	4631      	mov	r1, r6
 80040a8:	4628      	mov	r0, r5
 80040aa:	47b8      	blx	r7
 80040ac:	3001      	adds	r0, #1
 80040ae:	f43f ae57 	beq.w	8003d60 <_printf_float+0x98>
 80040b2:	f108 0801 	add.w	r8, r8, #1
 80040b6:	45c8      	cmp	r8, r9
 80040b8:	dbf3      	blt.n	80040a2 <_printf_float+0x3da>
 80040ba:	4653      	mov	r3, sl
 80040bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80040c0:	e6dc      	b.n	8003e7c <_printf_float+0x1b4>
 80040c2:	f04f 0800 	mov.w	r8, #0
 80040c6:	f104 0b1a 	add.w	fp, r4, #26
 80040ca:	e7f4      	b.n	80040b6 <_printf_float+0x3ee>
 80040cc:	2301      	movs	r3, #1
 80040ce:	4642      	mov	r2, r8
 80040d0:	e7e1      	b.n	8004096 <_printf_float+0x3ce>
 80040d2:	2301      	movs	r3, #1
 80040d4:	464a      	mov	r2, r9
 80040d6:	4631      	mov	r1, r6
 80040d8:	4628      	mov	r0, r5
 80040da:	47b8      	blx	r7
 80040dc:	3001      	adds	r0, #1
 80040de:	f43f ae3f 	beq.w	8003d60 <_printf_float+0x98>
 80040e2:	f108 0801 	add.w	r8, r8, #1
 80040e6:	68e3      	ldr	r3, [r4, #12]
 80040e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80040ea:	1a5b      	subs	r3, r3, r1
 80040ec:	4543      	cmp	r3, r8
 80040ee:	dcf0      	bgt.n	80040d2 <_printf_float+0x40a>
 80040f0:	e6f8      	b.n	8003ee4 <_printf_float+0x21c>
 80040f2:	f04f 0800 	mov.w	r8, #0
 80040f6:	f104 0919 	add.w	r9, r4, #25
 80040fa:	e7f4      	b.n	80040e6 <_printf_float+0x41e>

080040fc <_printf_common>:
 80040fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004100:	4616      	mov	r6, r2
 8004102:	4698      	mov	r8, r3
 8004104:	688a      	ldr	r2, [r1, #8]
 8004106:	690b      	ldr	r3, [r1, #16]
 8004108:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800410c:	4293      	cmp	r3, r2
 800410e:	bfb8      	it	lt
 8004110:	4613      	movlt	r3, r2
 8004112:	6033      	str	r3, [r6, #0]
 8004114:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004118:	4607      	mov	r7, r0
 800411a:	460c      	mov	r4, r1
 800411c:	b10a      	cbz	r2, 8004122 <_printf_common+0x26>
 800411e:	3301      	adds	r3, #1
 8004120:	6033      	str	r3, [r6, #0]
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	0699      	lsls	r1, r3, #26
 8004126:	bf42      	ittt	mi
 8004128:	6833      	ldrmi	r3, [r6, #0]
 800412a:	3302      	addmi	r3, #2
 800412c:	6033      	strmi	r3, [r6, #0]
 800412e:	6825      	ldr	r5, [r4, #0]
 8004130:	f015 0506 	ands.w	r5, r5, #6
 8004134:	d106      	bne.n	8004144 <_printf_common+0x48>
 8004136:	f104 0a19 	add.w	sl, r4, #25
 800413a:	68e3      	ldr	r3, [r4, #12]
 800413c:	6832      	ldr	r2, [r6, #0]
 800413e:	1a9b      	subs	r3, r3, r2
 8004140:	42ab      	cmp	r3, r5
 8004142:	dc26      	bgt.n	8004192 <_printf_common+0x96>
 8004144:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004148:	6822      	ldr	r2, [r4, #0]
 800414a:	3b00      	subs	r3, #0
 800414c:	bf18      	it	ne
 800414e:	2301      	movne	r3, #1
 8004150:	0692      	lsls	r2, r2, #26
 8004152:	d42b      	bmi.n	80041ac <_printf_common+0xb0>
 8004154:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004158:	4641      	mov	r1, r8
 800415a:	4638      	mov	r0, r7
 800415c:	47c8      	blx	r9
 800415e:	3001      	adds	r0, #1
 8004160:	d01e      	beq.n	80041a0 <_printf_common+0xa4>
 8004162:	6823      	ldr	r3, [r4, #0]
 8004164:	6922      	ldr	r2, [r4, #16]
 8004166:	f003 0306 	and.w	r3, r3, #6
 800416a:	2b04      	cmp	r3, #4
 800416c:	bf02      	ittt	eq
 800416e:	68e5      	ldreq	r5, [r4, #12]
 8004170:	6833      	ldreq	r3, [r6, #0]
 8004172:	1aed      	subeq	r5, r5, r3
 8004174:	68a3      	ldr	r3, [r4, #8]
 8004176:	bf0c      	ite	eq
 8004178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800417c:	2500      	movne	r5, #0
 800417e:	4293      	cmp	r3, r2
 8004180:	bfc4      	itt	gt
 8004182:	1a9b      	subgt	r3, r3, r2
 8004184:	18ed      	addgt	r5, r5, r3
 8004186:	2600      	movs	r6, #0
 8004188:	341a      	adds	r4, #26
 800418a:	42b5      	cmp	r5, r6
 800418c:	d11a      	bne.n	80041c4 <_printf_common+0xc8>
 800418e:	2000      	movs	r0, #0
 8004190:	e008      	b.n	80041a4 <_printf_common+0xa8>
 8004192:	2301      	movs	r3, #1
 8004194:	4652      	mov	r2, sl
 8004196:	4641      	mov	r1, r8
 8004198:	4638      	mov	r0, r7
 800419a:	47c8      	blx	r9
 800419c:	3001      	adds	r0, #1
 800419e:	d103      	bne.n	80041a8 <_printf_common+0xac>
 80041a0:	f04f 30ff 	mov.w	r0, #4294967295
 80041a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a8:	3501      	adds	r5, #1
 80041aa:	e7c6      	b.n	800413a <_printf_common+0x3e>
 80041ac:	18e1      	adds	r1, r4, r3
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	2030      	movs	r0, #48	@ 0x30
 80041b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80041b6:	4422      	add	r2, r4
 80041b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041c0:	3302      	adds	r3, #2
 80041c2:	e7c7      	b.n	8004154 <_printf_common+0x58>
 80041c4:	2301      	movs	r3, #1
 80041c6:	4622      	mov	r2, r4
 80041c8:	4641      	mov	r1, r8
 80041ca:	4638      	mov	r0, r7
 80041cc:	47c8      	blx	r9
 80041ce:	3001      	adds	r0, #1
 80041d0:	d0e6      	beq.n	80041a0 <_printf_common+0xa4>
 80041d2:	3601      	adds	r6, #1
 80041d4:	e7d9      	b.n	800418a <_printf_common+0x8e>
	...

080041d8 <_printf_i>:
 80041d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041dc:	7e0f      	ldrb	r7, [r1, #24]
 80041de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041e0:	2f78      	cmp	r7, #120	@ 0x78
 80041e2:	4691      	mov	r9, r2
 80041e4:	4680      	mov	r8, r0
 80041e6:	460c      	mov	r4, r1
 80041e8:	469a      	mov	sl, r3
 80041ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041ee:	d807      	bhi.n	8004200 <_printf_i+0x28>
 80041f0:	2f62      	cmp	r7, #98	@ 0x62
 80041f2:	d80a      	bhi.n	800420a <_printf_i+0x32>
 80041f4:	2f00      	cmp	r7, #0
 80041f6:	f000 80d2 	beq.w	800439e <_printf_i+0x1c6>
 80041fa:	2f58      	cmp	r7, #88	@ 0x58
 80041fc:	f000 80b9 	beq.w	8004372 <_printf_i+0x19a>
 8004200:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004204:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004208:	e03a      	b.n	8004280 <_printf_i+0xa8>
 800420a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800420e:	2b15      	cmp	r3, #21
 8004210:	d8f6      	bhi.n	8004200 <_printf_i+0x28>
 8004212:	a101      	add	r1, pc, #4	@ (adr r1, 8004218 <_printf_i+0x40>)
 8004214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004218:	08004271 	.word	0x08004271
 800421c:	08004285 	.word	0x08004285
 8004220:	08004201 	.word	0x08004201
 8004224:	08004201 	.word	0x08004201
 8004228:	08004201 	.word	0x08004201
 800422c:	08004201 	.word	0x08004201
 8004230:	08004285 	.word	0x08004285
 8004234:	08004201 	.word	0x08004201
 8004238:	08004201 	.word	0x08004201
 800423c:	08004201 	.word	0x08004201
 8004240:	08004201 	.word	0x08004201
 8004244:	08004385 	.word	0x08004385
 8004248:	080042af 	.word	0x080042af
 800424c:	0800433f 	.word	0x0800433f
 8004250:	08004201 	.word	0x08004201
 8004254:	08004201 	.word	0x08004201
 8004258:	080043a7 	.word	0x080043a7
 800425c:	08004201 	.word	0x08004201
 8004260:	080042af 	.word	0x080042af
 8004264:	08004201 	.word	0x08004201
 8004268:	08004201 	.word	0x08004201
 800426c:	08004347 	.word	0x08004347
 8004270:	6833      	ldr	r3, [r6, #0]
 8004272:	1d1a      	adds	r2, r3, #4
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6032      	str	r2, [r6, #0]
 8004278:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800427c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004280:	2301      	movs	r3, #1
 8004282:	e09d      	b.n	80043c0 <_printf_i+0x1e8>
 8004284:	6833      	ldr	r3, [r6, #0]
 8004286:	6820      	ldr	r0, [r4, #0]
 8004288:	1d19      	adds	r1, r3, #4
 800428a:	6031      	str	r1, [r6, #0]
 800428c:	0606      	lsls	r6, r0, #24
 800428e:	d501      	bpl.n	8004294 <_printf_i+0xbc>
 8004290:	681d      	ldr	r5, [r3, #0]
 8004292:	e003      	b.n	800429c <_printf_i+0xc4>
 8004294:	0645      	lsls	r5, r0, #25
 8004296:	d5fb      	bpl.n	8004290 <_printf_i+0xb8>
 8004298:	f9b3 5000 	ldrsh.w	r5, [r3]
 800429c:	2d00      	cmp	r5, #0
 800429e:	da03      	bge.n	80042a8 <_printf_i+0xd0>
 80042a0:	232d      	movs	r3, #45	@ 0x2d
 80042a2:	426d      	negs	r5, r5
 80042a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042a8:	4859      	ldr	r0, [pc, #356]	@ (8004410 <_printf_i+0x238>)
 80042aa:	230a      	movs	r3, #10
 80042ac:	e011      	b.n	80042d2 <_printf_i+0xfa>
 80042ae:	6821      	ldr	r1, [r4, #0]
 80042b0:	6833      	ldr	r3, [r6, #0]
 80042b2:	0608      	lsls	r0, r1, #24
 80042b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80042b8:	d402      	bmi.n	80042c0 <_printf_i+0xe8>
 80042ba:	0649      	lsls	r1, r1, #25
 80042bc:	bf48      	it	mi
 80042be:	b2ad      	uxthmi	r5, r5
 80042c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80042c2:	4853      	ldr	r0, [pc, #332]	@ (8004410 <_printf_i+0x238>)
 80042c4:	6033      	str	r3, [r6, #0]
 80042c6:	bf14      	ite	ne
 80042c8:	230a      	movne	r3, #10
 80042ca:	2308      	moveq	r3, #8
 80042cc:	2100      	movs	r1, #0
 80042ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042d2:	6866      	ldr	r6, [r4, #4]
 80042d4:	60a6      	str	r6, [r4, #8]
 80042d6:	2e00      	cmp	r6, #0
 80042d8:	bfa2      	ittt	ge
 80042da:	6821      	ldrge	r1, [r4, #0]
 80042dc:	f021 0104 	bicge.w	r1, r1, #4
 80042e0:	6021      	strge	r1, [r4, #0]
 80042e2:	b90d      	cbnz	r5, 80042e8 <_printf_i+0x110>
 80042e4:	2e00      	cmp	r6, #0
 80042e6:	d04b      	beq.n	8004380 <_printf_i+0x1a8>
 80042e8:	4616      	mov	r6, r2
 80042ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80042ee:	fb03 5711 	mls	r7, r3, r1, r5
 80042f2:	5dc7      	ldrb	r7, [r0, r7]
 80042f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042f8:	462f      	mov	r7, r5
 80042fa:	42bb      	cmp	r3, r7
 80042fc:	460d      	mov	r5, r1
 80042fe:	d9f4      	bls.n	80042ea <_printf_i+0x112>
 8004300:	2b08      	cmp	r3, #8
 8004302:	d10b      	bne.n	800431c <_printf_i+0x144>
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	07df      	lsls	r7, r3, #31
 8004308:	d508      	bpl.n	800431c <_printf_i+0x144>
 800430a:	6923      	ldr	r3, [r4, #16]
 800430c:	6861      	ldr	r1, [r4, #4]
 800430e:	4299      	cmp	r1, r3
 8004310:	bfde      	ittt	le
 8004312:	2330      	movle	r3, #48	@ 0x30
 8004314:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004318:	f106 36ff 	addle.w	r6, r6, #4294967295
 800431c:	1b92      	subs	r2, r2, r6
 800431e:	6122      	str	r2, [r4, #16]
 8004320:	f8cd a000 	str.w	sl, [sp]
 8004324:	464b      	mov	r3, r9
 8004326:	aa03      	add	r2, sp, #12
 8004328:	4621      	mov	r1, r4
 800432a:	4640      	mov	r0, r8
 800432c:	f7ff fee6 	bl	80040fc <_printf_common>
 8004330:	3001      	adds	r0, #1
 8004332:	d14a      	bne.n	80043ca <_printf_i+0x1f2>
 8004334:	f04f 30ff 	mov.w	r0, #4294967295
 8004338:	b004      	add	sp, #16
 800433a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800433e:	6823      	ldr	r3, [r4, #0]
 8004340:	f043 0320 	orr.w	r3, r3, #32
 8004344:	6023      	str	r3, [r4, #0]
 8004346:	4833      	ldr	r0, [pc, #204]	@ (8004414 <_printf_i+0x23c>)
 8004348:	2778      	movs	r7, #120	@ 0x78
 800434a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	6831      	ldr	r1, [r6, #0]
 8004352:	061f      	lsls	r7, r3, #24
 8004354:	f851 5b04 	ldr.w	r5, [r1], #4
 8004358:	d402      	bmi.n	8004360 <_printf_i+0x188>
 800435a:	065f      	lsls	r7, r3, #25
 800435c:	bf48      	it	mi
 800435e:	b2ad      	uxthmi	r5, r5
 8004360:	6031      	str	r1, [r6, #0]
 8004362:	07d9      	lsls	r1, r3, #31
 8004364:	bf44      	itt	mi
 8004366:	f043 0320 	orrmi.w	r3, r3, #32
 800436a:	6023      	strmi	r3, [r4, #0]
 800436c:	b11d      	cbz	r5, 8004376 <_printf_i+0x19e>
 800436e:	2310      	movs	r3, #16
 8004370:	e7ac      	b.n	80042cc <_printf_i+0xf4>
 8004372:	4827      	ldr	r0, [pc, #156]	@ (8004410 <_printf_i+0x238>)
 8004374:	e7e9      	b.n	800434a <_printf_i+0x172>
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	f023 0320 	bic.w	r3, r3, #32
 800437c:	6023      	str	r3, [r4, #0]
 800437e:	e7f6      	b.n	800436e <_printf_i+0x196>
 8004380:	4616      	mov	r6, r2
 8004382:	e7bd      	b.n	8004300 <_printf_i+0x128>
 8004384:	6833      	ldr	r3, [r6, #0]
 8004386:	6825      	ldr	r5, [r4, #0]
 8004388:	6961      	ldr	r1, [r4, #20]
 800438a:	1d18      	adds	r0, r3, #4
 800438c:	6030      	str	r0, [r6, #0]
 800438e:	062e      	lsls	r6, r5, #24
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	d501      	bpl.n	8004398 <_printf_i+0x1c0>
 8004394:	6019      	str	r1, [r3, #0]
 8004396:	e002      	b.n	800439e <_printf_i+0x1c6>
 8004398:	0668      	lsls	r0, r5, #25
 800439a:	d5fb      	bpl.n	8004394 <_printf_i+0x1bc>
 800439c:	8019      	strh	r1, [r3, #0]
 800439e:	2300      	movs	r3, #0
 80043a0:	6123      	str	r3, [r4, #16]
 80043a2:	4616      	mov	r6, r2
 80043a4:	e7bc      	b.n	8004320 <_printf_i+0x148>
 80043a6:	6833      	ldr	r3, [r6, #0]
 80043a8:	1d1a      	adds	r2, r3, #4
 80043aa:	6032      	str	r2, [r6, #0]
 80043ac:	681e      	ldr	r6, [r3, #0]
 80043ae:	6862      	ldr	r2, [r4, #4]
 80043b0:	2100      	movs	r1, #0
 80043b2:	4630      	mov	r0, r6
 80043b4:	f7fb ff44 	bl	8000240 <memchr>
 80043b8:	b108      	cbz	r0, 80043be <_printf_i+0x1e6>
 80043ba:	1b80      	subs	r0, r0, r6
 80043bc:	6060      	str	r0, [r4, #4]
 80043be:	6863      	ldr	r3, [r4, #4]
 80043c0:	6123      	str	r3, [r4, #16]
 80043c2:	2300      	movs	r3, #0
 80043c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043c8:	e7aa      	b.n	8004320 <_printf_i+0x148>
 80043ca:	6923      	ldr	r3, [r4, #16]
 80043cc:	4632      	mov	r2, r6
 80043ce:	4649      	mov	r1, r9
 80043d0:	4640      	mov	r0, r8
 80043d2:	47d0      	blx	sl
 80043d4:	3001      	adds	r0, #1
 80043d6:	d0ad      	beq.n	8004334 <_printf_i+0x15c>
 80043d8:	6823      	ldr	r3, [r4, #0]
 80043da:	079b      	lsls	r3, r3, #30
 80043dc:	d413      	bmi.n	8004406 <_printf_i+0x22e>
 80043de:	68e0      	ldr	r0, [r4, #12]
 80043e0:	9b03      	ldr	r3, [sp, #12]
 80043e2:	4298      	cmp	r0, r3
 80043e4:	bfb8      	it	lt
 80043e6:	4618      	movlt	r0, r3
 80043e8:	e7a6      	b.n	8004338 <_printf_i+0x160>
 80043ea:	2301      	movs	r3, #1
 80043ec:	4632      	mov	r2, r6
 80043ee:	4649      	mov	r1, r9
 80043f0:	4640      	mov	r0, r8
 80043f2:	47d0      	blx	sl
 80043f4:	3001      	adds	r0, #1
 80043f6:	d09d      	beq.n	8004334 <_printf_i+0x15c>
 80043f8:	3501      	adds	r5, #1
 80043fa:	68e3      	ldr	r3, [r4, #12]
 80043fc:	9903      	ldr	r1, [sp, #12]
 80043fe:	1a5b      	subs	r3, r3, r1
 8004400:	42ab      	cmp	r3, r5
 8004402:	dcf2      	bgt.n	80043ea <_printf_i+0x212>
 8004404:	e7eb      	b.n	80043de <_printf_i+0x206>
 8004406:	2500      	movs	r5, #0
 8004408:	f104 0619 	add.w	r6, r4, #25
 800440c:	e7f5      	b.n	80043fa <_printf_i+0x222>
 800440e:	bf00      	nop
 8004410:	080067a2 	.word	0x080067a2
 8004414:	080067b3 	.word	0x080067b3

08004418 <std>:
 8004418:	2300      	movs	r3, #0
 800441a:	b510      	push	{r4, lr}
 800441c:	4604      	mov	r4, r0
 800441e:	e9c0 3300 	strd	r3, r3, [r0]
 8004422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004426:	6083      	str	r3, [r0, #8]
 8004428:	8181      	strh	r1, [r0, #12]
 800442a:	6643      	str	r3, [r0, #100]	@ 0x64
 800442c:	81c2      	strh	r2, [r0, #14]
 800442e:	6183      	str	r3, [r0, #24]
 8004430:	4619      	mov	r1, r3
 8004432:	2208      	movs	r2, #8
 8004434:	305c      	adds	r0, #92	@ 0x5c
 8004436:	f000 f914 	bl	8004662 <memset>
 800443a:	4b0d      	ldr	r3, [pc, #52]	@ (8004470 <std+0x58>)
 800443c:	6263      	str	r3, [r4, #36]	@ 0x24
 800443e:	4b0d      	ldr	r3, [pc, #52]	@ (8004474 <std+0x5c>)
 8004440:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004442:	4b0d      	ldr	r3, [pc, #52]	@ (8004478 <std+0x60>)
 8004444:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004446:	4b0d      	ldr	r3, [pc, #52]	@ (800447c <std+0x64>)
 8004448:	6323      	str	r3, [r4, #48]	@ 0x30
 800444a:	4b0d      	ldr	r3, [pc, #52]	@ (8004480 <std+0x68>)
 800444c:	6224      	str	r4, [r4, #32]
 800444e:	429c      	cmp	r4, r3
 8004450:	d006      	beq.n	8004460 <std+0x48>
 8004452:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004456:	4294      	cmp	r4, r2
 8004458:	d002      	beq.n	8004460 <std+0x48>
 800445a:	33d0      	adds	r3, #208	@ 0xd0
 800445c:	429c      	cmp	r4, r3
 800445e:	d105      	bne.n	800446c <std+0x54>
 8004460:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004468:	f000 b978 	b.w	800475c <__retarget_lock_init_recursive>
 800446c:	bd10      	pop	{r4, pc}
 800446e:	bf00      	nop
 8004470:	080045dd 	.word	0x080045dd
 8004474:	080045ff 	.word	0x080045ff
 8004478:	08004637 	.word	0x08004637
 800447c:	0800465b 	.word	0x0800465b
 8004480:	20000344 	.word	0x20000344

08004484 <stdio_exit_handler>:
 8004484:	4a02      	ldr	r2, [pc, #8]	@ (8004490 <stdio_exit_handler+0xc>)
 8004486:	4903      	ldr	r1, [pc, #12]	@ (8004494 <stdio_exit_handler+0x10>)
 8004488:	4803      	ldr	r0, [pc, #12]	@ (8004498 <stdio_exit_handler+0x14>)
 800448a:	f000 b869 	b.w	8004560 <_fwalk_sglue>
 800448e:	bf00      	nop
 8004490:	2000000c 	.word	0x2000000c
 8004494:	08005fe1 	.word	0x08005fe1
 8004498:	2000001c 	.word	0x2000001c

0800449c <cleanup_stdio>:
 800449c:	6841      	ldr	r1, [r0, #4]
 800449e:	4b0c      	ldr	r3, [pc, #48]	@ (80044d0 <cleanup_stdio+0x34>)
 80044a0:	4299      	cmp	r1, r3
 80044a2:	b510      	push	{r4, lr}
 80044a4:	4604      	mov	r4, r0
 80044a6:	d001      	beq.n	80044ac <cleanup_stdio+0x10>
 80044a8:	f001 fd9a 	bl	8005fe0 <_fflush_r>
 80044ac:	68a1      	ldr	r1, [r4, #8]
 80044ae:	4b09      	ldr	r3, [pc, #36]	@ (80044d4 <cleanup_stdio+0x38>)
 80044b0:	4299      	cmp	r1, r3
 80044b2:	d002      	beq.n	80044ba <cleanup_stdio+0x1e>
 80044b4:	4620      	mov	r0, r4
 80044b6:	f001 fd93 	bl	8005fe0 <_fflush_r>
 80044ba:	68e1      	ldr	r1, [r4, #12]
 80044bc:	4b06      	ldr	r3, [pc, #24]	@ (80044d8 <cleanup_stdio+0x3c>)
 80044be:	4299      	cmp	r1, r3
 80044c0:	d004      	beq.n	80044cc <cleanup_stdio+0x30>
 80044c2:	4620      	mov	r0, r4
 80044c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044c8:	f001 bd8a 	b.w	8005fe0 <_fflush_r>
 80044cc:	bd10      	pop	{r4, pc}
 80044ce:	bf00      	nop
 80044d0:	20000344 	.word	0x20000344
 80044d4:	200003ac 	.word	0x200003ac
 80044d8:	20000414 	.word	0x20000414

080044dc <global_stdio_init.part.0>:
 80044dc:	b510      	push	{r4, lr}
 80044de:	4b0b      	ldr	r3, [pc, #44]	@ (800450c <global_stdio_init.part.0+0x30>)
 80044e0:	4c0b      	ldr	r4, [pc, #44]	@ (8004510 <global_stdio_init.part.0+0x34>)
 80044e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004514 <global_stdio_init.part.0+0x38>)
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	4620      	mov	r0, r4
 80044e8:	2200      	movs	r2, #0
 80044ea:	2104      	movs	r1, #4
 80044ec:	f7ff ff94 	bl	8004418 <std>
 80044f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80044f4:	2201      	movs	r2, #1
 80044f6:	2109      	movs	r1, #9
 80044f8:	f7ff ff8e 	bl	8004418 <std>
 80044fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004500:	2202      	movs	r2, #2
 8004502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004506:	2112      	movs	r1, #18
 8004508:	f7ff bf86 	b.w	8004418 <std>
 800450c:	2000047c 	.word	0x2000047c
 8004510:	20000344 	.word	0x20000344
 8004514:	08004485 	.word	0x08004485

08004518 <__sfp_lock_acquire>:
 8004518:	4801      	ldr	r0, [pc, #4]	@ (8004520 <__sfp_lock_acquire+0x8>)
 800451a:	f000 b920 	b.w	800475e <__retarget_lock_acquire_recursive>
 800451e:	bf00      	nop
 8004520:	20000485 	.word	0x20000485

08004524 <__sfp_lock_release>:
 8004524:	4801      	ldr	r0, [pc, #4]	@ (800452c <__sfp_lock_release+0x8>)
 8004526:	f000 b91b 	b.w	8004760 <__retarget_lock_release_recursive>
 800452a:	bf00      	nop
 800452c:	20000485 	.word	0x20000485

08004530 <__sinit>:
 8004530:	b510      	push	{r4, lr}
 8004532:	4604      	mov	r4, r0
 8004534:	f7ff fff0 	bl	8004518 <__sfp_lock_acquire>
 8004538:	6a23      	ldr	r3, [r4, #32]
 800453a:	b11b      	cbz	r3, 8004544 <__sinit+0x14>
 800453c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004540:	f7ff bff0 	b.w	8004524 <__sfp_lock_release>
 8004544:	4b04      	ldr	r3, [pc, #16]	@ (8004558 <__sinit+0x28>)
 8004546:	6223      	str	r3, [r4, #32]
 8004548:	4b04      	ldr	r3, [pc, #16]	@ (800455c <__sinit+0x2c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1f5      	bne.n	800453c <__sinit+0xc>
 8004550:	f7ff ffc4 	bl	80044dc <global_stdio_init.part.0>
 8004554:	e7f2      	b.n	800453c <__sinit+0xc>
 8004556:	bf00      	nop
 8004558:	0800449d 	.word	0x0800449d
 800455c:	2000047c 	.word	0x2000047c

08004560 <_fwalk_sglue>:
 8004560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004564:	4607      	mov	r7, r0
 8004566:	4688      	mov	r8, r1
 8004568:	4614      	mov	r4, r2
 800456a:	2600      	movs	r6, #0
 800456c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004570:	f1b9 0901 	subs.w	r9, r9, #1
 8004574:	d505      	bpl.n	8004582 <_fwalk_sglue+0x22>
 8004576:	6824      	ldr	r4, [r4, #0]
 8004578:	2c00      	cmp	r4, #0
 800457a:	d1f7      	bne.n	800456c <_fwalk_sglue+0xc>
 800457c:	4630      	mov	r0, r6
 800457e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004582:	89ab      	ldrh	r3, [r5, #12]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d907      	bls.n	8004598 <_fwalk_sglue+0x38>
 8004588:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800458c:	3301      	adds	r3, #1
 800458e:	d003      	beq.n	8004598 <_fwalk_sglue+0x38>
 8004590:	4629      	mov	r1, r5
 8004592:	4638      	mov	r0, r7
 8004594:	47c0      	blx	r8
 8004596:	4306      	orrs	r6, r0
 8004598:	3568      	adds	r5, #104	@ 0x68
 800459a:	e7e9      	b.n	8004570 <_fwalk_sglue+0x10>

0800459c <siprintf>:
 800459c:	b40e      	push	{r1, r2, r3}
 800459e:	b500      	push	{lr}
 80045a0:	b09c      	sub	sp, #112	@ 0x70
 80045a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80045a4:	9002      	str	r0, [sp, #8]
 80045a6:	9006      	str	r0, [sp, #24]
 80045a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80045ac:	4809      	ldr	r0, [pc, #36]	@ (80045d4 <siprintf+0x38>)
 80045ae:	9107      	str	r1, [sp, #28]
 80045b0:	9104      	str	r1, [sp, #16]
 80045b2:	4909      	ldr	r1, [pc, #36]	@ (80045d8 <siprintf+0x3c>)
 80045b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80045b8:	9105      	str	r1, [sp, #20]
 80045ba:	6800      	ldr	r0, [r0, #0]
 80045bc:	9301      	str	r3, [sp, #4]
 80045be:	a902      	add	r1, sp, #8
 80045c0:	f001 fb8e 	bl	8005ce0 <_svfiprintf_r>
 80045c4:	9b02      	ldr	r3, [sp, #8]
 80045c6:	2200      	movs	r2, #0
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	b01c      	add	sp, #112	@ 0x70
 80045cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80045d0:	b003      	add	sp, #12
 80045d2:	4770      	bx	lr
 80045d4:	20000018 	.word	0x20000018
 80045d8:	ffff0208 	.word	0xffff0208

080045dc <__sread>:
 80045dc:	b510      	push	{r4, lr}
 80045de:	460c      	mov	r4, r1
 80045e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045e4:	f000 f86c 	bl	80046c0 <_read_r>
 80045e8:	2800      	cmp	r0, #0
 80045ea:	bfab      	itete	ge
 80045ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80045ee:	89a3      	ldrhlt	r3, [r4, #12]
 80045f0:	181b      	addge	r3, r3, r0
 80045f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80045f6:	bfac      	ite	ge
 80045f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80045fa:	81a3      	strhlt	r3, [r4, #12]
 80045fc:	bd10      	pop	{r4, pc}

080045fe <__swrite>:
 80045fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004602:	461f      	mov	r7, r3
 8004604:	898b      	ldrh	r3, [r1, #12]
 8004606:	05db      	lsls	r3, r3, #23
 8004608:	4605      	mov	r5, r0
 800460a:	460c      	mov	r4, r1
 800460c:	4616      	mov	r6, r2
 800460e:	d505      	bpl.n	800461c <__swrite+0x1e>
 8004610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004614:	2302      	movs	r3, #2
 8004616:	2200      	movs	r2, #0
 8004618:	f000 f840 	bl	800469c <_lseek_r>
 800461c:	89a3      	ldrh	r3, [r4, #12]
 800461e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004622:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004626:	81a3      	strh	r3, [r4, #12]
 8004628:	4632      	mov	r2, r6
 800462a:	463b      	mov	r3, r7
 800462c:	4628      	mov	r0, r5
 800462e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004632:	f000 b857 	b.w	80046e4 <_write_r>

08004636 <__sseek>:
 8004636:	b510      	push	{r4, lr}
 8004638:	460c      	mov	r4, r1
 800463a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800463e:	f000 f82d 	bl	800469c <_lseek_r>
 8004642:	1c43      	adds	r3, r0, #1
 8004644:	89a3      	ldrh	r3, [r4, #12]
 8004646:	bf15      	itete	ne
 8004648:	6560      	strne	r0, [r4, #84]	@ 0x54
 800464a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800464e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004652:	81a3      	strheq	r3, [r4, #12]
 8004654:	bf18      	it	ne
 8004656:	81a3      	strhne	r3, [r4, #12]
 8004658:	bd10      	pop	{r4, pc}

0800465a <__sclose>:
 800465a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800465e:	f000 b80d 	b.w	800467c <_close_r>

08004662 <memset>:
 8004662:	4402      	add	r2, r0
 8004664:	4603      	mov	r3, r0
 8004666:	4293      	cmp	r3, r2
 8004668:	d100      	bne.n	800466c <memset+0xa>
 800466a:	4770      	bx	lr
 800466c:	f803 1b01 	strb.w	r1, [r3], #1
 8004670:	e7f9      	b.n	8004666 <memset+0x4>
	...

08004674 <_localeconv_r>:
 8004674:	4800      	ldr	r0, [pc, #0]	@ (8004678 <_localeconv_r+0x4>)
 8004676:	4770      	bx	lr
 8004678:	20000158 	.word	0x20000158

0800467c <_close_r>:
 800467c:	b538      	push	{r3, r4, r5, lr}
 800467e:	4d06      	ldr	r5, [pc, #24]	@ (8004698 <_close_r+0x1c>)
 8004680:	2300      	movs	r3, #0
 8004682:	4604      	mov	r4, r0
 8004684:	4608      	mov	r0, r1
 8004686:	602b      	str	r3, [r5, #0]
 8004688:	f7fc fb23 	bl	8000cd2 <_close>
 800468c:	1c43      	adds	r3, r0, #1
 800468e:	d102      	bne.n	8004696 <_close_r+0x1a>
 8004690:	682b      	ldr	r3, [r5, #0]
 8004692:	b103      	cbz	r3, 8004696 <_close_r+0x1a>
 8004694:	6023      	str	r3, [r4, #0]
 8004696:	bd38      	pop	{r3, r4, r5, pc}
 8004698:	20000480 	.word	0x20000480

0800469c <_lseek_r>:
 800469c:	b538      	push	{r3, r4, r5, lr}
 800469e:	4d07      	ldr	r5, [pc, #28]	@ (80046bc <_lseek_r+0x20>)
 80046a0:	4604      	mov	r4, r0
 80046a2:	4608      	mov	r0, r1
 80046a4:	4611      	mov	r1, r2
 80046a6:	2200      	movs	r2, #0
 80046a8:	602a      	str	r2, [r5, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	f7fc fb38 	bl	8000d20 <_lseek>
 80046b0:	1c43      	adds	r3, r0, #1
 80046b2:	d102      	bne.n	80046ba <_lseek_r+0x1e>
 80046b4:	682b      	ldr	r3, [r5, #0]
 80046b6:	b103      	cbz	r3, 80046ba <_lseek_r+0x1e>
 80046b8:	6023      	str	r3, [r4, #0]
 80046ba:	bd38      	pop	{r3, r4, r5, pc}
 80046bc:	20000480 	.word	0x20000480

080046c0 <_read_r>:
 80046c0:	b538      	push	{r3, r4, r5, lr}
 80046c2:	4d07      	ldr	r5, [pc, #28]	@ (80046e0 <_read_r+0x20>)
 80046c4:	4604      	mov	r4, r0
 80046c6:	4608      	mov	r0, r1
 80046c8:	4611      	mov	r1, r2
 80046ca:	2200      	movs	r2, #0
 80046cc:	602a      	str	r2, [r5, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	f7fc fac6 	bl	8000c60 <_read>
 80046d4:	1c43      	adds	r3, r0, #1
 80046d6:	d102      	bne.n	80046de <_read_r+0x1e>
 80046d8:	682b      	ldr	r3, [r5, #0]
 80046da:	b103      	cbz	r3, 80046de <_read_r+0x1e>
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	bd38      	pop	{r3, r4, r5, pc}
 80046e0:	20000480 	.word	0x20000480

080046e4 <_write_r>:
 80046e4:	b538      	push	{r3, r4, r5, lr}
 80046e6:	4d07      	ldr	r5, [pc, #28]	@ (8004704 <_write_r+0x20>)
 80046e8:	4604      	mov	r4, r0
 80046ea:	4608      	mov	r0, r1
 80046ec:	4611      	mov	r1, r2
 80046ee:	2200      	movs	r2, #0
 80046f0:	602a      	str	r2, [r5, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	f7fc fad1 	bl	8000c9a <_write>
 80046f8:	1c43      	adds	r3, r0, #1
 80046fa:	d102      	bne.n	8004702 <_write_r+0x1e>
 80046fc:	682b      	ldr	r3, [r5, #0]
 80046fe:	b103      	cbz	r3, 8004702 <_write_r+0x1e>
 8004700:	6023      	str	r3, [r4, #0]
 8004702:	bd38      	pop	{r3, r4, r5, pc}
 8004704:	20000480 	.word	0x20000480

08004708 <__errno>:
 8004708:	4b01      	ldr	r3, [pc, #4]	@ (8004710 <__errno+0x8>)
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	20000018 	.word	0x20000018

08004714 <__libc_init_array>:
 8004714:	b570      	push	{r4, r5, r6, lr}
 8004716:	4d0d      	ldr	r5, [pc, #52]	@ (800474c <__libc_init_array+0x38>)
 8004718:	4c0d      	ldr	r4, [pc, #52]	@ (8004750 <__libc_init_array+0x3c>)
 800471a:	1b64      	subs	r4, r4, r5
 800471c:	10a4      	asrs	r4, r4, #2
 800471e:	2600      	movs	r6, #0
 8004720:	42a6      	cmp	r6, r4
 8004722:	d109      	bne.n	8004738 <__libc_init_array+0x24>
 8004724:	4d0b      	ldr	r5, [pc, #44]	@ (8004754 <__libc_init_array+0x40>)
 8004726:	4c0c      	ldr	r4, [pc, #48]	@ (8004758 <__libc_init_array+0x44>)
 8004728:	f001 fff8 	bl	800671c <_init>
 800472c:	1b64      	subs	r4, r4, r5
 800472e:	10a4      	asrs	r4, r4, #2
 8004730:	2600      	movs	r6, #0
 8004732:	42a6      	cmp	r6, r4
 8004734:	d105      	bne.n	8004742 <__libc_init_array+0x2e>
 8004736:	bd70      	pop	{r4, r5, r6, pc}
 8004738:	f855 3b04 	ldr.w	r3, [r5], #4
 800473c:	4798      	blx	r3
 800473e:	3601      	adds	r6, #1
 8004740:	e7ee      	b.n	8004720 <__libc_init_array+0xc>
 8004742:	f855 3b04 	ldr.w	r3, [r5], #4
 8004746:	4798      	blx	r3
 8004748:	3601      	adds	r6, #1
 800474a:	e7f2      	b.n	8004732 <__libc_init_array+0x1e>
 800474c:	08006b08 	.word	0x08006b08
 8004750:	08006b08 	.word	0x08006b08
 8004754:	08006b08 	.word	0x08006b08
 8004758:	08006b0c 	.word	0x08006b0c

0800475c <__retarget_lock_init_recursive>:
 800475c:	4770      	bx	lr

0800475e <__retarget_lock_acquire_recursive>:
 800475e:	4770      	bx	lr

08004760 <__retarget_lock_release_recursive>:
 8004760:	4770      	bx	lr

08004762 <quorem>:
 8004762:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004766:	6903      	ldr	r3, [r0, #16]
 8004768:	690c      	ldr	r4, [r1, #16]
 800476a:	42a3      	cmp	r3, r4
 800476c:	4607      	mov	r7, r0
 800476e:	db7e      	blt.n	800486e <quorem+0x10c>
 8004770:	3c01      	subs	r4, #1
 8004772:	f101 0814 	add.w	r8, r1, #20
 8004776:	00a3      	lsls	r3, r4, #2
 8004778:	f100 0514 	add.w	r5, r0, #20
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004782:	9301      	str	r3, [sp, #4]
 8004784:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004788:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800478c:	3301      	adds	r3, #1
 800478e:	429a      	cmp	r2, r3
 8004790:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004794:	fbb2 f6f3 	udiv	r6, r2, r3
 8004798:	d32e      	bcc.n	80047f8 <quorem+0x96>
 800479a:	f04f 0a00 	mov.w	sl, #0
 800479e:	46c4      	mov	ip, r8
 80047a0:	46ae      	mov	lr, r5
 80047a2:	46d3      	mov	fp, sl
 80047a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80047a8:	b298      	uxth	r0, r3
 80047aa:	fb06 a000 	mla	r0, r6, r0, sl
 80047ae:	0c02      	lsrs	r2, r0, #16
 80047b0:	0c1b      	lsrs	r3, r3, #16
 80047b2:	fb06 2303 	mla	r3, r6, r3, r2
 80047b6:	f8de 2000 	ldr.w	r2, [lr]
 80047ba:	b280      	uxth	r0, r0
 80047bc:	b292      	uxth	r2, r2
 80047be:	1a12      	subs	r2, r2, r0
 80047c0:	445a      	add	r2, fp
 80047c2:	f8de 0000 	ldr.w	r0, [lr]
 80047c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80047d0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80047d4:	b292      	uxth	r2, r2
 80047d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80047da:	45e1      	cmp	r9, ip
 80047dc:	f84e 2b04 	str.w	r2, [lr], #4
 80047e0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80047e4:	d2de      	bcs.n	80047a4 <quorem+0x42>
 80047e6:	9b00      	ldr	r3, [sp, #0]
 80047e8:	58eb      	ldr	r3, [r5, r3]
 80047ea:	b92b      	cbnz	r3, 80047f8 <quorem+0x96>
 80047ec:	9b01      	ldr	r3, [sp, #4]
 80047ee:	3b04      	subs	r3, #4
 80047f0:	429d      	cmp	r5, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	d32f      	bcc.n	8004856 <quorem+0xf4>
 80047f6:	613c      	str	r4, [r7, #16]
 80047f8:	4638      	mov	r0, r7
 80047fa:	f001 f90d 	bl	8005a18 <__mcmp>
 80047fe:	2800      	cmp	r0, #0
 8004800:	db25      	blt.n	800484e <quorem+0xec>
 8004802:	4629      	mov	r1, r5
 8004804:	2000      	movs	r0, #0
 8004806:	f858 2b04 	ldr.w	r2, [r8], #4
 800480a:	f8d1 c000 	ldr.w	ip, [r1]
 800480e:	fa1f fe82 	uxth.w	lr, r2
 8004812:	fa1f f38c 	uxth.w	r3, ip
 8004816:	eba3 030e 	sub.w	r3, r3, lr
 800481a:	4403      	add	r3, r0
 800481c:	0c12      	lsrs	r2, r2, #16
 800481e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004822:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004826:	b29b      	uxth	r3, r3
 8004828:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800482c:	45c1      	cmp	r9, r8
 800482e:	f841 3b04 	str.w	r3, [r1], #4
 8004832:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004836:	d2e6      	bcs.n	8004806 <quorem+0xa4>
 8004838:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800483c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004840:	b922      	cbnz	r2, 800484c <quorem+0xea>
 8004842:	3b04      	subs	r3, #4
 8004844:	429d      	cmp	r5, r3
 8004846:	461a      	mov	r2, r3
 8004848:	d30b      	bcc.n	8004862 <quorem+0x100>
 800484a:	613c      	str	r4, [r7, #16]
 800484c:	3601      	adds	r6, #1
 800484e:	4630      	mov	r0, r6
 8004850:	b003      	add	sp, #12
 8004852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	3b04      	subs	r3, #4
 800485a:	2a00      	cmp	r2, #0
 800485c:	d1cb      	bne.n	80047f6 <quorem+0x94>
 800485e:	3c01      	subs	r4, #1
 8004860:	e7c6      	b.n	80047f0 <quorem+0x8e>
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	3b04      	subs	r3, #4
 8004866:	2a00      	cmp	r2, #0
 8004868:	d1ef      	bne.n	800484a <quorem+0xe8>
 800486a:	3c01      	subs	r4, #1
 800486c:	e7ea      	b.n	8004844 <quorem+0xe2>
 800486e:	2000      	movs	r0, #0
 8004870:	e7ee      	b.n	8004850 <quorem+0xee>
 8004872:	0000      	movs	r0, r0
 8004874:	0000      	movs	r0, r0
	...

08004878 <_dtoa_r>:
 8004878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800487c:	ed2d 8b02 	vpush	{d8}
 8004880:	69c7      	ldr	r7, [r0, #28]
 8004882:	b091      	sub	sp, #68	@ 0x44
 8004884:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004888:	ec55 4b10 	vmov	r4, r5, d0
 800488c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800488e:	9107      	str	r1, [sp, #28]
 8004890:	4681      	mov	r9, r0
 8004892:	9209      	str	r2, [sp, #36]	@ 0x24
 8004894:	930d      	str	r3, [sp, #52]	@ 0x34
 8004896:	b97f      	cbnz	r7, 80048b8 <_dtoa_r+0x40>
 8004898:	2010      	movs	r0, #16
 800489a:	f000 fd8d 	bl	80053b8 <malloc>
 800489e:	4602      	mov	r2, r0
 80048a0:	f8c9 001c 	str.w	r0, [r9, #28]
 80048a4:	b920      	cbnz	r0, 80048b0 <_dtoa_r+0x38>
 80048a6:	4ba0      	ldr	r3, [pc, #640]	@ (8004b28 <_dtoa_r+0x2b0>)
 80048a8:	21ef      	movs	r1, #239	@ 0xef
 80048aa:	48a0      	ldr	r0, [pc, #640]	@ (8004b2c <_dtoa_r+0x2b4>)
 80048ac:	f001 fbf8 	bl	80060a0 <__assert_func>
 80048b0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80048b4:	6007      	str	r7, [r0, #0]
 80048b6:	60c7      	str	r7, [r0, #12]
 80048b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80048bc:	6819      	ldr	r1, [r3, #0]
 80048be:	b159      	cbz	r1, 80048d8 <_dtoa_r+0x60>
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	604a      	str	r2, [r1, #4]
 80048c4:	2301      	movs	r3, #1
 80048c6:	4093      	lsls	r3, r2
 80048c8:	608b      	str	r3, [r1, #8]
 80048ca:	4648      	mov	r0, r9
 80048cc:	f000 fe6a 	bl	80055a4 <_Bfree>
 80048d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	1e2b      	subs	r3, r5, #0
 80048da:	bfbb      	ittet	lt
 80048dc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80048e0:	9303      	strlt	r3, [sp, #12]
 80048e2:	2300      	movge	r3, #0
 80048e4:	2201      	movlt	r2, #1
 80048e6:	bfac      	ite	ge
 80048e8:	6033      	strge	r3, [r6, #0]
 80048ea:	6032      	strlt	r2, [r6, #0]
 80048ec:	4b90      	ldr	r3, [pc, #576]	@ (8004b30 <_dtoa_r+0x2b8>)
 80048ee:	9e03      	ldr	r6, [sp, #12]
 80048f0:	43b3      	bics	r3, r6
 80048f2:	d110      	bne.n	8004916 <_dtoa_r+0x9e>
 80048f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80048f6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8004900:	4323      	orrs	r3, r4
 8004902:	f000 84de 	beq.w	80052c2 <_dtoa_r+0xa4a>
 8004906:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004908:	4f8a      	ldr	r7, [pc, #552]	@ (8004b34 <_dtoa_r+0x2bc>)
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 84e0 	beq.w	80052d0 <_dtoa_r+0xa58>
 8004910:	1cfb      	adds	r3, r7, #3
 8004912:	f000 bcdb 	b.w	80052cc <_dtoa_r+0xa54>
 8004916:	ed9d 8b02 	vldr	d8, [sp, #8]
 800491a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800491e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004922:	d10a      	bne.n	800493a <_dtoa_r+0xc2>
 8004924:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004926:	2301      	movs	r3, #1
 8004928:	6013      	str	r3, [r2, #0]
 800492a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800492c:	b113      	cbz	r3, 8004934 <_dtoa_r+0xbc>
 800492e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8004930:	4b81      	ldr	r3, [pc, #516]	@ (8004b38 <_dtoa_r+0x2c0>)
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	4f81      	ldr	r7, [pc, #516]	@ (8004b3c <_dtoa_r+0x2c4>)
 8004936:	f000 bccb 	b.w	80052d0 <_dtoa_r+0xa58>
 800493a:	aa0e      	add	r2, sp, #56	@ 0x38
 800493c:	a90f      	add	r1, sp, #60	@ 0x3c
 800493e:	4648      	mov	r0, r9
 8004940:	eeb0 0b48 	vmov.f64	d0, d8
 8004944:	f001 f918 	bl	8005b78 <__d2b>
 8004948:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800494c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800494e:	9001      	str	r0, [sp, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d045      	beq.n	80049e0 <_dtoa_r+0x168>
 8004954:	eeb0 7b48 	vmov.f64	d7, d8
 8004958:	ee18 1a90 	vmov	r1, s17
 800495c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004960:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8004964:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8004968:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800496c:	2500      	movs	r5, #0
 800496e:	ee07 1a90 	vmov	s15, r1
 8004972:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8004976:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8004b10 <_dtoa_r+0x298>
 800497a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800497e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8004b18 <_dtoa_r+0x2a0>
 8004982:	eea7 6b05 	vfma.f64	d6, d7, d5
 8004986:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8004b20 <_dtoa_r+0x2a8>
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8004992:	eeb0 7b46 	vmov.f64	d7, d6
 8004996:	eea4 7b05 	vfma.f64	d7, d4, d5
 800499a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800499e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80049a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a6:	ee16 8a90 	vmov	r8, s13
 80049aa:	d508      	bpl.n	80049be <_dtoa_r+0x146>
 80049ac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80049b0:	eeb4 6b47 	vcmp.f64	d6, d7
 80049b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b8:	bf18      	it	ne
 80049ba:	f108 38ff 	addne.w	r8, r8, #4294967295
 80049be:	f1b8 0f16 	cmp.w	r8, #22
 80049c2:	d82b      	bhi.n	8004a1c <_dtoa_r+0x1a4>
 80049c4:	495e      	ldr	r1, [pc, #376]	@ (8004b40 <_dtoa_r+0x2c8>)
 80049c6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80049ca:	ed91 7b00 	vldr	d7, [r1]
 80049ce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80049d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d6:	d501      	bpl.n	80049dc <_dtoa_r+0x164>
 80049d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80049dc:	2100      	movs	r1, #0
 80049de:	e01e      	b.n	8004a1e <_dtoa_r+0x1a6>
 80049e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80049e2:	4413      	add	r3, r2
 80049e4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80049e8:	2920      	cmp	r1, #32
 80049ea:	bfc1      	itttt	gt
 80049ec:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80049f0:	408e      	lslgt	r6, r1
 80049f2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80049f6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80049fa:	bfd6      	itet	le
 80049fc:	f1c1 0120 	rsble	r1, r1, #32
 8004a00:	4331      	orrgt	r1, r6
 8004a02:	fa04 f101 	lslle.w	r1, r4, r1
 8004a06:	ee07 1a90 	vmov	s15, r1
 8004a0a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	ee17 1a90 	vmov	r1, s15
 8004a14:	2501      	movs	r5, #1
 8004a16:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8004a1a:	e7a8      	b.n	800496e <_dtoa_r+0xf6>
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	1ad2      	subs	r2, r2, r3
 8004a20:	1e53      	subs	r3, r2, #1
 8004a22:	9306      	str	r3, [sp, #24]
 8004a24:	bf45      	ittet	mi
 8004a26:	f1c2 0301 	rsbmi	r3, r2, #1
 8004a2a:	9305      	strmi	r3, [sp, #20]
 8004a2c:	2300      	movpl	r3, #0
 8004a2e:	2300      	movmi	r3, #0
 8004a30:	bf4c      	ite	mi
 8004a32:	9306      	strmi	r3, [sp, #24]
 8004a34:	9305      	strpl	r3, [sp, #20]
 8004a36:	f1b8 0f00 	cmp.w	r8, #0
 8004a3a:	910c      	str	r1, [sp, #48]	@ 0x30
 8004a3c:	db18      	blt.n	8004a70 <_dtoa_r+0x1f8>
 8004a3e:	9b06      	ldr	r3, [sp, #24]
 8004a40:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004a44:	4443      	add	r3, r8
 8004a46:	9306      	str	r3, [sp, #24]
 8004a48:	2300      	movs	r3, #0
 8004a4a:	9a07      	ldr	r2, [sp, #28]
 8004a4c:	2a09      	cmp	r2, #9
 8004a4e:	d849      	bhi.n	8004ae4 <_dtoa_r+0x26c>
 8004a50:	2a05      	cmp	r2, #5
 8004a52:	bfc4      	itt	gt
 8004a54:	3a04      	subgt	r2, #4
 8004a56:	9207      	strgt	r2, [sp, #28]
 8004a58:	9a07      	ldr	r2, [sp, #28]
 8004a5a:	f1a2 0202 	sub.w	r2, r2, #2
 8004a5e:	bfcc      	ite	gt
 8004a60:	2400      	movgt	r4, #0
 8004a62:	2401      	movle	r4, #1
 8004a64:	2a03      	cmp	r2, #3
 8004a66:	d848      	bhi.n	8004afa <_dtoa_r+0x282>
 8004a68:	e8df f002 	tbb	[pc, r2]
 8004a6c:	3a2c2e0b 	.word	0x3a2c2e0b
 8004a70:	9b05      	ldr	r3, [sp, #20]
 8004a72:	2200      	movs	r2, #0
 8004a74:	eba3 0308 	sub.w	r3, r3, r8
 8004a78:	9305      	str	r3, [sp, #20]
 8004a7a:	920a      	str	r2, [sp, #40]	@ 0x28
 8004a7c:	f1c8 0300 	rsb	r3, r8, #0
 8004a80:	e7e3      	b.n	8004a4a <_dtoa_r+0x1d2>
 8004a82:	2200      	movs	r2, #0
 8004a84:	9208      	str	r2, [sp, #32]
 8004a86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a88:	2a00      	cmp	r2, #0
 8004a8a:	dc39      	bgt.n	8004b00 <_dtoa_r+0x288>
 8004a8c:	f04f 0b01 	mov.w	fp, #1
 8004a90:	46da      	mov	sl, fp
 8004a92:	465a      	mov	r2, fp
 8004a94:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8004a98:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	2004      	movs	r0, #4
 8004aa0:	f100 0614 	add.w	r6, r0, #20
 8004aa4:	4296      	cmp	r6, r2
 8004aa6:	d930      	bls.n	8004b0a <_dtoa_r+0x292>
 8004aa8:	6079      	str	r1, [r7, #4]
 8004aaa:	4648      	mov	r0, r9
 8004aac:	9304      	str	r3, [sp, #16]
 8004aae:	f000 fd39 	bl	8005524 <_Balloc>
 8004ab2:	9b04      	ldr	r3, [sp, #16]
 8004ab4:	4607      	mov	r7, r0
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	d146      	bne.n	8004b48 <_dtoa_r+0x2d0>
 8004aba:	4b22      	ldr	r3, [pc, #136]	@ (8004b44 <_dtoa_r+0x2cc>)
 8004abc:	4602      	mov	r2, r0
 8004abe:	f240 11af 	movw	r1, #431	@ 0x1af
 8004ac2:	e6f2      	b.n	80048aa <_dtoa_r+0x32>
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	e7dd      	b.n	8004a84 <_dtoa_r+0x20c>
 8004ac8:	2200      	movs	r2, #0
 8004aca:	9208      	str	r2, [sp, #32]
 8004acc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ace:	eb08 0b02 	add.w	fp, r8, r2
 8004ad2:	f10b 0a01 	add.w	sl, fp, #1
 8004ad6:	4652      	mov	r2, sl
 8004ad8:	2a01      	cmp	r2, #1
 8004ada:	bfb8      	it	lt
 8004adc:	2201      	movlt	r2, #1
 8004ade:	e7db      	b.n	8004a98 <_dtoa_r+0x220>
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	e7f2      	b.n	8004aca <_dtoa_r+0x252>
 8004ae4:	2401      	movs	r4, #1
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8004aec:	f04f 3bff 	mov.w	fp, #4294967295
 8004af0:	2100      	movs	r1, #0
 8004af2:	46da      	mov	sl, fp
 8004af4:	2212      	movs	r2, #18
 8004af6:	9109      	str	r1, [sp, #36]	@ 0x24
 8004af8:	e7ce      	b.n	8004a98 <_dtoa_r+0x220>
 8004afa:	2201      	movs	r2, #1
 8004afc:	9208      	str	r2, [sp, #32]
 8004afe:	e7f5      	b.n	8004aec <_dtoa_r+0x274>
 8004b00:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8004b04:	46da      	mov	sl, fp
 8004b06:	465a      	mov	r2, fp
 8004b08:	e7c6      	b.n	8004a98 <_dtoa_r+0x220>
 8004b0a:	3101      	adds	r1, #1
 8004b0c:	0040      	lsls	r0, r0, #1
 8004b0e:	e7c7      	b.n	8004aa0 <_dtoa_r+0x228>
 8004b10:	636f4361 	.word	0x636f4361
 8004b14:	3fd287a7 	.word	0x3fd287a7
 8004b18:	8b60c8b3 	.word	0x8b60c8b3
 8004b1c:	3fc68a28 	.word	0x3fc68a28
 8004b20:	509f79fb 	.word	0x509f79fb
 8004b24:	3fd34413 	.word	0x3fd34413
 8004b28:	080067d1 	.word	0x080067d1
 8004b2c:	080067e8 	.word	0x080067e8
 8004b30:	7ff00000 	.word	0x7ff00000
 8004b34:	080067cd 	.word	0x080067cd
 8004b38:	080067a1 	.word	0x080067a1
 8004b3c:	080067a0 	.word	0x080067a0
 8004b40:	080068e0 	.word	0x080068e0
 8004b44:	08006840 	.word	0x08006840
 8004b48:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8004b4c:	f1ba 0f0e 	cmp.w	sl, #14
 8004b50:	6010      	str	r0, [r2, #0]
 8004b52:	d86f      	bhi.n	8004c34 <_dtoa_r+0x3bc>
 8004b54:	2c00      	cmp	r4, #0
 8004b56:	d06d      	beq.n	8004c34 <_dtoa_r+0x3bc>
 8004b58:	f1b8 0f00 	cmp.w	r8, #0
 8004b5c:	f340 80c2 	ble.w	8004ce4 <_dtoa_r+0x46c>
 8004b60:	4aca      	ldr	r2, [pc, #808]	@ (8004e8c <_dtoa_r+0x614>)
 8004b62:	f008 010f 	and.w	r1, r8, #15
 8004b66:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004b6a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8004b6e:	ed92 7b00 	vldr	d7, [r2]
 8004b72:	ea4f 1128 	mov.w	r1, r8, asr #4
 8004b76:	f000 80a9 	beq.w	8004ccc <_dtoa_r+0x454>
 8004b7a:	4ac5      	ldr	r2, [pc, #788]	@ (8004e90 <_dtoa_r+0x618>)
 8004b7c:	ed92 6b08 	vldr	d6, [r2, #32]
 8004b80:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8004b84:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004b88:	f001 010f 	and.w	r1, r1, #15
 8004b8c:	2203      	movs	r2, #3
 8004b8e:	48c0      	ldr	r0, [pc, #768]	@ (8004e90 <_dtoa_r+0x618>)
 8004b90:	2900      	cmp	r1, #0
 8004b92:	f040 809d 	bne.w	8004cd0 <_dtoa_r+0x458>
 8004b96:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004b9a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004b9e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004ba2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004ba4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004ba8:	2900      	cmp	r1, #0
 8004baa:	f000 80c1 	beq.w	8004d30 <_dtoa_r+0x4b8>
 8004bae:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8004bb2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bba:	f140 80b9 	bpl.w	8004d30 <_dtoa_r+0x4b8>
 8004bbe:	f1ba 0f00 	cmp.w	sl, #0
 8004bc2:	f000 80b5 	beq.w	8004d30 <_dtoa_r+0x4b8>
 8004bc6:	f1bb 0f00 	cmp.w	fp, #0
 8004bca:	dd31      	ble.n	8004c30 <_dtoa_r+0x3b8>
 8004bcc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8004bd0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004bd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004bd8:	f108 31ff 	add.w	r1, r8, #4294967295
 8004bdc:	9104      	str	r1, [sp, #16]
 8004bde:	3201      	adds	r2, #1
 8004be0:	465c      	mov	r4, fp
 8004be2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004be6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8004bea:	ee07 2a90 	vmov	s15, r2
 8004bee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004bf2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8004bf6:	ee15 2a90 	vmov	r2, s11
 8004bfa:	ec51 0b15 	vmov	r0, r1, d5
 8004bfe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8004c02:	2c00      	cmp	r4, #0
 8004c04:	f040 8098 	bne.w	8004d38 <_dtoa_r+0x4c0>
 8004c08:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8004c0c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004c10:	ec41 0b17 	vmov	d7, r0, r1
 8004c14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c1c:	f300 8261 	bgt.w	80050e2 <_dtoa_r+0x86a>
 8004c20:	eeb1 7b47 	vneg.f64	d7, d7
 8004c24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c2c:	f100 80f5 	bmi.w	8004e1a <_dtoa_r+0x5a2>
 8004c30:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004c34:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8004c36:	2a00      	cmp	r2, #0
 8004c38:	f2c0 812c 	blt.w	8004e94 <_dtoa_r+0x61c>
 8004c3c:	f1b8 0f0e 	cmp.w	r8, #14
 8004c40:	f300 8128 	bgt.w	8004e94 <_dtoa_r+0x61c>
 8004c44:	4b91      	ldr	r3, [pc, #580]	@ (8004e8c <_dtoa_r+0x614>)
 8004c46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004c4a:	ed93 6b00 	vldr	d6, [r3]
 8004c4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	da03      	bge.n	8004c5c <_dtoa_r+0x3e4>
 8004c54:	f1ba 0f00 	cmp.w	sl, #0
 8004c58:	f340 80d2 	ble.w	8004e00 <_dtoa_r+0x588>
 8004c5c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8004c60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004c64:	463e      	mov	r6, r7
 8004c66:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8004c6a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8004c6e:	ee15 3a10 	vmov	r3, s10
 8004c72:	3330      	adds	r3, #48	@ 0x30
 8004c74:	f806 3b01 	strb.w	r3, [r6], #1
 8004c78:	1bf3      	subs	r3, r6, r7
 8004c7a:	459a      	cmp	sl, r3
 8004c7c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8004c80:	eea3 7b46 	vfms.f64	d7, d3, d6
 8004c84:	f040 80f8 	bne.w	8004e78 <_dtoa_r+0x600>
 8004c88:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004c8c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c94:	f300 80dd 	bgt.w	8004e52 <_dtoa_r+0x5da>
 8004c98:	eeb4 7b46 	vcmp.f64	d7, d6
 8004c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca0:	d104      	bne.n	8004cac <_dtoa_r+0x434>
 8004ca2:	ee15 3a10 	vmov	r3, s10
 8004ca6:	07db      	lsls	r3, r3, #31
 8004ca8:	f100 80d3 	bmi.w	8004e52 <_dtoa_r+0x5da>
 8004cac:	9901      	ldr	r1, [sp, #4]
 8004cae:	4648      	mov	r0, r9
 8004cb0:	f000 fc78 	bl	80055a4 <_Bfree>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004cb8:	7033      	strb	r3, [r6, #0]
 8004cba:	f108 0301 	add.w	r3, r8, #1
 8004cbe:	6013      	str	r3, [r2, #0]
 8004cc0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 8304 	beq.w	80052d0 <_dtoa_r+0xa58>
 8004cc8:	601e      	str	r6, [r3, #0]
 8004cca:	e301      	b.n	80052d0 <_dtoa_r+0xa58>
 8004ccc:	2202      	movs	r2, #2
 8004cce:	e75e      	b.n	8004b8e <_dtoa_r+0x316>
 8004cd0:	07cc      	lsls	r4, r1, #31
 8004cd2:	d504      	bpl.n	8004cde <_dtoa_r+0x466>
 8004cd4:	ed90 6b00 	vldr	d6, [r0]
 8004cd8:	3201      	adds	r2, #1
 8004cda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004cde:	1049      	asrs	r1, r1, #1
 8004ce0:	3008      	adds	r0, #8
 8004ce2:	e755      	b.n	8004b90 <_dtoa_r+0x318>
 8004ce4:	d022      	beq.n	8004d2c <_dtoa_r+0x4b4>
 8004ce6:	f1c8 0100 	rsb	r1, r8, #0
 8004cea:	4a68      	ldr	r2, [pc, #416]	@ (8004e8c <_dtoa_r+0x614>)
 8004cec:	f001 000f 	and.w	r0, r1, #15
 8004cf0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8004cf4:	ed92 7b00 	vldr	d7, [r2]
 8004cf8:	ee28 7b07 	vmul.f64	d7, d8, d7
 8004cfc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004d00:	4863      	ldr	r0, [pc, #396]	@ (8004e90 <_dtoa_r+0x618>)
 8004d02:	1109      	asrs	r1, r1, #4
 8004d04:	2400      	movs	r4, #0
 8004d06:	2202      	movs	r2, #2
 8004d08:	b929      	cbnz	r1, 8004d16 <_dtoa_r+0x49e>
 8004d0a:	2c00      	cmp	r4, #0
 8004d0c:	f43f af49 	beq.w	8004ba2 <_dtoa_r+0x32a>
 8004d10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004d14:	e745      	b.n	8004ba2 <_dtoa_r+0x32a>
 8004d16:	07ce      	lsls	r6, r1, #31
 8004d18:	d505      	bpl.n	8004d26 <_dtoa_r+0x4ae>
 8004d1a:	ed90 6b00 	vldr	d6, [r0]
 8004d1e:	3201      	adds	r2, #1
 8004d20:	2401      	movs	r4, #1
 8004d22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004d26:	1049      	asrs	r1, r1, #1
 8004d28:	3008      	adds	r0, #8
 8004d2a:	e7ed      	b.n	8004d08 <_dtoa_r+0x490>
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	e738      	b.n	8004ba2 <_dtoa_r+0x32a>
 8004d30:	f8cd 8010 	str.w	r8, [sp, #16]
 8004d34:	4654      	mov	r4, sl
 8004d36:	e754      	b.n	8004be2 <_dtoa_r+0x36a>
 8004d38:	4a54      	ldr	r2, [pc, #336]	@ (8004e8c <_dtoa_r+0x614>)
 8004d3a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8004d3e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8004d42:	9a08      	ldr	r2, [sp, #32]
 8004d44:	ec41 0b17 	vmov	d7, r0, r1
 8004d48:	443c      	add	r4, r7
 8004d4a:	b34a      	cbz	r2, 8004da0 <_dtoa_r+0x528>
 8004d4c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8004d50:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8004d54:	463e      	mov	r6, r7
 8004d56:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8004d5a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8004d5e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004d62:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004d66:	ee14 2a90 	vmov	r2, s9
 8004d6a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004d6e:	3230      	adds	r2, #48	@ 0x30
 8004d70:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004d74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d7c:	f806 2b01 	strb.w	r2, [r6], #1
 8004d80:	d438      	bmi.n	8004df4 <_dtoa_r+0x57c>
 8004d82:	ee32 5b46 	vsub.f64	d5, d2, d6
 8004d86:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8004d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d8e:	d462      	bmi.n	8004e56 <_dtoa_r+0x5de>
 8004d90:	42a6      	cmp	r6, r4
 8004d92:	f43f af4d 	beq.w	8004c30 <_dtoa_r+0x3b8>
 8004d96:	ee27 7b03 	vmul.f64	d7, d7, d3
 8004d9a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004d9e:	e7e0      	b.n	8004d62 <_dtoa_r+0x4ea>
 8004da0:	4621      	mov	r1, r4
 8004da2:	463e      	mov	r6, r7
 8004da4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004da8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8004dac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004db0:	ee14 2a90 	vmov	r2, s9
 8004db4:	3230      	adds	r2, #48	@ 0x30
 8004db6:	f806 2b01 	strb.w	r2, [r6], #1
 8004dba:	42a6      	cmp	r6, r4
 8004dbc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004dc0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004dc4:	d119      	bne.n	8004dfa <_dtoa_r+0x582>
 8004dc6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8004dca:	ee37 4b05 	vadd.f64	d4, d7, d5
 8004dce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8004dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd6:	dc3e      	bgt.n	8004e56 <_dtoa_r+0x5de>
 8004dd8:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004ddc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8004de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de4:	f57f af24 	bpl.w	8004c30 <_dtoa_r+0x3b8>
 8004de8:	460e      	mov	r6, r1
 8004dea:	3901      	subs	r1, #1
 8004dec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004df0:	2b30      	cmp	r3, #48	@ 0x30
 8004df2:	d0f9      	beq.n	8004de8 <_dtoa_r+0x570>
 8004df4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004df8:	e758      	b.n	8004cac <_dtoa_r+0x434>
 8004dfa:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004dfe:	e7d5      	b.n	8004dac <_dtoa_r+0x534>
 8004e00:	d10b      	bne.n	8004e1a <_dtoa_r+0x5a2>
 8004e02:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8004e06:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004e0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e16:	f2c0 8161 	blt.w	80050dc <_dtoa_r+0x864>
 8004e1a:	2400      	movs	r4, #0
 8004e1c:	4625      	mov	r5, r4
 8004e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e20:	43db      	mvns	r3, r3
 8004e22:	9304      	str	r3, [sp, #16]
 8004e24:	463e      	mov	r6, r7
 8004e26:	f04f 0800 	mov.w	r8, #0
 8004e2a:	4621      	mov	r1, r4
 8004e2c:	4648      	mov	r0, r9
 8004e2e:	f000 fbb9 	bl	80055a4 <_Bfree>
 8004e32:	2d00      	cmp	r5, #0
 8004e34:	d0de      	beq.n	8004df4 <_dtoa_r+0x57c>
 8004e36:	f1b8 0f00 	cmp.w	r8, #0
 8004e3a:	d005      	beq.n	8004e48 <_dtoa_r+0x5d0>
 8004e3c:	45a8      	cmp	r8, r5
 8004e3e:	d003      	beq.n	8004e48 <_dtoa_r+0x5d0>
 8004e40:	4641      	mov	r1, r8
 8004e42:	4648      	mov	r0, r9
 8004e44:	f000 fbae 	bl	80055a4 <_Bfree>
 8004e48:	4629      	mov	r1, r5
 8004e4a:	4648      	mov	r0, r9
 8004e4c:	f000 fbaa 	bl	80055a4 <_Bfree>
 8004e50:	e7d0      	b.n	8004df4 <_dtoa_r+0x57c>
 8004e52:	f8cd 8010 	str.w	r8, [sp, #16]
 8004e56:	4633      	mov	r3, r6
 8004e58:	461e      	mov	r6, r3
 8004e5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e5e:	2a39      	cmp	r2, #57	@ 0x39
 8004e60:	d106      	bne.n	8004e70 <_dtoa_r+0x5f8>
 8004e62:	429f      	cmp	r7, r3
 8004e64:	d1f8      	bne.n	8004e58 <_dtoa_r+0x5e0>
 8004e66:	9a04      	ldr	r2, [sp, #16]
 8004e68:	3201      	adds	r2, #1
 8004e6a:	9204      	str	r2, [sp, #16]
 8004e6c:	2230      	movs	r2, #48	@ 0x30
 8004e6e:	703a      	strb	r2, [r7, #0]
 8004e70:	781a      	ldrb	r2, [r3, #0]
 8004e72:	3201      	adds	r2, #1
 8004e74:	701a      	strb	r2, [r3, #0]
 8004e76:	e7bd      	b.n	8004df4 <_dtoa_r+0x57c>
 8004e78:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004e7c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e84:	f47f aeef 	bne.w	8004c66 <_dtoa_r+0x3ee>
 8004e88:	e710      	b.n	8004cac <_dtoa_r+0x434>
 8004e8a:	bf00      	nop
 8004e8c:	080068e0 	.word	0x080068e0
 8004e90:	080068b8 	.word	0x080068b8
 8004e94:	9908      	ldr	r1, [sp, #32]
 8004e96:	2900      	cmp	r1, #0
 8004e98:	f000 80e3 	beq.w	8005062 <_dtoa_r+0x7ea>
 8004e9c:	9907      	ldr	r1, [sp, #28]
 8004e9e:	2901      	cmp	r1, #1
 8004ea0:	f300 80c8 	bgt.w	8005034 <_dtoa_r+0x7bc>
 8004ea4:	2d00      	cmp	r5, #0
 8004ea6:	f000 80c1 	beq.w	800502c <_dtoa_r+0x7b4>
 8004eaa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004eae:	9e05      	ldr	r6, [sp, #20]
 8004eb0:	461c      	mov	r4, r3
 8004eb2:	9304      	str	r3, [sp, #16]
 8004eb4:	9b05      	ldr	r3, [sp, #20]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	9305      	str	r3, [sp, #20]
 8004eba:	9b06      	ldr	r3, [sp, #24]
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	4413      	add	r3, r2
 8004ec0:	4648      	mov	r0, r9
 8004ec2:	9306      	str	r3, [sp, #24]
 8004ec4:	f000 fc22 	bl	800570c <__i2b>
 8004ec8:	9b04      	ldr	r3, [sp, #16]
 8004eca:	4605      	mov	r5, r0
 8004ecc:	b166      	cbz	r6, 8004ee8 <_dtoa_r+0x670>
 8004ece:	9a06      	ldr	r2, [sp, #24]
 8004ed0:	2a00      	cmp	r2, #0
 8004ed2:	dd09      	ble.n	8004ee8 <_dtoa_r+0x670>
 8004ed4:	42b2      	cmp	r2, r6
 8004ed6:	9905      	ldr	r1, [sp, #20]
 8004ed8:	bfa8      	it	ge
 8004eda:	4632      	movge	r2, r6
 8004edc:	1a89      	subs	r1, r1, r2
 8004ede:	9105      	str	r1, [sp, #20]
 8004ee0:	9906      	ldr	r1, [sp, #24]
 8004ee2:	1ab6      	subs	r6, r6, r2
 8004ee4:	1a8a      	subs	r2, r1, r2
 8004ee6:	9206      	str	r2, [sp, #24]
 8004ee8:	b1fb      	cbz	r3, 8004f2a <_dtoa_r+0x6b2>
 8004eea:	9a08      	ldr	r2, [sp, #32]
 8004eec:	2a00      	cmp	r2, #0
 8004eee:	f000 80bc 	beq.w	800506a <_dtoa_r+0x7f2>
 8004ef2:	b19c      	cbz	r4, 8004f1c <_dtoa_r+0x6a4>
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	4622      	mov	r2, r4
 8004ef8:	4648      	mov	r0, r9
 8004efa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004efc:	f000 fcc6 	bl	800588c <__pow5mult>
 8004f00:	9a01      	ldr	r2, [sp, #4]
 8004f02:	4601      	mov	r1, r0
 8004f04:	4605      	mov	r5, r0
 8004f06:	4648      	mov	r0, r9
 8004f08:	f000 fc16 	bl	8005738 <__multiply>
 8004f0c:	9901      	ldr	r1, [sp, #4]
 8004f0e:	9004      	str	r0, [sp, #16]
 8004f10:	4648      	mov	r0, r9
 8004f12:	f000 fb47 	bl	80055a4 <_Bfree>
 8004f16:	9a04      	ldr	r2, [sp, #16]
 8004f18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f1a:	9201      	str	r2, [sp, #4]
 8004f1c:	1b1a      	subs	r2, r3, r4
 8004f1e:	d004      	beq.n	8004f2a <_dtoa_r+0x6b2>
 8004f20:	9901      	ldr	r1, [sp, #4]
 8004f22:	4648      	mov	r0, r9
 8004f24:	f000 fcb2 	bl	800588c <__pow5mult>
 8004f28:	9001      	str	r0, [sp, #4]
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	4648      	mov	r0, r9
 8004f2e:	f000 fbed 	bl	800570c <__i2b>
 8004f32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f34:	4604      	mov	r4, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 81d0 	beq.w	80052dc <_dtoa_r+0xa64>
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	4601      	mov	r1, r0
 8004f40:	4648      	mov	r0, r9
 8004f42:	f000 fca3 	bl	800588c <__pow5mult>
 8004f46:	9b07      	ldr	r3, [sp, #28]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	f300 8095 	bgt.w	800507a <_dtoa_r+0x802>
 8004f50:	9b02      	ldr	r3, [sp, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f040 808b 	bne.w	800506e <_dtoa_r+0x7f6>
 8004f58:	9b03      	ldr	r3, [sp, #12]
 8004f5a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8004f5e:	2a00      	cmp	r2, #0
 8004f60:	f040 8087 	bne.w	8005072 <_dtoa_r+0x7fa>
 8004f64:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f68:	0d12      	lsrs	r2, r2, #20
 8004f6a:	0512      	lsls	r2, r2, #20
 8004f6c:	2a00      	cmp	r2, #0
 8004f6e:	f000 8082 	beq.w	8005076 <_dtoa_r+0x7fe>
 8004f72:	9b05      	ldr	r3, [sp, #20]
 8004f74:	3301      	adds	r3, #1
 8004f76:	9305      	str	r3, [sp, #20]
 8004f78:	9b06      	ldr	r3, [sp, #24]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	9306      	str	r3, [sp, #24]
 8004f7e:	2301      	movs	r3, #1
 8004f80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 81af 	beq.w	80052e8 <_dtoa_r+0xa70>
 8004f8a:	6922      	ldr	r2, [r4, #16]
 8004f8c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004f90:	6910      	ldr	r0, [r2, #16]
 8004f92:	f000 fb6f 	bl	8005674 <__hi0bits>
 8004f96:	f1c0 0020 	rsb	r0, r0, #32
 8004f9a:	9b06      	ldr	r3, [sp, #24]
 8004f9c:	4418      	add	r0, r3
 8004f9e:	f010 001f 	ands.w	r0, r0, #31
 8004fa2:	d076      	beq.n	8005092 <_dtoa_r+0x81a>
 8004fa4:	f1c0 0220 	rsb	r2, r0, #32
 8004fa8:	2a04      	cmp	r2, #4
 8004faa:	dd69      	ble.n	8005080 <_dtoa_r+0x808>
 8004fac:	9b05      	ldr	r3, [sp, #20]
 8004fae:	f1c0 001c 	rsb	r0, r0, #28
 8004fb2:	4403      	add	r3, r0
 8004fb4:	9305      	str	r3, [sp, #20]
 8004fb6:	9b06      	ldr	r3, [sp, #24]
 8004fb8:	4406      	add	r6, r0
 8004fba:	4403      	add	r3, r0
 8004fbc:	9306      	str	r3, [sp, #24]
 8004fbe:	9b05      	ldr	r3, [sp, #20]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	dd05      	ble.n	8004fd0 <_dtoa_r+0x758>
 8004fc4:	9901      	ldr	r1, [sp, #4]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	4648      	mov	r0, r9
 8004fca:	f000 fcb9 	bl	8005940 <__lshift>
 8004fce:	9001      	str	r0, [sp, #4]
 8004fd0:	9b06      	ldr	r3, [sp, #24]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	dd05      	ble.n	8004fe2 <_dtoa_r+0x76a>
 8004fd6:	4621      	mov	r1, r4
 8004fd8:	461a      	mov	r2, r3
 8004fda:	4648      	mov	r0, r9
 8004fdc:	f000 fcb0 	bl	8005940 <__lshift>
 8004fe0:	4604      	mov	r4, r0
 8004fe2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d056      	beq.n	8005096 <_dtoa_r+0x81e>
 8004fe8:	9801      	ldr	r0, [sp, #4]
 8004fea:	4621      	mov	r1, r4
 8004fec:	f000 fd14 	bl	8005a18 <__mcmp>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	da50      	bge.n	8005096 <_dtoa_r+0x81e>
 8004ff4:	f108 33ff 	add.w	r3, r8, #4294967295
 8004ff8:	9304      	str	r3, [sp, #16]
 8004ffa:	9901      	ldr	r1, [sp, #4]
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	220a      	movs	r2, #10
 8005000:	4648      	mov	r0, r9
 8005002:	f000 faf1 	bl	80055e8 <__multadd>
 8005006:	9b08      	ldr	r3, [sp, #32]
 8005008:	9001      	str	r0, [sp, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 816e 	beq.w	80052ec <_dtoa_r+0xa74>
 8005010:	4629      	mov	r1, r5
 8005012:	2300      	movs	r3, #0
 8005014:	220a      	movs	r2, #10
 8005016:	4648      	mov	r0, r9
 8005018:	f000 fae6 	bl	80055e8 <__multadd>
 800501c:	f1bb 0f00 	cmp.w	fp, #0
 8005020:	4605      	mov	r5, r0
 8005022:	dc64      	bgt.n	80050ee <_dtoa_r+0x876>
 8005024:	9b07      	ldr	r3, [sp, #28]
 8005026:	2b02      	cmp	r3, #2
 8005028:	dc3e      	bgt.n	80050a8 <_dtoa_r+0x830>
 800502a:	e060      	b.n	80050ee <_dtoa_r+0x876>
 800502c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800502e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005032:	e73c      	b.n	8004eae <_dtoa_r+0x636>
 8005034:	f10a 34ff 	add.w	r4, sl, #4294967295
 8005038:	42a3      	cmp	r3, r4
 800503a:	bfbf      	itttt	lt
 800503c:	1ae2      	sublt	r2, r4, r3
 800503e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005040:	189b      	addlt	r3, r3, r2
 8005042:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8005044:	bfae      	itee	ge
 8005046:	1b1c      	subge	r4, r3, r4
 8005048:	4623      	movlt	r3, r4
 800504a:	2400      	movlt	r4, #0
 800504c:	f1ba 0f00 	cmp.w	sl, #0
 8005050:	bfb5      	itete	lt
 8005052:	9a05      	ldrlt	r2, [sp, #20]
 8005054:	9e05      	ldrge	r6, [sp, #20]
 8005056:	eba2 060a 	sublt.w	r6, r2, sl
 800505a:	4652      	movge	r2, sl
 800505c:	bfb8      	it	lt
 800505e:	2200      	movlt	r2, #0
 8005060:	e727      	b.n	8004eb2 <_dtoa_r+0x63a>
 8005062:	9e05      	ldr	r6, [sp, #20]
 8005064:	9d08      	ldr	r5, [sp, #32]
 8005066:	461c      	mov	r4, r3
 8005068:	e730      	b.n	8004ecc <_dtoa_r+0x654>
 800506a:	461a      	mov	r2, r3
 800506c:	e758      	b.n	8004f20 <_dtoa_r+0x6a8>
 800506e:	2300      	movs	r3, #0
 8005070:	e786      	b.n	8004f80 <_dtoa_r+0x708>
 8005072:	9b02      	ldr	r3, [sp, #8]
 8005074:	e784      	b.n	8004f80 <_dtoa_r+0x708>
 8005076:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005078:	e783      	b.n	8004f82 <_dtoa_r+0x70a>
 800507a:	2300      	movs	r3, #0
 800507c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800507e:	e784      	b.n	8004f8a <_dtoa_r+0x712>
 8005080:	d09d      	beq.n	8004fbe <_dtoa_r+0x746>
 8005082:	9b05      	ldr	r3, [sp, #20]
 8005084:	321c      	adds	r2, #28
 8005086:	4413      	add	r3, r2
 8005088:	9305      	str	r3, [sp, #20]
 800508a:	9b06      	ldr	r3, [sp, #24]
 800508c:	4416      	add	r6, r2
 800508e:	4413      	add	r3, r2
 8005090:	e794      	b.n	8004fbc <_dtoa_r+0x744>
 8005092:	4602      	mov	r2, r0
 8005094:	e7f5      	b.n	8005082 <_dtoa_r+0x80a>
 8005096:	f1ba 0f00 	cmp.w	sl, #0
 800509a:	f8cd 8010 	str.w	r8, [sp, #16]
 800509e:	46d3      	mov	fp, sl
 80050a0:	dc21      	bgt.n	80050e6 <_dtoa_r+0x86e>
 80050a2:	9b07      	ldr	r3, [sp, #28]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	dd1e      	ble.n	80050e6 <_dtoa_r+0x86e>
 80050a8:	f1bb 0f00 	cmp.w	fp, #0
 80050ac:	f47f aeb7 	bne.w	8004e1e <_dtoa_r+0x5a6>
 80050b0:	4621      	mov	r1, r4
 80050b2:	465b      	mov	r3, fp
 80050b4:	2205      	movs	r2, #5
 80050b6:	4648      	mov	r0, r9
 80050b8:	f000 fa96 	bl	80055e8 <__multadd>
 80050bc:	4601      	mov	r1, r0
 80050be:	4604      	mov	r4, r0
 80050c0:	9801      	ldr	r0, [sp, #4]
 80050c2:	f000 fca9 	bl	8005a18 <__mcmp>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	f77f aea9 	ble.w	8004e1e <_dtoa_r+0x5a6>
 80050cc:	463e      	mov	r6, r7
 80050ce:	2331      	movs	r3, #49	@ 0x31
 80050d0:	f806 3b01 	strb.w	r3, [r6], #1
 80050d4:	9b04      	ldr	r3, [sp, #16]
 80050d6:	3301      	adds	r3, #1
 80050d8:	9304      	str	r3, [sp, #16]
 80050da:	e6a4      	b.n	8004e26 <_dtoa_r+0x5ae>
 80050dc:	f8cd 8010 	str.w	r8, [sp, #16]
 80050e0:	4654      	mov	r4, sl
 80050e2:	4625      	mov	r5, r4
 80050e4:	e7f2      	b.n	80050cc <_dtoa_r+0x854>
 80050e6:	9b08      	ldr	r3, [sp, #32]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 8103 	beq.w	80052f4 <_dtoa_r+0xa7c>
 80050ee:	2e00      	cmp	r6, #0
 80050f0:	dd05      	ble.n	80050fe <_dtoa_r+0x886>
 80050f2:	4629      	mov	r1, r5
 80050f4:	4632      	mov	r2, r6
 80050f6:	4648      	mov	r0, r9
 80050f8:	f000 fc22 	bl	8005940 <__lshift>
 80050fc:	4605      	mov	r5, r0
 80050fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005100:	2b00      	cmp	r3, #0
 8005102:	d058      	beq.n	80051b6 <_dtoa_r+0x93e>
 8005104:	6869      	ldr	r1, [r5, #4]
 8005106:	4648      	mov	r0, r9
 8005108:	f000 fa0c 	bl	8005524 <_Balloc>
 800510c:	4606      	mov	r6, r0
 800510e:	b928      	cbnz	r0, 800511c <_dtoa_r+0x8a4>
 8005110:	4b82      	ldr	r3, [pc, #520]	@ (800531c <_dtoa_r+0xaa4>)
 8005112:	4602      	mov	r2, r0
 8005114:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005118:	f7ff bbc7 	b.w	80048aa <_dtoa_r+0x32>
 800511c:	692a      	ldr	r2, [r5, #16]
 800511e:	3202      	adds	r2, #2
 8005120:	0092      	lsls	r2, r2, #2
 8005122:	f105 010c 	add.w	r1, r5, #12
 8005126:	300c      	adds	r0, #12
 8005128:	f000 ffac 	bl	8006084 <memcpy>
 800512c:	2201      	movs	r2, #1
 800512e:	4631      	mov	r1, r6
 8005130:	4648      	mov	r0, r9
 8005132:	f000 fc05 	bl	8005940 <__lshift>
 8005136:	1c7b      	adds	r3, r7, #1
 8005138:	9305      	str	r3, [sp, #20]
 800513a:	eb07 030b 	add.w	r3, r7, fp
 800513e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005140:	9b02      	ldr	r3, [sp, #8]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	46a8      	mov	r8, r5
 8005148:	9308      	str	r3, [sp, #32]
 800514a:	4605      	mov	r5, r0
 800514c:	9b05      	ldr	r3, [sp, #20]
 800514e:	9801      	ldr	r0, [sp, #4]
 8005150:	4621      	mov	r1, r4
 8005152:	f103 3bff 	add.w	fp, r3, #4294967295
 8005156:	f7ff fb04 	bl	8004762 <quorem>
 800515a:	4641      	mov	r1, r8
 800515c:	9002      	str	r0, [sp, #8]
 800515e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8005162:	9801      	ldr	r0, [sp, #4]
 8005164:	f000 fc58 	bl	8005a18 <__mcmp>
 8005168:	462a      	mov	r2, r5
 800516a:	9006      	str	r0, [sp, #24]
 800516c:	4621      	mov	r1, r4
 800516e:	4648      	mov	r0, r9
 8005170:	f000 fc6e 	bl	8005a50 <__mdiff>
 8005174:	68c2      	ldr	r2, [r0, #12]
 8005176:	4606      	mov	r6, r0
 8005178:	b9fa      	cbnz	r2, 80051ba <_dtoa_r+0x942>
 800517a:	4601      	mov	r1, r0
 800517c:	9801      	ldr	r0, [sp, #4]
 800517e:	f000 fc4b 	bl	8005a18 <__mcmp>
 8005182:	4602      	mov	r2, r0
 8005184:	4631      	mov	r1, r6
 8005186:	4648      	mov	r0, r9
 8005188:	920a      	str	r2, [sp, #40]	@ 0x28
 800518a:	f000 fa0b 	bl	80055a4 <_Bfree>
 800518e:	9b07      	ldr	r3, [sp, #28]
 8005190:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005192:	9e05      	ldr	r6, [sp, #20]
 8005194:	ea43 0102 	orr.w	r1, r3, r2
 8005198:	9b08      	ldr	r3, [sp, #32]
 800519a:	4319      	orrs	r1, r3
 800519c:	d10f      	bne.n	80051be <_dtoa_r+0x946>
 800519e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80051a2:	d028      	beq.n	80051f6 <_dtoa_r+0x97e>
 80051a4:	9b06      	ldr	r3, [sp, #24]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	dd02      	ble.n	80051b0 <_dtoa_r+0x938>
 80051aa:	9b02      	ldr	r3, [sp, #8]
 80051ac:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80051b0:	f88b a000 	strb.w	sl, [fp]
 80051b4:	e639      	b.n	8004e2a <_dtoa_r+0x5b2>
 80051b6:	4628      	mov	r0, r5
 80051b8:	e7bd      	b.n	8005136 <_dtoa_r+0x8be>
 80051ba:	2201      	movs	r2, #1
 80051bc:	e7e2      	b.n	8005184 <_dtoa_r+0x90c>
 80051be:	9b06      	ldr	r3, [sp, #24]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	db04      	blt.n	80051ce <_dtoa_r+0x956>
 80051c4:	9907      	ldr	r1, [sp, #28]
 80051c6:	430b      	orrs	r3, r1
 80051c8:	9908      	ldr	r1, [sp, #32]
 80051ca:	430b      	orrs	r3, r1
 80051cc:	d120      	bne.n	8005210 <_dtoa_r+0x998>
 80051ce:	2a00      	cmp	r2, #0
 80051d0:	ddee      	ble.n	80051b0 <_dtoa_r+0x938>
 80051d2:	9901      	ldr	r1, [sp, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	4648      	mov	r0, r9
 80051d8:	f000 fbb2 	bl	8005940 <__lshift>
 80051dc:	4621      	mov	r1, r4
 80051de:	9001      	str	r0, [sp, #4]
 80051e0:	f000 fc1a 	bl	8005a18 <__mcmp>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	dc03      	bgt.n	80051f0 <_dtoa_r+0x978>
 80051e8:	d1e2      	bne.n	80051b0 <_dtoa_r+0x938>
 80051ea:	f01a 0f01 	tst.w	sl, #1
 80051ee:	d0df      	beq.n	80051b0 <_dtoa_r+0x938>
 80051f0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80051f4:	d1d9      	bne.n	80051aa <_dtoa_r+0x932>
 80051f6:	2339      	movs	r3, #57	@ 0x39
 80051f8:	f88b 3000 	strb.w	r3, [fp]
 80051fc:	4633      	mov	r3, r6
 80051fe:	461e      	mov	r6, r3
 8005200:	3b01      	subs	r3, #1
 8005202:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005206:	2a39      	cmp	r2, #57	@ 0x39
 8005208:	d053      	beq.n	80052b2 <_dtoa_r+0xa3a>
 800520a:	3201      	adds	r2, #1
 800520c:	701a      	strb	r2, [r3, #0]
 800520e:	e60c      	b.n	8004e2a <_dtoa_r+0x5b2>
 8005210:	2a00      	cmp	r2, #0
 8005212:	dd07      	ble.n	8005224 <_dtoa_r+0x9ac>
 8005214:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005218:	d0ed      	beq.n	80051f6 <_dtoa_r+0x97e>
 800521a:	f10a 0301 	add.w	r3, sl, #1
 800521e:	f88b 3000 	strb.w	r3, [fp]
 8005222:	e602      	b.n	8004e2a <_dtoa_r+0x5b2>
 8005224:	9b05      	ldr	r3, [sp, #20]
 8005226:	9a05      	ldr	r2, [sp, #20]
 8005228:	f803 ac01 	strb.w	sl, [r3, #-1]
 800522c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800522e:	4293      	cmp	r3, r2
 8005230:	d029      	beq.n	8005286 <_dtoa_r+0xa0e>
 8005232:	9901      	ldr	r1, [sp, #4]
 8005234:	2300      	movs	r3, #0
 8005236:	220a      	movs	r2, #10
 8005238:	4648      	mov	r0, r9
 800523a:	f000 f9d5 	bl	80055e8 <__multadd>
 800523e:	45a8      	cmp	r8, r5
 8005240:	9001      	str	r0, [sp, #4]
 8005242:	f04f 0300 	mov.w	r3, #0
 8005246:	f04f 020a 	mov.w	r2, #10
 800524a:	4641      	mov	r1, r8
 800524c:	4648      	mov	r0, r9
 800524e:	d107      	bne.n	8005260 <_dtoa_r+0x9e8>
 8005250:	f000 f9ca 	bl	80055e8 <__multadd>
 8005254:	4680      	mov	r8, r0
 8005256:	4605      	mov	r5, r0
 8005258:	9b05      	ldr	r3, [sp, #20]
 800525a:	3301      	adds	r3, #1
 800525c:	9305      	str	r3, [sp, #20]
 800525e:	e775      	b.n	800514c <_dtoa_r+0x8d4>
 8005260:	f000 f9c2 	bl	80055e8 <__multadd>
 8005264:	4629      	mov	r1, r5
 8005266:	4680      	mov	r8, r0
 8005268:	2300      	movs	r3, #0
 800526a:	220a      	movs	r2, #10
 800526c:	4648      	mov	r0, r9
 800526e:	f000 f9bb 	bl	80055e8 <__multadd>
 8005272:	4605      	mov	r5, r0
 8005274:	e7f0      	b.n	8005258 <_dtoa_r+0x9e0>
 8005276:	f1bb 0f00 	cmp.w	fp, #0
 800527a:	bfcc      	ite	gt
 800527c:	465e      	movgt	r6, fp
 800527e:	2601      	movle	r6, #1
 8005280:	443e      	add	r6, r7
 8005282:	f04f 0800 	mov.w	r8, #0
 8005286:	9901      	ldr	r1, [sp, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	4648      	mov	r0, r9
 800528c:	f000 fb58 	bl	8005940 <__lshift>
 8005290:	4621      	mov	r1, r4
 8005292:	9001      	str	r0, [sp, #4]
 8005294:	f000 fbc0 	bl	8005a18 <__mcmp>
 8005298:	2800      	cmp	r0, #0
 800529a:	dcaf      	bgt.n	80051fc <_dtoa_r+0x984>
 800529c:	d102      	bne.n	80052a4 <_dtoa_r+0xa2c>
 800529e:	f01a 0f01 	tst.w	sl, #1
 80052a2:	d1ab      	bne.n	80051fc <_dtoa_r+0x984>
 80052a4:	4633      	mov	r3, r6
 80052a6:	461e      	mov	r6, r3
 80052a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052ac:	2a30      	cmp	r2, #48	@ 0x30
 80052ae:	d0fa      	beq.n	80052a6 <_dtoa_r+0xa2e>
 80052b0:	e5bb      	b.n	8004e2a <_dtoa_r+0x5b2>
 80052b2:	429f      	cmp	r7, r3
 80052b4:	d1a3      	bne.n	80051fe <_dtoa_r+0x986>
 80052b6:	9b04      	ldr	r3, [sp, #16]
 80052b8:	3301      	adds	r3, #1
 80052ba:	9304      	str	r3, [sp, #16]
 80052bc:	2331      	movs	r3, #49	@ 0x31
 80052be:	703b      	strb	r3, [r7, #0]
 80052c0:	e5b3      	b.n	8004e2a <_dtoa_r+0x5b2>
 80052c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80052c4:	4f16      	ldr	r7, [pc, #88]	@ (8005320 <_dtoa_r+0xaa8>)
 80052c6:	b11b      	cbz	r3, 80052d0 <_dtoa_r+0xa58>
 80052c8:	f107 0308 	add.w	r3, r7, #8
 80052cc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80052ce:	6013      	str	r3, [r2, #0]
 80052d0:	4638      	mov	r0, r7
 80052d2:	b011      	add	sp, #68	@ 0x44
 80052d4:	ecbd 8b02 	vpop	{d8}
 80052d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052dc:	9b07      	ldr	r3, [sp, #28]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	f77f ae36 	ble.w	8004f50 <_dtoa_r+0x6d8>
 80052e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052e8:	2001      	movs	r0, #1
 80052ea:	e656      	b.n	8004f9a <_dtoa_r+0x722>
 80052ec:	f1bb 0f00 	cmp.w	fp, #0
 80052f0:	f77f aed7 	ble.w	80050a2 <_dtoa_r+0x82a>
 80052f4:	463e      	mov	r6, r7
 80052f6:	9801      	ldr	r0, [sp, #4]
 80052f8:	4621      	mov	r1, r4
 80052fa:	f7ff fa32 	bl	8004762 <quorem>
 80052fe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8005302:	f806 ab01 	strb.w	sl, [r6], #1
 8005306:	1bf2      	subs	r2, r6, r7
 8005308:	4593      	cmp	fp, r2
 800530a:	ddb4      	ble.n	8005276 <_dtoa_r+0x9fe>
 800530c:	9901      	ldr	r1, [sp, #4]
 800530e:	2300      	movs	r3, #0
 8005310:	220a      	movs	r2, #10
 8005312:	4648      	mov	r0, r9
 8005314:	f000 f968 	bl	80055e8 <__multadd>
 8005318:	9001      	str	r0, [sp, #4]
 800531a:	e7ec      	b.n	80052f6 <_dtoa_r+0xa7e>
 800531c:	08006840 	.word	0x08006840
 8005320:	080067c4 	.word	0x080067c4

08005324 <_free_r>:
 8005324:	b538      	push	{r3, r4, r5, lr}
 8005326:	4605      	mov	r5, r0
 8005328:	2900      	cmp	r1, #0
 800532a:	d041      	beq.n	80053b0 <_free_r+0x8c>
 800532c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005330:	1f0c      	subs	r4, r1, #4
 8005332:	2b00      	cmp	r3, #0
 8005334:	bfb8      	it	lt
 8005336:	18e4      	addlt	r4, r4, r3
 8005338:	f000 f8e8 	bl	800550c <__malloc_lock>
 800533c:	4a1d      	ldr	r2, [pc, #116]	@ (80053b4 <_free_r+0x90>)
 800533e:	6813      	ldr	r3, [r2, #0]
 8005340:	b933      	cbnz	r3, 8005350 <_free_r+0x2c>
 8005342:	6063      	str	r3, [r4, #4]
 8005344:	6014      	str	r4, [r2, #0]
 8005346:	4628      	mov	r0, r5
 8005348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800534c:	f000 b8e4 	b.w	8005518 <__malloc_unlock>
 8005350:	42a3      	cmp	r3, r4
 8005352:	d908      	bls.n	8005366 <_free_r+0x42>
 8005354:	6820      	ldr	r0, [r4, #0]
 8005356:	1821      	adds	r1, r4, r0
 8005358:	428b      	cmp	r3, r1
 800535a:	bf01      	itttt	eq
 800535c:	6819      	ldreq	r1, [r3, #0]
 800535e:	685b      	ldreq	r3, [r3, #4]
 8005360:	1809      	addeq	r1, r1, r0
 8005362:	6021      	streq	r1, [r4, #0]
 8005364:	e7ed      	b.n	8005342 <_free_r+0x1e>
 8005366:	461a      	mov	r2, r3
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	b10b      	cbz	r3, 8005370 <_free_r+0x4c>
 800536c:	42a3      	cmp	r3, r4
 800536e:	d9fa      	bls.n	8005366 <_free_r+0x42>
 8005370:	6811      	ldr	r1, [r2, #0]
 8005372:	1850      	adds	r0, r2, r1
 8005374:	42a0      	cmp	r0, r4
 8005376:	d10b      	bne.n	8005390 <_free_r+0x6c>
 8005378:	6820      	ldr	r0, [r4, #0]
 800537a:	4401      	add	r1, r0
 800537c:	1850      	adds	r0, r2, r1
 800537e:	4283      	cmp	r3, r0
 8005380:	6011      	str	r1, [r2, #0]
 8005382:	d1e0      	bne.n	8005346 <_free_r+0x22>
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	6053      	str	r3, [r2, #4]
 800538a:	4408      	add	r0, r1
 800538c:	6010      	str	r0, [r2, #0]
 800538e:	e7da      	b.n	8005346 <_free_r+0x22>
 8005390:	d902      	bls.n	8005398 <_free_r+0x74>
 8005392:	230c      	movs	r3, #12
 8005394:	602b      	str	r3, [r5, #0]
 8005396:	e7d6      	b.n	8005346 <_free_r+0x22>
 8005398:	6820      	ldr	r0, [r4, #0]
 800539a:	1821      	adds	r1, r4, r0
 800539c:	428b      	cmp	r3, r1
 800539e:	bf04      	itt	eq
 80053a0:	6819      	ldreq	r1, [r3, #0]
 80053a2:	685b      	ldreq	r3, [r3, #4]
 80053a4:	6063      	str	r3, [r4, #4]
 80053a6:	bf04      	itt	eq
 80053a8:	1809      	addeq	r1, r1, r0
 80053aa:	6021      	streq	r1, [r4, #0]
 80053ac:	6054      	str	r4, [r2, #4]
 80053ae:	e7ca      	b.n	8005346 <_free_r+0x22>
 80053b0:	bd38      	pop	{r3, r4, r5, pc}
 80053b2:	bf00      	nop
 80053b4:	2000048c 	.word	0x2000048c

080053b8 <malloc>:
 80053b8:	4b02      	ldr	r3, [pc, #8]	@ (80053c4 <malloc+0xc>)
 80053ba:	4601      	mov	r1, r0
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	f000 b825 	b.w	800540c <_malloc_r>
 80053c2:	bf00      	nop
 80053c4:	20000018 	.word	0x20000018

080053c8 <sbrk_aligned>:
 80053c8:	b570      	push	{r4, r5, r6, lr}
 80053ca:	4e0f      	ldr	r6, [pc, #60]	@ (8005408 <sbrk_aligned+0x40>)
 80053cc:	460c      	mov	r4, r1
 80053ce:	6831      	ldr	r1, [r6, #0]
 80053d0:	4605      	mov	r5, r0
 80053d2:	b911      	cbnz	r1, 80053da <sbrk_aligned+0x12>
 80053d4:	f000 fe46 	bl	8006064 <_sbrk_r>
 80053d8:	6030      	str	r0, [r6, #0]
 80053da:	4621      	mov	r1, r4
 80053dc:	4628      	mov	r0, r5
 80053de:	f000 fe41 	bl	8006064 <_sbrk_r>
 80053e2:	1c43      	adds	r3, r0, #1
 80053e4:	d103      	bne.n	80053ee <sbrk_aligned+0x26>
 80053e6:	f04f 34ff 	mov.w	r4, #4294967295
 80053ea:	4620      	mov	r0, r4
 80053ec:	bd70      	pop	{r4, r5, r6, pc}
 80053ee:	1cc4      	adds	r4, r0, #3
 80053f0:	f024 0403 	bic.w	r4, r4, #3
 80053f4:	42a0      	cmp	r0, r4
 80053f6:	d0f8      	beq.n	80053ea <sbrk_aligned+0x22>
 80053f8:	1a21      	subs	r1, r4, r0
 80053fa:	4628      	mov	r0, r5
 80053fc:	f000 fe32 	bl	8006064 <_sbrk_r>
 8005400:	3001      	adds	r0, #1
 8005402:	d1f2      	bne.n	80053ea <sbrk_aligned+0x22>
 8005404:	e7ef      	b.n	80053e6 <sbrk_aligned+0x1e>
 8005406:	bf00      	nop
 8005408:	20000488 	.word	0x20000488

0800540c <_malloc_r>:
 800540c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005410:	1ccd      	adds	r5, r1, #3
 8005412:	f025 0503 	bic.w	r5, r5, #3
 8005416:	3508      	adds	r5, #8
 8005418:	2d0c      	cmp	r5, #12
 800541a:	bf38      	it	cc
 800541c:	250c      	movcc	r5, #12
 800541e:	2d00      	cmp	r5, #0
 8005420:	4606      	mov	r6, r0
 8005422:	db01      	blt.n	8005428 <_malloc_r+0x1c>
 8005424:	42a9      	cmp	r1, r5
 8005426:	d904      	bls.n	8005432 <_malloc_r+0x26>
 8005428:	230c      	movs	r3, #12
 800542a:	6033      	str	r3, [r6, #0]
 800542c:	2000      	movs	r0, #0
 800542e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005432:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005508 <_malloc_r+0xfc>
 8005436:	f000 f869 	bl	800550c <__malloc_lock>
 800543a:	f8d8 3000 	ldr.w	r3, [r8]
 800543e:	461c      	mov	r4, r3
 8005440:	bb44      	cbnz	r4, 8005494 <_malloc_r+0x88>
 8005442:	4629      	mov	r1, r5
 8005444:	4630      	mov	r0, r6
 8005446:	f7ff ffbf 	bl	80053c8 <sbrk_aligned>
 800544a:	1c43      	adds	r3, r0, #1
 800544c:	4604      	mov	r4, r0
 800544e:	d158      	bne.n	8005502 <_malloc_r+0xf6>
 8005450:	f8d8 4000 	ldr.w	r4, [r8]
 8005454:	4627      	mov	r7, r4
 8005456:	2f00      	cmp	r7, #0
 8005458:	d143      	bne.n	80054e2 <_malloc_r+0xd6>
 800545a:	2c00      	cmp	r4, #0
 800545c:	d04b      	beq.n	80054f6 <_malloc_r+0xea>
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	4639      	mov	r1, r7
 8005462:	4630      	mov	r0, r6
 8005464:	eb04 0903 	add.w	r9, r4, r3
 8005468:	f000 fdfc 	bl	8006064 <_sbrk_r>
 800546c:	4581      	cmp	r9, r0
 800546e:	d142      	bne.n	80054f6 <_malloc_r+0xea>
 8005470:	6821      	ldr	r1, [r4, #0]
 8005472:	1a6d      	subs	r5, r5, r1
 8005474:	4629      	mov	r1, r5
 8005476:	4630      	mov	r0, r6
 8005478:	f7ff ffa6 	bl	80053c8 <sbrk_aligned>
 800547c:	3001      	adds	r0, #1
 800547e:	d03a      	beq.n	80054f6 <_malloc_r+0xea>
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	442b      	add	r3, r5
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	f8d8 3000 	ldr.w	r3, [r8]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	bb62      	cbnz	r2, 80054e8 <_malloc_r+0xdc>
 800548e:	f8c8 7000 	str.w	r7, [r8]
 8005492:	e00f      	b.n	80054b4 <_malloc_r+0xa8>
 8005494:	6822      	ldr	r2, [r4, #0]
 8005496:	1b52      	subs	r2, r2, r5
 8005498:	d420      	bmi.n	80054dc <_malloc_r+0xd0>
 800549a:	2a0b      	cmp	r2, #11
 800549c:	d917      	bls.n	80054ce <_malloc_r+0xc2>
 800549e:	1961      	adds	r1, r4, r5
 80054a0:	42a3      	cmp	r3, r4
 80054a2:	6025      	str	r5, [r4, #0]
 80054a4:	bf18      	it	ne
 80054a6:	6059      	strne	r1, [r3, #4]
 80054a8:	6863      	ldr	r3, [r4, #4]
 80054aa:	bf08      	it	eq
 80054ac:	f8c8 1000 	streq.w	r1, [r8]
 80054b0:	5162      	str	r2, [r4, r5]
 80054b2:	604b      	str	r3, [r1, #4]
 80054b4:	4630      	mov	r0, r6
 80054b6:	f000 f82f 	bl	8005518 <__malloc_unlock>
 80054ba:	f104 000b 	add.w	r0, r4, #11
 80054be:	1d23      	adds	r3, r4, #4
 80054c0:	f020 0007 	bic.w	r0, r0, #7
 80054c4:	1ac2      	subs	r2, r0, r3
 80054c6:	bf1c      	itt	ne
 80054c8:	1a1b      	subne	r3, r3, r0
 80054ca:	50a3      	strne	r3, [r4, r2]
 80054cc:	e7af      	b.n	800542e <_malloc_r+0x22>
 80054ce:	6862      	ldr	r2, [r4, #4]
 80054d0:	42a3      	cmp	r3, r4
 80054d2:	bf0c      	ite	eq
 80054d4:	f8c8 2000 	streq.w	r2, [r8]
 80054d8:	605a      	strne	r2, [r3, #4]
 80054da:	e7eb      	b.n	80054b4 <_malloc_r+0xa8>
 80054dc:	4623      	mov	r3, r4
 80054de:	6864      	ldr	r4, [r4, #4]
 80054e0:	e7ae      	b.n	8005440 <_malloc_r+0x34>
 80054e2:	463c      	mov	r4, r7
 80054e4:	687f      	ldr	r7, [r7, #4]
 80054e6:	e7b6      	b.n	8005456 <_malloc_r+0x4a>
 80054e8:	461a      	mov	r2, r3
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	42a3      	cmp	r3, r4
 80054ee:	d1fb      	bne.n	80054e8 <_malloc_r+0xdc>
 80054f0:	2300      	movs	r3, #0
 80054f2:	6053      	str	r3, [r2, #4]
 80054f4:	e7de      	b.n	80054b4 <_malloc_r+0xa8>
 80054f6:	230c      	movs	r3, #12
 80054f8:	6033      	str	r3, [r6, #0]
 80054fa:	4630      	mov	r0, r6
 80054fc:	f000 f80c 	bl	8005518 <__malloc_unlock>
 8005500:	e794      	b.n	800542c <_malloc_r+0x20>
 8005502:	6005      	str	r5, [r0, #0]
 8005504:	e7d6      	b.n	80054b4 <_malloc_r+0xa8>
 8005506:	bf00      	nop
 8005508:	2000048c 	.word	0x2000048c

0800550c <__malloc_lock>:
 800550c:	4801      	ldr	r0, [pc, #4]	@ (8005514 <__malloc_lock+0x8>)
 800550e:	f7ff b926 	b.w	800475e <__retarget_lock_acquire_recursive>
 8005512:	bf00      	nop
 8005514:	20000484 	.word	0x20000484

08005518 <__malloc_unlock>:
 8005518:	4801      	ldr	r0, [pc, #4]	@ (8005520 <__malloc_unlock+0x8>)
 800551a:	f7ff b921 	b.w	8004760 <__retarget_lock_release_recursive>
 800551e:	bf00      	nop
 8005520:	20000484 	.word	0x20000484

08005524 <_Balloc>:
 8005524:	b570      	push	{r4, r5, r6, lr}
 8005526:	69c6      	ldr	r6, [r0, #28]
 8005528:	4604      	mov	r4, r0
 800552a:	460d      	mov	r5, r1
 800552c:	b976      	cbnz	r6, 800554c <_Balloc+0x28>
 800552e:	2010      	movs	r0, #16
 8005530:	f7ff ff42 	bl	80053b8 <malloc>
 8005534:	4602      	mov	r2, r0
 8005536:	61e0      	str	r0, [r4, #28]
 8005538:	b920      	cbnz	r0, 8005544 <_Balloc+0x20>
 800553a:	4b18      	ldr	r3, [pc, #96]	@ (800559c <_Balloc+0x78>)
 800553c:	4818      	ldr	r0, [pc, #96]	@ (80055a0 <_Balloc+0x7c>)
 800553e:	216b      	movs	r1, #107	@ 0x6b
 8005540:	f000 fdae 	bl	80060a0 <__assert_func>
 8005544:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005548:	6006      	str	r6, [r0, #0]
 800554a:	60c6      	str	r6, [r0, #12]
 800554c:	69e6      	ldr	r6, [r4, #28]
 800554e:	68f3      	ldr	r3, [r6, #12]
 8005550:	b183      	cbz	r3, 8005574 <_Balloc+0x50>
 8005552:	69e3      	ldr	r3, [r4, #28]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800555a:	b9b8      	cbnz	r0, 800558c <_Balloc+0x68>
 800555c:	2101      	movs	r1, #1
 800555e:	fa01 f605 	lsl.w	r6, r1, r5
 8005562:	1d72      	adds	r2, r6, #5
 8005564:	0092      	lsls	r2, r2, #2
 8005566:	4620      	mov	r0, r4
 8005568:	f000 fdb8 	bl	80060dc <_calloc_r>
 800556c:	b160      	cbz	r0, 8005588 <_Balloc+0x64>
 800556e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005572:	e00e      	b.n	8005592 <_Balloc+0x6e>
 8005574:	2221      	movs	r2, #33	@ 0x21
 8005576:	2104      	movs	r1, #4
 8005578:	4620      	mov	r0, r4
 800557a:	f000 fdaf 	bl	80060dc <_calloc_r>
 800557e:	69e3      	ldr	r3, [r4, #28]
 8005580:	60f0      	str	r0, [r6, #12]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e4      	bne.n	8005552 <_Balloc+0x2e>
 8005588:	2000      	movs	r0, #0
 800558a:	bd70      	pop	{r4, r5, r6, pc}
 800558c:	6802      	ldr	r2, [r0, #0]
 800558e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005592:	2300      	movs	r3, #0
 8005594:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005598:	e7f7      	b.n	800558a <_Balloc+0x66>
 800559a:	bf00      	nop
 800559c:	080067d1 	.word	0x080067d1
 80055a0:	08006851 	.word	0x08006851

080055a4 <_Bfree>:
 80055a4:	b570      	push	{r4, r5, r6, lr}
 80055a6:	69c6      	ldr	r6, [r0, #28]
 80055a8:	4605      	mov	r5, r0
 80055aa:	460c      	mov	r4, r1
 80055ac:	b976      	cbnz	r6, 80055cc <_Bfree+0x28>
 80055ae:	2010      	movs	r0, #16
 80055b0:	f7ff ff02 	bl	80053b8 <malloc>
 80055b4:	4602      	mov	r2, r0
 80055b6:	61e8      	str	r0, [r5, #28]
 80055b8:	b920      	cbnz	r0, 80055c4 <_Bfree+0x20>
 80055ba:	4b09      	ldr	r3, [pc, #36]	@ (80055e0 <_Bfree+0x3c>)
 80055bc:	4809      	ldr	r0, [pc, #36]	@ (80055e4 <_Bfree+0x40>)
 80055be:	218f      	movs	r1, #143	@ 0x8f
 80055c0:	f000 fd6e 	bl	80060a0 <__assert_func>
 80055c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055c8:	6006      	str	r6, [r0, #0]
 80055ca:	60c6      	str	r6, [r0, #12]
 80055cc:	b13c      	cbz	r4, 80055de <_Bfree+0x3a>
 80055ce:	69eb      	ldr	r3, [r5, #28]
 80055d0:	6862      	ldr	r2, [r4, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055d8:	6021      	str	r1, [r4, #0]
 80055da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80055de:	bd70      	pop	{r4, r5, r6, pc}
 80055e0:	080067d1 	.word	0x080067d1
 80055e4:	08006851 	.word	0x08006851

080055e8 <__multadd>:
 80055e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ec:	690d      	ldr	r5, [r1, #16]
 80055ee:	4607      	mov	r7, r0
 80055f0:	460c      	mov	r4, r1
 80055f2:	461e      	mov	r6, r3
 80055f4:	f101 0c14 	add.w	ip, r1, #20
 80055f8:	2000      	movs	r0, #0
 80055fa:	f8dc 3000 	ldr.w	r3, [ip]
 80055fe:	b299      	uxth	r1, r3
 8005600:	fb02 6101 	mla	r1, r2, r1, r6
 8005604:	0c1e      	lsrs	r6, r3, #16
 8005606:	0c0b      	lsrs	r3, r1, #16
 8005608:	fb02 3306 	mla	r3, r2, r6, r3
 800560c:	b289      	uxth	r1, r1
 800560e:	3001      	adds	r0, #1
 8005610:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005614:	4285      	cmp	r5, r0
 8005616:	f84c 1b04 	str.w	r1, [ip], #4
 800561a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800561e:	dcec      	bgt.n	80055fa <__multadd+0x12>
 8005620:	b30e      	cbz	r6, 8005666 <__multadd+0x7e>
 8005622:	68a3      	ldr	r3, [r4, #8]
 8005624:	42ab      	cmp	r3, r5
 8005626:	dc19      	bgt.n	800565c <__multadd+0x74>
 8005628:	6861      	ldr	r1, [r4, #4]
 800562a:	4638      	mov	r0, r7
 800562c:	3101      	adds	r1, #1
 800562e:	f7ff ff79 	bl	8005524 <_Balloc>
 8005632:	4680      	mov	r8, r0
 8005634:	b928      	cbnz	r0, 8005642 <__multadd+0x5a>
 8005636:	4602      	mov	r2, r0
 8005638:	4b0c      	ldr	r3, [pc, #48]	@ (800566c <__multadd+0x84>)
 800563a:	480d      	ldr	r0, [pc, #52]	@ (8005670 <__multadd+0x88>)
 800563c:	21ba      	movs	r1, #186	@ 0xba
 800563e:	f000 fd2f 	bl	80060a0 <__assert_func>
 8005642:	6922      	ldr	r2, [r4, #16]
 8005644:	3202      	adds	r2, #2
 8005646:	f104 010c 	add.w	r1, r4, #12
 800564a:	0092      	lsls	r2, r2, #2
 800564c:	300c      	adds	r0, #12
 800564e:	f000 fd19 	bl	8006084 <memcpy>
 8005652:	4621      	mov	r1, r4
 8005654:	4638      	mov	r0, r7
 8005656:	f7ff ffa5 	bl	80055a4 <_Bfree>
 800565a:	4644      	mov	r4, r8
 800565c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005660:	3501      	adds	r5, #1
 8005662:	615e      	str	r6, [r3, #20]
 8005664:	6125      	str	r5, [r4, #16]
 8005666:	4620      	mov	r0, r4
 8005668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800566c:	08006840 	.word	0x08006840
 8005670:	08006851 	.word	0x08006851

08005674 <__hi0bits>:
 8005674:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005678:	4603      	mov	r3, r0
 800567a:	bf36      	itet	cc
 800567c:	0403      	lslcc	r3, r0, #16
 800567e:	2000      	movcs	r0, #0
 8005680:	2010      	movcc	r0, #16
 8005682:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005686:	bf3c      	itt	cc
 8005688:	021b      	lslcc	r3, r3, #8
 800568a:	3008      	addcc	r0, #8
 800568c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005690:	bf3c      	itt	cc
 8005692:	011b      	lslcc	r3, r3, #4
 8005694:	3004      	addcc	r0, #4
 8005696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800569a:	bf3c      	itt	cc
 800569c:	009b      	lslcc	r3, r3, #2
 800569e:	3002      	addcc	r0, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	db05      	blt.n	80056b0 <__hi0bits+0x3c>
 80056a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80056a8:	f100 0001 	add.w	r0, r0, #1
 80056ac:	bf08      	it	eq
 80056ae:	2020      	moveq	r0, #32
 80056b0:	4770      	bx	lr

080056b2 <__lo0bits>:
 80056b2:	6803      	ldr	r3, [r0, #0]
 80056b4:	4602      	mov	r2, r0
 80056b6:	f013 0007 	ands.w	r0, r3, #7
 80056ba:	d00b      	beq.n	80056d4 <__lo0bits+0x22>
 80056bc:	07d9      	lsls	r1, r3, #31
 80056be:	d421      	bmi.n	8005704 <__lo0bits+0x52>
 80056c0:	0798      	lsls	r0, r3, #30
 80056c2:	bf49      	itett	mi
 80056c4:	085b      	lsrmi	r3, r3, #1
 80056c6:	089b      	lsrpl	r3, r3, #2
 80056c8:	2001      	movmi	r0, #1
 80056ca:	6013      	strmi	r3, [r2, #0]
 80056cc:	bf5c      	itt	pl
 80056ce:	6013      	strpl	r3, [r2, #0]
 80056d0:	2002      	movpl	r0, #2
 80056d2:	4770      	bx	lr
 80056d4:	b299      	uxth	r1, r3
 80056d6:	b909      	cbnz	r1, 80056dc <__lo0bits+0x2a>
 80056d8:	0c1b      	lsrs	r3, r3, #16
 80056da:	2010      	movs	r0, #16
 80056dc:	b2d9      	uxtb	r1, r3
 80056de:	b909      	cbnz	r1, 80056e4 <__lo0bits+0x32>
 80056e0:	3008      	adds	r0, #8
 80056e2:	0a1b      	lsrs	r3, r3, #8
 80056e4:	0719      	lsls	r1, r3, #28
 80056e6:	bf04      	itt	eq
 80056e8:	091b      	lsreq	r3, r3, #4
 80056ea:	3004      	addeq	r0, #4
 80056ec:	0799      	lsls	r1, r3, #30
 80056ee:	bf04      	itt	eq
 80056f0:	089b      	lsreq	r3, r3, #2
 80056f2:	3002      	addeq	r0, #2
 80056f4:	07d9      	lsls	r1, r3, #31
 80056f6:	d403      	bmi.n	8005700 <__lo0bits+0x4e>
 80056f8:	085b      	lsrs	r3, r3, #1
 80056fa:	f100 0001 	add.w	r0, r0, #1
 80056fe:	d003      	beq.n	8005708 <__lo0bits+0x56>
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	4770      	bx	lr
 8005704:	2000      	movs	r0, #0
 8005706:	4770      	bx	lr
 8005708:	2020      	movs	r0, #32
 800570a:	4770      	bx	lr

0800570c <__i2b>:
 800570c:	b510      	push	{r4, lr}
 800570e:	460c      	mov	r4, r1
 8005710:	2101      	movs	r1, #1
 8005712:	f7ff ff07 	bl	8005524 <_Balloc>
 8005716:	4602      	mov	r2, r0
 8005718:	b928      	cbnz	r0, 8005726 <__i2b+0x1a>
 800571a:	4b05      	ldr	r3, [pc, #20]	@ (8005730 <__i2b+0x24>)
 800571c:	4805      	ldr	r0, [pc, #20]	@ (8005734 <__i2b+0x28>)
 800571e:	f240 1145 	movw	r1, #325	@ 0x145
 8005722:	f000 fcbd 	bl	80060a0 <__assert_func>
 8005726:	2301      	movs	r3, #1
 8005728:	6144      	str	r4, [r0, #20]
 800572a:	6103      	str	r3, [r0, #16]
 800572c:	bd10      	pop	{r4, pc}
 800572e:	bf00      	nop
 8005730:	08006840 	.word	0x08006840
 8005734:	08006851 	.word	0x08006851

08005738 <__multiply>:
 8005738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800573c:	4614      	mov	r4, r2
 800573e:	690a      	ldr	r2, [r1, #16]
 8005740:	6923      	ldr	r3, [r4, #16]
 8005742:	429a      	cmp	r2, r3
 8005744:	bfa8      	it	ge
 8005746:	4623      	movge	r3, r4
 8005748:	460f      	mov	r7, r1
 800574a:	bfa4      	itt	ge
 800574c:	460c      	movge	r4, r1
 800574e:	461f      	movge	r7, r3
 8005750:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005754:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005758:	68a3      	ldr	r3, [r4, #8]
 800575a:	6861      	ldr	r1, [r4, #4]
 800575c:	eb0a 0609 	add.w	r6, sl, r9
 8005760:	42b3      	cmp	r3, r6
 8005762:	b085      	sub	sp, #20
 8005764:	bfb8      	it	lt
 8005766:	3101      	addlt	r1, #1
 8005768:	f7ff fedc 	bl	8005524 <_Balloc>
 800576c:	b930      	cbnz	r0, 800577c <__multiply+0x44>
 800576e:	4602      	mov	r2, r0
 8005770:	4b44      	ldr	r3, [pc, #272]	@ (8005884 <__multiply+0x14c>)
 8005772:	4845      	ldr	r0, [pc, #276]	@ (8005888 <__multiply+0x150>)
 8005774:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005778:	f000 fc92 	bl	80060a0 <__assert_func>
 800577c:	f100 0514 	add.w	r5, r0, #20
 8005780:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005784:	462b      	mov	r3, r5
 8005786:	2200      	movs	r2, #0
 8005788:	4543      	cmp	r3, r8
 800578a:	d321      	bcc.n	80057d0 <__multiply+0x98>
 800578c:	f107 0114 	add.w	r1, r7, #20
 8005790:	f104 0214 	add.w	r2, r4, #20
 8005794:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005798:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800579c:	9302      	str	r3, [sp, #8]
 800579e:	1b13      	subs	r3, r2, r4
 80057a0:	3b15      	subs	r3, #21
 80057a2:	f023 0303 	bic.w	r3, r3, #3
 80057a6:	3304      	adds	r3, #4
 80057a8:	f104 0715 	add.w	r7, r4, #21
 80057ac:	42ba      	cmp	r2, r7
 80057ae:	bf38      	it	cc
 80057b0:	2304      	movcc	r3, #4
 80057b2:	9301      	str	r3, [sp, #4]
 80057b4:	9b02      	ldr	r3, [sp, #8]
 80057b6:	9103      	str	r1, [sp, #12]
 80057b8:	428b      	cmp	r3, r1
 80057ba:	d80c      	bhi.n	80057d6 <__multiply+0x9e>
 80057bc:	2e00      	cmp	r6, #0
 80057be:	dd03      	ble.n	80057c8 <__multiply+0x90>
 80057c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d05b      	beq.n	8005880 <__multiply+0x148>
 80057c8:	6106      	str	r6, [r0, #16]
 80057ca:	b005      	add	sp, #20
 80057cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d0:	f843 2b04 	str.w	r2, [r3], #4
 80057d4:	e7d8      	b.n	8005788 <__multiply+0x50>
 80057d6:	f8b1 a000 	ldrh.w	sl, [r1]
 80057da:	f1ba 0f00 	cmp.w	sl, #0
 80057de:	d024      	beq.n	800582a <__multiply+0xf2>
 80057e0:	f104 0e14 	add.w	lr, r4, #20
 80057e4:	46a9      	mov	r9, r5
 80057e6:	f04f 0c00 	mov.w	ip, #0
 80057ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80057ee:	f8d9 3000 	ldr.w	r3, [r9]
 80057f2:	fa1f fb87 	uxth.w	fp, r7
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	fb0a 330b 	mla	r3, sl, fp, r3
 80057fc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005800:	f8d9 7000 	ldr.w	r7, [r9]
 8005804:	4463      	add	r3, ip
 8005806:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800580a:	fb0a c70b 	mla	r7, sl, fp, ip
 800580e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005812:	b29b      	uxth	r3, r3
 8005814:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005818:	4572      	cmp	r2, lr
 800581a:	f849 3b04 	str.w	r3, [r9], #4
 800581e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005822:	d8e2      	bhi.n	80057ea <__multiply+0xb2>
 8005824:	9b01      	ldr	r3, [sp, #4]
 8005826:	f845 c003 	str.w	ip, [r5, r3]
 800582a:	9b03      	ldr	r3, [sp, #12]
 800582c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005830:	3104      	adds	r1, #4
 8005832:	f1b9 0f00 	cmp.w	r9, #0
 8005836:	d021      	beq.n	800587c <__multiply+0x144>
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	f104 0c14 	add.w	ip, r4, #20
 800583e:	46ae      	mov	lr, r5
 8005840:	f04f 0a00 	mov.w	sl, #0
 8005844:	f8bc b000 	ldrh.w	fp, [ip]
 8005848:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800584c:	fb09 770b 	mla	r7, r9, fp, r7
 8005850:	4457      	add	r7, sl
 8005852:	b29b      	uxth	r3, r3
 8005854:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005858:	f84e 3b04 	str.w	r3, [lr], #4
 800585c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005860:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005864:	f8be 3000 	ldrh.w	r3, [lr]
 8005868:	fb09 330a 	mla	r3, r9, sl, r3
 800586c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005870:	4562      	cmp	r2, ip
 8005872:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005876:	d8e5      	bhi.n	8005844 <__multiply+0x10c>
 8005878:	9f01      	ldr	r7, [sp, #4]
 800587a:	51eb      	str	r3, [r5, r7]
 800587c:	3504      	adds	r5, #4
 800587e:	e799      	b.n	80057b4 <__multiply+0x7c>
 8005880:	3e01      	subs	r6, #1
 8005882:	e79b      	b.n	80057bc <__multiply+0x84>
 8005884:	08006840 	.word	0x08006840
 8005888:	08006851 	.word	0x08006851

0800588c <__pow5mult>:
 800588c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005890:	4615      	mov	r5, r2
 8005892:	f012 0203 	ands.w	r2, r2, #3
 8005896:	4607      	mov	r7, r0
 8005898:	460e      	mov	r6, r1
 800589a:	d007      	beq.n	80058ac <__pow5mult+0x20>
 800589c:	4c25      	ldr	r4, [pc, #148]	@ (8005934 <__pow5mult+0xa8>)
 800589e:	3a01      	subs	r2, #1
 80058a0:	2300      	movs	r3, #0
 80058a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80058a6:	f7ff fe9f 	bl	80055e8 <__multadd>
 80058aa:	4606      	mov	r6, r0
 80058ac:	10ad      	asrs	r5, r5, #2
 80058ae:	d03d      	beq.n	800592c <__pow5mult+0xa0>
 80058b0:	69fc      	ldr	r4, [r7, #28]
 80058b2:	b97c      	cbnz	r4, 80058d4 <__pow5mult+0x48>
 80058b4:	2010      	movs	r0, #16
 80058b6:	f7ff fd7f 	bl	80053b8 <malloc>
 80058ba:	4602      	mov	r2, r0
 80058bc:	61f8      	str	r0, [r7, #28]
 80058be:	b928      	cbnz	r0, 80058cc <__pow5mult+0x40>
 80058c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005938 <__pow5mult+0xac>)
 80058c2:	481e      	ldr	r0, [pc, #120]	@ (800593c <__pow5mult+0xb0>)
 80058c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80058c8:	f000 fbea 	bl	80060a0 <__assert_func>
 80058cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80058d0:	6004      	str	r4, [r0, #0]
 80058d2:	60c4      	str	r4, [r0, #12]
 80058d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80058d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80058dc:	b94c      	cbnz	r4, 80058f2 <__pow5mult+0x66>
 80058de:	f240 2171 	movw	r1, #625	@ 0x271
 80058e2:	4638      	mov	r0, r7
 80058e4:	f7ff ff12 	bl	800570c <__i2b>
 80058e8:	2300      	movs	r3, #0
 80058ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80058ee:	4604      	mov	r4, r0
 80058f0:	6003      	str	r3, [r0, #0]
 80058f2:	f04f 0900 	mov.w	r9, #0
 80058f6:	07eb      	lsls	r3, r5, #31
 80058f8:	d50a      	bpl.n	8005910 <__pow5mult+0x84>
 80058fa:	4631      	mov	r1, r6
 80058fc:	4622      	mov	r2, r4
 80058fe:	4638      	mov	r0, r7
 8005900:	f7ff ff1a 	bl	8005738 <__multiply>
 8005904:	4631      	mov	r1, r6
 8005906:	4680      	mov	r8, r0
 8005908:	4638      	mov	r0, r7
 800590a:	f7ff fe4b 	bl	80055a4 <_Bfree>
 800590e:	4646      	mov	r6, r8
 8005910:	106d      	asrs	r5, r5, #1
 8005912:	d00b      	beq.n	800592c <__pow5mult+0xa0>
 8005914:	6820      	ldr	r0, [r4, #0]
 8005916:	b938      	cbnz	r0, 8005928 <__pow5mult+0x9c>
 8005918:	4622      	mov	r2, r4
 800591a:	4621      	mov	r1, r4
 800591c:	4638      	mov	r0, r7
 800591e:	f7ff ff0b 	bl	8005738 <__multiply>
 8005922:	6020      	str	r0, [r4, #0]
 8005924:	f8c0 9000 	str.w	r9, [r0]
 8005928:	4604      	mov	r4, r0
 800592a:	e7e4      	b.n	80058f6 <__pow5mult+0x6a>
 800592c:	4630      	mov	r0, r6
 800592e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005932:	bf00      	nop
 8005934:	080068ac 	.word	0x080068ac
 8005938:	080067d1 	.word	0x080067d1
 800593c:	08006851 	.word	0x08006851

08005940 <__lshift>:
 8005940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005944:	460c      	mov	r4, r1
 8005946:	6849      	ldr	r1, [r1, #4]
 8005948:	6923      	ldr	r3, [r4, #16]
 800594a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800594e:	68a3      	ldr	r3, [r4, #8]
 8005950:	4607      	mov	r7, r0
 8005952:	4691      	mov	r9, r2
 8005954:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005958:	f108 0601 	add.w	r6, r8, #1
 800595c:	42b3      	cmp	r3, r6
 800595e:	db0b      	blt.n	8005978 <__lshift+0x38>
 8005960:	4638      	mov	r0, r7
 8005962:	f7ff fddf 	bl	8005524 <_Balloc>
 8005966:	4605      	mov	r5, r0
 8005968:	b948      	cbnz	r0, 800597e <__lshift+0x3e>
 800596a:	4602      	mov	r2, r0
 800596c:	4b28      	ldr	r3, [pc, #160]	@ (8005a10 <__lshift+0xd0>)
 800596e:	4829      	ldr	r0, [pc, #164]	@ (8005a14 <__lshift+0xd4>)
 8005970:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005974:	f000 fb94 	bl	80060a0 <__assert_func>
 8005978:	3101      	adds	r1, #1
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	e7ee      	b.n	800595c <__lshift+0x1c>
 800597e:	2300      	movs	r3, #0
 8005980:	f100 0114 	add.w	r1, r0, #20
 8005984:	f100 0210 	add.w	r2, r0, #16
 8005988:	4618      	mov	r0, r3
 800598a:	4553      	cmp	r3, sl
 800598c:	db33      	blt.n	80059f6 <__lshift+0xb6>
 800598e:	6920      	ldr	r0, [r4, #16]
 8005990:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005994:	f104 0314 	add.w	r3, r4, #20
 8005998:	f019 091f 	ands.w	r9, r9, #31
 800599c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80059a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80059a4:	d02b      	beq.n	80059fe <__lshift+0xbe>
 80059a6:	f1c9 0e20 	rsb	lr, r9, #32
 80059aa:	468a      	mov	sl, r1
 80059ac:	2200      	movs	r2, #0
 80059ae:	6818      	ldr	r0, [r3, #0]
 80059b0:	fa00 f009 	lsl.w	r0, r0, r9
 80059b4:	4310      	orrs	r0, r2
 80059b6:	f84a 0b04 	str.w	r0, [sl], #4
 80059ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80059be:	459c      	cmp	ip, r3
 80059c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80059c4:	d8f3      	bhi.n	80059ae <__lshift+0x6e>
 80059c6:	ebac 0304 	sub.w	r3, ip, r4
 80059ca:	3b15      	subs	r3, #21
 80059cc:	f023 0303 	bic.w	r3, r3, #3
 80059d0:	3304      	adds	r3, #4
 80059d2:	f104 0015 	add.w	r0, r4, #21
 80059d6:	4584      	cmp	ip, r0
 80059d8:	bf38      	it	cc
 80059da:	2304      	movcc	r3, #4
 80059dc:	50ca      	str	r2, [r1, r3]
 80059de:	b10a      	cbz	r2, 80059e4 <__lshift+0xa4>
 80059e0:	f108 0602 	add.w	r6, r8, #2
 80059e4:	3e01      	subs	r6, #1
 80059e6:	4638      	mov	r0, r7
 80059e8:	612e      	str	r6, [r5, #16]
 80059ea:	4621      	mov	r1, r4
 80059ec:	f7ff fdda 	bl	80055a4 <_Bfree>
 80059f0:	4628      	mov	r0, r5
 80059f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80059fa:	3301      	adds	r3, #1
 80059fc:	e7c5      	b.n	800598a <__lshift+0x4a>
 80059fe:	3904      	subs	r1, #4
 8005a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a04:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a08:	459c      	cmp	ip, r3
 8005a0a:	d8f9      	bhi.n	8005a00 <__lshift+0xc0>
 8005a0c:	e7ea      	b.n	80059e4 <__lshift+0xa4>
 8005a0e:	bf00      	nop
 8005a10:	08006840 	.word	0x08006840
 8005a14:	08006851 	.word	0x08006851

08005a18 <__mcmp>:
 8005a18:	690a      	ldr	r2, [r1, #16]
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	6900      	ldr	r0, [r0, #16]
 8005a1e:	1a80      	subs	r0, r0, r2
 8005a20:	b530      	push	{r4, r5, lr}
 8005a22:	d10e      	bne.n	8005a42 <__mcmp+0x2a>
 8005a24:	3314      	adds	r3, #20
 8005a26:	3114      	adds	r1, #20
 8005a28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005a2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005a30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005a34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a38:	4295      	cmp	r5, r2
 8005a3a:	d003      	beq.n	8005a44 <__mcmp+0x2c>
 8005a3c:	d205      	bcs.n	8005a4a <__mcmp+0x32>
 8005a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a42:	bd30      	pop	{r4, r5, pc}
 8005a44:	42a3      	cmp	r3, r4
 8005a46:	d3f3      	bcc.n	8005a30 <__mcmp+0x18>
 8005a48:	e7fb      	b.n	8005a42 <__mcmp+0x2a>
 8005a4a:	2001      	movs	r0, #1
 8005a4c:	e7f9      	b.n	8005a42 <__mcmp+0x2a>
	...

08005a50 <__mdiff>:
 8005a50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a54:	4689      	mov	r9, r1
 8005a56:	4606      	mov	r6, r0
 8005a58:	4611      	mov	r1, r2
 8005a5a:	4648      	mov	r0, r9
 8005a5c:	4614      	mov	r4, r2
 8005a5e:	f7ff ffdb 	bl	8005a18 <__mcmp>
 8005a62:	1e05      	subs	r5, r0, #0
 8005a64:	d112      	bne.n	8005a8c <__mdiff+0x3c>
 8005a66:	4629      	mov	r1, r5
 8005a68:	4630      	mov	r0, r6
 8005a6a:	f7ff fd5b 	bl	8005524 <_Balloc>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	b928      	cbnz	r0, 8005a7e <__mdiff+0x2e>
 8005a72:	4b3f      	ldr	r3, [pc, #252]	@ (8005b70 <__mdiff+0x120>)
 8005a74:	f240 2137 	movw	r1, #567	@ 0x237
 8005a78:	483e      	ldr	r0, [pc, #248]	@ (8005b74 <__mdiff+0x124>)
 8005a7a:	f000 fb11 	bl	80060a0 <__assert_func>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005a84:	4610      	mov	r0, r2
 8005a86:	b003      	add	sp, #12
 8005a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a8c:	bfbc      	itt	lt
 8005a8e:	464b      	movlt	r3, r9
 8005a90:	46a1      	movlt	r9, r4
 8005a92:	4630      	mov	r0, r6
 8005a94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005a98:	bfba      	itte	lt
 8005a9a:	461c      	movlt	r4, r3
 8005a9c:	2501      	movlt	r5, #1
 8005a9e:	2500      	movge	r5, #0
 8005aa0:	f7ff fd40 	bl	8005524 <_Balloc>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	b918      	cbnz	r0, 8005ab0 <__mdiff+0x60>
 8005aa8:	4b31      	ldr	r3, [pc, #196]	@ (8005b70 <__mdiff+0x120>)
 8005aaa:	f240 2145 	movw	r1, #581	@ 0x245
 8005aae:	e7e3      	b.n	8005a78 <__mdiff+0x28>
 8005ab0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005ab4:	6926      	ldr	r6, [r4, #16]
 8005ab6:	60c5      	str	r5, [r0, #12]
 8005ab8:	f109 0310 	add.w	r3, r9, #16
 8005abc:	f109 0514 	add.w	r5, r9, #20
 8005ac0:	f104 0e14 	add.w	lr, r4, #20
 8005ac4:	f100 0b14 	add.w	fp, r0, #20
 8005ac8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005acc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005ad0:	9301      	str	r3, [sp, #4]
 8005ad2:	46d9      	mov	r9, fp
 8005ad4:	f04f 0c00 	mov.w	ip, #0
 8005ad8:	9b01      	ldr	r3, [sp, #4]
 8005ada:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005ade:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005ae2:	9301      	str	r3, [sp, #4]
 8005ae4:	fa1f f38a 	uxth.w	r3, sl
 8005ae8:	4619      	mov	r1, r3
 8005aea:	b283      	uxth	r3, r0
 8005aec:	1acb      	subs	r3, r1, r3
 8005aee:	0c00      	lsrs	r0, r0, #16
 8005af0:	4463      	add	r3, ip
 8005af2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005af6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005b00:	4576      	cmp	r6, lr
 8005b02:	f849 3b04 	str.w	r3, [r9], #4
 8005b06:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005b0a:	d8e5      	bhi.n	8005ad8 <__mdiff+0x88>
 8005b0c:	1b33      	subs	r3, r6, r4
 8005b0e:	3b15      	subs	r3, #21
 8005b10:	f023 0303 	bic.w	r3, r3, #3
 8005b14:	3415      	adds	r4, #21
 8005b16:	3304      	adds	r3, #4
 8005b18:	42a6      	cmp	r6, r4
 8005b1a:	bf38      	it	cc
 8005b1c:	2304      	movcc	r3, #4
 8005b1e:	441d      	add	r5, r3
 8005b20:	445b      	add	r3, fp
 8005b22:	461e      	mov	r6, r3
 8005b24:	462c      	mov	r4, r5
 8005b26:	4544      	cmp	r4, r8
 8005b28:	d30e      	bcc.n	8005b48 <__mdiff+0xf8>
 8005b2a:	f108 0103 	add.w	r1, r8, #3
 8005b2e:	1b49      	subs	r1, r1, r5
 8005b30:	f021 0103 	bic.w	r1, r1, #3
 8005b34:	3d03      	subs	r5, #3
 8005b36:	45a8      	cmp	r8, r5
 8005b38:	bf38      	it	cc
 8005b3a:	2100      	movcc	r1, #0
 8005b3c:	440b      	add	r3, r1
 8005b3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005b42:	b191      	cbz	r1, 8005b6a <__mdiff+0x11a>
 8005b44:	6117      	str	r7, [r2, #16]
 8005b46:	e79d      	b.n	8005a84 <__mdiff+0x34>
 8005b48:	f854 1b04 	ldr.w	r1, [r4], #4
 8005b4c:	46e6      	mov	lr, ip
 8005b4e:	0c08      	lsrs	r0, r1, #16
 8005b50:	fa1c fc81 	uxtah	ip, ip, r1
 8005b54:	4471      	add	r1, lr
 8005b56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005b5a:	b289      	uxth	r1, r1
 8005b5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005b60:	f846 1b04 	str.w	r1, [r6], #4
 8005b64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005b68:	e7dd      	b.n	8005b26 <__mdiff+0xd6>
 8005b6a:	3f01      	subs	r7, #1
 8005b6c:	e7e7      	b.n	8005b3e <__mdiff+0xee>
 8005b6e:	bf00      	nop
 8005b70:	08006840 	.word	0x08006840
 8005b74:	08006851 	.word	0x08006851

08005b78 <__d2b>:
 8005b78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005b7c:	460f      	mov	r7, r1
 8005b7e:	2101      	movs	r1, #1
 8005b80:	ec59 8b10 	vmov	r8, r9, d0
 8005b84:	4616      	mov	r6, r2
 8005b86:	f7ff fccd 	bl	8005524 <_Balloc>
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	b930      	cbnz	r0, 8005b9c <__d2b+0x24>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	4b23      	ldr	r3, [pc, #140]	@ (8005c20 <__d2b+0xa8>)
 8005b92:	4824      	ldr	r0, [pc, #144]	@ (8005c24 <__d2b+0xac>)
 8005b94:	f240 310f 	movw	r1, #783	@ 0x30f
 8005b98:	f000 fa82 	bl	80060a0 <__assert_func>
 8005b9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005ba0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ba4:	b10d      	cbz	r5, 8005baa <__d2b+0x32>
 8005ba6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005baa:	9301      	str	r3, [sp, #4]
 8005bac:	f1b8 0300 	subs.w	r3, r8, #0
 8005bb0:	d023      	beq.n	8005bfa <__d2b+0x82>
 8005bb2:	4668      	mov	r0, sp
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	f7ff fd7c 	bl	80056b2 <__lo0bits>
 8005bba:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005bbe:	b1d0      	cbz	r0, 8005bf6 <__d2b+0x7e>
 8005bc0:	f1c0 0320 	rsb	r3, r0, #32
 8005bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	40c2      	lsrs	r2, r0
 8005bcc:	6163      	str	r3, [r4, #20]
 8005bce:	9201      	str	r2, [sp, #4]
 8005bd0:	9b01      	ldr	r3, [sp, #4]
 8005bd2:	61a3      	str	r3, [r4, #24]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	bf0c      	ite	eq
 8005bd8:	2201      	moveq	r2, #1
 8005bda:	2202      	movne	r2, #2
 8005bdc:	6122      	str	r2, [r4, #16]
 8005bde:	b1a5      	cbz	r5, 8005c0a <__d2b+0x92>
 8005be0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005be4:	4405      	add	r5, r0
 8005be6:	603d      	str	r5, [r7, #0]
 8005be8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005bec:	6030      	str	r0, [r6, #0]
 8005bee:	4620      	mov	r0, r4
 8005bf0:	b003      	add	sp, #12
 8005bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bf6:	6161      	str	r1, [r4, #20]
 8005bf8:	e7ea      	b.n	8005bd0 <__d2b+0x58>
 8005bfa:	a801      	add	r0, sp, #4
 8005bfc:	f7ff fd59 	bl	80056b2 <__lo0bits>
 8005c00:	9b01      	ldr	r3, [sp, #4]
 8005c02:	6163      	str	r3, [r4, #20]
 8005c04:	3020      	adds	r0, #32
 8005c06:	2201      	movs	r2, #1
 8005c08:	e7e8      	b.n	8005bdc <__d2b+0x64>
 8005c0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005c0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005c12:	6038      	str	r0, [r7, #0]
 8005c14:	6918      	ldr	r0, [r3, #16]
 8005c16:	f7ff fd2d 	bl	8005674 <__hi0bits>
 8005c1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005c1e:	e7e5      	b.n	8005bec <__d2b+0x74>
 8005c20:	08006840 	.word	0x08006840
 8005c24:	08006851 	.word	0x08006851

08005c28 <__ssputs_r>:
 8005c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c2c:	688e      	ldr	r6, [r1, #8]
 8005c2e:	461f      	mov	r7, r3
 8005c30:	42be      	cmp	r6, r7
 8005c32:	680b      	ldr	r3, [r1, #0]
 8005c34:	4682      	mov	sl, r0
 8005c36:	460c      	mov	r4, r1
 8005c38:	4690      	mov	r8, r2
 8005c3a:	d82d      	bhi.n	8005c98 <__ssputs_r+0x70>
 8005c3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c44:	d026      	beq.n	8005c94 <__ssputs_r+0x6c>
 8005c46:	6965      	ldr	r5, [r4, #20]
 8005c48:	6909      	ldr	r1, [r1, #16]
 8005c4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c4e:	eba3 0901 	sub.w	r9, r3, r1
 8005c52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c56:	1c7b      	adds	r3, r7, #1
 8005c58:	444b      	add	r3, r9
 8005c5a:	106d      	asrs	r5, r5, #1
 8005c5c:	429d      	cmp	r5, r3
 8005c5e:	bf38      	it	cc
 8005c60:	461d      	movcc	r5, r3
 8005c62:	0553      	lsls	r3, r2, #21
 8005c64:	d527      	bpl.n	8005cb6 <__ssputs_r+0x8e>
 8005c66:	4629      	mov	r1, r5
 8005c68:	f7ff fbd0 	bl	800540c <_malloc_r>
 8005c6c:	4606      	mov	r6, r0
 8005c6e:	b360      	cbz	r0, 8005cca <__ssputs_r+0xa2>
 8005c70:	6921      	ldr	r1, [r4, #16]
 8005c72:	464a      	mov	r2, r9
 8005c74:	f000 fa06 	bl	8006084 <memcpy>
 8005c78:	89a3      	ldrh	r3, [r4, #12]
 8005c7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c82:	81a3      	strh	r3, [r4, #12]
 8005c84:	6126      	str	r6, [r4, #16]
 8005c86:	6165      	str	r5, [r4, #20]
 8005c88:	444e      	add	r6, r9
 8005c8a:	eba5 0509 	sub.w	r5, r5, r9
 8005c8e:	6026      	str	r6, [r4, #0]
 8005c90:	60a5      	str	r5, [r4, #8]
 8005c92:	463e      	mov	r6, r7
 8005c94:	42be      	cmp	r6, r7
 8005c96:	d900      	bls.n	8005c9a <__ssputs_r+0x72>
 8005c98:	463e      	mov	r6, r7
 8005c9a:	6820      	ldr	r0, [r4, #0]
 8005c9c:	4632      	mov	r2, r6
 8005c9e:	4641      	mov	r1, r8
 8005ca0:	f000 f9c6 	bl	8006030 <memmove>
 8005ca4:	68a3      	ldr	r3, [r4, #8]
 8005ca6:	1b9b      	subs	r3, r3, r6
 8005ca8:	60a3      	str	r3, [r4, #8]
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	4433      	add	r3, r6
 8005cae:	6023      	str	r3, [r4, #0]
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb6:	462a      	mov	r2, r5
 8005cb8:	f000 fa36 	bl	8006128 <_realloc_r>
 8005cbc:	4606      	mov	r6, r0
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d1e0      	bne.n	8005c84 <__ssputs_r+0x5c>
 8005cc2:	6921      	ldr	r1, [r4, #16]
 8005cc4:	4650      	mov	r0, sl
 8005cc6:	f7ff fb2d 	bl	8005324 <_free_r>
 8005cca:	230c      	movs	r3, #12
 8005ccc:	f8ca 3000 	str.w	r3, [sl]
 8005cd0:	89a3      	ldrh	r3, [r4, #12]
 8005cd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cd6:	81a3      	strh	r3, [r4, #12]
 8005cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cdc:	e7e9      	b.n	8005cb2 <__ssputs_r+0x8a>
	...

08005ce0 <_svfiprintf_r>:
 8005ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce4:	4698      	mov	r8, r3
 8005ce6:	898b      	ldrh	r3, [r1, #12]
 8005ce8:	061b      	lsls	r3, r3, #24
 8005cea:	b09d      	sub	sp, #116	@ 0x74
 8005cec:	4607      	mov	r7, r0
 8005cee:	460d      	mov	r5, r1
 8005cf0:	4614      	mov	r4, r2
 8005cf2:	d510      	bpl.n	8005d16 <_svfiprintf_r+0x36>
 8005cf4:	690b      	ldr	r3, [r1, #16]
 8005cf6:	b973      	cbnz	r3, 8005d16 <_svfiprintf_r+0x36>
 8005cf8:	2140      	movs	r1, #64	@ 0x40
 8005cfa:	f7ff fb87 	bl	800540c <_malloc_r>
 8005cfe:	6028      	str	r0, [r5, #0]
 8005d00:	6128      	str	r0, [r5, #16]
 8005d02:	b930      	cbnz	r0, 8005d12 <_svfiprintf_r+0x32>
 8005d04:	230c      	movs	r3, #12
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0c:	b01d      	add	sp, #116	@ 0x74
 8005d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d12:	2340      	movs	r3, #64	@ 0x40
 8005d14:	616b      	str	r3, [r5, #20]
 8005d16:	2300      	movs	r3, #0
 8005d18:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d1a:	2320      	movs	r3, #32
 8005d1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d20:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d24:	2330      	movs	r3, #48	@ 0x30
 8005d26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005ec4 <_svfiprintf_r+0x1e4>
 8005d2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d2e:	f04f 0901 	mov.w	r9, #1
 8005d32:	4623      	mov	r3, r4
 8005d34:	469a      	mov	sl, r3
 8005d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d3a:	b10a      	cbz	r2, 8005d40 <_svfiprintf_r+0x60>
 8005d3c:	2a25      	cmp	r2, #37	@ 0x25
 8005d3e:	d1f9      	bne.n	8005d34 <_svfiprintf_r+0x54>
 8005d40:	ebba 0b04 	subs.w	fp, sl, r4
 8005d44:	d00b      	beq.n	8005d5e <_svfiprintf_r+0x7e>
 8005d46:	465b      	mov	r3, fp
 8005d48:	4622      	mov	r2, r4
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	4638      	mov	r0, r7
 8005d4e:	f7ff ff6b 	bl	8005c28 <__ssputs_r>
 8005d52:	3001      	adds	r0, #1
 8005d54:	f000 80a7 	beq.w	8005ea6 <_svfiprintf_r+0x1c6>
 8005d58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d5a:	445a      	add	r2, fp
 8005d5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 809f 	beq.w	8005ea6 <_svfiprintf_r+0x1c6>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d72:	f10a 0a01 	add.w	sl, sl, #1
 8005d76:	9304      	str	r3, [sp, #16]
 8005d78:	9307      	str	r3, [sp, #28]
 8005d7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d80:	4654      	mov	r4, sl
 8005d82:	2205      	movs	r2, #5
 8005d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d88:	484e      	ldr	r0, [pc, #312]	@ (8005ec4 <_svfiprintf_r+0x1e4>)
 8005d8a:	f7fa fa59 	bl	8000240 <memchr>
 8005d8e:	9a04      	ldr	r2, [sp, #16]
 8005d90:	b9d8      	cbnz	r0, 8005dca <_svfiprintf_r+0xea>
 8005d92:	06d0      	lsls	r0, r2, #27
 8005d94:	bf44      	itt	mi
 8005d96:	2320      	movmi	r3, #32
 8005d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d9c:	0711      	lsls	r1, r2, #28
 8005d9e:	bf44      	itt	mi
 8005da0:	232b      	movmi	r3, #43	@ 0x2b
 8005da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005da6:	f89a 3000 	ldrb.w	r3, [sl]
 8005daa:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dac:	d015      	beq.n	8005dda <_svfiprintf_r+0xfa>
 8005dae:	9a07      	ldr	r2, [sp, #28]
 8005db0:	4654      	mov	r4, sl
 8005db2:	2000      	movs	r0, #0
 8005db4:	f04f 0c0a 	mov.w	ip, #10
 8005db8:	4621      	mov	r1, r4
 8005dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dbe:	3b30      	subs	r3, #48	@ 0x30
 8005dc0:	2b09      	cmp	r3, #9
 8005dc2:	d94b      	bls.n	8005e5c <_svfiprintf_r+0x17c>
 8005dc4:	b1b0      	cbz	r0, 8005df4 <_svfiprintf_r+0x114>
 8005dc6:	9207      	str	r2, [sp, #28]
 8005dc8:	e014      	b.n	8005df4 <_svfiprintf_r+0x114>
 8005dca:	eba0 0308 	sub.w	r3, r0, r8
 8005dce:	fa09 f303 	lsl.w	r3, r9, r3
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	9304      	str	r3, [sp, #16]
 8005dd6:	46a2      	mov	sl, r4
 8005dd8:	e7d2      	b.n	8005d80 <_svfiprintf_r+0xa0>
 8005dda:	9b03      	ldr	r3, [sp, #12]
 8005ddc:	1d19      	adds	r1, r3, #4
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	9103      	str	r1, [sp, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	bfbb      	ittet	lt
 8005de6:	425b      	neglt	r3, r3
 8005de8:	f042 0202 	orrlt.w	r2, r2, #2
 8005dec:	9307      	strge	r3, [sp, #28]
 8005dee:	9307      	strlt	r3, [sp, #28]
 8005df0:	bfb8      	it	lt
 8005df2:	9204      	strlt	r2, [sp, #16]
 8005df4:	7823      	ldrb	r3, [r4, #0]
 8005df6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005df8:	d10a      	bne.n	8005e10 <_svfiprintf_r+0x130>
 8005dfa:	7863      	ldrb	r3, [r4, #1]
 8005dfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dfe:	d132      	bne.n	8005e66 <_svfiprintf_r+0x186>
 8005e00:	9b03      	ldr	r3, [sp, #12]
 8005e02:	1d1a      	adds	r2, r3, #4
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	9203      	str	r2, [sp, #12]
 8005e08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e0c:	3402      	adds	r4, #2
 8005e0e:	9305      	str	r3, [sp, #20]
 8005e10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005ed4 <_svfiprintf_r+0x1f4>
 8005e14:	7821      	ldrb	r1, [r4, #0]
 8005e16:	2203      	movs	r2, #3
 8005e18:	4650      	mov	r0, sl
 8005e1a:	f7fa fa11 	bl	8000240 <memchr>
 8005e1e:	b138      	cbz	r0, 8005e30 <_svfiprintf_r+0x150>
 8005e20:	9b04      	ldr	r3, [sp, #16]
 8005e22:	eba0 000a 	sub.w	r0, r0, sl
 8005e26:	2240      	movs	r2, #64	@ 0x40
 8005e28:	4082      	lsls	r2, r0
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	3401      	adds	r4, #1
 8005e2e:	9304      	str	r3, [sp, #16]
 8005e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e34:	4824      	ldr	r0, [pc, #144]	@ (8005ec8 <_svfiprintf_r+0x1e8>)
 8005e36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e3a:	2206      	movs	r2, #6
 8005e3c:	f7fa fa00 	bl	8000240 <memchr>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d036      	beq.n	8005eb2 <_svfiprintf_r+0x1d2>
 8005e44:	4b21      	ldr	r3, [pc, #132]	@ (8005ecc <_svfiprintf_r+0x1ec>)
 8005e46:	bb1b      	cbnz	r3, 8005e90 <_svfiprintf_r+0x1b0>
 8005e48:	9b03      	ldr	r3, [sp, #12]
 8005e4a:	3307      	adds	r3, #7
 8005e4c:	f023 0307 	bic.w	r3, r3, #7
 8005e50:	3308      	adds	r3, #8
 8005e52:	9303      	str	r3, [sp, #12]
 8005e54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e56:	4433      	add	r3, r6
 8005e58:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e5a:	e76a      	b.n	8005d32 <_svfiprintf_r+0x52>
 8005e5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e60:	460c      	mov	r4, r1
 8005e62:	2001      	movs	r0, #1
 8005e64:	e7a8      	b.n	8005db8 <_svfiprintf_r+0xd8>
 8005e66:	2300      	movs	r3, #0
 8005e68:	3401      	adds	r4, #1
 8005e6a:	9305      	str	r3, [sp, #20]
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	f04f 0c0a 	mov.w	ip, #10
 8005e72:	4620      	mov	r0, r4
 8005e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e78:	3a30      	subs	r2, #48	@ 0x30
 8005e7a:	2a09      	cmp	r2, #9
 8005e7c:	d903      	bls.n	8005e86 <_svfiprintf_r+0x1a6>
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0c6      	beq.n	8005e10 <_svfiprintf_r+0x130>
 8005e82:	9105      	str	r1, [sp, #20]
 8005e84:	e7c4      	b.n	8005e10 <_svfiprintf_r+0x130>
 8005e86:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e7f0      	b.n	8005e72 <_svfiprintf_r+0x192>
 8005e90:	ab03      	add	r3, sp, #12
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	462a      	mov	r2, r5
 8005e96:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed0 <_svfiprintf_r+0x1f0>)
 8005e98:	a904      	add	r1, sp, #16
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	f7fd ff14 	bl	8003cc8 <_printf_float>
 8005ea0:	1c42      	adds	r2, r0, #1
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	d1d6      	bne.n	8005e54 <_svfiprintf_r+0x174>
 8005ea6:	89ab      	ldrh	r3, [r5, #12]
 8005ea8:	065b      	lsls	r3, r3, #25
 8005eaa:	f53f af2d 	bmi.w	8005d08 <_svfiprintf_r+0x28>
 8005eae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005eb0:	e72c      	b.n	8005d0c <_svfiprintf_r+0x2c>
 8005eb2:	ab03      	add	r3, sp, #12
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	462a      	mov	r2, r5
 8005eb8:	4b05      	ldr	r3, [pc, #20]	@ (8005ed0 <_svfiprintf_r+0x1f0>)
 8005eba:	a904      	add	r1, sp, #16
 8005ebc:	4638      	mov	r0, r7
 8005ebe:	f7fe f98b 	bl	80041d8 <_printf_i>
 8005ec2:	e7ed      	b.n	8005ea0 <_svfiprintf_r+0x1c0>
 8005ec4:	080069a8 	.word	0x080069a8
 8005ec8:	080069b2 	.word	0x080069b2
 8005ecc:	08003cc9 	.word	0x08003cc9
 8005ed0:	08005c29 	.word	0x08005c29
 8005ed4:	080069ae 	.word	0x080069ae

08005ed8 <__sflush_r>:
 8005ed8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee0:	0716      	lsls	r6, r2, #28
 8005ee2:	4605      	mov	r5, r0
 8005ee4:	460c      	mov	r4, r1
 8005ee6:	d454      	bmi.n	8005f92 <__sflush_r+0xba>
 8005ee8:	684b      	ldr	r3, [r1, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	dc02      	bgt.n	8005ef4 <__sflush_r+0x1c>
 8005eee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	dd48      	ble.n	8005f86 <__sflush_r+0xae>
 8005ef4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ef6:	2e00      	cmp	r6, #0
 8005ef8:	d045      	beq.n	8005f86 <__sflush_r+0xae>
 8005efa:	2300      	movs	r3, #0
 8005efc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005f00:	682f      	ldr	r7, [r5, #0]
 8005f02:	6a21      	ldr	r1, [r4, #32]
 8005f04:	602b      	str	r3, [r5, #0]
 8005f06:	d030      	beq.n	8005f6a <__sflush_r+0x92>
 8005f08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005f0a:	89a3      	ldrh	r3, [r4, #12]
 8005f0c:	0759      	lsls	r1, r3, #29
 8005f0e:	d505      	bpl.n	8005f1c <__sflush_r+0x44>
 8005f10:	6863      	ldr	r3, [r4, #4]
 8005f12:	1ad2      	subs	r2, r2, r3
 8005f14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f16:	b10b      	cbz	r3, 8005f1c <__sflush_r+0x44>
 8005f18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f1a:	1ad2      	subs	r2, r2, r3
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f20:	6a21      	ldr	r1, [r4, #32]
 8005f22:	4628      	mov	r0, r5
 8005f24:	47b0      	blx	r6
 8005f26:	1c43      	adds	r3, r0, #1
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	d106      	bne.n	8005f3a <__sflush_r+0x62>
 8005f2c:	6829      	ldr	r1, [r5, #0]
 8005f2e:	291d      	cmp	r1, #29
 8005f30:	d82b      	bhi.n	8005f8a <__sflush_r+0xb2>
 8005f32:	4a2a      	ldr	r2, [pc, #168]	@ (8005fdc <__sflush_r+0x104>)
 8005f34:	410a      	asrs	r2, r1
 8005f36:	07d6      	lsls	r6, r2, #31
 8005f38:	d427      	bmi.n	8005f8a <__sflush_r+0xb2>
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	6062      	str	r2, [r4, #4]
 8005f3e:	04d9      	lsls	r1, r3, #19
 8005f40:	6922      	ldr	r2, [r4, #16]
 8005f42:	6022      	str	r2, [r4, #0]
 8005f44:	d504      	bpl.n	8005f50 <__sflush_r+0x78>
 8005f46:	1c42      	adds	r2, r0, #1
 8005f48:	d101      	bne.n	8005f4e <__sflush_r+0x76>
 8005f4a:	682b      	ldr	r3, [r5, #0]
 8005f4c:	b903      	cbnz	r3, 8005f50 <__sflush_r+0x78>
 8005f4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f52:	602f      	str	r7, [r5, #0]
 8005f54:	b1b9      	cbz	r1, 8005f86 <__sflush_r+0xae>
 8005f56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f5a:	4299      	cmp	r1, r3
 8005f5c:	d002      	beq.n	8005f64 <__sflush_r+0x8c>
 8005f5e:	4628      	mov	r0, r5
 8005f60:	f7ff f9e0 	bl	8005324 <_free_r>
 8005f64:	2300      	movs	r3, #0
 8005f66:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f68:	e00d      	b.n	8005f86 <__sflush_r+0xae>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	47b0      	blx	r6
 8005f70:	4602      	mov	r2, r0
 8005f72:	1c50      	adds	r0, r2, #1
 8005f74:	d1c9      	bne.n	8005f0a <__sflush_r+0x32>
 8005f76:	682b      	ldr	r3, [r5, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0c6      	beq.n	8005f0a <__sflush_r+0x32>
 8005f7c:	2b1d      	cmp	r3, #29
 8005f7e:	d001      	beq.n	8005f84 <__sflush_r+0xac>
 8005f80:	2b16      	cmp	r3, #22
 8005f82:	d11e      	bne.n	8005fc2 <__sflush_r+0xea>
 8005f84:	602f      	str	r7, [r5, #0]
 8005f86:	2000      	movs	r0, #0
 8005f88:	e022      	b.n	8005fd0 <__sflush_r+0xf8>
 8005f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f8e:	b21b      	sxth	r3, r3
 8005f90:	e01b      	b.n	8005fca <__sflush_r+0xf2>
 8005f92:	690f      	ldr	r7, [r1, #16]
 8005f94:	2f00      	cmp	r7, #0
 8005f96:	d0f6      	beq.n	8005f86 <__sflush_r+0xae>
 8005f98:	0793      	lsls	r3, r2, #30
 8005f9a:	680e      	ldr	r6, [r1, #0]
 8005f9c:	bf08      	it	eq
 8005f9e:	694b      	ldreq	r3, [r1, #20]
 8005fa0:	600f      	str	r7, [r1, #0]
 8005fa2:	bf18      	it	ne
 8005fa4:	2300      	movne	r3, #0
 8005fa6:	eba6 0807 	sub.w	r8, r6, r7
 8005faa:	608b      	str	r3, [r1, #8]
 8005fac:	f1b8 0f00 	cmp.w	r8, #0
 8005fb0:	dde9      	ble.n	8005f86 <__sflush_r+0xae>
 8005fb2:	6a21      	ldr	r1, [r4, #32]
 8005fb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005fb6:	4643      	mov	r3, r8
 8005fb8:	463a      	mov	r2, r7
 8005fba:	4628      	mov	r0, r5
 8005fbc:	47b0      	blx	r6
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	dc08      	bgt.n	8005fd4 <__sflush_r+0xfc>
 8005fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fca:	81a3      	strh	r3, [r4, #12]
 8005fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fd4:	4407      	add	r7, r0
 8005fd6:	eba8 0800 	sub.w	r8, r8, r0
 8005fda:	e7e7      	b.n	8005fac <__sflush_r+0xd4>
 8005fdc:	dfbffffe 	.word	0xdfbffffe

08005fe0 <_fflush_r>:
 8005fe0:	b538      	push	{r3, r4, r5, lr}
 8005fe2:	690b      	ldr	r3, [r1, #16]
 8005fe4:	4605      	mov	r5, r0
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	b913      	cbnz	r3, 8005ff0 <_fflush_r+0x10>
 8005fea:	2500      	movs	r5, #0
 8005fec:	4628      	mov	r0, r5
 8005fee:	bd38      	pop	{r3, r4, r5, pc}
 8005ff0:	b118      	cbz	r0, 8005ffa <_fflush_r+0x1a>
 8005ff2:	6a03      	ldr	r3, [r0, #32]
 8005ff4:	b90b      	cbnz	r3, 8005ffa <_fflush_r+0x1a>
 8005ff6:	f7fe fa9b 	bl	8004530 <__sinit>
 8005ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d0f3      	beq.n	8005fea <_fflush_r+0xa>
 8006002:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006004:	07d0      	lsls	r0, r2, #31
 8006006:	d404      	bmi.n	8006012 <_fflush_r+0x32>
 8006008:	0599      	lsls	r1, r3, #22
 800600a:	d402      	bmi.n	8006012 <_fflush_r+0x32>
 800600c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800600e:	f7fe fba6 	bl	800475e <__retarget_lock_acquire_recursive>
 8006012:	4628      	mov	r0, r5
 8006014:	4621      	mov	r1, r4
 8006016:	f7ff ff5f 	bl	8005ed8 <__sflush_r>
 800601a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800601c:	07da      	lsls	r2, r3, #31
 800601e:	4605      	mov	r5, r0
 8006020:	d4e4      	bmi.n	8005fec <_fflush_r+0xc>
 8006022:	89a3      	ldrh	r3, [r4, #12]
 8006024:	059b      	lsls	r3, r3, #22
 8006026:	d4e1      	bmi.n	8005fec <_fflush_r+0xc>
 8006028:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800602a:	f7fe fb99 	bl	8004760 <__retarget_lock_release_recursive>
 800602e:	e7dd      	b.n	8005fec <_fflush_r+0xc>

08006030 <memmove>:
 8006030:	4288      	cmp	r0, r1
 8006032:	b510      	push	{r4, lr}
 8006034:	eb01 0402 	add.w	r4, r1, r2
 8006038:	d902      	bls.n	8006040 <memmove+0x10>
 800603a:	4284      	cmp	r4, r0
 800603c:	4623      	mov	r3, r4
 800603e:	d807      	bhi.n	8006050 <memmove+0x20>
 8006040:	1e43      	subs	r3, r0, #1
 8006042:	42a1      	cmp	r1, r4
 8006044:	d008      	beq.n	8006058 <memmove+0x28>
 8006046:	f811 2b01 	ldrb.w	r2, [r1], #1
 800604a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800604e:	e7f8      	b.n	8006042 <memmove+0x12>
 8006050:	4402      	add	r2, r0
 8006052:	4601      	mov	r1, r0
 8006054:	428a      	cmp	r2, r1
 8006056:	d100      	bne.n	800605a <memmove+0x2a>
 8006058:	bd10      	pop	{r4, pc}
 800605a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800605e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006062:	e7f7      	b.n	8006054 <memmove+0x24>

08006064 <_sbrk_r>:
 8006064:	b538      	push	{r3, r4, r5, lr}
 8006066:	4d06      	ldr	r5, [pc, #24]	@ (8006080 <_sbrk_r+0x1c>)
 8006068:	2300      	movs	r3, #0
 800606a:	4604      	mov	r4, r0
 800606c:	4608      	mov	r0, r1
 800606e:	602b      	str	r3, [r5, #0]
 8006070:	f7fa fe64 	bl	8000d3c <_sbrk>
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	d102      	bne.n	800607e <_sbrk_r+0x1a>
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	b103      	cbz	r3, 800607e <_sbrk_r+0x1a>
 800607c:	6023      	str	r3, [r4, #0]
 800607e:	bd38      	pop	{r3, r4, r5, pc}
 8006080:	20000480 	.word	0x20000480

08006084 <memcpy>:
 8006084:	440a      	add	r2, r1
 8006086:	4291      	cmp	r1, r2
 8006088:	f100 33ff 	add.w	r3, r0, #4294967295
 800608c:	d100      	bne.n	8006090 <memcpy+0xc>
 800608e:	4770      	bx	lr
 8006090:	b510      	push	{r4, lr}
 8006092:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006096:	f803 4f01 	strb.w	r4, [r3, #1]!
 800609a:	4291      	cmp	r1, r2
 800609c:	d1f9      	bne.n	8006092 <memcpy+0xe>
 800609e:	bd10      	pop	{r4, pc}

080060a0 <__assert_func>:
 80060a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060a2:	4614      	mov	r4, r2
 80060a4:	461a      	mov	r2, r3
 80060a6:	4b09      	ldr	r3, [pc, #36]	@ (80060cc <__assert_func+0x2c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4605      	mov	r5, r0
 80060ac:	68d8      	ldr	r0, [r3, #12]
 80060ae:	b954      	cbnz	r4, 80060c6 <__assert_func+0x26>
 80060b0:	4b07      	ldr	r3, [pc, #28]	@ (80060d0 <__assert_func+0x30>)
 80060b2:	461c      	mov	r4, r3
 80060b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80060b8:	9100      	str	r1, [sp, #0]
 80060ba:	462b      	mov	r3, r5
 80060bc:	4905      	ldr	r1, [pc, #20]	@ (80060d4 <__assert_func+0x34>)
 80060be:	f000 f86f 	bl	80061a0 <fiprintf>
 80060c2:	f000 f87f 	bl	80061c4 <abort>
 80060c6:	4b04      	ldr	r3, [pc, #16]	@ (80060d8 <__assert_func+0x38>)
 80060c8:	e7f4      	b.n	80060b4 <__assert_func+0x14>
 80060ca:	bf00      	nop
 80060cc:	20000018 	.word	0x20000018
 80060d0:	080069fe 	.word	0x080069fe
 80060d4:	080069d0 	.word	0x080069d0
 80060d8:	080069c3 	.word	0x080069c3

080060dc <_calloc_r>:
 80060dc:	b570      	push	{r4, r5, r6, lr}
 80060de:	fba1 5402 	umull	r5, r4, r1, r2
 80060e2:	b93c      	cbnz	r4, 80060f4 <_calloc_r+0x18>
 80060e4:	4629      	mov	r1, r5
 80060e6:	f7ff f991 	bl	800540c <_malloc_r>
 80060ea:	4606      	mov	r6, r0
 80060ec:	b928      	cbnz	r0, 80060fa <_calloc_r+0x1e>
 80060ee:	2600      	movs	r6, #0
 80060f0:	4630      	mov	r0, r6
 80060f2:	bd70      	pop	{r4, r5, r6, pc}
 80060f4:	220c      	movs	r2, #12
 80060f6:	6002      	str	r2, [r0, #0]
 80060f8:	e7f9      	b.n	80060ee <_calloc_r+0x12>
 80060fa:	462a      	mov	r2, r5
 80060fc:	4621      	mov	r1, r4
 80060fe:	f7fe fab0 	bl	8004662 <memset>
 8006102:	e7f5      	b.n	80060f0 <_calloc_r+0x14>

08006104 <__ascii_mbtowc>:
 8006104:	b082      	sub	sp, #8
 8006106:	b901      	cbnz	r1, 800610a <__ascii_mbtowc+0x6>
 8006108:	a901      	add	r1, sp, #4
 800610a:	b142      	cbz	r2, 800611e <__ascii_mbtowc+0x1a>
 800610c:	b14b      	cbz	r3, 8006122 <__ascii_mbtowc+0x1e>
 800610e:	7813      	ldrb	r3, [r2, #0]
 8006110:	600b      	str	r3, [r1, #0]
 8006112:	7812      	ldrb	r2, [r2, #0]
 8006114:	1e10      	subs	r0, r2, #0
 8006116:	bf18      	it	ne
 8006118:	2001      	movne	r0, #1
 800611a:	b002      	add	sp, #8
 800611c:	4770      	bx	lr
 800611e:	4610      	mov	r0, r2
 8006120:	e7fb      	b.n	800611a <__ascii_mbtowc+0x16>
 8006122:	f06f 0001 	mvn.w	r0, #1
 8006126:	e7f8      	b.n	800611a <__ascii_mbtowc+0x16>

08006128 <_realloc_r>:
 8006128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800612c:	4680      	mov	r8, r0
 800612e:	4615      	mov	r5, r2
 8006130:	460c      	mov	r4, r1
 8006132:	b921      	cbnz	r1, 800613e <_realloc_r+0x16>
 8006134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006138:	4611      	mov	r1, r2
 800613a:	f7ff b967 	b.w	800540c <_malloc_r>
 800613e:	b92a      	cbnz	r2, 800614c <_realloc_r+0x24>
 8006140:	f7ff f8f0 	bl	8005324 <_free_r>
 8006144:	2400      	movs	r4, #0
 8006146:	4620      	mov	r0, r4
 8006148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800614c:	f000 f841 	bl	80061d2 <_malloc_usable_size_r>
 8006150:	4285      	cmp	r5, r0
 8006152:	4606      	mov	r6, r0
 8006154:	d802      	bhi.n	800615c <_realloc_r+0x34>
 8006156:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800615a:	d8f4      	bhi.n	8006146 <_realloc_r+0x1e>
 800615c:	4629      	mov	r1, r5
 800615e:	4640      	mov	r0, r8
 8006160:	f7ff f954 	bl	800540c <_malloc_r>
 8006164:	4607      	mov	r7, r0
 8006166:	2800      	cmp	r0, #0
 8006168:	d0ec      	beq.n	8006144 <_realloc_r+0x1c>
 800616a:	42b5      	cmp	r5, r6
 800616c:	462a      	mov	r2, r5
 800616e:	4621      	mov	r1, r4
 8006170:	bf28      	it	cs
 8006172:	4632      	movcs	r2, r6
 8006174:	f7ff ff86 	bl	8006084 <memcpy>
 8006178:	4621      	mov	r1, r4
 800617a:	4640      	mov	r0, r8
 800617c:	f7ff f8d2 	bl	8005324 <_free_r>
 8006180:	463c      	mov	r4, r7
 8006182:	e7e0      	b.n	8006146 <_realloc_r+0x1e>

08006184 <__ascii_wctomb>:
 8006184:	4603      	mov	r3, r0
 8006186:	4608      	mov	r0, r1
 8006188:	b141      	cbz	r1, 800619c <__ascii_wctomb+0x18>
 800618a:	2aff      	cmp	r2, #255	@ 0xff
 800618c:	d904      	bls.n	8006198 <__ascii_wctomb+0x14>
 800618e:	228a      	movs	r2, #138	@ 0x8a
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	f04f 30ff 	mov.w	r0, #4294967295
 8006196:	4770      	bx	lr
 8006198:	700a      	strb	r2, [r1, #0]
 800619a:	2001      	movs	r0, #1
 800619c:	4770      	bx	lr
	...

080061a0 <fiprintf>:
 80061a0:	b40e      	push	{r1, r2, r3}
 80061a2:	b503      	push	{r0, r1, lr}
 80061a4:	4601      	mov	r1, r0
 80061a6:	ab03      	add	r3, sp, #12
 80061a8:	4805      	ldr	r0, [pc, #20]	@ (80061c0 <fiprintf+0x20>)
 80061aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ae:	6800      	ldr	r0, [r0, #0]
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	f000 f83f 	bl	8006234 <_vfiprintf_r>
 80061b6:	b002      	add	sp, #8
 80061b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80061bc:	b003      	add	sp, #12
 80061be:	4770      	bx	lr
 80061c0:	20000018 	.word	0x20000018

080061c4 <abort>:
 80061c4:	b508      	push	{r3, lr}
 80061c6:	2006      	movs	r0, #6
 80061c8:	f000 fa08 	bl	80065dc <raise>
 80061cc:	2001      	movs	r0, #1
 80061ce:	f7fa fd3c 	bl	8000c4a <_exit>

080061d2 <_malloc_usable_size_r>:
 80061d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061d6:	1f18      	subs	r0, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	bfbc      	itt	lt
 80061dc:	580b      	ldrlt	r3, [r1, r0]
 80061de:	18c0      	addlt	r0, r0, r3
 80061e0:	4770      	bx	lr

080061e2 <__sfputc_r>:
 80061e2:	6893      	ldr	r3, [r2, #8]
 80061e4:	3b01      	subs	r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	b410      	push	{r4}
 80061ea:	6093      	str	r3, [r2, #8]
 80061ec:	da08      	bge.n	8006200 <__sfputc_r+0x1e>
 80061ee:	6994      	ldr	r4, [r2, #24]
 80061f0:	42a3      	cmp	r3, r4
 80061f2:	db01      	blt.n	80061f8 <__sfputc_r+0x16>
 80061f4:	290a      	cmp	r1, #10
 80061f6:	d103      	bne.n	8006200 <__sfputc_r+0x1e>
 80061f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061fc:	f000 b932 	b.w	8006464 <__swbuf_r>
 8006200:	6813      	ldr	r3, [r2, #0]
 8006202:	1c58      	adds	r0, r3, #1
 8006204:	6010      	str	r0, [r2, #0]
 8006206:	7019      	strb	r1, [r3, #0]
 8006208:	4608      	mov	r0, r1
 800620a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800620e:	4770      	bx	lr

08006210 <__sfputs_r>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	4606      	mov	r6, r0
 8006214:	460f      	mov	r7, r1
 8006216:	4614      	mov	r4, r2
 8006218:	18d5      	adds	r5, r2, r3
 800621a:	42ac      	cmp	r4, r5
 800621c:	d101      	bne.n	8006222 <__sfputs_r+0x12>
 800621e:	2000      	movs	r0, #0
 8006220:	e007      	b.n	8006232 <__sfputs_r+0x22>
 8006222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006226:	463a      	mov	r2, r7
 8006228:	4630      	mov	r0, r6
 800622a:	f7ff ffda 	bl	80061e2 <__sfputc_r>
 800622e:	1c43      	adds	r3, r0, #1
 8006230:	d1f3      	bne.n	800621a <__sfputs_r+0xa>
 8006232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006234 <_vfiprintf_r>:
 8006234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006238:	460d      	mov	r5, r1
 800623a:	b09d      	sub	sp, #116	@ 0x74
 800623c:	4614      	mov	r4, r2
 800623e:	4698      	mov	r8, r3
 8006240:	4606      	mov	r6, r0
 8006242:	b118      	cbz	r0, 800624c <_vfiprintf_r+0x18>
 8006244:	6a03      	ldr	r3, [r0, #32]
 8006246:	b90b      	cbnz	r3, 800624c <_vfiprintf_r+0x18>
 8006248:	f7fe f972 	bl	8004530 <__sinit>
 800624c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800624e:	07d9      	lsls	r1, r3, #31
 8006250:	d405      	bmi.n	800625e <_vfiprintf_r+0x2a>
 8006252:	89ab      	ldrh	r3, [r5, #12]
 8006254:	059a      	lsls	r2, r3, #22
 8006256:	d402      	bmi.n	800625e <_vfiprintf_r+0x2a>
 8006258:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800625a:	f7fe fa80 	bl	800475e <__retarget_lock_acquire_recursive>
 800625e:	89ab      	ldrh	r3, [r5, #12]
 8006260:	071b      	lsls	r3, r3, #28
 8006262:	d501      	bpl.n	8006268 <_vfiprintf_r+0x34>
 8006264:	692b      	ldr	r3, [r5, #16]
 8006266:	b99b      	cbnz	r3, 8006290 <_vfiprintf_r+0x5c>
 8006268:	4629      	mov	r1, r5
 800626a:	4630      	mov	r0, r6
 800626c:	f000 f938 	bl	80064e0 <__swsetup_r>
 8006270:	b170      	cbz	r0, 8006290 <_vfiprintf_r+0x5c>
 8006272:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006274:	07dc      	lsls	r4, r3, #31
 8006276:	d504      	bpl.n	8006282 <_vfiprintf_r+0x4e>
 8006278:	f04f 30ff 	mov.w	r0, #4294967295
 800627c:	b01d      	add	sp, #116	@ 0x74
 800627e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006282:	89ab      	ldrh	r3, [r5, #12]
 8006284:	0598      	lsls	r0, r3, #22
 8006286:	d4f7      	bmi.n	8006278 <_vfiprintf_r+0x44>
 8006288:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800628a:	f7fe fa69 	bl	8004760 <__retarget_lock_release_recursive>
 800628e:	e7f3      	b.n	8006278 <_vfiprintf_r+0x44>
 8006290:	2300      	movs	r3, #0
 8006292:	9309      	str	r3, [sp, #36]	@ 0x24
 8006294:	2320      	movs	r3, #32
 8006296:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800629a:	f8cd 800c 	str.w	r8, [sp, #12]
 800629e:	2330      	movs	r3, #48	@ 0x30
 80062a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006450 <_vfiprintf_r+0x21c>
 80062a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062a8:	f04f 0901 	mov.w	r9, #1
 80062ac:	4623      	mov	r3, r4
 80062ae:	469a      	mov	sl, r3
 80062b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062b4:	b10a      	cbz	r2, 80062ba <_vfiprintf_r+0x86>
 80062b6:	2a25      	cmp	r2, #37	@ 0x25
 80062b8:	d1f9      	bne.n	80062ae <_vfiprintf_r+0x7a>
 80062ba:	ebba 0b04 	subs.w	fp, sl, r4
 80062be:	d00b      	beq.n	80062d8 <_vfiprintf_r+0xa4>
 80062c0:	465b      	mov	r3, fp
 80062c2:	4622      	mov	r2, r4
 80062c4:	4629      	mov	r1, r5
 80062c6:	4630      	mov	r0, r6
 80062c8:	f7ff ffa2 	bl	8006210 <__sfputs_r>
 80062cc:	3001      	adds	r0, #1
 80062ce:	f000 80a7 	beq.w	8006420 <_vfiprintf_r+0x1ec>
 80062d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062d4:	445a      	add	r2, fp
 80062d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80062d8:	f89a 3000 	ldrb.w	r3, [sl]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 809f 	beq.w	8006420 <_vfiprintf_r+0x1ec>
 80062e2:	2300      	movs	r3, #0
 80062e4:	f04f 32ff 	mov.w	r2, #4294967295
 80062e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062ec:	f10a 0a01 	add.w	sl, sl, #1
 80062f0:	9304      	str	r3, [sp, #16]
 80062f2:	9307      	str	r3, [sp, #28]
 80062f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80062fa:	4654      	mov	r4, sl
 80062fc:	2205      	movs	r2, #5
 80062fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006302:	4853      	ldr	r0, [pc, #332]	@ (8006450 <_vfiprintf_r+0x21c>)
 8006304:	f7f9 ff9c 	bl	8000240 <memchr>
 8006308:	9a04      	ldr	r2, [sp, #16]
 800630a:	b9d8      	cbnz	r0, 8006344 <_vfiprintf_r+0x110>
 800630c:	06d1      	lsls	r1, r2, #27
 800630e:	bf44      	itt	mi
 8006310:	2320      	movmi	r3, #32
 8006312:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006316:	0713      	lsls	r3, r2, #28
 8006318:	bf44      	itt	mi
 800631a:	232b      	movmi	r3, #43	@ 0x2b
 800631c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006320:	f89a 3000 	ldrb.w	r3, [sl]
 8006324:	2b2a      	cmp	r3, #42	@ 0x2a
 8006326:	d015      	beq.n	8006354 <_vfiprintf_r+0x120>
 8006328:	9a07      	ldr	r2, [sp, #28]
 800632a:	4654      	mov	r4, sl
 800632c:	2000      	movs	r0, #0
 800632e:	f04f 0c0a 	mov.w	ip, #10
 8006332:	4621      	mov	r1, r4
 8006334:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006338:	3b30      	subs	r3, #48	@ 0x30
 800633a:	2b09      	cmp	r3, #9
 800633c:	d94b      	bls.n	80063d6 <_vfiprintf_r+0x1a2>
 800633e:	b1b0      	cbz	r0, 800636e <_vfiprintf_r+0x13a>
 8006340:	9207      	str	r2, [sp, #28]
 8006342:	e014      	b.n	800636e <_vfiprintf_r+0x13a>
 8006344:	eba0 0308 	sub.w	r3, r0, r8
 8006348:	fa09 f303 	lsl.w	r3, r9, r3
 800634c:	4313      	orrs	r3, r2
 800634e:	9304      	str	r3, [sp, #16]
 8006350:	46a2      	mov	sl, r4
 8006352:	e7d2      	b.n	80062fa <_vfiprintf_r+0xc6>
 8006354:	9b03      	ldr	r3, [sp, #12]
 8006356:	1d19      	adds	r1, r3, #4
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	9103      	str	r1, [sp, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	bfbb      	ittet	lt
 8006360:	425b      	neglt	r3, r3
 8006362:	f042 0202 	orrlt.w	r2, r2, #2
 8006366:	9307      	strge	r3, [sp, #28]
 8006368:	9307      	strlt	r3, [sp, #28]
 800636a:	bfb8      	it	lt
 800636c:	9204      	strlt	r2, [sp, #16]
 800636e:	7823      	ldrb	r3, [r4, #0]
 8006370:	2b2e      	cmp	r3, #46	@ 0x2e
 8006372:	d10a      	bne.n	800638a <_vfiprintf_r+0x156>
 8006374:	7863      	ldrb	r3, [r4, #1]
 8006376:	2b2a      	cmp	r3, #42	@ 0x2a
 8006378:	d132      	bne.n	80063e0 <_vfiprintf_r+0x1ac>
 800637a:	9b03      	ldr	r3, [sp, #12]
 800637c:	1d1a      	adds	r2, r3, #4
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	9203      	str	r2, [sp, #12]
 8006382:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006386:	3402      	adds	r4, #2
 8006388:	9305      	str	r3, [sp, #20]
 800638a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006460 <_vfiprintf_r+0x22c>
 800638e:	7821      	ldrb	r1, [r4, #0]
 8006390:	2203      	movs	r2, #3
 8006392:	4650      	mov	r0, sl
 8006394:	f7f9 ff54 	bl	8000240 <memchr>
 8006398:	b138      	cbz	r0, 80063aa <_vfiprintf_r+0x176>
 800639a:	9b04      	ldr	r3, [sp, #16]
 800639c:	eba0 000a 	sub.w	r0, r0, sl
 80063a0:	2240      	movs	r2, #64	@ 0x40
 80063a2:	4082      	lsls	r2, r0
 80063a4:	4313      	orrs	r3, r2
 80063a6:	3401      	adds	r4, #1
 80063a8:	9304      	str	r3, [sp, #16]
 80063aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ae:	4829      	ldr	r0, [pc, #164]	@ (8006454 <_vfiprintf_r+0x220>)
 80063b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063b4:	2206      	movs	r2, #6
 80063b6:	f7f9 ff43 	bl	8000240 <memchr>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	d03f      	beq.n	800643e <_vfiprintf_r+0x20a>
 80063be:	4b26      	ldr	r3, [pc, #152]	@ (8006458 <_vfiprintf_r+0x224>)
 80063c0:	bb1b      	cbnz	r3, 800640a <_vfiprintf_r+0x1d6>
 80063c2:	9b03      	ldr	r3, [sp, #12]
 80063c4:	3307      	adds	r3, #7
 80063c6:	f023 0307 	bic.w	r3, r3, #7
 80063ca:	3308      	adds	r3, #8
 80063cc:	9303      	str	r3, [sp, #12]
 80063ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063d0:	443b      	add	r3, r7
 80063d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80063d4:	e76a      	b.n	80062ac <_vfiprintf_r+0x78>
 80063d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80063da:	460c      	mov	r4, r1
 80063dc:	2001      	movs	r0, #1
 80063de:	e7a8      	b.n	8006332 <_vfiprintf_r+0xfe>
 80063e0:	2300      	movs	r3, #0
 80063e2:	3401      	adds	r4, #1
 80063e4:	9305      	str	r3, [sp, #20]
 80063e6:	4619      	mov	r1, r3
 80063e8:	f04f 0c0a 	mov.w	ip, #10
 80063ec:	4620      	mov	r0, r4
 80063ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063f2:	3a30      	subs	r2, #48	@ 0x30
 80063f4:	2a09      	cmp	r2, #9
 80063f6:	d903      	bls.n	8006400 <_vfiprintf_r+0x1cc>
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d0c6      	beq.n	800638a <_vfiprintf_r+0x156>
 80063fc:	9105      	str	r1, [sp, #20]
 80063fe:	e7c4      	b.n	800638a <_vfiprintf_r+0x156>
 8006400:	fb0c 2101 	mla	r1, ip, r1, r2
 8006404:	4604      	mov	r4, r0
 8006406:	2301      	movs	r3, #1
 8006408:	e7f0      	b.n	80063ec <_vfiprintf_r+0x1b8>
 800640a:	ab03      	add	r3, sp, #12
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	462a      	mov	r2, r5
 8006410:	4b12      	ldr	r3, [pc, #72]	@ (800645c <_vfiprintf_r+0x228>)
 8006412:	a904      	add	r1, sp, #16
 8006414:	4630      	mov	r0, r6
 8006416:	f7fd fc57 	bl	8003cc8 <_printf_float>
 800641a:	4607      	mov	r7, r0
 800641c:	1c78      	adds	r0, r7, #1
 800641e:	d1d6      	bne.n	80063ce <_vfiprintf_r+0x19a>
 8006420:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006422:	07d9      	lsls	r1, r3, #31
 8006424:	d405      	bmi.n	8006432 <_vfiprintf_r+0x1fe>
 8006426:	89ab      	ldrh	r3, [r5, #12]
 8006428:	059a      	lsls	r2, r3, #22
 800642a:	d402      	bmi.n	8006432 <_vfiprintf_r+0x1fe>
 800642c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800642e:	f7fe f997 	bl	8004760 <__retarget_lock_release_recursive>
 8006432:	89ab      	ldrh	r3, [r5, #12]
 8006434:	065b      	lsls	r3, r3, #25
 8006436:	f53f af1f 	bmi.w	8006278 <_vfiprintf_r+0x44>
 800643a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800643c:	e71e      	b.n	800627c <_vfiprintf_r+0x48>
 800643e:	ab03      	add	r3, sp, #12
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	462a      	mov	r2, r5
 8006444:	4b05      	ldr	r3, [pc, #20]	@ (800645c <_vfiprintf_r+0x228>)
 8006446:	a904      	add	r1, sp, #16
 8006448:	4630      	mov	r0, r6
 800644a:	f7fd fec5 	bl	80041d8 <_printf_i>
 800644e:	e7e4      	b.n	800641a <_vfiprintf_r+0x1e6>
 8006450:	080069a8 	.word	0x080069a8
 8006454:	080069b2 	.word	0x080069b2
 8006458:	08003cc9 	.word	0x08003cc9
 800645c:	08006211 	.word	0x08006211
 8006460:	080069ae 	.word	0x080069ae

08006464 <__swbuf_r>:
 8006464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006466:	460e      	mov	r6, r1
 8006468:	4614      	mov	r4, r2
 800646a:	4605      	mov	r5, r0
 800646c:	b118      	cbz	r0, 8006476 <__swbuf_r+0x12>
 800646e:	6a03      	ldr	r3, [r0, #32]
 8006470:	b90b      	cbnz	r3, 8006476 <__swbuf_r+0x12>
 8006472:	f7fe f85d 	bl	8004530 <__sinit>
 8006476:	69a3      	ldr	r3, [r4, #24]
 8006478:	60a3      	str	r3, [r4, #8]
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	071a      	lsls	r2, r3, #28
 800647e:	d501      	bpl.n	8006484 <__swbuf_r+0x20>
 8006480:	6923      	ldr	r3, [r4, #16]
 8006482:	b943      	cbnz	r3, 8006496 <__swbuf_r+0x32>
 8006484:	4621      	mov	r1, r4
 8006486:	4628      	mov	r0, r5
 8006488:	f000 f82a 	bl	80064e0 <__swsetup_r>
 800648c:	b118      	cbz	r0, 8006496 <__swbuf_r+0x32>
 800648e:	f04f 37ff 	mov.w	r7, #4294967295
 8006492:	4638      	mov	r0, r7
 8006494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006496:	6823      	ldr	r3, [r4, #0]
 8006498:	6922      	ldr	r2, [r4, #16]
 800649a:	1a98      	subs	r0, r3, r2
 800649c:	6963      	ldr	r3, [r4, #20]
 800649e:	b2f6      	uxtb	r6, r6
 80064a0:	4283      	cmp	r3, r0
 80064a2:	4637      	mov	r7, r6
 80064a4:	dc05      	bgt.n	80064b2 <__swbuf_r+0x4e>
 80064a6:	4621      	mov	r1, r4
 80064a8:	4628      	mov	r0, r5
 80064aa:	f7ff fd99 	bl	8005fe0 <_fflush_r>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d1ed      	bne.n	800648e <__swbuf_r+0x2a>
 80064b2:	68a3      	ldr	r3, [r4, #8]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	60a3      	str	r3, [r4, #8]
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	6022      	str	r2, [r4, #0]
 80064be:	701e      	strb	r6, [r3, #0]
 80064c0:	6962      	ldr	r2, [r4, #20]
 80064c2:	1c43      	adds	r3, r0, #1
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d004      	beq.n	80064d2 <__swbuf_r+0x6e>
 80064c8:	89a3      	ldrh	r3, [r4, #12]
 80064ca:	07db      	lsls	r3, r3, #31
 80064cc:	d5e1      	bpl.n	8006492 <__swbuf_r+0x2e>
 80064ce:	2e0a      	cmp	r6, #10
 80064d0:	d1df      	bne.n	8006492 <__swbuf_r+0x2e>
 80064d2:	4621      	mov	r1, r4
 80064d4:	4628      	mov	r0, r5
 80064d6:	f7ff fd83 	bl	8005fe0 <_fflush_r>
 80064da:	2800      	cmp	r0, #0
 80064dc:	d0d9      	beq.n	8006492 <__swbuf_r+0x2e>
 80064de:	e7d6      	b.n	800648e <__swbuf_r+0x2a>

080064e0 <__swsetup_r>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	4b29      	ldr	r3, [pc, #164]	@ (8006588 <__swsetup_r+0xa8>)
 80064e4:	4605      	mov	r5, r0
 80064e6:	6818      	ldr	r0, [r3, #0]
 80064e8:	460c      	mov	r4, r1
 80064ea:	b118      	cbz	r0, 80064f4 <__swsetup_r+0x14>
 80064ec:	6a03      	ldr	r3, [r0, #32]
 80064ee:	b90b      	cbnz	r3, 80064f4 <__swsetup_r+0x14>
 80064f0:	f7fe f81e 	bl	8004530 <__sinit>
 80064f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064f8:	0719      	lsls	r1, r3, #28
 80064fa:	d422      	bmi.n	8006542 <__swsetup_r+0x62>
 80064fc:	06da      	lsls	r2, r3, #27
 80064fe:	d407      	bmi.n	8006510 <__swsetup_r+0x30>
 8006500:	2209      	movs	r2, #9
 8006502:	602a      	str	r2, [r5, #0]
 8006504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006508:	81a3      	strh	r3, [r4, #12]
 800650a:	f04f 30ff 	mov.w	r0, #4294967295
 800650e:	e033      	b.n	8006578 <__swsetup_r+0x98>
 8006510:	0758      	lsls	r0, r3, #29
 8006512:	d512      	bpl.n	800653a <__swsetup_r+0x5a>
 8006514:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006516:	b141      	cbz	r1, 800652a <__swsetup_r+0x4a>
 8006518:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800651c:	4299      	cmp	r1, r3
 800651e:	d002      	beq.n	8006526 <__swsetup_r+0x46>
 8006520:	4628      	mov	r0, r5
 8006522:	f7fe feff 	bl	8005324 <_free_r>
 8006526:	2300      	movs	r3, #0
 8006528:	6363      	str	r3, [r4, #52]	@ 0x34
 800652a:	89a3      	ldrh	r3, [r4, #12]
 800652c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006530:	81a3      	strh	r3, [r4, #12]
 8006532:	2300      	movs	r3, #0
 8006534:	6063      	str	r3, [r4, #4]
 8006536:	6923      	ldr	r3, [r4, #16]
 8006538:	6023      	str	r3, [r4, #0]
 800653a:	89a3      	ldrh	r3, [r4, #12]
 800653c:	f043 0308 	orr.w	r3, r3, #8
 8006540:	81a3      	strh	r3, [r4, #12]
 8006542:	6923      	ldr	r3, [r4, #16]
 8006544:	b94b      	cbnz	r3, 800655a <__swsetup_r+0x7a>
 8006546:	89a3      	ldrh	r3, [r4, #12]
 8006548:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800654c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006550:	d003      	beq.n	800655a <__swsetup_r+0x7a>
 8006552:	4621      	mov	r1, r4
 8006554:	4628      	mov	r0, r5
 8006556:	f000 f883 	bl	8006660 <__smakebuf_r>
 800655a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800655e:	f013 0201 	ands.w	r2, r3, #1
 8006562:	d00a      	beq.n	800657a <__swsetup_r+0x9a>
 8006564:	2200      	movs	r2, #0
 8006566:	60a2      	str	r2, [r4, #8]
 8006568:	6962      	ldr	r2, [r4, #20]
 800656a:	4252      	negs	r2, r2
 800656c:	61a2      	str	r2, [r4, #24]
 800656e:	6922      	ldr	r2, [r4, #16]
 8006570:	b942      	cbnz	r2, 8006584 <__swsetup_r+0xa4>
 8006572:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006576:	d1c5      	bne.n	8006504 <__swsetup_r+0x24>
 8006578:	bd38      	pop	{r3, r4, r5, pc}
 800657a:	0799      	lsls	r1, r3, #30
 800657c:	bf58      	it	pl
 800657e:	6962      	ldrpl	r2, [r4, #20]
 8006580:	60a2      	str	r2, [r4, #8]
 8006582:	e7f4      	b.n	800656e <__swsetup_r+0x8e>
 8006584:	2000      	movs	r0, #0
 8006586:	e7f7      	b.n	8006578 <__swsetup_r+0x98>
 8006588:	20000018 	.word	0x20000018

0800658c <_raise_r>:
 800658c:	291f      	cmp	r1, #31
 800658e:	b538      	push	{r3, r4, r5, lr}
 8006590:	4605      	mov	r5, r0
 8006592:	460c      	mov	r4, r1
 8006594:	d904      	bls.n	80065a0 <_raise_r+0x14>
 8006596:	2316      	movs	r3, #22
 8006598:	6003      	str	r3, [r0, #0]
 800659a:	f04f 30ff 	mov.w	r0, #4294967295
 800659e:	bd38      	pop	{r3, r4, r5, pc}
 80065a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80065a2:	b112      	cbz	r2, 80065aa <_raise_r+0x1e>
 80065a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065a8:	b94b      	cbnz	r3, 80065be <_raise_r+0x32>
 80065aa:	4628      	mov	r0, r5
 80065ac:	f000 f830 	bl	8006610 <_getpid_r>
 80065b0:	4622      	mov	r2, r4
 80065b2:	4601      	mov	r1, r0
 80065b4:	4628      	mov	r0, r5
 80065b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065ba:	f000 b817 	b.w	80065ec <_kill_r>
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d00a      	beq.n	80065d8 <_raise_r+0x4c>
 80065c2:	1c59      	adds	r1, r3, #1
 80065c4:	d103      	bne.n	80065ce <_raise_r+0x42>
 80065c6:	2316      	movs	r3, #22
 80065c8:	6003      	str	r3, [r0, #0]
 80065ca:	2001      	movs	r0, #1
 80065cc:	e7e7      	b.n	800659e <_raise_r+0x12>
 80065ce:	2100      	movs	r1, #0
 80065d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80065d4:	4620      	mov	r0, r4
 80065d6:	4798      	blx	r3
 80065d8:	2000      	movs	r0, #0
 80065da:	e7e0      	b.n	800659e <_raise_r+0x12>

080065dc <raise>:
 80065dc:	4b02      	ldr	r3, [pc, #8]	@ (80065e8 <raise+0xc>)
 80065de:	4601      	mov	r1, r0
 80065e0:	6818      	ldr	r0, [r3, #0]
 80065e2:	f7ff bfd3 	b.w	800658c <_raise_r>
 80065e6:	bf00      	nop
 80065e8:	20000018 	.word	0x20000018

080065ec <_kill_r>:
 80065ec:	b538      	push	{r3, r4, r5, lr}
 80065ee:	4d07      	ldr	r5, [pc, #28]	@ (800660c <_kill_r+0x20>)
 80065f0:	2300      	movs	r3, #0
 80065f2:	4604      	mov	r4, r0
 80065f4:	4608      	mov	r0, r1
 80065f6:	4611      	mov	r1, r2
 80065f8:	602b      	str	r3, [r5, #0]
 80065fa:	f7fa fb16 	bl	8000c2a <_kill>
 80065fe:	1c43      	adds	r3, r0, #1
 8006600:	d102      	bne.n	8006608 <_kill_r+0x1c>
 8006602:	682b      	ldr	r3, [r5, #0]
 8006604:	b103      	cbz	r3, 8006608 <_kill_r+0x1c>
 8006606:	6023      	str	r3, [r4, #0]
 8006608:	bd38      	pop	{r3, r4, r5, pc}
 800660a:	bf00      	nop
 800660c:	20000480 	.word	0x20000480

08006610 <_getpid_r>:
 8006610:	f7fa bb03 	b.w	8000c1a <_getpid>

08006614 <__swhatbuf_r>:
 8006614:	b570      	push	{r4, r5, r6, lr}
 8006616:	460c      	mov	r4, r1
 8006618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800661c:	2900      	cmp	r1, #0
 800661e:	b096      	sub	sp, #88	@ 0x58
 8006620:	4615      	mov	r5, r2
 8006622:	461e      	mov	r6, r3
 8006624:	da0d      	bge.n	8006642 <__swhatbuf_r+0x2e>
 8006626:	89a3      	ldrh	r3, [r4, #12]
 8006628:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800662c:	f04f 0100 	mov.w	r1, #0
 8006630:	bf14      	ite	ne
 8006632:	2340      	movne	r3, #64	@ 0x40
 8006634:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006638:	2000      	movs	r0, #0
 800663a:	6031      	str	r1, [r6, #0]
 800663c:	602b      	str	r3, [r5, #0]
 800663e:	b016      	add	sp, #88	@ 0x58
 8006640:	bd70      	pop	{r4, r5, r6, pc}
 8006642:	466a      	mov	r2, sp
 8006644:	f000 f848 	bl	80066d8 <_fstat_r>
 8006648:	2800      	cmp	r0, #0
 800664a:	dbec      	blt.n	8006626 <__swhatbuf_r+0x12>
 800664c:	9901      	ldr	r1, [sp, #4]
 800664e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006652:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006656:	4259      	negs	r1, r3
 8006658:	4159      	adcs	r1, r3
 800665a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800665e:	e7eb      	b.n	8006638 <__swhatbuf_r+0x24>

08006660 <__smakebuf_r>:
 8006660:	898b      	ldrh	r3, [r1, #12]
 8006662:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006664:	079d      	lsls	r5, r3, #30
 8006666:	4606      	mov	r6, r0
 8006668:	460c      	mov	r4, r1
 800666a:	d507      	bpl.n	800667c <__smakebuf_r+0x1c>
 800666c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	6123      	str	r3, [r4, #16]
 8006674:	2301      	movs	r3, #1
 8006676:	6163      	str	r3, [r4, #20]
 8006678:	b003      	add	sp, #12
 800667a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800667c:	ab01      	add	r3, sp, #4
 800667e:	466a      	mov	r2, sp
 8006680:	f7ff ffc8 	bl	8006614 <__swhatbuf_r>
 8006684:	9f00      	ldr	r7, [sp, #0]
 8006686:	4605      	mov	r5, r0
 8006688:	4639      	mov	r1, r7
 800668a:	4630      	mov	r0, r6
 800668c:	f7fe febe 	bl	800540c <_malloc_r>
 8006690:	b948      	cbnz	r0, 80066a6 <__smakebuf_r+0x46>
 8006692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006696:	059a      	lsls	r2, r3, #22
 8006698:	d4ee      	bmi.n	8006678 <__smakebuf_r+0x18>
 800669a:	f023 0303 	bic.w	r3, r3, #3
 800669e:	f043 0302 	orr.w	r3, r3, #2
 80066a2:	81a3      	strh	r3, [r4, #12]
 80066a4:	e7e2      	b.n	800666c <__smakebuf_r+0xc>
 80066a6:	89a3      	ldrh	r3, [r4, #12]
 80066a8:	6020      	str	r0, [r4, #0]
 80066aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ae:	81a3      	strh	r3, [r4, #12]
 80066b0:	9b01      	ldr	r3, [sp, #4]
 80066b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80066b6:	b15b      	cbz	r3, 80066d0 <__smakebuf_r+0x70>
 80066b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066bc:	4630      	mov	r0, r6
 80066be:	f000 f81d 	bl	80066fc <_isatty_r>
 80066c2:	b128      	cbz	r0, 80066d0 <__smakebuf_r+0x70>
 80066c4:	89a3      	ldrh	r3, [r4, #12]
 80066c6:	f023 0303 	bic.w	r3, r3, #3
 80066ca:	f043 0301 	orr.w	r3, r3, #1
 80066ce:	81a3      	strh	r3, [r4, #12]
 80066d0:	89a3      	ldrh	r3, [r4, #12]
 80066d2:	431d      	orrs	r5, r3
 80066d4:	81a5      	strh	r5, [r4, #12]
 80066d6:	e7cf      	b.n	8006678 <__smakebuf_r+0x18>

080066d8 <_fstat_r>:
 80066d8:	b538      	push	{r3, r4, r5, lr}
 80066da:	4d07      	ldr	r5, [pc, #28]	@ (80066f8 <_fstat_r+0x20>)
 80066dc:	2300      	movs	r3, #0
 80066de:	4604      	mov	r4, r0
 80066e0:	4608      	mov	r0, r1
 80066e2:	4611      	mov	r1, r2
 80066e4:	602b      	str	r3, [r5, #0]
 80066e6:	f7fa fb00 	bl	8000cea <_fstat>
 80066ea:	1c43      	adds	r3, r0, #1
 80066ec:	d102      	bne.n	80066f4 <_fstat_r+0x1c>
 80066ee:	682b      	ldr	r3, [r5, #0]
 80066f0:	b103      	cbz	r3, 80066f4 <_fstat_r+0x1c>
 80066f2:	6023      	str	r3, [r4, #0]
 80066f4:	bd38      	pop	{r3, r4, r5, pc}
 80066f6:	bf00      	nop
 80066f8:	20000480 	.word	0x20000480

080066fc <_isatty_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	4d06      	ldr	r5, [pc, #24]	@ (8006718 <_isatty_r+0x1c>)
 8006700:	2300      	movs	r3, #0
 8006702:	4604      	mov	r4, r0
 8006704:	4608      	mov	r0, r1
 8006706:	602b      	str	r3, [r5, #0]
 8006708:	f7fa faff 	bl	8000d0a <_isatty>
 800670c:	1c43      	adds	r3, r0, #1
 800670e:	d102      	bne.n	8006716 <_isatty_r+0x1a>
 8006710:	682b      	ldr	r3, [r5, #0]
 8006712:	b103      	cbz	r3, 8006716 <_isatty_r+0x1a>
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	bd38      	pop	{r3, r4, r5, pc}
 8006718:	20000480 	.word	0x20000480

0800671c <_init>:
 800671c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671e:	bf00      	nop
 8006720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006722:	bc08      	pop	{r3}
 8006724:	469e      	mov	lr, r3
 8006726:	4770      	bx	lr

08006728 <_fini>:
 8006728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672a:	bf00      	nop
 800672c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672e:	bc08      	pop	{r3}
 8006730:	469e      	mov	lr, r3
 8006732:	4770      	bx	lr
