
767_SPI_ILI9341_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000742c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  08007630  08007630  00008630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c18  08007c18  000091d8  2**0
                  CONTENTS
  4 .ARM          00000008  08007c18  08007c18  00008c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c20  08007c20  000091d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c20  08007c20  00008c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c24  08007c24  00008c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08007c28  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  200001d8  08007e00  000091d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  08007e00  0000948c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001148c  00000000  00000000  00009206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fe7  00000000  00000000  0001a692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  0001d680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db4  00000000  00000000  0001e848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a6ac  00000000  00000000  0001f5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b75  00000000  00000000  00049ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffcd3  00000000  00000000  0006081d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001604f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000585c  00000000  00000000  00160534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00165d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	08007614 	.word	0x08007614

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	08007614 	.word	0x08007614

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08e      	sub	sp, #56	@ 0x38
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005f6:	4b8d      	ldr	r3, [pc, #564]	@ (800082c <MX_GPIO_Init+0x24c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a8c      	ldr	r2, [pc, #560]	@ (800082c <MX_GPIO_Init+0x24c>)
 80005fc:	f043 0310 	orr.w	r3, r3, #16
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b8a      	ldr	r3, [pc, #552]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0310 	and.w	r3, r3, #16
 800060a:	623b      	str	r3, [r7, #32]
 800060c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060e:	4b87      	ldr	r3, [pc, #540]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a86      	ldr	r2, [pc, #536]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b84      	ldr	r3, [pc, #528]	@ (800082c <MX_GPIO_Init+0x24c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	61fb      	str	r3, [r7, #28]
 8000624:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000626:	4b81      	ldr	r3, [pc, #516]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a80      	ldr	r2, [pc, #512]	@ (800082c <MX_GPIO_Init+0x24c>)
 800062c:	f043 0320 	orr.w	r3, r3, #32
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b7e      	ldr	r3, [pc, #504]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0320 	and.w	r3, r3, #32
 800063a:	61bb      	str	r3, [r7, #24]
 800063c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063e:	4b7b      	ldr	r3, [pc, #492]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	4a7a      	ldr	r2, [pc, #488]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000648:	6313      	str	r3, [r2, #48]	@ 0x30
 800064a:	4b78      	ldr	r3, [pc, #480]	@ (800082c <MX_GPIO_Init+0x24c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b75      	ldr	r3, [pc, #468]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a74      	ldr	r2, [pc, #464]	@ (800082c <MX_GPIO_Init+0x24c>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b72      	ldr	r3, [pc, #456]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b6f      	ldr	r3, [pc, #444]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4a6e      	ldr	r2, [pc, #440]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4b6c      	ldr	r3, [pc, #432]	@ (800082c <MX_GPIO_Init+0x24c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000686:	4b69      	ldr	r3, [pc, #420]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a68      	ldr	r2, [pc, #416]	@ (800082c <MX_GPIO_Init+0x24c>)
 800068c:	f043 0308 	orr.w	r3, r3, #8
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b66      	ldr	r3, [pc, #408]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0308 	and.w	r3, r3, #8
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800069e:	4b63      	ldr	r3, [pc, #396]	@ (800082c <MX_GPIO_Init+0x24c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a62      	ldr	r2, [pc, #392]	@ (800082c <MX_GPIO_Init+0x24c>)
 80006a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b60      	ldr	r3, [pc, #384]	@ (800082c <MX_GPIO_Init+0x24c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2168      	movs	r1, #104	@ 0x68
 80006ba:	485d      	ldr	r0, [pc, #372]	@ (8000830 <MX_GPIO_Init+0x250>)
 80006bc:	f001 fdd6 	bl	800226c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80006c6:	485b      	ldr	r0, [pc, #364]	@ (8000834 <MX_GPIO_Init+0x254>)
 80006c8:	f001 fdd0 	bl	800226c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2140      	movs	r1, #64	@ 0x40
 80006d0:	4859      	ldr	r0, [pc, #356]	@ (8000838 <MX_GPIO_Init+0x258>)
 80006d2:	f001 fdcb 	bl	800226c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80006dc:	4857      	ldr	r0, [pc, #348]	@ (800083c <MX_GPIO_Init+0x25c>)
 80006de:	f001 fdc5 	bl	800226c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 80006e2:	2314      	movs	r3, #20
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e6:	2300      	movs	r3, #0
 80006e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f2:	4619      	mov	r1, r3
 80006f4:	484e      	ldr	r0, [pc, #312]	@ (8000830 <MX_GPIO_Init+0x250>)
 80006f6:	f001 fc0d 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 80006fa:	2368      	movs	r3, #104	@ 0x68
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000706:	2303      	movs	r3, #3
 8000708:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800070a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070e:	4619      	mov	r1, r3
 8000710:	4847      	ldr	r0, [pc, #284]	@ (8000830 <MX_GPIO_Init+0x250>)
 8000712:	f001 fbff 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000716:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800071a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071c:	2300      	movs	r3, #0
 800071e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000728:	4619      	mov	r1, r3
 800072a:	4844      	ldr	r0, [pc, #272]	@ (800083c <MX_GPIO_Init+0x25c>)
 800072c:	f001 fbf2 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000730:	2332      	movs	r3, #50	@ 0x32
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000740:	230b      	movs	r3, #11
 8000742:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000744:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000748:	4619      	mov	r1, r3
 800074a:	483c      	ldr	r0, [pc, #240]	@ (800083c <MX_GPIO_Init+0x25c>)
 800074c:	f001 fbe2 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000750:	2386      	movs	r3, #134	@ 0x86
 8000752:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000760:	230b      	movs	r3, #11
 8000762:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000768:	4619      	mov	r1, r3
 800076a:	4835      	ldr	r0, [pc, #212]	@ (8000840 <MX_GPIO_Init+0x260>)
 800076c:	f001 fbd2 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000770:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000774:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077e:	2303      	movs	r3, #3
 8000780:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000782:	230b      	movs	r3, #11
 8000784:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078a:	4619      	mov	r1, r3
 800078c:	4829      	ldr	r0, [pc, #164]	@ (8000834 <MX_GPIO_Init+0x254>)
 800078e:	f001 fbc1 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000792:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000796:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a8:	4619      	mov	r1, r3
 80007aa:	4822      	ldr	r0, [pc, #136]	@ (8000834 <MX_GPIO_Init+0x254>)
 80007ac:	f001 fbb2 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007b0:	2340      	movs	r3, #64	@ 0x40
 80007b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c4:	4619      	mov	r1, r3
 80007c6:	481c      	ldr	r0, [pc, #112]	@ (8000838 <MX_GPIO_Init+0x258>)
 80007c8:	f001 fba4 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007cc:	2380      	movs	r3, #128	@ 0x80
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007dc:	4619      	mov	r1, r3
 80007de:	4816      	ldr	r0, [pc, #88]	@ (8000838 <MX_GPIO_Init+0x258>)
 80007e0:	f001 fb98 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 80007e4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fa:	4619      	mov	r1, r3
 80007fc:	480f      	ldr	r0, [pc, #60]	@ (800083c <MX_GPIO_Init+0x25c>)
 80007fe:	f001 fb89 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000802:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000806:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000810:	2303      	movs	r3, #3
 8000812:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000814:	230b      	movs	r3, #11
 8000816:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800081c:	4619      	mov	r1, r3
 800081e:	4806      	ldr	r0, [pc, #24]	@ (8000838 <MX_GPIO_Init+0x258>)
 8000820:	f001 fb78 	bl	8001f14 <HAL_GPIO_Init>

}
 8000824:	bf00      	nop
 8000826:	3738      	adds	r7, #56	@ 0x38
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40021000 	.word	0x40021000
 8000834:	40020400 	.word	0x40020400
 8000838:	40021800 	.word	0x40021800
 800083c:	40020800 	.word	0x40020800
 8000840:	40020000 	.word	0x40020000

08000844 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000848:	f3bf 8f4f 	dsb	sy
}
 800084c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800084e:	f3bf 8f6f 	isb	sy
}
 8000852:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000854:	4b0d      	ldr	r3, [pc, #52]	@ (800088c <SCB_EnableICache+0x48>)
 8000856:	2200      	movs	r2, #0
 8000858:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800085c:	f3bf 8f4f 	dsb	sy
}
 8000860:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000862:	f3bf 8f6f 	isb	sy
}
 8000866:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000868:	4b08      	ldr	r3, [pc, #32]	@ (800088c <SCB_EnableICache+0x48>)
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	4a07      	ldr	r2, [pc, #28]	@ (800088c <SCB_EnableICache+0x48>)
 800086e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000872:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000874:	f3bf 8f4f 	dsb	sy
}
 8000878:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800087a:	f3bf 8f6f 	isb	sy
}
 800087e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000896:	4b1f      	ldr	r3, [pc, #124]	@ (8000914 <SCB_EnableDCache+0x84>)
 8000898:	2200      	movs	r2, #0
 800089a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800089e:	f3bf 8f4f 	dsb	sy
}
 80008a2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000914 <SCB_EnableDCache+0x84>)
 80008a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80008aa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	0b5b      	lsrs	r3, r3, #13
 80008b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008b4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	08db      	lsrs	r3, r3, #3
 80008ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008be:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	015a      	lsls	r2, r3, #5
 80008c4:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80008c8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ce:	4911      	ldr	r1, [pc, #68]	@ (8000914 <SCB_EnableDCache+0x84>)
 80008d0:	4313      	orrs	r3, r2
 80008d2:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	1e5a      	subs	r2, r3, #1
 80008da:	60ba      	str	r2, [r7, #8]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d1ef      	bne.n	80008c0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	1e5a      	subs	r2, r3, #1
 80008e4:	60fa      	str	r2, [r7, #12]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d1e5      	bne.n	80008b6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80008ea:	f3bf 8f4f 	dsb	sy
}
 80008ee:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008f0:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <SCB_EnableDCache+0x84>)
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	4a07      	ldr	r2, [pc, #28]	@ (8000914 <SCB_EnableDCache+0x84>)
 80008f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008fa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008fc:	f3bf 8f4f 	dsb	sy
}
 8000900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000902:	f3bf 8f6f 	isb	sy
}
 8000906:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08c      	sub	sp, #48	@ 0x30
 800091c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800091e:	f7ff ff91 	bl	8000844 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000922:	f7ff ffb5 	bl	8000890 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000926:	f001 f97f 	bl	8001c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092a:	f000 f86b 	bl	8000a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092e:	f7ff fe57 	bl	80005e0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000932:	f000 fb53 	bl	8000fdc <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8000936:	f000 f935 	bl	8000ba4 <MX_SPI5_Init>
  MX_TIM1_Init();
 800093a:	f000 fadb 	bl	8000ef4 <MX_TIM1_Init>
  MX_RNG_Init();
 800093e:	f000 f8fd 	bl	8000b3c <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 8000942:	f000 fe69 	bl	8001618 <ILI9341_Init>
//	  		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
//	  		HAL_Delay(5000);


	  //----------------------------------------------------------TOUCHSCREEN EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 8000946:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800094a:	f001 f811 	bl	8001970 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800094e:	2001      	movs	r0, #1
 8000950:	f000 fe04 	bl	800155c <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Info", 10, 10, BLACK, 2, WHITE);
 8000954:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000958:	9301      	str	r3, [sp, #4]
 800095a:	2302      	movs	r3, #2
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	2300      	movs	r3, #0
 8000960:	220a      	movs	r2, #10
 8000962:	210a      	movs	r1, #10
 8000964:	4823      	ldr	r0, [pc, #140]	@ (80009f4 <main+0xdc>)
 8000966:	f000 fcf9 	bl	800135c <ILI9341_Draw_Text>
	  		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800096a:	2000      	movs	r0, #0
 800096c:	f000 fdf6 	bl	800155c <ILI9341_Set_Rotation>


	  		while(1)
	  		{
	  			HAL_Delay(20);
 8000970:	2014      	movs	r0, #20
 8000972:	f001 f9c5 	bl	8001d00 <HAL_Delay>

	  					uint16_t x_pos = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	84fb      	strh	r3, [r7, #38]	@ 0x26
	  					uint16_t y_pos = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	84bb      	strh	r3, [r7, #36]	@ 0x24


	  					HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000984:	481c      	ldr	r0, [pc, #112]	@ (80009f8 <main+0xe0>)
 8000986:	f001 fc71 	bl	800226c <HAL_GPIO_WritePin>

	  					uint16_t position_array[2];

//	  					if(TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
//	  					{
	  					x_pos = position_array[0];
 800098a:	8c3b      	ldrh	r3, [r7, #32]
 800098c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	  					y_pos = position_array[1];
 800098e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000990:	84bb      	strh	r3, [r7, #36]	@ 0x24
	  					ILI9341_Draw_Filled_Circle(x_pos, y_pos, 2, BLACK);
 8000992:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8000994:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8000996:	2300      	movs	r3, #0
 8000998:	2202      	movs	r2, #2
 800099a:	f000 fbbc 	bl	8001116 <ILI9341_Draw_Filled_Circle>

	  					ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800099e:	2001      	movs	r0, #1
 80009a0:	f000 fddc 	bl	800155c <ILI9341_Set_Rotation>
	  					char counter_buff[30];
	  					sprintf(counter_buff, "POS X: %.3d", x_pos);
 80009a4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80009a6:	463b      	mov	r3, r7
 80009a8:	4914      	ldr	r1, [pc, #80]	@ (80009fc <main+0xe4>)
 80009aa:	4618      	mov	r0, r3
 80009ac:	f004 fd72 	bl	8005494 <siprintf>
	  					ILI9341_Draw_Text(counter_buff, 10, 80, BLACK, 2, WHITE);
 80009b0:	4638      	mov	r0, r7
 80009b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009b6:	9301      	str	r3, [sp, #4]
 80009b8:	2302      	movs	r3, #2
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2300      	movs	r3, #0
 80009be:	2250      	movs	r2, #80	@ 0x50
 80009c0:	210a      	movs	r1, #10
 80009c2:	f000 fccb 	bl	800135c <ILI9341_Draw_Text>
	  					sprintf(counter_buff, "POS Y: %.3d", y_pos);
 80009c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80009c8:	463b      	mov	r3, r7
 80009ca:	490d      	ldr	r1, [pc, #52]	@ (8000a00 <main+0xe8>)
 80009cc:	4618      	mov	r0, r3
 80009ce:	f004 fd61 	bl	8005494 <siprintf>
	  					ILI9341_Draw_Text(counter_buff, 10, 120, BLACK, 2, WHITE);
 80009d2:	4638      	mov	r0, r7
 80009d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009d8:	9301      	str	r3, [sp, #4]
 80009da:	2302      	movs	r3, #2
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	2300      	movs	r3, #0
 80009e0:	2278      	movs	r2, #120	@ 0x78
 80009e2:	210a      	movs	r1, #10
 80009e4:	f000 fcba 	bl	800135c <ILI9341_Draw_Text>
	  					ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f000 fdb7 	bl	800155c <ILI9341_Set_Rotation>
	  		{
 80009ee:	bf00      	nop
 80009f0:	e7be      	b.n	8000970 <main+0x58>
 80009f2:	bf00      	nop
 80009f4:	08007630 	.word	0x08007630
 80009f8:	40020400 	.word	0x40020400
 80009fc:	08007638 	.word	0x08007638
 8000a00:	08007644 	.word	0x08007644

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b0b8      	sub	sp, #224	@ 0xe0
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000a0e:	2234      	movs	r2, #52	@ 0x34
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f004 fda1 	bl	800555a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	2290      	movs	r2, #144	@ 0x90
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f004 fd92 	bl	800555a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a36:	f001 fc33 	bl	80022a0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b28 <SystemClock_Config+0x124>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	4a3a      	ldr	r2, [pc, #232]	@ (8000b28 <SystemClock_Config+0x124>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a46:	4b38      	ldr	r3, [pc, #224]	@ (8000b28 <SystemClock_Config+0x124>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a52:	4b36      	ldr	r3, [pc, #216]	@ (8000b2c <SystemClock_Config+0x128>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a35      	ldr	r2, [pc, #212]	@ (8000b2c <SystemClock_Config+0x128>)
 8000a58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a5c:	6013      	str	r3, [r2, #0]
 8000a5e:	4b33      	ldr	r3, [pc, #204]	@ (8000b2c <SystemClock_Config+0x128>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a70:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a7e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a86:	2304      	movs	r3, #4
 8000a88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000a8c:	23c8      	movs	r3, #200	@ 0xc8
 8000a8e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a92:	2302      	movs	r3, #2
 8000a94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a98:	2309      	movs	r3, #9
 8000a9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 fc59 	bl	8002360 <HAL_RCC_OscConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ab4:	f000 f83e 	bl	8000b34 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ab8:	f001 fc02 	bl	80022c0 <HAL_PWREx_EnableOverDrive>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ac2:	f000 f837 	bl	8000b34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000acc:	2302      	movs	r3, #2
 8000ace:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ad8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000adc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ae0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000ae8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8000aec:	2106      	movs	r1, #6
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 fee4 	bl	80028bc <HAL_RCC_ClockConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000afa:	f000 f81b 	bl	8000b34 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000afe:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <SystemClock_Config+0x12c>)
 8000b00:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	4618      	mov	r0, r3
 8000b12:	f002 f8f9 	bl	8002d08 <HAL_RCCEx_PeriphCLKConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000b1c:	f000 f80a 	bl	8000b34 <Error_Handler>
  }
}
 8000b20:	bf00      	nop
 8000b22:	37e0      	adds	r7, #224	@ 0xe0
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40007000 	.word	0x40007000
 8000b30:	00200100 	.word	0x00200100

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <Error_Handler+0x4>

08000b3c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <MX_RNG_Init+0x20>)
 8000b42:	4a07      	ldr	r2, [pc, #28]	@ (8000b60 <MX_RNG_Init+0x24>)
 8000b44:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <MX_RNG_Init+0x20>)
 8000b48:	f002 fd06 	bl	8003558 <HAL_RNG_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000b52:	f7ff ffef 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200001f4 	.word	0x200001f4
 8000b60:	50060800 	.word	0x50060800

08000b64 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0a      	ldr	r2, [pc, #40]	@ (8000b9c <HAL_RNG_MspInit+0x38>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d10b      	bne.n	8000b8e <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000b76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba0 <HAL_RNG_MspInit+0x3c>)
 8000b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b7a:	4a09      	ldr	r2, [pc, #36]	@ (8000ba0 <HAL_RNG_MspInit+0x3c>)
 8000b7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b80:	6353      	str	r3, [r2, #52]	@ 0x34
 8000b82:	4b07      	ldr	r3, [pc, #28]	@ (8000ba0 <HAL_RNG_MspInit+0x3c>)
 8000b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000b8e:	bf00      	nop
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	50060800 	.word	0x50060800
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <MX_SPI5_Init+0x74>)
 8000baa:	4a1c      	ldr	r2, [pc, #112]	@ (8000c1c <MX_SPI5_Init+0x78>)
 8000bac:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <MX_SPI5_Init+0x74>)
 8000bb0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bb4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <MX_SPI5_Init+0x74>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bbc:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <MX_SPI5_Init+0x74>)
 8000bbe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000bc2:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <MX_SPI5_Init+0x74>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bca:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <MX_SPI5_Init+0x74>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <MX_SPI5_Init+0x74>)
 8000bd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bd6:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c18 <MX_SPI5_Init+0x74>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <MX_SPI5_Init+0x74>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <MX_SPI5_Init+0x74>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <MX_SPI5_Init+0x74>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 7;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <MX_SPI5_Init+0x74>)
 8000bf2:	2207      	movs	r2, #7
 8000bf4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bf6:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <MX_SPI5_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <MX_SPI5_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000c02:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <MX_SPI5_Init+0x74>)
 8000c04:	f002 fcd2 	bl	80035ac <HAL_SPI_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8000c0e:	f7ff ff91 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000204 	.word	0x20000204
 8000c1c:	40015000 	.word	0x40015000

08000c20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	@ 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a17      	ldr	r2, [pc, #92]	@ (8000c9c <HAL_SPI_MspInit+0x7c>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d128      	bne.n	8000c94 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000c42:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <HAL_SPI_MspInit+0x80>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c46:	4a16      	ldr	r2, [pc, #88]	@ (8000ca0 <HAL_SPI_MspInit+0x80>)
 8000c48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <HAL_SPI_MspInit+0x80>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <HAL_SPI_MspInit+0x80>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a10      	ldr	r2, [pc, #64]	@ (8000ca0 <HAL_SPI_MspInit+0x80>)
 8000c60:	f043 0320 	orr.w	r3, r3, #32
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <HAL_SPI_MspInit+0x80>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0320 	and.w	r3, r3, #32
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000c72:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000c84:	2305      	movs	r3, #5
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <HAL_SPI_MspInit+0x84>)
 8000c90:	f001 f940 	bl	8001f14 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	@ 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40015000 	.word	0x40015000
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40021400 	.word	0x40021400

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <HAL_MspInit+0x44>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	4a0e      	ldr	r2, [pc, #56]	@ (8000cec <HAL_MspInit+0x44>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <HAL_MspInit+0x44>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <HAL_MspInit+0x44>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cca:	4a08      	ldr	r2, [pc, #32]	@ (8000cec <HAL_MspInit+0x44>)
 8000ccc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_MspInit+0x44>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800

08000cf0 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf4:	f000 ffe4 	bl	8001cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
	return 1;
 8000d00:	2301      	movs	r3, #1
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <_kill>:

int _kill(int pid, int sig)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d16:	f004 fc73 	bl	8005600 <__errno>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2216      	movs	r2, #22
 8000d1e:	601a      	str	r2, [r3, #0]
	return -1;
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <_exit>:

void _exit (int status)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d34:	f04f 31ff 	mov.w	r1, #4294967295
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff ffe7 	bl	8000d0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d3e:	bf00      	nop
 8000d40:	e7fd      	b.n	8000d3e <_exit+0x12>

08000d42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b086      	sub	sp, #24
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	60f8      	str	r0, [r7, #12]
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
 8000d52:	e00a      	b.n	8000d6a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d54:	f3af 8000 	nop.w
 8000d58:	4601      	mov	r1, r0
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	1c5a      	adds	r2, r3, #1
 8000d5e:	60ba      	str	r2, [r7, #8]
 8000d60:	b2ca      	uxtb	r2, r1
 8000d62:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	3301      	adds	r3, #1
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	dbf0      	blt.n	8000d54 <_read+0x12>
	}

return len;
 8000d72:	687b      	ldr	r3, [r7, #4]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	e009      	b.n	8000da2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	1c5a      	adds	r2, r3, #1
 8000d92:	60ba      	str	r2, [r7, #8]
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	dbf1      	blt.n	8000d8e <_write+0x12>
	}
	return len;
 8000daa:	687b      	ldr	r3, [r7, #4]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <_close>:

int _close(int file)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	return -1;
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ddc:	605a      	str	r2, [r3, #4]
	return 0;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <_isatty>:

int _isatty(int file)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	return 1;
 8000df4:	2301      	movs	r3, #1
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b085      	sub	sp, #20
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	60f8      	str	r0, [r7, #12]
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
	return 0;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e24:	4a14      	ldr	r2, [pc, #80]	@ (8000e78 <_sbrk+0x5c>)
 8000e26:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <_sbrk+0x60>)
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e30:	4b13      	ldr	r3, [pc, #76]	@ (8000e80 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e38:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <_sbrk+0x64>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	@ (8000e84 <_sbrk+0x68>)
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3e:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d207      	bcs.n	8000e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e4c:	f004 fbd8 	bl	8005600 <__errno>
 8000e50:	4603      	mov	r3, r0
 8000e52:	220c      	movs	r2, #12
 8000e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	e009      	b.n	8000e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e62:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	4a05      	ldr	r2, [pc, #20]	@ (8000e80 <_sbrk+0x64>)
 8000e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20080000 	.word	0x20080000
 8000e7c:	00000400 	.word	0x00000400
 8000e80:	20000268 	.word	0x20000268
 8000e84:	20000490 	.word	0x20000490

08000e88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <SystemInit+0x5c>)
 8000e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e92:	4a14      	ldr	r2, [pc, #80]	@ (8000ee4 <SystemInit+0x5c>)
 8000e94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <SystemInit+0x60>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a11      	ldr	r2, [pc, #68]	@ (8000ee8 <SystemInit+0x60>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <SystemInit+0x60>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <SystemInit+0x60>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	490d      	ldr	r1, [pc, #52]	@ (8000ee8 <SystemInit+0x60>)
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <SystemInit+0x64>)
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <SystemInit+0x60>)
 8000ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8000ef0 <SystemInit+0x68>)
 8000ebe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <SystemInit+0x60>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a08      	ldr	r2, [pc, #32]	@ (8000ee8 <SystemInit+0x60>)
 8000ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <SystemInit+0x60>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ed2:	4b04      	ldr	r3, [pc, #16]	@ (8000ee4 <SystemInit+0x5c>)
 8000ed4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ed8:	609a      	str	r2, [r3, #8]
#endif
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	fef6ffff 	.word	0xfef6ffff
 8000ef0:	24003010 	.word	0x24003010

08000ef4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efa:	f107 0310 	add.w	r3, r7, #16
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f12:	4b20      	ldr	r3, [pc, #128]	@ (8000f94 <MX_TIM1_Init+0xa0>)
 8000f14:	4a20      	ldr	r2, [pc, #128]	@ (8000f98 <MX_TIM1_Init+0xa4>)
 8000f16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20000-1;
 8000f18:	4b1e      	ldr	r3, [pc, #120]	@ (8000f94 <MX_TIM1_Init+0xa0>)
 8000f1a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000f1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f20:	4b1c      	ldr	r3, [pc, #112]	@ (8000f94 <MX_TIM1_Init+0xa0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65536-1;
 8000f26:	4b1b      	ldr	r3, [pc, #108]	@ (8000f94 <MX_TIM1_Init+0xa0>)
 8000f28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2e:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <MX_TIM1_Init+0xa0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f34:	4b17      	ldr	r3, [pc, #92]	@ (8000f94 <MX_TIM1_Init+0xa0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3a:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <MX_TIM1_Init+0xa0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f40:	4814      	ldr	r0, [pc, #80]	@ (8000f94 <MX_TIM1_Init+0xa0>)
 8000f42:	f002 fead 	bl	8003ca0 <HAL_TIM_Base_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000f4c:	f7ff fdf2 	bl	8000b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f56:	f107 0310 	add.w	r3, r7, #16
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480d      	ldr	r0, [pc, #52]	@ (8000f94 <MX_TIM1_Init+0xa0>)
 8000f5e:	f002 fef7 	bl	8003d50 <HAL_TIM_ConfigClockSource>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000f68:	f7ff fde4 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4805      	ldr	r0, [pc, #20]	@ (8000f94 <MX_TIM1_Init+0xa0>)
 8000f7e:	f003 f8e7 	bl	8004150 <HAL_TIMEx_MasterConfigSynchronization>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f88:	f7ff fdd4 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	3720      	adds	r7, #32
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	2000026c 	.word	0x2000026c
 8000f98:	40010000 	.word	0x40010000

08000f9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <HAL_TIM_Base_MspInit+0x38>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d10b      	bne.n	8000fc6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fae:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <HAL_TIM_Base_MspInit+0x3c>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb2:	4a09      	ldr	r2, [pc, #36]	@ (8000fd8 <HAL_TIM_Base_MspInit+0x3c>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fba:	4b07      	ldr	r3, [pc, #28]	@ (8000fd8 <HAL_TIM_Base_MspInit+0x3c>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40010000 	.word	0x40010000
 8000fd8:	40023800 	.word	0x40023800

08000fdc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <MX_USART3_UART_Init+0x58>)
 8000fe2:	4a15      	ldr	r2, [pc, #84]	@ (8001038 <MX_USART3_UART_Init+0x5c>)
 8000fe4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	@ (8001034 <MX_USART3_UART_Init+0x58>)
 8000fe8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fee:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <MX_USART3_UART_Init+0x58>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <MX_USART3_UART_Init+0x58>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <MX_USART3_UART_Init+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001000:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_USART3_UART_Init+0x58>)
 8001002:	220c      	movs	r2, #12
 8001004:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001006:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <MX_USART3_UART_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800100c:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_USART3_UART_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001012:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <MX_USART3_UART_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_USART3_UART_Init+0x58>)
 800101a:	2200      	movs	r2, #0
 800101c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	@ (8001034 <MX_USART3_UART_Init+0x58>)
 8001020:	f003 f924 	bl	800426c <HAL_UART_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800102a:	f7ff fd83 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200002b8 	.word	0x200002b8
 8001038:	40004800 	.word	0x40004800

0800103c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	@ 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a17      	ldr	r2, [pc, #92]	@ (80010b8 <HAL_UART_MspInit+0x7c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d128      	bne.n	80010b0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800105e:	4b17      	ldr	r3, [pc, #92]	@ (80010bc <HAL_UART_MspInit+0x80>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	4a16      	ldr	r2, [pc, #88]	@ (80010bc <HAL_UART_MspInit+0x80>)
 8001064:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001068:	6413      	str	r3, [r2, #64]	@ 0x40
 800106a:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <HAL_UART_MspInit+0x80>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001076:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <HAL_UART_MspInit+0x80>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	4a10      	ldr	r2, [pc, #64]	@ (80010bc <HAL_UART_MspInit+0x80>)
 800107c:	f043 0308 	orr.w	r3, r3, #8
 8001080:	6313      	str	r3, [r2, #48]	@ 0x30
 8001082:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <HAL_UART_MspInit+0x80>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800108e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010a0:	2307      	movs	r3, #7
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	4805      	ldr	r0, [pc, #20]	@ (80010c0 <HAL_UART_MspInit+0x84>)
 80010ac:	f000 ff32 	bl	8001f14 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010b0:	bf00      	nop
 80010b2:	3728      	adds	r7, #40	@ 0x28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40004800 	.word	0x40004800
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020c00 	.word	0x40020c00

080010c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010ca:	e003      	b.n	80010d4 <LoopCopyDataInit>

080010cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010d2:	3104      	adds	r1, #4

080010d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010d4:	480b      	ldr	r0, [pc, #44]	@ (8001104 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010dc:	d3f6      	bcc.n	80010cc <CopyDataInit>
  ldr  r2, =_sbss
 80010de:	4a0b      	ldr	r2, [pc, #44]	@ (800110c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010e0:	e002      	b.n	80010e8 <LoopFillZerobss>

080010e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010e4:	f842 3b04 	str.w	r3, [r2], #4

080010e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010e8:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010ec:	d3f9      	bcc.n	80010e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ee:	f7ff fecb 	bl	8000e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f2:	f004 fa8b 	bl	800560c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010f6:	f7ff fc0f 	bl	8000918 <main>
  bx  lr    
 80010fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010fc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001100:	08007c28 	.word	0x08007c28
  ldr  r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001108:	200001d8 	.word	0x200001d8
  ldr  r2, =_sbss
 800110c:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 8001110:	2000048c 	.word	0x2000048c

08001114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC_IRQHandler>

08001116 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8001116:	b590      	push	{r4, r7, lr}
 8001118:	b08b      	sub	sp, #44	@ 0x2c
 800111a:	af00      	add	r7, sp, #0
 800111c:	4604      	mov	r4, r0
 800111e:	4608      	mov	r0, r1
 8001120:	4611      	mov	r1, r2
 8001122:	461a      	mov	r2, r3
 8001124:	4623      	mov	r3, r4
 8001126:	80fb      	strh	r3, [r7, #6]
 8001128:	4603      	mov	r3, r0
 800112a:	80bb      	strh	r3, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	807b      	strh	r3, [r7, #2]
 8001130:	4613      	mov	r3, r2
 8001132:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8001134:	887b      	ldrh	r3, [r7, #2]
 8001136:	627b      	str	r3, [r7, #36]	@ 0x24
    int y = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 800113c:	887b      	ldrh	r3, [r7, #2]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	f1c3 0301 	rsb	r3, r3, #1
 8001144:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]

    while (x >= y)
 800114e:	e061      	b.n	8001214 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	e018      	b.n	800118c <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	b298      	uxth	r0, r3
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	b29a      	uxth	r2, r3
 8001162:	88bb      	ldrh	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	b29b      	uxth	r3, r3
 8001168:	883a      	ldrh	r2, [r7, #0]
 800116a:	4619      	mov	r1, r3
 800116c:	f000 fc26 	bl	80019bc <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	b298      	uxth	r0, r3
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	b29b      	uxth	r3, r3
 8001178:	88ba      	ldrh	r2, [r7, #4]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	b29b      	uxth	r3, r3
 800117e:	883a      	ldrh	r2, [r7, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f000 fc1b 	bl	80019bc <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	3301      	adds	r3, #1
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	88fa      	ldrh	r2, [r7, #6]
 800118e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001190:	4413      	add	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	429a      	cmp	r2, r3
 8001196:	dde0      	ble.n	800115a <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8001198:	88fa      	ldrh	r2, [r7, #6]
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	e018      	b.n	80011d4 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	b298      	uxth	r0, r3
 80011a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	88bb      	ldrh	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	883a      	ldrh	r2, [r7, #0]
 80011b2:	4619      	mov	r1, r3
 80011b4:	f000 fc02 	bl	80019bc <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	b298      	uxth	r0, r3
 80011bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011be:	b29b      	uxth	r3, r3
 80011c0:	88ba      	ldrh	r2, [r7, #4]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	883a      	ldrh	r2, [r7, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	f000 fbf7 	bl	80019bc <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	3301      	adds	r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	88fa      	ldrh	r2, [r7, #6]
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	4413      	add	r3, r2
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	429a      	cmp	r2, r3
 80011de:	dde0      	ble.n	80011a2 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	3301      	adds	r3, #1
 80011e4:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	4413      	add	r3, r2
 80011ec:	617b      	str	r3, [r7, #20]
        yChange += 2;
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	3302      	adds	r3, #2
 80011f2:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	005a      	lsls	r2, r3, #1
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	4413      	add	r3, r2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	dd09      	ble.n	8001214 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8001200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001202:	3b01      	subs	r3, #1
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
            radiusError += xChange;
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	4413      	add	r3, r2
 800120c:	617b      	str	r3, [r7, #20]
            xChange += 2;
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3302      	adds	r3, #2
 8001212:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8001214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	429a      	cmp	r2, r3
 800121a:	da99      	bge.n	8001150 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	372c      	adds	r7, #44	@ 0x2c
 8001222:	46bd      	mov	sp, r7
 8001224:	bd90      	pop	{r4, r7, pc}
	...

08001228 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b089      	sub	sp, #36	@ 0x24
 800122c:	af02      	add	r7, sp, #8
 800122e:	4604      	mov	r4, r0
 8001230:	4608      	mov	r0, r1
 8001232:	4611      	mov	r1, r2
 8001234:	461a      	mov	r2, r3
 8001236:	4623      	mov	r3, r4
 8001238:	71fb      	strb	r3, [r7, #7]
 800123a:	4603      	mov	r3, r0
 800123c:	71bb      	strb	r3, [r7, #6]
 800123e:	460b      	mov	r3, r1
 8001240:	717b      	strb	r3, [r7, #5]
 8001242:	4613      	mov	r3, r2
 8001244:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 800124a:	7dfb      	ldrb	r3, [r7, #23]
 800124c:	2b1f      	cmp	r3, #31
 800124e:	d802      	bhi.n	8001256 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	71fb      	strb	r3, [r7, #7]
 8001254:	e002      	b.n	800125c <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8001256:	7dfb      	ldrb	r3, [r7, #23]
 8001258:	3b20      	subs	r3, #32
 800125a:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800125c:	2300      	movs	r3, #0
 800125e:	753b      	strb	r3, [r7, #20]
 8001260:	e012      	b.n	8001288 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8001262:	7dfa      	ldrb	r2, [r7, #23]
 8001264:	7d38      	ldrb	r0, [r7, #20]
 8001266:	7d39      	ldrb	r1, [r7, #20]
 8001268:	4c3b      	ldr	r4, [pc, #236]	@ (8001358 <ILI9341_Draw_Char+0x130>)
 800126a:	4613      	mov	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4423      	add	r3, r4
 8001274:	4403      	add	r3, r0
 8001276:	781a      	ldrb	r2, [r3, #0]
 8001278:	f101 0318 	add.w	r3, r1, #24
 800127c:	443b      	add	r3, r7
 800127e:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001282:	7d3b      	ldrb	r3, [r7, #20]
 8001284:	3301      	adds	r3, #1
 8001286:	753b      	strb	r3, [r7, #20]
 8001288:	7d3b      	ldrb	r3, [r7, #20]
 800128a:	2b05      	cmp	r3, #5
 800128c:	d9e9      	bls.n	8001262 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 800128e:	79bb      	ldrb	r3, [r7, #6]
 8001290:	b298      	uxth	r0, r3
 8001292:	797b      	ldrb	r3, [r7, #5]
 8001294:	b299      	uxth	r1, r3
 8001296:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001298:	461a      	mov	r2, r3
 800129a:	0052      	lsls	r2, r2, #1
 800129c:	4413      	add	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	b29c      	uxth	r4, r3
 80012a8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	4623      	mov	r3, r4
 80012ae:	f000 fc5f 	bl	8001b70 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 80012b2:	2300      	movs	r3, #0
 80012b4:	757b      	strb	r3, [r7, #21]
 80012b6:	e047      	b.n	8001348 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80012b8:	2300      	movs	r3, #0
 80012ba:	75bb      	strb	r3, [r7, #22]
 80012bc:	e03e      	b.n	800133c <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 80012be:	7d7b      	ldrb	r3, [r7, #21]
 80012c0:	3318      	adds	r3, #24
 80012c2:	443b      	add	r3, r7
 80012c4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80012c8:	461a      	mov	r2, r3
 80012ca:	7dbb      	ldrb	r3, [r7, #22]
 80012cc:	fa42 f303 	asr.w	r3, r2, r3
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d02e      	beq.n	8001336 <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 80012d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d110      	bne.n	8001300 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80012de:	79bb      	ldrb	r3, [r7, #6]
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	7d7b      	ldrb	r3, [r7, #21]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	4413      	add	r3, r2
 80012e8:	b298      	uxth	r0, r3
 80012ea:	797b      	ldrb	r3, [r7, #5]
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	7dbb      	ldrb	r3, [r7, #22]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	4413      	add	r3, r2
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	887a      	ldrh	r2, [r7, #2]
 80012f8:	4619      	mov	r1, r3
 80012fa:	f000 fb5f 	bl	80019bc <ILI9341_Draw_Pixel>
 80012fe:	e01a      	b.n	8001336 <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	b29a      	uxth	r2, r3
 8001304:	7d7b      	ldrb	r3, [r7, #21]
 8001306:	b29b      	uxth	r3, r3
 8001308:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800130a:	fb11 f303 	smulbb	r3, r1, r3
 800130e:	b29b      	uxth	r3, r3
 8001310:	4413      	add	r3, r2
 8001312:	b298      	uxth	r0, r3
 8001314:	797b      	ldrb	r3, [r7, #5]
 8001316:	b29a      	uxth	r2, r3
 8001318:	7dbb      	ldrb	r3, [r7, #22]
 800131a:	b29b      	uxth	r3, r3
 800131c:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800131e:	fb11 f303 	smulbb	r3, r1, r3
 8001322:	b29b      	uxth	r3, r3
 8001324:	4413      	add	r3, r2
 8001326:	b299      	uxth	r1, r3
 8001328:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 800132a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800132c:	887b      	ldrh	r3, [r7, #2]
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	4623      	mov	r3, r4
 8001332:	f000 fc1d 	bl	8001b70 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001336:	7dbb      	ldrb	r3, [r7, #22]
 8001338:	3301      	adds	r3, #1
 800133a:	75bb      	strb	r3, [r7, #22]
 800133c:	7dbb      	ldrb	r3, [r7, #22]
 800133e:	2b07      	cmp	r3, #7
 8001340:	d9bd      	bls.n	80012be <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001342:	7d7b      	ldrb	r3, [r7, #21]
 8001344:	3301      	adds	r3, #1
 8001346:	757b      	strb	r3, [r7, #21]
 8001348:	7d7b      	ldrb	r3, [r7, #21]
 800134a:	2b05      	cmp	r3, #5
 800134c:	d9b4      	bls.n	80012b8 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 800134e:	bf00      	nop
 8001350:	bf00      	nop
 8001352:	371c      	adds	r7, #28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd90      	pop	{r4, r7, pc}
 8001358:	08007668 	.word	0x08007668

0800135c <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b085      	sub	sp, #20
 8001360:	af02      	add	r7, sp, #8
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	4608      	mov	r0, r1
 8001366:	4611      	mov	r1, r2
 8001368:	461a      	mov	r2, r3
 800136a:	4603      	mov	r3, r0
 800136c:	70fb      	strb	r3, [r7, #3]
 800136e:	460b      	mov	r3, r1
 8001370:	70bb      	strb	r3, [r7, #2]
 8001372:	4613      	mov	r3, r2
 8001374:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8001376:	e017      	b.n	80013a8 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	7818      	ldrb	r0, [r3, #0]
 8001380:	883c      	ldrh	r4, [r7, #0]
 8001382:	78ba      	ldrb	r2, [r7, #2]
 8001384:	78f9      	ldrb	r1, [r7, #3]
 8001386:	8bbb      	ldrh	r3, [r7, #28]
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	8b3b      	ldrh	r3, [r7, #24]
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	4623      	mov	r3, r4
 8001390:	f7ff ff4a 	bl	8001228 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8001394:	8b3b      	ldrh	r3, [r7, #24]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	461a      	mov	r2, r3
 800139a:	0052      	lsls	r2, r2, #1
 800139c:	4413      	add	r3, r2
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	78fb      	ldrb	r3, [r7, #3]
 80013a4:	4413      	add	r3, r2
 80013a6:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1e3      	bne.n	8001378 <ILI9341_Draw_Text+0x1c>
    }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd90      	pop	{r4, r7, pc}
	...

080013bc <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 80013c0:	f7ff fbf0 	bl	8000ba4 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 80013c4:	f7ff f90c 	bl	80005e0 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013ce:	4802      	ldr	r0, [pc, #8]	@ (80013d8 <ILI9341_SPI_Init+0x1c>)
 80013d0:	f000 ff4c 	bl	800226c <HAL_GPIO_WritePin>
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40020800 	.word	0x40020800

080013dc <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80013e6:	1df9      	adds	r1, r7, #7
 80013e8:	2301      	movs	r3, #1
 80013ea:	2201      	movs	r2, #1
 80013ec:	4803      	ldr	r0, [pc, #12]	@ (80013fc <ILI9341_SPI_Send+0x20>)
 80013ee:	f002 f988 	bl	8003702 <HAL_SPI_Transmit>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000204 	.word	0x20000204

08001400 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001410:	480b      	ldr	r0, [pc, #44]	@ (8001440 <ILI9341_Write_Command+0x40>)
 8001412:	f000 ff2b 	bl	800226c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800141c:	4808      	ldr	r0, [pc, #32]	@ (8001440 <ILI9341_Write_Command+0x40>)
 800141e:	f000 ff25 	bl	800226c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ffd9 	bl	80013dc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800142a:	2201      	movs	r2, #1
 800142c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001430:	4803      	ldr	r0, [pc, #12]	@ (8001440 <ILI9341_Write_Command+0x40>)
 8001432:	f000 ff1b 	bl	800226c <HAL_GPIO_WritePin>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40020800 	.word	0x40020800

08001444 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800144e:	2201      	movs	r2, #1
 8001450:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001454:	480b      	ldr	r0, [pc, #44]	@ (8001484 <ILI9341_Write_Data+0x40>)
 8001456:	f000 ff09 	bl	800226c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800145a:	2200      	movs	r2, #0
 800145c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001460:	4808      	ldr	r0, [pc, #32]	@ (8001484 <ILI9341_Write_Data+0x40>)
 8001462:	f000 ff03 	bl	800226c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ffb7 	bl	80013dc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800146e:	2201      	movs	r2, #1
 8001470:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001474:	4803      	ldr	r0, [pc, #12]	@ (8001484 <ILI9341_Write_Data+0x40>)
 8001476:	f000 fef9 	bl	800226c <HAL_GPIO_WritePin>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40020800 	.word	0x40020800

08001488 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4604      	mov	r4, r0
 8001490:	4608      	mov	r0, r1
 8001492:	4611      	mov	r1, r2
 8001494:	461a      	mov	r2, r3
 8001496:	4623      	mov	r3, r4
 8001498:	80fb      	strh	r3, [r7, #6]
 800149a:	4603      	mov	r3, r0
 800149c:	80bb      	strh	r3, [r7, #4]
 800149e:	460b      	mov	r3, r1
 80014a0:	807b      	strh	r3, [r7, #2]
 80014a2:	4613      	mov	r3, r2
 80014a4:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80014a6:	202a      	movs	r0, #42	@ 0x2a
 80014a8:	f7ff ffaa 	bl	8001400 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	0a1b      	lsrs	r3, r3, #8
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ffc5 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff ffc0 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80014c4:	887b      	ldrh	r3, [r7, #2]
 80014c6:	0a1b      	lsrs	r3, r3, #8
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ffb9 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80014d2:	887b      	ldrh	r3, [r7, #2]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ffb4 	bl	8001444 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80014dc:	202b      	movs	r0, #43	@ 0x2b
 80014de:	f7ff ff8f 	bl	8001400 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80014e2:	88bb      	ldrh	r3, [r7, #4]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ffaa 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80014f0:	88bb      	ldrh	r3, [r7, #4]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ffa5 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80014fa:	883b      	ldrh	r3, [r7, #0]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	b29b      	uxth	r3, r3
 8001500:	b2db      	uxtb	r3, r3
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff ff9e 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8001508:	883b      	ldrh	r3, [r7, #0]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff99 	bl	8001444 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8001512:	202c      	movs	r0, #44	@ 0x2c
 8001514:	f7ff ff74 	bl	8001400 <ILI9341_Write_Command>
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	bd90      	pop	{r4, r7, pc}

08001520 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800152a:	480b      	ldr	r0, [pc, #44]	@ (8001558 <ILI9341_Reset+0x38>)
 800152c:	f000 fe9e 	bl	800226c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001530:	20c8      	movs	r0, #200	@ 0xc8
 8001532:	f000 fbe5 	bl	8001d00 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800153c:	4806      	ldr	r0, [pc, #24]	@ (8001558 <ILI9341_Reset+0x38>)
 800153e:	f000 fe95 	bl	800226c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001542:	20c8      	movs	r0, #200	@ 0xc8
 8001544:	f000 fbdc 	bl	8001d00 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8001548:	2201      	movs	r2, #1
 800154a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800154e:	4802      	ldr	r0, [pc, #8]	@ (8001558 <ILI9341_Reset+0x38>)
 8001550:	f000 fe8c 	bl	800226c <HAL_GPIO_WritePin>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40020800 	.word	0x40020800

0800155c <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 800156a:	2036      	movs	r0, #54	@ 0x36
 800156c:	f7ff ff48 	bl	8001400 <ILI9341_Write_Command>
HAL_Delay(1);
 8001570:	2001      	movs	r0, #1
 8001572:	f000 fbc5 	bl	8001d00 <HAL_Delay>
	
switch(screen_rotation) 
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	2b03      	cmp	r3, #3
 800157a:	d837      	bhi.n	80015ec <ILI9341_Set_Rotation+0x90>
 800157c:	a201      	add	r2, pc, #4	@ (adr r2, 8001584 <ILI9341_Set_Rotation+0x28>)
 800157e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001582:	bf00      	nop
 8001584:	08001595 	.word	0x08001595
 8001588:	080015ab 	.word	0x080015ab
 800158c:	080015c1 	.word	0x080015c1
 8001590:	080015d7 	.word	0x080015d7
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8001594:	2048      	movs	r0, #72	@ 0x48
 8001596:	f7ff ff55 	bl	8001444 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800159a:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <ILI9341_Set_Rotation+0x9c>)
 800159c:	22f0      	movs	r2, #240	@ 0xf0
 800159e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80015a0:	4b16      	ldr	r3, [pc, #88]	@ (80015fc <ILI9341_Set_Rotation+0xa0>)
 80015a2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80015a6:	801a      	strh	r2, [r3, #0]
			break;
 80015a8:	e021      	b.n	80015ee <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80015aa:	2028      	movs	r0, #40	@ 0x28
 80015ac:	f7ff ff4a 	bl	8001444 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80015b0:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <ILI9341_Set_Rotation+0x9c>)
 80015b2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80015b6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80015b8:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <ILI9341_Set_Rotation+0xa0>)
 80015ba:	22f0      	movs	r2, #240	@ 0xf0
 80015bc:	801a      	strh	r2, [r3, #0]
			break;
 80015be:	e016      	b.n	80015ee <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80015c0:	2088      	movs	r0, #136	@ 0x88
 80015c2:	f7ff ff3f 	bl	8001444 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80015c6:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <ILI9341_Set_Rotation+0x9c>)
 80015c8:	22f0      	movs	r2, #240	@ 0xf0
 80015ca:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80015cc:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <ILI9341_Set_Rotation+0xa0>)
 80015ce:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80015d2:	801a      	strh	r2, [r3, #0]
			break;
 80015d4:	e00b      	b.n	80015ee <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80015d6:	20e8      	movs	r0, #232	@ 0xe8
 80015d8:	f7ff ff34 	bl	8001444 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <ILI9341_Set_Rotation+0x9c>)
 80015de:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80015e2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80015e4:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <ILI9341_Set_Rotation+0xa0>)
 80015e6:	22f0      	movs	r2, #240	@ 0xf0
 80015e8:	801a      	strh	r2, [r3, #0]
			break;
 80015ea:	e000      	b.n	80015ee <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80015ec:	bf00      	nop
	}
}
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000006 	.word	0x20000006
 80015fc:	20000004 	.word	0x20000004

08001600 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001604:	2201      	movs	r2, #1
 8001606:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800160a:	4802      	ldr	r0, [pc, #8]	@ (8001614 <ILI9341_Enable+0x14>)
 800160c:	f000 fe2e 	bl	800226c <HAL_GPIO_WritePin>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40020800 	.word	0x40020800

08001618 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0

ILI9341_Enable();
 800161c:	f7ff fff0 	bl	8001600 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001620:	f7ff fecc 	bl	80013bc <ILI9341_SPI_Init>
ILI9341_Reset();
 8001624:	f7ff ff7c 	bl	8001520 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8001628:	2001      	movs	r0, #1
 800162a:	f7ff fee9 	bl	8001400 <ILI9341_Write_Command>
HAL_Delay(1000);
 800162e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001632:	f000 fb65 	bl	8001d00 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8001636:	20cb      	movs	r0, #203	@ 0xcb
 8001638:	f7ff fee2 	bl	8001400 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 800163c:	2039      	movs	r0, #57	@ 0x39
 800163e:	f7ff ff01 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8001642:	202c      	movs	r0, #44	@ 0x2c
 8001644:	f7ff fefe 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001648:	2000      	movs	r0, #0
 800164a:	f7ff fefb 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 800164e:	2034      	movs	r0, #52	@ 0x34
 8001650:	f7ff fef8 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8001654:	2002      	movs	r0, #2
 8001656:	f7ff fef5 	bl	8001444 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 800165a:	20cf      	movs	r0, #207	@ 0xcf
 800165c:	f7ff fed0 	bl	8001400 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001660:	2000      	movs	r0, #0
 8001662:	f7ff feef 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001666:	20c1      	movs	r0, #193	@ 0xc1
 8001668:	f7ff feec 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 800166c:	2030      	movs	r0, #48	@ 0x30
 800166e:	f7ff fee9 	bl	8001444 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8001672:	20e8      	movs	r0, #232	@ 0xe8
 8001674:	f7ff fec4 	bl	8001400 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8001678:	2085      	movs	r0, #133	@ 0x85
 800167a:	f7ff fee3 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800167e:	2000      	movs	r0, #0
 8001680:	f7ff fee0 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8001684:	2078      	movs	r0, #120	@ 0x78
 8001686:	f7ff fedd 	bl	8001444 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800168a:	20ea      	movs	r0, #234	@ 0xea
 800168c:	f7ff feb8 	bl	8001400 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001690:	2000      	movs	r0, #0
 8001692:	f7ff fed7 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001696:	2000      	movs	r0, #0
 8001698:	f7ff fed4 	bl	8001444 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 800169c:	20ed      	movs	r0, #237	@ 0xed
 800169e:	f7ff feaf 	bl	8001400 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80016a2:	2064      	movs	r0, #100	@ 0x64
 80016a4:	f7ff fece 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f7ff fecb 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80016ae:	2012      	movs	r0, #18
 80016b0:	f7ff fec8 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80016b4:	2081      	movs	r0, #129	@ 0x81
 80016b6:	f7ff fec5 	bl	8001444 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80016ba:	20f7      	movs	r0, #247	@ 0xf7
 80016bc:	f7ff fea0 	bl	8001400 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80016c0:	2020      	movs	r0, #32
 80016c2:	f7ff febf 	bl	8001444 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80016c6:	20c0      	movs	r0, #192	@ 0xc0
 80016c8:	f7ff fe9a 	bl	8001400 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 80016cc:	2023      	movs	r0, #35	@ 0x23
 80016ce:	f7ff feb9 	bl	8001444 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80016d2:	20c1      	movs	r0, #193	@ 0xc1
 80016d4:	f7ff fe94 	bl	8001400 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 80016d8:	2010      	movs	r0, #16
 80016da:	f7ff feb3 	bl	8001444 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 80016de:	20c5      	movs	r0, #197	@ 0xc5
 80016e0:	f7ff fe8e 	bl	8001400 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80016e4:	203e      	movs	r0, #62	@ 0x3e
 80016e6:	f7ff fead 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 80016ea:	2028      	movs	r0, #40	@ 0x28
 80016ec:	f7ff feaa 	bl	8001444 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80016f0:	20c7      	movs	r0, #199	@ 0xc7
 80016f2:	f7ff fe85 	bl	8001400 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80016f6:	2086      	movs	r0, #134	@ 0x86
 80016f8:	f7ff fea4 	bl	8001444 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80016fc:	2036      	movs	r0, #54	@ 0x36
 80016fe:	f7ff fe7f 	bl	8001400 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8001702:	2048      	movs	r0, #72	@ 0x48
 8001704:	f7ff fe9e 	bl	8001444 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001708:	203a      	movs	r0, #58	@ 0x3a
 800170a:	f7ff fe79 	bl	8001400 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800170e:	2055      	movs	r0, #85	@ 0x55
 8001710:	f7ff fe98 	bl	8001444 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001714:	20b1      	movs	r0, #177	@ 0xb1
 8001716:	f7ff fe73 	bl	8001400 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff fe92 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001720:	2018      	movs	r0, #24
 8001722:	f7ff fe8f 	bl	8001444 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8001726:	20b6      	movs	r0, #182	@ 0xb6
 8001728:	f7ff fe6a 	bl	8001400 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 800172c:	2008      	movs	r0, #8
 800172e:	f7ff fe89 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001732:	2082      	movs	r0, #130	@ 0x82
 8001734:	f7ff fe86 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001738:	2027      	movs	r0, #39	@ 0x27
 800173a:	f7ff fe83 	bl	8001444 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 800173e:	20f2      	movs	r0, #242	@ 0xf2
 8001740:	f7ff fe5e 	bl	8001400 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001744:	2000      	movs	r0, #0
 8001746:	f7ff fe7d 	bl	8001444 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 800174a:	2026      	movs	r0, #38	@ 0x26
 800174c:	f7ff fe58 	bl	8001400 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8001750:	2001      	movs	r0, #1
 8001752:	f7ff fe77 	bl	8001444 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001756:	20e0      	movs	r0, #224	@ 0xe0
 8001758:	f7ff fe52 	bl	8001400 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 800175c:	200f      	movs	r0, #15
 800175e:	f7ff fe71 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001762:	2031      	movs	r0, #49	@ 0x31
 8001764:	f7ff fe6e 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001768:	202b      	movs	r0, #43	@ 0x2b
 800176a:	f7ff fe6b 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800176e:	200c      	movs	r0, #12
 8001770:	f7ff fe68 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001774:	200e      	movs	r0, #14
 8001776:	f7ff fe65 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800177a:	2008      	movs	r0, #8
 800177c:	f7ff fe62 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8001780:	204e      	movs	r0, #78	@ 0x4e
 8001782:	f7ff fe5f 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001786:	20f1      	movs	r0, #241	@ 0xf1
 8001788:	f7ff fe5c 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 800178c:	2037      	movs	r0, #55	@ 0x37
 800178e:	f7ff fe59 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001792:	2007      	movs	r0, #7
 8001794:	f7ff fe56 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001798:	2010      	movs	r0, #16
 800179a:	f7ff fe53 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800179e:	2003      	movs	r0, #3
 80017a0:	f7ff fe50 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80017a4:	200e      	movs	r0, #14
 80017a6:	f7ff fe4d 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80017aa:	2009      	movs	r0, #9
 80017ac:	f7ff fe4a 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80017b0:	2000      	movs	r0, #0
 80017b2:	f7ff fe47 	bl	8001444 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80017b6:	20e1      	movs	r0, #225	@ 0xe1
 80017b8:	f7ff fe22 	bl	8001400 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff fe41 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80017c2:	200e      	movs	r0, #14
 80017c4:	f7ff fe3e 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80017c8:	2014      	movs	r0, #20
 80017ca:	f7ff fe3b 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80017ce:	2003      	movs	r0, #3
 80017d0:	f7ff fe38 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80017d4:	2011      	movs	r0, #17
 80017d6:	f7ff fe35 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80017da:	2007      	movs	r0, #7
 80017dc:	f7ff fe32 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80017e0:	2031      	movs	r0, #49	@ 0x31
 80017e2:	f7ff fe2f 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80017e6:	20c1      	movs	r0, #193	@ 0xc1
 80017e8:	f7ff fe2c 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80017ec:	2048      	movs	r0, #72	@ 0x48
 80017ee:	f7ff fe29 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80017f2:	2008      	movs	r0, #8
 80017f4:	f7ff fe26 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80017f8:	200f      	movs	r0, #15
 80017fa:	f7ff fe23 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80017fe:	200c      	movs	r0, #12
 8001800:	f7ff fe20 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001804:	2031      	movs	r0, #49	@ 0x31
 8001806:	f7ff fe1d 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800180a:	2036      	movs	r0, #54	@ 0x36
 800180c:	f7ff fe1a 	bl	8001444 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001810:	200f      	movs	r0, #15
 8001812:	f7ff fe17 	bl	8001444 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8001816:	2011      	movs	r0, #17
 8001818:	f7ff fdf2 	bl	8001400 <ILI9341_Write_Command>
HAL_Delay(120);
 800181c:	2078      	movs	r0, #120	@ 0x78
 800181e:	f000 fa6f 	bl	8001d00 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8001822:	2029      	movs	r0, #41	@ 0x29
 8001824:	f7ff fdec 	bl	8001400 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fe97 	bl	800155c <ILI9341_Set_Rotation>
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001838:	b08d      	sub	sp, #52	@ 0x34
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	6039      	str	r1, [r7, #0]
 8001840:	80fb      	strh	r3, [r7, #6]
 8001842:	466b      	mov	r3, sp
 8001844:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001852:	d202      	bcs.n	800185a <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001858:	e002      	b.n	8001860 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 800185a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800185e:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001860:	2201      	movs	r2, #1
 8001862:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001866:	4840      	ldr	r0, [pc, #256]	@ (8001968 <ILI9341_Draw_Colour_Burst+0x134>)
 8001868:	f000 fd00 	bl	800226c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001872:	483d      	ldr	r0, [pc, #244]	@ (8001968 <ILI9341_Draw_Colour_Burst+0x134>)
 8001874:	f000 fcfa 	bl	800226c <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	0a1b      	lsrs	r3, r3, #8
 800187c:	b29b      	uxth	r3, r3
 800187e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 8001882:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001884:	460b      	mov	r3, r1
 8001886:	3b01      	subs	r3, #1
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	2300      	movs	r3, #0
 800188c:	4688      	mov	r8, r1
 800188e:	4699      	mov	r9, r3
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800189c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018a4:	2300      	movs	r3, #0
 80018a6:	460c      	mov	r4, r1
 80018a8:	461d      	mov	r5, r3
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	00eb      	lsls	r3, r5, #3
 80018b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018b8:	00e2      	lsls	r2, r4, #3
 80018ba:	1dcb      	adds	r3, r1, #7
 80018bc:	08db      	lsrs	r3, r3, #3
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	ebad 0d03 	sub.w	sp, sp, r3
 80018c4:	466b      	mov	r3, sp
 80018c6:	3300      	adds	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80018ca:	2300      	movs	r3, #0
 80018cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018ce:	e00e      	b.n	80018ee <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018d4:	4413      	add	r3, r2
 80018d6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80018da:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80018dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018de:	3301      	adds	r3, #1
 80018e0:	88fa      	ldrh	r2, [r7, #6]
 80018e2:	b2d1      	uxtb	r1, r2
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80018e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ea:	3302      	adds	r3, #2
 80018ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d3ec      	bcc.n	80018d0 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001900:	fbb2 f3f3 	udiv	r3, r2, r3
 8001904:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800190a:	fbb3 f2f2 	udiv	r2, r3, r2
 800190e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001910:	fb01 f202 	mul.w	r2, r1, r2
 8001914:	1a9b      	subs	r3, r3, r2
 8001916:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d010      	beq.n	8001940 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800191e:	2300      	movs	r3, #0
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
 8001922:	e009      	b.n	8001938 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8001924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001926:	b29a      	uxth	r2, r3
 8001928:	230a      	movs	r3, #10
 800192a:	69b9      	ldr	r1, [r7, #24]
 800192c:	480f      	ldr	r0, [pc, #60]	@ (800196c <ILI9341_Draw_Colour_Burst+0x138>)
 800192e:	f001 fee8 	bl	8003702 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001934:	3301      	adds	r3, #1
 8001936:	627b      	str	r3, [r7, #36]	@ 0x24
 8001938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	429a      	cmp	r2, r3
 800193e:	d3f1      	bcc.n	8001924 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	b29a      	uxth	r2, r3
 8001944:	230a      	movs	r3, #10
 8001946:	69b9      	ldr	r1, [r7, #24]
 8001948:	4808      	ldr	r0, [pc, #32]	@ (800196c <ILI9341_Draw_Colour_Burst+0x138>)
 800194a:	f001 feda 	bl	8003702 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800194e:	2201      	movs	r2, #1
 8001950:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001954:	4804      	ldr	r0, [pc, #16]	@ (8001968 <ILI9341_Draw_Colour_Burst+0x134>)
 8001956:	f000 fc89 	bl	800226c <HAL_GPIO_WritePin>
 800195a:	46b5      	mov	sp, r6
}
 800195c:	bf00      	nop
 800195e:	3734      	adds	r7, #52	@ 0x34
 8001960:	46bd      	mov	sp, r7
 8001962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001966:	bf00      	nop
 8001968:	40020800 	.word	0x40020800
 800196c:	20000204 	.word	0x20000204

08001970 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 800197a:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <ILI9341_Fill_Screen+0x44>)
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	b29a      	uxth	r2, r3
 8001980:	4b0d      	ldr	r3, [pc, #52]	@ (80019b8 <ILI9341_Fill_Screen+0x48>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	b29b      	uxth	r3, r3
 8001986:	2100      	movs	r1, #0
 8001988:	2000      	movs	r0, #0
 800198a:	f7ff fd7d 	bl	8001488 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 800198e:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <ILI9341_Fill_Screen+0x44>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	b29b      	uxth	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <ILI9341_Fill_Screen+0x48>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	b29b      	uxth	r3, r3
 800199c:	fb02 f303 	mul.w	r3, r2, r3
 80019a0:	461a      	mov	r2, r3
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	4611      	mov	r1, r2
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff ff44 	bl	8001834 <ILI9341_Draw_Colour_Burst>
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000006 	.word	0x20000006
 80019b8:	20000004 	.word	0x20000004

080019bc <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	80fb      	strh	r3, [r7, #6]
 80019c6:	460b      	mov	r3, r1
 80019c8:	80bb      	strh	r3, [r7, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80019ce:	4b64      	ldr	r3, [pc, #400]	@ (8001b60 <ILI9341_Draw_Pixel+0x1a4>)
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	88fa      	ldrh	r2, [r7, #6]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	f080 80be 	bcs.w	8001b58 <ILI9341_Draw_Pixel+0x19c>
 80019dc:	4b61      	ldr	r3, [pc, #388]	@ (8001b64 <ILI9341_Draw_Pixel+0x1a8>)
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	88ba      	ldrh	r2, [r7, #4]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	f080 80b7 	bcs.w	8001b58 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80019ea:	2200      	movs	r2, #0
 80019ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019f0:	485d      	ldr	r0, [pc, #372]	@ (8001b68 <ILI9341_Draw_Pixel+0x1ac>)
 80019f2:	f000 fc3b 	bl	800226c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019fc:	485a      	ldr	r0, [pc, #360]	@ (8001b68 <ILI9341_Draw_Pixel+0x1ac>)
 80019fe:	f000 fc35 	bl	800226c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8001a02:	202a      	movs	r0, #42	@ 0x2a
 8001a04:	f7ff fcea 	bl	80013dc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a0e:	4856      	ldr	r0, [pc, #344]	@ (8001b68 <ILI9341_Draw_Pixel+0x1ac>)
 8001a10:	f000 fc2c 	bl	800226c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001a14:	2201      	movs	r2, #1
 8001a16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a1a:	4853      	ldr	r0, [pc, #332]	@ (8001b68 <ILI9341_Draw_Pixel+0x1ac>)
 8001a1c:	f000 fc26 	bl	800226c <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001a20:	2200      	movs	r2, #0
 8001a22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a26:	4850      	ldr	r0, [pc, #320]	@ (8001b68 <ILI9341_Draw_Pixel+0x1ac>)
 8001a28:	f000 fc20 	bl	800226c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	0a1b      	lsrs	r3, r3, #8
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	753b      	strb	r3, [r7, #20]
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	757b      	strb	r3, [r7, #21]
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	121b      	asrs	r3, r3, #8
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	75bb      	strb	r3, [r7, #22]
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8001a50:	f107 0114 	add.w	r1, r7, #20
 8001a54:	2301      	movs	r3, #1
 8001a56:	2204      	movs	r2, #4
 8001a58:	4844      	ldr	r0, [pc, #272]	@ (8001b6c <ILI9341_Draw_Pixel+0x1b0>)
 8001a5a:	f001 fe52 	bl	8003702 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a64:	4840      	ldr	r0, [pc, #256]	@ (8001b68 <ILI9341_Draw_Pixel+0x1ac>)
 8001a66:	f000 fc01 	bl	800226c <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a70:	483d      	ldr	r0, [pc, #244]	@ (8001b68 <ILI9341_Draw_Pixel+0x1ac>)
 8001a72:	f000 fbfb 	bl	800226c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001a76:	2200      	movs	r2, #0
 8001a78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a7c:	483a      	ldr	r0, [pc, #232]	@ (8001b68 <ILI9341_Draw_Pixel+0x1ac>)
 8001a7e:	f000 fbf5 	bl	800226c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8001a82:	202b      	movs	r0, #43	@ 0x2b
 8001a84:	f7ff fcaa 	bl	80013dc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a8e:	4836      	ldr	r0, [pc, #216]	@ (8001b68 <ILI9341_Draw_Pixel+0x1ac>)
 8001a90:	f000 fbec 	bl	800226c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001a94:	2201      	movs	r2, #1
 8001a96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a9a:	4833      	ldr	r0, [pc, #204]	@ (8001b68 <ILI9341_Draw_Pixel+0x1ac>)
 8001a9c:	f000 fbe6 	bl	800226c <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001aa6:	4830      	ldr	r0, [pc, #192]	@ (8001b68 <ILI9341_Draw_Pixel+0x1ac>)
 8001aa8:	f000 fbe0 	bl	800226c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8001aac:	88bb      	ldrh	r3, [r7, #4]
 8001aae:	0a1b      	lsrs	r3, r3, #8
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	743b      	strb	r3, [r7, #16]
 8001ab6:	88bb      	ldrh	r3, [r7, #4]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	747b      	strb	r3, [r7, #17]
 8001abc:	88bb      	ldrh	r3, [r7, #4]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	121b      	asrs	r3, r3, #8
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	74bb      	strb	r3, [r7, #18]
 8001ac6:	88bb      	ldrh	r3, [r7, #4]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	3301      	adds	r3, #1
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8001ad0:	f107 0110 	add.w	r1, r7, #16
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	2204      	movs	r2, #4
 8001ad8:	4824      	ldr	r0, [pc, #144]	@ (8001b6c <ILI9341_Draw_Pixel+0x1b0>)
 8001ada:	f001 fe12 	bl	8003702 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ae4:	4820      	ldr	r0, [pc, #128]	@ (8001b68 <ILI9341_Draw_Pixel+0x1ac>)
 8001ae6:	f000 fbc1 	bl	800226c <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001aea:	2200      	movs	r2, #0
 8001aec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001af0:	481d      	ldr	r0, [pc, #116]	@ (8001b68 <ILI9341_Draw_Pixel+0x1ac>)
 8001af2:	f000 fbbb 	bl	800226c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001af6:	2200      	movs	r2, #0
 8001af8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001afc:	481a      	ldr	r0, [pc, #104]	@ (8001b68 <ILI9341_Draw_Pixel+0x1ac>)
 8001afe:	f000 fbb5 	bl	800226c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8001b02:	202c      	movs	r0, #44	@ 0x2c
 8001b04:	f7ff fc6a 	bl	80013dc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b0e:	4816      	ldr	r0, [pc, #88]	@ (8001b68 <ILI9341_Draw_Pixel+0x1ac>)
 8001b10:	f000 fbac 	bl	800226c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001b14:	2201      	movs	r2, #1
 8001b16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b1a:	4813      	ldr	r0, [pc, #76]	@ (8001b68 <ILI9341_Draw_Pixel+0x1ac>)
 8001b1c:	f000 fba6 	bl	800226c <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b26:	4810      	ldr	r0, [pc, #64]	@ (8001b68 <ILI9341_Draw_Pixel+0x1ac>)
 8001b28:	f000 fba0 	bl	800226c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8001b2c:	887b      	ldrh	r3, [r7, #2]
 8001b2e:	0a1b      	lsrs	r3, r3, #8
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	733b      	strb	r3, [r7, #12]
 8001b36:	887b      	ldrh	r3, [r7, #2]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8001b3c:	f107 010c 	add.w	r1, r7, #12
 8001b40:	2301      	movs	r3, #1
 8001b42:	2202      	movs	r2, #2
 8001b44:	4809      	ldr	r0, [pc, #36]	@ (8001b6c <ILI9341_Draw_Pixel+0x1b0>)
 8001b46:	f001 fddc 	bl	8003702 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b50:	4805      	ldr	r0, [pc, #20]	@ (8001b68 <ILI9341_Draw_Pixel+0x1ac>)
 8001b52:	f000 fb8b 	bl	800226c <HAL_GPIO_WritePin>
 8001b56:	e000      	b.n	8001b5a <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001b58:	bf00      	nop
	
}
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000006 	.word	0x20000006
 8001b64:	20000004 	.word	0x20000004
 8001b68:	40020800 	.word	0x40020800
 8001b6c:	20000204 	.word	0x20000204

08001b70 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4604      	mov	r4, r0
 8001b78:	4608      	mov	r0, r1
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4623      	mov	r3, r4
 8001b80:	80fb      	strh	r3, [r7, #6]
 8001b82:	4603      	mov	r3, r0
 8001b84:	80bb      	strh	r3, [r7, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	807b      	strh	r3, [r7, #2]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001b8e:	4b24      	ldr	r3, [pc, #144]	@ (8001c20 <ILI9341_Draw_Rectangle+0xb0>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	88fa      	ldrh	r2, [r7, #6]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d23d      	bcs.n	8001c16 <ILI9341_Draw_Rectangle+0xa6>
 8001b9a:	4b22      	ldr	r3, [pc, #136]	@ (8001c24 <ILI9341_Draw_Rectangle+0xb4>)
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	88ba      	ldrh	r2, [r7, #4]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d237      	bcs.n	8001c16 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8001ba6:	88fa      	ldrh	r2, [r7, #6]
 8001ba8:	887b      	ldrh	r3, [r7, #2]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a1c      	ldr	r2, [pc, #112]	@ (8001c20 <ILI9341_Draw_Rectangle+0xb0>)
 8001bae:	8812      	ldrh	r2, [r2, #0]
 8001bb0:	b292      	uxth	r2, r2
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	dd05      	ble.n	8001bc2 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c20 <ILI9341_Draw_Rectangle+0xb0>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8001bc2:	88ba      	ldrh	r2, [r7, #4]
 8001bc4:	883b      	ldrh	r3, [r7, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a16      	ldr	r2, [pc, #88]	@ (8001c24 <ILI9341_Draw_Rectangle+0xb4>)
 8001bca:	8812      	ldrh	r2, [r2, #0]
 8001bcc:	b292      	uxth	r2, r2
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	dd05      	ble.n	8001bde <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8001bd2:	4b14      	ldr	r3, [pc, #80]	@ (8001c24 <ILI9341_Draw_Rectangle+0xb4>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	88bb      	ldrh	r3, [r7, #4]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8001bde:	88fa      	ldrh	r2, [r7, #6]
 8001be0:	887b      	ldrh	r3, [r7, #2]
 8001be2:	4413      	add	r3, r2
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	3b01      	subs	r3, #1
 8001be8:	b29c      	uxth	r4, r3
 8001bea:	88ba      	ldrh	r2, [r7, #4]
 8001bec:	883b      	ldrh	r3, [r7, #0]
 8001bee:	4413      	add	r3, r2
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	88b9      	ldrh	r1, [r7, #4]
 8001bf8:	88f8      	ldrh	r0, [r7, #6]
 8001bfa:	4622      	mov	r2, r4
 8001bfc:	f7ff fc44 	bl	8001488 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8001c00:	883b      	ldrh	r3, [r7, #0]
 8001c02:	887a      	ldrh	r2, [r7, #2]
 8001c04:	fb02 f303 	mul.w	r3, r2, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	8b3b      	ldrh	r3, [r7, #24]
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fe10 	bl	8001834 <ILI9341_Draw_Colour_Burst>
 8001c14:	e000      	b.n	8001c18 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001c16:	bf00      	nop
}
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd90      	pop	{r4, r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000006 	.word	0x20000006
 8001c24:	20000004 	.word	0x20000004

08001c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <HAL_Init+0x34>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <HAL_Init+0x34>)
 8001c32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c36:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c38:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <HAL_Init+0x34>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a07      	ldr	r2, [pc, #28]	@ (8001c5c <HAL_Init+0x34>)
 8001c3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c44:	2003      	movs	r0, #3
 8001c46:	f000 f931 	bl	8001eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f000 f808 	bl	8001c60 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001c50:	f7ff f82a 	bl	8000ca8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023c00 	.word	0x40023c00

08001c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c68:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <HAL_InitTick+0x54>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <HAL_InitTick+0x58>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4619      	mov	r1, r3
 8001c72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f93b 	bl	8001efa <HAL_SYSTICK_Config>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00e      	b.n	8001cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b0f      	cmp	r3, #15
 8001c92:	d80a      	bhi.n	8001caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c94:	2200      	movs	r2, #0
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f000 f911 	bl	8001ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca0:	4a06      	ldr	r2, [pc, #24]	@ (8001cbc <HAL_InitTick+0x5c>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e000      	b.n	8001cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	2000000c 	.word	0x2000000c
 8001cbc:	20000008 	.word	0x20000008

08001cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <HAL_IncTick+0x20>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_IncTick+0x24>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	4a04      	ldr	r2, [pc, #16]	@ (8001ce4 <HAL_IncTick+0x24>)
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	2000000c 	.word	0x2000000c
 8001ce4:	2000033c 	.word	0x2000033c

08001ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return uwTick;
 8001cec:	4b03      	ldr	r3, [pc, #12]	@ (8001cfc <HAL_GetTick+0x14>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	2000033c 	.word	0x2000033c

08001d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d08:	f7ff ffee 	bl	8001ce8 <HAL_GetTick>
 8001d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d18:	d005      	beq.n	8001d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d44 <HAL_Delay+0x44>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d26:	bf00      	nop
 8001d28:	f7ff ffde 	bl	8001ce8 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d8f7      	bhi.n	8001d28 <HAL_Delay+0x28>
  {
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	2000000c 	.word	0x2000000c

08001d48 <__NVIC_SetPriorityGrouping>:
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d58:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <__NVIC_SetPriorityGrouping+0x40>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d64:	4013      	ands	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d70:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d76:	4a04      	ldr	r2, [pc, #16]	@ (8001d88 <__NVIC_SetPriorityGrouping+0x40>)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	60d3      	str	r3, [r2, #12]
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00
 8001d8c:	05fa0000 	.word	0x05fa0000

08001d90 <__NVIC_GetPriorityGrouping>:
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d94:	4b04      	ldr	r3, [pc, #16]	@ (8001da8 <__NVIC_GetPriorityGrouping+0x18>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	f003 0307 	and.w	r3, r3, #7
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_SetPriority>:
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	6039      	str	r1, [r7, #0]
 8001db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	db0a      	blt.n	8001dd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	490c      	ldr	r1, [pc, #48]	@ (8001df8 <__NVIC_SetPriority+0x4c>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	0112      	lsls	r2, r2, #4
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	440b      	add	r3, r1
 8001dd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001dd4:	e00a      	b.n	8001dec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4908      	ldr	r1, [pc, #32]	@ (8001dfc <__NVIC_SetPriority+0x50>)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	3b04      	subs	r3, #4
 8001de4:	0112      	lsls	r2, r2, #4
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	440b      	add	r3, r1
 8001dea:	761a      	strb	r2, [r3, #24]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000e100 	.word	0xe000e100
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <NVIC_EncodePriority>:
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	@ 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f1c3 0307 	rsb	r3, r3, #7
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	bf28      	it	cs
 8001e1e:	2304      	movcs	r3, #4
 8001e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3304      	adds	r3, #4
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d902      	bls.n	8001e30 <NVIC_EncodePriority+0x30>
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3b03      	subs	r3, #3
 8001e2e:	e000      	b.n	8001e32 <NVIC_EncodePriority+0x32>
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	f04f 32ff 	mov.w	r2, #4294967295
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	401a      	ands	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e48:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	43d9      	mvns	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	4313      	orrs	r3, r2
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3724      	adds	r7, #36	@ 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e78:	d301      	bcc.n	8001e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00f      	b.n	8001e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea8 <SysTick_Config+0x40>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e86:	210f      	movs	r1, #15
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f7ff ff8e 	bl	8001dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e90:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <SysTick_Config+0x40>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e96:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <SysTick_Config+0x40>)
 8001e98:	2207      	movs	r2, #7
 8001e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	e000e010 	.word	0xe000e010

08001eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ff47 	bl	8001d48 <__NVIC_SetPriorityGrouping>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed4:	f7ff ff5c 	bl	8001d90 <__NVIC_GetPriorityGrouping>
 8001ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	6978      	ldr	r0, [r7, #20]
 8001ee0:	f7ff ff8e 	bl	8001e00 <NVIC_EncodePriority>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff5d 	bl	8001dac <__NVIC_SetPriority>
}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ffb0 	bl	8001e68 <SysTick_Config>
 8001f08:	4603      	mov	r3, r0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	@ 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	e175      	b.n	8002220 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001f34:	2201      	movs	r2, #1
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	f040 8164 	bne.w	800221a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d00b      	beq.n	8001f72 <HAL_GPIO_Init+0x5e>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d007      	beq.n	8001f72 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f66:	2b11      	cmp	r3, #17
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b12      	cmp	r3, #18
 8001f70:	d130      	bne.n	8001fd4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fa8:	2201      	movs	r2, #1
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	091b      	lsrs	r3, r3, #4
 8001fbe:	f003 0201 	and.w	r2, r3, #1
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	2203      	movs	r2, #3
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d003      	beq.n	8002014 <HAL_GPIO_Init+0x100>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b12      	cmp	r3, #18
 8002012:	d123      	bne.n	800205c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	08da      	lsrs	r2, r3, #3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3208      	adds	r2, #8
 800201c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	220f      	movs	r2, #15
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	08da      	lsrs	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3208      	adds	r2, #8
 8002056:	69b9      	ldr	r1, [r7, #24]
 8002058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0203 	and.w	r2, r3, #3
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80be 	beq.w	800221a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209e:	4b66      	ldr	r3, [pc, #408]	@ (8002238 <HAL_GPIO_Init+0x324>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a2:	4a65      	ldr	r2, [pc, #404]	@ (8002238 <HAL_GPIO_Init+0x324>)
 80020a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020aa:	4b63      	ldr	r3, [pc, #396]	@ (8002238 <HAL_GPIO_Init+0x324>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80020b6:	4a61      	ldr	r2, [pc, #388]	@ (800223c <HAL_GPIO_Init+0x328>)
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3302      	adds	r3, #2
 80020be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	220f      	movs	r2, #15
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a58      	ldr	r2, [pc, #352]	@ (8002240 <HAL_GPIO_Init+0x32c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d037      	beq.n	8002152 <HAL_GPIO_Init+0x23e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a57      	ldr	r2, [pc, #348]	@ (8002244 <HAL_GPIO_Init+0x330>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d031      	beq.n	800214e <HAL_GPIO_Init+0x23a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a56      	ldr	r2, [pc, #344]	@ (8002248 <HAL_GPIO_Init+0x334>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d02b      	beq.n	800214a <HAL_GPIO_Init+0x236>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a55      	ldr	r2, [pc, #340]	@ (800224c <HAL_GPIO_Init+0x338>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d025      	beq.n	8002146 <HAL_GPIO_Init+0x232>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a54      	ldr	r2, [pc, #336]	@ (8002250 <HAL_GPIO_Init+0x33c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d01f      	beq.n	8002142 <HAL_GPIO_Init+0x22e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a53      	ldr	r2, [pc, #332]	@ (8002254 <HAL_GPIO_Init+0x340>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d019      	beq.n	800213e <HAL_GPIO_Init+0x22a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a52      	ldr	r2, [pc, #328]	@ (8002258 <HAL_GPIO_Init+0x344>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d013      	beq.n	800213a <HAL_GPIO_Init+0x226>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a51      	ldr	r2, [pc, #324]	@ (800225c <HAL_GPIO_Init+0x348>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00d      	beq.n	8002136 <HAL_GPIO_Init+0x222>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a50      	ldr	r2, [pc, #320]	@ (8002260 <HAL_GPIO_Init+0x34c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d007      	beq.n	8002132 <HAL_GPIO_Init+0x21e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4f      	ldr	r2, [pc, #316]	@ (8002264 <HAL_GPIO_Init+0x350>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d101      	bne.n	800212e <HAL_GPIO_Init+0x21a>
 800212a:	2309      	movs	r3, #9
 800212c:	e012      	b.n	8002154 <HAL_GPIO_Init+0x240>
 800212e:	230a      	movs	r3, #10
 8002130:	e010      	b.n	8002154 <HAL_GPIO_Init+0x240>
 8002132:	2308      	movs	r3, #8
 8002134:	e00e      	b.n	8002154 <HAL_GPIO_Init+0x240>
 8002136:	2307      	movs	r3, #7
 8002138:	e00c      	b.n	8002154 <HAL_GPIO_Init+0x240>
 800213a:	2306      	movs	r3, #6
 800213c:	e00a      	b.n	8002154 <HAL_GPIO_Init+0x240>
 800213e:	2305      	movs	r3, #5
 8002140:	e008      	b.n	8002154 <HAL_GPIO_Init+0x240>
 8002142:	2304      	movs	r3, #4
 8002144:	e006      	b.n	8002154 <HAL_GPIO_Init+0x240>
 8002146:	2303      	movs	r3, #3
 8002148:	e004      	b.n	8002154 <HAL_GPIO_Init+0x240>
 800214a:	2302      	movs	r3, #2
 800214c:	e002      	b.n	8002154 <HAL_GPIO_Init+0x240>
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <HAL_GPIO_Init+0x240>
 8002152:	2300      	movs	r3, #0
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	f002 0203 	and.w	r2, r2, #3
 800215a:	0092      	lsls	r2, r2, #2
 800215c:	4093      	lsls	r3, r2
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002164:	4935      	ldr	r1, [pc, #212]	@ (800223c <HAL_GPIO_Init+0x328>)
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	089b      	lsrs	r3, r3, #2
 800216a:	3302      	adds	r3, #2
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002172:	4b3d      	ldr	r3, [pc, #244]	@ (8002268 <HAL_GPIO_Init+0x354>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002196:	4a34      	ldr	r2, [pc, #208]	@ (8002268 <HAL_GPIO_Init+0x354>)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800219c:	4b32      	ldr	r3, [pc, #200]	@ (8002268 <HAL_GPIO_Init+0x354>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021c0:	4a29      	ldr	r2, [pc, #164]	@ (8002268 <HAL_GPIO_Init+0x354>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021c6:	4b28      	ldr	r3, [pc, #160]	@ (8002268 <HAL_GPIO_Init+0x354>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002268 <HAL_GPIO_Init+0x354>)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002268 <HAL_GPIO_Init+0x354>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002214:	4a14      	ldr	r2, [pc, #80]	@ (8002268 <HAL_GPIO_Init+0x354>)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3301      	adds	r3, #1
 800221e:	61fb      	str	r3, [r7, #28]
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	2b0f      	cmp	r3, #15
 8002224:	f67f ae86 	bls.w	8001f34 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	3724      	adds	r7, #36	@ 0x24
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800
 800223c:	40013800 	.word	0x40013800
 8002240:	40020000 	.word	0x40020000
 8002244:	40020400 	.word	0x40020400
 8002248:	40020800 	.word	0x40020800
 800224c:	40020c00 	.word	0x40020c00
 8002250:	40021000 	.word	0x40021000
 8002254:	40021400 	.word	0x40021400
 8002258:	40021800 	.word	0x40021800
 800225c:	40021c00 	.word	0x40021c00
 8002260:	40022000 	.word	0x40022000
 8002264:	40022400 	.word	0x40022400
 8002268:	40013c00 	.word	0x40013c00

0800226c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	807b      	strh	r3, [r7, #2]
 8002278:	4613      	mov	r3, r2
 800227a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800227c:	787b      	ldrb	r3, [r7, #1]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002282:	887a      	ldrh	r2, [r7, #2]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002288:	e003      	b.n	8002292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800228a:	887b      	ldrh	r3, [r7, #2]
 800228c:	041a      	lsls	r2, r3, #16
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	619a      	str	r2, [r3, #24]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022a4:	4b05      	ldr	r3, [pc, #20]	@ (80022bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a04      	ldr	r2, [pc, #16]	@ (80022bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ae:	6013      	str	r3, [r2, #0]
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40007000 	.word	0x40007000

080022c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	4b23      	ldr	r3, [pc, #140]	@ (8002358 <HAL_PWREx_EnableOverDrive+0x98>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	4a22      	ldr	r2, [pc, #136]	@ (8002358 <HAL_PWREx_EnableOverDrive+0x98>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022d6:	4b20      	ldr	r3, [pc, #128]	@ (8002358 <HAL_PWREx_EnableOverDrive+0x98>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80022e2:	4b1e      	ldr	r3, [pc, #120]	@ (800235c <HAL_PWREx_EnableOverDrive+0x9c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a1d      	ldr	r2, [pc, #116]	@ (800235c <HAL_PWREx_EnableOverDrive+0x9c>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022ee:	f7ff fcfb 	bl	8001ce8 <HAL_GetTick>
 80022f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022f4:	e009      	b.n	800230a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022f6:	f7ff fcf7 	bl	8001ce8 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002304:	d901      	bls.n	800230a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e022      	b.n	8002350 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800230a:	4b14      	ldr	r3, [pc, #80]	@ (800235c <HAL_PWREx_EnableOverDrive+0x9c>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002316:	d1ee      	bne.n	80022f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002318:	4b10      	ldr	r3, [pc, #64]	@ (800235c <HAL_PWREx_EnableOverDrive+0x9c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a0f      	ldr	r2, [pc, #60]	@ (800235c <HAL_PWREx_EnableOverDrive+0x9c>)
 800231e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002322:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002324:	f7ff fce0 	bl	8001ce8 <HAL_GetTick>
 8002328:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800232a:	e009      	b.n	8002340 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800232c:	f7ff fcdc 	bl	8001ce8 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800233a:	d901      	bls.n	8002340 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e007      	b.n	8002350 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002340:	4b06      	ldr	r3, [pc, #24]	@ (800235c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002348:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800234c:	d1ee      	bne.n	800232c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40023800 	.word	0x40023800
 800235c:	40007000 	.word	0x40007000

08002360 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002368:	2300      	movs	r3, #0
 800236a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e29b      	b.n	80028ae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 8087 	beq.w	8002492 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002384:	4b96      	ldr	r3, [pc, #600]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	2b04      	cmp	r3, #4
 800238e:	d00c      	beq.n	80023aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002390:	4b93      	ldr	r3, [pc, #588]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 030c 	and.w	r3, r3, #12
 8002398:	2b08      	cmp	r3, #8
 800239a:	d112      	bne.n	80023c2 <HAL_RCC_OscConfig+0x62>
 800239c:	4b90      	ldr	r3, [pc, #576]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023a8:	d10b      	bne.n	80023c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023aa:	4b8d      	ldr	r3, [pc, #564]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d06c      	beq.n	8002490 <HAL_RCC_OscConfig+0x130>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d168      	bne.n	8002490 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e275      	b.n	80028ae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023ca:	d106      	bne.n	80023da <HAL_RCC_OscConfig+0x7a>
 80023cc:	4b84      	ldr	r3, [pc, #528]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a83      	ldr	r2, [pc, #524]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 80023d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	e02e      	b.n	8002438 <HAL_RCC_OscConfig+0xd8>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10c      	bne.n	80023fc <HAL_RCC_OscConfig+0x9c>
 80023e2:	4b7f      	ldr	r3, [pc, #508]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a7e      	ldr	r2, [pc, #504]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 80023e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	4b7c      	ldr	r3, [pc, #496]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a7b      	ldr	r2, [pc, #492]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 80023f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	e01d      	b.n	8002438 <HAL_RCC_OscConfig+0xd8>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002404:	d10c      	bne.n	8002420 <HAL_RCC_OscConfig+0xc0>
 8002406:	4b76      	ldr	r3, [pc, #472]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a75      	ldr	r2, [pc, #468]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 800240c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	4b73      	ldr	r3, [pc, #460]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a72      	ldr	r2, [pc, #456]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 8002418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	e00b      	b.n	8002438 <HAL_RCC_OscConfig+0xd8>
 8002420:	4b6f      	ldr	r3, [pc, #444]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a6e      	ldr	r2, [pc, #440]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 8002426:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	4b6c      	ldr	r3, [pc, #432]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a6b      	ldr	r2, [pc, #428]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 8002432:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d013      	beq.n	8002468 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7ff fc52 	bl	8001ce8 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002448:	f7ff fc4e 	bl	8001ce8 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	@ 0x64
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e229      	b.n	80028ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245a:	4b61      	ldr	r3, [pc, #388]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0xe8>
 8002466:	e014      	b.n	8002492 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7ff fc3e 	bl	8001ce8 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002470:	f7ff fc3a 	bl	8001ce8 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b64      	cmp	r3, #100	@ 0x64
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e215      	b.n	80028ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002482:	4b57      	ldr	r3, [pc, #348]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x110>
 800248e:	e000      	b.n	8002492 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d069      	beq.n	8002572 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800249e:	4b50      	ldr	r3, [pc, #320]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00b      	beq.n	80024c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024aa:	4b4d      	ldr	r3, [pc, #308]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d11c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x190>
 80024b6:	4b4a      	ldr	r3, [pc, #296]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d116      	bne.n	80024f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c2:	4b47      	ldr	r3, [pc, #284]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d005      	beq.n	80024da <HAL_RCC_OscConfig+0x17a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d001      	beq.n	80024da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e1e9      	b.n	80028ae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024da:	4b41      	ldr	r3, [pc, #260]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	493d      	ldr	r1, [pc, #244]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ee:	e040      	b.n	8002572 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d023      	beq.n	8002540 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f8:	4b39      	ldr	r3, [pc, #228]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a38      	ldr	r2, [pc, #224]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7ff fbf0 	bl	8001ce8 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800250c:	f7ff fbec 	bl	8001ce8 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e1c7      	b.n	80028ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251e:	4b30      	ldr	r3, [pc, #192]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252a:	4b2d      	ldr	r3, [pc, #180]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4929      	ldr	r1, [pc, #164]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]
 800253e:	e018      	b.n	8002572 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002540:	4b27      	ldr	r3, [pc, #156]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a26      	ldr	r2, [pc, #152]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 8002546:	f023 0301 	bic.w	r3, r3, #1
 800254a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7ff fbcc 	bl	8001ce8 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002554:	f7ff fbc8 	bl	8001ce8 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e1a3      	b.n	80028ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002566:	4b1e      	ldr	r3, [pc, #120]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d038      	beq.n	80025f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d019      	beq.n	80025ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002586:	4b16      	ldr	r3, [pc, #88]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 8002588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800258a:	4a15      	ldr	r2, [pc, #84]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002592:	f7ff fba9 	bl	8001ce8 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800259a:	f7ff fba5 	bl	8001ce8 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e180      	b.n	80028ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ac:	4b0c      	ldr	r3, [pc, #48]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 80025ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x23a>
 80025b8:	e01a      	b.n	80025f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ba:	4b09      	ldr	r3, [pc, #36]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 80025bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025be:	4a08      	ldr	r2, [pc, #32]	@ (80025e0 <HAL_RCC_OscConfig+0x280>)
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c6:	f7ff fb8f 	bl	8001ce8 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025cc:	e00a      	b.n	80025e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ce:	f7ff fb8b 	bl	8001ce8 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d903      	bls.n	80025e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e166      	b.n	80028ae <HAL_RCC_OscConfig+0x54e>
 80025e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e4:	4b92      	ldr	r3, [pc, #584]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 80025e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1ee      	bne.n	80025ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80a4 	beq.w	8002746 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025fe:	4b8c      	ldr	r3, [pc, #560]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10d      	bne.n	8002626 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800260a:	4b89      	ldr	r3, [pc, #548]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260e:	4a88      	ldr	r2, [pc, #544]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 8002610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002614:	6413      	str	r3, [r2, #64]	@ 0x40
 8002616:	4b86      	ldr	r3, [pc, #536]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002622:	2301      	movs	r3, #1
 8002624:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002626:	4b83      	ldr	r3, [pc, #524]	@ (8002834 <HAL_RCC_OscConfig+0x4d4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262e:	2b00      	cmp	r3, #0
 8002630:	d118      	bne.n	8002664 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002632:	4b80      	ldr	r3, [pc, #512]	@ (8002834 <HAL_RCC_OscConfig+0x4d4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a7f      	ldr	r2, [pc, #508]	@ (8002834 <HAL_RCC_OscConfig+0x4d4>)
 8002638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800263e:	f7ff fb53 	bl	8001ce8 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002646:	f7ff fb4f 	bl	8001ce8 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b64      	cmp	r3, #100	@ 0x64
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e12a      	b.n	80028ae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002658:	4b76      	ldr	r3, [pc, #472]	@ (8002834 <HAL_RCC_OscConfig+0x4d4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d106      	bne.n	800267a <HAL_RCC_OscConfig+0x31a>
 800266c:	4b70      	ldr	r3, [pc, #448]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 800266e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002670:	4a6f      	ldr	r2, [pc, #444]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	6713      	str	r3, [r2, #112]	@ 0x70
 8002678:	e02d      	b.n	80026d6 <HAL_RCC_OscConfig+0x376>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10c      	bne.n	800269c <HAL_RCC_OscConfig+0x33c>
 8002682:	4b6b      	ldr	r3, [pc, #428]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 8002684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002686:	4a6a      	ldr	r2, [pc, #424]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 8002688:	f023 0301 	bic.w	r3, r3, #1
 800268c:	6713      	str	r3, [r2, #112]	@ 0x70
 800268e:	4b68      	ldr	r3, [pc, #416]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 8002690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002692:	4a67      	ldr	r2, [pc, #412]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 8002694:	f023 0304 	bic.w	r3, r3, #4
 8002698:	6713      	str	r3, [r2, #112]	@ 0x70
 800269a:	e01c      	b.n	80026d6 <HAL_RCC_OscConfig+0x376>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b05      	cmp	r3, #5
 80026a2:	d10c      	bne.n	80026be <HAL_RCC_OscConfig+0x35e>
 80026a4:	4b62      	ldr	r3, [pc, #392]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a8:	4a61      	ldr	r2, [pc, #388]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 80026aa:	f043 0304 	orr.w	r3, r3, #4
 80026ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80026b0:	4b5f      	ldr	r3, [pc, #380]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 80026b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b4:	4a5e      	ldr	r2, [pc, #376]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80026bc:	e00b      	b.n	80026d6 <HAL_RCC_OscConfig+0x376>
 80026be:	4b5c      	ldr	r3, [pc, #368]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 80026c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 80026c4:	f023 0301 	bic.w	r3, r3, #1
 80026c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ca:	4b59      	ldr	r3, [pc, #356]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 80026cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ce:	4a58      	ldr	r2, [pc, #352]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 80026d0:	f023 0304 	bic.w	r3, r3, #4
 80026d4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d015      	beq.n	800270a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026de:	f7ff fb03 	bl	8001ce8 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e4:	e00a      	b.n	80026fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e6:	f7ff faff 	bl	8001ce8 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e0d8      	b.n	80028ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fc:	4b4c      	ldr	r3, [pc, #304]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0ee      	beq.n	80026e6 <HAL_RCC_OscConfig+0x386>
 8002708:	e014      	b.n	8002734 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270a:	f7ff faed 	bl	8001ce8 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002710:	e00a      	b.n	8002728 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002712:	f7ff fae9 	bl	8001ce8 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002720:	4293      	cmp	r3, r2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e0c2      	b.n	80028ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002728:	4b41      	ldr	r3, [pc, #260]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 800272a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1ee      	bne.n	8002712 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002734:	7dfb      	ldrb	r3, [r7, #23]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d105      	bne.n	8002746 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800273a:	4b3d      	ldr	r3, [pc, #244]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	4a3c      	ldr	r2, [pc, #240]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 8002740:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002744:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 80ae 	beq.w	80028ac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002750:	4b37      	ldr	r3, [pc, #220]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 030c 	and.w	r3, r3, #12
 8002758:	2b08      	cmp	r3, #8
 800275a:	d06d      	beq.n	8002838 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d14b      	bne.n	80027fc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002764:	4b32      	ldr	r3, [pc, #200]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a31      	ldr	r2, [pc, #196]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 800276a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800276e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7ff faba 	bl	8001ce8 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002778:	f7ff fab6 	bl	8001ce8 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e091      	b.n	80028ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278a:	4b29      	ldr	r3, [pc, #164]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69da      	ldr	r2, [r3, #28]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a4:	019b      	lsls	r3, r3, #6
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ac:	085b      	lsrs	r3, r3, #1
 80027ae:	3b01      	subs	r3, #1
 80027b0:	041b      	lsls	r3, r3, #16
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b8:	061b      	lsls	r3, r3, #24
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c0:	071b      	lsls	r3, r3, #28
 80027c2:	491b      	ldr	r1, [pc, #108]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027c8:	4b19      	ldr	r3, [pc, #100]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a18      	ldr	r2, [pc, #96]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 80027ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7ff fa88 	bl	8001ce8 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027dc:	f7ff fa84 	bl	8001ce8 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e05f      	b.n	80028ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ee:	4b10      	ldr	r3, [pc, #64]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x47c>
 80027fa:	e057      	b.n	80028ac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0b      	ldr	r2, [pc, #44]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 8002802:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7ff fa6e 	bl	8001ce8 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002810:	f7ff fa6a 	bl	8001ce8 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e045      	b.n	80028ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002822:	4b03      	ldr	r3, [pc, #12]	@ (8002830 <HAL_RCC_OscConfig+0x4d0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x4b0>
 800282e:	e03d      	b.n	80028ac <HAL_RCC_OscConfig+0x54c>
 8002830:	40023800 	.word	0x40023800
 8002834:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002838:	4b1f      	ldr	r3, [pc, #124]	@ (80028b8 <HAL_RCC_OscConfig+0x558>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d030      	beq.n	80028a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002850:	429a      	cmp	r2, r3
 8002852:	d129      	bne.n	80028a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285e:	429a      	cmp	r2, r3
 8002860:	d122      	bne.n	80028a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002868:	4013      	ands	r3, r2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800286e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002870:	4293      	cmp	r3, r2
 8002872:	d119      	bne.n	80028a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287e:	085b      	lsrs	r3, r3, #1
 8002880:	3b01      	subs	r3, #1
 8002882:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d10f      	bne.n	80028a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002892:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002894:	429a      	cmp	r2, r3
 8002896:	d107      	bne.n	80028a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d001      	beq.n	80028ac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800

080028bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0d0      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d910      	bls.n	8002904 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e2:	4b67      	ldr	r3, [pc, #412]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f023 020f 	bic.w	r2, r3, #15
 80028ea:	4965      	ldr	r1, [pc, #404]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b63      	ldr	r3, [pc, #396]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0b8      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d020      	beq.n	8002952 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800291c:	4b59      	ldr	r3, [pc, #356]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	4a58      	ldr	r2, [pc, #352]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 8002922:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002926:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002934:	4b53      	ldr	r3, [pc, #332]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	4a52      	ldr	r2, [pc, #328]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 800293a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800293e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002940:	4b50      	ldr	r3, [pc, #320]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	494d      	ldr	r1, [pc, #308]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 800294e:	4313      	orrs	r3, r2
 8002950:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d040      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d107      	bne.n	8002976 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	4b47      	ldr	r3, [pc, #284]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d115      	bne.n	800299e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e07f      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d107      	bne.n	800298e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297e:	4b41      	ldr	r3, [pc, #260]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e073      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e06b      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299e:	4b39      	ldr	r3, [pc, #228]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f023 0203 	bic.w	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4936      	ldr	r1, [pc, #216]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b0:	f7ff f99a 	bl	8001ce8 <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b8:	f7ff f996 	bl	8001ce8 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e053      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 020c 	and.w	r2, r3, #12
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	429a      	cmp	r2, r3
 80029de:	d1eb      	bne.n	80029b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029e0:	4b27      	ldr	r3, [pc, #156]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 030f 	and.w	r3, r3, #15
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d210      	bcs.n	8002a10 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b24      	ldr	r3, [pc, #144]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 020f 	bic.w	r2, r3, #15
 80029f6:	4922      	ldr	r1, [pc, #136]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fe:	4b20      	ldr	r3, [pc, #128]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e032      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a1c:	4b19      	ldr	r3, [pc, #100]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4916      	ldr	r1, [pc, #88]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d009      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a3a:	4b12      	ldr	r3, [pc, #72]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	490e      	ldr	r1, [pc, #56]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a4e:	f000 f821 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8002a52:	4602      	mov	r2, r0
 8002a54:	4b0b      	ldr	r3, [pc, #44]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	490a      	ldr	r1, [pc, #40]	@ (8002a88 <HAL_RCC_ClockConfig+0x1cc>)
 8002a60:	5ccb      	ldrb	r3, [r1, r3]
 8002a62:	fa22 f303 	lsr.w	r3, r2, r3
 8002a66:	4a09      	ldr	r2, [pc, #36]	@ (8002a8c <HAL_RCC_ClockConfig+0x1d0>)
 8002a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a6a:	4b09      	ldr	r3, [pc, #36]	@ (8002a90 <HAL_RCC_ClockConfig+0x1d4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff f8f6 	bl	8001c60 <HAL_InitTick>

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023c00 	.word	0x40023c00
 8002a84:	40023800 	.word	0x40023800
 8002a88:	08007650 	.word	0x08007650
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	20000008 	.word	0x20000008

08002a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a98:	b094      	sub	sp, #80	@ 0x50
 8002a9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aac:	4b79      	ldr	r3, [pc, #484]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 030c 	and.w	r3, r3, #12
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d00d      	beq.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	f200 80e1 	bhi.w	8002c80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d003      	beq.n	8002ace <HAL_RCC_GetSysClockFreq+0x3a>
 8002ac6:	e0db      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ac8:	4b73      	ldr	r3, [pc, #460]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x204>)
 8002aca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002acc:	e0db      	b.n	8002c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ace:	4b73      	ldr	r3, [pc, #460]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x208>)
 8002ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ad2:	e0d8      	b.n	8002c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ad4:	4b6f      	ldr	r3, [pc, #444]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002adc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002ade:	4b6d      	ldr	r3, [pc, #436]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d063      	beq.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aea:	4b6a      	ldr	r3, [pc, #424]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	099b      	lsrs	r3, r3, #6
 8002af0:	2200      	movs	r2, #0
 8002af2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002af4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002afc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002afe:	2300      	movs	r3, #0
 8002b00:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b06:	4622      	mov	r2, r4
 8002b08:	462b      	mov	r3, r5
 8002b0a:	f04f 0000 	mov.w	r0, #0
 8002b0e:	f04f 0100 	mov.w	r1, #0
 8002b12:	0159      	lsls	r1, r3, #5
 8002b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b18:	0150      	lsls	r0, r2, #5
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4621      	mov	r1, r4
 8002b20:	1a51      	subs	r1, r2, r1
 8002b22:	6139      	str	r1, [r7, #16]
 8002b24:	4629      	mov	r1, r5
 8002b26:	eb63 0301 	sbc.w	r3, r3, r1
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b38:	4659      	mov	r1, fp
 8002b3a:	018b      	lsls	r3, r1, #6
 8002b3c:	4651      	mov	r1, sl
 8002b3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b42:	4651      	mov	r1, sl
 8002b44:	018a      	lsls	r2, r1, #6
 8002b46:	4651      	mov	r1, sl
 8002b48:	ebb2 0801 	subs.w	r8, r2, r1
 8002b4c:	4659      	mov	r1, fp
 8002b4e:	eb63 0901 	sbc.w	r9, r3, r1
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b66:	4690      	mov	r8, r2
 8002b68:	4699      	mov	r9, r3
 8002b6a:	4623      	mov	r3, r4
 8002b6c:	eb18 0303 	adds.w	r3, r8, r3
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	462b      	mov	r3, r5
 8002b74:	eb49 0303 	adc.w	r3, r9, r3
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b86:	4629      	mov	r1, r5
 8002b88:	024b      	lsls	r3, r1, #9
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b90:	4621      	mov	r1, r4
 8002b92:	024a      	lsls	r2, r1, #9
 8002b94:	4610      	mov	r0, r2
 8002b96:	4619      	mov	r1, r3
 8002b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ba0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ba4:	f7fd fba4 	bl	80002f0 <__aeabi_uldivmod>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4613      	mov	r3, r2
 8002bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bb0:	e058      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb2:	4b38      	ldr	r3, [pc, #224]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	099b      	lsrs	r3, r3, #6
 8002bb8:	2200      	movs	r2, #0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bc2:	623b      	str	r3, [r7, #32]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bcc:	4642      	mov	r2, r8
 8002bce:	464b      	mov	r3, r9
 8002bd0:	f04f 0000 	mov.w	r0, #0
 8002bd4:	f04f 0100 	mov.w	r1, #0
 8002bd8:	0159      	lsls	r1, r3, #5
 8002bda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bde:	0150      	lsls	r0, r2, #5
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4641      	mov	r1, r8
 8002be6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bea:	4649      	mov	r1, r9
 8002bec:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c04:	ebb2 040a 	subs.w	r4, r2, sl
 8002c08:	eb63 050b 	sbc.w	r5, r3, fp
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	00eb      	lsls	r3, r5, #3
 8002c16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c1a:	00e2      	lsls	r2, r4, #3
 8002c1c:	4614      	mov	r4, r2
 8002c1e:	461d      	mov	r5, r3
 8002c20:	4643      	mov	r3, r8
 8002c22:	18e3      	adds	r3, r4, r3
 8002c24:	603b      	str	r3, [r7, #0]
 8002c26:	464b      	mov	r3, r9
 8002c28:	eb45 0303 	adc.w	r3, r5, r3
 8002c2c:	607b      	str	r3, [r7, #4]
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c3a:	4629      	mov	r1, r5
 8002c3c:	028b      	lsls	r3, r1, #10
 8002c3e:	4621      	mov	r1, r4
 8002c40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c44:	4621      	mov	r1, r4
 8002c46:	028a      	lsls	r2, r1, #10
 8002c48:	4610      	mov	r0, r2
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c4e:	2200      	movs	r2, #0
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	61fa      	str	r2, [r7, #28]
 8002c54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c58:	f7fd fb4a 	bl	80002f0 <__aeabi_uldivmod>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4613      	mov	r3, r2
 8002c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c64:	4b0b      	ldr	r3, [pc, #44]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	0c1b      	lsrs	r3, r3, #16
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	3301      	adds	r3, #1
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002c74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c7e:	e002      	b.n	8002c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c80:	4b05      	ldr	r3, [pc, #20]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3750      	adds	r7, #80	@ 0x50
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c92:	bf00      	nop
 8002c94:	40023800 	.word	0x40023800
 8002c98:	00f42400 	.word	0x00f42400
 8002c9c:	007a1200 	.word	0x007a1200

08002ca0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca4:	4b03      	ldr	r3, [pc, #12]	@ (8002cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	20000000 	.word	0x20000000

08002cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cbc:	f7ff fff0 	bl	8002ca0 <HAL_RCC_GetHCLKFreq>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	4b05      	ldr	r3, [pc, #20]	@ (8002cd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	0a9b      	lsrs	r3, r3, #10
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	4903      	ldr	r1, [pc, #12]	@ (8002cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cce:	5ccb      	ldrb	r3, [r1, r3]
 8002cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	08007660 	.word	0x08007660

08002ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ce4:	f7ff ffdc 	bl	8002ca0 <HAL_RCC_GetHCLKFreq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b05      	ldr	r3, [pc, #20]	@ (8002d00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	0b5b      	lsrs	r3, r3, #13
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4903      	ldr	r1, [pc, #12]	@ (8002d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cf6:	5ccb      	ldrb	r3, [r1, r3]
 8002cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40023800 	.word	0x40023800
 8002d04:	08007660 	.word	0x08007660

08002d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d012      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d30:	4b69      	ldr	r3, [pc, #420]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4a68      	ldr	r2, [pc, #416]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d36:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002d3a:	6093      	str	r3, [r2, #8]
 8002d3c:	4b66      	ldr	r3, [pc, #408]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d44:	4964      	ldr	r1, [pc, #400]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d52:	2301      	movs	r3, #1
 8002d54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d017      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d62:	4b5d      	ldr	r3, [pc, #372]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d68:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d70:	4959      	ldr	r1, [pc, #356]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d80:	d101      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d82:	2301      	movs	r3, #1
 8002d84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d017      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d9e:	4b4e      	ldr	r3, [pc, #312]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002da4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dac:	494a      	ldr	r1, [pc, #296]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 808b 	beq.w	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dec:	4b3a      	ldr	r3, [pc, #232]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df0:	4a39      	ldr	r2, [pc, #228]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002df6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002df8:	4b37      	ldr	r3, [pc, #220]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e04:	4b35      	ldr	r3, [pc, #212]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a34      	ldr	r2, [pc, #208]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e10:	f7fe ff6a 	bl	8001ce8 <HAL_GetTick>
 8002e14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e18:	f7fe ff66 	bl	8001ce8 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b64      	cmp	r3, #100	@ 0x64
 8002e24:	d901      	bls.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e38f      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e36:	4b28      	ldr	r3, [pc, #160]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d035      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d02e      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e54:	4b20      	ldr	r3, [pc, #128]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e62:	4a1d      	ldr	r2, [pc, #116]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e68:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e74:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e76:	4a18      	ldr	r2, [pc, #96]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e7c:	4b16      	ldr	r3, [pc, #88]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d114      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fe ff2e 	bl	8001ce8 <HAL_GetTick>
 8002e8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e90:	f7fe ff2a 	bl	8001ce8 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e351      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0ee      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ebe:	d111      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ec0:	4b05      	ldr	r3, [pc, #20]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ecc:	4b04      	ldr	r3, [pc, #16]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ece:	400b      	ands	r3, r1
 8002ed0:	4901      	ldr	r1, [pc, #4]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	608b      	str	r3, [r1, #8]
 8002ed6:	e00b      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40007000 	.word	0x40007000
 8002ee0:	0ffffcff 	.word	0x0ffffcff
 8002ee4:	4bac      	ldr	r3, [pc, #688]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	4aab      	ldr	r2, [pc, #684]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002eee:	6093      	str	r3, [r2, #8]
 8002ef0:	4ba9      	ldr	r3, [pc, #676]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efc:	49a6      	ldr	r1, [pc, #664]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d010      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f0e:	4ba2      	ldr	r3, [pc, #648]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f14:	4aa0      	ldr	r2, [pc, #640]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f1e:	4b9e      	ldr	r3, [pc, #632]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f20:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f28:	499b      	ldr	r1, [pc, #620]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00a      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f3c:	4b96      	ldr	r3, [pc, #600]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f42:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f4a:	4993      	ldr	r1, [pc, #588]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f5e:	4b8e      	ldr	r3, [pc, #568]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f64:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f6c:	498a      	ldr	r1, [pc, #552]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00a      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f80:	4b85      	ldr	r3, [pc, #532]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f8e:	4982      	ldr	r1, [pc, #520]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fa2:	4b7d      	ldr	r3, [pc, #500]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fa8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb0:	4979      	ldr	r1, [pc, #484]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fc4:	4b74      	ldr	r3, [pc, #464]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fca:	f023 0203 	bic.w	r2, r3, #3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd2:	4971      	ldr	r1, [pc, #452]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fe6:	4b6c      	ldr	r3, [pc, #432]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fec:	f023 020c 	bic.w	r2, r3, #12
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff4:	4968      	ldr	r1, [pc, #416]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003008:	4b63      	ldr	r3, [pc, #396]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800300e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003016:	4960      	ldr	r1, [pc, #384]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800302a:	4b5b      	ldr	r3, [pc, #364]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003030:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003038:	4957      	ldr	r1, [pc, #348]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800304c:	4b52      	ldr	r3, [pc, #328]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003052:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800305a:	494f      	ldr	r1, [pc, #316]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800306e:	4b4a      	ldr	r3, [pc, #296]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003074:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800307c:	4946      	ldr	r1, [pc, #280]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003090:	4b41      	ldr	r3, [pc, #260]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003096:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309e:	493e      	ldr	r1, [pc, #248]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80030b2:	4b39      	ldr	r3, [pc, #228]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030c0:	4935      	ldr	r1, [pc, #212]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030d4:	4b30      	ldr	r3, [pc, #192]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030da:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030e2:	492d      	ldr	r1, [pc, #180]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d011      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030f6:	4b28      	ldr	r3, [pc, #160]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030fc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003104:	4924      	ldr	r1, [pc, #144]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003110:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003114:	d101      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003116:	2301      	movs	r3, #1
 8003118:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003126:	2301      	movs	r3, #1
 8003128:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003136:	4b18      	ldr	r3, [pc, #96]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003144:	4914      	ldr	r1, [pc, #80]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00b      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003158:	4b0f      	ldr	r3, [pc, #60]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800315a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003168:	490b      	ldr	r1, [pc, #44]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00f      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800317c:	4b06      	ldr	r3, [pc, #24]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800317e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003182:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800318c:	4902      	ldr	r1, [pc, #8]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003194:	e002      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003196:	bf00      	nop
 8003198:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00b      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031a8:	4b8a      	ldr	r3, [pc, #552]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b8:	4986      	ldr	r1, [pc, #536]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00b      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80031cc:	4b81      	ldr	r3, [pc, #516]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031d2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031dc:	497d      	ldr	r1, [pc, #500]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d006      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 80d6 	beq.w	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031f8:	4b76      	ldr	r3, [pc, #472]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a75      	ldr	r2, [pc, #468]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003202:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003204:	f7fe fd70 	bl	8001ce8 <HAL_GetTick>
 8003208:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800320a:	e008      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800320c:	f7fe fd6c 	bl	8001ce8 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b64      	cmp	r3, #100	@ 0x64
 8003218:	d901      	bls.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e195      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800321e:	4b6d      	ldr	r3, [pc, #436]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d021      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800323a:	2b00      	cmp	r3, #0
 800323c:	d11d      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800323e:	4b65      	ldr	r3, [pc, #404]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003240:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003244:	0c1b      	lsrs	r3, r3, #16
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800324c:	4b61      	ldr	r3, [pc, #388]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800324e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003252:	0e1b      	lsrs	r3, r3, #24
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	019a      	lsls	r2, r3, #6
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	041b      	lsls	r3, r3, #16
 8003264:	431a      	orrs	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	061b      	lsls	r3, r3, #24
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	071b      	lsls	r3, r3, #28
 8003272:	4958      	ldr	r1, [pc, #352]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d004      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800328e:	d00a      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003298:	2b00      	cmp	r3, #0
 800329a:	d02e      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032a4:	d129      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032a6:	4b4b      	ldr	r3, [pc, #300]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032ac:	0c1b      	lsrs	r3, r3, #16
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032b4:	4b47      	ldr	r3, [pc, #284]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032ba:	0f1b      	lsrs	r3, r3, #28
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	019a      	lsls	r2, r3, #6
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	041b      	lsls	r3, r3, #16
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	061b      	lsls	r3, r3, #24
 80032d4:	431a      	orrs	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	071b      	lsls	r3, r3, #28
 80032da:	493e      	ldr	r1, [pc, #248]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80032e2:	4b3c      	ldr	r3, [pc, #240]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032e8:	f023 021f 	bic.w	r2, r3, #31
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	3b01      	subs	r3, #1
 80032f2:	4938      	ldr	r1, [pc, #224]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d01d      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003306:	4b33      	ldr	r3, [pc, #204]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003308:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800330c:	0e1b      	lsrs	r3, r3, #24
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003314:	4b2f      	ldr	r3, [pc, #188]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003316:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800331a:	0f1b      	lsrs	r3, r3, #28
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	019a      	lsls	r2, r3, #6
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	041b      	lsls	r3, r3, #16
 800332e:	431a      	orrs	r2, r3
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	061b      	lsls	r3, r3, #24
 8003334:	431a      	orrs	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	071b      	lsls	r3, r3, #28
 800333a:	4926      	ldr	r1, [pc, #152]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d011      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	019a      	lsls	r2, r3, #6
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	041b      	lsls	r3, r3, #16
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	061b      	lsls	r3, r3, #24
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	071b      	lsls	r3, r3, #28
 800336a:	491a      	ldr	r1, [pc, #104]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003372:	4b18      	ldr	r3, [pc, #96]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a17      	ldr	r2, [pc, #92]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003378:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800337c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800337e:	f7fe fcb3 	bl	8001ce8 <HAL_GetTick>
 8003382:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003384:	e008      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003386:	f7fe fcaf 	bl	8001ce8 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b64      	cmp	r3, #100	@ 0x64
 8003392:	d901      	bls.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e0d8      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003398:	4b0e      	ldr	r3, [pc, #56]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f0      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	f040 80ce 	bne.w	8003548 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80033ac:	4b09      	ldr	r3, [pc, #36]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a08      	ldr	r2, [pc, #32]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b8:	f7fe fc96 	bl	8001ce8 <HAL_GetTick>
 80033bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033be:	e00b      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033c0:	f7fe fc92 	bl	8001ce8 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b64      	cmp	r3, #100	@ 0x64
 80033cc:	d904      	bls.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e0bb      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033d8:	4b5e      	ldr	r3, [pc, #376]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033e4:	d0ec      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d009      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003402:	2b00      	cmp	r3, #0
 8003404:	d02e      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	d12a      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800340e:	4b51      	ldr	r3, [pc, #324]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003414:	0c1b      	lsrs	r3, r3, #16
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800341c:	4b4d      	ldr	r3, [pc, #308]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800341e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003422:	0f1b      	lsrs	r3, r3, #28
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	019a      	lsls	r2, r3, #6
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	041b      	lsls	r3, r3, #16
 8003434:	431a      	orrs	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	061b      	lsls	r3, r3, #24
 800343c:	431a      	orrs	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	071b      	lsls	r3, r3, #28
 8003442:	4944      	ldr	r1, [pc, #272]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800344a:	4b42      	ldr	r3, [pc, #264]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800344c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003450:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003458:	3b01      	subs	r3, #1
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	493d      	ldr	r1, [pc, #244]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d022      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003474:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003478:	d11d      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800347a:	4b36      	ldr	r3, [pc, #216]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003480:	0e1b      	lsrs	r3, r3, #24
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003488:	4b32      	ldr	r3, [pc, #200]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800348e:	0f1b      	lsrs	r3, r3, #28
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	019a      	lsls	r2, r3, #6
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	041b      	lsls	r3, r3, #16
 80034a2:	431a      	orrs	r2, r3
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	061b      	lsls	r3, r3, #24
 80034a8:	431a      	orrs	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	071b      	lsls	r3, r3, #28
 80034ae:	4929      	ldr	r1, [pc, #164]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d028      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034c2:	4b24      	ldr	r3, [pc, #144]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c8:	0e1b      	lsrs	r3, r3, #24
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034d0:	4b20      	ldr	r3, [pc, #128]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d6:	0c1b      	lsrs	r3, r3, #16
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	019a      	lsls	r2, r3, #6
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	041b      	lsls	r3, r3, #16
 80034e8:	431a      	orrs	r2, r3
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	061b      	lsls	r3, r3, #24
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	071b      	lsls	r3, r3, #28
 80034f6:	4917      	ldr	r1, [pc, #92]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80034fe:	4b15      	ldr	r3, [pc, #84]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003500:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003504:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350c:	4911      	ldr	r1, [pc, #68]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003514:	4b0f      	ldr	r3, [pc, #60]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a0e      	ldr	r2, [pc, #56]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800351a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800351e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003520:	f7fe fbe2 	bl	8001ce8 <HAL_GetTick>
 8003524:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003526:	e008      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003528:	f7fe fbde 	bl	8001ce8 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b64      	cmp	r3, #100	@ 0x64
 8003534:	d901      	bls.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e007      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800353a:	4b06      	ldr	r3, [pc, #24]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003542:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003546:	d1ef      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3720      	adds	r7, #32
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40023800 	.word	0x40023800

08003558 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e01c      	b.n	80035a4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	795b      	ldrb	r3, [r3, #5]
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d105      	bne.n	8003580 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fd faf2 	bl	8000b64 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0204 	orr.w	r2, r2, #4
 8003594:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e09d      	b.n	80036fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d108      	bne.n	80035d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035ce:	d009      	beq.n	80035e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	61da      	str	r2, [r3, #28]
 80035d6:	e005      	b.n	80035e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7fd fb0e 	bl	8000c20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800361a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003624:	d902      	bls.n	800362c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	e002      	b.n	8003632 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800362c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003630:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800363a:	d007      	beq.n	800364c <HAL_SPI_Init+0xa0>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003644:	d002      	beq.n	800364c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800368e:	ea42 0103 	orr.w	r1, r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003696:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	0c1b      	lsrs	r3, r3, #16
 80036a8:	f003 0204 	and.w	r2, r3, #4
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b0:	f003 0310 	and.w	r3, r3, #16
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80036c8:	ea42 0103 	orr.w	r1, r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b088      	sub	sp, #32
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	603b      	str	r3, [r7, #0]
 800370e:	4613      	mov	r3, r2
 8003710:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_SPI_Transmit+0x22>
 8003720:	2302      	movs	r3, #2
 8003722:	e158      	b.n	80039d6 <HAL_SPI_Transmit+0x2d4>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800372c:	f7fe fadc 	bl	8001ce8 <HAL_GetTick>
 8003730:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b01      	cmp	r3, #1
 8003740:	d002      	beq.n	8003748 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003742:	2302      	movs	r3, #2
 8003744:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003746:	e13d      	b.n	80039c4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <HAL_SPI_Transmit+0x52>
 800374e:	88fb      	ldrh	r3, [r7, #6]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d102      	bne.n	800375a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003758:	e134      	b.n	80039c4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2203      	movs	r2, #3
 800375e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	88fa      	ldrh	r2, [r7, #6]
 8003772:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	88fa      	ldrh	r2, [r7, #6]
 8003778:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037a4:	d10f      	bne.n	80037c6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d0:	2b40      	cmp	r3, #64	@ 0x40
 80037d2:	d007      	beq.n	80037e4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037ec:	d94b      	bls.n	8003886 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <HAL_SPI_Transmit+0xfa>
 80037f6:	8afb      	ldrh	r3, [r7, #22]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d13e      	bne.n	800387a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003800:	881a      	ldrh	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380c:	1c9a      	adds	r2, r3, #2
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003820:	e02b      	b.n	800387a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b02      	cmp	r3, #2
 800382e:	d112      	bne.n	8003856 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003834:	881a      	ldrh	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003840:	1c9a      	adds	r2, r3, #2
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800384a:	b29b      	uxth	r3, r3
 800384c:	3b01      	subs	r3, #1
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003854:	e011      	b.n	800387a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003856:	f7fe fa47 	bl	8001ce8 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d803      	bhi.n	800386e <HAL_SPI_Transmit+0x16c>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386c:	d102      	bne.n	8003874 <HAL_SPI_Transmit+0x172>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d102      	bne.n	800387a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003878:	e0a4      	b.n	80039c4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1ce      	bne.n	8003822 <HAL_SPI_Transmit+0x120>
 8003884:	e07c      	b.n	8003980 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <HAL_SPI_Transmit+0x192>
 800388e:	8afb      	ldrh	r3, [r7, #22]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d170      	bne.n	8003976 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b01      	cmp	r3, #1
 800389c:	d912      	bls.n	80038c4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a2:	881a      	ldrh	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ae:	1c9a      	adds	r2, r3, #2
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b02      	subs	r3, #2
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038c2:	e058      	b.n	8003976 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	330c      	adds	r3, #12
 80038ce:	7812      	ldrb	r2, [r2, #0]
 80038d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80038ea:	e044      	b.n	8003976 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d12b      	bne.n	8003952 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2b01      	cmp	r3, #1
 8003902:	d912      	bls.n	800392a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003908:	881a      	ldrh	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003914:	1c9a      	adds	r2, r3, #2
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b02      	subs	r3, #2
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003928:	e025      	b.n	8003976 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	330c      	adds	r3, #12
 8003934:	7812      	ldrb	r2, [r2, #0]
 8003936:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003950:	e011      	b.n	8003976 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003952:	f7fe f9c9 	bl	8001ce8 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d803      	bhi.n	800396a <HAL_SPI_Transmit+0x268>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003968:	d102      	bne.n	8003970 <HAL_SPI_Transmit+0x26e>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d102      	bne.n	8003976 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003974:	e026      	b.n	80039c4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1b5      	bne.n	80038ec <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	6839      	ldr	r1, [r7, #0]
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 f945 	bl	8003c14 <SPI_EndRxTxTransaction>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10a      	bne.n	80039b4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	77fb      	strb	r3, [r7, #31]
 80039c0:	e000      	b.n	80039c4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80039c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80039d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3720      	adds	r7, #32
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039f0:	f7fe f97a 	bl	8001ce8 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	4413      	add	r3, r2
 80039fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a00:	f7fe f972 	bl	8001ce8 <HAL_GetTick>
 8003a04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a06:	4b39      	ldr	r3, [pc, #228]	@ (8003aec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	015b      	lsls	r3, r3, #5
 8003a0c:	0d1b      	lsrs	r3, r3, #20
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	fb02 f303 	mul.w	r3, r2, r3
 8003a14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a16:	e054      	b.n	8003ac2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1e:	d050      	beq.n	8003ac2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a20:	f7fe f962 	bl	8001ce8 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	69fa      	ldr	r2, [r7, #28]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d902      	bls.n	8003a36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d13d      	bne.n	8003ab2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a4e:	d111      	bne.n	8003a74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a58:	d004      	beq.n	8003a64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a62:	d107      	bne.n	8003a74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a7c:	d10f      	bne.n	8003a9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e017      	b.n	8003ae2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	4013      	ands	r3, r2
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	bf0c      	ite	eq
 8003ad2:	2301      	moveq	r3, #1
 8003ad4:	2300      	movne	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d19b      	bne.n	8003a18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3720      	adds	r7, #32
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20000000 	.word	0x20000000

08003af0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003afe:	f7fe f8f3 	bl	8001ce8 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b0e:	f7fe f8eb 	bl	8001ce8 <HAL_GetTick>
 8003b12:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b14:	4b3e      	ldr	r3, [pc, #248]	@ (8003c10 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	00da      	lsls	r2, r3, #3
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	0d1b      	lsrs	r3, r3, #20
 8003b24:	69fa      	ldr	r2, [r7, #28]
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b2c:	e062      	b.n	8003bf4 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003b34:	d109      	bne.n	8003b4a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d106      	bne.n	8003b4a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	330c      	adds	r3, #12
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003b48:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d050      	beq.n	8003bf4 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b52:	f7fe f8c9 	bl	8001ce8 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	69fa      	ldr	r2, [r7, #28]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d902      	bls.n	8003b68 <SPI_WaitFifoStateUntilTimeout+0x78>
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d13d      	bne.n	8003be4 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b80:	d111      	bne.n	8003ba6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b8a:	d004      	beq.n	8003b96 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b94:	d107      	bne.n	8003ba6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ba4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003baa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bae:	d10f      	bne.n	8003bd0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e010      	b.n	8003c06 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d194      	bne.n	8003b2e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3720      	adds	r7, #32
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000000 	.word	0x20000000

08003c14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f7ff ff5f 	bl	8003af0 <SPI_WaitFifoStateUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c3c:	f043 0220 	orr.w	r2, r3, #32
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e027      	b.n	8003c98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2180      	movs	r1, #128	@ 0x80
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f7ff fec4 	bl	80039e0 <SPI_WaitFlagStateUntilTimeout>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c62:	f043 0220 	orr.w	r2, r3, #32
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e014      	b.n	8003c98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f7ff ff38 	bl	8003af0 <SPI_WaitFifoStateUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c8a:	f043 0220 	orr.w	r2, r3, #32
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e000      	b.n	8003c98 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e049      	b.n	8003d46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d106      	bne.n	8003ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7fd f968 	bl	8000f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4610      	mov	r0, r2
 8003ce0:	f000 f8fc 	bl	8003edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_TIM_ConfigClockSource+0x18>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e0b3      	b.n	8003ed0 <HAL_TIM_ConfigClockSource+0x180>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4b55      	ldr	r3, [pc, #340]	@ (8003ed8 <HAL_TIM_ConfigClockSource+0x188>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d8e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003da0:	d03e      	beq.n	8003e20 <HAL_TIM_ConfigClockSource+0xd0>
 8003da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003da6:	f200 8087 	bhi.w	8003eb8 <HAL_TIM_ConfigClockSource+0x168>
 8003daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dae:	f000 8085 	beq.w	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003db6:	d87f      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x168>
 8003db8:	2b70      	cmp	r3, #112	@ 0x70
 8003dba:	d01a      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0xa2>
 8003dbc:	2b70      	cmp	r3, #112	@ 0x70
 8003dbe:	d87b      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x168>
 8003dc0:	2b60      	cmp	r3, #96	@ 0x60
 8003dc2:	d050      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x116>
 8003dc4:	2b60      	cmp	r3, #96	@ 0x60
 8003dc6:	d877      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x168>
 8003dc8:	2b50      	cmp	r3, #80	@ 0x50
 8003dca:	d03c      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0xf6>
 8003dcc:	2b50      	cmp	r3, #80	@ 0x50
 8003dce:	d873      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x168>
 8003dd0:	2b40      	cmp	r3, #64	@ 0x40
 8003dd2:	d058      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x136>
 8003dd4:	2b40      	cmp	r3, #64	@ 0x40
 8003dd6:	d86f      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x168>
 8003dd8:	2b30      	cmp	r3, #48	@ 0x30
 8003dda:	d064      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x156>
 8003ddc:	2b30      	cmp	r3, #48	@ 0x30
 8003dde:	d86b      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x168>
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d060      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x156>
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d867      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x168>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05c      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x156>
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d05a      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003df0:	e062      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6899      	ldr	r1, [r3, #8]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f000 f985 	bl	8004110 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e14:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	609a      	str	r2, [r3, #8]
      break;
 8003e1e:	e04e      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	6899      	ldr	r1, [r3, #8]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f000 f96e 	bl	8004110 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e42:	609a      	str	r2, [r3, #8]
      break;
 8003e44:	e03b      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6859      	ldr	r1, [r3, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	461a      	mov	r2, r3
 8003e54:	f000 f8e2 	bl	800401c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2150      	movs	r1, #80	@ 0x50
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 f93b 	bl	80040da <TIM_ITRx_SetConfig>
      break;
 8003e64:	e02b      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	6859      	ldr	r1, [r3, #4]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	461a      	mov	r2, r3
 8003e74:	f000 f901 	bl	800407a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2160      	movs	r1, #96	@ 0x60
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 f92b 	bl	80040da <TIM_ITRx_SetConfig>
      break;
 8003e84:	e01b      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	6859      	ldr	r1, [r3, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	461a      	mov	r2, r3
 8003e94:	f000 f8c2 	bl	800401c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2140      	movs	r1, #64	@ 0x40
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 f91b 	bl	80040da <TIM_ITRx_SetConfig>
      break;
 8003ea4:	e00b      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	f000 f912 	bl	80040da <TIM_ITRx_SetConfig>
        break;
 8003eb6:	e002      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003eb8:	bf00      	nop
 8003eba:	e000      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ebc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	fffeff88 	.word	0xfffeff88

08003edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a40      	ldr	r2, [pc, #256]	@ (8003ff0 <TIM_Base_SetConfig+0x114>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003efa:	d00f      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a3d      	ldr	r2, [pc, #244]	@ (8003ff4 <TIM_Base_SetConfig+0x118>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00b      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a3c      	ldr	r2, [pc, #240]	@ (8003ff8 <TIM_Base_SetConfig+0x11c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d007      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a3b      	ldr	r2, [pc, #236]	@ (8003ffc <TIM_Base_SetConfig+0x120>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d003      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a3a      	ldr	r2, [pc, #232]	@ (8004000 <TIM_Base_SetConfig+0x124>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d108      	bne.n	8003f2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a2f      	ldr	r2, [pc, #188]	@ (8003ff0 <TIM_Base_SetConfig+0x114>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d02b      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f3c:	d027      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a2c      	ldr	r2, [pc, #176]	@ (8003ff4 <TIM_Base_SetConfig+0x118>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d023      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a2b      	ldr	r2, [pc, #172]	@ (8003ff8 <TIM_Base_SetConfig+0x11c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d01f      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a2a      	ldr	r2, [pc, #168]	@ (8003ffc <TIM_Base_SetConfig+0x120>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d01b      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a29      	ldr	r2, [pc, #164]	@ (8004000 <TIM_Base_SetConfig+0x124>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d017      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a28      	ldr	r2, [pc, #160]	@ (8004004 <TIM_Base_SetConfig+0x128>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d013      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a27      	ldr	r2, [pc, #156]	@ (8004008 <TIM_Base_SetConfig+0x12c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00f      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a26      	ldr	r2, [pc, #152]	@ (800400c <TIM_Base_SetConfig+0x130>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00b      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a25      	ldr	r2, [pc, #148]	@ (8004010 <TIM_Base_SetConfig+0x134>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d007      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a24      	ldr	r2, [pc, #144]	@ (8004014 <TIM_Base_SetConfig+0x138>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d003      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a23      	ldr	r2, [pc, #140]	@ (8004018 <TIM_Base_SetConfig+0x13c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d108      	bne.n	8003fa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ff0 <TIM_Base_SetConfig+0x114>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_Base_SetConfig+0xf8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a0c      	ldr	r2, [pc, #48]	@ (8004000 <TIM_Base_SetConfig+0x124>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d103      	bne.n	8003fdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	615a      	str	r2, [r3, #20]
}
 8003fe2:	bf00      	nop
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40010000 	.word	0x40010000
 8003ff4:	40000400 	.word	0x40000400
 8003ff8:	40000800 	.word	0x40000800
 8003ffc:	40000c00 	.word	0x40000c00
 8004000:	40010400 	.word	0x40010400
 8004004:	40014000 	.word	0x40014000
 8004008:	40014400 	.word	0x40014400
 800400c:	40014800 	.word	0x40014800
 8004010:	40001800 	.word	0x40001800
 8004014:	40001c00 	.word	0x40001c00
 8004018:	40002000 	.word	0x40002000

0800401c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	f023 0201 	bic.w	r2, r3, #1
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f023 030a 	bic.w	r3, r3, #10
 8004058:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4313      	orrs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	621a      	str	r2, [r3, #32]
}
 800406e:	bf00      	nop
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800407a:	b480      	push	{r7}
 800407c:	b087      	sub	sp, #28
 800407e:	af00      	add	r7, sp, #0
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	f023 0210 	bic.w	r2, r3, #16
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	031b      	lsls	r3, r3, #12
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80040b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	621a      	str	r2, [r3, #32]
}
 80040ce:	bf00      	nop
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040da:	b480      	push	{r7}
 80040dc:	b085      	sub	sp, #20
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f043 0307 	orr.w	r3, r3, #7
 80040fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	609a      	str	r2, [r3, #8]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800412a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	021a      	lsls	r2, r3, #8
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	431a      	orrs	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4313      	orrs	r3, r2
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	609a      	str	r2, [r3, #8]
}
 8004144:	bf00      	nop
 8004146:	371c      	adds	r7, #28
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004164:	2302      	movs	r3, #2
 8004166:	e06d      	b.n	8004244 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a30      	ldr	r2, [pc, #192]	@ (8004250 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d004      	beq.n	800419c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a2f      	ldr	r2, [pc, #188]	@ (8004254 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d108      	bne.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80041a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4313      	orrs	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a20      	ldr	r2, [pc, #128]	@ (8004250 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d022      	beq.n	8004218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041da:	d01d      	beq.n	8004218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004258 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d018      	beq.n	8004218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a1c      	ldr	r2, [pc, #112]	@ (800425c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d013      	beq.n	8004218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004260 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00e      	beq.n	8004218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a15      	ldr	r2, [pc, #84]	@ (8004254 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d009      	beq.n	8004218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a16      	ldr	r2, [pc, #88]	@ (8004264 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d004      	beq.n	8004218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a15      	ldr	r2, [pc, #84]	@ (8004268 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d10c      	bne.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800421e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	4313      	orrs	r3, r2
 8004228:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	40010000 	.word	0x40010000
 8004254:	40010400 	.word	0x40010400
 8004258:	40000400 	.word	0x40000400
 800425c:	40000800 	.word	0x40000800
 8004260:	40000c00 	.word	0x40000c00
 8004264:	40014000 	.word	0x40014000
 8004268:	40001800 	.word	0x40001800

0800426c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e040      	b.n	8004300 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fc fed4 	bl	800103c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2224      	movs	r2, #36	@ 0x24
 8004298:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0201 	bic.w	r2, r2, #1
 80042a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f82c 	bl	8004308 <UART_SetConfig>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d101      	bne.n	80042ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e022      	b.n	8004300 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fa84 	bl	80047d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 fb0b 	bl	8004914 <UART_CheckIdleState>
 80042fe:	4603      	mov	r3, r0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	4313      	orrs	r3, r2
 800432a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4ba6      	ldr	r3, [pc, #664]	@ (80045cc <UART_SetConfig+0x2c4>)
 8004334:	4013      	ands	r3, r2
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	6979      	ldr	r1, [r7, #20]
 800433c:	430b      	orrs	r3, r1
 800433e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	430a      	orrs	r2, r1
 8004378:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a94      	ldr	r2, [pc, #592]	@ (80045d0 <UART_SetConfig+0x2c8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d120      	bne.n	80043c6 <UART_SetConfig+0xbe>
 8004384:	4b93      	ldr	r3, [pc, #588]	@ (80045d4 <UART_SetConfig+0x2cc>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	2b03      	cmp	r3, #3
 8004390:	d816      	bhi.n	80043c0 <UART_SetConfig+0xb8>
 8004392:	a201      	add	r2, pc, #4	@ (adr r2, 8004398 <UART_SetConfig+0x90>)
 8004394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004398:	080043a9 	.word	0x080043a9
 800439c:	080043b5 	.word	0x080043b5
 80043a0:	080043af 	.word	0x080043af
 80043a4:	080043bb 	.word	0x080043bb
 80043a8:	2301      	movs	r3, #1
 80043aa:	77fb      	strb	r3, [r7, #31]
 80043ac:	e150      	b.n	8004650 <UART_SetConfig+0x348>
 80043ae:	2302      	movs	r3, #2
 80043b0:	77fb      	strb	r3, [r7, #31]
 80043b2:	e14d      	b.n	8004650 <UART_SetConfig+0x348>
 80043b4:	2304      	movs	r3, #4
 80043b6:	77fb      	strb	r3, [r7, #31]
 80043b8:	e14a      	b.n	8004650 <UART_SetConfig+0x348>
 80043ba:	2308      	movs	r3, #8
 80043bc:	77fb      	strb	r3, [r7, #31]
 80043be:	e147      	b.n	8004650 <UART_SetConfig+0x348>
 80043c0:	2310      	movs	r3, #16
 80043c2:	77fb      	strb	r3, [r7, #31]
 80043c4:	e144      	b.n	8004650 <UART_SetConfig+0x348>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a83      	ldr	r2, [pc, #524]	@ (80045d8 <UART_SetConfig+0x2d0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d132      	bne.n	8004436 <UART_SetConfig+0x12e>
 80043d0:	4b80      	ldr	r3, [pc, #512]	@ (80045d4 <UART_SetConfig+0x2cc>)
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	2b0c      	cmp	r3, #12
 80043dc:	d828      	bhi.n	8004430 <UART_SetConfig+0x128>
 80043de:	a201      	add	r2, pc, #4	@ (adr r2, 80043e4 <UART_SetConfig+0xdc>)
 80043e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e4:	08004419 	.word	0x08004419
 80043e8:	08004431 	.word	0x08004431
 80043ec:	08004431 	.word	0x08004431
 80043f0:	08004431 	.word	0x08004431
 80043f4:	08004425 	.word	0x08004425
 80043f8:	08004431 	.word	0x08004431
 80043fc:	08004431 	.word	0x08004431
 8004400:	08004431 	.word	0x08004431
 8004404:	0800441f 	.word	0x0800441f
 8004408:	08004431 	.word	0x08004431
 800440c:	08004431 	.word	0x08004431
 8004410:	08004431 	.word	0x08004431
 8004414:	0800442b 	.word	0x0800442b
 8004418:	2300      	movs	r3, #0
 800441a:	77fb      	strb	r3, [r7, #31]
 800441c:	e118      	b.n	8004650 <UART_SetConfig+0x348>
 800441e:	2302      	movs	r3, #2
 8004420:	77fb      	strb	r3, [r7, #31]
 8004422:	e115      	b.n	8004650 <UART_SetConfig+0x348>
 8004424:	2304      	movs	r3, #4
 8004426:	77fb      	strb	r3, [r7, #31]
 8004428:	e112      	b.n	8004650 <UART_SetConfig+0x348>
 800442a:	2308      	movs	r3, #8
 800442c:	77fb      	strb	r3, [r7, #31]
 800442e:	e10f      	b.n	8004650 <UART_SetConfig+0x348>
 8004430:	2310      	movs	r3, #16
 8004432:	77fb      	strb	r3, [r7, #31]
 8004434:	e10c      	b.n	8004650 <UART_SetConfig+0x348>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a68      	ldr	r2, [pc, #416]	@ (80045dc <UART_SetConfig+0x2d4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d120      	bne.n	8004482 <UART_SetConfig+0x17a>
 8004440:	4b64      	ldr	r3, [pc, #400]	@ (80045d4 <UART_SetConfig+0x2cc>)
 8004442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004446:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800444a:	2b30      	cmp	r3, #48	@ 0x30
 800444c:	d013      	beq.n	8004476 <UART_SetConfig+0x16e>
 800444e:	2b30      	cmp	r3, #48	@ 0x30
 8004450:	d814      	bhi.n	800447c <UART_SetConfig+0x174>
 8004452:	2b20      	cmp	r3, #32
 8004454:	d009      	beq.n	800446a <UART_SetConfig+0x162>
 8004456:	2b20      	cmp	r3, #32
 8004458:	d810      	bhi.n	800447c <UART_SetConfig+0x174>
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <UART_SetConfig+0x15c>
 800445e:	2b10      	cmp	r3, #16
 8004460:	d006      	beq.n	8004470 <UART_SetConfig+0x168>
 8004462:	e00b      	b.n	800447c <UART_SetConfig+0x174>
 8004464:	2300      	movs	r3, #0
 8004466:	77fb      	strb	r3, [r7, #31]
 8004468:	e0f2      	b.n	8004650 <UART_SetConfig+0x348>
 800446a:	2302      	movs	r3, #2
 800446c:	77fb      	strb	r3, [r7, #31]
 800446e:	e0ef      	b.n	8004650 <UART_SetConfig+0x348>
 8004470:	2304      	movs	r3, #4
 8004472:	77fb      	strb	r3, [r7, #31]
 8004474:	e0ec      	b.n	8004650 <UART_SetConfig+0x348>
 8004476:	2308      	movs	r3, #8
 8004478:	77fb      	strb	r3, [r7, #31]
 800447a:	e0e9      	b.n	8004650 <UART_SetConfig+0x348>
 800447c:	2310      	movs	r3, #16
 800447e:	77fb      	strb	r3, [r7, #31]
 8004480:	e0e6      	b.n	8004650 <UART_SetConfig+0x348>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a56      	ldr	r2, [pc, #344]	@ (80045e0 <UART_SetConfig+0x2d8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d120      	bne.n	80044ce <UART_SetConfig+0x1c6>
 800448c:	4b51      	ldr	r3, [pc, #324]	@ (80045d4 <UART_SetConfig+0x2cc>)
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004492:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004496:	2bc0      	cmp	r3, #192	@ 0xc0
 8004498:	d013      	beq.n	80044c2 <UART_SetConfig+0x1ba>
 800449a:	2bc0      	cmp	r3, #192	@ 0xc0
 800449c:	d814      	bhi.n	80044c8 <UART_SetConfig+0x1c0>
 800449e:	2b80      	cmp	r3, #128	@ 0x80
 80044a0:	d009      	beq.n	80044b6 <UART_SetConfig+0x1ae>
 80044a2:	2b80      	cmp	r3, #128	@ 0x80
 80044a4:	d810      	bhi.n	80044c8 <UART_SetConfig+0x1c0>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <UART_SetConfig+0x1a8>
 80044aa:	2b40      	cmp	r3, #64	@ 0x40
 80044ac:	d006      	beq.n	80044bc <UART_SetConfig+0x1b4>
 80044ae:	e00b      	b.n	80044c8 <UART_SetConfig+0x1c0>
 80044b0:	2300      	movs	r3, #0
 80044b2:	77fb      	strb	r3, [r7, #31]
 80044b4:	e0cc      	b.n	8004650 <UART_SetConfig+0x348>
 80044b6:	2302      	movs	r3, #2
 80044b8:	77fb      	strb	r3, [r7, #31]
 80044ba:	e0c9      	b.n	8004650 <UART_SetConfig+0x348>
 80044bc:	2304      	movs	r3, #4
 80044be:	77fb      	strb	r3, [r7, #31]
 80044c0:	e0c6      	b.n	8004650 <UART_SetConfig+0x348>
 80044c2:	2308      	movs	r3, #8
 80044c4:	77fb      	strb	r3, [r7, #31]
 80044c6:	e0c3      	b.n	8004650 <UART_SetConfig+0x348>
 80044c8:	2310      	movs	r3, #16
 80044ca:	77fb      	strb	r3, [r7, #31]
 80044cc:	e0c0      	b.n	8004650 <UART_SetConfig+0x348>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a44      	ldr	r2, [pc, #272]	@ (80045e4 <UART_SetConfig+0x2dc>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d125      	bne.n	8004524 <UART_SetConfig+0x21c>
 80044d8:	4b3e      	ldr	r3, [pc, #248]	@ (80045d4 <UART_SetConfig+0x2cc>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044e6:	d017      	beq.n	8004518 <UART_SetConfig+0x210>
 80044e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044ec:	d817      	bhi.n	800451e <UART_SetConfig+0x216>
 80044ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044f2:	d00b      	beq.n	800450c <UART_SetConfig+0x204>
 80044f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044f8:	d811      	bhi.n	800451e <UART_SetConfig+0x216>
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <UART_SetConfig+0x1fe>
 80044fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004502:	d006      	beq.n	8004512 <UART_SetConfig+0x20a>
 8004504:	e00b      	b.n	800451e <UART_SetConfig+0x216>
 8004506:	2300      	movs	r3, #0
 8004508:	77fb      	strb	r3, [r7, #31]
 800450a:	e0a1      	b.n	8004650 <UART_SetConfig+0x348>
 800450c:	2302      	movs	r3, #2
 800450e:	77fb      	strb	r3, [r7, #31]
 8004510:	e09e      	b.n	8004650 <UART_SetConfig+0x348>
 8004512:	2304      	movs	r3, #4
 8004514:	77fb      	strb	r3, [r7, #31]
 8004516:	e09b      	b.n	8004650 <UART_SetConfig+0x348>
 8004518:	2308      	movs	r3, #8
 800451a:	77fb      	strb	r3, [r7, #31]
 800451c:	e098      	b.n	8004650 <UART_SetConfig+0x348>
 800451e:	2310      	movs	r3, #16
 8004520:	77fb      	strb	r3, [r7, #31]
 8004522:	e095      	b.n	8004650 <UART_SetConfig+0x348>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a2f      	ldr	r2, [pc, #188]	@ (80045e8 <UART_SetConfig+0x2e0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d125      	bne.n	800457a <UART_SetConfig+0x272>
 800452e:	4b29      	ldr	r3, [pc, #164]	@ (80045d4 <UART_SetConfig+0x2cc>)
 8004530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004534:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004538:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800453c:	d017      	beq.n	800456e <UART_SetConfig+0x266>
 800453e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004542:	d817      	bhi.n	8004574 <UART_SetConfig+0x26c>
 8004544:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004548:	d00b      	beq.n	8004562 <UART_SetConfig+0x25a>
 800454a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800454e:	d811      	bhi.n	8004574 <UART_SetConfig+0x26c>
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <UART_SetConfig+0x254>
 8004554:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004558:	d006      	beq.n	8004568 <UART_SetConfig+0x260>
 800455a:	e00b      	b.n	8004574 <UART_SetConfig+0x26c>
 800455c:	2301      	movs	r3, #1
 800455e:	77fb      	strb	r3, [r7, #31]
 8004560:	e076      	b.n	8004650 <UART_SetConfig+0x348>
 8004562:	2302      	movs	r3, #2
 8004564:	77fb      	strb	r3, [r7, #31]
 8004566:	e073      	b.n	8004650 <UART_SetConfig+0x348>
 8004568:	2304      	movs	r3, #4
 800456a:	77fb      	strb	r3, [r7, #31]
 800456c:	e070      	b.n	8004650 <UART_SetConfig+0x348>
 800456e:	2308      	movs	r3, #8
 8004570:	77fb      	strb	r3, [r7, #31]
 8004572:	e06d      	b.n	8004650 <UART_SetConfig+0x348>
 8004574:	2310      	movs	r3, #16
 8004576:	77fb      	strb	r3, [r7, #31]
 8004578:	e06a      	b.n	8004650 <UART_SetConfig+0x348>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a1b      	ldr	r2, [pc, #108]	@ (80045ec <UART_SetConfig+0x2e4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d138      	bne.n	80045f6 <UART_SetConfig+0x2ee>
 8004584:	4b13      	ldr	r3, [pc, #76]	@ (80045d4 <UART_SetConfig+0x2cc>)
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800458a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800458e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004592:	d017      	beq.n	80045c4 <UART_SetConfig+0x2bc>
 8004594:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004598:	d82a      	bhi.n	80045f0 <UART_SetConfig+0x2e8>
 800459a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800459e:	d00b      	beq.n	80045b8 <UART_SetConfig+0x2b0>
 80045a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045a4:	d824      	bhi.n	80045f0 <UART_SetConfig+0x2e8>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <UART_SetConfig+0x2aa>
 80045aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ae:	d006      	beq.n	80045be <UART_SetConfig+0x2b6>
 80045b0:	e01e      	b.n	80045f0 <UART_SetConfig+0x2e8>
 80045b2:	2300      	movs	r3, #0
 80045b4:	77fb      	strb	r3, [r7, #31]
 80045b6:	e04b      	b.n	8004650 <UART_SetConfig+0x348>
 80045b8:	2302      	movs	r3, #2
 80045ba:	77fb      	strb	r3, [r7, #31]
 80045bc:	e048      	b.n	8004650 <UART_SetConfig+0x348>
 80045be:	2304      	movs	r3, #4
 80045c0:	77fb      	strb	r3, [r7, #31]
 80045c2:	e045      	b.n	8004650 <UART_SetConfig+0x348>
 80045c4:	2308      	movs	r3, #8
 80045c6:	77fb      	strb	r3, [r7, #31]
 80045c8:	e042      	b.n	8004650 <UART_SetConfig+0x348>
 80045ca:	bf00      	nop
 80045cc:	efff69f3 	.word	0xefff69f3
 80045d0:	40011000 	.word	0x40011000
 80045d4:	40023800 	.word	0x40023800
 80045d8:	40004400 	.word	0x40004400
 80045dc:	40004800 	.word	0x40004800
 80045e0:	40004c00 	.word	0x40004c00
 80045e4:	40005000 	.word	0x40005000
 80045e8:	40011400 	.word	0x40011400
 80045ec:	40007800 	.word	0x40007800
 80045f0:	2310      	movs	r3, #16
 80045f2:	77fb      	strb	r3, [r7, #31]
 80045f4:	e02c      	b.n	8004650 <UART_SetConfig+0x348>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a72      	ldr	r2, [pc, #456]	@ (80047c4 <UART_SetConfig+0x4bc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d125      	bne.n	800464c <UART_SetConfig+0x344>
 8004600:	4b71      	ldr	r3, [pc, #452]	@ (80047c8 <UART_SetConfig+0x4c0>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004606:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800460a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800460e:	d017      	beq.n	8004640 <UART_SetConfig+0x338>
 8004610:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004614:	d817      	bhi.n	8004646 <UART_SetConfig+0x33e>
 8004616:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800461a:	d00b      	beq.n	8004634 <UART_SetConfig+0x32c>
 800461c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004620:	d811      	bhi.n	8004646 <UART_SetConfig+0x33e>
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <UART_SetConfig+0x326>
 8004626:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800462a:	d006      	beq.n	800463a <UART_SetConfig+0x332>
 800462c:	e00b      	b.n	8004646 <UART_SetConfig+0x33e>
 800462e:	2300      	movs	r3, #0
 8004630:	77fb      	strb	r3, [r7, #31]
 8004632:	e00d      	b.n	8004650 <UART_SetConfig+0x348>
 8004634:	2302      	movs	r3, #2
 8004636:	77fb      	strb	r3, [r7, #31]
 8004638:	e00a      	b.n	8004650 <UART_SetConfig+0x348>
 800463a:	2304      	movs	r3, #4
 800463c:	77fb      	strb	r3, [r7, #31]
 800463e:	e007      	b.n	8004650 <UART_SetConfig+0x348>
 8004640:	2308      	movs	r3, #8
 8004642:	77fb      	strb	r3, [r7, #31]
 8004644:	e004      	b.n	8004650 <UART_SetConfig+0x348>
 8004646:	2310      	movs	r3, #16
 8004648:	77fb      	strb	r3, [r7, #31]
 800464a:	e001      	b.n	8004650 <UART_SetConfig+0x348>
 800464c:	2310      	movs	r3, #16
 800464e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004658:	d15c      	bne.n	8004714 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 800465a:	7ffb      	ldrb	r3, [r7, #31]
 800465c:	2b08      	cmp	r3, #8
 800465e:	d828      	bhi.n	80046b2 <UART_SetConfig+0x3aa>
 8004660:	a201      	add	r2, pc, #4	@ (adr r2, 8004668 <UART_SetConfig+0x360>)
 8004662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004666:	bf00      	nop
 8004668:	0800468d 	.word	0x0800468d
 800466c:	08004695 	.word	0x08004695
 8004670:	0800469d 	.word	0x0800469d
 8004674:	080046b3 	.word	0x080046b3
 8004678:	080046a3 	.word	0x080046a3
 800467c:	080046b3 	.word	0x080046b3
 8004680:	080046b3 	.word	0x080046b3
 8004684:	080046b3 	.word	0x080046b3
 8004688:	080046ab 	.word	0x080046ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800468c:	f7fe fb14 	bl	8002cb8 <HAL_RCC_GetPCLK1Freq>
 8004690:	61b8      	str	r0, [r7, #24]
        break;
 8004692:	e013      	b.n	80046bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004694:	f7fe fb24 	bl	8002ce0 <HAL_RCC_GetPCLK2Freq>
 8004698:	61b8      	str	r0, [r7, #24]
        break;
 800469a:	e00f      	b.n	80046bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800469c:	4b4b      	ldr	r3, [pc, #300]	@ (80047cc <UART_SetConfig+0x4c4>)
 800469e:	61bb      	str	r3, [r7, #24]
        break;
 80046a0:	e00c      	b.n	80046bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046a2:	f7fe f9f7 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 80046a6:	61b8      	str	r0, [r7, #24]
        break;
 80046a8:	e008      	b.n	80046bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ae:	61bb      	str	r3, [r7, #24]
        break;
 80046b0:	e004      	b.n	80046bc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	77bb      	strb	r3, [r7, #30]
        break;
 80046ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d074      	beq.n	80047ac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	005a      	lsls	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	085b      	lsrs	r3, r3, #1
 80046cc:	441a      	add	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	2b0f      	cmp	r3, #15
 80046de:	d916      	bls.n	800470e <UART_SetConfig+0x406>
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046e6:	d212      	bcs.n	800470e <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	f023 030f 	bic.w	r3, r3, #15
 80046f0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	085b      	lsrs	r3, r3, #1
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	89fb      	ldrh	r3, [r7, #14]
 8004700:	4313      	orrs	r3, r2
 8004702:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	89fa      	ldrh	r2, [r7, #14]
 800470a:	60da      	str	r2, [r3, #12]
 800470c:	e04e      	b.n	80047ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	77bb      	strb	r3, [r7, #30]
 8004712:	e04b      	b.n	80047ac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004714:	7ffb      	ldrb	r3, [r7, #31]
 8004716:	2b08      	cmp	r3, #8
 8004718:	d827      	bhi.n	800476a <UART_SetConfig+0x462>
 800471a:	a201      	add	r2, pc, #4	@ (adr r2, 8004720 <UART_SetConfig+0x418>)
 800471c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004720:	08004745 	.word	0x08004745
 8004724:	0800474d 	.word	0x0800474d
 8004728:	08004755 	.word	0x08004755
 800472c:	0800476b 	.word	0x0800476b
 8004730:	0800475b 	.word	0x0800475b
 8004734:	0800476b 	.word	0x0800476b
 8004738:	0800476b 	.word	0x0800476b
 800473c:	0800476b 	.word	0x0800476b
 8004740:	08004763 	.word	0x08004763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004744:	f7fe fab8 	bl	8002cb8 <HAL_RCC_GetPCLK1Freq>
 8004748:	61b8      	str	r0, [r7, #24]
        break;
 800474a:	e013      	b.n	8004774 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800474c:	f7fe fac8 	bl	8002ce0 <HAL_RCC_GetPCLK2Freq>
 8004750:	61b8      	str	r0, [r7, #24]
        break;
 8004752:	e00f      	b.n	8004774 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004754:	4b1d      	ldr	r3, [pc, #116]	@ (80047cc <UART_SetConfig+0x4c4>)
 8004756:	61bb      	str	r3, [r7, #24]
        break;
 8004758:	e00c      	b.n	8004774 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800475a:	f7fe f99b 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 800475e:	61b8      	str	r0, [r7, #24]
        break;
 8004760:	e008      	b.n	8004774 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004762:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004766:	61bb      	str	r3, [r7, #24]
        break;
 8004768:	e004      	b.n	8004774 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	77bb      	strb	r3, [r7, #30]
        break;
 8004772:	bf00      	nop
    }

    if (pclk != 0U)
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d018      	beq.n	80047ac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	085a      	lsrs	r2, r3, #1
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	441a      	add	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	fbb2 f3f3 	udiv	r3, r2, r3
 800478c:	b29b      	uxth	r3, r3
 800478e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	2b0f      	cmp	r3, #15
 8004794:	d908      	bls.n	80047a8 <UART_SetConfig+0x4a0>
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800479c:	d204      	bcs.n	80047a8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	60da      	str	r2, [r3, #12]
 80047a6:	e001      	b.n	80047ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 80047b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3720      	adds	r7, #32
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40007c00 	.word	0x40007c00
 80047c8:	40023800 	.word	0x40023800
 80047cc:	00f42400 	.word	0x00f42400

080047d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004864:	f003 0310 	and.w	r3, r3, #16
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01a      	beq.n	80048e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048ce:	d10a      	bne.n	80048e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	605a      	str	r2, [r3, #4]
  }
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af02      	add	r7, sp, #8
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004924:	f7fd f9e0 	bl	8001ce8 <HAL_GetTick>
 8004928:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b08      	cmp	r3, #8
 8004936:	d10e      	bne.n	8004956 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004938:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f82d 	bl	80049a6 <UART_WaitOnFlagUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e023      	b.n	800499e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b04      	cmp	r3, #4
 8004962:	d10e      	bne.n	8004982 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004964:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f817 	bl	80049a6 <UART_WaitOnFlagUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e00d      	b.n	800499e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2220      	movs	r2, #32
 8004986:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b084      	sub	sp, #16
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	603b      	str	r3, [r7, #0]
 80049b2:	4613      	mov	r3, r2
 80049b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b6:	e05e      	b.n	8004a76 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049be:	d05a      	beq.n	8004a76 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c0:	f7fd f992 	bl	8001ce8 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d302      	bcc.n	80049d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d11b      	bne.n	8004a0e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80049e4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0201 	bic.w	r2, r2, #1
 80049f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2220      	movs	r2, #32
 80049fa:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2220      	movs	r2, #32
 8004a00:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e043      	b.n	8004a96 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d02c      	beq.n	8004a76 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a2a:	d124      	bne.n	8004a76 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8004a44:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0201 	bic.w	r2, r2, #1
 8004a54:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e00f      	b.n	8004a96 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69da      	ldr	r2, [r3, #28]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	bf0c      	ite	eq
 8004a86:	2301      	moveq	r3, #1
 8004a88:	2300      	movne	r3, #0
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d091      	beq.n	80049b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <__cvt>:
 8004a9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aa0:	ed2d 8b02 	vpush	{d8}
 8004aa4:	eeb0 8b40 	vmov.f64	d8, d0
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	4617      	mov	r7, r2
 8004aac:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8004aae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ab0:	ee18 2a90 	vmov	r2, s17
 8004ab4:	f025 0520 	bic.w	r5, r5, #32
 8004ab8:	2a00      	cmp	r2, #0
 8004aba:	bfb6      	itet	lt
 8004abc:	222d      	movlt	r2, #45	@ 0x2d
 8004abe:	2200      	movge	r2, #0
 8004ac0:	eeb1 8b40 	vneglt.f64	d8, d0
 8004ac4:	2d46      	cmp	r5, #70	@ 0x46
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	701a      	strb	r2, [r3, #0]
 8004aca:	d004      	beq.n	8004ad6 <__cvt+0x38>
 8004acc:	2d45      	cmp	r5, #69	@ 0x45
 8004ace:	d100      	bne.n	8004ad2 <__cvt+0x34>
 8004ad0:	3401      	adds	r4, #1
 8004ad2:	2102      	movs	r1, #2
 8004ad4:	e000      	b.n	8004ad8 <__cvt+0x3a>
 8004ad6:	2103      	movs	r1, #3
 8004ad8:	ab03      	add	r3, sp, #12
 8004ada:	9301      	str	r3, [sp, #4]
 8004adc:	ab02      	add	r3, sp, #8
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	4622      	mov	r2, r4
 8004ae2:	4633      	mov	r3, r6
 8004ae4:	eeb0 0b48 	vmov.f64	d0, d8
 8004ae8:	f000 fe42 	bl	8005770 <_dtoa_r>
 8004aec:	2d47      	cmp	r5, #71	@ 0x47
 8004aee:	d114      	bne.n	8004b1a <__cvt+0x7c>
 8004af0:	07fb      	lsls	r3, r7, #31
 8004af2:	d50a      	bpl.n	8004b0a <__cvt+0x6c>
 8004af4:	1902      	adds	r2, r0, r4
 8004af6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004afe:	bf08      	it	eq
 8004b00:	9203      	streq	r2, [sp, #12]
 8004b02:	2130      	movs	r1, #48	@ 0x30
 8004b04:	9b03      	ldr	r3, [sp, #12]
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d319      	bcc.n	8004b3e <__cvt+0xa0>
 8004b0a:	9b03      	ldr	r3, [sp, #12]
 8004b0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b0e:	1a1b      	subs	r3, r3, r0
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	b005      	add	sp, #20
 8004b14:	ecbd 8b02 	vpop	{d8}
 8004b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b1a:	2d46      	cmp	r5, #70	@ 0x46
 8004b1c:	eb00 0204 	add.w	r2, r0, r4
 8004b20:	d1e9      	bne.n	8004af6 <__cvt+0x58>
 8004b22:	7803      	ldrb	r3, [r0, #0]
 8004b24:	2b30      	cmp	r3, #48	@ 0x30
 8004b26:	d107      	bne.n	8004b38 <__cvt+0x9a>
 8004b28:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b30:	bf1c      	itt	ne
 8004b32:	f1c4 0401 	rsbne	r4, r4, #1
 8004b36:	6034      	strne	r4, [r6, #0]
 8004b38:	6833      	ldr	r3, [r6, #0]
 8004b3a:	441a      	add	r2, r3
 8004b3c:	e7db      	b.n	8004af6 <__cvt+0x58>
 8004b3e:	1c5c      	adds	r4, r3, #1
 8004b40:	9403      	str	r4, [sp, #12]
 8004b42:	7019      	strb	r1, [r3, #0]
 8004b44:	e7de      	b.n	8004b04 <__cvt+0x66>

08004b46 <__exponent>:
 8004b46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b48:	2900      	cmp	r1, #0
 8004b4a:	bfba      	itte	lt
 8004b4c:	4249      	neglt	r1, r1
 8004b4e:	232d      	movlt	r3, #45	@ 0x2d
 8004b50:	232b      	movge	r3, #43	@ 0x2b
 8004b52:	2909      	cmp	r1, #9
 8004b54:	7002      	strb	r2, [r0, #0]
 8004b56:	7043      	strb	r3, [r0, #1]
 8004b58:	dd29      	ble.n	8004bae <__exponent+0x68>
 8004b5a:	f10d 0307 	add.w	r3, sp, #7
 8004b5e:	461d      	mov	r5, r3
 8004b60:	270a      	movs	r7, #10
 8004b62:	461a      	mov	r2, r3
 8004b64:	fbb1 f6f7 	udiv	r6, r1, r7
 8004b68:	fb07 1416 	mls	r4, r7, r6, r1
 8004b6c:	3430      	adds	r4, #48	@ 0x30
 8004b6e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004b72:	460c      	mov	r4, r1
 8004b74:	2c63      	cmp	r4, #99	@ 0x63
 8004b76:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b7a:	4631      	mov	r1, r6
 8004b7c:	dcf1      	bgt.n	8004b62 <__exponent+0x1c>
 8004b7e:	3130      	adds	r1, #48	@ 0x30
 8004b80:	1e94      	subs	r4, r2, #2
 8004b82:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004b86:	1c41      	adds	r1, r0, #1
 8004b88:	4623      	mov	r3, r4
 8004b8a:	42ab      	cmp	r3, r5
 8004b8c:	d30a      	bcc.n	8004ba4 <__exponent+0x5e>
 8004b8e:	f10d 0309 	add.w	r3, sp, #9
 8004b92:	1a9b      	subs	r3, r3, r2
 8004b94:	42ac      	cmp	r4, r5
 8004b96:	bf88      	it	hi
 8004b98:	2300      	movhi	r3, #0
 8004b9a:	3302      	adds	r3, #2
 8004b9c:	4403      	add	r3, r0
 8004b9e:	1a18      	subs	r0, r3, r0
 8004ba0:	b003      	add	sp, #12
 8004ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ba4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004ba8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004bac:	e7ed      	b.n	8004b8a <__exponent+0x44>
 8004bae:	2330      	movs	r3, #48	@ 0x30
 8004bb0:	3130      	adds	r1, #48	@ 0x30
 8004bb2:	7083      	strb	r3, [r0, #2]
 8004bb4:	70c1      	strb	r1, [r0, #3]
 8004bb6:	1d03      	adds	r3, r0, #4
 8004bb8:	e7f1      	b.n	8004b9e <__exponent+0x58>
 8004bba:	0000      	movs	r0, r0
 8004bbc:	0000      	movs	r0, r0
	...

08004bc0 <_printf_float>:
 8004bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bc4:	b08d      	sub	sp, #52	@ 0x34
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004bcc:	4616      	mov	r6, r2
 8004bce:	461f      	mov	r7, r3
 8004bd0:	4605      	mov	r5, r0
 8004bd2:	f000 fccb 	bl	800556c <_localeconv_r>
 8004bd6:	f8d0 b000 	ldr.w	fp, [r0]
 8004bda:	4658      	mov	r0, fp
 8004bdc:	f7fb fb80 	bl	80002e0 <strlen>
 8004be0:	2300      	movs	r3, #0
 8004be2:	930a      	str	r3, [sp, #40]	@ 0x28
 8004be4:	f8d8 3000 	ldr.w	r3, [r8]
 8004be8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004bec:	6822      	ldr	r2, [r4, #0]
 8004bee:	9005      	str	r0, [sp, #20]
 8004bf0:	3307      	adds	r3, #7
 8004bf2:	f023 0307 	bic.w	r3, r3, #7
 8004bf6:	f103 0108 	add.w	r1, r3, #8
 8004bfa:	f8c8 1000 	str.w	r1, [r8]
 8004bfe:	ed93 0b00 	vldr	d0, [r3]
 8004c02:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8004e60 <_printf_float+0x2a0>
 8004c06:	eeb0 7bc0 	vabs.f64	d7, d0
 8004c0a:	eeb4 7b46 	vcmp.f64	d7, d6
 8004c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c12:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8004c16:	dd24      	ble.n	8004c62 <_printf_float+0xa2>
 8004c18:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c20:	d502      	bpl.n	8004c28 <_printf_float+0x68>
 8004c22:	232d      	movs	r3, #45	@ 0x2d
 8004c24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c28:	498f      	ldr	r1, [pc, #572]	@ (8004e68 <_printf_float+0x2a8>)
 8004c2a:	4b90      	ldr	r3, [pc, #576]	@ (8004e6c <_printf_float+0x2ac>)
 8004c2c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8004c30:	bf94      	ite	ls
 8004c32:	4688      	movls	r8, r1
 8004c34:	4698      	movhi	r8, r3
 8004c36:	f022 0204 	bic.w	r2, r2, #4
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	6123      	str	r3, [r4, #16]
 8004c3e:	6022      	str	r2, [r4, #0]
 8004c40:	f04f 0a00 	mov.w	sl, #0
 8004c44:	9700      	str	r7, [sp, #0]
 8004c46:	4633      	mov	r3, r6
 8004c48:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	f000 f9d1 	bl	8004ff4 <_printf_common>
 8004c52:	3001      	adds	r0, #1
 8004c54:	f040 8089 	bne.w	8004d6a <_printf_float+0x1aa>
 8004c58:	f04f 30ff 	mov.w	r0, #4294967295
 8004c5c:	b00d      	add	sp, #52	@ 0x34
 8004c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c62:	eeb4 0b40 	vcmp.f64	d0, d0
 8004c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6a:	d709      	bvc.n	8004c80 <_printf_float+0xc0>
 8004c6c:	ee10 3a90 	vmov	r3, s1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	bfbc      	itt	lt
 8004c74:	232d      	movlt	r3, #45	@ 0x2d
 8004c76:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004c7a:	497d      	ldr	r1, [pc, #500]	@ (8004e70 <_printf_float+0x2b0>)
 8004c7c:	4b7d      	ldr	r3, [pc, #500]	@ (8004e74 <_printf_float+0x2b4>)
 8004c7e:	e7d5      	b.n	8004c2c <_printf_float+0x6c>
 8004c80:	6863      	ldr	r3, [r4, #4]
 8004c82:	1c59      	adds	r1, r3, #1
 8004c84:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8004c88:	d139      	bne.n	8004cfe <_printf_float+0x13e>
 8004c8a:	2306      	movs	r3, #6
 8004c8c:	6063      	str	r3, [r4, #4]
 8004c8e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c92:	2300      	movs	r3, #0
 8004c94:	6022      	str	r2, [r4, #0]
 8004c96:	9303      	str	r3, [sp, #12]
 8004c98:	ab0a      	add	r3, sp, #40	@ 0x28
 8004c9a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004c9e:	ab09      	add	r3, sp, #36	@ 0x24
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	6861      	ldr	r1, [r4, #4]
 8004ca4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004ca8:	4628      	mov	r0, r5
 8004caa:	f7ff fef8 	bl	8004a9e <__cvt>
 8004cae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004cb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004cb4:	4680      	mov	r8, r0
 8004cb6:	d129      	bne.n	8004d0c <_printf_float+0x14c>
 8004cb8:	1cc8      	adds	r0, r1, #3
 8004cba:	db02      	blt.n	8004cc2 <_printf_float+0x102>
 8004cbc:	6863      	ldr	r3, [r4, #4]
 8004cbe:	4299      	cmp	r1, r3
 8004cc0:	dd41      	ble.n	8004d46 <_printf_float+0x186>
 8004cc2:	f1a9 0902 	sub.w	r9, r9, #2
 8004cc6:	fa5f f989 	uxtb.w	r9, r9
 8004cca:	3901      	subs	r1, #1
 8004ccc:	464a      	mov	r2, r9
 8004cce:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004cd2:	9109      	str	r1, [sp, #36]	@ 0x24
 8004cd4:	f7ff ff37 	bl	8004b46 <__exponent>
 8004cd8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004cda:	1813      	adds	r3, r2, r0
 8004cdc:	2a01      	cmp	r2, #1
 8004cde:	4682      	mov	sl, r0
 8004ce0:	6123      	str	r3, [r4, #16]
 8004ce2:	dc02      	bgt.n	8004cea <_printf_float+0x12a>
 8004ce4:	6822      	ldr	r2, [r4, #0]
 8004ce6:	07d2      	lsls	r2, r2, #31
 8004ce8:	d501      	bpl.n	8004cee <_printf_float+0x12e>
 8004cea:	3301      	adds	r3, #1
 8004cec:	6123      	str	r3, [r4, #16]
 8004cee:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0a6      	beq.n	8004c44 <_printf_float+0x84>
 8004cf6:	232d      	movs	r3, #45	@ 0x2d
 8004cf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cfc:	e7a2      	b.n	8004c44 <_printf_float+0x84>
 8004cfe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004d02:	d1c4      	bne.n	8004c8e <_printf_float+0xce>
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1c2      	bne.n	8004c8e <_printf_float+0xce>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e7bf      	b.n	8004c8c <_printf_float+0xcc>
 8004d0c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004d10:	d9db      	bls.n	8004cca <_printf_float+0x10a>
 8004d12:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8004d16:	d118      	bne.n	8004d4a <_printf_float+0x18a>
 8004d18:	2900      	cmp	r1, #0
 8004d1a:	6863      	ldr	r3, [r4, #4]
 8004d1c:	dd0b      	ble.n	8004d36 <_printf_float+0x176>
 8004d1e:	6121      	str	r1, [r4, #16]
 8004d20:	b913      	cbnz	r3, 8004d28 <_printf_float+0x168>
 8004d22:	6822      	ldr	r2, [r4, #0]
 8004d24:	07d0      	lsls	r0, r2, #31
 8004d26:	d502      	bpl.n	8004d2e <_printf_float+0x16e>
 8004d28:	3301      	adds	r3, #1
 8004d2a:	440b      	add	r3, r1
 8004d2c:	6123      	str	r3, [r4, #16]
 8004d2e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004d30:	f04f 0a00 	mov.w	sl, #0
 8004d34:	e7db      	b.n	8004cee <_printf_float+0x12e>
 8004d36:	b913      	cbnz	r3, 8004d3e <_printf_float+0x17e>
 8004d38:	6822      	ldr	r2, [r4, #0]
 8004d3a:	07d2      	lsls	r2, r2, #31
 8004d3c:	d501      	bpl.n	8004d42 <_printf_float+0x182>
 8004d3e:	3302      	adds	r3, #2
 8004d40:	e7f4      	b.n	8004d2c <_printf_float+0x16c>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e7f2      	b.n	8004d2c <_printf_float+0x16c>
 8004d46:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8004d4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d4c:	4299      	cmp	r1, r3
 8004d4e:	db05      	blt.n	8004d5c <_printf_float+0x19c>
 8004d50:	6823      	ldr	r3, [r4, #0]
 8004d52:	6121      	str	r1, [r4, #16]
 8004d54:	07d8      	lsls	r0, r3, #31
 8004d56:	d5ea      	bpl.n	8004d2e <_printf_float+0x16e>
 8004d58:	1c4b      	adds	r3, r1, #1
 8004d5a:	e7e7      	b.n	8004d2c <_printf_float+0x16c>
 8004d5c:	2900      	cmp	r1, #0
 8004d5e:	bfd4      	ite	le
 8004d60:	f1c1 0202 	rsble	r2, r1, #2
 8004d64:	2201      	movgt	r2, #1
 8004d66:	4413      	add	r3, r2
 8004d68:	e7e0      	b.n	8004d2c <_printf_float+0x16c>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	055a      	lsls	r2, r3, #21
 8004d6e:	d407      	bmi.n	8004d80 <_printf_float+0x1c0>
 8004d70:	6923      	ldr	r3, [r4, #16]
 8004d72:	4642      	mov	r2, r8
 8004d74:	4631      	mov	r1, r6
 8004d76:	4628      	mov	r0, r5
 8004d78:	47b8      	blx	r7
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	d12a      	bne.n	8004dd4 <_printf_float+0x214>
 8004d7e:	e76b      	b.n	8004c58 <_printf_float+0x98>
 8004d80:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004d84:	f240 80e0 	bls.w	8004f48 <_printf_float+0x388>
 8004d88:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004d8c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d94:	d133      	bne.n	8004dfe <_printf_float+0x23e>
 8004d96:	4a38      	ldr	r2, [pc, #224]	@ (8004e78 <_printf_float+0x2b8>)
 8004d98:	2301      	movs	r3, #1
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	47b8      	blx	r7
 8004da0:	3001      	adds	r0, #1
 8004da2:	f43f af59 	beq.w	8004c58 <_printf_float+0x98>
 8004da6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004daa:	4543      	cmp	r3, r8
 8004dac:	db02      	blt.n	8004db4 <_printf_float+0x1f4>
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	07d8      	lsls	r0, r3, #31
 8004db2:	d50f      	bpl.n	8004dd4 <_printf_float+0x214>
 8004db4:	9b05      	ldr	r3, [sp, #20]
 8004db6:	465a      	mov	r2, fp
 8004db8:	4631      	mov	r1, r6
 8004dba:	4628      	mov	r0, r5
 8004dbc:	47b8      	blx	r7
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	f43f af4a 	beq.w	8004c58 <_printf_float+0x98>
 8004dc4:	f04f 0900 	mov.w	r9, #0
 8004dc8:	f108 38ff 	add.w	r8, r8, #4294967295
 8004dcc:	f104 0a1a 	add.w	sl, r4, #26
 8004dd0:	45c8      	cmp	r8, r9
 8004dd2:	dc09      	bgt.n	8004de8 <_printf_float+0x228>
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	079b      	lsls	r3, r3, #30
 8004dd8:	f100 8107 	bmi.w	8004fea <_printf_float+0x42a>
 8004ddc:	68e0      	ldr	r0, [r4, #12]
 8004dde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004de0:	4298      	cmp	r0, r3
 8004de2:	bfb8      	it	lt
 8004de4:	4618      	movlt	r0, r3
 8004de6:	e739      	b.n	8004c5c <_printf_float+0x9c>
 8004de8:	2301      	movs	r3, #1
 8004dea:	4652      	mov	r2, sl
 8004dec:	4631      	mov	r1, r6
 8004dee:	4628      	mov	r0, r5
 8004df0:	47b8      	blx	r7
 8004df2:	3001      	adds	r0, #1
 8004df4:	f43f af30 	beq.w	8004c58 <_printf_float+0x98>
 8004df8:	f109 0901 	add.w	r9, r9, #1
 8004dfc:	e7e8      	b.n	8004dd0 <_printf_float+0x210>
 8004dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	dc3b      	bgt.n	8004e7c <_printf_float+0x2bc>
 8004e04:	4a1c      	ldr	r2, [pc, #112]	@ (8004e78 <_printf_float+0x2b8>)
 8004e06:	2301      	movs	r3, #1
 8004e08:	4631      	mov	r1, r6
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	47b8      	blx	r7
 8004e0e:	3001      	adds	r0, #1
 8004e10:	f43f af22 	beq.w	8004c58 <_printf_float+0x98>
 8004e14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004e18:	ea59 0303 	orrs.w	r3, r9, r3
 8004e1c:	d102      	bne.n	8004e24 <_printf_float+0x264>
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	07d9      	lsls	r1, r3, #31
 8004e22:	d5d7      	bpl.n	8004dd4 <_printf_float+0x214>
 8004e24:	9b05      	ldr	r3, [sp, #20]
 8004e26:	465a      	mov	r2, fp
 8004e28:	4631      	mov	r1, r6
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	47b8      	blx	r7
 8004e2e:	3001      	adds	r0, #1
 8004e30:	f43f af12 	beq.w	8004c58 <_printf_float+0x98>
 8004e34:	f04f 0a00 	mov.w	sl, #0
 8004e38:	f104 0b1a 	add.w	fp, r4, #26
 8004e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e3e:	425b      	negs	r3, r3
 8004e40:	4553      	cmp	r3, sl
 8004e42:	dc01      	bgt.n	8004e48 <_printf_float+0x288>
 8004e44:	464b      	mov	r3, r9
 8004e46:	e794      	b.n	8004d72 <_printf_float+0x1b2>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	465a      	mov	r2, fp
 8004e4c:	4631      	mov	r1, r6
 8004e4e:	4628      	mov	r0, r5
 8004e50:	47b8      	blx	r7
 8004e52:	3001      	adds	r0, #1
 8004e54:	f43f af00 	beq.w	8004c58 <_printf_float+0x98>
 8004e58:	f10a 0a01 	add.w	sl, sl, #1
 8004e5c:	e7ee      	b.n	8004e3c <_printf_float+0x27c>
 8004e5e:	bf00      	nop
 8004e60:	ffffffff 	.word	0xffffffff
 8004e64:	7fefffff 	.word	0x7fefffff
 8004e68:	080078a8 	.word	0x080078a8
 8004e6c:	080078ac 	.word	0x080078ac
 8004e70:	080078b0 	.word	0x080078b0
 8004e74:	080078b4 	.word	0x080078b4
 8004e78:	080078b8 	.word	0x080078b8
 8004e7c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e7e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004e82:	4553      	cmp	r3, sl
 8004e84:	bfa8      	it	ge
 8004e86:	4653      	movge	r3, sl
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	4699      	mov	r9, r3
 8004e8c:	dc37      	bgt.n	8004efe <_printf_float+0x33e>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	9307      	str	r3, [sp, #28]
 8004e92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e96:	f104 021a 	add.w	r2, r4, #26
 8004e9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e9c:	9907      	ldr	r1, [sp, #28]
 8004e9e:	9306      	str	r3, [sp, #24]
 8004ea0:	eba3 0309 	sub.w	r3, r3, r9
 8004ea4:	428b      	cmp	r3, r1
 8004ea6:	dc31      	bgt.n	8004f0c <_printf_float+0x34c>
 8004ea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eaa:	459a      	cmp	sl, r3
 8004eac:	dc3b      	bgt.n	8004f26 <_printf_float+0x366>
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	07da      	lsls	r2, r3, #31
 8004eb2:	d438      	bmi.n	8004f26 <_printf_float+0x366>
 8004eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eb6:	ebaa 0903 	sub.w	r9, sl, r3
 8004eba:	9b06      	ldr	r3, [sp, #24]
 8004ebc:	ebaa 0303 	sub.w	r3, sl, r3
 8004ec0:	4599      	cmp	r9, r3
 8004ec2:	bfa8      	it	ge
 8004ec4:	4699      	movge	r9, r3
 8004ec6:	f1b9 0f00 	cmp.w	r9, #0
 8004eca:	dc34      	bgt.n	8004f36 <_printf_float+0x376>
 8004ecc:	f04f 0800 	mov.w	r8, #0
 8004ed0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ed4:	f104 0b1a 	add.w	fp, r4, #26
 8004ed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eda:	ebaa 0303 	sub.w	r3, sl, r3
 8004ede:	eba3 0309 	sub.w	r3, r3, r9
 8004ee2:	4543      	cmp	r3, r8
 8004ee4:	f77f af76 	ble.w	8004dd4 <_printf_float+0x214>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	465a      	mov	r2, fp
 8004eec:	4631      	mov	r1, r6
 8004eee:	4628      	mov	r0, r5
 8004ef0:	47b8      	blx	r7
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	f43f aeb0 	beq.w	8004c58 <_printf_float+0x98>
 8004ef8:	f108 0801 	add.w	r8, r8, #1
 8004efc:	e7ec      	b.n	8004ed8 <_printf_float+0x318>
 8004efe:	4642      	mov	r2, r8
 8004f00:	4631      	mov	r1, r6
 8004f02:	4628      	mov	r0, r5
 8004f04:	47b8      	blx	r7
 8004f06:	3001      	adds	r0, #1
 8004f08:	d1c1      	bne.n	8004e8e <_printf_float+0x2ce>
 8004f0a:	e6a5      	b.n	8004c58 <_printf_float+0x98>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	4631      	mov	r1, r6
 8004f10:	4628      	mov	r0, r5
 8004f12:	9206      	str	r2, [sp, #24]
 8004f14:	47b8      	blx	r7
 8004f16:	3001      	adds	r0, #1
 8004f18:	f43f ae9e 	beq.w	8004c58 <_printf_float+0x98>
 8004f1c:	9b07      	ldr	r3, [sp, #28]
 8004f1e:	9a06      	ldr	r2, [sp, #24]
 8004f20:	3301      	adds	r3, #1
 8004f22:	9307      	str	r3, [sp, #28]
 8004f24:	e7b9      	b.n	8004e9a <_printf_float+0x2da>
 8004f26:	9b05      	ldr	r3, [sp, #20]
 8004f28:	465a      	mov	r2, fp
 8004f2a:	4631      	mov	r1, r6
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	47b8      	blx	r7
 8004f30:	3001      	adds	r0, #1
 8004f32:	d1bf      	bne.n	8004eb4 <_printf_float+0x2f4>
 8004f34:	e690      	b.n	8004c58 <_printf_float+0x98>
 8004f36:	9a06      	ldr	r2, [sp, #24]
 8004f38:	464b      	mov	r3, r9
 8004f3a:	4442      	add	r2, r8
 8004f3c:	4631      	mov	r1, r6
 8004f3e:	4628      	mov	r0, r5
 8004f40:	47b8      	blx	r7
 8004f42:	3001      	adds	r0, #1
 8004f44:	d1c2      	bne.n	8004ecc <_printf_float+0x30c>
 8004f46:	e687      	b.n	8004c58 <_printf_float+0x98>
 8004f48:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8004f4c:	f1b9 0f01 	cmp.w	r9, #1
 8004f50:	dc01      	bgt.n	8004f56 <_printf_float+0x396>
 8004f52:	07db      	lsls	r3, r3, #31
 8004f54:	d536      	bpl.n	8004fc4 <_printf_float+0x404>
 8004f56:	2301      	movs	r3, #1
 8004f58:	4642      	mov	r2, r8
 8004f5a:	4631      	mov	r1, r6
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	47b8      	blx	r7
 8004f60:	3001      	adds	r0, #1
 8004f62:	f43f ae79 	beq.w	8004c58 <_printf_float+0x98>
 8004f66:	9b05      	ldr	r3, [sp, #20]
 8004f68:	465a      	mov	r2, fp
 8004f6a:	4631      	mov	r1, r6
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	47b8      	blx	r7
 8004f70:	3001      	adds	r0, #1
 8004f72:	f43f ae71 	beq.w	8004c58 <_printf_float+0x98>
 8004f76:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004f7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f82:	f109 39ff 	add.w	r9, r9, #4294967295
 8004f86:	d018      	beq.n	8004fba <_printf_float+0x3fa>
 8004f88:	464b      	mov	r3, r9
 8004f8a:	f108 0201 	add.w	r2, r8, #1
 8004f8e:	4631      	mov	r1, r6
 8004f90:	4628      	mov	r0, r5
 8004f92:	47b8      	blx	r7
 8004f94:	3001      	adds	r0, #1
 8004f96:	d10c      	bne.n	8004fb2 <_printf_float+0x3f2>
 8004f98:	e65e      	b.n	8004c58 <_printf_float+0x98>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	465a      	mov	r2, fp
 8004f9e:	4631      	mov	r1, r6
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	47b8      	blx	r7
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	f43f ae57 	beq.w	8004c58 <_printf_float+0x98>
 8004faa:	f108 0801 	add.w	r8, r8, #1
 8004fae:	45c8      	cmp	r8, r9
 8004fb0:	dbf3      	blt.n	8004f9a <_printf_float+0x3da>
 8004fb2:	4653      	mov	r3, sl
 8004fb4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004fb8:	e6dc      	b.n	8004d74 <_printf_float+0x1b4>
 8004fba:	f04f 0800 	mov.w	r8, #0
 8004fbe:	f104 0b1a 	add.w	fp, r4, #26
 8004fc2:	e7f4      	b.n	8004fae <_printf_float+0x3ee>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	4642      	mov	r2, r8
 8004fc8:	e7e1      	b.n	8004f8e <_printf_float+0x3ce>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	464a      	mov	r2, r9
 8004fce:	4631      	mov	r1, r6
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	47b8      	blx	r7
 8004fd4:	3001      	adds	r0, #1
 8004fd6:	f43f ae3f 	beq.w	8004c58 <_printf_float+0x98>
 8004fda:	f108 0801 	add.w	r8, r8, #1
 8004fde:	68e3      	ldr	r3, [r4, #12]
 8004fe0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004fe2:	1a5b      	subs	r3, r3, r1
 8004fe4:	4543      	cmp	r3, r8
 8004fe6:	dcf0      	bgt.n	8004fca <_printf_float+0x40a>
 8004fe8:	e6f8      	b.n	8004ddc <_printf_float+0x21c>
 8004fea:	f04f 0800 	mov.w	r8, #0
 8004fee:	f104 0919 	add.w	r9, r4, #25
 8004ff2:	e7f4      	b.n	8004fde <_printf_float+0x41e>

08004ff4 <_printf_common>:
 8004ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff8:	4616      	mov	r6, r2
 8004ffa:	4698      	mov	r8, r3
 8004ffc:	688a      	ldr	r2, [r1, #8]
 8004ffe:	690b      	ldr	r3, [r1, #16]
 8005000:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005004:	4293      	cmp	r3, r2
 8005006:	bfb8      	it	lt
 8005008:	4613      	movlt	r3, r2
 800500a:	6033      	str	r3, [r6, #0]
 800500c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005010:	4607      	mov	r7, r0
 8005012:	460c      	mov	r4, r1
 8005014:	b10a      	cbz	r2, 800501a <_printf_common+0x26>
 8005016:	3301      	adds	r3, #1
 8005018:	6033      	str	r3, [r6, #0]
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	0699      	lsls	r1, r3, #26
 800501e:	bf42      	ittt	mi
 8005020:	6833      	ldrmi	r3, [r6, #0]
 8005022:	3302      	addmi	r3, #2
 8005024:	6033      	strmi	r3, [r6, #0]
 8005026:	6825      	ldr	r5, [r4, #0]
 8005028:	f015 0506 	ands.w	r5, r5, #6
 800502c:	d106      	bne.n	800503c <_printf_common+0x48>
 800502e:	f104 0a19 	add.w	sl, r4, #25
 8005032:	68e3      	ldr	r3, [r4, #12]
 8005034:	6832      	ldr	r2, [r6, #0]
 8005036:	1a9b      	subs	r3, r3, r2
 8005038:	42ab      	cmp	r3, r5
 800503a:	dc26      	bgt.n	800508a <_printf_common+0x96>
 800503c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005040:	6822      	ldr	r2, [r4, #0]
 8005042:	3b00      	subs	r3, #0
 8005044:	bf18      	it	ne
 8005046:	2301      	movne	r3, #1
 8005048:	0692      	lsls	r2, r2, #26
 800504a:	d42b      	bmi.n	80050a4 <_printf_common+0xb0>
 800504c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005050:	4641      	mov	r1, r8
 8005052:	4638      	mov	r0, r7
 8005054:	47c8      	blx	r9
 8005056:	3001      	adds	r0, #1
 8005058:	d01e      	beq.n	8005098 <_printf_common+0xa4>
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	6922      	ldr	r2, [r4, #16]
 800505e:	f003 0306 	and.w	r3, r3, #6
 8005062:	2b04      	cmp	r3, #4
 8005064:	bf02      	ittt	eq
 8005066:	68e5      	ldreq	r5, [r4, #12]
 8005068:	6833      	ldreq	r3, [r6, #0]
 800506a:	1aed      	subeq	r5, r5, r3
 800506c:	68a3      	ldr	r3, [r4, #8]
 800506e:	bf0c      	ite	eq
 8005070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005074:	2500      	movne	r5, #0
 8005076:	4293      	cmp	r3, r2
 8005078:	bfc4      	itt	gt
 800507a:	1a9b      	subgt	r3, r3, r2
 800507c:	18ed      	addgt	r5, r5, r3
 800507e:	2600      	movs	r6, #0
 8005080:	341a      	adds	r4, #26
 8005082:	42b5      	cmp	r5, r6
 8005084:	d11a      	bne.n	80050bc <_printf_common+0xc8>
 8005086:	2000      	movs	r0, #0
 8005088:	e008      	b.n	800509c <_printf_common+0xa8>
 800508a:	2301      	movs	r3, #1
 800508c:	4652      	mov	r2, sl
 800508e:	4641      	mov	r1, r8
 8005090:	4638      	mov	r0, r7
 8005092:	47c8      	blx	r9
 8005094:	3001      	adds	r0, #1
 8005096:	d103      	bne.n	80050a0 <_printf_common+0xac>
 8005098:	f04f 30ff 	mov.w	r0, #4294967295
 800509c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a0:	3501      	adds	r5, #1
 80050a2:	e7c6      	b.n	8005032 <_printf_common+0x3e>
 80050a4:	18e1      	adds	r1, r4, r3
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	2030      	movs	r0, #48	@ 0x30
 80050aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050ae:	4422      	add	r2, r4
 80050b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050b8:	3302      	adds	r3, #2
 80050ba:	e7c7      	b.n	800504c <_printf_common+0x58>
 80050bc:	2301      	movs	r3, #1
 80050be:	4622      	mov	r2, r4
 80050c0:	4641      	mov	r1, r8
 80050c2:	4638      	mov	r0, r7
 80050c4:	47c8      	blx	r9
 80050c6:	3001      	adds	r0, #1
 80050c8:	d0e6      	beq.n	8005098 <_printf_common+0xa4>
 80050ca:	3601      	adds	r6, #1
 80050cc:	e7d9      	b.n	8005082 <_printf_common+0x8e>
	...

080050d0 <_printf_i>:
 80050d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050d4:	7e0f      	ldrb	r7, [r1, #24]
 80050d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050d8:	2f78      	cmp	r7, #120	@ 0x78
 80050da:	4691      	mov	r9, r2
 80050dc:	4680      	mov	r8, r0
 80050de:	460c      	mov	r4, r1
 80050e0:	469a      	mov	sl, r3
 80050e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80050e6:	d807      	bhi.n	80050f8 <_printf_i+0x28>
 80050e8:	2f62      	cmp	r7, #98	@ 0x62
 80050ea:	d80a      	bhi.n	8005102 <_printf_i+0x32>
 80050ec:	2f00      	cmp	r7, #0
 80050ee:	f000 80d2 	beq.w	8005296 <_printf_i+0x1c6>
 80050f2:	2f58      	cmp	r7, #88	@ 0x58
 80050f4:	f000 80b9 	beq.w	800526a <_printf_i+0x19a>
 80050f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005100:	e03a      	b.n	8005178 <_printf_i+0xa8>
 8005102:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005106:	2b15      	cmp	r3, #21
 8005108:	d8f6      	bhi.n	80050f8 <_printf_i+0x28>
 800510a:	a101      	add	r1, pc, #4	@ (adr r1, 8005110 <_printf_i+0x40>)
 800510c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005110:	08005169 	.word	0x08005169
 8005114:	0800517d 	.word	0x0800517d
 8005118:	080050f9 	.word	0x080050f9
 800511c:	080050f9 	.word	0x080050f9
 8005120:	080050f9 	.word	0x080050f9
 8005124:	080050f9 	.word	0x080050f9
 8005128:	0800517d 	.word	0x0800517d
 800512c:	080050f9 	.word	0x080050f9
 8005130:	080050f9 	.word	0x080050f9
 8005134:	080050f9 	.word	0x080050f9
 8005138:	080050f9 	.word	0x080050f9
 800513c:	0800527d 	.word	0x0800527d
 8005140:	080051a7 	.word	0x080051a7
 8005144:	08005237 	.word	0x08005237
 8005148:	080050f9 	.word	0x080050f9
 800514c:	080050f9 	.word	0x080050f9
 8005150:	0800529f 	.word	0x0800529f
 8005154:	080050f9 	.word	0x080050f9
 8005158:	080051a7 	.word	0x080051a7
 800515c:	080050f9 	.word	0x080050f9
 8005160:	080050f9 	.word	0x080050f9
 8005164:	0800523f 	.word	0x0800523f
 8005168:	6833      	ldr	r3, [r6, #0]
 800516a:	1d1a      	adds	r2, r3, #4
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6032      	str	r2, [r6, #0]
 8005170:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005174:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005178:	2301      	movs	r3, #1
 800517a:	e09d      	b.n	80052b8 <_printf_i+0x1e8>
 800517c:	6833      	ldr	r3, [r6, #0]
 800517e:	6820      	ldr	r0, [r4, #0]
 8005180:	1d19      	adds	r1, r3, #4
 8005182:	6031      	str	r1, [r6, #0]
 8005184:	0606      	lsls	r6, r0, #24
 8005186:	d501      	bpl.n	800518c <_printf_i+0xbc>
 8005188:	681d      	ldr	r5, [r3, #0]
 800518a:	e003      	b.n	8005194 <_printf_i+0xc4>
 800518c:	0645      	lsls	r5, r0, #25
 800518e:	d5fb      	bpl.n	8005188 <_printf_i+0xb8>
 8005190:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005194:	2d00      	cmp	r5, #0
 8005196:	da03      	bge.n	80051a0 <_printf_i+0xd0>
 8005198:	232d      	movs	r3, #45	@ 0x2d
 800519a:	426d      	negs	r5, r5
 800519c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051a0:	4859      	ldr	r0, [pc, #356]	@ (8005308 <_printf_i+0x238>)
 80051a2:	230a      	movs	r3, #10
 80051a4:	e011      	b.n	80051ca <_printf_i+0xfa>
 80051a6:	6821      	ldr	r1, [r4, #0]
 80051a8:	6833      	ldr	r3, [r6, #0]
 80051aa:	0608      	lsls	r0, r1, #24
 80051ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80051b0:	d402      	bmi.n	80051b8 <_printf_i+0xe8>
 80051b2:	0649      	lsls	r1, r1, #25
 80051b4:	bf48      	it	mi
 80051b6:	b2ad      	uxthmi	r5, r5
 80051b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80051ba:	4853      	ldr	r0, [pc, #332]	@ (8005308 <_printf_i+0x238>)
 80051bc:	6033      	str	r3, [r6, #0]
 80051be:	bf14      	ite	ne
 80051c0:	230a      	movne	r3, #10
 80051c2:	2308      	moveq	r3, #8
 80051c4:	2100      	movs	r1, #0
 80051c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051ca:	6866      	ldr	r6, [r4, #4]
 80051cc:	60a6      	str	r6, [r4, #8]
 80051ce:	2e00      	cmp	r6, #0
 80051d0:	bfa2      	ittt	ge
 80051d2:	6821      	ldrge	r1, [r4, #0]
 80051d4:	f021 0104 	bicge.w	r1, r1, #4
 80051d8:	6021      	strge	r1, [r4, #0]
 80051da:	b90d      	cbnz	r5, 80051e0 <_printf_i+0x110>
 80051dc:	2e00      	cmp	r6, #0
 80051de:	d04b      	beq.n	8005278 <_printf_i+0x1a8>
 80051e0:	4616      	mov	r6, r2
 80051e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80051e6:	fb03 5711 	mls	r7, r3, r1, r5
 80051ea:	5dc7      	ldrb	r7, [r0, r7]
 80051ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051f0:	462f      	mov	r7, r5
 80051f2:	42bb      	cmp	r3, r7
 80051f4:	460d      	mov	r5, r1
 80051f6:	d9f4      	bls.n	80051e2 <_printf_i+0x112>
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d10b      	bne.n	8005214 <_printf_i+0x144>
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	07df      	lsls	r7, r3, #31
 8005200:	d508      	bpl.n	8005214 <_printf_i+0x144>
 8005202:	6923      	ldr	r3, [r4, #16]
 8005204:	6861      	ldr	r1, [r4, #4]
 8005206:	4299      	cmp	r1, r3
 8005208:	bfde      	ittt	le
 800520a:	2330      	movle	r3, #48	@ 0x30
 800520c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005210:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005214:	1b92      	subs	r2, r2, r6
 8005216:	6122      	str	r2, [r4, #16]
 8005218:	f8cd a000 	str.w	sl, [sp]
 800521c:	464b      	mov	r3, r9
 800521e:	aa03      	add	r2, sp, #12
 8005220:	4621      	mov	r1, r4
 8005222:	4640      	mov	r0, r8
 8005224:	f7ff fee6 	bl	8004ff4 <_printf_common>
 8005228:	3001      	adds	r0, #1
 800522a:	d14a      	bne.n	80052c2 <_printf_i+0x1f2>
 800522c:	f04f 30ff 	mov.w	r0, #4294967295
 8005230:	b004      	add	sp, #16
 8005232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	f043 0320 	orr.w	r3, r3, #32
 800523c:	6023      	str	r3, [r4, #0]
 800523e:	4833      	ldr	r0, [pc, #204]	@ (800530c <_printf_i+0x23c>)
 8005240:	2778      	movs	r7, #120	@ 0x78
 8005242:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	6831      	ldr	r1, [r6, #0]
 800524a:	061f      	lsls	r7, r3, #24
 800524c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005250:	d402      	bmi.n	8005258 <_printf_i+0x188>
 8005252:	065f      	lsls	r7, r3, #25
 8005254:	bf48      	it	mi
 8005256:	b2ad      	uxthmi	r5, r5
 8005258:	6031      	str	r1, [r6, #0]
 800525a:	07d9      	lsls	r1, r3, #31
 800525c:	bf44      	itt	mi
 800525e:	f043 0320 	orrmi.w	r3, r3, #32
 8005262:	6023      	strmi	r3, [r4, #0]
 8005264:	b11d      	cbz	r5, 800526e <_printf_i+0x19e>
 8005266:	2310      	movs	r3, #16
 8005268:	e7ac      	b.n	80051c4 <_printf_i+0xf4>
 800526a:	4827      	ldr	r0, [pc, #156]	@ (8005308 <_printf_i+0x238>)
 800526c:	e7e9      	b.n	8005242 <_printf_i+0x172>
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	f023 0320 	bic.w	r3, r3, #32
 8005274:	6023      	str	r3, [r4, #0]
 8005276:	e7f6      	b.n	8005266 <_printf_i+0x196>
 8005278:	4616      	mov	r6, r2
 800527a:	e7bd      	b.n	80051f8 <_printf_i+0x128>
 800527c:	6833      	ldr	r3, [r6, #0]
 800527e:	6825      	ldr	r5, [r4, #0]
 8005280:	6961      	ldr	r1, [r4, #20]
 8005282:	1d18      	adds	r0, r3, #4
 8005284:	6030      	str	r0, [r6, #0]
 8005286:	062e      	lsls	r6, r5, #24
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	d501      	bpl.n	8005290 <_printf_i+0x1c0>
 800528c:	6019      	str	r1, [r3, #0]
 800528e:	e002      	b.n	8005296 <_printf_i+0x1c6>
 8005290:	0668      	lsls	r0, r5, #25
 8005292:	d5fb      	bpl.n	800528c <_printf_i+0x1bc>
 8005294:	8019      	strh	r1, [r3, #0]
 8005296:	2300      	movs	r3, #0
 8005298:	6123      	str	r3, [r4, #16]
 800529a:	4616      	mov	r6, r2
 800529c:	e7bc      	b.n	8005218 <_printf_i+0x148>
 800529e:	6833      	ldr	r3, [r6, #0]
 80052a0:	1d1a      	adds	r2, r3, #4
 80052a2:	6032      	str	r2, [r6, #0]
 80052a4:	681e      	ldr	r6, [r3, #0]
 80052a6:	6862      	ldr	r2, [r4, #4]
 80052a8:	2100      	movs	r1, #0
 80052aa:	4630      	mov	r0, r6
 80052ac:	f7fa ffc8 	bl	8000240 <memchr>
 80052b0:	b108      	cbz	r0, 80052b6 <_printf_i+0x1e6>
 80052b2:	1b80      	subs	r0, r0, r6
 80052b4:	6060      	str	r0, [r4, #4]
 80052b6:	6863      	ldr	r3, [r4, #4]
 80052b8:	6123      	str	r3, [r4, #16]
 80052ba:	2300      	movs	r3, #0
 80052bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052c0:	e7aa      	b.n	8005218 <_printf_i+0x148>
 80052c2:	6923      	ldr	r3, [r4, #16]
 80052c4:	4632      	mov	r2, r6
 80052c6:	4649      	mov	r1, r9
 80052c8:	4640      	mov	r0, r8
 80052ca:	47d0      	blx	sl
 80052cc:	3001      	adds	r0, #1
 80052ce:	d0ad      	beq.n	800522c <_printf_i+0x15c>
 80052d0:	6823      	ldr	r3, [r4, #0]
 80052d2:	079b      	lsls	r3, r3, #30
 80052d4:	d413      	bmi.n	80052fe <_printf_i+0x22e>
 80052d6:	68e0      	ldr	r0, [r4, #12]
 80052d8:	9b03      	ldr	r3, [sp, #12]
 80052da:	4298      	cmp	r0, r3
 80052dc:	bfb8      	it	lt
 80052de:	4618      	movlt	r0, r3
 80052e0:	e7a6      	b.n	8005230 <_printf_i+0x160>
 80052e2:	2301      	movs	r3, #1
 80052e4:	4632      	mov	r2, r6
 80052e6:	4649      	mov	r1, r9
 80052e8:	4640      	mov	r0, r8
 80052ea:	47d0      	blx	sl
 80052ec:	3001      	adds	r0, #1
 80052ee:	d09d      	beq.n	800522c <_printf_i+0x15c>
 80052f0:	3501      	adds	r5, #1
 80052f2:	68e3      	ldr	r3, [r4, #12]
 80052f4:	9903      	ldr	r1, [sp, #12]
 80052f6:	1a5b      	subs	r3, r3, r1
 80052f8:	42ab      	cmp	r3, r5
 80052fa:	dcf2      	bgt.n	80052e2 <_printf_i+0x212>
 80052fc:	e7eb      	b.n	80052d6 <_printf_i+0x206>
 80052fe:	2500      	movs	r5, #0
 8005300:	f104 0619 	add.w	r6, r4, #25
 8005304:	e7f5      	b.n	80052f2 <_printf_i+0x222>
 8005306:	bf00      	nop
 8005308:	080078ba 	.word	0x080078ba
 800530c:	080078cb 	.word	0x080078cb

08005310 <std>:
 8005310:	2300      	movs	r3, #0
 8005312:	b510      	push	{r4, lr}
 8005314:	4604      	mov	r4, r0
 8005316:	e9c0 3300 	strd	r3, r3, [r0]
 800531a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800531e:	6083      	str	r3, [r0, #8]
 8005320:	8181      	strh	r1, [r0, #12]
 8005322:	6643      	str	r3, [r0, #100]	@ 0x64
 8005324:	81c2      	strh	r2, [r0, #14]
 8005326:	6183      	str	r3, [r0, #24]
 8005328:	4619      	mov	r1, r3
 800532a:	2208      	movs	r2, #8
 800532c:	305c      	adds	r0, #92	@ 0x5c
 800532e:	f000 f914 	bl	800555a <memset>
 8005332:	4b0d      	ldr	r3, [pc, #52]	@ (8005368 <std+0x58>)
 8005334:	6263      	str	r3, [r4, #36]	@ 0x24
 8005336:	4b0d      	ldr	r3, [pc, #52]	@ (800536c <std+0x5c>)
 8005338:	62a3      	str	r3, [r4, #40]	@ 0x28
 800533a:	4b0d      	ldr	r3, [pc, #52]	@ (8005370 <std+0x60>)
 800533c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800533e:	4b0d      	ldr	r3, [pc, #52]	@ (8005374 <std+0x64>)
 8005340:	6323      	str	r3, [r4, #48]	@ 0x30
 8005342:	4b0d      	ldr	r3, [pc, #52]	@ (8005378 <std+0x68>)
 8005344:	6224      	str	r4, [r4, #32]
 8005346:	429c      	cmp	r4, r3
 8005348:	d006      	beq.n	8005358 <std+0x48>
 800534a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800534e:	4294      	cmp	r4, r2
 8005350:	d002      	beq.n	8005358 <std+0x48>
 8005352:	33d0      	adds	r3, #208	@ 0xd0
 8005354:	429c      	cmp	r4, r3
 8005356:	d105      	bne.n	8005364 <std+0x54>
 8005358:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800535c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005360:	f000 b978 	b.w	8005654 <__retarget_lock_init_recursive>
 8005364:	bd10      	pop	{r4, pc}
 8005366:	bf00      	nop
 8005368:	080054d5 	.word	0x080054d5
 800536c:	080054f7 	.word	0x080054f7
 8005370:	0800552f 	.word	0x0800552f
 8005374:	08005553 	.word	0x08005553
 8005378:	20000340 	.word	0x20000340

0800537c <stdio_exit_handler>:
 800537c:	4a02      	ldr	r2, [pc, #8]	@ (8005388 <stdio_exit_handler+0xc>)
 800537e:	4903      	ldr	r1, [pc, #12]	@ (800538c <stdio_exit_handler+0x10>)
 8005380:	4803      	ldr	r0, [pc, #12]	@ (8005390 <stdio_exit_handler+0x14>)
 8005382:	f000 b869 	b.w	8005458 <_fwalk_sglue>
 8005386:	bf00      	nop
 8005388:	20000010 	.word	0x20000010
 800538c:	08006ed9 	.word	0x08006ed9
 8005390:	20000020 	.word	0x20000020

08005394 <cleanup_stdio>:
 8005394:	6841      	ldr	r1, [r0, #4]
 8005396:	4b0c      	ldr	r3, [pc, #48]	@ (80053c8 <cleanup_stdio+0x34>)
 8005398:	4299      	cmp	r1, r3
 800539a:	b510      	push	{r4, lr}
 800539c:	4604      	mov	r4, r0
 800539e:	d001      	beq.n	80053a4 <cleanup_stdio+0x10>
 80053a0:	f001 fd9a 	bl	8006ed8 <_fflush_r>
 80053a4:	68a1      	ldr	r1, [r4, #8]
 80053a6:	4b09      	ldr	r3, [pc, #36]	@ (80053cc <cleanup_stdio+0x38>)
 80053a8:	4299      	cmp	r1, r3
 80053aa:	d002      	beq.n	80053b2 <cleanup_stdio+0x1e>
 80053ac:	4620      	mov	r0, r4
 80053ae:	f001 fd93 	bl	8006ed8 <_fflush_r>
 80053b2:	68e1      	ldr	r1, [r4, #12]
 80053b4:	4b06      	ldr	r3, [pc, #24]	@ (80053d0 <cleanup_stdio+0x3c>)
 80053b6:	4299      	cmp	r1, r3
 80053b8:	d004      	beq.n	80053c4 <cleanup_stdio+0x30>
 80053ba:	4620      	mov	r0, r4
 80053bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053c0:	f001 bd8a 	b.w	8006ed8 <_fflush_r>
 80053c4:	bd10      	pop	{r4, pc}
 80053c6:	bf00      	nop
 80053c8:	20000340 	.word	0x20000340
 80053cc:	200003a8 	.word	0x200003a8
 80053d0:	20000410 	.word	0x20000410

080053d4 <global_stdio_init.part.0>:
 80053d4:	b510      	push	{r4, lr}
 80053d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005404 <global_stdio_init.part.0+0x30>)
 80053d8:	4c0b      	ldr	r4, [pc, #44]	@ (8005408 <global_stdio_init.part.0+0x34>)
 80053da:	4a0c      	ldr	r2, [pc, #48]	@ (800540c <global_stdio_init.part.0+0x38>)
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	4620      	mov	r0, r4
 80053e0:	2200      	movs	r2, #0
 80053e2:	2104      	movs	r1, #4
 80053e4:	f7ff ff94 	bl	8005310 <std>
 80053e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053ec:	2201      	movs	r2, #1
 80053ee:	2109      	movs	r1, #9
 80053f0:	f7ff ff8e 	bl	8005310 <std>
 80053f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053f8:	2202      	movs	r2, #2
 80053fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053fe:	2112      	movs	r1, #18
 8005400:	f7ff bf86 	b.w	8005310 <std>
 8005404:	20000478 	.word	0x20000478
 8005408:	20000340 	.word	0x20000340
 800540c:	0800537d 	.word	0x0800537d

08005410 <__sfp_lock_acquire>:
 8005410:	4801      	ldr	r0, [pc, #4]	@ (8005418 <__sfp_lock_acquire+0x8>)
 8005412:	f000 b920 	b.w	8005656 <__retarget_lock_acquire_recursive>
 8005416:	bf00      	nop
 8005418:	20000481 	.word	0x20000481

0800541c <__sfp_lock_release>:
 800541c:	4801      	ldr	r0, [pc, #4]	@ (8005424 <__sfp_lock_release+0x8>)
 800541e:	f000 b91b 	b.w	8005658 <__retarget_lock_release_recursive>
 8005422:	bf00      	nop
 8005424:	20000481 	.word	0x20000481

08005428 <__sinit>:
 8005428:	b510      	push	{r4, lr}
 800542a:	4604      	mov	r4, r0
 800542c:	f7ff fff0 	bl	8005410 <__sfp_lock_acquire>
 8005430:	6a23      	ldr	r3, [r4, #32]
 8005432:	b11b      	cbz	r3, 800543c <__sinit+0x14>
 8005434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005438:	f7ff bff0 	b.w	800541c <__sfp_lock_release>
 800543c:	4b04      	ldr	r3, [pc, #16]	@ (8005450 <__sinit+0x28>)
 800543e:	6223      	str	r3, [r4, #32]
 8005440:	4b04      	ldr	r3, [pc, #16]	@ (8005454 <__sinit+0x2c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1f5      	bne.n	8005434 <__sinit+0xc>
 8005448:	f7ff ffc4 	bl	80053d4 <global_stdio_init.part.0>
 800544c:	e7f2      	b.n	8005434 <__sinit+0xc>
 800544e:	bf00      	nop
 8005450:	08005395 	.word	0x08005395
 8005454:	20000478 	.word	0x20000478

08005458 <_fwalk_sglue>:
 8005458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800545c:	4607      	mov	r7, r0
 800545e:	4688      	mov	r8, r1
 8005460:	4614      	mov	r4, r2
 8005462:	2600      	movs	r6, #0
 8005464:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005468:	f1b9 0901 	subs.w	r9, r9, #1
 800546c:	d505      	bpl.n	800547a <_fwalk_sglue+0x22>
 800546e:	6824      	ldr	r4, [r4, #0]
 8005470:	2c00      	cmp	r4, #0
 8005472:	d1f7      	bne.n	8005464 <_fwalk_sglue+0xc>
 8005474:	4630      	mov	r0, r6
 8005476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800547a:	89ab      	ldrh	r3, [r5, #12]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d907      	bls.n	8005490 <_fwalk_sglue+0x38>
 8005480:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005484:	3301      	adds	r3, #1
 8005486:	d003      	beq.n	8005490 <_fwalk_sglue+0x38>
 8005488:	4629      	mov	r1, r5
 800548a:	4638      	mov	r0, r7
 800548c:	47c0      	blx	r8
 800548e:	4306      	orrs	r6, r0
 8005490:	3568      	adds	r5, #104	@ 0x68
 8005492:	e7e9      	b.n	8005468 <_fwalk_sglue+0x10>

08005494 <siprintf>:
 8005494:	b40e      	push	{r1, r2, r3}
 8005496:	b500      	push	{lr}
 8005498:	b09c      	sub	sp, #112	@ 0x70
 800549a:	ab1d      	add	r3, sp, #116	@ 0x74
 800549c:	9002      	str	r0, [sp, #8]
 800549e:	9006      	str	r0, [sp, #24]
 80054a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80054a4:	4809      	ldr	r0, [pc, #36]	@ (80054cc <siprintf+0x38>)
 80054a6:	9107      	str	r1, [sp, #28]
 80054a8:	9104      	str	r1, [sp, #16]
 80054aa:	4909      	ldr	r1, [pc, #36]	@ (80054d0 <siprintf+0x3c>)
 80054ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80054b0:	9105      	str	r1, [sp, #20]
 80054b2:	6800      	ldr	r0, [r0, #0]
 80054b4:	9301      	str	r3, [sp, #4]
 80054b6:	a902      	add	r1, sp, #8
 80054b8:	f001 fb8e 	bl	8006bd8 <_svfiprintf_r>
 80054bc:	9b02      	ldr	r3, [sp, #8]
 80054be:	2200      	movs	r2, #0
 80054c0:	701a      	strb	r2, [r3, #0]
 80054c2:	b01c      	add	sp, #112	@ 0x70
 80054c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80054c8:	b003      	add	sp, #12
 80054ca:	4770      	bx	lr
 80054cc:	2000001c 	.word	0x2000001c
 80054d0:	ffff0208 	.word	0xffff0208

080054d4 <__sread>:
 80054d4:	b510      	push	{r4, lr}
 80054d6:	460c      	mov	r4, r1
 80054d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054dc:	f000 f86c 	bl	80055b8 <_read_r>
 80054e0:	2800      	cmp	r0, #0
 80054e2:	bfab      	itete	ge
 80054e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80054e6:	89a3      	ldrhlt	r3, [r4, #12]
 80054e8:	181b      	addge	r3, r3, r0
 80054ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80054ee:	bfac      	ite	ge
 80054f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80054f2:	81a3      	strhlt	r3, [r4, #12]
 80054f4:	bd10      	pop	{r4, pc}

080054f6 <__swrite>:
 80054f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054fa:	461f      	mov	r7, r3
 80054fc:	898b      	ldrh	r3, [r1, #12]
 80054fe:	05db      	lsls	r3, r3, #23
 8005500:	4605      	mov	r5, r0
 8005502:	460c      	mov	r4, r1
 8005504:	4616      	mov	r6, r2
 8005506:	d505      	bpl.n	8005514 <__swrite+0x1e>
 8005508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800550c:	2302      	movs	r3, #2
 800550e:	2200      	movs	r2, #0
 8005510:	f000 f840 	bl	8005594 <_lseek_r>
 8005514:	89a3      	ldrh	r3, [r4, #12]
 8005516:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800551a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800551e:	81a3      	strh	r3, [r4, #12]
 8005520:	4632      	mov	r2, r6
 8005522:	463b      	mov	r3, r7
 8005524:	4628      	mov	r0, r5
 8005526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800552a:	f000 b857 	b.w	80055dc <_write_r>

0800552e <__sseek>:
 800552e:	b510      	push	{r4, lr}
 8005530:	460c      	mov	r4, r1
 8005532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005536:	f000 f82d 	bl	8005594 <_lseek_r>
 800553a:	1c43      	adds	r3, r0, #1
 800553c:	89a3      	ldrh	r3, [r4, #12]
 800553e:	bf15      	itete	ne
 8005540:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005542:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005546:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800554a:	81a3      	strheq	r3, [r4, #12]
 800554c:	bf18      	it	ne
 800554e:	81a3      	strhne	r3, [r4, #12]
 8005550:	bd10      	pop	{r4, pc}

08005552 <__sclose>:
 8005552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005556:	f000 b80d 	b.w	8005574 <_close_r>

0800555a <memset>:
 800555a:	4402      	add	r2, r0
 800555c:	4603      	mov	r3, r0
 800555e:	4293      	cmp	r3, r2
 8005560:	d100      	bne.n	8005564 <memset+0xa>
 8005562:	4770      	bx	lr
 8005564:	f803 1b01 	strb.w	r1, [r3], #1
 8005568:	e7f9      	b.n	800555e <memset+0x4>
	...

0800556c <_localeconv_r>:
 800556c:	4800      	ldr	r0, [pc, #0]	@ (8005570 <_localeconv_r+0x4>)
 800556e:	4770      	bx	lr
 8005570:	2000015c 	.word	0x2000015c

08005574 <_close_r>:
 8005574:	b538      	push	{r3, r4, r5, lr}
 8005576:	4d06      	ldr	r5, [pc, #24]	@ (8005590 <_close_r+0x1c>)
 8005578:	2300      	movs	r3, #0
 800557a:	4604      	mov	r4, r0
 800557c:	4608      	mov	r0, r1
 800557e:	602b      	str	r3, [r5, #0]
 8005580:	f7fb fc18 	bl	8000db4 <_close>
 8005584:	1c43      	adds	r3, r0, #1
 8005586:	d102      	bne.n	800558e <_close_r+0x1a>
 8005588:	682b      	ldr	r3, [r5, #0]
 800558a:	b103      	cbz	r3, 800558e <_close_r+0x1a>
 800558c:	6023      	str	r3, [r4, #0]
 800558e:	bd38      	pop	{r3, r4, r5, pc}
 8005590:	2000047c 	.word	0x2000047c

08005594 <_lseek_r>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	4d07      	ldr	r5, [pc, #28]	@ (80055b4 <_lseek_r+0x20>)
 8005598:	4604      	mov	r4, r0
 800559a:	4608      	mov	r0, r1
 800559c:	4611      	mov	r1, r2
 800559e:	2200      	movs	r2, #0
 80055a0:	602a      	str	r2, [r5, #0]
 80055a2:	461a      	mov	r2, r3
 80055a4:	f7fb fc2d 	bl	8000e02 <_lseek>
 80055a8:	1c43      	adds	r3, r0, #1
 80055aa:	d102      	bne.n	80055b2 <_lseek_r+0x1e>
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	b103      	cbz	r3, 80055b2 <_lseek_r+0x1e>
 80055b0:	6023      	str	r3, [r4, #0]
 80055b2:	bd38      	pop	{r3, r4, r5, pc}
 80055b4:	2000047c 	.word	0x2000047c

080055b8 <_read_r>:
 80055b8:	b538      	push	{r3, r4, r5, lr}
 80055ba:	4d07      	ldr	r5, [pc, #28]	@ (80055d8 <_read_r+0x20>)
 80055bc:	4604      	mov	r4, r0
 80055be:	4608      	mov	r0, r1
 80055c0:	4611      	mov	r1, r2
 80055c2:	2200      	movs	r2, #0
 80055c4:	602a      	str	r2, [r5, #0]
 80055c6:	461a      	mov	r2, r3
 80055c8:	f7fb fbbb 	bl	8000d42 <_read>
 80055cc:	1c43      	adds	r3, r0, #1
 80055ce:	d102      	bne.n	80055d6 <_read_r+0x1e>
 80055d0:	682b      	ldr	r3, [r5, #0]
 80055d2:	b103      	cbz	r3, 80055d6 <_read_r+0x1e>
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	bd38      	pop	{r3, r4, r5, pc}
 80055d8:	2000047c 	.word	0x2000047c

080055dc <_write_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	4d07      	ldr	r5, [pc, #28]	@ (80055fc <_write_r+0x20>)
 80055e0:	4604      	mov	r4, r0
 80055e2:	4608      	mov	r0, r1
 80055e4:	4611      	mov	r1, r2
 80055e6:	2200      	movs	r2, #0
 80055e8:	602a      	str	r2, [r5, #0]
 80055ea:	461a      	mov	r2, r3
 80055ec:	f7fb fbc6 	bl	8000d7c <_write>
 80055f0:	1c43      	adds	r3, r0, #1
 80055f2:	d102      	bne.n	80055fa <_write_r+0x1e>
 80055f4:	682b      	ldr	r3, [r5, #0]
 80055f6:	b103      	cbz	r3, 80055fa <_write_r+0x1e>
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	bd38      	pop	{r3, r4, r5, pc}
 80055fc:	2000047c 	.word	0x2000047c

08005600 <__errno>:
 8005600:	4b01      	ldr	r3, [pc, #4]	@ (8005608 <__errno+0x8>)
 8005602:	6818      	ldr	r0, [r3, #0]
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	2000001c 	.word	0x2000001c

0800560c <__libc_init_array>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	4d0d      	ldr	r5, [pc, #52]	@ (8005644 <__libc_init_array+0x38>)
 8005610:	4c0d      	ldr	r4, [pc, #52]	@ (8005648 <__libc_init_array+0x3c>)
 8005612:	1b64      	subs	r4, r4, r5
 8005614:	10a4      	asrs	r4, r4, #2
 8005616:	2600      	movs	r6, #0
 8005618:	42a6      	cmp	r6, r4
 800561a:	d109      	bne.n	8005630 <__libc_init_array+0x24>
 800561c:	4d0b      	ldr	r5, [pc, #44]	@ (800564c <__libc_init_array+0x40>)
 800561e:	4c0c      	ldr	r4, [pc, #48]	@ (8005650 <__libc_init_array+0x44>)
 8005620:	f001 fff8 	bl	8007614 <_init>
 8005624:	1b64      	subs	r4, r4, r5
 8005626:	10a4      	asrs	r4, r4, #2
 8005628:	2600      	movs	r6, #0
 800562a:	42a6      	cmp	r6, r4
 800562c:	d105      	bne.n	800563a <__libc_init_array+0x2e>
 800562e:	bd70      	pop	{r4, r5, r6, pc}
 8005630:	f855 3b04 	ldr.w	r3, [r5], #4
 8005634:	4798      	blx	r3
 8005636:	3601      	adds	r6, #1
 8005638:	e7ee      	b.n	8005618 <__libc_init_array+0xc>
 800563a:	f855 3b04 	ldr.w	r3, [r5], #4
 800563e:	4798      	blx	r3
 8005640:	3601      	adds	r6, #1
 8005642:	e7f2      	b.n	800562a <__libc_init_array+0x1e>
 8005644:	08007c20 	.word	0x08007c20
 8005648:	08007c20 	.word	0x08007c20
 800564c:	08007c20 	.word	0x08007c20
 8005650:	08007c24 	.word	0x08007c24

08005654 <__retarget_lock_init_recursive>:
 8005654:	4770      	bx	lr

08005656 <__retarget_lock_acquire_recursive>:
 8005656:	4770      	bx	lr

08005658 <__retarget_lock_release_recursive>:
 8005658:	4770      	bx	lr

0800565a <quorem>:
 800565a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565e:	6903      	ldr	r3, [r0, #16]
 8005660:	690c      	ldr	r4, [r1, #16]
 8005662:	42a3      	cmp	r3, r4
 8005664:	4607      	mov	r7, r0
 8005666:	db7e      	blt.n	8005766 <quorem+0x10c>
 8005668:	3c01      	subs	r4, #1
 800566a:	f101 0814 	add.w	r8, r1, #20
 800566e:	00a3      	lsls	r3, r4, #2
 8005670:	f100 0514 	add.w	r5, r0, #20
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800567a:	9301      	str	r3, [sp, #4]
 800567c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005680:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005684:	3301      	adds	r3, #1
 8005686:	429a      	cmp	r2, r3
 8005688:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800568c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005690:	d32e      	bcc.n	80056f0 <quorem+0x96>
 8005692:	f04f 0a00 	mov.w	sl, #0
 8005696:	46c4      	mov	ip, r8
 8005698:	46ae      	mov	lr, r5
 800569a:	46d3      	mov	fp, sl
 800569c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80056a0:	b298      	uxth	r0, r3
 80056a2:	fb06 a000 	mla	r0, r6, r0, sl
 80056a6:	0c02      	lsrs	r2, r0, #16
 80056a8:	0c1b      	lsrs	r3, r3, #16
 80056aa:	fb06 2303 	mla	r3, r6, r3, r2
 80056ae:	f8de 2000 	ldr.w	r2, [lr]
 80056b2:	b280      	uxth	r0, r0
 80056b4:	b292      	uxth	r2, r2
 80056b6:	1a12      	subs	r2, r2, r0
 80056b8:	445a      	add	r2, fp
 80056ba:	f8de 0000 	ldr.w	r0, [lr]
 80056be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80056c8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80056cc:	b292      	uxth	r2, r2
 80056ce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80056d2:	45e1      	cmp	r9, ip
 80056d4:	f84e 2b04 	str.w	r2, [lr], #4
 80056d8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80056dc:	d2de      	bcs.n	800569c <quorem+0x42>
 80056de:	9b00      	ldr	r3, [sp, #0]
 80056e0:	58eb      	ldr	r3, [r5, r3]
 80056e2:	b92b      	cbnz	r3, 80056f0 <quorem+0x96>
 80056e4:	9b01      	ldr	r3, [sp, #4]
 80056e6:	3b04      	subs	r3, #4
 80056e8:	429d      	cmp	r5, r3
 80056ea:	461a      	mov	r2, r3
 80056ec:	d32f      	bcc.n	800574e <quorem+0xf4>
 80056ee:	613c      	str	r4, [r7, #16]
 80056f0:	4638      	mov	r0, r7
 80056f2:	f001 f90d 	bl	8006910 <__mcmp>
 80056f6:	2800      	cmp	r0, #0
 80056f8:	db25      	blt.n	8005746 <quorem+0xec>
 80056fa:	4629      	mov	r1, r5
 80056fc:	2000      	movs	r0, #0
 80056fe:	f858 2b04 	ldr.w	r2, [r8], #4
 8005702:	f8d1 c000 	ldr.w	ip, [r1]
 8005706:	fa1f fe82 	uxth.w	lr, r2
 800570a:	fa1f f38c 	uxth.w	r3, ip
 800570e:	eba3 030e 	sub.w	r3, r3, lr
 8005712:	4403      	add	r3, r0
 8005714:	0c12      	lsrs	r2, r2, #16
 8005716:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800571a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800571e:	b29b      	uxth	r3, r3
 8005720:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005724:	45c1      	cmp	r9, r8
 8005726:	f841 3b04 	str.w	r3, [r1], #4
 800572a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800572e:	d2e6      	bcs.n	80056fe <quorem+0xa4>
 8005730:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005734:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005738:	b922      	cbnz	r2, 8005744 <quorem+0xea>
 800573a:	3b04      	subs	r3, #4
 800573c:	429d      	cmp	r5, r3
 800573e:	461a      	mov	r2, r3
 8005740:	d30b      	bcc.n	800575a <quorem+0x100>
 8005742:	613c      	str	r4, [r7, #16]
 8005744:	3601      	adds	r6, #1
 8005746:	4630      	mov	r0, r6
 8005748:	b003      	add	sp, #12
 800574a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800574e:	6812      	ldr	r2, [r2, #0]
 8005750:	3b04      	subs	r3, #4
 8005752:	2a00      	cmp	r2, #0
 8005754:	d1cb      	bne.n	80056ee <quorem+0x94>
 8005756:	3c01      	subs	r4, #1
 8005758:	e7c6      	b.n	80056e8 <quorem+0x8e>
 800575a:	6812      	ldr	r2, [r2, #0]
 800575c:	3b04      	subs	r3, #4
 800575e:	2a00      	cmp	r2, #0
 8005760:	d1ef      	bne.n	8005742 <quorem+0xe8>
 8005762:	3c01      	subs	r4, #1
 8005764:	e7ea      	b.n	800573c <quorem+0xe2>
 8005766:	2000      	movs	r0, #0
 8005768:	e7ee      	b.n	8005748 <quorem+0xee>
 800576a:	0000      	movs	r0, r0
 800576c:	0000      	movs	r0, r0
	...

08005770 <_dtoa_r>:
 8005770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005774:	ed2d 8b02 	vpush	{d8}
 8005778:	69c7      	ldr	r7, [r0, #28]
 800577a:	b091      	sub	sp, #68	@ 0x44
 800577c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005780:	ec55 4b10 	vmov	r4, r5, d0
 8005784:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8005786:	9107      	str	r1, [sp, #28]
 8005788:	4681      	mov	r9, r0
 800578a:	9209      	str	r2, [sp, #36]	@ 0x24
 800578c:	930d      	str	r3, [sp, #52]	@ 0x34
 800578e:	b97f      	cbnz	r7, 80057b0 <_dtoa_r+0x40>
 8005790:	2010      	movs	r0, #16
 8005792:	f000 fd8d 	bl	80062b0 <malloc>
 8005796:	4602      	mov	r2, r0
 8005798:	f8c9 001c 	str.w	r0, [r9, #28]
 800579c:	b920      	cbnz	r0, 80057a8 <_dtoa_r+0x38>
 800579e:	4ba0      	ldr	r3, [pc, #640]	@ (8005a20 <_dtoa_r+0x2b0>)
 80057a0:	21ef      	movs	r1, #239	@ 0xef
 80057a2:	48a0      	ldr	r0, [pc, #640]	@ (8005a24 <_dtoa_r+0x2b4>)
 80057a4:	f001 fbf8 	bl	8006f98 <__assert_func>
 80057a8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80057ac:	6007      	str	r7, [r0, #0]
 80057ae:	60c7      	str	r7, [r0, #12]
 80057b0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80057b4:	6819      	ldr	r1, [r3, #0]
 80057b6:	b159      	cbz	r1, 80057d0 <_dtoa_r+0x60>
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	604a      	str	r2, [r1, #4]
 80057bc:	2301      	movs	r3, #1
 80057be:	4093      	lsls	r3, r2
 80057c0:	608b      	str	r3, [r1, #8]
 80057c2:	4648      	mov	r0, r9
 80057c4:	f000 fe6a 	bl	800649c <_Bfree>
 80057c8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	1e2b      	subs	r3, r5, #0
 80057d2:	bfbb      	ittet	lt
 80057d4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80057d8:	9303      	strlt	r3, [sp, #12]
 80057da:	2300      	movge	r3, #0
 80057dc:	2201      	movlt	r2, #1
 80057de:	bfac      	ite	ge
 80057e0:	6033      	strge	r3, [r6, #0]
 80057e2:	6032      	strlt	r2, [r6, #0]
 80057e4:	4b90      	ldr	r3, [pc, #576]	@ (8005a28 <_dtoa_r+0x2b8>)
 80057e6:	9e03      	ldr	r6, [sp, #12]
 80057e8:	43b3      	bics	r3, r6
 80057ea:	d110      	bne.n	800580e <_dtoa_r+0x9e>
 80057ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80057ee:	f242 730f 	movw	r3, #9999	@ 0x270f
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80057f8:	4323      	orrs	r3, r4
 80057fa:	f000 84de 	beq.w	80061ba <_dtoa_r+0xa4a>
 80057fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005800:	4f8a      	ldr	r7, [pc, #552]	@ (8005a2c <_dtoa_r+0x2bc>)
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 84e0 	beq.w	80061c8 <_dtoa_r+0xa58>
 8005808:	1cfb      	adds	r3, r7, #3
 800580a:	f000 bcdb 	b.w	80061c4 <_dtoa_r+0xa54>
 800580e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8005812:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800581a:	d10a      	bne.n	8005832 <_dtoa_r+0xc2>
 800581c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800581e:	2301      	movs	r3, #1
 8005820:	6013      	str	r3, [r2, #0]
 8005822:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005824:	b113      	cbz	r3, 800582c <_dtoa_r+0xbc>
 8005826:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8005828:	4b81      	ldr	r3, [pc, #516]	@ (8005a30 <_dtoa_r+0x2c0>)
 800582a:	6013      	str	r3, [r2, #0]
 800582c:	4f81      	ldr	r7, [pc, #516]	@ (8005a34 <_dtoa_r+0x2c4>)
 800582e:	f000 bccb 	b.w	80061c8 <_dtoa_r+0xa58>
 8005832:	aa0e      	add	r2, sp, #56	@ 0x38
 8005834:	a90f      	add	r1, sp, #60	@ 0x3c
 8005836:	4648      	mov	r0, r9
 8005838:	eeb0 0b48 	vmov.f64	d0, d8
 800583c:	f001 f918 	bl	8006a70 <__d2b>
 8005840:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8005844:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005846:	9001      	str	r0, [sp, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d045      	beq.n	80058d8 <_dtoa_r+0x168>
 800584c:	eeb0 7b48 	vmov.f64	d7, d8
 8005850:	ee18 1a90 	vmov	r1, s17
 8005854:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005858:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800585c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005860:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8005864:	2500      	movs	r5, #0
 8005866:	ee07 1a90 	vmov	s15, r1
 800586a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800586e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005a08 <_dtoa_r+0x298>
 8005872:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005876:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8005a10 <_dtoa_r+0x2a0>
 800587a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800587e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005a18 <_dtoa_r+0x2a8>
 8005882:	ee07 3a90 	vmov	s15, r3
 8005886:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800588a:	eeb0 7b46 	vmov.f64	d7, d6
 800588e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005892:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005896:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800589a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800589e:	ee16 8a90 	vmov	r8, s13
 80058a2:	d508      	bpl.n	80058b6 <_dtoa_r+0x146>
 80058a4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80058a8:	eeb4 6b47 	vcmp.f64	d6, d7
 80058ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b0:	bf18      	it	ne
 80058b2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80058b6:	f1b8 0f16 	cmp.w	r8, #22
 80058ba:	d82b      	bhi.n	8005914 <_dtoa_r+0x1a4>
 80058bc:	495e      	ldr	r1, [pc, #376]	@ (8005a38 <_dtoa_r+0x2c8>)
 80058be:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80058c2:	ed91 7b00 	vldr	d7, [r1]
 80058c6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80058ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ce:	d501      	bpl.n	80058d4 <_dtoa_r+0x164>
 80058d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80058d4:	2100      	movs	r1, #0
 80058d6:	e01e      	b.n	8005916 <_dtoa_r+0x1a6>
 80058d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80058da:	4413      	add	r3, r2
 80058dc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80058e0:	2920      	cmp	r1, #32
 80058e2:	bfc1      	itttt	gt
 80058e4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80058e8:	408e      	lslgt	r6, r1
 80058ea:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80058ee:	fa24 f101 	lsrgt.w	r1, r4, r1
 80058f2:	bfd6      	itet	le
 80058f4:	f1c1 0120 	rsble	r1, r1, #32
 80058f8:	4331      	orrgt	r1, r6
 80058fa:	fa04 f101 	lslle.w	r1, r4, r1
 80058fe:	ee07 1a90 	vmov	s15, r1
 8005902:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005906:	3b01      	subs	r3, #1
 8005908:	ee17 1a90 	vmov	r1, s15
 800590c:	2501      	movs	r5, #1
 800590e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8005912:	e7a8      	b.n	8005866 <_dtoa_r+0xf6>
 8005914:	2101      	movs	r1, #1
 8005916:	1ad2      	subs	r2, r2, r3
 8005918:	1e53      	subs	r3, r2, #1
 800591a:	9306      	str	r3, [sp, #24]
 800591c:	bf45      	ittet	mi
 800591e:	f1c2 0301 	rsbmi	r3, r2, #1
 8005922:	9305      	strmi	r3, [sp, #20]
 8005924:	2300      	movpl	r3, #0
 8005926:	2300      	movmi	r3, #0
 8005928:	bf4c      	ite	mi
 800592a:	9306      	strmi	r3, [sp, #24]
 800592c:	9305      	strpl	r3, [sp, #20]
 800592e:	f1b8 0f00 	cmp.w	r8, #0
 8005932:	910c      	str	r1, [sp, #48]	@ 0x30
 8005934:	db18      	blt.n	8005968 <_dtoa_r+0x1f8>
 8005936:	9b06      	ldr	r3, [sp, #24]
 8005938:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800593c:	4443      	add	r3, r8
 800593e:	9306      	str	r3, [sp, #24]
 8005940:	2300      	movs	r3, #0
 8005942:	9a07      	ldr	r2, [sp, #28]
 8005944:	2a09      	cmp	r2, #9
 8005946:	d849      	bhi.n	80059dc <_dtoa_r+0x26c>
 8005948:	2a05      	cmp	r2, #5
 800594a:	bfc4      	itt	gt
 800594c:	3a04      	subgt	r2, #4
 800594e:	9207      	strgt	r2, [sp, #28]
 8005950:	9a07      	ldr	r2, [sp, #28]
 8005952:	f1a2 0202 	sub.w	r2, r2, #2
 8005956:	bfcc      	ite	gt
 8005958:	2400      	movgt	r4, #0
 800595a:	2401      	movle	r4, #1
 800595c:	2a03      	cmp	r2, #3
 800595e:	d848      	bhi.n	80059f2 <_dtoa_r+0x282>
 8005960:	e8df f002 	tbb	[pc, r2]
 8005964:	3a2c2e0b 	.word	0x3a2c2e0b
 8005968:	9b05      	ldr	r3, [sp, #20]
 800596a:	2200      	movs	r2, #0
 800596c:	eba3 0308 	sub.w	r3, r3, r8
 8005970:	9305      	str	r3, [sp, #20]
 8005972:	920a      	str	r2, [sp, #40]	@ 0x28
 8005974:	f1c8 0300 	rsb	r3, r8, #0
 8005978:	e7e3      	b.n	8005942 <_dtoa_r+0x1d2>
 800597a:	2200      	movs	r2, #0
 800597c:	9208      	str	r2, [sp, #32]
 800597e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005980:	2a00      	cmp	r2, #0
 8005982:	dc39      	bgt.n	80059f8 <_dtoa_r+0x288>
 8005984:	f04f 0b01 	mov.w	fp, #1
 8005988:	46da      	mov	sl, fp
 800598a:	465a      	mov	r2, fp
 800598c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8005990:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8005994:	2100      	movs	r1, #0
 8005996:	2004      	movs	r0, #4
 8005998:	f100 0614 	add.w	r6, r0, #20
 800599c:	4296      	cmp	r6, r2
 800599e:	d930      	bls.n	8005a02 <_dtoa_r+0x292>
 80059a0:	6079      	str	r1, [r7, #4]
 80059a2:	4648      	mov	r0, r9
 80059a4:	9304      	str	r3, [sp, #16]
 80059a6:	f000 fd39 	bl	800641c <_Balloc>
 80059aa:	9b04      	ldr	r3, [sp, #16]
 80059ac:	4607      	mov	r7, r0
 80059ae:	2800      	cmp	r0, #0
 80059b0:	d146      	bne.n	8005a40 <_dtoa_r+0x2d0>
 80059b2:	4b22      	ldr	r3, [pc, #136]	@ (8005a3c <_dtoa_r+0x2cc>)
 80059b4:	4602      	mov	r2, r0
 80059b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80059ba:	e6f2      	b.n	80057a2 <_dtoa_r+0x32>
 80059bc:	2201      	movs	r2, #1
 80059be:	e7dd      	b.n	800597c <_dtoa_r+0x20c>
 80059c0:	2200      	movs	r2, #0
 80059c2:	9208      	str	r2, [sp, #32]
 80059c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059c6:	eb08 0b02 	add.w	fp, r8, r2
 80059ca:	f10b 0a01 	add.w	sl, fp, #1
 80059ce:	4652      	mov	r2, sl
 80059d0:	2a01      	cmp	r2, #1
 80059d2:	bfb8      	it	lt
 80059d4:	2201      	movlt	r2, #1
 80059d6:	e7db      	b.n	8005990 <_dtoa_r+0x220>
 80059d8:	2201      	movs	r2, #1
 80059da:	e7f2      	b.n	80059c2 <_dtoa_r+0x252>
 80059dc:	2401      	movs	r4, #1
 80059de:	2200      	movs	r2, #0
 80059e0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80059e4:	f04f 3bff 	mov.w	fp, #4294967295
 80059e8:	2100      	movs	r1, #0
 80059ea:	46da      	mov	sl, fp
 80059ec:	2212      	movs	r2, #18
 80059ee:	9109      	str	r1, [sp, #36]	@ 0x24
 80059f0:	e7ce      	b.n	8005990 <_dtoa_r+0x220>
 80059f2:	2201      	movs	r2, #1
 80059f4:	9208      	str	r2, [sp, #32]
 80059f6:	e7f5      	b.n	80059e4 <_dtoa_r+0x274>
 80059f8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80059fc:	46da      	mov	sl, fp
 80059fe:	465a      	mov	r2, fp
 8005a00:	e7c6      	b.n	8005990 <_dtoa_r+0x220>
 8005a02:	3101      	adds	r1, #1
 8005a04:	0040      	lsls	r0, r0, #1
 8005a06:	e7c7      	b.n	8005998 <_dtoa_r+0x228>
 8005a08:	636f4361 	.word	0x636f4361
 8005a0c:	3fd287a7 	.word	0x3fd287a7
 8005a10:	8b60c8b3 	.word	0x8b60c8b3
 8005a14:	3fc68a28 	.word	0x3fc68a28
 8005a18:	509f79fb 	.word	0x509f79fb
 8005a1c:	3fd34413 	.word	0x3fd34413
 8005a20:	080078e9 	.word	0x080078e9
 8005a24:	08007900 	.word	0x08007900
 8005a28:	7ff00000 	.word	0x7ff00000
 8005a2c:	080078e5 	.word	0x080078e5
 8005a30:	080078b9 	.word	0x080078b9
 8005a34:	080078b8 	.word	0x080078b8
 8005a38:	080079f8 	.word	0x080079f8
 8005a3c:	08007958 	.word	0x08007958
 8005a40:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8005a44:	f1ba 0f0e 	cmp.w	sl, #14
 8005a48:	6010      	str	r0, [r2, #0]
 8005a4a:	d86f      	bhi.n	8005b2c <_dtoa_r+0x3bc>
 8005a4c:	2c00      	cmp	r4, #0
 8005a4e:	d06d      	beq.n	8005b2c <_dtoa_r+0x3bc>
 8005a50:	f1b8 0f00 	cmp.w	r8, #0
 8005a54:	f340 80c2 	ble.w	8005bdc <_dtoa_r+0x46c>
 8005a58:	4aca      	ldr	r2, [pc, #808]	@ (8005d84 <_dtoa_r+0x614>)
 8005a5a:	f008 010f 	and.w	r1, r8, #15
 8005a5e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005a62:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8005a66:	ed92 7b00 	vldr	d7, [r2]
 8005a6a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8005a6e:	f000 80a9 	beq.w	8005bc4 <_dtoa_r+0x454>
 8005a72:	4ac5      	ldr	r2, [pc, #788]	@ (8005d88 <_dtoa_r+0x618>)
 8005a74:	ed92 6b08 	vldr	d6, [r2, #32]
 8005a78:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005a7c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005a80:	f001 010f 	and.w	r1, r1, #15
 8005a84:	2203      	movs	r2, #3
 8005a86:	48c0      	ldr	r0, [pc, #768]	@ (8005d88 <_dtoa_r+0x618>)
 8005a88:	2900      	cmp	r1, #0
 8005a8a:	f040 809d 	bne.w	8005bc8 <_dtoa_r+0x458>
 8005a8e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005a92:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005a96:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005a9a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005a9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005aa0:	2900      	cmp	r1, #0
 8005aa2:	f000 80c1 	beq.w	8005c28 <_dtoa_r+0x4b8>
 8005aa6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8005aaa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab2:	f140 80b9 	bpl.w	8005c28 <_dtoa_r+0x4b8>
 8005ab6:	f1ba 0f00 	cmp.w	sl, #0
 8005aba:	f000 80b5 	beq.w	8005c28 <_dtoa_r+0x4b8>
 8005abe:	f1bb 0f00 	cmp.w	fp, #0
 8005ac2:	dd31      	ble.n	8005b28 <_dtoa_r+0x3b8>
 8005ac4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8005ac8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005acc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005ad0:	f108 31ff 	add.w	r1, r8, #4294967295
 8005ad4:	9104      	str	r1, [sp, #16]
 8005ad6:	3201      	adds	r2, #1
 8005ad8:	465c      	mov	r4, fp
 8005ada:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005ade:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8005ae2:	ee07 2a90 	vmov	s15, r2
 8005ae6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005aea:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005aee:	ee15 2a90 	vmov	r2, s11
 8005af2:	ec51 0b15 	vmov	r0, r1, d5
 8005af6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8005afa:	2c00      	cmp	r4, #0
 8005afc:	f040 8098 	bne.w	8005c30 <_dtoa_r+0x4c0>
 8005b00:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005b04:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005b08:	ec41 0b17 	vmov	d7, r0, r1
 8005b0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b14:	f300 8261 	bgt.w	8005fda <_dtoa_r+0x86a>
 8005b18:	eeb1 7b47 	vneg.f64	d7, d7
 8005b1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b24:	f100 80f5 	bmi.w	8005d12 <_dtoa_r+0x5a2>
 8005b28:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005b2c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005b2e:	2a00      	cmp	r2, #0
 8005b30:	f2c0 812c 	blt.w	8005d8c <_dtoa_r+0x61c>
 8005b34:	f1b8 0f0e 	cmp.w	r8, #14
 8005b38:	f300 8128 	bgt.w	8005d8c <_dtoa_r+0x61c>
 8005b3c:	4b91      	ldr	r3, [pc, #580]	@ (8005d84 <_dtoa_r+0x614>)
 8005b3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005b42:	ed93 6b00 	vldr	d6, [r3]
 8005b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	da03      	bge.n	8005b54 <_dtoa_r+0x3e4>
 8005b4c:	f1ba 0f00 	cmp.w	sl, #0
 8005b50:	f340 80d2 	ble.w	8005cf8 <_dtoa_r+0x588>
 8005b54:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8005b58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b5c:	463e      	mov	r6, r7
 8005b5e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005b62:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005b66:	ee15 3a10 	vmov	r3, s10
 8005b6a:	3330      	adds	r3, #48	@ 0x30
 8005b6c:	f806 3b01 	strb.w	r3, [r6], #1
 8005b70:	1bf3      	subs	r3, r6, r7
 8005b72:	459a      	cmp	sl, r3
 8005b74:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005b78:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005b7c:	f040 80f8 	bne.w	8005d70 <_dtoa_r+0x600>
 8005b80:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005b84:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b8c:	f300 80dd 	bgt.w	8005d4a <_dtoa_r+0x5da>
 8005b90:	eeb4 7b46 	vcmp.f64	d7, d6
 8005b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b98:	d104      	bne.n	8005ba4 <_dtoa_r+0x434>
 8005b9a:	ee15 3a10 	vmov	r3, s10
 8005b9e:	07db      	lsls	r3, r3, #31
 8005ba0:	f100 80d3 	bmi.w	8005d4a <_dtoa_r+0x5da>
 8005ba4:	9901      	ldr	r1, [sp, #4]
 8005ba6:	4648      	mov	r0, r9
 8005ba8:	f000 fc78 	bl	800649c <_Bfree>
 8005bac:	2300      	movs	r3, #0
 8005bae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005bb0:	7033      	strb	r3, [r6, #0]
 8005bb2:	f108 0301 	add.w	r3, r8, #1
 8005bb6:	6013      	str	r3, [r2, #0]
 8005bb8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 8304 	beq.w	80061c8 <_dtoa_r+0xa58>
 8005bc0:	601e      	str	r6, [r3, #0]
 8005bc2:	e301      	b.n	80061c8 <_dtoa_r+0xa58>
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	e75e      	b.n	8005a86 <_dtoa_r+0x316>
 8005bc8:	07cc      	lsls	r4, r1, #31
 8005bca:	d504      	bpl.n	8005bd6 <_dtoa_r+0x466>
 8005bcc:	ed90 6b00 	vldr	d6, [r0]
 8005bd0:	3201      	adds	r2, #1
 8005bd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005bd6:	1049      	asrs	r1, r1, #1
 8005bd8:	3008      	adds	r0, #8
 8005bda:	e755      	b.n	8005a88 <_dtoa_r+0x318>
 8005bdc:	d022      	beq.n	8005c24 <_dtoa_r+0x4b4>
 8005bde:	f1c8 0100 	rsb	r1, r8, #0
 8005be2:	4a68      	ldr	r2, [pc, #416]	@ (8005d84 <_dtoa_r+0x614>)
 8005be4:	f001 000f 	and.w	r0, r1, #15
 8005be8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005bec:	ed92 7b00 	vldr	d7, [r2]
 8005bf0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005bf4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005bf8:	4863      	ldr	r0, [pc, #396]	@ (8005d88 <_dtoa_r+0x618>)
 8005bfa:	1109      	asrs	r1, r1, #4
 8005bfc:	2400      	movs	r4, #0
 8005bfe:	2202      	movs	r2, #2
 8005c00:	b929      	cbnz	r1, 8005c0e <_dtoa_r+0x49e>
 8005c02:	2c00      	cmp	r4, #0
 8005c04:	f43f af49 	beq.w	8005a9a <_dtoa_r+0x32a>
 8005c08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c0c:	e745      	b.n	8005a9a <_dtoa_r+0x32a>
 8005c0e:	07ce      	lsls	r6, r1, #31
 8005c10:	d505      	bpl.n	8005c1e <_dtoa_r+0x4ae>
 8005c12:	ed90 6b00 	vldr	d6, [r0]
 8005c16:	3201      	adds	r2, #1
 8005c18:	2401      	movs	r4, #1
 8005c1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005c1e:	1049      	asrs	r1, r1, #1
 8005c20:	3008      	adds	r0, #8
 8005c22:	e7ed      	b.n	8005c00 <_dtoa_r+0x490>
 8005c24:	2202      	movs	r2, #2
 8005c26:	e738      	b.n	8005a9a <_dtoa_r+0x32a>
 8005c28:	f8cd 8010 	str.w	r8, [sp, #16]
 8005c2c:	4654      	mov	r4, sl
 8005c2e:	e754      	b.n	8005ada <_dtoa_r+0x36a>
 8005c30:	4a54      	ldr	r2, [pc, #336]	@ (8005d84 <_dtoa_r+0x614>)
 8005c32:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8005c36:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005c3a:	9a08      	ldr	r2, [sp, #32]
 8005c3c:	ec41 0b17 	vmov	d7, r0, r1
 8005c40:	443c      	add	r4, r7
 8005c42:	b34a      	cbz	r2, 8005c98 <_dtoa_r+0x528>
 8005c44:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8005c48:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8005c4c:	463e      	mov	r6, r7
 8005c4e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005c52:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8005c56:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005c5a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005c5e:	ee14 2a90 	vmov	r2, s9
 8005c62:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005c66:	3230      	adds	r2, #48	@ 0x30
 8005c68:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005c6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c74:	f806 2b01 	strb.w	r2, [r6], #1
 8005c78:	d438      	bmi.n	8005cec <_dtoa_r+0x57c>
 8005c7a:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005c7e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c86:	d462      	bmi.n	8005d4e <_dtoa_r+0x5de>
 8005c88:	42a6      	cmp	r6, r4
 8005c8a:	f43f af4d 	beq.w	8005b28 <_dtoa_r+0x3b8>
 8005c8e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005c92:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005c96:	e7e0      	b.n	8005c5a <_dtoa_r+0x4ea>
 8005c98:	4621      	mov	r1, r4
 8005c9a:	463e      	mov	r6, r7
 8005c9c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005ca0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8005ca4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005ca8:	ee14 2a90 	vmov	r2, s9
 8005cac:	3230      	adds	r2, #48	@ 0x30
 8005cae:	f806 2b01 	strb.w	r2, [r6], #1
 8005cb2:	42a6      	cmp	r6, r4
 8005cb4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005cb8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005cbc:	d119      	bne.n	8005cf2 <_dtoa_r+0x582>
 8005cbe:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8005cc2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005cc6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cce:	dc3e      	bgt.n	8005d4e <_dtoa_r+0x5de>
 8005cd0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005cd4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cdc:	f57f af24 	bpl.w	8005b28 <_dtoa_r+0x3b8>
 8005ce0:	460e      	mov	r6, r1
 8005ce2:	3901      	subs	r1, #1
 8005ce4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005ce8:	2b30      	cmp	r3, #48	@ 0x30
 8005cea:	d0f9      	beq.n	8005ce0 <_dtoa_r+0x570>
 8005cec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005cf0:	e758      	b.n	8005ba4 <_dtoa_r+0x434>
 8005cf2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005cf6:	e7d5      	b.n	8005ca4 <_dtoa_r+0x534>
 8005cf8:	d10b      	bne.n	8005d12 <_dtoa_r+0x5a2>
 8005cfa:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005cfe:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005d02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d06:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d0e:	f2c0 8161 	blt.w	8005fd4 <_dtoa_r+0x864>
 8005d12:	2400      	movs	r4, #0
 8005d14:	4625      	mov	r5, r4
 8005d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d18:	43db      	mvns	r3, r3
 8005d1a:	9304      	str	r3, [sp, #16]
 8005d1c:	463e      	mov	r6, r7
 8005d1e:	f04f 0800 	mov.w	r8, #0
 8005d22:	4621      	mov	r1, r4
 8005d24:	4648      	mov	r0, r9
 8005d26:	f000 fbb9 	bl	800649c <_Bfree>
 8005d2a:	2d00      	cmp	r5, #0
 8005d2c:	d0de      	beq.n	8005cec <_dtoa_r+0x57c>
 8005d2e:	f1b8 0f00 	cmp.w	r8, #0
 8005d32:	d005      	beq.n	8005d40 <_dtoa_r+0x5d0>
 8005d34:	45a8      	cmp	r8, r5
 8005d36:	d003      	beq.n	8005d40 <_dtoa_r+0x5d0>
 8005d38:	4641      	mov	r1, r8
 8005d3a:	4648      	mov	r0, r9
 8005d3c:	f000 fbae 	bl	800649c <_Bfree>
 8005d40:	4629      	mov	r1, r5
 8005d42:	4648      	mov	r0, r9
 8005d44:	f000 fbaa 	bl	800649c <_Bfree>
 8005d48:	e7d0      	b.n	8005cec <_dtoa_r+0x57c>
 8005d4a:	f8cd 8010 	str.w	r8, [sp, #16]
 8005d4e:	4633      	mov	r3, r6
 8005d50:	461e      	mov	r6, r3
 8005d52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d56:	2a39      	cmp	r2, #57	@ 0x39
 8005d58:	d106      	bne.n	8005d68 <_dtoa_r+0x5f8>
 8005d5a:	429f      	cmp	r7, r3
 8005d5c:	d1f8      	bne.n	8005d50 <_dtoa_r+0x5e0>
 8005d5e:	9a04      	ldr	r2, [sp, #16]
 8005d60:	3201      	adds	r2, #1
 8005d62:	9204      	str	r2, [sp, #16]
 8005d64:	2230      	movs	r2, #48	@ 0x30
 8005d66:	703a      	strb	r2, [r7, #0]
 8005d68:	781a      	ldrb	r2, [r3, #0]
 8005d6a:	3201      	adds	r2, #1
 8005d6c:	701a      	strb	r2, [r3, #0]
 8005d6e:	e7bd      	b.n	8005cec <_dtoa_r+0x57c>
 8005d70:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005d74:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d7c:	f47f aeef 	bne.w	8005b5e <_dtoa_r+0x3ee>
 8005d80:	e710      	b.n	8005ba4 <_dtoa_r+0x434>
 8005d82:	bf00      	nop
 8005d84:	080079f8 	.word	0x080079f8
 8005d88:	080079d0 	.word	0x080079d0
 8005d8c:	9908      	ldr	r1, [sp, #32]
 8005d8e:	2900      	cmp	r1, #0
 8005d90:	f000 80e3 	beq.w	8005f5a <_dtoa_r+0x7ea>
 8005d94:	9907      	ldr	r1, [sp, #28]
 8005d96:	2901      	cmp	r1, #1
 8005d98:	f300 80c8 	bgt.w	8005f2c <_dtoa_r+0x7bc>
 8005d9c:	2d00      	cmp	r5, #0
 8005d9e:	f000 80c1 	beq.w	8005f24 <_dtoa_r+0x7b4>
 8005da2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005da6:	9e05      	ldr	r6, [sp, #20]
 8005da8:	461c      	mov	r4, r3
 8005daa:	9304      	str	r3, [sp, #16]
 8005dac:	9b05      	ldr	r3, [sp, #20]
 8005dae:	4413      	add	r3, r2
 8005db0:	9305      	str	r3, [sp, #20]
 8005db2:	9b06      	ldr	r3, [sp, #24]
 8005db4:	2101      	movs	r1, #1
 8005db6:	4413      	add	r3, r2
 8005db8:	4648      	mov	r0, r9
 8005dba:	9306      	str	r3, [sp, #24]
 8005dbc:	f000 fc22 	bl	8006604 <__i2b>
 8005dc0:	9b04      	ldr	r3, [sp, #16]
 8005dc2:	4605      	mov	r5, r0
 8005dc4:	b166      	cbz	r6, 8005de0 <_dtoa_r+0x670>
 8005dc6:	9a06      	ldr	r2, [sp, #24]
 8005dc8:	2a00      	cmp	r2, #0
 8005dca:	dd09      	ble.n	8005de0 <_dtoa_r+0x670>
 8005dcc:	42b2      	cmp	r2, r6
 8005dce:	9905      	ldr	r1, [sp, #20]
 8005dd0:	bfa8      	it	ge
 8005dd2:	4632      	movge	r2, r6
 8005dd4:	1a89      	subs	r1, r1, r2
 8005dd6:	9105      	str	r1, [sp, #20]
 8005dd8:	9906      	ldr	r1, [sp, #24]
 8005dda:	1ab6      	subs	r6, r6, r2
 8005ddc:	1a8a      	subs	r2, r1, r2
 8005dde:	9206      	str	r2, [sp, #24]
 8005de0:	b1fb      	cbz	r3, 8005e22 <_dtoa_r+0x6b2>
 8005de2:	9a08      	ldr	r2, [sp, #32]
 8005de4:	2a00      	cmp	r2, #0
 8005de6:	f000 80bc 	beq.w	8005f62 <_dtoa_r+0x7f2>
 8005dea:	b19c      	cbz	r4, 8005e14 <_dtoa_r+0x6a4>
 8005dec:	4629      	mov	r1, r5
 8005dee:	4622      	mov	r2, r4
 8005df0:	4648      	mov	r0, r9
 8005df2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005df4:	f000 fcc6 	bl	8006784 <__pow5mult>
 8005df8:	9a01      	ldr	r2, [sp, #4]
 8005dfa:	4601      	mov	r1, r0
 8005dfc:	4605      	mov	r5, r0
 8005dfe:	4648      	mov	r0, r9
 8005e00:	f000 fc16 	bl	8006630 <__multiply>
 8005e04:	9901      	ldr	r1, [sp, #4]
 8005e06:	9004      	str	r0, [sp, #16]
 8005e08:	4648      	mov	r0, r9
 8005e0a:	f000 fb47 	bl	800649c <_Bfree>
 8005e0e:	9a04      	ldr	r2, [sp, #16]
 8005e10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e12:	9201      	str	r2, [sp, #4]
 8005e14:	1b1a      	subs	r2, r3, r4
 8005e16:	d004      	beq.n	8005e22 <_dtoa_r+0x6b2>
 8005e18:	9901      	ldr	r1, [sp, #4]
 8005e1a:	4648      	mov	r0, r9
 8005e1c:	f000 fcb2 	bl	8006784 <__pow5mult>
 8005e20:	9001      	str	r0, [sp, #4]
 8005e22:	2101      	movs	r1, #1
 8005e24:	4648      	mov	r0, r9
 8005e26:	f000 fbed 	bl	8006604 <__i2b>
 8005e2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e2c:	4604      	mov	r4, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 81d0 	beq.w	80061d4 <_dtoa_r+0xa64>
 8005e34:	461a      	mov	r2, r3
 8005e36:	4601      	mov	r1, r0
 8005e38:	4648      	mov	r0, r9
 8005e3a:	f000 fca3 	bl	8006784 <__pow5mult>
 8005e3e:	9b07      	ldr	r3, [sp, #28]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	4604      	mov	r4, r0
 8005e44:	f300 8095 	bgt.w	8005f72 <_dtoa_r+0x802>
 8005e48:	9b02      	ldr	r3, [sp, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f040 808b 	bne.w	8005f66 <_dtoa_r+0x7f6>
 8005e50:	9b03      	ldr	r3, [sp, #12]
 8005e52:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8005e56:	2a00      	cmp	r2, #0
 8005e58:	f040 8087 	bne.w	8005f6a <_dtoa_r+0x7fa>
 8005e5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005e60:	0d12      	lsrs	r2, r2, #20
 8005e62:	0512      	lsls	r2, r2, #20
 8005e64:	2a00      	cmp	r2, #0
 8005e66:	f000 8082 	beq.w	8005f6e <_dtoa_r+0x7fe>
 8005e6a:	9b05      	ldr	r3, [sp, #20]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	9305      	str	r3, [sp, #20]
 8005e70:	9b06      	ldr	r3, [sp, #24]
 8005e72:	3301      	adds	r3, #1
 8005e74:	9306      	str	r3, [sp, #24]
 8005e76:	2301      	movs	r3, #1
 8005e78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 81af 	beq.w	80061e0 <_dtoa_r+0xa70>
 8005e82:	6922      	ldr	r2, [r4, #16]
 8005e84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005e88:	6910      	ldr	r0, [r2, #16]
 8005e8a:	f000 fb6f 	bl	800656c <__hi0bits>
 8005e8e:	f1c0 0020 	rsb	r0, r0, #32
 8005e92:	9b06      	ldr	r3, [sp, #24]
 8005e94:	4418      	add	r0, r3
 8005e96:	f010 001f 	ands.w	r0, r0, #31
 8005e9a:	d076      	beq.n	8005f8a <_dtoa_r+0x81a>
 8005e9c:	f1c0 0220 	rsb	r2, r0, #32
 8005ea0:	2a04      	cmp	r2, #4
 8005ea2:	dd69      	ble.n	8005f78 <_dtoa_r+0x808>
 8005ea4:	9b05      	ldr	r3, [sp, #20]
 8005ea6:	f1c0 001c 	rsb	r0, r0, #28
 8005eaa:	4403      	add	r3, r0
 8005eac:	9305      	str	r3, [sp, #20]
 8005eae:	9b06      	ldr	r3, [sp, #24]
 8005eb0:	4406      	add	r6, r0
 8005eb2:	4403      	add	r3, r0
 8005eb4:	9306      	str	r3, [sp, #24]
 8005eb6:	9b05      	ldr	r3, [sp, #20]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	dd05      	ble.n	8005ec8 <_dtoa_r+0x758>
 8005ebc:	9901      	ldr	r1, [sp, #4]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	4648      	mov	r0, r9
 8005ec2:	f000 fcb9 	bl	8006838 <__lshift>
 8005ec6:	9001      	str	r0, [sp, #4]
 8005ec8:	9b06      	ldr	r3, [sp, #24]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	dd05      	ble.n	8005eda <_dtoa_r+0x76a>
 8005ece:	4621      	mov	r1, r4
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	4648      	mov	r0, r9
 8005ed4:	f000 fcb0 	bl	8006838 <__lshift>
 8005ed8:	4604      	mov	r4, r0
 8005eda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d056      	beq.n	8005f8e <_dtoa_r+0x81e>
 8005ee0:	9801      	ldr	r0, [sp, #4]
 8005ee2:	4621      	mov	r1, r4
 8005ee4:	f000 fd14 	bl	8006910 <__mcmp>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	da50      	bge.n	8005f8e <_dtoa_r+0x81e>
 8005eec:	f108 33ff 	add.w	r3, r8, #4294967295
 8005ef0:	9304      	str	r3, [sp, #16]
 8005ef2:	9901      	ldr	r1, [sp, #4]
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	220a      	movs	r2, #10
 8005ef8:	4648      	mov	r0, r9
 8005efa:	f000 faf1 	bl	80064e0 <__multadd>
 8005efe:	9b08      	ldr	r3, [sp, #32]
 8005f00:	9001      	str	r0, [sp, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 816e 	beq.w	80061e4 <_dtoa_r+0xa74>
 8005f08:	4629      	mov	r1, r5
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	220a      	movs	r2, #10
 8005f0e:	4648      	mov	r0, r9
 8005f10:	f000 fae6 	bl	80064e0 <__multadd>
 8005f14:	f1bb 0f00 	cmp.w	fp, #0
 8005f18:	4605      	mov	r5, r0
 8005f1a:	dc64      	bgt.n	8005fe6 <_dtoa_r+0x876>
 8005f1c:	9b07      	ldr	r3, [sp, #28]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	dc3e      	bgt.n	8005fa0 <_dtoa_r+0x830>
 8005f22:	e060      	b.n	8005fe6 <_dtoa_r+0x876>
 8005f24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f26:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005f2a:	e73c      	b.n	8005da6 <_dtoa_r+0x636>
 8005f2c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8005f30:	42a3      	cmp	r3, r4
 8005f32:	bfbf      	itttt	lt
 8005f34:	1ae2      	sublt	r2, r4, r3
 8005f36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005f38:	189b      	addlt	r3, r3, r2
 8005f3a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8005f3c:	bfae      	itee	ge
 8005f3e:	1b1c      	subge	r4, r3, r4
 8005f40:	4623      	movlt	r3, r4
 8005f42:	2400      	movlt	r4, #0
 8005f44:	f1ba 0f00 	cmp.w	sl, #0
 8005f48:	bfb5      	itete	lt
 8005f4a:	9a05      	ldrlt	r2, [sp, #20]
 8005f4c:	9e05      	ldrge	r6, [sp, #20]
 8005f4e:	eba2 060a 	sublt.w	r6, r2, sl
 8005f52:	4652      	movge	r2, sl
 8005f54:	bfb8      	it	lt
 8005f56:	2200      	movlt	r2, #0
 8005f58:	e727      	b.n	8005daa <_dtoa_r+0x63a>
 8005f5a:	9e05      	ldr	r6, [sp, #20]
 8005f5c:	9d08      	ldr	r5, [sp, #32]
 8005f5e:	461c      	mov	r4, r3
 8005f60:	e730      	b.n	8005dc4 <_dtoa_r+0x654>
 8005f62:	461a      	mov	r2, r3
 8005f64:	e758      	b.n	8005e18 <_dtoa_r+0x6a8>
 8005f66:	2300      	movs	r3, #0
 8005f68:	e786      	b.n	8005e78 <_dtoa_r+0x708>
 8005f6a:	9b02      	ldr	r3, [sp, #8]
 8005f6c:	e784      	b.n	8005e78 <_dtoa_r+0x708>
 8005f6e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005f70:	e783      	b.n	8005e7a <_dtoa_r+0x70a>
 8005f72:	2300      	movs	r3, #0
 8005f74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f76:	e784      	b.n	8005e82 <_dtoa_r+0x712>
 8005f78:	d09d      	beq.n	8005eb6 <_dtoa_r+0x746>
 8005f7a:	9b05      	ldr	r3, [sp, #20]
 8005f7c:	321c      	adds	r2, #28
 8005f7e:	4413      	add	r3, r2
 8005f80:	9305      	str	r3, [sp, #20]
 8005f82:	9b06      	ldr	r3, [sp, #24]
 8005f84:	4416      	add	r6, r2
 8005f86:	4413      	add	r3, r2
 8005f88:	e794      	b.n	8005eb4 <_dtoa_r+0x744>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	e7f5      	b.n	8005f7a <_dtoa_r+0x80a>
 8005f8e:	f1ba 0f00 	cmp.w	sl, #0
 8005f92:	f8cd 8010 	str.w	r8, [sp, #16]
 8005f96:	46d3      	mov	fp, sl
 8005f98:	dc21      	bgt.n	8005fde <_dtoa_r+0x86e>
 8005f9a:	9b07      	ldr	r3, [sp, #28]
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	dd1e      	ble.n	8005fde <_dtoa_r+0x86e>
 8005fa0:	f1bb 0f00 	cmp.w	fp, #0
 8005fa4:	f47f aeb7 	bne.w	8005d16 <_dtoa_r+0x5a6>
 8005fa8:	4621      	mov	r1, r4
 8005faa:	465b      	mov	r3, fp
 8005fac:	2205      	movs	r2, #5
 8005fae:	4648      	mov	r0, r9
 8005fb0:	f000 fa96 	bl	80064e0 <__multadd>
 8005fb4:	4601      	mov	r1, r0
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	9801      	ldr	r0, [sp, #4]
 8005fba:	f000 fca9 	bl	8006910 <__mcmp>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	f77f aea9 	ble.w	8005d16 <_dtoa_r+0x5a6>
 8005fc4:	463e      	mov	r6, r7
 8005fc6:	2331      	movs	r3, #49	@ 0x31
 8005fc8:	f806 3b01 	strb.w	r3, [r6], #1
 8005fcc:	9b04      	ldr	r3, [sp, #16]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	9304      	str	r3, [sp, #16]
 8005fd2:	e6a4      	b.n	8005d1e <_dtoa_r+0x5ae>
 8005fd4:	f8cd 8010 	str.w	r8, [sp, #16]
 8005fd8:	4654      	mov	r4, sl
 8005fda:	4625      	mov	r5, r4
 8005fdc:	e7f2      	b.n	8005fc4 <_dtoa_r+0x854>
 8005fde:	9b08      	ldr	r3, [sp, #32]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 8103 	beq.w	80061ec <_dtoa_r+0xa7c>
 8005fe6:	2e00      	cmp	r6, #0
 8005fe8:	dd05      	ble.n	8005ff6 <_dtoa_r+0x886>
 8005fea:	4629      	mov	r1, r5
 8005fec:	4632      	mov	r2, r6
 8005fee:	4648      	mov	r0, r9
 8005ff0:	f000 fc22 	bl	8006838 <__lshift>
 8005ff4:	4605      	mov	r5, r0
 8005ff6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d058      	beq.n	80060ae <_dtoa_r+0x93e>
 8005ffc:	6869      	ldr	r1, [r5, #4]
 8005ffe:	4648      	mov	r0, r9
 8006000:	f000 fa0c 	bl	800641c <_Balloc>
 8006004:	4606      	mov	r6, r0
 8006006:	b928      	cbnz	r0, 8006014 <_dtoa_r+0x8a4>
 8006008:	4b82      	ldr	r3, [pc, #520]	@ (8006214 <_dtoa_r+0xaa4>)
 800600a:	4602      	mov	r2, r0
 800600c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006010:	f7ff bbc7 	b.w	80057a2 <_dtoa_r+0x32>
 8006014:	692a      	ldr	r2, [r5, #16]
 8006016:	3202      	adds	r2, #2
 8006018:	0092      	lsls	r2, r2, #2
 800601a:	f105 010c 	add.w	r1, r5, #12
 800601e:	300c      	adds	r0, #12
 8006020:	f000 ffac 	bl	8006f7c <memcpy>
 8006024:	2201      	movs	r2, #1
 8006026:	4631      	mov	r1, r6
 8006028:	4648      	mov	r0, r9
 800602a:	f000 fc05 	bl	8006838 <__lshift>
 800602e:	1c7b      	adds	r3, r7, #1
 8006030:	9305      	str	r3, [sp, #20]
 8006032:	eb07 030b 	add.w	r3, r7, fp
 8006036:	9309      	str	r3, [sp, #36]	@ 0x24
 8006038:	9b02      	ldr	r3, [sp, #8]
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	46a8      	mov	r8, r5
 8006040:	9308      	str	r3, [sp, #32]
 8006042:	4605      	mov	r5, r0
 8006044:	9b05      	ldr	r3, [sp, #20]
 8006046:	9801      	ldr	r0, [sp, #4]
 8006048:	4621      	mov	r1, r4
 800604a:	f103 3bff 	add.w	fp, r3, #4294967295
 800604e:	f7ff fb04 	bl	800565a <quorem>
 8006052:	4641      	mov	r1, r8
 8006054:	9002      	str	r0, [sp, #8]
 8006056:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800605a:	9801      	ldr	r0, [sp, #4]
 800605c:	f000 fc58 	bl	8006910 <__mcmp>
 8006060:	462a      	mov	r2, r5
 8006062:	9006      	str	r0, [sp, #24]
 8006064:	4621      	mov	r1, r4
 8006066:	4648      	mov	r0, r9
 8006068:	f000 fc6e 	bl	8006948 <__mdiff>
 800606c:	68c2      	ldr	r2, [r0, #12]
 800606e:	4606      	mov	r6, r0
 8006070:	b9fa      	cbnz	r2, 80060b2 <_dtoa_r+0x942>
 8006072:	4601      	mov	r1, r0
 8006074:	9801      	ldr	r0, [sp, #4]
 8006076:	f000 fc4b 	bl	8006910 <__mcmp>
 800607a:	4602      	mov	r2, r0
 800607c:	4631      	mov	r1, r6
 800607e:	4648      	mov	r0, r9
 8006080:	920a      	str	r2, [sp, #40]	@ 0x28
 8006082:	f000 fa0b 	bl	800649c <_Bfree>
 8006086:	9b07      	ldr	r3, [sp, #28]
 8006088:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800608a:	9e05      	ldr	r6, [sp, #20]
 800608c:	ea43 0102 	orr.w	r1, r3, r2
 8006090:	9b08      	ldr	r3, [sp, #32]
 8006092:	4319      	orrs	r1, r3
 8006094:	d10f      	bne.n	80060b6 <_dtoa_r+0x946>
 8006096:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800609a:	d028      	beq.n	80060ee <_dtoa_r+0x97e>
 800609c:	9b06      	ldr	r3, [sp, #24]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	dd02      	ble.n	80060a8 <_dtoa_r+0x938>
 80060a2:	9b02      	ldr	r3, [sp, #8]
 80060a4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80060a8:	f88b a000 	strb.w	sl, [fp]
 80060ac:	e639      	b.n	8005d22 <_dtoa_r+0x5b2>
 80060ae:	4628      	mov	r0, r5
 80060b0:	e7bd      	b.n	800602e <_dtoa_r+0x8be>
 80060b2:	2201      	movs	r2, #1
 80060b4:	e7e2      	b.n	800607c <_dtoa_r+0x90c>
 80060b6:	9b06      	ldr	r3, [sp, #24]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	db04      	blt.n	80060c6 <_dtoa_r+0x956>
 80060bc:	9907      	ldr	r1, [sp, #28]
 80060be:	430b      	orrs	r3, r1
 80060c0:	9908      	ldr	r1, [sp, #32]
 80060c2:	430b      	orrs	r3, r1
 80060c4:	d120      	bne.n	8006108 <_dtoa_r+0x998>
 80060c6:	2a00      	cmp	r2, #0
 80060c8:	ddee      	ble.n	80060a8 <_dtoa_r+0x938>
 80060ca:	9901      	ldr	r1, [sp, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	4648      	mov	r0, r9
 80060d0:	f000 fbb2 	bl	8006838 <__lshift>
 80060d4:	4621      	mov	r1, r4
 80060d6:	9001      	str	r0, [sp, #4]
 80060d8:	f000 fc1a 	bl	8006910 <__mcmp>
 80060dc:	2800      	cmp	r0, #0
 80060de:	dc03      	bgt.n	80060e8 <_dtoa_r+0x978>
 80060e0:	d1e2      	bne.n	80060a8 <_dtoa_r+0x938>
 80060e2:	f01a 0f01 	tst.w	sl, #1
 80060e6:	d0df      	beq.n	80060a8 <_dtoa_r+0x938>
 80060e8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80060ec:	d1d9      	bne.n	80060a2 <_dtoa_r+0x932>
 80060ee:	2339      	movs	r3, #57	@ 0x39
 80060f0:	f88b 3000 	strb.w	r3, [fp]
 80060f4:	4633      	mov	r3, r6
 80060f6:	461e      	mov	r6, r3
 80060f8:	3b01      	subs	r3, #1
 80060fa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80060fe:	2a39      	cmp	r2, #57	@ 0x39
 8006100:	d053      	beq.n	80061aa <_dtoa_r+0xa3a>
 8006102:	3201      	adds	r2, #1
 8006104:	701a      	strb	r2, [r3, #0]
 8006106:	e60c      	b.n	8005d22 <_dtoa_r+0x5b2>
 8006108:	2a00      	cmp	r2, #0
 800610a:	dd07      	ble.n	800611c <_dtoa_r+0x9ac>
 800610c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006110:	d0ed      	beq.n	80060ee <_dtoa_r+0x97e>
 8006112:	f10a 0301 	add.w	r3, sl, #1
 8006116:	f88b 3000 	strb.w	r3, [fp]
 800611a:	e602      	b.n	8005d22 <_dtoa_r+0x5b2>
 800611c:	9b05      	ldr	r3, [sp, #20]
 800611e:	9a05      	ldr	r2, [sp, #20]
 8006120:	f803 ac01 	strb.w	sl, [r3, #-1]
 8006124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006126:	4293      	cmp	r3, r2
 8006128:	d029      	beq.n	800617e <_dtoa_r+0xa0e>
 800612a:	9901      	ldr	r1, [sp, #4]
 800612c:	2300      	movs	r3, #0
 800612e:	220a      	movs	r2, #10
 8006130:	4648      	mov	r0, r9
 8006132:	f000 f9d5 	bl	80064e0 <__multadd>
 8006136:	45a8      	cmp	r8, r5
 8006138:	9001      	str	r0, [sp, #4]
 800613a:	f04f 0300 	mov.w	r3, #0
 800613e:	f04f 020a 	mov.w	r2, #10
 8006142:	4641      	mov	r1, r8
 8006144:	4648      	mov	r0, r9
 8006146:	d107      	bne.n	8006158 <_dtoa_r+0x9e8>
 8006148:	f000 f9ca 	bl	80064e0 <__multadd>
 800614c:	4680      	mov	r8, r0
 800614e:	4605      	mov	r5, r0
 8006150:	9b05      	ldr	r3, [sp, #20]
 8006152:	3301      	adds	r3, #1
 8006154:	9305      	str	r3, [sp, #20]
 8006156:	e775      	b.n	8006044 <_dtoa_r+0x8d4>
 8006158:	f000 f9c2 	bl	80064e0 <__multadd>
 800615c:	4629      	mov	r1, r5
 800615e:	4680      	mov	r8, r0
 8006160:	2300      	movs	r3, #0
 8006162:	220a      	movs	r2, #10
 8006164:	4648      	mov	r0, r9
 8006166:	f000 f9bb 	bl	80064e0 <__multadd>
 800616a:	4605      	mov	r5, r0
 800616c:	e7f0      	b.n	8006150 <_dtoa_r+0x9e0>
 800616e:	f1bb 0f00 	cmp.w	fp, #0
 8006172:	bfcc      	ite	gt
 8006174:	465e      	movgt	r6, fp
 8006176:	2601      	movle	r6, #1
 8006178:	443e      	add	r6, r7
 800617a:	f04f 0800 	mov.w	r8, #0
 800617e:	9901      	ldr	r1, [sp, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	4648      	mov	r0, r9
 8006184:	f000 fb58 	bl	8006838 <__lshift>
 8006188:	4621      	mov	r1, r4
 800618a:	9001      	str	r0, [sp, #4]
 800618c:	f000 fbc0 	bl	8006910 <__mcmp>
 8006190:	2800      	cmp	r0, #0
 8006192:	dcaf      	bgt.n	80060f4 <_dtoa_r+0x984>
 8006194:	d102      	bne.n	800619c <_dtoa_r+0xa2c>
 8006196:	f01a 0f01 	tst.w	sl, #1
 800619a:	d1ab      	bne.n	80060f4 <_dtoa_r+0x984>
 800619c:	4633      	mov	r3, r6
 800619e:	461e      	mov	r6, r3
 80061a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061a4:	2a30      	cmp	r2, #48	@ 0x30
 80061a6:	d0fa      	beq.n	800619e <_dtoa_r+0xa2e>
 80061a8:	e5bb      	b.n	8005d22 <_dtoa_r+0x5b2>
 80061aa:	429f      	cmp	r7, r3
 80061ac:	d1a3      	bne.n	80060f6 <_dtoa_r+0x986>
 80061ae:	9b04      	ldr	r3, [sp, #16]
 80061b0:	3301      	adds	r3, #1
 80061b2:	9304      	str	r3, [sp, #16]
 80061b4:	2331      	movs	r3, #49	@ 0x31
 80061b6:	703b      	strb	r3, [r7, #0]
 80061b8:	e5b3      	b.n	8005d22 <_dtoa_r+0x5b2>
 80061ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80061bc:	4f16      	ldr	r7, [pc, #88]	@ (8006218 <_dtoa_r+0xaa8>)
 80061be:	b11b      	cbz	r3, 80061c8 <_dtoa_r+0xa58>
 80061c0:	f107 0308 	add.w	r3, r7, #8
 80061c4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	4638      	mov	r0, r7
 80061ca:	b011      	add	sp, #68	@ 0x44
 80061cc:	ecbd 8b02 	vpop	{d8}
 80061d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d4:	9b07      	ldr	r3, [sp, #28]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	f77f ae36 	ble.w	8005e48 <_dtoa_r+0x6d8>
 80061dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061e0:	2001      	movs	r0, #1
 80061e2:	e656      	b.n	8005e92 <_dtoa_r+0x722>
 80061e4:	f1bb 0f00 	cmp.w	fp, #0
 80061e8:	f77f aed7 	ble.w	8005f9a <_dtoa_r+0x82a>
 80061ec:	463e      	mov	r6, r7
 80061ee:	9801      	ldr	r0, [sp, #4]
 80061f0:	4621      	mov	r1, r4
 80061f2:	f7ff fa32 	bl	800565a <quorem>
 80061f6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80061fa:	f806 ab01 	strb.w	sl, [r6], #1
 80061fe:	1bf2      	subs	r2, r6, r7
 8006200:	4593      	cmp	fp, r2
 8006202:	ddb4      	ble.n	800616e <_dtoa_r+0x9fe>
 8006204:	9901      	ldr	r1, [sp, #4]
 8006206:	2300      	movs	r3, #0
 8006208:	220a      	movs	r2, #10
 800620a:	4648      	mov	r0, r9
 800620c:	f000 f968 	bl	80064e0 <__multadd>
 8006210:	9001      	str	r0, [sp, #4]
 8006212:	e7ec      	b.n	80061ee <_dtoa_r+0xa7e>
 8006214:	08007958 	.word	0x08007958
 8006218:	080078dc 	.word	0x080078dc

0800621c <_free_r>:
 800621c:	b538      	push	{r3, r4, r5, lr}
 800621e:	4605      	mov	r5, r0
 8006220:	2900      	cmp	r1, #0
 8006222:	d041      	beq.n	80062a8 <_free_r+0x8c>
 8006224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006228:	1f0c      	subs	r4, r1, #4
 800622a:	2b00      	cmp	r3, #0
 800622c:	bfb8      	it	lt
 800622e:	18e4      	addlt	r4, r4, r3
 8006230:	f000 f8e8 	bl	8006404 <__malloc_lock>
 8006234:	4a1d      	ldr	r2, [pc, #116]	@ (80062ac <_free_r+0x90>)
 8006236:	6813      	ldr	r3, [r2, #0]
 8006238:	b933      	cbnz	r3, 8006248 <_free_r+0x2c>
 800623a:	6063      	str	r3, [r4, #4]
 800623c:	6014      	str	r4, [r2, #0]
 800623e:	4628      	mov	r0, r5
 8006240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006244:	f000 b8e4 	b.w	8006410 <__malloc_unlock>
 8006248:	42a3      	cmp	r3, r4
 800624a:	d908      	bls.n	800625e <_free_r+0x42>
 800624c:	6820      	ldr	r0, [r4, #0]
 800624e:	1821      	adds	r1, r4, r0
 8006250:	428b      	cmp	r3, r1
 8006252:	bf01      	itttt	eq
 8006254:	6819      	ldreq	r1, [r3, #0]
 8006256:	685b      	ldreq	r3, [r3, #4]
 8006258:	1809      	addeq	r1, r1, r0
 800625a:	6021      	streq	r1, [r4, #0]
 800625c:	e7ed      	b.n	800623a <_free_r+0x1e>
 800625e:	461a      	mov	r2, r3
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	b10b      	cbz	r3, 8006268 <_free_r+0x4c>
 8006264:	42a3      	cmp	r3, r4
 8006266:	d9fa      	bls.n	800625e <_free_r+0x42>
 8006268:	6811      	ldr	r1, [r2, #0]
 800626a:	1850      	adds	r0, r2, r1
 800626c:	42a0      	cmp	r0, r4
 800626e:	d10b      	bne.n	8006288 <_free_r+0x6c>
 8006270:	6820      	ldr	r0, [r4, #0]
 8006272:	4401      	add	r1, r0
 8006274:	1850      	adds	r0, r2, r1
 8006276:	4283      	cmp	r3, r0
 8006278:	6011      	str	r1, [r2, #0]
 800627a:	d1e0      	bne.n	800623e <_free_r+0x22>
 800627c:	6818      	ldr	r0, [r3, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	6053      	str	r3, [r2, #4]
 8006282:	4408      	add	r0, r1
 8006284:	6010      	str	r0, [r2, #0]
 8006286:	e7da      	b.n	800623e <_free_r+0x22>
 8006288:	d902      	bls.n	8006290 <_free_r+0x74>
 800628a:	230c      	movs	r3, #12
 800628c:	602b      	str	r3, [r5, #0]
 800628e:	e7d6      	b.n	800623e <_free_r+0x22>
 8006290:	6820      	ldr	r0, [r4, #0]
 8006292:	1821      	adds	r1, r4, r0
 8006294:	428b      	cmp	r3, r1
 8006296:	bf04      	itt	eq
 8006298:	6819      	ldreq	r1, [r3, #0]
 800629a:	685b      	ldreq	r3, [r3, #4]
 800629c:	6063      	str	r3, [r4, #4]
 800629e:	bf04      	itt	eq
 80062a0:	1809      	addeq	r1, r1, r0
 80062a2:	6021      	streq	r1, [r4, #0]
 80062a4:	6054      	str	r4, [r2, #4]
 80062a6:	e7ca      	b.n	800623e <_free_r+0x22>
 80062a8:	bd38      	pop	{r3, r4, r5, pc}
 80062aa:	bf00      	nop
 80062ac:	20000488 	.word	0x20000488

080062b0 <malloc>:
 80062b0:	4b02      	ldr	r3, [pc, #8]	@ (80062bc <malloc+0xc>)
 80062b2:	4601      	mov	r1, r0
 80062b4:	6818      	ldr	r0, [r3, #0]
 80062b6:	f000 b825 	b.w	8006304 <_malloc_r>
 80062ba:	bf00      	nop
 80062bc:	2000001c 	.word	0x2000001c

080062c0 <sbrk_aligned>:
 80062c0:	b570      	push	{r4, r5, r6, lr}
 80062c2:	4e0f      	ldr	r6, [pc, #60]	@ (8006300 <sbrk_aligned+0x40>)
 80062c4:	460c      	mov	r4, r1
 80062c6:	6831      	ldr	r1, [r6, #0]
 80062c8:	4605      	mov	r5, r0
 80062ca:	b911      	cbnz	r1, 80062d2 <sbrk_aligned+0x12>
 80062cc:	f000 fe46 	bl	8006f5c <_sbrk_r>
 80062d0:	6030      	str	r0, [r6, #0]
 80062d2:	4621      	mov	r1, r4
 80062d4:	4628      	mov	r0, r5
 80062d6:	f000 fe41 	bl	8006f5c <_sbrk_r>
 80062da:	1c43      	adds	r3, r0, #1
 80062dc:	d103      	bne.n	80062e6 <sbrk_aligned+0x26>
 80062de:	f04f 34ff 	mov.w	r4, #4294967295
 80062e2:	4620      	mov	r0, r4
 80062e4:	bd70      	pop	{r4, r5, r6, pc}
 80062e6:	1cc4      	adds	r4, r0, #3
 80062e8:	f024 0403 	bic.w	r4, r4, #3
 80062ec:	42a0      	cmp	r0, r4
 80062ee:	d0f8      	beq.n	80062e2 <sbrk_aligned+0x22>
 80062f0:	1a21      	subs	r1, r4, r0
 80062f2:	4628      	mov	r0, r5
 80062f4:	f000 fe32 	bl	8006f5c <_sbrk_r>
 80062f8:	3001      	adds	r0, #1
 80062fa:	d1f2      	bne.n	80062e2 <sbrk_aligned+0x22>
 80062fc:	e7ef      	b.n	80062de <sbrk_aligned+0x1e>
 80062fe:	bf00      	nop
 8006300:	20000484 	.word	0x20000484

08006304 <_malloc_r>:
 8006304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006308:	1ccd      	adds	r5, r1, #3
 800630a:	f025 0503 	bic.w	r5, r5, #3
 800630e:	3508      	adds	r5, #8
 8006310:	2d0c      	cmp	r5, #12
 8006312:	bf38      	it	cc
 8006314:	250c      	movcc	r5, #12
 8006316:	2d00      	cmp	r5, #0
 8006318:	4606      	mov	r6, r0
 800631a:	db01      	blt.n	8006320 <_malloc_r+0x1c>
 800631c:	42a9      	cmp	r1, r5
 800631e:	d904      	bls.n	800632a <_malloc_r+0x26>
 8006320:	230c      	movs	r3, #12
 8006322:	6033      	str	r3, [r6, #0]
 8006324:	2000      	movs	r0, #0
 8006326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800632a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006400 <_malloc_r+0xfc>
 800632e:	f000 f869 	bl	8006404 <__malloc_lock>
 8006332:	f8d8 3000 	ldr.w	r3, [r8]
 8006336:	461c      	mov	r4, r3
 8006338:	bb44      	cbnz	r4, 800638c <_malloc_r+0x88>
 800633a:	4629      	mov	r1, r5
 800633c:	4630      	mov	r0, r6
 800633e:	f7ff ffbf 	bl	80062c0 <sbrk_aligned>
 8006342:	1c43      	adds	r3, r0, #1
 8006344:	4604      	mov	r4, r0
 8006346:	d158      	bne.n	80063fa <_malloc_r+0xf6>
 8006348:	f8d8 4000 	ldr.w	r4, [r8]
 800634c:	4627      	mov	r7, r4
 800634e:	2f00      	cmp	r7, #0
 8006350:	d143      	bne.n	80063da <_malloc_r+0xd6>
 8006352:	2c00      	cmp	r4, #0
 8006354:	d04b      	beq.n	80063ee <_malloc_r+0xea>
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	4639      	mov	r1, r7
 800635a:	4630      	mov	r0, r6
 800635c:	eb04 0903 	add.w	r9, r4, r3
 8006360:	f000 fdfc 	bl	8006f5c <_sbrk_r>
 8006364:	4581      	cmp	r9, r0
 8006366:	d142      	bne.n	80063ee <_malloc_r+0xea>
 8006368:	6821      	ldr	r1, [r4, #0]
 800636a:	1a6d      	subs	r5, r5, r1
 800636c:	4629      	mov	r1, r5
 800636e:	4630      	mov	r0, r6
 8006370:	f7ff ffa6 	bl	80062c0 <sbrk_aligned>
 8006374:	3001      	adds	r0, #1
 8006376:	d03a      	beq.n	80063ee <_malloc_r+0xea>
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	442b      	add	r3, r5
 800637c:	6023      	str	r3, [r4, #0]
 800637e:	f8d8 3000 	ldr.w	r3, [r8]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	bb62      	cbnz	r2, 80063e0 <_malloc_r+0xdc>
 8006386:	f8c8 7000 	str.w	r7, [r8]
 800638a:	e00f      	b.n	80063ac <_malloc_r+0xa8>
 800638c:	6822      	ldr	r2, [r4, #0]
 800638e:	1b52      	subs	r2, r2, r5
 8006390:	d420      	bmi.n	80063d4 <_malloc_r+0xd0>
 8006392:	2a0b      	cmp	r2, #11
 8006394:	d917      	bls.n	80063c6 <_malloc_r+0xc2>
 8006396:	1961      	adds	r1, r4, r5
 8006398:	42a3      	cmp	r3, r4
 800639a:	6025      	str	r5, [r4, #0]
 800639c:	bf18      	it	ne
 800639e:	6059      	strne	r1, [r3, #4]
 80063a0:	6863      	ldr	r3, [r4, #4]
 80063a2:	bf08      	it	eq
 80063a4:	f8c8 1000 	streq.w	r1, [r8]
 80063a8:	5162      	str	r2, [r4, r5]
 80063aa:	604b      	str	r3, [r1, #4]
 80063ac:	4630      	mov	r0, r6
 80063ae:	f000 f82f 	bl	8006410 <__malloc_unlock>
 80063b2:	f104 000b 	add.w	r0, r4, #11
 80063b6:	1d23      	adds	r3, r4, #4
 80063b8:	f020 0007 	bic.w	r0, r0, #7
 80063bc:	1ac2      	subs	r2, r0, r3
 80063be:	bf1c      	itt	ne
 80063c0:	1a1b      	subne	r3, r3, r0
 80063c2:	50a3      	strne	r3, [r4, r2]
 80063c4:	e7af      	b.n	8006326 <_malloc_r+0x22>
 80063c6:	6862      	ldr	r2, [r4, #4]
 80063c8:	42a3      	cmp	r3, r4
 80063ca:	bf0c      	ite	eq
 80063cc:	f8c8 2000 	streq.w	r2, [r8]
 80063d0:	605a      	strne	r2, [r3, #4]
 80063d2:	e7eb      	b.n	80063ac <_malloc_r+0xa8>
 80063d4:	4623      	mov	r3, r4
 80063d6:	6864      	ldr	r4, [r4, #4]
 80063d8:	e7ae      	b.n	8006338 <_malloc_r+0x34>
 80063da:	463c      	mov	r4, r7
 80063dc:	687f      	ldr	r7, [r7, #4]
 80063de:	e7b6      	b.n	800634e <_malloc_r+0x4a>
 80063e0:	461a      	mov	r2, r3
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	42a3      	cmp	r3, r4
 80063e6:	d1fb      	bne.n	80063e0 <_malloc_r+0xdc>
 80063e8:	2300      	movs	r3, #0
 80063ea:	6053      	str	r3, [r2, #4]
 80063ec:	e7de      	b.n	80063ac <_malloc_r+0xa8>
 80063ee:	230c      	movs	r3, #12
 80063f0:	6033      	str	r3, [r6, #0]
 80063f2:	4630      	mov	r0, r6
 80063f4:	f000 f80c 	bl	8006410 <__malloc_unlock>
 80063f8:	e794      	b.n	8006324 <_malloc_r+0x20>
 80063fa:	6005      	str	r5, [r0, #0]
 80063fc:	e7d6      	b.n	80063ac <_malloc_r+0xa8>
 80063fe:	bf00      	nop
 8006400:	20000488 	.word	0x20000488

08006404 <__malloc_lock>:
 8006404:	4801      	ldr	r0, [pc, #4]	@ (800640c <__malloc_lock+0x8>)
 8006406:	f7ff b926 	b.w	8005656 <__retarget_lock_acquire_recursive>
 800640a:	bf00      	nop
 800640c:	20000480 	.word	0x20000480

08006410 <__malloc_unlock>:
 8006410:	4801      	ldr	r0, [pc, #4]	@ (8006418 <__malloc_unlock+0x8>)
 8006412:	f7ff b921 	b.w	8005658 <__retarget_lock_release_recursive>
 8006416:	bf00      	nop
 8006418:	20000480 	.word	0x20000480

0800641c <_Balloc>:
 800641c:	b570      	push	{r4, r5, r6, lr}
 800641e:	69c6      	ldr	r6, [r0, #28]
 8006420:	4604      	mov	r4, r0
 8006422:	460d      	mov	r5, r1
 8006424:	b976      	cbnz	r6, 8006444 <_Balloc+0x28>
 8006426:	2010      	movs	r0, #16
 8006428:	f7ff ff42 	bl	80062b0 <malloc>
 800642c:	4602      	mov	r2, r0
 800642e:	61e0      	str	r0, [r4, #28]
 8006430:	b920      	cbnz	r0, 800643c <_Balloc+0x20>
 8006432:	4b18      	ldr	r3, [pc, #96]	@ (8006494 <_Balloc+0x78>)
 8006434:	4818      	ldr	r0, [pc, #96]	@ (8006498 <_Balloc+0x7c>)
 8006436:	216b      	movs	r1, #107	@ 0x6b
 8006438:	f000 fdae 	bl	8006f98 <__assert_func>
 800643c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006440:	6006      	str	r6, [r0, #0]
 8006442:	60c6      	str	r6, [r0, #12]
 8006444:	69e6      	ldr	r6, [r4, #28]
 8006446:	68f3      	ldr	r3, [r6, #12]
 8006448:	b183      	cbz	r3, 800646c <_Balloc+0x50>
 800644a:	69e3      	ldr	r3, [r4, #28]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006452:	b9b8      	cbnz	r0, 8006484 <_Balloc+0x68>
 8006454:	2101      	movs	r1, #1
 8006456:	fa01 f605 	lsl.w	r6, r1, r5
 800645a:	1d72      	adds	r2, r6, #5
 800645c:	0092      	lsls	r2, r2, #2
 800645e:	4620      	mov	r0, r4
 8006460:	f000 fdb8 	bl	8006fd4 <_calloc_r>
 8006464:	b160      	cbz	r0, 8006480 <_Balloc+0x64>
 8006466:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800646a:	e00e      	b.n	800648a <_Balloc+0x6e>
 800646c:	2221      	movs	r2, #33	@ 0x21
 800646e:	2104      	movs	r1, #4
 8006470:	4620      	mov	r0, r4
 8006472:	f000 fdaf 	bl	8006fd4 <_calloc_r>
 8006476:	69e3      	ldr	r3, [r4, #28]
 8006478:	60f0      	str	r0, [r6, #12]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1e4      	bne.n	800644a <_Balloc+0x2e>
 8006480:	2000      	movs	r0, #0
 8006482:	bd70      	pop	{r4, r5, r6, pc}
 8006484:	6802      	ldr	r2, [r0, #0]
 8006486:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800648a:	2300      	movs	r3, #0
 800648c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006490:	e7f7      	b.n	8006482 <_Balloc+0x66>
 8006492:	bf00      	nop
 8006494:	080078e9 	.word	0x080078e9
 8006498:	08007969 	.word	0x08007969

0800649c <_Bfree>:
 800649c:	b570      	push	{r4, r5, r6, lr}
 800649e:	69c6      	ldr	r6, [r0, #28]
 80064a0:	4605      	mov	r5, r0
 80064a2:	460c      	mov	r4, r1
 80064a4:	b976      	cbnz	r6, 80064c4 <_Bfree+0x28>
 80064a6:	2010      	movs	r0, #16
 80064a8:	f7ff ff02 	bl	80062b0 <malloc>
 80064ac:	4602      	mov	r2, r0
 80064ae:	61e8      	str	r0, [r5, #28]
 80064b0:	b920      	cbnz	r0, 80064bc <_Bfree+0x20>
 80064b2:	4b09      	ldr	r3, [pc, #36]	@ (80064d8 <_Bfree+0x3c>)
 80064b4:	4809      	ldr	r0, [pc, #36]	@ (80064dc <_Bfree+0x40>)
 80064b6:	218f      	movs	r1, #143	@ 0x8f
 80064b8:	f000 fd6e 	bl	8006f98 <__assert_func>
 80064bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064c0:	6006      	str	r6, [r0, #0]
 80064c2:	60c6      	str	r6, [r0, #12]
 80064c4:	b13c      	cbz	r4, 80064d6 <_Bfree+0x3a>
 80064c6:	69eb      	ldr	r3, [r5, #28]
 80064c8:	6862      	ldr	r2, [r4, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064d0:	6021      	str	r1, [r4, #0]
 80064d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064d6:	bd70      	pop	{r4, r5, r6, pc}
 80064d8:	080078e9 	.word	0x080078e9
 80064dc:	08007969 	.word	0x08007969

080064e0 <__multadd>:
 80064e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064e4:	690d      	ldr	r5, [r1, #16]
 80064e6:	4607      	mov	r7, r0
 80064e8:	460c      	mov	r4, r1
 80064ea:	461e      	mov	r6, r3
 80064ec:	f101 0c14 	add.w	ip, r1, #20
 80064f0:	2000      	movs	r0, #0
 80064f2:	f8dc 3000 	ldr.w	r3, [ip]
 80064f6:	b299      	uxth	r1, r3
 80064f8:	fb02 6101 	mla	r1, r2, r1, r6
 80064fc:	0c1e      	lsrs	r6, r3, #16
 80064fe:	0c0b      	lsrs	r3, r1, #16
 8006500:	fb02 3306 	mla	r3, r2, r6, r3
 8006504:	b289      	uxth	r1, r1
 8006506:	3001      	adds	r0, #1
 8006508:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800650c:	4285      	cmp	r5, r0
 800650e:	f84c 1b04 	str.w	r1, [ip], #4
 8006512:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006516:	dcec      	bgt.n	80064f2 <__multadd+0x12>
 8006518:	b30e      	cbz	r6, 800655e <__multadd+0x7e>
 800651a:	68a3      	ldr	r3, [r4, #8]
 800651c:	42ab      	cmp	r3, r5
 800651e:	dc19      	bgt.n	8006554 <__multadd+0x74>
 8006520:	6861      	ldr	r1, [r4, #4]
 8006522:	4638      	mov	r0, r7
 8006524:	3101      	adds	r1, #1
 8006526:	f7ff ff79 	bl	800641c <_Balloc>
 800652a:	4680      	mov	r8, r0
 800652c:	b928      	cbnz	r0, 800653a <__multadd+0x5a>
 800652e:	4602      	mov	r2, r0
 8006530:	4b0c      	ldr	r3, [pc, #48]	@ (8006564 <__multadd+0x84>)
 8006532:	480d      	ldr	r0, [pc, #52]	@ (8006568 <__multadd+0x88>)
 8006534:	21ba      	movs	r1, #186	@ 0xba
 8006536:	f000 fd2f 	bl	8006f98 <__assert_func>
 800653a:	6922      	ldr	r2, [r4, #16]
 800653c:	3202      	adds	r2, #2
 800653e:	f104 010c 	add.w	r1, r4, #12
 8006542:	0092      	lsls	r2, r2, #2
 8006544:	300c      	adds	r0, #12
 8006546:	f000 fd19 	bl	8006f7c <memcpy>
 800654a:	4621      	mov	r1, r4
 800654c:	4638      	mov	r0, r7
 800654e:	f7ff ffa5 	bl	800649c <_Bfree>
 8006552:	4644      	mov	r4, r8
 8006554:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006558:	3501      	adds	r5, #1
 800655a:	615e      	str	r6, [r3, #20]
 800655c:	6125      	str	r5, [r4, #16]
 800655e:	4620      	mov	r0, r4
 8006560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006564:	08007958 	.word	0x08007958
 8006568:	08007969 	.word	0x08007969

0800656c <__hi0bits>:
 800656c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006570:	4603      	mov	r3, r0
 8006572:	bf36      	itet	cc
 8006574:	0403      	lslcc	r3, r0, #16
 8006576:	2000      	movcs	r0, #0
 8006578:	2010      	movcc	r0, #16
 800657a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800657e:	bf3c      	itt	cc
 8006580:	021b      	lslcc	r3, r3, #8
 8006582:	3008      	addcc	r0, #8
 8006584:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006588:	bf3c      	itt	cc
 800658a:	011b      	lslcc	r3, r3, #4
 800658c:	3004      	addcc	r0, #4
 800658e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006592:	bf3c      	itt	cc
 8006594:	009b      	lslcc	r3, r3, #2
 8006596:	3002      	addcc	r0, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	db05      	blt.n	80065a8 <__hi0bits+0x3c>
 800659c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80065a0:	f100 0001 	add.w	r0, r0, #1
 80065a4:	bf08      	it	eq
 80065a6:	2020      	moveq	r0, #32
 80065a8:	4770      	bx	lr

080065aa <__lo0bits>:
 80065aa:	6803      	ldr	r3, [r0, #0]
 80065ac:	4602      	mov	r2, r0
 80065ae:	f013 0007 	ands.w	r0, r3, #7
 80065b2:	d00b      	beq.n	80065cc <__lo0bits+0x22>
 80065b4:	07d9      	lsls	r1, r3, #31
 80065b6:	d421      	bmi.n	80065fc <__lo0bits+0x52>
 80065b8:	0798      	lsls	r0, r3, #30
 80065ba:	bf49      	itett	mi
 80065bc:	085b      	lsrmi	r3, r3, #1
 80065be:	089b      	lsrpl	r3, r3, #2
 80065c0:	2001      	movmi	r0, #1
 80065c2:	6013      	strmi	r3, [r2, #0]
 80065c4:	bf5c      	itt	pl
 80065c6:	6013      	strpl	r3, [r2, #0]
 80065c8:	2002      	movpl	r0, #2
 80065ca:	4770      	bx	lr
 80065cc:	b299      	uxth	r1, r3
 80065ce:	b909      	cbnz	r1, 80065d4 <__lo0bits+0x2a>
 80065d0:	0c1b      	lsrs	r3, r3, #16
 80065d2:	2010      	movs	r0, #16
 80065d4:	b2d9      	uxtb	r1, r3
 80065d6:	b909      	cbnz	r1, 80065dc <__lo0bits+0x32>
 80065d8:	3008      	adds	r0, #8
 80065da:	0a1b      	lsrs	r3, r3, #8
 80065dc:	0719      	lsls	r1, r3, #28
 80065de:	bf04      	itt	eq
 80065e0:	091b      	lsreq	r3, r3, #4
 80065e2:	3004      	addeq	r0, #4
 80065e4:	0799      	lsls	r1, r3, #30
 80065e6:	bf04      	itt	eq
 80065e8:	089b      	lsreq	r3, r3, #2
 80065ea:	3002      	addeq	r0, #2
 80065ec:	07d9      	lsls	r1, r3, #31
 80065ee:	d403      	bmi.n	80065f8 <__lo0bits+0x4e>
 80065f0:	085b      	lsrs	r3, r3, #1
 80065f2:	f100 0001 	add.w	r0, r0, #1
 80065f6:	d003      	beq.n	8006600 <__lo0bits+0x56>
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	4770      	bx	lr
 80065fc:	2000      	movs	r0, #0
 80065fe:	4770      	bx	lr
 8006600:	2020      	movs	r0, #32
 8006602:	4770      	bx	lr

08006604 <__i2b>:
 8006604:	b510      	push	{r4, lr}
 8006606:	460c      	mov	r4, r1
 8006608:	2101      	movs	r1, #1
 800660a:	f7ff ff07 	bl	800641c <_Balloc>
 800660e:	4602      	mov	r2, r0
 8006610:	b928      	cbnz	r0, 800661e <__i2b+0x1a>
 8006612:	4b05      	ldr	r3, [pc, #20]	@ (8006628 <__i2b+0x24>)
 8006614:	4805      	ldr	r0, [pc, #20]	@ (800662c <__i2b+0x28>)
 8006616:	f240 1145 	movw	r1, #325	@ 0x145
 800661a:	f000 fcbd 	bl	8006f98 <__assert_func>
 800661e:	2301      	movs	r3, #1
 8006620:	6144      	str	r4, [r0, #20]
 8006622:	6103      	str	r3, [r0, #16]
 8006624:	bd10      	pop	{r4, pc}
 8006626:	bf00      	nop
 8006628:	08007958 	.word	0x08007958
 800662c:	08007969 	.word	0x08007969

08006630 <__multiply>:
 8006630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006634:	4614      	mov	r4, r2
 8006636:	690a      	ldr	r2, [r1, #16]
 8006638:	6923      	ldr	r3, [r4, #16]
 800663a:	429a      	cmp	r2, r3
 800663c:	bfa8      	it	ge
 800663e:	4623      	movge	r3, r4
 8006640:	460f      	mov	r7, r1
 8006642:	bfa4      	itt	ge
 8006644:	460c      	movge	r4, r1
 8006646:	461f      	movge	r7, r3
 8006648:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800664c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006650:	68a3      	ldr	r3, [r4, #8]
 8006652:	6861      	ldr	r1, [r4, #4]
 8006654:	eb0a 0609 	add.w	r6, sl, r9
 8006658:	42b3      	cmp	r3, r6
 800665a:	b085      	sub	sp, #20
 800665c:	bfb8      	it	lt
 800665e:	3101      	addlt	r1, #1
 8006660:	f7ff fedc 	bl	800641c <_Balloc>
 8006664:	b930      	cbnz	r0, 8006674 <__multiply+0x44>
 8006666:	4602      	mov	r2, r0
 8006668:	4b44      	ldr	r3, [pc, #272]	@ (800677c <__multiply+0x14c>)
 800666a:	4845      	ldr	r0, [pc, #276]	@ (8006780 <__multiply+0x150>)
 800666c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006670:	f000 fc92 	bl	8006f98 <__assert_func>
 8006674:	f100 0514 	add.w	r5, r0, #20
 8006678:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800667c:	462b      	mov	r3, r5
 800667e:	2200      	movs	r2, #0
 8006680:	4543      	cmp	r3, r8
 8006682:	d321      	bcc.n	80066c8 <__multiply+0x98>
 8006684:	f107 0114 	add.w	r1, r7, #20
 8006688:	f104 0214 	add.w	r2, r4, #20
 800668c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006690:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006694:	9302      	str	r3, [sp, #8]
 8006696:	1b13      	subs	r3, r2, r4
 8006698:	3b15      	subs	r3, #21
 800669a:	f023 0303 	bic.w	r3, r3, #3
 800669e:	3304      	adds	r3, #4
 80066a0:	f104 0715 	add.w	r7, r4, #21
 80066a4:	42ba      	cmp	r2, r7
 80066a6:	bf38      	it	cc
 80066a8:	2304      	movcc	r3, #4
 80066aa:	9301      	str	r3, [sp, #4]
 80066ac:	9b02      	ldr	r3, [sp, #8]
 80066ae:	9103      	str	r1, [sp, #12]
 80066b0:	428b      	cmp	r3, r1
 80066b2:	d80c      	bhi.n	80066ce <__multiply+0x9e>
 80066b4:	2e00      	cmp	r6, #0
 80066b6:	dd03      	ble.n	80066c0 <__multiply+0x90>
 80066b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d05b      	beq.n	8006778 <__multiply+0x148>
 80066c0:	6106      	str	r6, [r0, #16]
 80066c2:	b005      	add	sp, #20
 80066c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c8:	f843 2b04 	str.w	r2, [r3], #4
 80066cc:	e7d8      	b.n	8006680 <__multiply+0x50>
 80066ce:	f8b1 a000 	ldrh.w	sl, [r1]
 80066d2:	f1ba 0f00 	cmp.w	sl, #0
 80066d6:	d024      	beq.n	8006722 <__multiply+0xf2>
 80066d8:	f104 0e14 	add.w	lr, r4, #20
 80066dc:	46a9      	mov	r9, r5
 80066de:	f04f 0c00 	mov.w	ip, #0
 80066e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80066e6:	f8d9 3000 	ldr.w	r3, [r9]
 80066ea:	fa1f fb87 	uxth.w	fp, r7
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	fb0a 330b 	mla	r3, sl, fp, r3
 80066f4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80066f8:	f8d9 7000 	ldr.w	r7, [r9]
 80066fc:	4463      	add	r3, ip
 80066fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006702:	fb0a c70b 	mla	r7, sl, fp, ip
 8006706:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800670a:	b29b      	uxth	r3, r3
 800670c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006710:	4572      	cmp	r2, lr
 8006712:	f849 3b04 	str.w	r3, [r9], #4
 8006716:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800671a:	d8e2      	bhi.n	80066e2 <__multiply+0xb2>
 800671c:	9b01      	ldr	r3, [sp, #4]
 800671e:	f845 c003 	str.w	ip, [r5, r3]
 8006722:	9b03      	ldr	r3, [sp, #12]
 8006724:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006728:	3104      	adds	r1, #4
 800672a:	f1b9 0f00 	cmp.w	r9, #0
 800672e:	d021      	beq.n	8006774 <__multiply+0x144>
 8006730:	682b      	ldr	r3, [r5, #0]
 8006732:	f104 0c14 	add.w	ip, r4, #20
 8006736:	46ae      	mov	lr, r5
 8006738:	f04f 0a00 	mov.w	sl, #0
 800673c:	f8bc b000 	ldrh.w	fp, [ip]
 8006740:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006744:	fb09 770b 	mla	r7, r9, fp, r7
 8006748:	4457      	add	r7, sl
 800674a:	b29b      	uxth	r3, r3
 800674c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006750:	f84e 3b04 	str.w	r3, [lr], #4
 8006754:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006758:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800675c:	f8be 3000 	ldrh.w	r3, [lr]
 8006760:	fb09 330a 	mla	r3, r9, sl, r3
 8006764:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006768:	4562      	cmp	r2, ip
 800676a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800676e:	d8e5      	bhi.n	800673c <__multiply+0x10c>
 8006770:	9f01      	ldr	r7, [sp, #4]
 8006772:	51eb      	str	r3, [r5, r7]
 8006774:	3504      	adds	r5, #4
 8006776:	e799      	b.n	80066ac <__multiply+0x7c>
 8006778:	3e01      	subs	r6, #1
 800677a:	e79b      	b.n	80066b4 <__multiply+0x84>
 800677c:	08007958 	.word	0x08007958
 8006780:	08007969 	.word	0x08007969

08006784 <__pow5mult>:
 8006784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006788:	4615      	mov	r5, r2
 800678a:	f012 0203 	ands.w	r2, r2, #3
 800678e:	4607      	mov	r7, r0
 8006790:	460e      	mov	r6, r1
 8006792:	d007      	beq.n	80067a4 <__pow5mult+0x20>
 8006794:	4c25      	ldr	r4, [pc, #148]	@ (800682c <__pow5mult+0xa8>)
 8006796:	3a01      	subs	r2, #1
 8006798:	2300      	movs	r3, #0
 800679a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800679e:	f7ff fe9f 	bl	80064e0 <__multadd>
 80067a2:	4606      	mov	r6, r0
 80067a4:	10ad      	asrs	r5, r5, #2
 80067a6:	d03d      	beq.n	8006824 <__pow5mult+0xa0>
 80067a8:	69fc      	ldr	r4, [r7, #28]
 80067aa:	b97c      	cbnz	r4, 80067cc <__pow5mult+0x48>
 80067ac:	2010      	movs	r0, #16
 80067ae:	f7ff fd7f 	bl	80062b0 <malloc>
 80067b2:	4602      	mov	r2, r0
 80067b4:	61f8      	str	r0, [r7, #28]
 80067b6:	b928      	cbnz	r0, 80067c4 <__pow5mult+0x40>
 80067b8:	4b1d      	ldr	r3, [pc, #116]	@ (8006830 <__pow5mult+0xac>)
 80067ba:	481e      	ldr	r0, [pc, #120]	@ (8006834 <__pow5mult+0xb0>)
 80067bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80067c0:	f000 fbea 	bl	8006f98 <__assert_func>
 80067c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067c8:	6004      	str	r4, [r0, #0]
 80067ca:	60c4      	str	r4, [r0, #12]
 80067cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80067d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067d4:	b94c      	cbnz	r4, 80067ea <__pow5mult+0x66>
 80067d6:	f240 2171 	movw	r1, #625	@ 0x271
 80067da:	4638      	mov	r0, r7
 80067dc:	f7ff ff12 	bl	8006604 <__i2b>
 80067e0:	2300      	movs	r3, #0
 80067e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80067e6:	4604      	mov	r4, r0
 80067e8:	6003      	str	r3, [r0, #0]
 80067ea:	f04f 0900 	mov.w	r9, #0
 80067ee:	07eb      	lsls	r3, r5, #31
 80067f0:	d50a      	bpl.n	8006808 <__pow5mult+0x84>
 80067f2:	4631      	mov	r1, r6
 80067f4:	4622      	mov	r2, r4
 80067f6:	4638      	mov	r0, r7
 80067f8:	f7ff ff1a 	bl	8006630 <__multiply>
 80067fc:	4631      	mov	r1, r6
 80067fe:	4680      	mov	r8, r0
 8006800:	4638      	mov	r0, r7
 8006802:	f7ff fe4b 	bl	800649c <_Bfree>
 8006806:	4646      	mov	r6, r8
 8006808:	106d      	asrs	r5, r5, #1
 800680a:	d00b      	beq.n	8006824 <__pow5mult+0xa0>
 800680c:	6820      	ldr	r0, [r4, #0]
 800680e:	b938      	cbnz	r0, 8006820 <__pow5mult+0x9c>
 8006810:	4622      	mov	r2, r4
 8006812:	4621      	mov	r1, r4
 8006814:	4638      	mov	r0, r7
 8006816:	f7ff ff0b 	bl	8006630 <__multiply>
 800681a:	6020      	str	r0, [r4, #0]
 800681c:	f8c0 9000 	str.w	r9, [r0]
 8006820:	4604      	mov	r4, r0
 8006822:	e7e4      	b.n	80067ee <__pow5mult+0x6a>
 8006824:	4630      	mov	r0, r6
 8006826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800682a:	bf00      	nop
 800682c:	080079c4 	.word	0x080079c4
 8006830:	080078e9 	.word	0x080078e9
 8006834:	08007969 	.word	0x08007969

08006838 <__lshift>:
 8006838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800683c:	460c      	mov	r4, r1
 800683e:	6849      	ldr	r1, [r1, #4]
 8006840:	6923      	ldr	r3, [r4, #16]
 8006842:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006846:	68a3      	ldr	r3, [r4, #8]
 8006848:	4607      	mov	r7, r0
 800684a:	4691      	mov	r9, r2
 800684c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006850:	f108 0601 	add.w	r6, r8, #1
 8006854:	42b3      	cmp	r3, r6
 8006856:	db0b      	blt.n	8006870 <__lshift+0x38>
 8006858:	4638      	mov	r0, r7
 800685a:	f7ff fddf 	bl	800641c <_Balloc>
 800685e:	4605      	mov	r5, r0
 8006860:	b948      	cbnz	r0, 8006876 <__lshift+0x3e>
 8006862:	4602      	mov	r2, r0
 8006864:	4b28      	ldr	r3, [pc, #160]	@ (8006908 <__lshift+0xd0>)
 8006866:	4829      	ldr	r0, [pc, #164]	@ (800690c <__lshift+0xd4>)
 8006868:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800686c:	f000 fb94 	bl	8006f98 <__assert_func>
 8006870:	3101      	adds	r1, #1
 8006872:	005b      	lsls	r3, r3, #1
 8006874:	e7ee      	b.n	8006854 <__lshift+0x1c>
 8006876:	2300      	movs	r3, #0
 8006878:	f100 0114 	add.w	r1, r0, #20
 800687c:	f100 0210 	add.w	r2, r0, #16
 8006880:	4618      	mov	r0, r3
 8006882:	4553      	cmp	r3, sl
 8006884:	db33      	blt.n	80068ee <__lshift+0xb6>
 8006886:	6920      	ldr	r0, [r4, #16]
 8006888:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800688c:	f104 0314 	add.w	r3, r4, #20
 8006890:	f019 091f 	ands.w	r9, r9, #31
 8006894:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006898:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800689c:	d02b      	beq.n	80068f6 <__lshift+0xbe>
 800689e:	f1c9 0e20 	rsb	lr, r9, #32
 80068a2:	468a      	mov	sl, r1
 80068a4:	2200      	movs	r2, #0
 80068a6:	6818      	ldr	r0, [r3, #0]
 80068a8:	fa00 f009 	lsl.w	r0, r0, r9
 80068ac:	4310      	orrs	r0, r2
 80068ae:	f84a 0b04 	str.w	r0, [sl], #4
 80068b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80068b6:	459c      	cmp	ip, r3
 80068b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80068bc:	d8f3      	bhi.n	80068a6 <__lshift+0x6e>
 80068be:	ebac 0304 	sub.w	r3, ip, r4
 80068c2:	3b15      	subs	r3, #21
 80068c4:	f023 0303 	bic.w	r3, r3, #3
 80068c8:	3304      	adds	r3, #4
 80068ca:	f104 0015 	add.w	r0, r4, #21
 80068ce:	4584      	cmp	ip, r0
 80068d0:	bf38      	it	cc
 80068d2:	2304      	movcc	r3, #4
 80068d4:	50ca      	str	r2, [r1, r3]
 80068d6:	b10a      	cbz	r2, 80068dc <__lshift+0xa4>
 80068d8:	f108 0602 	add.w	r6, r8, #2
 80068dc:	3e01      	subs	r6, #1
 80068de:	4638      	mov	r0, r7
 80068e0:	612e      	str	r6, [r5, #16]
 80068e2:	4621      	mov	r1, r4
 80068e4:	f7ff fdda 	bl	800649c <_Bfree>
 80068e8:	4628      	mov	r0, r5
 80068ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80068f2:	3301      	adds	r3, #1
 80068f4:	e7c5      	b.n	8006882 <__lshift+0x4a>
 80068f6:	3904      	subs	r1, #4
 80068f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80068fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8006900:	459c      	cmp	ip, r3
 8006902:	d8f9      	bhi.n	80068f8 <__lshift+0xc0>
 8006904:	e7ea      	b.n	80068dc <__lshift+0xa4>
 8006906:	bf00      	nop
 8006908:	08007958 	.word	0x08007958
 800690c:	08007969 	.word	0x08007969

08006910 <__mcmp>:
 8006910:	690a      	ldr	r2, [r1, #16]
 8006912:	4603      	mov	r3, r0
 8006914:	6900      	ldr	r0, [r0, #16]
 8006916:	1a80      	subs	r0, r0, r2
 8006918:	b530      	push	{r4, r5, lr}
 800691a:	d10e      	bne.n	800693a <__mcmp+0x2a>
 800691c:	3314      	adds	r3, #20
 800691e:	3114      	adds	r1, #20
 8006920:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006924:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006928:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800692c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006930:	4295      	cmp	r5, r2
 8006932:	d003      	beq.n	800693c <__mcmp+0x2c>
 8006934:	d205      	bcs.n	8006942 <__mcmp+0x32>
 8006936:	f04f 30ff 	mov.w	r0, #4294967295
 800693a:	bd30      	pop	{r4, r5, pc}
 800693c:	42a3      	cmp	r3, r4
 800693e:	d3f3      	bcc.n	8006928 <__mcmp+0x18>
 8006940:	e7fb      	b.n	800693a <__mcmp+0x2a>
 8006942:	2001      	movs	r0, #1
 8006944:	e7f9      	b.n	800693a <__mcmp+0x2a>
	...

08006948 <__mdiff>:
 8006948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800694c:	4689      	mov	r9, r1
 800694e:	4606      	mov	r6, r0
 8006950:	4611      	mov	r1, r2
 8006952:	4648      	mov	r0, r9
 8006954:	4614      	mov	r4, r2
 8006956:	f7ff ffdb 	bl	8006910 <__mcmp>
 800695a:	1e05      	subs	r5, r0, #0
 800695c:	d112      	bne.n	8006984 <__mdiff+0x3c>
 800695e:	4629      	mov	r1, r5
 8006960:	4630      	mov	r0, r6
 8006962:	f7ff fd5b 	bl	800641c <_Balloc>
 8006966:	4602      	mov	r2, r0
 8006968:	b928      	cbnz	r0, 8006976 <__mdiff+0x2e>
 800696a:	4b3f      	ldr	r3, [pc, #252]	@ (8006a68 <__mdiff+0x120>)
 800696c:	f240 2137 	movw	r1, #567	@ 0x237
 8006970:	483e      	ldr	r0, [pc, #248]	@ (8006a6c <__mdiff+0x124>)
 8006972:	f000 fb11 	bl	8006f98 <__assert_func>
 8006976:	2301      	movs	r3, #1
 8006978:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800697c:	4610      	mov	r0, r2
 800697e:	b003      	add	sp, #12
 8006980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006984:	bfbc      	itt	lt
 8006986:	464b      	movlt	r3, r9
 8006988:	46a1      	movlt	r9, r4
 800698a:	4630      	mov	r0, r6
 800698c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006990:	bfba      	itte	lt
 8006992:	461c      	movlt	r4, r3
 8006994:	2501      	movlt	r5, #1
 8006996:	2500      	movge	r5, #0
 8006998:	f7ff fd40 	bl	800641c <_Balloc>
 800699c:	4602      	mov	r2, r0
 800699e:	b918      	cbnz	r0, 80069a8 <__mdiff+0x60>
 80069a0:	4b31      	ldr	r3, [pc, #196]	@ (8006a68 <__mdiff+0x120>)
 80069a2:	f240 2145 	movw	r1, #581	@ 0x245
 80069a6:	e7e3      	b.n	8006970 <__mdiff+0x28>
 80069a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80069ac:	6926      	ldr	r6, [r4, #16]
 80069ae:	60c5      	str	r5, [r0, #12]
 80069b0:	f109 0310 	add.w	r3, r9, #16
 80069b4:	f109 0514 	add.w	r5, r9, #20
 80069b8:	f104 0e14 	add.w	lr, r4, #20
 80069bc:	f100 0b14 	add.w	fp, r0, #20
 80069c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80069c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80069c8:	9301      	str	r3, [sp, #4]
 80069ca:	46d9      	mov	r9, fp
 80069cc:	f04f 0c00 	mov.w	ip, #0
 80069d0:	9b01      	ldr	r3, [sp, #4]
 80069d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80069d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80069da:	9301      	str	r3, [sp, #4]
 80069dc:	fa1f f38a 	uxth.w	r3, sl
 80069e0:	4619      	mov	r1, r3
 80069e2:	b283      	uxth	r3, r0
 80069e4:	1acb      	subs	r3, r1, r3
 80069e6:	0c00      	lsrs	r0, r0, #16
 80069e8:	4463      	add	r3, ip
 80069ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80069ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80069f8:	4576      	cmp	r6, lr
 80069fa:	f849 3b04 	str.w	r3, [r9], #4
 80069fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a02:	d8e5      	bhi.n	80069d0 <__mdiff+0x88>
 8006a04:	1b33      	subs	r3, r6, r4
 8006a06:	3b15      	subs	r3, #21
 8006a08:	f023 0303 	bic.w	r3, r3, #3
 8006a0c:	3415      	adds	r4, #21
 8006a0e:	3304      	adds	r3, #4
 8006a10:	42a6      	cmp	r6, r4
 8006a12:	bf38      	it	cc
 8006a14:	2304      	movcc	r3, #4
 8006a16:	441d      	add	r5, r3
 8006a18:	445b      	add	r3, fp
 8006a1a:	461e      	mov	r6, r3
 8006a1c:	462c      	mov	r4, r5
 8006a1e:	4544      	cmp	r4, r8
 8006a20:	d30e      	bcc.n	8006a40 <__mdiff+0xf8>
 8006a22:	f108 0103 	add.w	r1, r8, #3
 8006a26:	1b49      	subs	r1, r1, r5
 8006a28:	f021 0103 	bic.w	r1, r1, #3
 8006a2c:	3d03      	subs	r5, #3
 8006a2e:	45a8      	cmp	r8, r5
 8006a30:	bf38      	it	cc
 8006a32:	2100      	movcc	r1, #0
 8006a34:	440b      	add	r3, r1
 8006a36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a3a:	b191      	cbz	r1, 8006a62 <__mdiff+0x11a>
 8006a3c:	6117      	str	r7, [r2, #16]
 8006a3e:	e79d      	b.n	800697c <__mdiff+0x34>
 8006a40:	f854 1b04 	ldr.w	r1, [r4], #4
 8006a44:	46e6      	mov	lr, ip
 8006a46:	0c08      	lsrs	r0, r1, #16
 8006a48:	fa1c fc81 	uxtah	ip, ip, r1
 8006a4c:	4471      	add	r1, lr
 8006a4e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006a52:	b289      	uxth	r1, r1
 8006a54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006a58:	f846 1b04 	str.w	r1, [r6], #4
 8006a5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a60:	e7dd      	b.n	8006a1e <__mdiff+0xd6>
 8006a62:	3f01      	subs	r7, #1
 8006a64:	e7e7      	b.n	8006a36 <__mdiff+0xee>
 8006a66:	bf00      	nop
 8006a68:	08007958 	.word	0x08007958
 8006a6c:	08007969 	.word	0x08007969

08006a70 <__d2b>:
 8006a70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a74:	460f      	mov	r7, r1
 8006a76:	2101      	movs	r1, #1
 8006a78:	ec59 8b10 	vmov	r8, r9, d0
 8006a7c:	4616      	mov	r6, r2
 8006a7e:	f7ff fccd 	bl	800641c <_Balloc>
 8006a82:	4604      	mov	r4, r0
 8006a84:	b930      	cbnz	r0, 8006a94 <__d2b+0x24>
 8006a86:	4602      	mov	r2, r0
 8006a88:	4b23      	ldr	r3, [pc, #140]	@ (8006b18 <__d2b+0xa8>)
 8006a8a:	4824      	ldr	r0, [pc, #144]	@ (8006b1c <__d2b+0xac>)
 8006a8c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006a90:	f000 fa82 	bl	8006f98 <__assert_func>
 8006a94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a9c:	b10d      	cbz	r5, 8006aa2 <__d2b+0x32>
 8006a9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006aa2:	9301      	str	r3, [sp, #4]
 8006aa4:	f1b8 0300 	subs.w	r3, r8, #0
 8006aa8:	d023      	beq.n	8006af2 <__d2b+0x82>
 8006aaa:	4668      	mov	r0, sp
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	f7ff fd7c 	bl	80065aa <__lo0bits>
 8006ab2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ab6:	b1d0      	cbz	r0, 8006aee <__d2b+0x7e>
 8006ab8:	f1c0 0320 	rsb	r3, r0, #32
 8006abc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac0:	430b      	orrs	r3, r1
 8006ac2:	40c2      	lsrs	r2, r0
 8006ac4:	6163      	str	r3, [r4, #20]
 8006ac6:	9201      	str	r2, [sp, #4]
 8006ac8:	9b01      	ldr	r3, [sp, #4]
 8006aca:	61a3      	str	r3, [r4, #24]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	bf0c      	ite	eq
 8006ad0:	2201      	moveq	r2, #1
 8006ad2:	2202      	movne	r2, #2
 8006ad4:	6122      	str	r2, [r4, #16]
 8006ad6:	b1a5      	cbz	r5, 8006b02 <__d2b+0x92>
 8006ad8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006adc:	4405      	add	r5, r0
 8006ade:	603d      	str	r5, [r7, #0]
 8006ae0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006ae4:	6030      	str	r0, [r6, #0]
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	b003      	add	sp, #12
 8006aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006aee:	6161      	str	r1, [r4, #20]
 8006af0:	e7ea      	b.n	8006ac8 <__d2b+0x58>
 8006af2:	a801      	add	r0, sp, #4
 8006af4:	f7ff fd59 	bl	80065aa <__lo0bits>
 8006af8:	9b01      	ldr	r3, [sp, #4]
 8006afa:	6163      	str	r3, [r4, #20]
 8006afc:	3020      	adds	r0, #32
 8006afe:	2201      	movs	r2, #1
 8006b00:	e7e8      	b.n	8006ad4 <__d2b+0x64>
 8006b02:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b06:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006b0a:	6038      	str	r0, [r7, #0]
 8006b0c:	6918      	ldr	r0, [r3, #16]
 8006b0e:	f7ff fd2d 	bl	800656c <__hi0bits>
 8006b12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b16:	e7e5      	b.n	8006ae4 <__d2b+0x74>
 8006b18:	08007958 	.word	0x08007958
 8006b1c:	08007969 	.word	0x08007969

08006b20 <__ssputs_r>:
 8006b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b24:	688e      	ldr	r6, [r1, #8]
 8006b26:	461f      	mov	r7, r3
 8006b28:	42be      	cmp	r6, r7
 8006b2a:	680b      	ldr	r3, [r1, #0]
 8006b2c:	4682      	mov	sl, r0
 8006b2e:	460c      	mov	r4, r1
 8006b30:	4690      	mov	r8, r2
 8006b32:	d82d      	bhi.n	8006b90 <__ssputs_r+0x70>
 8006b34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b3c:	d026      	beq.n	8006b8c <__ssputs_r+0x6c>
 8006b3e:	6965      	ldr	r5, [r4, #20]
 8006b40:	6909      	ldr	r1, [r1, #16]
 8006b42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b46:	eba3 0901 	sub.w	r9, r3, r1
 8006b4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b4e:	1c7b      	adds	r3, r7, #1
 8006b50:	444b      	add	r3, r9
 8006b52:	106d      	asrs	r5, r5, #1
 8006b54:	429d      	cmp	r5, r3
 8006b56:	bf38      	it	cc
 8006b58:	461d      	movcc	r5, r3
 8006b5a:	0553      	lsls	r3, r2, #21
 8006b5c:	d527      	bpl.n	8006bae <__ssputs_r+0x8e>
 8006b5e:	4629      	mov	r1, r5
 8006b60:	f7ff fbd0 	bl	8006304 <_malloc_r>
 8006b64:	4606      	mov	r6, r0
 8006b66:	b360      	cbz	r0, 8006bc2 <__ssputs_r+0xa2>
 8006b68:	6921      	ldr	r1, [r4, #16]
 8006b6a:	464a      	mov	r2, r9
 8006b6c:	f000 fa06 	bl	8006f7c <memcpy>
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b7a:	81a3      	strh	r3, [r4, #12]
 8006b7c:	6126      	str	r6, [r4, #16]
 8006b7e:	6165      	str	r5, [r4, #20]
 8006b80:	444e      	add	r6, r9
 8006b82:	eba5 0509 	sub.w	r5, r5, r9
 8006b86:	6026      	str	r6, [r4, #0]
 8006b88:	60a5      	str	r5, [r4, #8]
 8006b8a:	463e      	mov	r6, r7
 8006b8c:	42be      	cmp	r6, r7
 8006b8e:	d900      	bls.n	8006b92 <__ssputs_r+0x72>
 8006b90:	463e      	mov	r6, r7
 8006b92:	6820      	ldr	r0, [r4, #0]
 8006b94:	4632      	mov	r2, r6
 8006b96:	4641      	mov	r1, r8
 8006b98:	f000 f9c6 	bl	8006f28 <memmove>
 8006b9c:	68a3      	ldr	r3, [r4, #8]
 8006b9e:	1b9b      	subs	r3, r3, r6
 8006ba0:	60a3      	str	r3, [r4, #8]
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	4433      	add	r3, r6
 8006ba6:	6023      	str	r3, [r4, #0]
 8006ba8:	2000      	movs	r0, #0
 8006baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bae:	462a      	mov	r2, r5
 8006bb0:	f000 fa36 	bl	8007020 <_realloc_r>
 8006bb4:	4606      	mov	r6, r0
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	d1e0      	bne.n	8006b7c <__ssputs_r+0x5c>
 8006bba:	6921      	ldr	r1, [r4, #16]
 8006bbc:	4650      	mov	r0, sl
 8006bbe:	f7ff fb2d 	bl	800621c <_free_r>
 8006bc2:	230c      	movs	r3, #12
 8006bc4:	f8ca 3000 	str.w	r3, [sl]
 8006bc8:	89a3      	ldrh	r3, [r4, #12]
 8006bca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bce:	81a3      	strh	r3, [r4, #12]
 8006bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd4:	e7e9      	b.n	8006baa <__ssputs_r+0x8a>
	...

08006bd8 <_svfiprintf_r>:
 8006bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bdc:	4698      	mov	r8, r3
 8006bde:	898b      	ldrh	r3, [r1, #12]
 8006be0:	061b      	lsls	r3, r3, #24
 8006be2:	b09d      	sub	sp, #116	@ 0x74
 8006be4:	4607      	mov	r7, r0
 8006be6:	460d      	mov	r5, r1
 8006be8:	4614      	mov	r4, r2
 8006bea:	d510      	bpl.n	8006c0e <_svfiprintf_r+0x36>
 8006bec:	690b      	ldr	r3, [r1, #16]
 8006bee:	b973      	cbnz	r3, 8006c0e <_svfiprintf_r+0x36>
 8006bf0:	2140      	movs	r1, #64	@ 0x40
 8006bf2:	f7ff fb87 	bl	8006304 <_malloc_r>
 8006bf6:	6028      	str	r0, [r5, #0]
 8006bf8:	6128      	str	r0, [r5, #16]
 8006bfa:	b930      	cbnz	r0, 8006c0a <_svfiprintf_r+0x32>
 8006bfc:	230c      	movs	r3, #12
 8006bfe:	603b      	str	r3, [r7, #0]
 8006c00:	f04f 30ff 	mov.w	r0, #4294967295
 8006c04:	b01d      	add	sp, #116	@ 0x74
 8006c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c0a:	2340      	movs	r3, #64	@ 0x40
 8006c0c:	616b      	str	r3, [r5, #20]
 8006c0e:	2300      	movs	r3, #0
 8006c10:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c12:	2320      	movs	r3, #32
 8006c14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c18:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c1c:	2330      	movs	r3, #48	@ 0x30
 8006c1e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006dbc <_svfiprintf_r+0x1e4>
 8006c22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c26:	f04f 0901 	mov.w	r9, #1
 8006c2a:	4623      	mov	r3, r4
 8006c2c:	469a      	mov	sl, r3
 8006c2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c32:	b10a      	cbz	r2, 8006c38 <_svfiprintf_r+0x60>
 8006c34:	2a25      	cmp	r2, #37	@ 0x25
 8006c36:	d1f9      	bne.n	8006c2c <_svfiprintf_r+0x54>
 8006c38:	ebba 0b04 	subs.w	fp, sl, r4
 8006c3c:	d00b      	beq.n	8006c56 <_svfiprintf_r+0x7e>
 8006c3e:	465b      	mov	r3, fp
 8006c40:	4622      	mov	r2, r4
 8006c42:	4629      	mov	r1, r5
 8006c44:	4638      	mov	r0, r7
 8006c46:	f7ff ff6b 	bl	8006b20 <__ssputs_r>
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	f000 80a7 	beq.w	8006d9e <_svfiprintf_r+0x1c6>
 8006c50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c52:	445a      	add	r2, fp
 8006c54:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c56:	f89a 3000 	ldrb.w	r3, [sl]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f000 809f 	beq.w	8006d9e <_svfiprintf_r+0x1c6>
 8006c60:	2300      	movs	r3, #0
 8006c62:	f04f 32ff 	mov.w	r2, #4294967295
 8006c66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c6a:	f10a 0a01 	add.w	sl, sl, #1
 8006c6e:	9304      	str	r3, [sp, #16]
 8006c70:	9307      	str	r3, [sp, #28]
 8006c72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c76:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c78:	4654      	mov	r4, sl
 8006c7a:	2205      	movs	r2, #5
 8006c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c80:	484e      	ldr	r0, [pc, #312]	@ (8006dbc <_svfiprintf_r+0x1e4>)
 8006c82:	f7f9 fadd 	bl	8000240 <memchr>
 8006c86:	9a04      	ldr	r2, [sp, #16]
 8006c88:	b9d8      	cbnz	r0, 8006cc2 <_svfiprintf_r+0xea>
 8006c8a:	06d0      	lsls	r0, r2, #27
 8006c8c:	bf44      	itt	mi
 8006c8e:	2320      	movmi	r3, #32
 8006c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c94:	0711      	lsls	r1, r2, #28
 8006c96:	bf44      	itt	mi
 8006c98:	232b      	movmi	r3, #43	@ 0x2b
 8006c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8006ca2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ca4:	d015      	beq.n	8006cd2 <_svfiprintf_r+0xfa>
 8006ca6:	9a07      	ldr	r2, [sp, #28]
 8006ca8:	4654      	mov	r4, sl
 8006caa:	2000      	movs	r0, #0
 8006cac:	f04f 0c0a 	mov.w	ip, #10
 8006cb0:	4621      	mov	r1, r4
 8006cb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cb6:	3b30      	subs	r3, #48	@ 0x30
 8006cb8:	2b09      	cmp	r3, #9
 8006cba:	d94b      	bls.n	8006d54 <_svfiprintf_r+0x17c>
 8006cbc:	b1b0      	cbz	r0, 8006cec <_svfiprintf_r+0x114>
 8006cbe:	9207      	str	r2, [sp, #28]
 8006cc0:	e014      	b.n	8006cec <_svfiprintf_r+0x114>
 8006cc2:	eba0 0308 	sub.w	r3, r0, r8
 8006cc6:	fa09 f303 	lsl.w	r3, r9, r3
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	9304      	str	r3, [sp, #16]
 8006cce:	46a2      	mov	sl, r4
 8006cd0:	e7d2      	b.n	8006c78 <_svfiprintf_r+0xa0>
 8006cd2:	9b03      	ldr	r3, [sp, #12]
 8006cd4:	1d19      	adds	r1, r3, #4
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	9103      	str	r1, [sp, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	bfbb      	ittet	lt
 8006cde:	425b      	neglt	r3, r3
 8006ce0:	f042 0202 	orrlt.w	r2, r2, #2
 8006ce4:	9307      	strge	r3, [sp, #28]
 8006ce6:	9307      	strlt	r3, [sp, #28]
 8006ce8:	bfb8      	it	lt
 8006cea:	9204      	strlt	r2, [sp, #16]
 8006cec:	7823      	ldrb	r3, [r4, #0]
 8006cee:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cf0:	d10a      	bne.n	8006d08 <_svfiprintf_r+0x130>
 8006cf2:	7863      	ldrb	r3, [r4, #1]
 8006cf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cf6:	d132      	bne.n	8006d5e <_svfiprintf_r+0x186>
 8006cf8:	9b03      	ldr	r3, [sp, #12]
 8006cfa:	1d1a      	adds	r2, r3, #4
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	9203      	str	r2, [sp, #12]
 8006d00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d04:	3402      	adds	r4, #2
 8006d06:	9305      	str	r3, [sp, #20]
 8006d08:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006dcc <_svfiprintf_r+0x1f4>
 8006d0c:	7821      	ldrb	r1, [r4, #0]
 8006d0e:	2203      	movs	r2, #3
 8006d10:	4650      	mov	r0, sl
 8006d12:	f7f9 fa95 	bl	8000240 <memchr>
 8006d16:	b138      	cbz	r0, 8006d28 <_svfiprintf_r+0x150>
 8006d18:	9b04      	ldr	r3, [sp, #16]
 8006d1a:	eba0 000a 	sub.w	r0, r0, sl
 8006d1e:	2240      	movs	r2, #64	@ 0x40
 8006d20:	4082      	lsls	r2, r0
 8006d22:	4313      	orrs	r3, r2
 8006d24:	3401      	adds	r4, #1
 8006d26:	9304      	str	r3, [sp, #16]
 8006d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d2c:	4824      	ldr	r0, [pc, #144]	@ (8006dc0 <_svfiprintf_r+0x1e8>)
 8006d2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d32:	2206      	movs	r2, #6
 8006d34:	f7f9 fa84 	bl	8000240 <memchr>
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	d036      	beq.n	8006daa <_svfiprintf_r+0x1d2>
 8006d3c:	4b21      	ldr	r3, [pc, #132]	@ (8006dc4 <_svfiprintf_r+0x1ec>)
 8006d3e:	bb1b      	cbnz	r3, 8006d88 <_svfiprintf_r+0x1b0>
 8006d40:	9b03      	ldr	r3, [sp, #12]
 8006d42:	3307      	adds	r3, #7
 8006d44:	f023 0307 	bic.w	r3, r3, #7
 8006d48:	3308      	adds	r3, #8
 8006d4a:	9303      	str	r3, [sp, #12]
 8006d4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d4e:	4433      	add	r3, r6
 8006d50:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d52:	e76a      	b.n	8006c2a <_svfiprintf_r+0x52>
 8006d54:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d58:	460c      	mov	r4, r1
 8006d5a:	2001      	movs	r0, #1
 8006d5c:	e7a8      	b.n	8006cb0 <_svfiprintf_r+0xd8>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	3401      	adds	r4, #1
 8006d62:	9305      	str	r3, [sp, #20]
 8006d64:	4619      	mov	r1, r3
 8006d66:	f04f 0c0a 	mov.w	ip, #10
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d70:	3a30      	subs	r2, #48	@ 0x30
 8006d72:	2a09      	cmp	r2, #9
 8006d74:	d903      	bls.n	8006d7e <_svfiprintf_r+0x1a6>
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0c6      	beq.n	8006d08 <_svfiprintf_r+0x130>
 8006d7a:	9105      	str	r1, [sp, #20]
 8006d7c:	e7c4      	b.n	8006d08 <_svfiprintf_r+0x130>
 8006d7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d82:	4604      	mov	r4, r0
 8006d84:	2301      	movs	r3, #1
 8006d86:	e7f0      	b.n	8006d6a <_svfiprintf_r+0x192>
 8006d88:	ab03      	add	r3, sp, #12
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	462a      	mov	r2, r5
 8006d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8006dc8 <_svfiprintf_r+0x1f0>)
 8006d90:	a904      	add	r1, sp, #16
 8006d92:	4638      	mov	r0, r7
 8006d94:	f7fd ff14 	bl	8004bc0 <_printf_float>
 8006d98:	1c42      	adds	r2, r0, #1
 8006d9a:	4606      	mov	r6, r0
 8006d9c:	d1d6      	bne.n	8006d4c <_svfiprintf_r+0x174>
 8006d9e:	89ab      	ldrh	r3, [r5, #12]
 8006da0:	065b      	lsls	r3, r3, #25
 8006da2:	f53f af2d 	bmi.w	8006c00 <_svfiprintf_r+0x28>
 8006da6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006da8:	e72c      	b.n	8006c04 <_svfiprintf_r+0x2c>
 8006daa:	ab03      	add	r3, sp, #12
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	462a      	mov	r2, r5
 8006db0:	4b05      	ldr	r3, [pc, #20]	@ (8006dc8 <_svfiprintf_r+0x1f0>)
 8006db2:	a904      	add	r1, sp, #16
 8006db4:	4638      	mov	r0, r7
 8006db6:	f7fe f98b 	bl	80050d0 <_printf_i>
 8006dba:	e7ed      	b.n	8006d98 <_svfiprintf_r+0x1c0>
 8006dbc:	08007ac0 	.word	0x08007ac0
 8006dc0:	08007aca 	.word	0x08007aca
 8006dc4:	08004bc1 	.word	0x08004bc1
 8006dc8:	08006b21 	.word	0x08006b21
 8006dcc:	08007ac6 	.word	0x08007ac6

08006dd0 <__sflush_r>:
 8006dd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd8:	0716      	lsls	r6, r2, #28
 8006dda:	4605      	mov	r5, r0
 8006ddc:	460c      	mov	r4, r1
 8006dde:	d454      	bmi.n	8006e8a <__sflush_r+0xba>
 8006de0:	684b      	ldr	r3, [r1, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	dc02      	bgt.n	8006dec <__sflush_r+0x1c>
 8006de6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	dd48      	ble.n	8006e7e <__sflush_r+0xae>
 8006dec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006dee:	2e00      	cmp	r6, #0
 8006df0:	d045      	beq.n	8006e7e <__sflush_r+0xae>
 8006df2:	2300      	movs	r3, #0
 8006df4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006df8:	682f      	ldr	r7, [r5, #0]
 8006dfa:	6a21      	ldr	r1, [r4, #32]
 8006dfc:	602b      	str	r3, [r5, #0]
 8006dfe:	d030      	beq.n	8006e62 <__sflush_r+0x92>
 8006e00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006e02:	89a3      	ldrh	r3, [r4, #12]
 8006e04:	0759      	lsls	r1, r3, #29
 8006e06:	d505      	bpl.n	8006e14 <__sflush_r+0x44>
 8006e08:	6863      	ldr	r3, [r4, #4]
 8006e0a:	1ad2      	subs	r2, r2, r3
 8006e0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e0e:	b10b      	cbz	r3, 8006e14 <__sflush_r+0x44>
 8006e10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e12:	1ad2      	subs	r2, r2, r3
 8006e14:	2300      	movs	r3, #0
 8006e16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e18:	6a21      	ldr	r1, [r4, #32]
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	47b0      	blx	r6
 8006e1e:	1c43      	adds	r3, r0, #1
 8006e20:	89a3      	ldrh	r3, [r4, #12]
 8006e22:	d106      	bne.n	8006e32 <__sflush_r+0x62>
 8006e24:	6829      	ldr	r1, [r5, #0]
 8006e26:	291d      	cmp	r1, #29
 8006e28:	d82b      	bhi.n	8006e82 <__sflush_r+0xb2>
 8006e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8006ed4 <__sflush_r+0x104>)
 8006e2c:	410a      	asrs	r2, r1
 8006e2e:	07d6      	lsls	r6, r2, #31
 8006e30:	d427      	bmi.n	8006e82 <__sflush_r+0xb2>
 8006e32:	2200      	movs	r2, #0
 8006e34:	6062      	str	r2, [r4, #4]
 8006e36:	04d9      	lsls	r1, r3, #19
 8006e38:	6922      	ldr	r2, [r4, #16]
 8006e3a:	6022      	str	r2, [r4, #0]
 8006e3c:	d504      	bpl.n	8006e48 <__sflush_r+0x78>
 8006e3e:	1c42      	adds	r2, r0, #1
 8006e40:	d101      	bne.n	8006e46 <__sflush_r+0x76>
 8006e42:	682b      	ldr	r3, [r5, #0]
 8006e44:	b903      	cbnz	r3, 8006e48 <__sflush_r+0x78>
 8006e46:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e4a:	602f      	str	r7, [r5, #0]
 8006e4c:	b1b9      	cbz	r1, 8006e7e <__sflush_r+0xae>
 8006e4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e52:	4299      	cmp	r1, r3
 8006e54:	d002      	beq.n	8006e5c <__sflush_r+0x8c>
 8006e56:	4628      	mov	r0, r5
 8006e58:	f7ff f9e0 	bl	800621c <_free_r>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e60:	e00d      	b.n	8006e7e <__sflush_r+0xae>
 8006e62:	2301      	movs	r3, #1
 8006e64:	4628      	mov	r0, r5
 8006e66:	47b0      	blx	r6
 8006e68:	4602      	mov	r2, r0
 8006e6a:	1c50      	adds	r0, r2, #1
 8006e6c:	d1c9      	bne.n	8006e02 <__sflush_r+0x32>
 8006e6e:	682b      	ldr	r3, [r5, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d0c6      	beq.n	8006e02 <__sflush_r+0x32>
 8006e74:	2b1d      	cmp	r3, #29
 8006e76:	d001      	beq.n	8006e7c <__sflush_r+0xac>
 8006e78:	2b16      	cmp	r3, #22
 8006e7a:	d11e      	bne.n	8006eba <__sflush_r+0xea>
 8006e7c:	602f      	str	r7, [r5, #0]
 8006e7e:	2000      	movs	r0, #0
 8006e80:	e022      	b.n	8006ec8 <__sflush_r+0xf8>
 8006e82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e86:	b21b      	sxth	r3, r3
 8006e88:	e01b      	b.n	8006ec2 <__sflush_r+0xf2>
 8006e8a:	690f      	ldr	r7, [r1, #16]
 8006e8c:	2f00      	cmp	r7, #0
 8006e8e:	d0f6      	beq.n	8006e7e <__sflush_r+0xae>
 8006e90:	0793      	lsls	r3, r2, #30
 8006e92:	680e      	ldr	r6, [r1, #0]
 8006e94:	bf08      	it	eq
 8006e96:	694b      	ldreq	r3, [r1, #20]
 8006e98:	600f      	str	r7, [r1, #0]
 8006e9a:	bf18      	it	ne
 8006e9c:	2300      	movne	r3, #0
 8006e9e:	eba6 0807 	sub.w	r8, r6, r7
 8006ea2:	608b      	str	r3, [r1, #8]
 8006ea4:	f1b8 0f00 	cmp.w	r8, #0
 8006ea8:	dde9      	ble.n	8006e7e <__sflush_r+0xae>
 8006eaa:	6a21      	ldr	r1, [r4, #32]
 8006eac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006eae:	4643      	mov	r3, r8
 8006eb0:	463a      	mov	r2, r7
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	47b0      	blx	r6
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	dc08      	bgt.n	8006ecc <__sflush_r+0xfc>
 8006eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ec2:	81a3      	strh	r3, [r4, #12]
 8006ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ecc:	4407      	add	r7, r0
 8006ece:	eba8 0800 	sub.w	r8, r8, r0
 8006ed2:	e7e7      	b.n	8006ea4 <__sflush_r+0xd4>
 8006ed4:	dfbffffe 	.word	0xdfbffffe

08006ed8 <_fflush_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	690b      	ldr	r3, [r1, #16]
 8006edc:	4605      	mov	r5, r0
 8006ede:	460c      	mov	r4, r1
 8006ee0:	b913      	cbnz	r3, 8006ee8 <_fflush_r+0x10>
 8006ee2:	2500      	movs	r5, #0
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	bd38      	pop	{r3, r4, r5, pc}
 8006ee8:	b118      	cbz	r0, 8006ef2 <_fflush_r+0x1a>
 8006eea:	6a03      	ldr	r3, [r0, #32]
 8006eec:	b90b      	cbnz	r3, 8006ef2 <_fflush_r+0x1a>
 8006eee:	f7fe fa9b 	bl	8005428 <__sinit>
 8006ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d0f3      	beq.n	8006ee2 <_fflush_r+0xa>
 8006efa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006efc:	07d0      	lsls	r0, r2, #31
 8006efe:	d404      	bmi.n	8006f0a <_fflush_r+0x32>
 8006f00:	0599      	lsls	r1, r3, #22
 8006f02:	d402      	bmi.n	8006f0a <_fflush_r+0x32>
 8006f04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f06:	f7fe fba6 	bl	8005656 <__retarget_lock_acquire_recursive>
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	4621      	mov	r1, r4
 8006f0e:	f7ff ff5f 	bl	8006dd0 <__sflush_r>
 8006f12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f14:	07da      	lsls	r2, r3, #31
 8006f16:	4605      	mov	r5, r0
 8006f18:	d4e4      	bmi.n	8006ee4 <_fflush_r+0xc>
 8006f1a:	89a3      	ldrh	r3, [r4, #12]
 8006f1c:	059b      	lsls	r3, r3, #22
 8006f1e:	d4e1      	bmi.n	8006ee4 <_fflush_r+0xc>
 8006f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f22:	f7fe fb99 	bl	8005658 <__retarget_lock_release_recursive>
 8006f26:	e7dd      	b.n	8006ee4 <_fflush_r+0xc>

08006f28 <memmove>:
 8006f28:	4288      	cmp	r0, r1
 8006f2a:	b510      	push	{r4, lr}
 8006f2c:	eb01 0402 	add.w	r4, r1, r2
 8006f30:	d902      	bls.n	8006f38 <memmove+0x10>
 8006f32:	4284      	cmp	r4, r0
 8006f34:	4623      	mov	r3, r4
 8006f36:	d807      	bhi.n	8006f48 <memmove+0x20>
 8006f38:	1e43      	subs	r3, r0, #1
 8006f3a:	42a1      	cmp	r1, r4
 8006f3c:	d008      	beq.n	8006f50 <memmove+0x28>
 8006f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f46:	e7f8      	b.n	8006f3a <memmove+0x12>
 8006f48:	4402      	add	r2, r0
 8006f4a:	4601      	mov	r1, r0
 8006f4c:	428a      	cmp	r2, r1
 8006f4e:	d100      	bne.n	8006f52 <memmove+0x2a>
 8006f50:	bd10      	pop	{r4, pc}
 8006f52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f5a:	e7f7      	b.n	8006f4c <memmove+0x24>

08006f5c <_sbrk_r>:
 8006f5c:	b538      	push	{r3, r4, r5, lr}
 8006f5e:	4d06      	ldr	r5, [pc, #24]	@ (8006f78 <_sbrk_r+0x1c>)
 8006f60:	2300      	movs	r3, #0
 8006f62:	4604      	mov	r4, r0
 8006f64:	4608      	mov	r0, r1
 8006f66:	602b      	str	r3, [r5, #0]
 8006f68:	f7f9 ff58 	bl	8000e1c <_sbrk>
 8006f6c:	1c43      	adds	r3, r0, #1
 8006f6e:	d102      	bne.n	8006f76 <_sbrk_r+0x1a>
 8006f70:	682b      	ldr	r3, [r5, #0]
 8006f72:	b103      	cbz	r3, 8006f76 <_sbrk_r+0x1a>
 8006f74:	6023      	str	r3, [r4, #0]
 8006f76:	bd38      	pop	{r3, r4, r5, pc}
 8006f78:	2000047c 	.word	0x2000047c

08006f7c <memcpy>:
 8006f7c:	440a      	add	r2, r1
 8006f7e:	4291      	cmp	r1, r2
 8006f80:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f84:	d100      	bne.n	8006f88 <memcpy+0xc>
 8006f86:	4770      	bx	lr
 8006f88:	b510      	push	{r4, lr}
 8006f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f92:	4291      	cmp	r1, r2
 8006f94:	d1f9      	bne.n	8006f8a <memcpy+0xe>
 8006f96:	bd10      	pop	{r4, pc}

08006f98 <__assert_func>:
 8006f98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f9a:	4614      	mov	r4, r2
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	4b09      	ldr	r3, [pc, #36]	@ (8006fc4 <__assert_func+0x2c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4605      	mov	r5, r0
 8006fa4:	68d8      	ldr	r0, [r3, #12]
 8006fa6:	b954      	cbnz	r4, 8006fbe <__assert_func+0x26>
 8006fa8:	4b07      	ldr	r3, [pc, #28]	@ (8006fc8 <__assert_func+0x30>)
 8006faa:	461c      	mov	r4, r3
 8006fac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fb0:	9100      	str	r1, [sp, #0]
 8006fb2:	462b      	mov	r3, r5
 8006fb4:	4905      	ldr	r1, [pc, #20]	@ (8006fcc <__assert_func+0x34>)
 8006fb6:	f000 f86f 	bl	8007098 <fiprintf>
 8006fba:	f000 f87f 	bl	80070bc <abort>
 8006fbe:	4b04      	ldr	r3, [pc, #16]	@ (8006fd0 <__assert_func+0x38>)
 8006fc0:	e7f4      	b.n	8006fac <__assert_func+0x14>
 8006fc2:	bf00      	nop
 8006fc4:	2000001c 	.word	0x2000001c
 8006fc8:	08007b16 	.word	0x08007b16
 8006fcc:	08007ae8 	.word	0x08007ae8
 8006fd0:	08007adb 	.word	0x08007adb

08006fd4 <_calloc_r>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	fba1 5402 	umull	r5, r4, r1, r2
 8006fda:	b93c      	cbnz	r4, 8006fec <_calloc_r+0x18>
 8006fdc:	4629      	mov	r1, r5
 8006fde:	f7ff f991 	bl	8006304 <_malloc_r>
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	b928      	cbnz	r0, 8006ff2 <_calloc_r+0x1e>
 8006fe6:	2600      	movs	r6, #0
 8006fe8:	4630      	mov	r0, r6
 8006fea:	bd70      	pop	{r4, r5, r6, pc}
 8006fec:	220c      	movs	r2, #12
 8006fee:	6002      	str	r2, [r0, #0]
 8006ff0:	e7f9      	b.n	8006fe6 <_calloc_r+0x12>
 8006ff2:	462a      	mov	r2, r5
 8006ff4:	4621      	mov	r1, r4
 8006ff6:	f7fe fab0 	bl	800555a <memset>
 8006ffa:	e7f5      	b.n	8006fe8 <_calloc_r+0x14>

08006ffc <__ascii_mbtowc>:
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	b901      	cbnz	r1, 8007002 <__ascii_mbtowc+0x6>
 8007000:	a901      	add	r1, sp, #4
 8007002:	b142      	cbz	r2, 8007016 <__ascii_mbtowc+0x1a>
 8007004:	b14b      	cbz	r3, 800701a <__ascii_mbtowc+0x1e>
 8007006:	7813      	ldrb	r3, [r2, #0]
 8007008:	600b      	str	r3, [r1, #0]
 800700a:	7812      	ldrb	r2, [r2, #0]
 800700c:	1e10      	subs	r0, r2, #0
 800700e:	bf18      	it	ne
 8007010:	2001      	movne	r0, #1
 8007012:	b002      	add	sp, #8
 8007014:	4770      	bx	lr
 8007016:	4610      	mov	r0, r2
 8007018:	e7fb      	b.n	8007012 <__ascii_mbtowc+0x16>
 800701a:	f06f 0001 	mvn.w	r0, #1
 800701e:	e7f8      	b.n	8007012 <__ascii_mbtowc+0x16>

08007020 <_realloc_r>:
 8007020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007024:	4680      	mov	r8, r0
 8007026:	4615      	mov	r5, r2
 8007028:	460c      	mov	r4, r1
 800702a:	b921      	cbnz	r1, 8007036 <_realloc_r+0x16>
 800702c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007030:	4611      	mov	r1, r2
 8007032:	f7ff b967 	b.w	8006304 <_malloc_r>
 8007036:	b92a      	cbnz	r2, 8007044 <_realloc_r+0x24>
 8007038:	f7ff f8f0 	bl	800621c <_free_r>
 800703c:	2400      	movs	r4, #0
 800703e:	4620      	mov	r0, r4
 8007040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007044:	f000 f841 	bl	80070ca <_malloc_usable_size_r>
 8007048:	4285      	cmp	r5, r0
 800704a:	4606      	mov	r6, r0
 800704c:	d802      	bhi.n	8007054 <_realloc_r+0x34>
 800704e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007052:	d8f4      	bhi.n	800703e <_realloc_r+0x1e>
 8007054:	4629      	mov	r1, r5
 8007056:	4640      	mov	r0, r8
 8007058:	f7ff f954 	bl	8006304 <_malloc_r>
 800705c:	4607      	mov	r7, r0
 800705e:	2800      	cmp	r0, #0
 8007060:	d0ec      	beq.n	800703c <_realloc_r+0x1c>
 8007062:	42b5      	cmp	r5, r6
 8007064:	462a      	mov	r2, r5
 8007066:	4621      	mov	r1, r4
 8007068:	bf28      	it	cs
 800706a:	4632      	movcs	r2, r6
 800706c:	f7ff ff86 	bl	8006f7c <memcpy>
 8007070:	4621      	mov	r1, r4
 8007072:	4640      	mov	r0, r8
 8007074:	f7ff f8d2 	bl	800621c <_free_r>
 8007078:	463c      	mov	r4, r7
 800707a:	e7e0      	b.n	800703e <_realloc_r+0x1e>

0800707c <__ascii_wctomb>:
 800707c:	4603      	mov	r3, r0
 800707e:	4608      	mov	r0, r1
 8007080:	b141      	cbz	r1, 8007094 <__ascii_wctomb+0x18>
 8007082:	2aff      	cmp	r2, #255	@ 0xff
 8007084:	d904      	bls.n	8007090 <__ascii_wctomb+0x14>
 8007086:	228a      	movs	r2, #138	@ 0x8a
 8007088:	601a      	str	r2, [r3, #0]
 800708a:	f04f 30ff 	mov.w	r0, #4294967295
 800708e:	4770      	bx	lr
 8007090:	700a      	strb	r2, [r1, #0]
 8007092:	2001      	movs	r0, #1
 8007094:	4770      	bx	lr
	...

08007098 <fiprintf>:
 8007098:	b40e      	push	{r1, r2, r3}
 800709a:	b503      	push	{r0, r1, lr}
 800709c:	4601      	mov	r1, r0
 800709e:	ab03      	add	r3, sp, #12
 80070a0:	4805      	ldr	r0, [pc, #20]	@ (80070b8 <fiprintf+0x20>)
 80070a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80070a6:	6800      	ldr	r0, [r0, #0]
 80070a8:	9301      	str	r3, [sp, #4]
 80070aa:	f000 f83f 	bl	800712c <_vfiprintf_r>
 80070ae:	b002      	add	sp, #8
 80070b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80070b4:	b003      	add	sp, #12
 80070b6:	4770      	bx	lr
 80070b8:	2000001c 	.word	0x2000001c

080070bc <abort>:
 80070bc:	b508      	push	{r3, lr}
 80070be:	2006      	movs	r0, #6
 80070c0:	f000 fa08 	bl	80074d4 <raise>
 80070c4:	2001      	movs	r0, #1
 80070c6:	f7f9 fe31 	bl	8000d2c <_exit>

080070ca <_malloc_usable_size_r>:
 80070ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070ce:	1f18      	subs	r0, r3, #4
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	bfbc      	itt	lt
 80070d4:	580b      	ldrlt	r3, [r1, r0]
 80070d6:	18c0      	addlt	r0, r0, r3
 80070d8:	4770      	bx	lr

080070da <__sfputc_r>:
 80070da:	6893      	ldr	r3, [r2, #8]
 80070dc:	3b01      	subs	r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	b410      	push	{r4}
 80070e2:	6093      	str	r3, [r2, #8]
 80070e4:	da08      	bge.n	80070f8 <__sfputc_r+0x1e>
 80070e6:	6994      	ldr	r4, [r2, #24]
 80070e8:	42a3      	cmp	r3, r4
 80070ea:	db01      	blt.n	80070f0 <__sfputc_r+0x16>
 80070ec:	290a      	cmp	r1, #10
 80070ee:	d103      	bne.n	80070f8 <__sfputc_r+0x1e>
 80070f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070f4:	f000 b932 	b.w	800735c <__swbuf_r>
 80070f8:	6813      	ldr	r3, [r2, #0]
 80070fa:	1c58      	adds	r0, r3, #1
 80070fc:	6010      	str	r0, [r2, #0]
 80070fe:	7019      	strb	r1, [r3, #0]
 8007100:	4608      	mov	r0, r1
 8007102:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007106:	4770      	bx	lr

08007108 <__sfputs_r>:
 8007108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710a:	4606      	mov	r6, r0
 800710c:	460f      	mov	r7, r1
 800710e:	4614      	mov	r4, r2
 8007110:	18d5      	adds	r5, r2, r3
 8007112:	42ac      	cmp	r4, r5
 8007114:	d101      	bne.n	800711a <__sfputs_r+0x12>
 8007116:	2000      	movs	r0, #0
 8007118:	e007      	b.n	800712a <__sfputs_r+0x22>
 800711a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800711e:	463a      	mov	r2, r7
 8007120:	4630      	mov	r0, r6
 8007122:	f7ff ffda 	bl	80070da <__sfputc_r>
 8007126:	1c43      	adds	r3, r0, #1
 8007128:	d1f3      	bne.n	8007112 <__sfputs_r+0xa>
 800712a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800712c <_vfiprintf_r>:
 800712c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007130:	460d      	mov	r5, r1
 8007132:	b09d      	sub	sp, #116	@ 0x74
 8007134:	4614      	mov	r4, r2
 8007136:	4698      	mov	r8, r3
 8007138:	4606      	mov	r6, r0
 800713a:	b118      	cbz	r0, 8007144 <_vfiprintf_r+0x18>
 800713c:	6a03      	ldr	r3, [r0, #32]
 800713e:	b90b      	cbnz	r3, 8007144 <_vfiprintf_r+0x18>
 8007140:	f7fe f972 	bl	8005428 <__sinit>
 8007144:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007146:	07d9      	lsls	r1, r3, #31
 8007148:	d405      	bmi.n	8007156 <_vfiprintf_r+0x2a>
 800714a:	89ab      	ldrh	r3, [r5, #12]
 800714c:	059a      	lsls	r2, r3, #22
 800714e:	d402      	bmi.n	8007156 <_vfiprintf_r+0x2a>
 8007150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007152:	f7fe fa80 	bl	8005656 <__retarget_lock_acquire_recursive>
 8007156:	89ab      	ldrh	r3, [r5, #12]
 8007158:	071b      	lsls	r3, r3, #28
 800715a:	d501      	bpl.n	8007160 <_vfiprintf_r+0x34>
 800715c:	692b      	ldr	r3, [r5, #16]
 800715e:	b99b      	cbnz	r3, 8007188 <_vfiprintf_r+0x5c>
 8007160:	4629      	mov	r1, r5
 8007162:	4630      	mov	r0, r6
 8007164:	f000 f938 	bl	80073d8 <__swsetup_r>
 8007168:	b170      	cbz	r0, 8007188 <_vfiprintf_r+0x5c>
 800716a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800716c:	07dc      	lsls	r4, r3, #31
 800716e:	d504      	bpl.n	800717a <_vfiprintf_r+0x4e>
 8007170:	f04f 30ff 	mov.w	r0, #4294967295
 8007174:	b01d      	add	sp, #116	@ 0x74
 8007176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800717a:	89ab      	ldrh	r3, [r5, #12]
 800717c:	0598      	lsls	r0, r3, #22
 800717e:	d4f7      	bmi.n	8007170 <_vfiprintf_r+0x44>
 8007180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007182:	f7fe fa69 	bl	8005658 <__retarget_lock_release_recursive>
 8007186:	e7f3      	b.n	8007170 <_vfiprintf_r+0x44>
 8007188:	2300      	movs	r3, #0
 800718a:	9309      	str	r3, [sp, #36]	@ 0x24
 800718c:	2320      	movs	r3, #32
 800718e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007192:	f8cd 800c 	str.w	r8, [sp, #12]
 8007196:	2330      	movs	r3, #48	@ 0x30
 8007198:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007348 <_vfiprintf_r+0x21c>
 800719c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071a0:	f04f 0901 	mov.w	r9, #1
 80071a4:	4623      	mov	r3, r4
 80071a6:	469a      	mov	sl, r3
 80071a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071ac:	b10a      	cbz	r2, 80071b2 <_vfiprintf_r+0x86>
 80071ae:	2a25      	cmp	r2, #37	@ 0x25
 80071b0:	d1f9      	bne.n	80071a6 <_vfiprintf_r+0x7a>
 80071b2:	ebba 0b04 	subs.w	fp, sl, r4
 80071b6:	d00b      	beq.n	80071d0 <_vfiprintf_r+0xa4>
 80071b8:	465b      	mov	r3, fp
 80071ba:	4622      	mov	r2, r4
 80071bc:	4629      	mov	r1, r5
 80071be:	4630      	mov	r0, r6
 80071c0:	f7ff ffa2 	bl	8007108 <__sfputs_r>
 80071c4:	3001      	adds	r0, #1
 80071c6:	f000 80a7 	beq.w	8007318 <_vfiprintf_r+0x1ec>
 80071ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071cc:	445a      	add	r2, fp
 80071ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80071d0:	f89a 3000 	ldrb.w	r3, [sl]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 809f 	beq.w	8007318 <_vfiprintf_r+0x1ec>
 80071da:	2300      	movs	r3, #0
 80071dc:	f04f 32ff 	mov.w	r2, #4294967295
 80071e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071e4:	f10a 0a01 	add.w	sl, sl, #1
 80071e8:	9304      	str	r3, [sp, #16]
 80071ea:	9307      	str	r3, [sp, #28]
 80071ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80071f2:	4654      	mov	r4, sl
 80071f4:	2205      	movs	r2, #5
 80071f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071fa:	4853      	ldr	r0, [pc, #332]	@ (8007348 <_vfiprintf_r+0x21c>)
 80071fc:	f7f9 f820 	bl	8000240 <memchr>
 8007200:	9a04      	ldr	r2, [sp, #16]
 8007202:	b9d8      	cbnz	r0, 800723c <_vfiprintf_r+0x110>
 8007204:	06d1      	lsls	r1, r2, #27
 8007206:	bf44      	itt	mi
 8007208:	2320      	movmi	r3, #32
 800720a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800720e:	0713      	lsls	r3, r2, #28
 8007210:	bf44      	itt	mi
 8007212:	232b      	movmi	r3, #43	@ 0x2b
 8007214:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007218:	f89a 3000 	ldrb.w	r3, [sl]
 800721c:	2b2a      	cmp	r3, #42	@ 0x2a
 800721e:	d015      	beq.n	800724c <_vfiprintf_r+0x120>
 8007220:	9a07      	ldr	r2, [sp, #28]
 8007222:	4654      	mov	r4, sl
 8007224:	2000      	movs	r0, #0
 8007226:	f04f 0c0a 	mov.w	ip, #10
 800722a:	4621      	mov	r1, r4
 800722c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007230:	3b30      	subs	r3, #48	@ 0x30
 8007232:	2b09      	cmp	r3, #9
 8007234:	d94b      	bls.n	80072ce <_vfiprintf_r+0x1a2>
 8007236:	b1b0      	cbz	r0, 8007266 <_vfiprintf_r+0x13a>
 8007238:	9207      	str	r2, [sp, #28]
 800723a:	e014      	b.n	8007266 <_vfiprintf_r+0x13a>
 800723c:	eba0 0308 	sub.w	r3, r0, r8
 8007240:	fa09 f303 	lsl.w	r3, r9, r3
 8007244:	4313      	orrs	r3, r2
 8007246:	9304      	str	r3, [sp, #16]
 8007248:	46a2      	mov	sl, r4
 800724a:	e7d2      	b.n	80071f2 <_vfiprintf_r+0xc6>
 800724c:	9b03      	ldr	r3, [sp, #12]
 800724e:	1d19      	adds	r1, r3, #4
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	9103      	str	r1, [sp, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	bfbb      	ittet	lt
 8007258:	425b      	neglt	r3, r3
 800725a:	f042 0202 	orrlt.w	r2, r2, #2
 800725e:	9307      	strge	r3, [sp, #28]
 8007260:	9307      	strlt	r3, [sp, #28]
 8007262:	bfb8      	it	lt
 8007264:	9204      	strlt	r2, [sp, #16]
 8007266:	7823      	ldrb	r3, [r4, #0]
 8007268:	2b2e      	cmp	r3, #46	@ 0x2e
 800726a:	d10a      	bne.n	8007282 <_vfiprintf_r+0x156>
 800726c:	7863      	ldrb	r3, [r4, #1]
 800726e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007270:	d132      	bne.n	80072d8 <_vfiprintf_r+0x1ac>
 8007272:	9b03      	ldr	r3, [sp, #12]
 8007274:	1d1a      	adds	r2, r3, #4
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	9203      	str	r2, [sp, #12]
 800727a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800727e:	3402      	adds	r4, #2
 8007280:	9305      	str	r3, [sp, #20]
 8007282:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007358 <_vfiprintf_r+0x22c>
 8007286:	7821      	ldrb	r1, [r4, #0]
 8007288:	2203      	movs	r2, #3
 800728a:	4650      	mov	r0, sl
 800728c:	f7f8 ffd8 	bl	8000240 <memchr>
 8007290:	b138      	cbz	r0, 80072a2 <_vfiprintf_r+0x176>
 8007292:	9b04      	ldr	r3, [sp, #16]
 8007294:	eba0 000a 	sub.w	r0, r0, sl
 8007298:	2240      	movs	r2, #64	@ 0x40
 800729a:	4082      	lsls	r2, r0
 800729c:	4313      	orrs	r3, r2
 800729e:	3401      	adds	r4, #1
 80072a0:	9304      	str	r3, [sp, #16]
 80072a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a6:	4829      	ldr	r0, [pc, #164]	@ (800734c <_vfiprintf_r+0x220>)
 80072a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072ac:	2206      	movs	r2, #6
 80072ae:	f7f8 ffc7 	bl	8000240 <memchr>
 80072b2:	2800      	cmp	r0, #0
 80072b4:	d03f      	beq.n	8007336 <_vfiprintf_r+0x20a>
 80072b6:	4b26      	ldr	r3, [pc, #152]	@ (8007350 <_vfiprintf_r+0x224>)
 80072b8:	bb1b      	cbnz	r3, 8007302 <_vfiprintf_r+0x1d6>
 80072ba:	9b03      	ldr	r3, [sp, #12]
 80072bc:	3307      	adds	r3, #7
 80072be:	f023 0307 	bic.w	r3, r3, #7
 80072c2:	3308      	adds	r3, #8
 80072c4:	9303      	str	r3, [sp, #12]
 80072c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072c8:	443b      	add	r3, r7
 80072ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80072cc:	e76a      	b.n	80071a4 <_vfiprintf_r+0x78>
 80072ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80072d2:	460c      	mov	r4, r1
 80072d4:	2001      	movs	r0, #1
 80072d6:	e7a8      	b.n	800722a <_vfiprintf_r+0xfe>
 80072d8:	2300      	movs	r3, #0
 80072da:	3401      	adds	r4, #1
 80072dc:	9305      	str	r3, [sp, #20]
 80072de:	4619      	mov	r1, r3
 80072e0:	f04f 0c0a 	mov.w	ip, #10
 80072e4:	4620      	mov	r0, r4
 80072e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072ea:	3a30      	subs	r2, #48	@ 0x30
 80072ec:	2a09      	cmp	r2, #9
 80072ee:	d903      	bls.n	80072f8 <_vfiprintf_r+0x1cc>
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0c6      	beq.n	8007282 <_vfiprintf_r+0x156>
 80072f4:	9105      	str	r1, [sp, #20]
 80072f6:	e7c4      	b.n	8007282 <_vfiprintf_r+0x156>
 80072f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80072fc:	4604      	mov	r4, r0
 80072fe:	2301      	movs	r3, #1
 8007300:	e7f0      	b.n	80072e4 <_vfiprintf_r+0x1b8>
 8007302:	ab03      	add	r3, sp, #12
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	462a      	mov	r2, r5
 8007308:	4b12      	ldr	r3, [pc, #72]	@ (8007354 <_vfiprintf_r+0x228>)
 800730a:	a904      	add	r1, sp, #16
 800730c:	4630      	mov	r0, r6
 800730e:	f7fd fc57 	bl	8004bc0 <_printf_float>
 8007312:	4607      	mov	r7, r0
 8007314:	1c78      	adds	r0, r7, #1
 8007316:	d1d6      	bne.n	80072c6 <_vfiprintf_r+0x19a>
 8007318:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800731a:	07d9      	lsls	r1, r3, #31
 800731c:	d405      	bmi.n	800732a <_vfiprintf_r+0x1fe>
 800731e:	89ab      	ldrh	r3, [r5, #12]
 8007320:	059a      	lsls	r2, r3, #22
 8007322:	d402      	bmi.n	800732a <_vfiprintf_r+0x1fe>
 8007324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007326:	f7fe f997 	bl	8005658 <__retarget_lock_release_recursive>
 800732a:	89ab      	ldrh	r3, [r5, #12]
 800732c:	065b      	lsls	r3, r3, #25
 800732e:	f53f af1f 	bmi.w	8007170 <_vfiprintf_r+0x44>
 8007332:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007334:	e71e      	b.n	8007174 <_vfiprintf_r+0x48>
 8007336:	ab03      	add	r3, sp, #12
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	462a      	mov	r2, r5
 800733c:	4b05      	ldr	r3, [pc, #20]	@ (8007354 <_vfiprintf_r+0x228>)
 800733e:	a904      	add	r1, sp, #16
 8007340:	4630      	mov	r0, r6
 8007342:	f7fd fec5 	bl	80050d0 <_printf_i>
 8007346:	e7e4      	b.n	8007312 <_vfiprintf_r+0x1e6>
 8007348:	08007ac0 	.word	0x08007ac0
 800734c:	08007aca 	.word	0x08007aca
 8007350:	08004bc1 	.word	0x08004bc1
 8007354:	08007109 	.word	0x08007109
 8007358:	08007ac6 	.word	0x08007ac6

0800735c <__swbuf_r>:
 800735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735e:	460e      	mov	r6, r1
 8007360:	4614      	mov	r4, r2
 8007362:	4605      	mov	r5, r0
 8007364:	b118      	cbz	r0, 800736e <__swbuf_r+0x12>
 8007366:	6a03      	ldr	r3, [r0, #32]
 8007368:	b90b      	cbnz	r3, 800736e <__swbuf_r+0x12>
 800736a:	f7fe f85d 	bl	8005428 <__sinit>
 800736e:	69a3      	ldr	r3, [r4, #24]
 8007370:	60a3      	str	r3, [r4, #8]
 8007372:	89a3      	ldrh	r3, [r4, #12]
 8007374:	071a      	lsls	r2, r3, #28
 8007376:	d501      	bpl.n	800737c <__swbuf_r+0x20>
 8007378:	6923      	ldr	r3, [r4, #16]
 800737a:	b943      	cbnz	r3, 800738e <__swbuf_r+0x32>
 800737c:	4621      	mov	r1, r4
 800737e:	4628      	mov	r0, r5
 8007380:	f000 f82a 	bl	80073d8 <__swsetup_r>
 8007384:	b118      	cbz	r0, 800738e <__swbuf_r+0x32>
 8007386:	f04f 37ff 	mov.w	r7, #4294967295
 800738a:	4638      	mov	r0, r7
 800738c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	6922      	ldr	r2, [r4, #16]
 8007392:	1a98      	subs	r0, r3, r2
 8007394:	6963      	ldr	r3, [r4, #20]
 8007396:	b2f6      	uxtb	r6, r6
 8007398:	4283      	cmp	r3, r0
 800739a:	4637      	mov	r7, r6
 800739c:	dc05      	bgt.n	80073aa <__swbuf_r+0x4e>
 800739e:	4621      	mov	r1, r4
 80073a0:	4628      	mov	r0, r5
 80073a2:	f7ff fd99 	bl	8006ed8 <_fflush_r>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d1ed      	bne.n	8007386 <__swbuf_r+0x2a>
 80073aa:	68a3      	ldr	r3, [r4, #8]
 80073ac:	3b01      	subs	r3, #1
 80073ae:	60a3      	str	r3, [r4, #8]
 80073b0:	6823      	ldr	r3, [r4, #0]
 80073b2:	1c5a      	adds	r2, r3, #1
 80073b4:	6022      	str	r2, [r4, #0]
 80073b6:	701e      	strb	r6, [r3, #0]
 80073b8:	6962      	ldr	r2, [r4, #20]
 80073ba:	1c43      	adds	r3, r0, #1
 80073bc:	429a      	cmp	r2, r3
 80073be:	d004      	beq.n	80073ca <__swbuf_r+0x6e>
 80073c0:	89a3      	ldrh	r3, [r4, #12]
 80073c2:	07db      	lsls	r3, r3, #31
 80073c4:	d5e1      	bpl.n	800738a <__swbuf_r+0x2e>
 80073c6:	2e0a      	cmp	r6, #10
 80073c8:	d1df      	bne.n	800738a <__swbuf_r+0x2e>
 80073ca:	4621      	mov	r1, r4
 80073cc:	4628      	mov	r0, r5
 80073ce:	f7ff fd83 	bl	8006ed8 <_fflush_r>
 80073d2:	2800      	cmp	r0, #0
 80073d4:	d0d9      	beq.n	800738a <__swbuf_r+0x2e>
 80073d6:	e7d6      	b.n	8007386 <__swbuf_r+0x2a>

080073d8 <__swsetup_r>:
 80073d8:	b538      	push	{r3, r4, r5, lr}
 80073da:	4b29      	ldr	r3, [pc, #164]	@ (8007480 <__swsetup_r+0xa8>)
 80073dc:	4605      	mov	r5, r0
 80073de:	6818      	ldr	r0, [r3, #0]
 80073e0:	460c      	mov	r4, r1
 80073e2:	b118      	cbz	r0, 80073ec <__swsetup_r+0x14>
 80073e4:	6a03      	ldr	r3, [r0, #32]
 80073e6:	b90b      	cbnz	r3, 80073ec <__swsetup_r+0x14>
 80073e8:	f7fe f81e 	bl	8005428 <__sinit>
 80073ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073f0:	0719      	lsls	r1, r3, #28
 80073f2:	d422      	bmi.n	800743a <__swsetup_r+0x62>
 80073f4:	06da      	lsls	r2, r3, #27
 80073f6:	d407      	bmi.n	8007408 <__swsetup_r+0x30>
 80073f8:	2209      	movs	r2, #9
 80073fa:	602a      	str	r2, [r5, #0]
 80073fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007400:	81a3      	strh	r3, [r4, #12]
 8007402:	f04f 30ff 	mov.w	r0, #4294967295
 8007406:	e033      	b.n	8007470 <__swsetup_r+0x98>
 8007408:	0758      	lsls	r0, r3, #29
 800740a:	d512      	bpl.n	8007432 <__swsetup_r+0x5a>
 800740c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800740e:	b141      	cbz	r1, 8007422 <__swsetup_r+0x4a>
 8007410:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007414:	4299      	cmp	r1, r3
 8007416:	d002      	beq.n	800741e <__swsetup_r+0x46>
 8007418:	4628      	mov	r0, r5
 800741a:	f7fe feff 	bl	800621c <_free_r>
 800741e:	2300      	movs	r3, #0
 8007420:	6363      	str	r3, [r4, #52]	@ 0x34
 8007422:	89a3      	ldrh	r3, [r4, #12]
 8007424:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007428:	81a3      	strh	r3, [r4, #12]
 800742a:	2300      	movs	r3, #0
 800742c:	6063      	str	r3, [r4, #4]
 800742e:	6923      	ldr	r3, [r4, #16]
 8007430:	6023      	str	r3, [r4, #0]
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	f043 0308 	orr.w	r3, r3, #8
 8007438:	81a3      	strh	r3, [r4, #12]
 800743a:	6923      	ldr	r3, [r4, #16]
 800743c:	b94b      	cbnz	r3, 8007452 <__swsetup_r+0x7a>
 800743e:	89a3      	ldrh	r3, [r4, #12]
 8007440:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007448:	d003      	beq.n	8007452 <__swsetup_r+0x7a>
 800744a:	4621      	mov	r1, r4
 800744c:	4628      	mov	r0, r5
 800744e:	f000 f883 	bl	8007558 <__smakebuf_r>
 8007452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007456:	f013 0201 	ands.w	r2, r3, #1
 800745a:	d00a      	beq.n	8007472 <__swsetup_r+0x9a>
 800745c:	2200      	movs	r2, #0
 800745e:	60a2      	str	r2, [r4, #8]
 8007460:	6962      	ldr	r2, [r4, #20]
 8007462:	4252      	negs	r2, r2
 8007464:	61a2      	str	r2, [r4, #24]
 8007466:	6922      	ldr	r2, [r4, #16]
 8007468:	b942      	cbnz	r2, 800747c <__swsetup_r+0xa4>
 800746a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800746e:	d1c5      	bne.n	80073fc <__swsetup_r+0x24>
 8007470:	bd38      	pop	{r3, r4, r5, pc}
 8007472:	0799      	lsls	r1, r3, #30
 8007474:	bf58      	it	pl
 8007476:	6962      	ldrpl	r2, [r4, #20]
 8007478:	60a2      	str	r2, [r4, #8]
 800747a:	e7f4      	b.n	8007466 <__swsetup_r+0x8e>
 800747c:	2000      	movs	r0, #0
 800747e:	e7f7      	b.n	8007470 <__swsetup_r+0x98>
 8007480:	2000001c 	.word	0x2000001c

08007484 <_raise_r>:
 8007484:	291f      	cmp	r1, #31
 8007486:	b538      	push	{r3, r4, r5, lr}
 8007488:	4605      	mov	r5, r0
 800748a:	460c      	mov	r4, r1
 800748c:	d904      	bls.n	8007498 <_raise_r+0x14>
 800748e:	2316      	movs	r3, #22
 8007490:	6003      	str	r3, [r0, #0]
 8007492:	f04f 30ff 	mov.w	r0, #4294967295
 8007496:	bd38      	pop	{r3, r4, r5, pc}
 8007498:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800749a:	b112      	cbz	r2, 80074a2 <_raise_r+0x1e>
 800749c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074a0:	b94b      	cbnz	r3, 80074b6 <_raise_r+0x32>
 80074a2:	4628      	mov	r0, r5
 80074a4:	f000 f830 	bl	8007508 <_getpid_r>
 80074a8:	4622      	mov	r2, r4
 80074aa:	4601      	mov	r1, r0
 80074ac:	4628      	mov	r0, r5
 80074ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074b2:	f000 b817 	b.w	80074e4 <_kill_r>
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d00a      	beq.n	80074d0 <_raise_r+0x4c>
 80074ba:	1c59      	adds	r1, r3, #1
 80074bc:	d103      	bne.n	80074c6 <_raise_r+0x42>
 80074be:	2316      	movs	r3, #22
 80074c0:	6003      	str	r3, [r0, #0]
 80074c2:	2001      	movs	r0, #1
 80074c4:	e7e7      	b.n	8007496 <_raise_r+0x12>
 80074c6:	2100      	movs	r1, #0
 80074c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80074cc:	4620      	mov	r0, r4
 80074ce:	4798      	blx	r3
 80074d0:	2000      	movs	r0, #0
 80074d2:	e7e0      	b.n	8007496 <_raise_r+0x12>

080074d4 <raise>:
 80074d4:	4b02      	ldr	r3, [pc, #8]	@ (80074e0 <raise+0xc>)
 80074d6:	4601      	mov	r1, r0
 80074d8:	6818      	ldr	r0, [r3, #0]
 80074da:	f7ff bfd3 	b.w	8007484 <_raise_r>
 80074de:	bf00      	nop
 80074e0:	2000001c 	.word	0x2000001c

080074e4 <_kill_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4d07      	ldr	r5, [pc, #28]	@ (8007504 <_kill_r+0x20>)
 80074e8:	2300      	movs	r3, #0
 80074ea:	4604      	mov	r4, r0
 80074ec:	4608      	mov	r0, r1
 80074ee:	4611      	mov	r1, r2
 80074f0:	602b      	str	r3, [r5, #0]
 80074f2:	f7f9 fc0b 	bl	8000d0c <_kill>
 80074f6:	1c43      	adds	r3, r0, #1
 80074f8:	d102      	bne.n	8007500 <_kill_r+0x1c>
 80074fa:	682b      	ldr	r3, [r5, #0]
 80074fc:	b103      	cbz	r3, 8007500 <_kill_r+0x1c>
 80074fe:	6023      	str	r3, [r4, #0]
 8007500:	bd38      	pop	{r3, r4, r5, pc}
 8007502:	bf00      	nop
 8007504:	2000047c 	.word	0x2000047c

08007508 <_getpid_r>:
 8007508:	f7f9 bbf8 	b.w	8000cfc <_getpid>

0800750c <__swhatbuf_r>:
 800750c:	b570      	push	{r4, r5, r6, lr}
 800750e:	460c      	mov	r4, r1
 8007510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007514:	2900      	cmp	r1, #0
 8007516:	b096      	sub	sp, #88	@ 0x58
 8007518:	4615      	mov	r5, r2
 800751a:	461e      	mov	r6, r3
 800751c:	da0d      	bge.n	800753a <__swhatbuf_r+0x2e>
 800751e:	89a3      	ldrh	r3, [r4, #12]
 8007520:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007524:	f04f 0100 	mov.w	r1, #0
 8007528:	bf14      	ite	ne
 800752a:	2340      	movne	r3, #64	@ 0x40
 800752c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007530:	2000      	movs	r0, #0
 8007532:	6031      	str	r1, [r6, #0]
 8007534:	602b      	str	r3, [r5, #0]
 8007536:	b016      	add	sp, #88	@ 0x58
 8007538:	bd70      	pop	{r4, r5, r6, pc}
 800753a:	466a      	mov	r2, sp
 800753c:	f000 f848 	bl	80075d0 <_fstat_r>
 8007540:	2800      	cmp	r0, #0
 8007542:	dbec      	blt.n	800751e <__swhatbuf_r+0x12>
 8007544:	9901      	ldr	r1, [sp, #4]
 8007546:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800754a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800754e:	4259      	negs	r1, r3
 8007550:	4159      	adcs	r1, r3
 8007552:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007556:	e7eb      	b.n	8007530 <__swhatbuf_r+0x24>

08007558 <__smakebuf_r>:
 8007558:	898b      	ldrh	r3, [r1, #12]
 800755a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800755c:	079d      	lsls	r5, r3, #30
 800755e:	4606      	mov	r6, r0
 8007560:	460c      	mov	r4, r1
 8007562:	d507      	bpl.n	8007574 <__smakebuf_r+0x1c>
 8007564:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	6123      	str	r3, [r4, #16]
 800756c:	2301      	movs	r3, #1
 800756e:	6163      	str	r3, [r4, #20]
 8007570:	b003      	add	sp, #12
 8007572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007574:	ab01      	add	r3, sp, #4
 8007576:	466a      	mov	r2, sp
 8007578:	f7ff ffc8 	bl	800750c <__swhatbuf_r>
 800757c:	9f00      	ldr	r7, [sp, #0]
 800757e:	4605      	mov	r5, r0
 8007580:	4639      	mov	r1, r7
 8007582:	4630      	mov	r0, r6
 8007584:	f7fe febe 	bl	8006304 <_malloc_r>
 8007588:	b948      	cbnz	r0, 800759e <__smakebuf_r+0x46>
 800758a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800758e:	059a      	lsls	r2, r3, #22
 8007590:	d4ee      	bmi.n	8007570 <__smakebuf_r+0x18>
 8007592:	f023 0303 	bic.w	r3, r3, #3
 8007596:	f043 0302 	orr.w	r3, r3, #2
 800759a:	81a3      	strh	r3, [r4, #12]
 800759c:	e7e2      	b.n	8007564 <__smakebuf_r+0xc>
 800759e:	89a3      	ldrh	r3, [r4, #12]
 80075a0:	6020      	str	r0, [r4, #0]
 80075a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075a6:	81a3      	strh	r3, [r4, #12]
 80075a8:	9b01      	ldr	r3, [sp, #4]
 80075aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80075ae:	b15b      	cbz	r3, 80075c8 <__smakebuf_r+0x70>
 80075b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075b4:	4630      	mov	r0, r6
 80075b6:	f000 f81d 	bl	80075f4 <_isatty_r>
 80075ba:	b128      	cbz	r0, 80075c8 <__smakebuf_r+0x70>
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	f023 0303 	bic.w	r3, r3, #3
 80075c2:	f043 0301 	orr.w	r3, r3, #1
 80075c6:	81a3      	strh	r3, [r4, #12]
 80075c8:	89a3      	ldrh	r3, [r4, #12]
 80075ca:	431d      	orrs	r5, r3
 80075cc:	81a5      	strh	r5, [r4, #12]
 80075ce:	e7cf      	b.n	8007570 <__smakebuf_r+0x18>

080075d0 <_fstat_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4d07      	ldr	r5, [pc, #28]	@ (80075f0 <_fstat_r+0x20>)
 80075d4:	2300      	movs	r3, #0
 80075d6:	4604      	mov	r4, r0
 80075d8:	4608      	mov	r0, r1
 80075da:	4611      	mov	r1, r2
 80075dc:	602b      	str	r3, [r5, #0]
 80075de:	f7f9 fbf5 	bl	8000dcc <_fstat>
 80075e2:	1c43      	adds	r3, r0, #1
 80075e4:	d102      	bne.n	80075ec <_fstat_r+0x1c>
 80075e6:	682b      	ldr	r3, [r5, #0]
 80075e8:	b103      	cbz	r3, 80075ec <_fstat_r+0x1c>
 80075ea:	6023      	str	r3, [r4, #0]
 80075ec:	bd38      	pop	{r3, r4, r5, pc}
 80075ee:	bf00      	nop
 80075f0:	2000047c 	.word	0x2000047c

080075f4 <_isatty_r>:
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	4d06      	ldr	r5, [pc, #24]	@ (8007610 <_isatty_r+0x1c>)
 80075f8:	2300      	movs	r3, #0
 80075fa:	4604      	mov	r4, r0
 80075fc:	4608      	mov	r0, r1
 80075fe:	602b      	str	r3, [r5, #0]
 8007600:	f7f9 fbf4 	bl	8000dec <_isatty>
 8007604:	1c43      	adds	r3, r0, #1
 8007606:	d102      	bne.n	800760e <_isatty_r+0x1a>
 8007608:	682b      	ldr	r3, [r5, #0]
 800760a:	b103      	cbz	r3, 800760e <_isatty_r+0x1a>
 800760c:	6023      	str	r3, [r4, #0]
 800760e:	bd38      	pop	{r3, r4, r5, pc}
 8007610:	2000047c 	.word	0x2000047c

08007614 <_init>:
 8007614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007616:	bf00      	nop
 8007618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800761a:	bc08      	pop	{r3}
 800761c:	469e      	mov	lr, r3
 800761e:	4770      	bx	lr

08007620 <_fini>:
 8007620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007622:	bf00      	nop
 8007624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007626:	bc08      	pop	{r3}
 8007628:	469e      	mov	lr, r3
 800762a:	4770      	bx	lr
