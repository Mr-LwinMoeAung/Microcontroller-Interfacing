
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e64  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025fd8  08009068  08009068  0000a068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802f040  0802f040  000311d8  2**0
                  CONTENTS
  4 .ARM          00000008  0802f040  0802f040  00030040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802f048  0802f048  000311d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802f048  0802f048  00030048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802f04c  0802f04c  0003004c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0802f050  00031000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001d8  0802f228  000311d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  0802f228  00031490  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000311d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001240a  00000000  00000000  00031206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e9  00000000  00000000  00043610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  00046800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dda  00000000  00000000  00047a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a955  00000000  00000000  000487da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179a6  00000000  00000000  0007312f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffdfe  00000000  00000000  0008aad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018a8d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058f8  00000000  00000000  0018a918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00190210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800904c 	.word	0x0800904c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	0800904c 	.word	0x0800904c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08e      	sub	sp, #56	@ 0x38
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005f6:	4b8d      	ldr	r3, [pc, #564]	@ (800082c <MX_GPIO_Init+0x24c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a8c      	ldr	r2, [pc, #560]	@ (800082c <MX_GPIO_Init+0x24c>)
 80005fc:	f043 0310 	orr.w	r3, r3, #16
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b8a      	ldr	r3, [pc, #552]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0310 	and.w	r3, r3, #16
 800060a:	623b      	str	r3, [r7, #32]
 800060c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060e:	4b87      	ldr	r3, [pc, #540]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a86      	ldr	r2, [pc, #536]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b84      	ldr	r3, [pc, #528]	@ (800082c <MX_GPIO_Init+0x24c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	61fb      	str	r3, [r7, #28]
 8000624:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000626:	4b81      	ldr	r3, [pc, #516]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a80      	ldr	r2, [pc, #512]	@ (800082c <MX_GPIO_Init+0x24c>)
 800062c:	f043 0320 	orr.w	r3, r3, #32
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b7e      	ldr	r3, [pc, #504]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0320 	and.w	r3, r3, #32
 800063a:	61bb      	str	r3, [r7, #24]
 800063c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063e:	4b7b      	ldr	r3, [pc, #492]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	4a7a      	ldr	r2, [pc, #488]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000648:	6313      	str	r3, [r2, #48]	@ 0x30
 800064a:	4b78      	ldr	r3, [pc, #480]	@ (800082c <MX_GPIO_Init+0x24c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b75      	ldr	r3, [pc, #468]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a74      	ldr	r2, [pc, #464]	@ (800082c <MX_GPIO_Init+0x24c>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b72      	ldr	r3, [pc, #456]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b6f      	ldr	r3, [pc, #444]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4a6e      	ldr	r2, [pc, #440]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4b6c      	ldr	r3, [pc, #432]	@ (800082c <MX_GPIO_Init+0x24c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000686:	4b69      	ldr	r3, [pc, #420]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a68      	ldr	r2, [pc, #416]	@ (800082c <MX_GPIO_Init+0x24c>)
 800068c:	f043 0308 	orr.w	r3, r3, #8
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b66      	ldr	r3, [pc, #408]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0308 	and.w	r3, r3, #8
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800069e:	4b63      	ldr	r3, [pc, #396]	@ (800082c <MX_GPIO_Init+0x24c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a62      	ldr	r2, [pc, #392]	@ (800082c <MX_GPIO_Init+0x24c>)
 80006a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b60      	ldr	r3, [pc, #384]	@ (800082c <MX_GPIO_Init+0x24c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2168      	movs	r1, #104	@ 0x68
 80006ba:	485d      	ldr	r0, [pc, #372]	@ (8000830 <MX_GPIO_Init+0x250>)
 80006bc:	f003 f9f8 	bl	8003ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80006c6:	485b      	ldr	r0, [pc, #364]	@ (8000834 <MX_GPIO_Init+0x254>)
 80006c8:	f003 f9f2 	bl	8003ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2140      	movs	r1, #64	@ 0x40
 80006d0:	4859      	ldr	r0, [pc, #356]	@ (8000838 <MX_GPIO_Init+0x258>)
 80006d2:	f003 f9ed 	bl	8003ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80006dc:	4857      	ldr	r0, [pc, #348]	@ (800083c <MX_GPIO_Init+0x25c>)
 80006de:	f003 f9e7 	bl	8003ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 80006e2:	2314      	movs	r3, #20
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e6:	2300      	movs	r3, #0
 80006e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f2:	4619      	mov	r1, r3
 80006f4:	484e      	ldr	r0, [pc, #312]	@ (8000830 <MX_GPIO_Init+0x250>)
 80006f6:	f003 f817 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 80006fa:	2368      	movs	r3, #104	@ 0x68
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000706:	2303      	movs	r3, #3
 8000708:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800070a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070e:	4619      	mov	r1, r3
 8000710:	4847      	ldr	r0, [pc, #284]	@ (8000830 <MX_GPIO_Init+0x250>)
 8000712:	f003 f809 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000716:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800071a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071c:	2300      	movs	r3, #0
 800071e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000728:	4619      	mov	r1, r3
 800072a:	4844      	ldr	r0, [pc, #272]	@ (800083c <MX_GPIO_Init+0x25c>)
 800072c:	f002 fffc 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000730:	2332      	movs	r3, #50	@ 0x32
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000740:	230b      	movs	r3, #11
 8000742:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000744:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000748:	4619      	mov	r1, r3
 800074a:	483c      	ldr	r0, [pc, #240]	@ (800083c <MX_GPIO_Init+0x25c>)
 800074c:	f002 ffec 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000750:	2386      	movs	r3, #134	@ 0x86
 8000752:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000760:	230b      	movs	r3, #11
 8000762:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000768:	4619      	mov	r1, r3
 800076a:	4835      	ldr	r0, [pc, #212]	@ (8000840 <MX_GPIO_Init+0x260>)
 800076c:	f002 ffdc 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000770:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000774:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077e:	2303      	movs	r3, #3
 8000780:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000782:	230b      	movs	r3, #11
 8000784:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078a:	4619      	mov	r1, r3
 800078c:	4829      	ldr	r0, [pc, #164]	@ (8000834 <MX_GPIO_Init+0x254>)
 800078e:	f002 ffcb 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000792:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000796:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a8:	4619      	mov	r1, r3
 80007aa:	4822      	ldr	r0, [pc, #136]	@ (8000834 <MX_GPIO_Init+0x254>)
 80007ac:	f002 ffbc 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007b0:	2340      	movs	r3, #64	@ 0x40
 80007b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c4:	4619      	mov	r1, r3
 80007c6:	481c      	ldr	r0, [pc, #112]	@ (8000838 <MX_GPIO_Init+0x258>)
 80007c8:	f002 ffae 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007cc:	2380      	movs	r3, #128	@ 0x80
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007dc:	4619      	mov	r1, r3
 80007de:	4816      	ldr	r0, [pc, #88]	@ (8000838 <MX_GPIO_Init+0x258>)
 80007e0:	f002 ffa2 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 80007e4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fa:	4619      	mov	r1, r3
 80007fc:	480f      	ldr	r0, [pc, #60]	@ (800083c <MX_GPIO_Init+0x25c>)
 80007fe:	f002 ff93 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000802:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000806:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000810:	2303      	movs	r3, #3
 8000812:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000814:	230b      	movs	r3, #11
 8000816:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800081c:	4619      	mov	r1, r3
 800081e:	4806      	ldr	r0, [pc, #24]	@ (8000838 <MX_GPIO_Init+0x258>)
 8000820:	f002 ff82 	bl	8003728 <HAL_GPIO_Init>

}
 8000824:	bf00      	nop
 8000826:	3738      	adds	r7, #56	@ 0x38
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40021000 	.word	0x40021000
 8000834:	40020400 	.word	0x40020400
 8000838:	40021800 	.word	0x40021800
 800083c:	40020800 	.word	0x40020800
 8000840:	40020000 	.word	0x40020000

08000844 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000848:	f3bf 8f4f 	dsb	sy
}
 800084c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800084e:	f3bf 8f6f 	isb	sy
}
 8000852:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000854:	4b0d      	ldr	r3, [pc, #52]	@ (800088c <SCB_EnableICache+0x48>)
 8000856:	2200      	movs	r2, #0
 8000858:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800085c:	f3bf 8f4f 	dsb	sy
}
 8000860:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000862:	f3bf 8f6f 	isb	sy
}
 8000866:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000868:	4b08      	ldr	r3, [pc, #32]	@ (800088c <SCB_EnableICache+0x48>)
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	4a07      	ldr	r2, [pc, #28]	@ (800088c <SCB_EnableICache+0x48>)
 800086e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000872:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000874:	f3bf 8f4f 	dsb	sy
}
 8000878:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800087a:	f3bf 8f6f 	isb	sy
}
 800087e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000896:	4b1f      	ldr	r3, [pc, #124]	@ (8000914 <SCB_EnableDCache+0x84>)
 8000898:	2200      	movs	r2, #0
 800089a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800089e:	f3bf 8f4f 	dsb	sy
}
 80008a2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000914 <SCB_EnableDCache+0x84>)
 80008a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80008aa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	0b5b      	lsrs	r3, r3, #13
 80008b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008b4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	08db      	lsrs	r3, r3, #3
 80008ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008be:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	015a      	lsls	r2, r3, #5
 80008c4:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80008c8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ce:	4911      	ldr	r1, [pc, #68]	@ (8000914 <SCB_EnableDCache+0x84>)
 80008d0:	4313      	orrs	r3, r2
 80008d2:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	1e5a      	subs	r2, r3, #1
 80008da:	60ba      	str	r2, [r7, #8]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d1ef      	bne.n	80008c0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	1e5a      	subs	r2, r3, #1
 80008e4:	60fa      	str	r2, [r7, #12]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d1e5      	bne.n	80008b6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80008ea:	f3bf 8f4f 	dsb	sy
}
 80008ee:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008f0:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <SCB_EnableDCache+0x84>)
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	4a07      	ldr	r2, [pc, #28]	@ (8000914 <SCB_EnableDCache+0x84>)
 80008f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008fa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008fc:	f3bf 8f4f 	dsb	sy
}
 8000900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000902:	f3bf 8f6f 	isb	sy
}
 8000906:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b0c7      	sub	sp, #284	@ 0x11c
 800091c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800091e:	f7ff ff91 	bl	8000844 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000922:	f7ff ffb5 	bl	8000890 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000926:	f002 fd89 	bl	800343c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092a:	f000 ff73 	bl	8001814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092e:	f7ff fe57 	bl	80005e0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000932:	f001 fa5b 	bl	8001dec <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8000936:	f001 f83d 	bl	80019b4 <MX_SPI5_Init>
  MX_TIM1_Init();
 800093a:	f001 f9e3 	bl	8001d04 <MX_TIM1_Init>
  MX_RNG_Init();
 800093e:	f001 f805 	bl	800194c <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 8000942:	f002 f8b5 	bl	8002ab0 <ILI9341_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //----------------------------------------------------------PERFORMANCE TEST
	  		ILI9341_Fill_Screen(WHITE);
 8000946:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800094a:	f002 fa5d 	bl	8002e08 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800094e:	2001      	movs	r0, #1
 8000950:	f002 f850 	bl	80029f4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("FPS TEST, 40 loop 2 screens", 10, 10, BLACK, 1, WHITE);
 8000954:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000958:	9301      	str	r3, [sp, #4]
 800095a:	2301      	movs	r3, #1
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	2300      	movs	r3, #0
 8000960:	220a      	movs	r2, #10
 8000962:	210a      	movs	r1, #10
 8000964:	4890      	ldr	r0, [pc, #576]	@ (8000ba8 <main+0x290>)
 8000966:	f001 fd95 	bl	8002494 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 800096a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800096e:	f002 fdd1 	bl	8003514 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8000972:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000976:	f002 fa47 	bl	8002e08 <ILI9341_Fill_Screen>

	  		uint32_t Timer_Counter = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	  		for(uint32_t j = 0; j < 2; j++)
 8000980:	2300      	movs	r3, #0
 8000982:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000986:	e02a      	b.n	80009de <main+0xc6>
	  		{
	  			HAL_TIM_Base_Start(&htim1);
 8000988:	4888      	ldr	r0, [pc, #544]	@ (8000bac <main+0x294>)
 800098a:	f004 fe67 	bl	800565c <HAL_TIM_Base_Start>
	  			for(uint16_t i = 0; i < 10; i++)
 800098e:	2300      	movs	r3, #0
 8000990:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
 8000994:	e00b      	b.n	80009ae <main+0x96>
	  			{
	  				ILI9341_Fill_Screen(WHITE);
 8000996:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800099a:	f002 fa35 	bl	8002e08 <ILI9341_Fill_Screen>
	  				ILI9341_Fill_Screen(BLACK);
 800099e:	2000      	movs	r0, #0
 80009a0:	f002 fa32 	bl	8002e08 <ILI9341_Fill_Screen>
	  			for(uint16_t i = 0; i < 10; i++)
 80009a4:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80009a8:	3301      	adds	r3, #1
 80009aa:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
 80009ae:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80009b2:	2b09      	cmp	r3, #9
 80009b4:	d9ef      	bls.n	8000996 <main+0x7e>
	  			}

	  			//20.000 per second!
	  			HAL_TIM_Base_Stop(&htim1);
 80009b6:	487d      	ldr	r0, [pc, #500]	@ (8000bac <main+0x294>)
 80009b8:	f004 fec0 	bl	800573c <HAL_TIM_Base_Stop>
	  			Timer_Counter += __HAL_TIM_GET_COUNTER(&htim1);
 80009bc:	4b7b      	ldr	r3, [pc, #492]	@ (8000bac <main+0x294>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009c2:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80009c6:	4413      	add	r3, r2
 80009c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	  			__HAL_TIM_SET_COUNTER(&htim1, 0);
 80009cc:	4b77      	ldr	r3, [pc, #476]	@ (8000bac <main+0x294>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2200      	movs	r2, #0
 80009d2:	625a      	str	r2, [r3, #36]	@ 0x24
	  		for(uint32_t j = 0; j < 2; j++)
 80009d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80009d8:	3301      	adds	r3, #1
 80009da:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80009de:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d9d0      	bls.n	8000988 <main+0x70>
	  		}
	  		Timer_Counter /= 2;
 80009e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80009ea:	085b      	lsrs	r3, r3, #1
 80009ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	  		char counter_buff[30];
	  		ILI9341_Fill_Screen(WHITE);
 80009f0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80009f4:	f002 fa08 	bl	8002e08 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f001 fffb 	bl	80029f4 <ILI9341_Set_Rotation>
	  		sprintf(counter_buff, "Timer counter value: %ld", Timer_Counter*2);
 80009fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000a02:	005a      	lsls	r2, r3, #1
 8000a04:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000a08:	4969      	ldr	r1, [pc, #420]	@ (8000bb0 <main+0x298>)
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f006 fa5e 	bl	8006ecc <siprintf>
	  		ILI9341_Draw_Text(counter_buff, 10, 10, BLACK, 1, WHITE);
 8000a10:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000a14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2300      	movs	r3, #0
 8000a20:	220a      	movs	r2, #10
 8000a22:	210a      	movs	r1, #10
 8000a24:	f001 fd36 	bl	8002494 <ILI9341_Draw_Text>

	  		double seconds_passed = 2*((float)Timer_Counter / 20000);
 8000a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000a2c:	ee07 3a90 	vmov	s15, r3
 8000a30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a34:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8000bb4 <main+0x29c>
 8000a38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a44:	ed87 7b36 	vstr	d7, [r7, #216]	@ 0xd8
	  		sprintf(counter_buff, "Time: %.3f Sec", seconds_passed);
 8000a48:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000a4c:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8000a50:	4959      	ldr	r1, [pc, #356]	@ (8000bb8 <main+0x2a0>)
 8000a52:	f006 fa3b 	bl	8006ecc <siprintf>
	  		ILI9341_Draw_Text(counter_buff, 10, 30, BLACK, 2, WHITE);
 8000a56:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000a5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a5e:	9301      	str	r3, [sp, #4]
 8000a60:	2302      	movs	r3, #2
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	2300      	movs	r3, #0
 8000a66:	221e      	movs	r2, #30
 8000a68:	210a      	movs	r1, #10
 8000a6a:	f001 fd13 	bl	8002494 <ILI9341_Draw_Text>

	  		double timer_float = 20/(((float)Timer_Counter)/20000);	//Frames per sec
 8000a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000a72:	ee07 3a90 	vmov	s15, r3
 8000a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a7a:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8000bb4 <main+0x29c>
 8000a7e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000a82:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8000a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a8e:	ed87 7b34 	vstr	d7, [r7, #208]	@ 0xd0

	  		sprintf(counter_buff, "FPS:  %.2f", timer_float);
 8000a92:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000a96:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8000a9a:	4948      	ldr	r1, [pc, #288]	@ (8000bbc <main+0x2a4>)
 8000a9c:	f006 fa16 	bl	8006ecc <siprintf>
	  		ILI9341_Draw_Text(counter_buff, 10, 50, BLACK, 2, WHITE);
 8000aa0:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000aa4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000aa8:	9301      	str	r3, [sp, #4]
 8000aaa:	2302      	movs	r3, #2
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	2300      	movs	r3, #0
 8000ab0:	2232      	movs	r2, #50	@ 0x32
 8000ab2:	210a      	movs	r1, #10
 8000ab4:	f001 fcee 	bl	8002494 <ILI9341_Draw_Text>
	  		double MB_PS = timer_float*240*320*2/1000000;
 8000ab8:	ed97 7b34 	vldr	d7, [r7, #208]	@ 0xd0
 8000abc:	ed9f 6b32 	vldr	d6, [pc, #200]	@ 8000b88 <main+0x270>
 8000ac0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ac4:	ed9f 6b32 	vldr	d6, [pc, #200]	@ 8000b90 <main+0x278>
 8000ac8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000acc:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000ad0:	ed9f 5b31 	vldr	d5, [pc, #196]	@ 8000b98 <main+0x280>
 8000ad4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ad8:	ed87 7b32 	vstr	d7, [r7, #200]	@ 0xc8
	  		sprintf(counter_buff, "MB/S: %.2f", MB_PS);
 8000adc:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000ae0:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8000ae4:	4936      	ldr	r1, [pc, #216]	@ (8000bc0 <main+0x2a8>)
 8000ae6:	f006 f9f1 	bl	8006ecc <siprintf>
	  		ILI9341_Draw_Text(counter_buff, 10, 70, BLACK, 2, WHITE);
 8000aea:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000aee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000af2:	9301      	str	r3, [sp, #4]
 8000af4:	2302      	movs	r3, #2
 8000af6:	9300      	str	r3, [sp, #0]
 8000af8:	2300      	movs	r3, #0
 8000afa:	2246      	movs	r2, #70	@ 0x46
 8000afc:	210a      	movs	r1, #10
 8000afe:	f001 fcc9 	bl	8002494 <ILI9341_Draw_Text>
	  		double SPI_utilized_percentage = (MB_PS/(6.25 ))*100;		//50mbits / 8 bits
 8000b02:	ed97 6b32 	vldr	d6, [r7, #200]	@ 0xc8
 8000b06:	eeb1 5b09 	vmov.f64	d5, #25	@ 0x40c80000  6.250
 8000b0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b0e:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8000ba0 <main+0x288>
 8000b12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b16:	ed87 7b30 	vstr	d7, [r7, #192]	@ 0xc0
	  		sprintf(counter_buff, "SPI Utilized: %.2f", SPI_utilized_percentage);
 8000b1a:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000b1e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8000b22:	4928      	ldr	r1, [pc, #160]	@ (8000bc4 <main+0x2ac>)
 8000b24:	f006 f9d2 	bl	8006ecc <siprintf>
	  		ILI9341_Draw_Text(counter_buff, 10, 90, BLACK, 2, WHITE);
 8000b28:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000b2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b30:	9301      	str	r3, [sp, #4]
 8000b32:	2302      	movs	r3, #2
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	2300      	movs	r3, #0
 8000b38:	225a      	movs	r2, #90	@ 0x5a
 8000b3a:	210a      	movs	r1, #10
 8000b3c:	f001 fcaa 	bl	8002494 <ILI9341_Draw_Text>
	  		HAL_Delay(10000);
 8000b40:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000b44:	f002 fce6 	bl	8003514 <HAL_Delay>
	  		static uint16_t y = 0;

	  		char Temp_Buffer_text[40];

	  //----------------------------------------------------------COUNTING MULTIPLE SEGMENTS
	  		ILI9341_Fill_Screen(WHITE);
 8000b48:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000b4c:	f002 f95c 	bl	8002e08 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000b50:	2001      	movs	r0, #1
 8000b52:	f001 ff4f 	bl	80029f4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Counting multiple segments at once", 10, 10, BLACK, 1, WHITE);
 8000b56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b5a:	9301      	str	r3, [sp, #4]
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2300      	movs	r3, #0
 8000b62:	220a      	movs	r2, #10
 8000b64:	210a      	movs	r1, #10
 8000b66:	4818      	ldr	r0, [pc, #96]	@ (8000bc8 <main+0x2b0>)
 8000b68:	f001 fc94 	bl	8002494 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8000b6c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b70:	f002 fcd0 	bl	8003514 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8000b74:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000b78:	f002 f946 	bl	8002e08 <ILI9341_Fill_Screen>


	  		for(uint16_t i = 0; i <= 10; i++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104
 8000b82:	e0ab      	b.n	8000cdc <main+0x3c4>
 8000b84:	f3af 8000 	nop.w
 8000b88:	00000000 	.word	0x00000000
 8000b8c:	406e0000 	.word	0x406e0000
 8000b90:	00000000 	.word	0x00000000
 8000b94:	40740000 	.word	0x40740000
 8000b98:	00000000 	.word	0x00000000
 8000b9c:	412e8480 	.word	0x412e8480
 8000ba0:	00000000 	.word	0x00000000
 8000ba4:	40590000 	.word	0x40590000
 8000ba8:	08009068 	.word	0x08009068
 8000bac:	20000270 	.word	0x20000270
 8000bb0:	08009084 	.word	0x08009084
 8000bb4:	469c4000 	.word	0x469c4000
 8000bb8:	080090a0 	.word	0x080090a0
 8000bbc:	080090b0 	.word	0x080090b0
 8000bc0:	080090bc 	.word	0x080090bc
 8000bc4:	080090c8 	.word	0x080090c8
 8000bc8:	080090dc 	.word	0x080090dc
	  		{
	  		sprintf(Temp_Buffer_text, "Counting: %d", i);
 8000bcc:	f8b7 2104 	ldrh.w	r2, [r7, #260]	@ 0x104
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	49d9      	ldr	r1, [pc, #868]	@ (8000f38 <main+0x620>)
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f006 f979 	bl	8006ecc <siprintf>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 10, BLACK, 2, WHITE);
 8000bda:	1d38      	adds	r0, r7, #4
 8000bdc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000be0:	9301      	str	r3, [sp, #4]
 8000be2:	2302      	movs	r3, #2
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2300      	movs	r3, #0
 8000be8:	220a      	movs	r2, #10
 8000bea:	210a      	movs	r1, #10
 8000bec:	f001 fc52 	bl	8002494 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 30, BLUE, 2, WHITE);
 8000bf0:	1d38      	adds	r0, r7, #4
 8000bf2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bf6:	9301      	str	r3, [sp, #4]
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	231f      	movs	r3, #31
 8000bfe:	221e      	movs	r2, #30
 8000c00:	210a      	movs	r1, #10
 8000c02:	f001 fc47 	bl	8002494 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 50, RED, 2, WHITE);
 8000c06:	1d38      	adds	r0, r7, #4
 8000c08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c0c:	9301      	str	r3, [sp, #4]
 8000c0e:	2302      	movs	r3, #2
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000c16:	2232      	movs	r2, #50	@ 0x32
 8000c18:	210a      	movs	r1, #10
 8000c1a:	f001 fc3b 	bl	8002494 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 70, GREEN, 2, WHITE);
 8000c1e:	1d38      	adds	r0, r7, #4
 8000c20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c24:	9301      	str	r3, [sp, #4]
 8000c26:	2302      	movs	r3, #2
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000c2e:	2246      	movs	r2, #70	@ 0x46
 8000c30:	210a      	movs	r1, #10
 8000c32:	f001 fc2f 	bl	8002494 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 90, BLACK, 2, WHITE);
 8000c36:	1d38      	adds	r0, r7, #4
 8000c38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c3c:	9301      	str	r3, [sp, #4]
 8000c3e:	2302      	movs	r3, #2
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	2300      	movs	r3, #0
 8000c44:	225a      	movs	r2, #90	@ 0x5a
 8000c46:	210a      	movs	r1, #10
 8000c48:	f001 fc24 	bl	8002494 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 110, BLUE, 2, WHITE);
 8000c4c:	1d38      	adds	r0, r7, #4
 8000c4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c52:	9301      	str	r3, [sp, #4]
 8000c54:	2302      	movs	r3, #2
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	231f      	movs	r3, #31
 8000c5a:	226e      	movs	r2, #110	@ 0x6e
 8000c5c:	210a      	movs	r1, #10
 8000c5e:	f001 fc19 	bl	8002494 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 130, RED, 2, WHITE);
 8000c62:	1d38      	adds	r0, r7, #4
 8000c64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c68:	9301      	str	r3, [sp, #4]
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000c72:	2282      	movs	r2, #130	@ 0x82
 8000c74:	210a      	movs	r1, #10
 8000c76:	f001 fc0d 	bl	8002494 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 150, GREEN, 2, WHITE);
 8000c7a:	1d38      	adds	r0, r7, #4
 8000c7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c80:	9301      	str	r3, [sp, #4]
 8000c82:	2302      	movs	r3, #2
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000c8a:	2296      	movs	r2, #150	@ 0x96
 8000c8c:	210a      	movs	r1, #10
 8000c8e:	f001 fc01 	bl	8002494 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 170, WHITE, 2, BLACK);
 8000c92:	1d38      	adds	r0, r7, #4
 8000c94:	2300      	movs	r3, #0
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	2302      	movs	r3, #2
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ca0:	22aa      	movs	r2, #170	@ 0xaa
 8000ca2:	210a      	movs	r1, #10
 8000ca4:	f001 fbf6 	bl	8002494 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 190, BLUE, 2, BLACK);
 8000ca8:	1d38      	adds	r0, r7, #4
 8000caa:	2300      	movs	r3, #0
 8000cac:	9301      	str	r3, [sp, #4]
 8000cae:	2302      	movs	r3, #2
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	231f      	movs	r3, #31
 8000cb4:	22be      	movs	r2, #190	@ 0xbe
 8000cb6:	210a      	movs	r1, #10
 8000cb8:	f001 fbec 	bl	8002494 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 210, RED, 2, BLACK);
 8000cbc:	1d38      	adds	r0, r7, #4
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	9301      	str	r3, [sp, #4]
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000cca:	22d2      	movs	r2, #210	@ 0xd2
 8000ccc:	210a      	movs	r1, #10
 8000cce:	f001 fbe1 	bl	8002494 <ILI9341_Draw_Text>
	  		for(uint16_t i = 0; i <= 10; i++)
 8000cd2:	f8b7 3104 	ldrh.w	r3, [r7, #260]	@ 0x104
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104
 8000cdc:	f8b7 3104 	ldrh.w	r3, [r7, #260]	@ 0x104
 8000ce0:	2b0a      	cmp	r3, #10
 8000ce2:	f67f af73 	bls.w	8000bcc <main+0x2b4>
	  		}

	  		HAL_Delay(1000);
 8000ce6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cea:	f002 fc13 	bl	8003514 <HAL_Delay>

	  //----------------------------------------------------------COUNTING SINGLE SEGMENT
	  		ILI9341_Fill_Screen(WHITE);
 8000cee:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000cf2:	f002 f889 	bl	8002e08 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f001 fe7c 	bl	80029f4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Counting single segment", 10, 10, BLACK, 1, WHITE);
 8000cfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d00:	9301      	str	r3, [sp, #4]
 8000d02:	2301      	movs	r3, #1
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	2300      	movs	r3, #0
 8000d08:	220a      	movs	r2, #10
 8000d0a:	210a      	movs	r1, #10
 8000d0c:	488b      	ldr	r0, [pc, #556]	@ (8000f3c <main+0x624>)
 8000d0e:	f001 fbc1 	bl	8002494 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8000d12:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d16:	f002 fbfd 	bl	8003514 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8000d1a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000d1e:	f002 f873 	bl	8002e08 <ILI9341_Fill_Screen>

	  		for(uint16_t i = 0; i <= 100; i++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
 8000d28:	e016      	b.n	8000d58 <main+0x440>
	  		{
	  		sprintf(Temp_Buffer_text, "Counting: %d", i);
 8000d2a:	f8b7 2102 	ldrh.w	r2, [r7, #258]	@ 0x102
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	4981      	ldr	r1, [pc, #516]	@ (8000f38 <main+0x620>)
 8000d32:	4618      	mov	r0, r3
 8000d34:	f006 f8ca 	bl	8006ecc <siprintf>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 10, BLACK, 3, WHITE);
 8000d38:	1d38      	adds	r0, r7, #4
 8000d3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	2303      	movs	r3, #3
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	2300      	movs	r3, #0
 8000d46:	220a      	movs	r2, #10
 8000d48:	210a      	movs	r1, #10
 8000d4a:	f001 fba3 	bl	8002494 <ILI9341_Draw_Text>
	  		for(uint16_t i = 0; i <= 100; i++)
 8000d4e:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 8000d52:	3301      	adds	r3, #1
 8000d54:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
 8000d58:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 8000d5c:	2b64      	cmp	r3, #100	@ 0x64
 8000d5e:	d9e4      	bls.n	8000d2a <main+0x412>
	  		}

	  		HAL_Delay(1000);
 8000d60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d64:	f002 fbd6 	bl	8003514 <HAL_Delay>

	  //----------------------------------------------------------ALIGNMENT TEST
	  		ILI9341_Fill_Screen(WHITE);
 8000d68:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000d6c:	f002 f84c 	bl	8002e08 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f001 fe3f 	bl	80029f4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Rectangle alignment check", 10, 10, BLACK, 1, WHITE);
 8000d76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d7a:	9301      	str	r3, [sp, #4]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	2300      	movs	r3, #0
 8000d82:	220a      	movs	r2, #10
 8000d84:	210a      	movs	r1, #10
 8000d86:	486e      	ldr	r0, [pc, #440]	@ (8000f40 <main+0x628>)
 8000d88:	f001 fb84 	bl	8002494 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8000d8c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d90:	f002 fbc0 	bl	8003514 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8000d94:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000d98:	f002 f836 	bl	8002e08 <ILI9341_Fill_Screen>

	  		ILI9341_Draw_Hollow_Rectangle_Coord(50, 50, 100, 100, BLACK);
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	2364      	movs	r3, #100	@ 0x64
 8000da2:	2264      	movs	r2, #100	@ 0x64
 8000da4:	2132      	movs	r1, #50	@ 0x32
 8000da6:	2032      	movs	r0, #50	@ 0x32
 8000da8:	f001 f9fb 	bl	80021a2 <ILI9341_Draw_Hollow_Rectangle_Coord>
	  		ILI9341_Draw_Filled_Rectangle_Coord(20, 20, 50, 50, BLACK);
 8000dac:	2300      	movs	r3, #0
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2332      	movs	r3, #50	@ 0x32
 8000db2:	2232      	movs	r2, #50	@ 0x32
 8000db4:	2114      	movs	r1, #20
 8000db6:	2014      	movs	r0, #20
 8000db8:	f001 fa74 	bl	80022a4 <ILI9341_Draw_Filled_Rectangle_Coord>
	  		ILI9341_Draw_Hollow_Rectangle_Coord(10, 10, 19, 19, BLACK);
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2313      	movs	r3, #19
 8000dc2:	2213      	movs	r2, #19
 8000dc4:	210a      	movs	r1, #10
 8000dc6:	200a      	movs	r0, #10
 8000dc8:	f001 f9eb 	bl	80021a2 <ILI9341_Draw_Hollow_Rectangle_Coord>
	  		HAL_Delay(1000);
 8000dcc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dd0:	f002 fba0 	bl	8003514 <HAL_Delay>

	  //----------------------------------------------------------LINES EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 8000dd4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000dd8:	f002 f816 	bl	8002e08 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f001 fe09 	bl	80029f4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8000de2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	2301      	movs	r3, #1
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2300      	movs	r3, #0
 8000dee:	220a      	movs	r2, #10
 8000df0:	210a      	movs	r1, #10
 8000df2:	4854      	ldr	r0, [pc, #336]	@ (8000f44 <main+0x62c>)
 8000df4:	f001 fb4e 	bl	8002494 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Horizontal and Vertical lines", 10, 20, BLACK, 1, WHITE);
 8000df8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	2301      	movs	r3, #1
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2300      	movs	r3, #0
 8000e04:	2214      	movs	r2, #20
 8000e06:	210a      	movs	r1, #10
 8000e08:	484f      	ldr	r0, [pc, #316]	@ (8000f48 <main+0x630>)
 8000e0a:	f001 fb43 	bl	8002494 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8000e0e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e12:	f002 fb7f 	bl	8003514 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8000e16:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000e1a:	f001 fff5 	bl	8002e08 <ILI9341_Fill_Screen>

	  		for(uint32_t i = 0; i < 30000; i++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000e24:	e054      	b.n	8000ed0 <main+0x5b8>
	  		{
	  			uint32_t random_num = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	67bb      	str	r3, [r7, #120]	@ 0x78
	  			uint16_t xr = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	  			uint16_t yr = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
	  			uint16_t radiusr = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
	  			uint16_t colourr = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000e42:	4842      	ldr	r0, [pc, #264]	@ (8000f4c <main+0x634>)
 8000e44:	f004 f823 	bl	8004e8e <HAL_RNG_GetRandomNumber>
 8000e48:	67b8      	str	r0, [r7, #120]	@ 0x78
	  			xr = random_num;
 8000e4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e4c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000e50:	483e      	ldr	r0, [pc, #248]	@ (8000f4c <main+0x634>)
 8000e52:	f004 f81c 	bl	8004e8e <HAL_RNG_GetRandomNumber>
 8000e56:	67b8      	str	r0, [r7, #120]	@ 0x78
	  			yr = random_num;
 8000e58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e5a:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000e5e:	483b      	ldr	r0, [pc, #236]	@ (8000f4c <main+0x634>)
 8000e60:	f004 f815 	bl	8004e8e <HAL_RNG_GetRandomNumber>
 8000e64:	67b8      	str	r0, [r7, #120]	@ 0x78
	  			radiusr = random_num;
 8000e66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e68:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000e6c:	4837      	ldr	r0, [pc, #220]	@ (8000f4c <main+0x634>)
 8000e6e:	f004 f80e 	bl	8004e8e <HAL_RNG_GetRandomNumber>
 8000e72:	67b8      	str	r0, [r7, #120]	@ 0x78
	  			colourr = random_num;
 8000e74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e76:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70

	  			xr &= 0x01FF;
 8000e7a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8000e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e82:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	  			yr &= 0x01FF;
 8000e86:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8000e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e8e:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
	  			radiusr &= 0x001F;
 8000e92:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8000e96:	f003 031f 	and.w	r3, r3, #31
 8000e9a:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Horizontal_Line(xr, yr, radiusr, colourr);
 8000e9e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8000ea2:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 8000ea6:	f8b7 1074 	ldrh.w	r1, [r7, #116]	@ 0x74
 8000eaa:	f8b7 0076 	ldrh.w	r0, [r7, #118]	@ 0x76
 8000eae:	f002 f907 	bl	80030c0 <ILI9341_Draw_Horizontal_Line>
	  			ILI9341_Draw_Vertical_Line(xr, yr, radiusr, colourr);
 8000eb2:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8000eb6:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 8000eba:	f8b7 1074 	ldrh.w	r1, [r7, #116]	@ 0x74
 8000ebe:	f8b7 0076 	ldrh.w	r0, [r7, #118]	@ 0x76
 8000ec2:	f002 f941 	bl	8003148 <ILI9341_Draw_Vertical_Line>
	  		for(uint32_t i = 0; i < 30000; i++)
 8000ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000eca:	3301      	adds	r3, #1
 8000ecc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000ed4:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d9a4      	bls.n	8000e26 <main+0x50e>
	  		}

	  		HAL_Delay(1000);
 8000edc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ee0:	f002 fb18 	bl	8003514 <HAL_Delay>

	  //----------------------------------------------------------HOLLOW CIRCLES EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 8000ee4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000ee8:	f001 ff8e 	bl	8002e08 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000eec:	2001      	movs	r0, #1
 8000eee:	f001 fd81 	bl	80029f4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8000ef2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2300      	movs	r3, #0
 8000efe:	220a      	movs	r2, #10
 8000f00:	210a      	movs	r1, #10
 8000f02:	4810      	ldr	r0, [pc, #64]	@ (8000f44 <main+0x62c>)
 8000f04:	f001 fac6 	bl	8002494 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Circles", 10, 20, BLACK, 1, WHITE);
 8000f08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	2301      	movs	r3, #1
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2300      	movs	r3, #0
 8000f14:	2214      	movs	r2, #20
 8000f16:	210a      	movs	r1, #10
 8000f18:	480d      	ldr	r0, [pc, #52]	@ (8000f50 <main+0x638>)
 8000f1a:	f001 fabb 	bl	8002494 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8000f1e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f22:	f002 faf7 	bl	8003514 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8000f26:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000f2a:	f001 ff6d 	bl	8002e08 <ILI9341_Fill_Screen>


	  		for(uint32_t i = 0; i < 3000; i++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000f34:	e064      	b.n	8001000 <main+0x6e8>
 8000f36:	bf00      	nop
 8000f38:	08009100 	.word	0x08009100
 8000f3c:	08009110 	.word	0x08009110
 8000f40:	08009128 	.word	0x08009128
 8000f44:	08009144 	.word	0x08009144
 8000f48:	08009160 	.word	0x08009160
 8000f4c:	200001f8 	.word	0x200001f8
 8000f50:	08009180 	.word	0x08009180
	  		{
	  			uint32_t random_num = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	  			uint16_t xr = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
	  			uint16_t yr = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
	  			uint16_t radiusr = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
	  			uint16_t colourr = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000f72:	48cb      	ldr	r0, [pc, #812]	@ (80012a0 <main+0x988>)
 8000f74:	f003 ff8b 	bl	8004e8e <HAL_RNG_GetRandomNumber>
 8000f78:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	  			xr = random_num;
 8000f7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f80:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000f84:	48c6      	ldr	r0, [pc, #792]	@ (80012a0 <main+0x988>)
 8000f86:	f003 ff82 	bl	8004e8e <HAL_RNG_GetRandomNumber>
 8000f8a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	  			yr = random_num;
 8000f8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f92:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000f96:	48c2      	ldr	r0, [pc, #776]	@ (80012a0 <main+0x988>)
 8000f98:	f003 ff79 	bl	8004e8e <HAL_RNG_GetRandomNumber>
 8000f9c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	  			radiusr = random_num;
 8000fa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000fa4:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000fa8:	48bd      	ldr	r0, [pc, #756]	@ (80012a0 <main+0x988>)
 8000faa:	f003 ff70 	bl	8004e8e <HAL_RNG_GetRandomNumber>
 8000fae:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	  			colourr = random_num;
 8000fb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000fb6:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c

	  			xr &= 0x01FF;
 8000fba:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8000fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fc2:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
	  			yr &= 0x01FF;
 8000fc6:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8000fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fce:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
	  			radiusr &= 0x001F;
 8000fd2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8000fd6:	f003 031f 	and.w	r3, r3, #31
 8000fda:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Hollow_Circle(xr, yr, radiusr*2, colourr);
 8000fde:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8000fea:	f8b7 1080 	ldrh.w	r1, [r7, #128]	@ 0x80
 8000fee:	f8b7 0082 	ldrh.w	r0, [r7, #130]	@ 0x82
 8000ff2:	f000 ff98 	bl	8001f26 <ILI9341_Draw_Hollow_Circle>
	  		for(uint32_t i = 0; i < 3000; i++)
 8000ff6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001000:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001004:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001008:	4293      	cmp	r3, r2
 800100a:	d9a3      	bls.n	8000f54 <main+0x63c>
	  		}
	  		HAL_Delay(1000);
 800100c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001010:	f002 fa80 	bl	8003514 <HAL_Delay>

	  //----------------------------------------------------------FILLED CIRCLES EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 8001014:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001018:	f001 fef6 	bl	8002e08 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800101c:	2001      	movs	r0, #1
 800101e:	f001 fce9 	bl	80029f4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8001022:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	2301      	movs	r3, #1
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2300      	movs	r3, #0
 800102e:	220a      	movs	r2, #10
 8001030:	210a      	movs	r1, #10
 8001032:	489c      	ldr	r0, [pc, #624]	@ (80012a4 <main+0x98c>)
 8001034:	f001 fa2e 	bl	8002494 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Filled Circles", 10, 20, BLACK, 1, WHITE);
 8001038:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	2301      	movs	r3, #1
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2300      	movs	r3, #0
 8001044:	2214      	movs	r2, #20
 8001046:	210a      	movs	r1, #10
 8001048:	4897      	ldr	r0, [pc, #604]	@ (80012a8 <main+0x990>)
 800104a:	f001 fa23 	bl	8002494 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 800104e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001052:	f002 fa5f 	bl	8003514 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8001056:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800105a:	f001 fed5 	bl	8002e08 <ILI9341_Fill_Screen>

	  		for(uint32_t i = 0; i < 1000; i++)
 800105e:	2300      	movs	r3, #0
 8001060:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001064:	e055      	b.n	8001112 <main+0x7fa>
	  		{
	  			uint32_t random_num = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	  			uint16_t xr = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
	  			uint16_t yr = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
	  			uint16_t radiusr = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
	  			uint16_t colourr = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001084:	4886      	ldr	r0, [pc, #536]	@ (80012a0 <main+0x988>)
 8001086:	f003 ff02 	bl	8004e8e <HAL_RNG_GetRandomNumber>
 800108a:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
	  			xr = random_num;
 800108e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001092:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001096:	4882      	ldr	r0, [pc, #520]	@ (80012a0 <main+0x988>)
 8001098:	f003 fef9 	bl	8004e8e <HAL_RNG_GetRandomNumber>
 800109c:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
	  			yr = random_num;
 80010a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80010a4:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80010a8:	487d      	ldr	r0, [pc, #500]	@ (80012a0 <main+0x988>)
 80010aa:	f003 fef0 	bl	8004e8e <HAL_RNG_GetRandomNumber>
 80010ae:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
	  			radiusr = random_num;
 80010b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80010b6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80010ba:	4879      	ldr	r0, [pc, #484]	@ (80012a0 <main+0x988>)
 80010bc:	f003 fee7 	bl	8004e8e <HAL_RNG_GetRandomNumber>
 80010c0:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
	  			colourr = random_num;
 80010c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80010c8:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

	  			xr &= 0x01FF;
 80010cc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80010d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010d4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
	  			yr &= 0x01FF;
 80010d8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80010dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010e0:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
	  			radiusr &= 0x001F;
 80010e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80010e8:	f003 031f 	and.w	r3, r3, #31
 80010ec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Filled_Circle(xr, yr, radiusr/2, colourr);
 80010f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80010f4:	085b      	lsrs	r3, r3, #1
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80010fc:	f8b7 108c 	ldrh.w	r1, [r7, #140]	@ 0x8c
 8001100:	f8b7 008e 	ldrh.w	r0, [r7, #142]	@ 0x8e
 8001104:	f000 ffc5 	bl	8002092 <ILI9341_Draw_Filled_Circle>
	  		for(uint32_t i = 0; i < 1000; i++)
 8001108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800110c:	3301      	adds	r3, #1
 800110e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001116:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800111a:	d3a4      	bcc.n	8001066 <main+0x74e>
	  		}
	  		HAL_Delay(1000);
 800111c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001120:	f002 f9f8 	bl	8003514 <HAL_Delay>

	  //----------------------------------------------------------HOLLOW RECTANGLES EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 8001124:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001128:	f001 fe6e 	bl	8002e08 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800112c:	2001      	movs	r0, #1
 800112e:	f001 fc61 	bl	80029f4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8001132:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	2301      	movs	r3, #1
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2300      	movs	r3, #0
 800113e:	220a      	movs	r2, #10
 8001140:	210a      	movs	r1, #10
 8001142:	4858      	ldr	r0, [pc, #352]	@ (80012a4 <main+0x98c>)
 8001144:	f001 f9a6 	bl	8002494 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Rectangles", 10, 20, BLACK, 1, WHITE);
 8001148:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	2301      	movs	r3, #1
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2300      	movs	r3, #0
 8001154:	2214      	movs	r2, #20
 8001156:	210a      	movs	r1, #10
 8001158:	4854      	ldr	r0, [pc, #336]	@ (80012ac <main+0x994>)
 800115a:	f001 f99b 	bl	8002494 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 800115e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001162:	f002 f9d7 	bl	8003514 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8001166:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800116a:	f001 fe4d 	bl	8002e08 <ILI9341_Fill_Screen>

	  		for(uint32_t i = 0; i < 20000; i++)
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001174:	e060      	b.n	8001238 <main+0x920>
	  		{
	  			uint32_t random_num = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	  			uint16_t xr = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
	  			uint16_t yr = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
	  			uint16_t radiusr = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
	  			uint16_t colourr = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001194:	4842      	ldr	r0, [pc, #264]	@ (80012a0 <main+0x988>)
 8001196:	f003 fe7a 	bl	8004e8e <HAL_RNG_GetRandomNumber>
 800119a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
	  			xr = random_num;
 800119e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011a2:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80011a6:	483e      	ldr	r0, [pc, #248]	@ (80012a0 <main+0x988>)
 80011a8:	f003 fe71 	bl	8004e8e <HAL_RNG_GetRandomNumber>
 80011ac:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
	  			yr = random_num;
 80011b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011b4:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80011b8:	4839      	ldr	r0, [pc, #228]	@ (80012a0 <main+0x988>)
 80011ba:	f003 fe68 	bl	8004e8e <HAL_RNG_GetRandomNumber>
 80011be:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
	  			radiusr = random_num;
 80011c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011c6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80011ca:	4835      	ldr	r0, [pc, #212]	@ (80012a0 <main+0x988>)
 80011cc:	f003 fe5f 	bl	8004e8e <HAL_RNG_GetRandomNumber>
 80011d0:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
	  			colourr = random_num;
 80011d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011d8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

	  			xr &= 0x01FF;
 80011dc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 80011e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011e4:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
	  			yr &= 0x01FF;
 80011e8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 80011ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011f0:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
	  			radiusr &= 0x001F;
 80011f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80011f8:	f003 031f 	and.w	r3, r3, #31
 80011fc:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Hollow_Rectangle_Coord(xr, yr, xr+radiusr, yr+radiusr, colourr);
 8001200:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 8001204:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001208:	4413      	add	r3, r2
 800120a:	b29c      	uxth	r4, r3
 800120c:	f8b7 2098 	ldrh.w	r2, [r7, #152]	@ 0x98
 8001210:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001214:	4413      	add	r3, r2
 8001216:	b29a      	uxth	r2, r3
 8001218:	f8b7 1098 	ldrh.w	r1, [r7, #152]	@ 0x98
 800121c:	f8b7 009a 	ldrh.w	r0, [r7, #154]	@ 0x9a
 8001220:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	4613      	mov	r3, r2
 8001228:	4622      	mov	r2, r4
 800122a:	f000 ffba 	bl	80021a2 <ILI9341_Draw_Hollow_Rectangle_Coord>
	  		for(uint32_t i = 0; i < 20000; i++)
 800122e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001232:	3301      	adds	r3, #1
 8001234:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001238:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800123c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001240:	4293      	cmp	r3, r2
 8001242:	d998      	bls.n	8001176 <main+0x85e>
	  		}
	  		HAL_Delay(1000);
 8001244:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001248:	f002 f964 	bl	8003514 <HAL_Delay>

	  //----------------------------------------------------------FILLED RECTANGLES EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 800124c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001250:	f001 fdda 	bl	8002e08 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001254:	2001      	movs	r0, #1
 8001256:	f001 fbcd 	bl	80029f4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 800125a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	2301      	movs	r3, #1
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2300      	movs	r3, #0
 8001266:	220a      	movs	r2, #10
 8001268:	210a      	movs	r1, #10
 800126a:	480e      	ldr	r0, [pc, #56]	@ (80012a4 <main+0x98c>)
 800126c:	f001 f912 	bl	8002494 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Filled Rectangles", 10, 20, BLACK, 1, WHITE);
 8001270:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	2301      	movs	r3, #1
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2300      	movs	r3, #0
 800127c:	2214      	movs	r2, #20
 800127e:	210a      	movs	r1, #10
 8001280:	480b      	ldr	r0, [pc, #44]	@ (80012b0 <main+0x998>)
 8001282:	f001 f907 	bl	8002494 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8001286:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800128a:	f002 f943 	bl	8003514 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 800128e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001292:	f001 fdb9 	bl	8002e08 <ILI9341_Fill_Screen>

	  		for(uint32_t i = 0; i < 20000; i++)
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800129c:	e062      	b.n	8001364 <main+0xa4c>
 800129e:	bf00      	nop
 80012a0:	200001f8 	.word	0x200001f8
 80012a4:	08009144 	.word	0x08009144
 80012a8:	08009188 	.word	0x08009188
 80012ac:	08009198 	.word	0x08009198
 80012b0:	080091a4 	.word	0x080091a4
	  		{
	  			uint32_t random_num = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	  			uint16_t xr = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
	  			uint16_t yr = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
	  			uint16_t radiusr = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
	  			uint16_t colourr = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80012d2:	48b9      	ldr	r0, [pc, #740]	@ (80015b8 <main+0xca0>)
 80012d4:	f003 fddb 	bl	8004e8e <HAL_RNG_GetRandomNumber>
 80012d8:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
	  			xr = random_num;
 80012dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012e0:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80012e4:	48b4      	ldr	r0, [pc, #720]	@ (80015b8 <main+0xca0>)
 80012e6:	f003 fdd2 	bl	8004e8e <HAL_RNG_GetRandomNumber>
 80012ea:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
	  			yr = random_num;
 80012ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012f2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80012f6:	48b0      	ldr	r0, [pc, #704]	@ (80015b8 <main+0xca0>)
 80012f8:	f003 fdc9 	bl	8004e8e <HAL_RNG_GetRandomNumber>
 80012fc:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
	  			radiusr = random_num;
 8001300:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001304:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001308:	48ab      	ldr	r0, [pc, #684]	@ (80015b8 <main+0xca0>)
 800130a:	f003 fdc0 	bl	8004e8e <HAL_RNG_GetRandomNumber>
 800130e:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
	  			colourr = random_num;
 8001312:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001316:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0

	  			xr &= 0x01FF;
 800131a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800131e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001322:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
	  			yr &= 0x01FF;
 8001326:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 800132a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800132e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
	  			radiusr &= 0x001F;
 8001332:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8001336:	f003 031f 	and.w	r3, r3, #31
 800133a:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Rectangle(xr, yr, radiusr, radiusr, colourr);
 800133e:	f8b7 40a2 	ldrh.w	r4, [r7, #162]	@ 0xa2
 8001342:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	@ 0xa2
 8001346:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	@ 0xa4
 800134a:	f8b7 00a6 	ldrh.w	r0, [r7, #166]	@ 0xa6
 800134e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	4623      	mov	r3, r4
 8001356:	f001 fe57 	bl	8003008 <ILI9341_Draw_Rectangle>
	  		for(uint32_t i = 0; i < 20000; i++)
 800135a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800135e:	3301      	adds	r3, #1
 8001360:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001364:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001368:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800136c:	4293      	cmp	r3, r2
 800136e:	d9a1      	bls.n	80012b4 <main+0x99c>
	  		}
	  		HAL_Delay(1000);
 8001370:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001374:	f002 f8ce 	bl	8003514 <HAL_Delay>

	  //----------------------------------------------------------INDIVIDUAL PIXEL EXAMPLE

	  		ILI9341_Fill_Screen(WHITE);
 8001378:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800137c:	f001 fd44 	bl	8002e08 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001380:	2001      	movs	r0, #1
 8001382:	f001 fb37 	bl	80029f4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Slow draw by selecting", 10, 10, BLACK, 1, WHITE);
 8001386:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	2301      	movs	r3, #1
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2300      	movs	r3, #0
 8001392:	220a      	movs	r2, #10
 8001394:	210a      	movs	r1, #10
 8001396:	4889      	ldr	r0, [pc, #548]	@ (80015bc <main+0xca4>)
 8001398:	f001 f87c 	bl	8002494 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("and adressing pixels", 10, 20, BLACK, 1, WHITE);
 800139c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2300      	movs	r3, #0
 80013a8:	2214      	movs	r2, #20
 80013aa:	210a      	movs	r1, #10
 80013ac:	4884      	ldr	r0, [pc, #528]	@ (80015c0 <main+0xca8>)
 80013ae:	f001 f871 	bl	8002494 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 80013b2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013b6:	f002 f8ad 	bl	8003514 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 80013ba:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80013be:	f001 fd23 	bl	8002e08 <ILI9341_Fill_Screen>


	  		x = 0;
 80013c2:	4b80      	ldr	r3, [pc, #512]	@ (80015c4 <main+0xcac>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	801a      	strh	r2, [r3, #0]
	  		y = 0;
 80013c8:	4b7f      	ldr	r3, [pc, #508]	@ (80015c8 <main+0xcb0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	801a      	strh	r2, [r3, #0]
	  		while (y < 240)
 80013ce:	e026      	b.n	800141e <main+0xb06>
	  		{
	  		while ((x < 320) && (y < 240))
	  		{

	  			if(x % 2)
 80013d0:	4b7c      	ldr	r3, [pc, #496]	@ (80015c4 <main+0xcac>)
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	b29b      	uxth	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d007      	beq.n	80013ee <main+0xad6>
	  			{
	  				ILI9341_Draw_Pixel(x, y, BLACK);
 80013de:	4b79      	ldr	r3, [pc, #484]	@ (80015c4 <main+0xcac>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	4a79      	ldr	r2, [pc, #484]	@ (80015c8 <main+0xcb0>)
 80013e4:	8811      	ldrh	r1, [r2, #0]
 80013e6:	2200      	movs	r2, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f001 fd33 	bl	8002e54 <ILI9341_Draw_Pixel>
	  			}

	  			x++;
 80013ee:	4b75      	ldr	r3, [pc, #468]	@ (80015c4 <main+0xcac>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	3301      	adds	r3, #1
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	4b73      	ldr	r3, [pc, #460]	@ (80015c4 <main+0xcac>)
 80013f8:	801a      	strh	r2, [r3, #0]
	  		while ((x < 320) && (y < 240))
 80013fa:	4b72      	ldr	r3, [pc, #456]	@ (80015c4 <main+0xcac>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001402:	d203      	bcs.n	800140c <main+0xaf4>
 8001404:	4b70      	ldr	r3, [pc, #448]	@ (80015c8 <main+0xcb0>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	2bef      	cmp	r3, #239	@ 0xef
 800140a:	d9e1      	bls.n	80013d0 <main+0xab8>
	  		}

	  			y++;
 800140c:	4b6e      	ldr	r3, [pc, #440]	@ (80015c8 <main+0xcb0>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	b29a      	uxth	r2, r3
 8001414:	4b6c      	ldr	r3, [pc, #432]	@ (80015c8 <main+0xcb0>)
 8001416:	801a      	strh	r2, [r3, #0]
	  			x = 0;
 8001418:	4b6a      	ldr	r3, [pc, #424]	@ (80015c4 <main+0xcac>)
 800141a:	2200      	movs	r2, #0
 800141c:	801a      	strh	r2, [r3, #0]
	  		while (y < 240)
 800141e:	4b6a      	ldr	r3, [pc, #424]	@ (80015c8 <main+0xcb0>)
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	2bef      	cmp	r3, #239	@ 0xef
 8001424:	d9e9      	bls.n	80013fa <main+0xae2>
	  		}

	  		x = 0;
 8001426:	4b67      	ldr	r3, [pc, #412]	@ (80015c4 <main+0xcac>)
 8001428:	2200      	movs	r2, #0
 800142a:	801a      	strh	r2, [r3, #0]
	  		y = 0;
 800142c:	4b66      	ldr	r3, [pc, #408]	@ (80015c8 <main+0xcb0>)
 800142e:	2200      	movs	r2, #0
 8001430:	801a      	strh	r2, [r3, #0]


	  		while (y < 240)
 8001432:	e026      	b.n	8001482 <main+0xb6a>
	  		{
	  		while ((x < 320) && (y < 240))
	  		{

	  			if(y % 2)
 8001434:	4b64      	ldr	r3, [pc, #400]	@ (80015c8 <main+0xcb0>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	b29b      	uxth	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d007      	beq.n	8001452 <main+0xb3a>
	  			{
	  				ILI9341_Draw_Pixel(x, y, BLACK);
 8001442:	4b60      	ldr	r3, [pc, #384]	@ (80015c4 <main+0xcac>)
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	4a60      	ldr	r2, [pc, #384]	@ (80015c8 <main+0xcb0>)
 8001448:	8811      	ldrh	r1, [r2, #0]
 800144a:	2200      	movs	r2, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f001 fd01 	bl	8002e54 <ILI9341_Draw_Pixel>
	  			}

	  			x++;
 8001452:	4b5c      	ldr	r3, [pc, #368]	@ (80015c4 <main+0xcac>)
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	3301      	adds	r3, #1
 8001458:	b29a      	uxth	r2, r3
 800145a:	4b5a      	ldr	r3, [pc, #360]	@ (80015c4 <main+0xcac>)
 800145c:	801a      	strh	r2, [r3, #0]
	  		while ((x < 320) && (y < 240))
 800145e:	4b59      	ldr	r3, [pc, #356]	@ (80015c4 <main+0xcac>)
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001466:	d203      	bcs.n	8001470 <main+0xb58>
 8001468:	4b57      	ldr	r3, [pc, #348]	@ (80015c8 <main+0xcb0>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	2bef      	cmp	r3, #239	@ 0xef
 800146e:	d9e1      	bls.n	8001434 <main+0xb1c>
	  		}

	  			y++;
 8001470:	4b55      	ldr	r3, [pc, #340]	@ (80015c8 <main+0xcb0>)
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	3301      	adds	r3, #1
 8001476:	b29a      	uxth	r2, r3
 8001478:	4b53      	ldr	r3, [pc, #332]	@ (80015c8 <main+0xcb0>)
 800147a:	801a      	strh	r2, [r3, #0]
	  			x = 0;
 800147c:	4b51      	ldr	r3, [pc, #324]	@ (80015c4 <main+0xcac>)
 800147e:	2200      	movs	r2, #0
 8001480:	801a      	strh	r2, [r3, #0]
	  		while (y < 240)
 8001482:	4b51      	ldr	r3, [pc, #324]	@ (80015c8 <main+0xcb0>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	2bef      	cmp	r3, #239	@ 0xef
 8001488:	d9e9      	bls.n	800145e <main+0xb46>
	  		}
	  		HAL_Delay(2000);
 800148a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800148e:	f002 f841 	bl	8003514 <HAL_Delay>

	  //----------------------------------------------------------INDIVIDUAL PIXEL EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 8001492:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001496:	f001 fcb7 	bl	8002e08 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800149a:	2001      	movs	r0, #1
 800149c:	f001 faaa 	bl	80029f4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Random position and colour", 10, 10, BLACK, 1, WHITE);
 80014a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	2301      	movs	r3, #1
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	2300      	movs	r3, #0
 80014ac:	220a      	movs	r2, #10
 80014ae:	210a      	movs	r1, #10
 80014b0:	4846      	ldr	r0, [pc, #280]	@ (80015cc <main+0xcb4>)
 80014b2:	f000 ffef 	bl	8002494 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("500000 pixels", 10, 20, BLACK, 1, WHITE);
 80014b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	2301      	movs	r3, #1
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2300      	movs	r3, #0
 80014c2:	2214      	movs	r2, #20
 80014c4:	210a      	movs	r1, #10
 80014c6:	4842      	ldr	r0, [pc, #264]	@ (80015d0 <main+0xcb8>)
 80014c8:	f000 ffe4 	bl	8002494 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 80014cc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80014d0:	f002 f820 	bl	8003514 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 80014d4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80014d8:	f001 fc96 	bl	8002e08 <ILI9341_Fill_Screen>


	  		for(uint32_t i = 0; i < 500000; i++)
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80014e2:	e03a      	b.n	800155a <main+0xc42>
	  		{
	  			uint32_t random_num = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	  			uint16_t xr = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
	  			uint16_t yr = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80014f6:	4830      	ldr	r0, [pc, #192]	@ (80015b8 <main+0xca0>)
 80014f8:	f003 fcc9 	bl	8004e8e <HAL_RNG_GetRandomNumber>
 80014fc:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
	  			xr = random_num;
 8001500:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001504:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001508:	482b      	ldr	r0, [pc, #172]	@ (80015b8 <main+0xca0>)
 800150a:	f003 fcc0 	bl	8004e8e <HAL_RNG_GetRandomNumber>
 800150e:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
	  			yr = random_num;
 8001512:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001516:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
	  			uint16_t color = HAL_RNG_GetRandomNumber(&hrng);
 800151a:	4827      	ldr	r0, [pc, #156]	@ (80015b8 <main+0xca0>)
 800151c:	f003 fcb7 	bl	8004e8e <HAL_RNG_GetRandomNumber>
 8001520:	4603      	mov	r3, r0
 8001522:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae

	  			xr &= 0x01FF;
 8001526:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800152a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800152e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
	  			yr &= 0x01FF;
 8001532:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8001536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800153a:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
	  			ILI9341_Draw_Pixel(xr, yr, color);
 800153e:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8001542:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	@ 0xb0
 8001546:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800154a:	4618      	mov	r0, r3
 800154c:	f001 fc82 	bl	8002e54 <ILI9341_Draw_Pixel>
	  		for(uint32_t i = 0; i < 500000; i++)
 8001550:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001554:	3301      	adds	r3, #1
 8001556:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800155a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800155e:	4a1d      	ldr	r2, [pc, #116]	@ (80015d4 <main+0xcbc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d9bf      	bls.n	80014e4 <main+0xbcc>
	  		}
	  		HAL_Delay(2000);
 8001564:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001568:	f001 ffd4 	bl	8003514 <HAL_Delay>

	  //----------------------------------------------------------565 COLOUR EXAMPLE, Grayscale
	  		ILI9341_Fill_Screen(WHITE);
 800156c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001570:	f001 fc4a 	bl	8002e08 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001574:	2001      	movs	r0, #1
 8001576:	f001 fa3d 	bl	80029f4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
 800157a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	2301      	movs	r3, #1
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2300      	movs	r3, #0
 8001586:	220a      	movs	r2, #10
 8001588:	210a      	movs	r1, #10
 800158a:	4813      	ldr	r0, [pc, #76]	@ (80015d8 <main+0xcc0>)
 800158c:	f000 ff82 	bl	8002494 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);
 8001590:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	2301      	movs	r3, #1
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2300      	movs	r3, #0
 800159c:	2214      	movs	r2, #20
 800159e:	210a      	movs	r1, #10
 80015a0:	480e      	ldr	r0, [pc, #56]	@ (80015dc <main+0xcc4>)
 80015a2:	f000 ff77 	bl	8002494 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 80015a6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015aa:	f001 ffb3 	bl	8003514 <HAL_Delay>


	  		for(uint16_t i = 0; i <= (320); i++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
 80015b4:	e05a      	b.n	800166c <main+0xd54>
 80015b6:	bf00      	nop
 80015b8:	200001f8 	.word	0x200001f8
 80015bc:	080091b8 	.word	0x080091b8
 80015c0:	080091d0 	.word	0x080091d0
 80015c4:	200001f4 	.word	0x200001f4
 80015c8:	200001f6 	.word	0x200001f6
 80015cc:	080091e8 	.word	0x080091e8
 80015d0:	08009204 	.word	0x08009204
 80015d4:	0007a11f 	.word	0x0007a11f
 80015d8:	08009214 	.word	0x08009214
 80015dc:	08009224 	.word	0x08009224
	  		{
	  			uint16_t Red = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
	  			uint16_t Green = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
	  			uint16_t Blue = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba

	  			Red = i/(10);
 80015f2:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 80015f6:	4a7d      	ldr	r2, [pc, #500]	@ (80017ec <main+0xed4>)
 80015f8:	fba2 2303 	umull	r2, r3, r2, r3
 80015fc:	08db      	lsrs	r3, r3, #3
 80015fe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
	  			Red <<= 11;
 8001602:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001606:	02db      	lsls	r3, r3, #11
 8001608:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
	  			Green = i/(5);
 800160c:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 8001610:	4a76      	ldr	r2, [pc, #472]	@ (80017ec <main+0xed4>)
 8001612:	fba2 2303 	umull	r2, r3, r2, r3
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
	  			Green <<= 5;
 800161c:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 8001620:	015b      	lsls	r3, r3, #5
 8001622:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
	  			Blue = i/(10);
 8001626:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 800162a:	4a70      	ldr	r2, [pc, #448]	@ (80017ec <main+0xed4>)
 800162c:	fba2 2303 	umull	r2, r3, r2, r3
 8001630:	08db      	lsrs	r3, r3, #3
 8001632:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba



	  			uint16_t RGB_color = Red + Green + Blue;
 8001636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800163a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 800163e:	4413      	add	r3, r2
 8001640:	b29a      	uxth	r2, r3
 8001642:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 8001646:	4413      	add	r3, r2
 8001648:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
	  			ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color);
 800164c:	4b68      	ldr	r3, [pc, #416]	@ (80017f0 <main+0xed8>)
 800164e:	8819      	ldrh	r1, [r3, #0]
 8001650:	f8b7 00e6 	ldrh.w	r0, [r7, #230]	@ 0xe6
 8001654:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	23f0      	movs	r3, #240	@ 0xf0
 800165c:	2201      	movs	r2, #1
 800165e:	f001 fcd3 	bl	8003008 <ILI9341_Draw_Rectangle>
	  		for(uint16_t i = 0; i <= (320); i++)
 8001662:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 8001666:	3301      	adds	r3, #1
 8001668:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
 800166c:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 8001670:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001674:	d9b4      	bls.n	80015e0 <main+0xcc8>

	  		}
	  		HAL_Delay(2000);
 8001676:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800167a:	f001 ff4b 	bl	8003514 <HAL_Delay>

	  //----------------------------------------------------------IMAGE EXAMPLE, Snow Tiger
	  		ILI9341_Fill_Screen(WHITE);
 800167e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001682:	f001 fbc1 	bl	8002e08 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001686:	2001      	movs	r0, #1
 8001688:	f001 f9b4 	bl	80029f4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("RGB Picture", 10, 10, BLACK, 1, WHITE);
 800168c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001690:	9301      	str	r3, [sp, #4]
 8001692:	2301      	movs	r3, #1
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	2300      	movs	r3, #0
 8001698:	220a      	movs	r2, #10
 800169a:	210a      	movs	r1, #10
 800169c:	4855      	ldr	r0, [pc, #340]	@ (80017f4 <main+0xedc>)
 800169e:	f000 fef9 	bl	8002494 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("TIGER", 10, 20, BLACK, 1, WHITE);
 80016a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	2301      	movs	r3, #1
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2300      	movs	r3, #0
 80016ae:	2214      	movs	r2, #20
 80016b0:	210a      	movs	r1, #10
 80016b2:	4851      	ldr	r0, [pc, #324]	@ (80017f8 <main+0xee0>)
 80016b4:	f000 feee 	bl	8002494 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 80016b8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80016bc:	f001 ff2a 	bl	8003514 <HAL_Delay>
	  		ILI9341_Draw_Image((const char*)snow_tiger, SCREEN_VERTICAL_2);
 80016c0:	2102      	movs	r1, #2
 80016c2:	484e      	ldr	r0, [pc, #312]	@ (80017fc <main+0xee4>)
 80016c4:	f000 ff16 	bl	80024f4 <ILI9341_Draw_Image>
	  		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80016c8:	2000      	movs	r0, #0
 80016ca:	f001 f993 	bl	80029f4 <ILI9341_Set_Rotation>
	  		HAL_Delay(5000);
 80016ce:	f241 3088 	movw	r0, #5000	@ 0x1388
 80016d2:	f001 ff1f 	bl	8003514 <HAL_Delay>


	  //----------------------------------------------------------TOUCHSCREEN EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 80016d6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80016da:	f001 fb95 	bl	8002e08 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80016de:	2001      	movs	r0, #1
 80016e0:	f001 f988 	bl	80029f4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Touchscreen", 10, 10, BLACK, 2, WHITE);
 80016e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016e8:	9301      	str	r3, [sp, #4]
 80016ea:	2302      	movs	r3, #2
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	2300      	movs	r3, #0
 80016f0:	220a      	movs	r2, #10
 80016f2:	210a      	movs	r1, #10
 80016f4:	4842      	ldr	r0, [pc, #264]	@ (8001800 <main+0xee8>)
 80016f6:	f000 fecd 	bl	8002494 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Touch to draw", 10, 30, BLACK, 2, WHITE);
 80016fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	2302      	movs	r3, #2
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	2300      	movs	r3, #0
 8001706:	221e      	movs	r2, #30
 8001708:	210a      	movs	r1, #10
 800170a:	483e      	ldr	r0, [pc, #248]	@ (8001804 <main+0xeec>)
 800170c:	f000 fec2 	bl	8002494 <ILI9341_Draw_Text>
	  		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001710:	2000      	movs	r0, #0
 8001712:	f001 f96f 	bl	80029f4 <ILI9341_Set_Rotation>


	  		while(1)
	  		{
	  			HAL_Delay(20);
 8001716:	2014      	movs	r0, #20
 8001718:	f001 fefc 	bl	8003514 <HAL_Delay>

	  			if(TP_Touchpad_Pressed())
 800171c:	f001 fe7e 	bl	800341c <TP_Touchpad_Pressed>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d05a      	beq.n	80017dc <main+0xec4>
	          {

	  					uint16_t x_pos = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
	  					uint16_t y_pos = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2


	  					HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_SET);
 8001732:	2201      	movs	r2, #1
 8001734:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001738:	4833      	ldr	r0, [pc, #204]	@ (8001808 <main+0xef0>)
 800173a:	f002 f9b9 	bl	8003ab0 <HAL_GPIO_WritePin>

	            uint16_t position_array[2];

	  					if(TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 800173e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001742:	4618      	mov	r0, r3
 8001744:	f001 fda8 	bl	8003298 <TP_Read_Coordinates>
 8001748:	4603      	mov	r3, r0
 800174a:	2b01      	cmp	r3, #1
 800174c:	d13d      	bne.n	80017ca <main+0xeb2>
	  					{
	  					x_pos = position_array[0];
 800174e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001752:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
	  					y_pos = position_array[1];
 8001756:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800175a:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
	  					ILI9341_Draw_Filled_Circle(x_pos, y_pos, 2, BLACK);
 800175e:	f8b7 10e2 	ldrh.w	r1, [r7, #226]	@ 0xe2
 8001762:	f8b7 00e4 	ldrh.w	r0, [r7, #228]	@ 0xe4
 8001766:	2300      	movs	r3, #0
 8001768:	2202      	movs	r2, #2
 800176a:	f000 fc92 	bl	8002092 <ILI9341_Draw_Filled_Circle>

	  					ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800176e:	2001      	movs	r0, #1
 8001770:	f001 f940 	bl	80029f4 <ILI9341_Set_Rotation>
	  					char counter_buff[30];
	  					sprintf(counter_buff, "POS X: %.3d", x_pos);
 8001774:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	@ 0xe4
 8001778:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800177c:	4923      	ldr	r1, [pc, #140]	@ (800180c <main+0xef4>)
 800177e:	4618      	mov	r0, r3
 8001780:	f005 fba4 	bl	8006ecc <siprintf>
	  					ILI9341_Draw_Text(counter_buff, 10, 80, BLACK, 2, WHITE);
 8001784:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001788:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	2302      	movs	r3, #2
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2300      	movs	r3, #0
 8001794:	2250      	movs	r2, #80	@ 0x50
 8001796:	210a      	movs	r1, #10
 8001798:	f000 fe7c 	bl	8002494 <ILI9341_Draw_Text>
	  					sprintf(counter_buff, "POS Y: %.3d", y_pos);
 800179c:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	@ 0xe2
 80017a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017a4:	491a      	ldr	r1, [pc, #104]	@ (8001810 <main+0xef8>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f005 fb90 	bl	8006ecc <siprintf>
	  					ILI9341_Draw_Text(counter_buff, 10, 120, BLACK, 2, WHITE);
 80017ac:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80017b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	2302      	movs	r3, #2
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2300      	movs	r3, #0
 80017bc:	2278      	movs	r2, #120	@ 0x78
 80017be:	210a      	movs	r1, #10
 80017c0:	f000 fe68 	bl	8002494 <ILI9341_Draw_Text>
	  					ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80017c4:	2000      	movs	r0, #0
 80017c6:	f001 f915 	bl	80029f4 <ILI9341_Set_Rotation>
	  					}

	  					ILI9341_Draw_Pixel(x_pos, y_pos, BLACK);
 80017ca:	f8b7 10e2 	ldrh.w	r1, [r7, #226]	@ 0xe2
 80017ce:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	@ 0xe4
 80017d2:	2200      	movs	r2, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f001 fb3d 	bl	8002e54 <ILI9341_Draw_Pixel>
 80017da:	e79c      	b.n	8001716 <main+0xdfe>

	          }
	  			else
	  			{
	  				HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80017e2:	4809      	ldr	r0, [pc, #36]	@ (8001808 <main+0xef0>)
 80017e4:	f002 f964 	bl	8003ab0 <HAL_GPIO_WritePin>
	  			HAL_Delay(20);
 80017e8:	e795      	b.n	8001716 <main+0xdfe>
 80017ea:	bf00      	nop
 80017ec:	cccccccd 	.word	0xcccccccd
 80017f0:	200001f4 	.word	0x200001f4
 80017f4:	08009230 	.word	0x08009230
 80017f8:	0800923c 	.word	0x0800923c
 80017fc:	08009278 	.word	0x08009278
 8001800:	08009244 	.word	0x08009244
 8001804:	08009250 	.word	0x08009250
 8001808:	40020400 	.word	0x40020400
 800180c:	08009260 	.word	0x08009260
 8001810:	0800926c 	.word	0x0800926c

08001814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b0b8      	sub	sp, #224	@ 0xe0
 8001818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800181e:	2234      	movs	r2, #52	@ 0x34
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f005 fbb5 	bl	8006f92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001828:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001838:	f107 0308 	add.w	r3, r7, #8
 800183c:	2290      	movs	r2, #144	@ 0x90
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f005 fba6 	bl	8006f92 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001846:	f002 f94d 	bl	8003ae4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	4b3b      	ldr	r3, [pc, #236]	@ (8001938 <SystemClock_Config+0x124>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	4a3a      	ldr	r2, [pc, #232]	@ (8001938 <SystemClock_Config+0x124>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001854:	6413      	str	r3, [r2, #64]	@ 0x40
 8001856:	4b38      	ldr	r3, [pc, #224]	@ (8001938 <SystemClock_Config+0x124>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001862:	4b36      	ldr	r3, [pc, #216]	@ (800193c <SystemClock_Config+0x128>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a35      	ldr	r2, [pc, #212]	@ (800193c <SystemClock_Config+0x128>)
 8001868:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	4b33      	ldr	r3, [pc, #204]	@ (800193c <SystemClock_Config+0x128>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800187a:	2301      	movs	r3, #1
 800187c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001880:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001884:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001888:	2302      	movs	r3, #2
 800188a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800188e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001892:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001896:	2304      	movs	r3, #4
 8001898:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 800189c:	23c8      	movs	r3, #200	@ 0xc8
 800189e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018a2:	2302      	movs	r3, #2
 80018a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80018a8:	2309      	movs	r3, #9
 80018aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018ae:	2302      	movs	r3, #2
 80018b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80018b8:	4618      	mov	r0, r3
 80018ba:	f002 f973 	bl	8003ba4 <HAL_RCC_OscConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80018c4:	f000 f83e 	bl	8001944 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018c8:	f002 f91c 	bl	8003b04 <HAL_PWREx_EnableOverDrive>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018d2:	f000 f837 	bl	8001944 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d6:	230f      	movs	r3, #15
 80018d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018dc:	2302      	movs	r3, #2
 80018de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80018f8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80018fc:	2106      	movs	r1, #6
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 fbfe 	bl	8004100 <HAL_RCC_ClockConfig>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800190a:	f000 f81b 	bl	8001944 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800190e:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <SystemClock_Config+0x12c>)
 8001910:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001912:	2300      	movs	r3, #0
 8001914:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001916:	2300      	movs	r3, #0
 8001918:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800191c:	f107 0308 	add.w	r3, r7, #8
 8001920:	4618      	mov	r0, r3
 8001922:	f002 fe13 	bl	800454c <HAL_RCCEx_PeriphCLKConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 800192c:	f000 f80a 	bl	8001944 <Error_Handler>
  }
}
 8001930:	bf00      	nop
 8001932:	37e0      	adds	r7, #224	@ 0xe0
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40023800 	.word	0x40023800
 800193c:	40007000 	.word	0x40007000
 8001940:	00200100 	.word	0x00200100

08001944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <Error_Handler+0x4>

0800194c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <MX_RNG_Init+0x20>)
 8001952:	4a07      	ldr	r2, [pc, #28]	@ (8001970 <MX_RNG_Init+0x24>)
 8001954:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001956:	4805      	ldr	r0, [pc, #20]	@ (800196c <MX_RNG_Init+0x20>)
 8001958:	f003 fa20 	bl	8004d9c <HAL_RNG_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001962:	f7ff ffef 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200001f8 	.word	0x200001f8
 8001970:	50060800 	.word	0x50060800

08001974 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <HAL_RNG_MspInit+0x38>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d10b      	bne.n	800199e <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001986:	4b0a      	ldr	r3, [pc, #40]	@ (80019b0 <HAL_RNG_MspInit+0x3c>)
 8001988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800198a:	4a09      	ldr	r2, [pc, #36]	@ (80019b0 <HAL_RNG_MspInit+0x3c>)
 800198c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001990:	6353      	str	r3, [r2, #52]	@ 0x34
 8001992:	4b07      	ldr	r3, [pc, #28]	@ (80019b0 <HAL_RNG_MspInit+0x3c>)
 8001994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	50060800 	.word	0x50060800
 80019b0:	40023800 	.word	0x40023800

080019b4 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80019b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a28 <MX_SPI5_Init+0x74>)
 80019ba:	4a1c      	ldr	r2, [pc, #112]	@ (8001a2c <MX_SPI5_Init+0x78>)
 80019bc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80019be:	4b1a      	ldr	r3, [pc, #104]	@ (8001a28 <MX_SPI5_Init+0x74>)
 80019c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019c4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80019c6:	4b18      	ldr	r3, [pc, #96]	@ (8001a28 <MX_SPI5_Init+0x74>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80019cc:	4b16      	ldr	r3, [pc, #88]	@ (8001a28 <MX_SPI5_Init+0x74>)
 80019ce:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80019d2:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019d4:	4b14      	ldr	r3, [pc, #80]	@ (8001a28 <MX_SPI5_Init+0x74>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019da:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <MX_SPI5_Init+0x74>)
 80019dc:	2200      	movs	r2, #0
 80019de:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80019e0:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <MX_SPI5_Init+0x74>)
 80019e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019e6:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <MX_SPI5_Init+0x74>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <MX_SPI5_Init+0x74>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <MX_SPI5_Init+0x74>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <MX_SPI5_Init+0x74>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001a00:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <MX_SPI5_Init+0x74>)
 8001a02:	2207      	movs	r2, #7
 8001a04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a06:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <MX_SPI5_Init+0x74>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <MX_SPI5_Init+0x74>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001a12:	4805      	ldr	r0, [pc, #20]	@ (8001a28 <MX_SPI5_Init+0x74>)
 8001a14:	f003 fa50 	bl	8004eb8 <HAL_SPI_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001a1e:	f7ff ff91 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000208 	.word	0x20000208
 8001a2c:	40015000 	.word	0x40015000

08001a30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	@ 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a17      	ldr	r2, [pc, #92]	@ (8001aac <HAL_SPI_MspInit+0x7c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d128      	bne.n	8001aa4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001a52:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <HAL_SPI_MspInit+0x80>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	4a16      	ldr	r2, [pc, #88]	@ (8001ab0 <HAL_SPI_MspInit+0x80>)
 8001a58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a5e:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <HAL_SPI_MspInit+0x80>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a6a:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <HAL_SPI_MspInit+0x80>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	4a10      	ldr	r2, [pc, #64]	@ (8001ab0 <HAL_SPI_MspInit+0x80>)
 8001a70:	f043 0320 	orr.w	r3, r3, #32
 8001a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a76:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab0 <HAL_SPI_MspInit+0x80>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	f003 0320 	and.w	r3, r3, #32
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001a82:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a90:	2303      	movs	r3, #3
 8001a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001a94:	2305      	movs	r3, #5
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4805      	ldr	r0, [pc, #20]	@ (8001ab4 <HAL_SPI_MspInit+0x84>)
 8001aa0:	f001 fe42 	bl	8003728 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	3728      	adds	r7, #40	@ 0x28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40015000 	.word	0x40015000
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40021400 	.word	0x40021400

08001ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	4b0f      	ldr	r3, [pc, #60]	@ (8001afc <HAL_MspInit+0x44>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8001afc <HAL_MspInit+0x44>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aca:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <HAL_MspInit+0x44>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <HAL_MspInit+0x44>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ada:	4a08      	ldr	r2, [pc, #32]	@ (8001afc <HAL_MspInit+0x44>)
 8001adc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ae0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ae2:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_MspInit+0x44>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800

08001b00 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b04:	f001 fce6 	bl	80034d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
	return 1;
 8001b10:	2301      	movs	r3, #1
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <_kill>:

int _kill(int pid, int sig)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b26:	f005 fa87 	bl	8007038 <__errno>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2216      	movs	r2, #22
 8001b2e:	601a      	str	r2, [r3, #0]
	return -1;
 8001b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <_exit>:

void _exit (int status)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ffe7 	bl	8001b1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b4e:	bf00      	nop
 8001b50:	e7fd      	b.n	8001b4e <_exit+0x12>

08001b52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b086      	sub	sp, #24
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	e00a      	b.n	8001b7a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b64:	f3af 8000 	nop.w
 8001b68:	4601      	mov	r1, r0
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	60ba      	str	r2, [r7, #8]
 8001b70:	b2ca      	uxtb	r2, r1
 8001b72:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3301      	adds	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	dbf0      	blt.n	8001b64 <_read+0x12>
	}

return len;
 8001b82:	687b      	ldr	r3, [r7, #4]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	e009      	b.n	8001bb2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	60ba      	str	r2, [r7, #8]
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	dbf1      	blt.n	8001b9e <_write+0x12>
	}
	return len;
 8001bba:	687b      	ldr	r3, [r7, #4]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <_close>:

int _close(int file)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	return -1;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bec:	605a      	str	r2, [r3, #4]
	return 0;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <_isatty>:

int _isatty(int file)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	return 1;
 8001c04:	2301      	movs	r3, #1
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b085      	sub	sp, #20
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
	return 0;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c34:	4a14      	ldr	r2, [pc, #80]	@ (8001c88 <_sbrk+0x5c>)
 8001c36:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <_sbrk+0x60>)
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c40:	4b13      	ldr	r3, [pc, #76]	@ (8001c90 <_sbrk+0x64>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c48:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <_sbrk+0x64>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	@ (8001c94 <_sbrk+0x68>)
 8001c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4e:	4b10      	ldr	r3, [pc, #64]	@ (8001c90 <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d207      	bcs.n	8001c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c5c:	f005 f9ec 	bl	8007038 <__errno>
 8001c60:	4603      	mov	r3, r0
 8001c62:	220c      	movs	r2, #12
 8001c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6a:	e009      	b.n	8001c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c6c:	4b08      	ldr	r3, [pc, #32]	@ (8001c90 <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c72:	4b07      	ldr	r3, [pc, #28]	@ (8001c90 <_sbrk+0x64>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	4a05      	ldr	r2, [pc, #20]	@ (8001c90 <_sbrk+0x64>)
 8001c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20080000 	.word	0x20080000
 8001c8c:	00000400 	.word	0x00000400
 8001c90:	2000026c 	.word	0x2000026c
 8001c94:	20000490 	.word	0x20000490

08001c98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c9c:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <SystemInit+0x5c>)
 8001c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ca2:	4a14      	ldr	r2, [pc, #80]	@ (8001cf4 <SystemInit+0x5c>)
 8001ca4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ca8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001cac:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <SystemInit+0x60>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a11      	ldr	r2, [pc, #68]	@ (8001cf8 <SystemInit+0x60>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <SystemInit+0x60>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf8 <SystemInit+0x60>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	490d      	ldr	r1, [pc, #52]	@ (8001cf8 <SystemInit+0x60>)
 8001cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001cfc <SystemInit+0x64>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001cca:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf8 <SystemInit+0x60>)
 8001ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8001d00 <SystemInit+0x68>)
 8001cce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001cd0:	4b09      	ldr	r3, [pc, #36]	@ (8001cf8 <SystemInit+0x60>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a08      	ldr	r2, [pc, #32]	@ (8001cf8 <SystemInit+0x60>)
 8001cd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <SystemInit+0x60>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ce2:	4b04      	ldr	r3, [pc, #16]	@ (8001cf4 <SystemInit+0x5c>)
 8001ce4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ce8:	609a      	str	r2, [r3, #8]
#endif
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	fef6ffff 	.word	0xfef6ffff
 8001d00:	24003010 	.word	0x24003010

08001d04 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0a:	f107 0310 	add.w	r3, r7, #16
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d22:	4b20      	ldr	r3, [pc, #128]	@ (8001da4 <MX_TIM1_Init+0xa0>)
 8001d24:	4a20      	ldr	r2, [pc, #128]	@ (8001da8 <MX_TIM1_Init+0xa4>)
 8001d26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20000-1;
 8001d28:	4b1e      	ldr	r3, [pc, #120]	@ (8001da4 <MX_TIM1_Init+0xa0>)
 8001d2a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001d2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d30:	4b1c      	ldr	r3, [pc, #112]	@ (8001da4 <MX_TIM1_Init+0xa0>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65536-1;
 8001d36:	4b1b      	ldr	r3, [pc, #108]	@ (8001da4 <MX_TIM1_Init+0xa0>)
 8001d38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d3e:	4b19      	ldr	r3, [pc, #100]	@ (8001da4 <MX_TIM1_Init+0xa0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d44:	4b17      	ldr	r3, [pc, #92]	@ (8001da4 <MX_TIM1_Init+0xa0>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4a:	4b16      	ldr	r3, [pc, #88]	@ (8001da4 <MX_TIM1_Init+0xa0>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d50:	4814      	ldr	r0, [pc, #80]	@ (8001da4 <MX_TIM1_Init+0xa0>)
 8001d52:	f003 fc2b 	bl	80055ac <HAL_TIM_Base_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001d5c:	f7ff fdf2 	bl	8001944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d66:	f107 0310 	add.w	r3, r7, #16
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	480d      	ldr	r0, [pc, #52]	@ (8001da4 <MX_TIM1_Init+0xa0>)
 8001d6e:	f003 fd0d 	bl	800578c <HAL_TIM_ConfigClockSource>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001d78:	f7ff fde4 	bl	8001944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d88:	1d3b      	adds	r3, r7, #4
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4805      	ldr	r0, [pc, #20]	@ (8001da4 <MX_TIM1_Init+0xa0>)
 8001d8e:	f003 fefd 	bl	8005b8c <HAL_TIMEx_MasterConfigSynchronization>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001d98:	f7ff fdd4 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	3720      	adds	r7, #32
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000270 	.word	0x20000270
 8001da8:	40010000 	.word	0x40010000

08001dac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0a      	ldr	r2, [pc, #40]	@ (8001de4 <HAL_TIM_Base_MspInit+0x38>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d10b      	bne.n	8001dd6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <HAL_TIM_Base_MspInit+0x3c>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc2:	4a09      	ldr	r2, [pc, #36]	@ (8001de8 <HAL_TIM_Base_MspInit+0x3c>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dca:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <HAL_TIM_Base_MspInit+0x3c>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40010000 	.word	0x40010000
 8001de8:	40023800 	.word	0x40023800

08001dec <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001df0:	4b14      	ldr	r3, [pc, #80]	@ (8001e44 <MX_USART3_UART_Init+0x58>)
 8001df2:	4a15      	ldr	r2, [pc, #84]	@ (8001e48 <MX_USART3_UART_Init+0x5c>)
 8001df4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001df6:	4b13      	ldr	r3, [pc, #76]	@ (8001e44 <MX_USART3_UART_Init+0x58>)
 8001df8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfe:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <MX_USART3_UART_Init+0x58>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e04:	4b0f      	ldr	r3, [pc, #60]	@ (8001e44 <MX_USART3_UART_Init+0x58>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <MX_USART3_UART_Init+0x58>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e10:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <MX_USART3_UART_Init+0x58>)
 8001e12:	220c      	movs	r2, #12
 8001e14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e16:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <MX_USART3_UART_Init+0x58>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e1c:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <MX_USART3_UART_Init+0x58>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e22:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <MX_USART3_UART_Init+0x58>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e28:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <MX_USART3_UART_Init+0x58>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e2e:	4805      	ldr	r0, [pc, #20]	@ (8001e44 <MX_USART3_UART_Init+0x58>)
 8001e30:	f003 ff3a 	bl	8005ca8 <HAL_UART_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e3a:	f7ff fd83 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200002bc 	.word	0x200002bc
 8001e48:	40004800 	.word	0x40004800

08001e4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	@ 0x28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a17      	ldr	r2, [pc, #92]	@ (8001ec8 <HAL_UART_MspInit+0x7c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d128      	bne.n	8001ec0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e6e:	4b17      	ldr	r3, [pc, #92]	@ (8001ecc <HAL_UART_MspInit+0x80>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	4a16      	ldr	r2, [pc, #88]	@ (8001ecc <HAL_UART_MspInit+0x80>)
 8001e74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e7a:	4b14      	ldr	r3, [pc, #80]	@ (8001ecc <HAL_UART_MspInit+0x80>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e86:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <HAL_UART_MspInit+0x80>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	4a10      	ldr	r2, [pc, #64]	@ (8001ecc <HAL_UART_MspInit+0x80>)
 8001e8c:	f043 0308 	orr.w	r3, r3, #8
 8001e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e92:	4b0e      	ldr	r3, [pc, #56]	@ (8001ecc <HAL_UART_MspInit+0x80>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001e9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001eb0:	2307      	movs	r3, #7
 8001eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4805      	ldr	r0, [pc, #20]	@ (8001ed0 <HAL_UART_MspInit+0x84>)
 8001ebc:	f001 fc34 	bl	8003728 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	3728      	adds	r7, #40	@ 0x28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40004800 	.word	0x40004800
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020c00 	.word	0x40020c00

08001ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ed4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ed8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001eda:	e003      	b.n	8001ee4 <LoopCopyDataInit>

08001edc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001edc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ede:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ee0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ee2:	3104      	adds	r1, #4

08001ee4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ee4:	480b      	ldr	r0, [pc, #44]	@ (8001f14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ee8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001eea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001eec:	d3f6      	bcc.n	8001edc <CopyDataInit>
  ldr  r2, =_sbss
 8001eee:	4a0b      	ldr	r2, [pc, #44]	@ (8001f1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ef0:	e002      	b.n	8001ef8 <LoopFillZerobss>

08001ef2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ef2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ef4:	f842 3b04 	str.w	r3, [r2], #4

08001ef8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ef8:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001efa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001efc:	d3f9      	bcc.n	8001ef2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001efe:	f7ff fecb 	bl	8001c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f02:	f005 f89f 	bl	8007044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f06:	f7fe fd07 	bl	8000918 <main>
  bx  lr    
 8001f0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f0c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001f10:	0802f050 	.word	0x0802f050
  ldr  r0, =_sdata
 8001f14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f18:	200001d8 	.word	0x200001d8
  ldr  r2, =_sbss
 8001f1c:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 8001f20:	20000490 	.word	0x20000490

08001f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f24:	e7fe      	b.n	8001f24 <ADC_IRQHandler>

08001f26 <ILI9341_Draw_Hollow_Circle>:
#include "5x5_font.h"
#include "spi.h"

/*Draw hollow circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Hollow_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8001f26:	b590      	push	{r4, r7, lr}
 8001f28:	b089      	sub	sp, #36	@ 0x24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	4604      	mov	r4, r0
 8001f2e:	4608      	mov	r0, r1
 8001f30:	4611      	mov	r1, r2
 8001f32:	461a      	mov	r2, r3
 8001f34:	4623      	mov	r3, r4
 8001f36:	80fb      	strh	r3, [r7, #6]
 8001f38:	4603      	mov	r3, r0
 8001f3a:	80bb      	strh	r3, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
 8001f40:	4613      	mov	r3, r2
 8001f42:	803b      	strh	r3, [r7, #0]
	int x = Radius-1;
 8001f44:	887b      	ldrh	r3, [r7, #2]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	61fb      	str	r3, [r7, #28]
    int y = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
    int dx = 1;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
    int dy = 1;
 8001f52:	2301      	movs	r3, #1
 8001f54:	613b      	str	r3, [r7, #16]
    int err = dx - (Radius << 1);
 8001f56:	887b      	ldrh	r3, [r7, #2]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	60fb      	str	r3, [r7, #12]

    while (x >= y)
 8001f60:	e08d      	b.n	800207e <ILI9341_Draw_Hollow_Circle+0x158>
    {
        ILI9341_Draw_Pixel(X + x, Y + y, Colour);
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	88fb      	ldrh	r3, [r7, #6]
 8001f68:	4413      	add	r3, r2
 8001f6a:	b298      	uxth	r0, r3
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	88bb      	ldrh	r3, [r7, #4]
 8001f72:	4413      	add	r3, r2
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	883a      	ldrh	r2, [r7, #0]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f000 ff6b 	bl	8002e54 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + y, Y + x, Colour);
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	4413      	add	r3, r2
 8001f86:	b298      	uxth	r0, r3
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	88bb      	ldrh	r3, [r7, #4]
 8001f8e:	4413      	add	r3, r2
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	883a      	ldrh	r2, [r7, #0]
 8001f94:	4619      	mov	r1, r3
 8001f96:	f000 ff5d 	bl	8002e54 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - y, Y + x, Colour);
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	88fa      	ldrh	r2, [r7, #6]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	b298      	uxth	r0, r3
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	88bb      	ldrh	r3, [r7, #4]
 8001faa:	4413      	add	r3, r2
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	883a      	ldrh	r2, [r7, #0]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f000 ff4f 	bl	8002e54 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - x, Y + y, Colour);
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	88fa      	ldrh	r2, [r7, #6]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	b298      	uxth	r0, r3
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	88bb      	ldrh	r3, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	883a      	ldrh	r2, [r7, #0]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f000 ff41 	bl	8002e54 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - x, Y - y, Colour);
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	88fa      	ldrh	r2, [r7, #6]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	b298      	uxth	r0, r3
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	88ba      	ldrh	r2, [r7, #4]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	883a      	ldrh	r2, [r7, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f000 ff33 	bl	8002e54 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - y, Y - x, Colour);
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	88fa      	ldrh	r2, [r7, #6]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	b298      	uxth	r0, r3
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	88ba      	ldrh	r2, [r7, #4]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	b29b      	uxth	r3, r3
 8002002:	883a      	ldrh	r2, [r7, #0]
 8002004:	4619      	mov	r1, r3
 8002006:	f000 ff25 	bl	8002e54 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + y, Y - x, Colour);
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	b29a      	uxth	r2, r3
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	4413      	add	r3, r2
 8002012:	b298      	uxth	r0, r3
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	b29b      	uxth	r3, r3
 8002018:	88ba      	ldrh	r2, [r7, #4]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	b29b      	uxth	r3, r3
 800201e:	883a      	ldrh	r2, [r7, #0]
 8002020:	4619      	mov	r1, r3
 8002022:	f000 ff17 	bl	8002e54 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + x, Y - y, Colour);
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	b29a      	uxth	r2, r3
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	4413      	add	r3, r2
 800202e:	b298      	uxth	r0, r3
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	b29b      	uxth	r3, r3
 8002034:	88ba      	ldrh	r2, [r7, #4]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	b29b      	uxth	r3, r3
 800203a:	883a      	ldrh	r2, [r7, #0]
 800203c:	4619      	mov	r1, r3
 800203e:	f000 ff09 	bl	8002e54 <ILI9341_Draw_Pixel>

        if (err <= 0)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	dc09      	bgt.n	800205c <ILI9341_Draw_Hollow_Circle+0x136>
        {
            y++;
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	3301      	adds	r3, #1
 800204c:	61bb      	str	r3, [r7, #24]
            err += dy;
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4413      	add	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
            dy += 2;
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	3302      	adds	r3, #2
 800205a:	613b      	str	r3, [r7, #16]
        }
        if (err > 0)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	dd0d      	ble.n	800207e <ILI9341_Draw_Hollow_Circle+0x158>
        {
            x--;
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3b01      	subs	r3, #1
 8002066:	61fb      	str	r3, [r7, #28]
            dx += 2;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	3302      	adds	r3, #2
 800206c:	617b      	str	r3, [r7, #20]
            err += (-Radius << 1) + dx;
 800206e:	887b      	ldrh	r3, [r7, #2]
 8002070:	425b      	negs	r3, r3
 8002072:	005a      	lsls	r2, r3, #1
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	4413      	add	r3, r2
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4413      	add	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
    while (x >= y)
 800207e:	69fa      	ldr	r2, [r7, #28]
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	429a      	cmp	r2, r3
 8002084:	f6bf af6d 	bge.w	8001f62 <ILI9341_Draw_Hollow_Circle+0x3c>
        }
    }
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	3724      	adds	r7, #36	@ 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd90      	pop	{r4, r7, pc}

08002092 <ILI9341_Draw_Filled_Circle>:

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8002092:	b590      	push	{r4, r7, lr}
 8002094:	b08b      	sub	sp, #44	@ 0x2c
 8002096:	af00      	add	r7, sp, #0
 8002098:	4604      	mov	r4, r0
 800209a:	4608      	mov	r0, r1
 800209c:	4611      	mov	r1, r2
 800209e:	461a      	mov	r2, r3
 80020a0:	4623      	mov	r3, r4
 80020a2:	80fb      	strh	r3, [r7, #6]
 80020a4:	4603      	mov	r3, r0
 80020a6:	80bb      	strh	r3, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	807b      	strh	r3, [r7, #2]
 80020ac:	4613      	mov	r3, r2
 80020ae:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80020b0:	887b      	ldrh	r3, [r7, #2]
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
    int y = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80020b8:	887b      	ldrh	r3, [r7, #2]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	f1c3 0301 	rsb	r3, r3, #1
 80020c0:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80020ca:	e061      	b.n	8002190 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80020cc:	88fa      	ldrh	r2, [r7, #6]
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	e018      	b.n	8002108 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	b298      	uxth	r0, r3
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	b29a      	uxth	r2, r3
 80020de:	88bb      	ldrh	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	883a      	ldrh	r2, [r7, #0]
 80020e6:	4619      	mov	r1, r3
 80020e8:	f000 feb4 	bl	8002e54 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	b298      	uxth	r0, r3
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	88ba      	ldrh	r2, [r7, #4]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	883a      	ldrh	r2, [r7, #0]
 80020fc:	4619      	mov	r1, r3
 80020fe:	f000 fea9 	bl	8002e54 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	3301      	adds	r3, #1
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	88fa      	ldrh	r2, [r7, #6]
 800210a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210c:	4413      	add	r3, r2
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	429a      	cmp	r2, r3
 8002112:	dde0      	ble.n	80020d6 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8002114:	88fa      	ldrh	r2, [r7, #6]
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	e018      	b.n	8002150 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	b298      	uxth	r0, r3
 8002122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002124:	b29a      	uxth	r2, r3
 8002126:	88bb      	ldrh	r3, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	b29b      	uxth	r3, r3
 800212c:	883a      	ldrh	r2, [r7, #0]
 800212e:	4619      	mov	r1, r3
 8002130:	f000 fe90 	bl	8002e54 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	b298      	uxth	r0, r3
 8002138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213a:	b29b      	uxth	r3, r3
 800213c:	88ba      	ldrh	r2, [r7, #4]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	b29b      	uxth	r3, r3
 8002142:	883a      	ldrh	r2, [r7, #0]
 8002144:	4619      	mov	r1, r3
 8002146:	f000 fe85 	bl	8002e54 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	3301      	adds	r3, #1
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	88fa      	ldrh	r2, [r7, #6]
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	4413      	add	r3, r2
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	429a      	cmp	r2, r3
 800215a:	dde0      	ble.n	800211e <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	3301      	adds	r3, #1
 8002160:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	4413      	add	r3, r2
 8002168:	617b      	str	r3, [r7, #20]
        yChange += 2;
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	3302      	adds	r3, #2
 800216e:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	005a      	lsls	r2, r3, #1
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	4413      	add	r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	dd09      	ble.n	8002190 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 800217c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217e:	3b01      	subs	r3, #1
 8002180:	627b      	str	r3, [r7, #36]	@ 0x24
            radiusError += xChange;
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	4413      	add	r3, r2
 8002188:	617b      	str	r3, [r7, #20]
            xChange += 2;
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3302      	adds	r3, #2
 800218e:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8002190:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	429a      	cmp	r2, r3
 8002196:	da99      	bge.n	80020cc <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	372c      	adds	r7, #44	@ 0x2c
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd90      	pop	{r4, r7, pc}

080021a2 <ILI9341_Draw_Hollow_Rectangle_Coord>:

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 80021a2:	b590      	push	{r4, r7, lr}
 80021a4:	b087      	sub	sp, #28
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	4604      	mov	r4, r0
 80021aa:	4608      	mov	r0, r1
 80021ac:	4611      	mov	r1, r2
 80021ae:	461a      	mov	r2, r3
 80021b0:	4623      	mov	r3, r4
 80021b2:	80fb      	strh	r3, [r7, #6]
 80021b4:	4603      	mov	r3, r0
 80021b6:	80bb      	strh	r3, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	807b      	strh	r3, [r7, #2]
 80021bc:	4613      	mov	r3, r2
 80021be:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	ee07 3a90 	vmov	s15, r3
 80021e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e4:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 80021e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80021ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f4:	d501      	bpl.n	80021fa <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 80021f6:	2301      	movs	r3, #1
 80021f8:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 80021fa:	f04f 0300 	mov.w	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 8002200:	883a      	ldrh	r2, [r7, #0]
 8002202:	88bb      	ldrh	r3, [r7, #4]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	ee07 3a90 	vmov	s15, r3
 800220a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800220e:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 8002212:	edd7 7a03 	vldr	s15, [r7, #12]
 8002216:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800221a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221e:	d501      	bpl.n	8002224 <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 8002220:	2301      	movs	r3, #1
 8002222:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d104      	bne.n	8002234 <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 800222a:	887a      	ldrh	r2, [r7, #2]
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	82fb      	strh	r3, [r7, #22]
 8002232:	e003      	b.n	800223c <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 8002234:	88fa      	ldrh	r2, [r7, #6]
 8002236:	887b      	ldrh	r3, [r7, #2]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 800223c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800223e:	8afa      	ldrh	r2, [r7, #22]
 8002240:	88b9      	ldrh	r1, [r7, #4]
 8002242:	88f8      	ldrh	r0, [r7, #6]
 8002244:	f000 ff3c 	bl	80030c0 <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8002248:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800224a:	8afa      	ldrh	r2, [r7, #22]
 800224c:	8839      	ldrh	r1, [r7, #0]
 800224e:	88f8      	ldrh	r0, [r7, #6]
 8002250:	f000 ff36 	bl	80030c0 <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8002254:	7cbb      	ldrb	r3, [r7, #18]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d104      	bne.n	8002264 <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 800225a:	883a      	ldrh	r2, [r7, #0]
 800225c:	88bb      	ldrh	r3, [r7, #4]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	82bb      	strh	r3, [r7, #20]
 8002262:	e003      	b.n	800226c <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 8002264:	88ba      	ldrh	r2, [r7, #4]
 8002266:	883b      	ldrh	r3, [r7, #0]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 800226c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800226e:	8aba      	ldrh	r2, [r7, #20]
 8002270:	88b9      	ldrh	r1, [r7, #4]
 8002272:	88f8      	ldrh	r0, [r7, #6]
 8002274:	f000 ff68 	bl	8003148 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8002278:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800227a:	8aba      	ldrh	r2, [r7, #20]
 800227c:	88b9      	ldrh	r1, [r7, #4]
 800227e:	8878      	ldrh	r0, [r7, #2]
 8002280:	f000 ff62 	bl	8003148 <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 8002284:	8afb      	ldrh	r3, [r7, #22]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d102      	bne.n	8002290 <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 800228a:	8abb      	ldrh	r3, [r7, #20]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8002290:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002292:	8839      	ldrh	r1, [r7, #0]
 8002294:	887b      	ldrh	r3, [r7, #2]
 8002296:	4618      	mov	r0, r3
 8002298:	f000 fddc 	bl	8002e54 <ILI9341_Draw_Pixel>
	}
	
}
 800229c:	bf00      	nop
 800229e:	371c      	adds	r7, #28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd90      	pop	{r4, r7, pc}

080022a4 <ILI9341_Draw_Filled_Rectangle_Coord>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 80022a4:	b590      	push	{r4, r7, lr}
 80022a6:	b089      	sub	sp, #36	@ 0x24
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	4604      	mov	r4, r0
 80022ac:	4608      	mov	r0, r1
 80022ae:	4611      	mov	r1, r2
 80022b0:	461a      	mov	r2, r3
 80022b2:	4623      	mov	r3, r4
 80022b4:	80fb      	strh	r3, [r7, #6]
 80022b6:	4603      	mov	r3, r0
 80022b8:	80bb      	strh	r3, [r7, #4]
 80022ba:	460b      	mov	r3, r1
 80022bc:	807b      	strh	r3, [r7, #2]
 80022be:	4613      	mov	r3, r2
 80022c0:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 80022de:	887a      	ldrh	r2, [r7, #2]
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	da01      	bge.n	80022f0 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 80022ec:	2301      	movs	r3, #1
 80022ee:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 80022f4:	883a      	ldrh	r2, [r7, #0]
 80022f6:	88bb      	ldrh	r3, [r7, #4]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	da01      	bge.n	8002306 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8002302:	2301      	movs	r3, #1
 8002304:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8002306:	7cfb      	ldrb	r3, [r7, #19]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d106      	bne.n	800231a <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 800230c:	887a      	ldrh	r2, [r7, #2]
 800230e:	88fb      	ldrh	r3, [r7, #6]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	823b      	strh	r3, [r7, #16]
 8002318:	e005      	b.n	8002326 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 800231a:	88fa      	ldrh	r2, [r7, #6]
 800231c:	887b      	ldrh	r3, [r7, #2]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8002326:	7cbb      	ldrb	r3, [r7, #18]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d106      	bne.n	800233a <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 800232c:	883a      	ldrh	r2, [r7, #0]
 800232e:	88bb      	ldrh	r3, [r7, #4]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 8002334:	88bb      	ldrh	r3, [r7, #4]
 8002336:	81fb      	strh	r3, [r7, #14]
 8002338:	e005      	b.n	8002346 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 800233a:	88ba      	ldrh	r2, [r7, #4]
 800233c:	883b      	ldrh	r3, [r7, #0]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 8002342:	883b      	ldrh	r3, [r7, #0]
 8002344:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8002346:	8abc      	ldrh	r4, [r7, #20]
 8002348:	8afa      	ldrh	r2, [r7, #22]
 800234a:	89f9      	ldrh	r1, [r7, #14]
 800234c:	8a38      	ldrh	r0, [r7, #16]
 800234e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	4623      	mov	r3, r4
 8002354:	f000 fe58 	bl	8003008 <ILI9341_Draw_Rectangle>
}
 8002358:	bf00      	nop
 800235a:	371c      	adds	r7, #28
 800235c:	46bd      	mov	sp, r7
 800235e:	bd90      	pop	{r4, r7, pc}

08002360 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8002360:	b590      	push	{r4, r7, lr}
 8002362:	b089      	sub	sp, #36	@ 0x24
 8002364:	af02      	add	r7, sp, #8
 8002366:	4604      	mov	r4, r0
 8002368:	4608      	mov	r0, r1
 800236a:	4611      	mov	r1, r2
 800236c:	461a      	mov	r2, r3
 800236e:	4623      	mov	r3, r4
 8002370:	71fb      	strb	r3, [r7, #7]
 8002372:	4603      	mov	r3, r0
 8002374:	71bb      	strb	r3, [r7, #6]
 8002376:	460b      	mov	r3, r1
 8002378:	717b      	strb	r3, [r7, #5]
 800237a:	4613      	mov	r3, r2
 800237c:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8002382:	7dfb      	ldrb	r3, [r7, #23]
 8002384:	2b1f      	cmp	r3, #31
 8002386:	d802      	bhi.n	800238e <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	71fb      	strb	r3, [r7, #7]
 800238c:	e002      	b.n	8002394 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 800238e:	7dfb      	ldrb	r3, [r7, #23]
 8002390:	3b20      	subs	r3, #32
 8002392:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8002394:	2300      	movs	r3, #0
 8002396:	753b      	strb	r3, [r7, #20]
 8002398:	e012      	b.n	80023c0 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 800239a:	7dfa      	ldrb	r2, [r7, #23]
 800239c:	7d38      	ldrb	r0, [r7, #20]
 800239e:	7d39      	ldrb	r1, [r7, #20]
 80023a0:	4c3b      	ldr	r4, [pc, #236]	@ (8002490 <ILI9341_Draw_Char+0x130>)
 80023a2:	4613      	mov	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4423      	add	r3, r4
 80023ac:	4403      	add	r3, r0
 80023ae:	781a      	ldrb	r2, [r3, #0]
 80023b0:	f101 0318 	add.w	r3, r1, #24
 80023b4:	443b      	add	r3, r7
 80023b6:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80023ba:	7d3b      	ldrb	r3, [r7, #20]
 80023bc:	3301      	adds	r3, #1
 80023be:	753b      	strb	r3, [r7, #20]
 80023c0:	7d3b      	ldrb	r3, [r7, #20]
 80023c2:	2b05      	cmp	r3, #5
 80023c4:	d9e9      	bls.n	800239a <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80023c6:	79bb      	ldrb	r3, [r7, #6]
 80023c8:	b298      	uxth	r0, r3
 80023ca:	797b      	ldrb	r3, [r7, #5]
 80023cc:	b299      	uxth	r1, r3
 80023ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80023d0:	461a      	mov	r2, r3
 80023d2:	0052      	lsls	r2, r2, #1
 80023d4:	4413      	add	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	b29a      	uxth	r2, r3
 80023da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	b29c      	uxth	r4, r3
 80023e0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	4623      	mov	r3, r4
 80023e6:	f000 fe0f 	bl	8003008 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 80023ea:	2300      	movs	r3, #0
 80023ec:	757b      	strb	r3, [r7, #21]
 80023ee:	e047      	b.n	8002480 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80023f0:	2300      	movs	r3, #0
 80023f2:	75bb      	strb	r3, [r7, #22]
 80023f4:	e03e      	b.n	8002474 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 80023f6:	7d7b      	ldrb	r3, [r7, #21]
 80023f8:	3318      	adds	r3, #24
 80023fa:	443b      	add	r3, r7
 80023fc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002400:	461a      	mov	r2, r3
 8002402:	7dbb      	ldrb	r3, [r7, #22]
 8002404:	fa42 f303 	asr.w	r3, r2, r3
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d02e      	beq.n	800246e <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8002410:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002412:	2b01      	cmp	r3, #1
 8002414:	d110      	bne.n	8002438 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8002416:	79bb      	ldrb	r3, [r7, #6]
 8002418:	b29a      	uxth	r2, r3
 800241a:	7d7b      	ldrb	r3, [r7, #21]
 800241c:	b29b      	uxth	r3, r3
 800241e:	4413      	add	r3, r2
 8002420:	b298      	uxth	r0, r3
 8002422:	797b      	ldrb	r3, [r7, #5]
 8002424:	b29a      	uxth	r2, r3
 8002426:	7dbb      	ldrb	r3, [r7, #22]
 8002428:	b29b      	uxth	r3, r3
 800242a:	4413      	add	r3, r2
 800242c:	b29b      	uxth	r3, r3
 800242e:	887a      	ldrh	r2, [r7, #2]
 8002430:	4619      	mov	r1, r3
 8002432:	f000 fd0f 	bl	8002e54 <ILI9341_Draw_Pixel>
 8002436:	e01a      	b.n	800246e <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8002438:	79bb      	ldrb	r3, [r7, #6]
 800243a:	b29a      	uxth	r2, r3
 800243c:	7d7b      	ldrb	r3, [r7, #21]
 800243e:	b29b      	uxth	r3, r3
 8002440:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8002442:	fb11 f303 	smulbb	r3, r1, r3
 8002446:	b29b      	uxth	r3, r3
 8002448:	4413      	add	r3, r2
 800244a:	b298      	uxth	r0, r3
 800244c:	797b      	ldrb	r3, [r7, #5]
 800244e:	b29a      	uxth	r2, r3
 8002450:	7dbb      	ldrb	r3, [r7, #22]
 8002452:	b29b      	uxth	r3, r3
 8002454:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8002456:	fb11 f303 	smulbb	r3, r1, r3
 800245a:	b29b      	uxth	r3, r3
 800245c:	4413      	add	r3, r2
 800245e:	b299      	uxth	r1, r3
 8002460:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8002462:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002464:	887b      	ldrh	r3, [r7, #2]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	4623      	mov	r3, r4
 800246a:	f000 fdcd 	bl	8003008 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800246e:	7dbb      	ldrb	r3, [r7, #22]
 8002470:	3301      	adds	r3, #1
 8002472:	75bb      	strb	r3, [r7, #22]
 8002474:	7dbb      	ldrb	r3, [r7, #22]
 8002476:	2b07      	cmp	r3, #7
 8002478:	d9bd      	bls.n	80023f6 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 800247a:	7d7b      	ldrb	r3, [r7, #21]
 800247c:	3301      	adds	r3, #1
 800247e:	757b      	strb	r3, [r7, #21]
 8002480:	7d7b      	ldrb	r3, [r7, #21]
 8002482:	2b05      	cmp	r3, #5
 8002484:	d9b4      	bls.n	80023f0 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8002486:	bf00      	nop
 8002488:	bf00      	nop
 800248a:	371c      	adds	r7, #28
 800248c:	46bd      	mov	sp, r7
 800248e:	bd90      	pop	{r4, r7, pc}
 8002490:	0802ea90 	.word	0x0802ea90

08002494 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8002494:	b590      	push	{r4, r7, lr}
 8002496:	b085      	sub	sp, #20
 8002498:	af02      	add	r7, sp, #8
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	4608      	mov	r0, r1
 800249e:	4611      	mov	r1, r2
 80024a0:	461a      	mov	r2, r3
 80024a2:	4603      	mov	r3, r0
 80024a4:	70fb      	strb	r3, [r7, #3]
 80024a6:	460b      	mov	r3, r1
 80024a8:	70bb      	strb	r3, [r7, #2]
 80024aa:	4613      	mov	r3, r2
 80024ac:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80024ae:	e017      	b.n	80024e0 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	7818      	ldrb	r0, [r3, #0]
 80024b8:	883c      	ldrh	r4, [r7, #0]
 80024ba:	78ba      	ldrb	r2, [r7, #2]
 80024bc:	78f9      	ldrb	r1, [r7, #3]
 80024be:	8bbb      	ldrh	r3, [r7, #28]
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	8b3b      	ldrh	r3, [r7, #24]
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	4623      	mov	r3, r4
 80024c8:	f7ff ff4a 	bl	8002360 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80024cc:	8b3b      	ldrh	r3, [r7, #24]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	0052      	lsls	r2, r2, #1
 80024d4:	4413      	add	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	4413      	add	r3, r2
 80024de:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1e3      	bne.n	80024b0 <ILI9341_Draw_Text+0x1c>
    }
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd90      	pop	{r4, r7, pc}
	...

080024f4 <ILI9341_Draw_Image>:

/*Draws a full screen picture from flash. Image converted from RGB .jpeg/other to C array using online converter*/
//USING CONVERTER: http://www.digole.com/tools/PicturetoC_Hex_converter.php
//65K colour (2Bytes / Pixel)
void ILI9341_Draw_Image(const char* Image_Array, uint8_t Orientation)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8002500:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8002504:	6018      	str	r0, [r3, #0]
 8002506:	460a      	mov	r2, r1
 8002508:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800250c:	f2a3 232d 	subw	r3, r3, #557	@ 0x22d
 8002510:	701a      	strb	r2, [r3, #0]
	if(Orientation == SCREEN_HORIZONTAL_1)
 8002512:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8002516:	f2a3 232d 	subw	r3, r3, #557	@ 0x22d
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d15e      	bne.n	80025de <ILI9341_Draw_Image+0xea>
	{
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8002520:	2001      	movs	r0, #1
 8002522:	f000 fa67 	bl	80029f4 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8002526:	23f0      	movs	r3, #240	@ 0xf0
 8002528:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800252c:	2100      	movs	r1, #0
 800252e:	2000      	movs	r0, #0
 8002530:	f000 f9f6 	bl	8002920 <ILI9341_Set_Address>
			
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002534:	2201      	movs	r2, #1
 8002536:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800253a:	48c4      	ldr	r0, [pc, #784]	@ (800284c <ILI9341_Draw_Image+0x358>)
 800253c:	f001 fab8 	bl	8003ab0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002540:	2200      	movs	r2, #0
 8002542:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002546:	48c1      	ldr	r0, [pc, #772]	@ (800284c <ILI9341_Draw_Image+0x358>)
 8002548:	f001 fab2 	bl	8003ab0 <HAL_GPIO_WritePin>
		
		unsigned char Temp_small_buffer[BURST_MAX_SIZE];
		uint32_t counter = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002552:	2300      	movs	r3, #0
 8002554:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8002558:	e035      	b.n	80025c6 <ILI9341_Draw_Image+0xd2>
		{			
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 800255a:	2300      	movs	r3, #0
 800255c:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8002560:	e019      	b.n	8002596 <ILI9341_Draw_Image+0xa2>
				{
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002562:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8002566:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 800256a:	4413      	add	r3, r2
 800256c:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8002570:	f5a2 720b 	sub.w	r2, r2, #556	@ 0x22c
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	4413      	add	r3, r2
 8002578:	7819      	ldrb	r1, [r3, #0]
 800257a:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800257e:	f5a3 7209 	sub.w	r2, r3, #548	@ 0x224
 8002582:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8002586:	4413      	add	r3, r2
 8002588:	460a      	mov	r2, r1
 800258a:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 800258c:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8002590:	3301      	adds	r3, #1
 8002592:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8002596:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 800259a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800259e:	d3e0      	bcc.n	8002562 <ILI9341_Draw_Image+0x6e>
				}						
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 80025a0:	f107 010c 	add.w	r1, r7, #12
 80025a4:	230a      	movs	r3, #10
 80025a6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80025aa:	48a9      	ldr	r0, [pc, #676]	@ (8002850 <ILI9341_Draw_Image+0x35c>)
 80025ac:	f002 fd2f 	bl	800500e <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 80025b0:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 80025b4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80025b8:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80025bc:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 80025c0:	3301      	adds	r3, #1
 80025c2:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 80025c6:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 80025ca:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 80025ce:	d9c4      	bls.n	800255a <ILI9341_Draw_Image+0x66>
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80025d0:	2201      	movs	r2, #1
 80025d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025d6:	489d      	ldr	r0, [pc, #628]	@ (800284c <ILI9341_Draw_Image+0x358>)
 80025d8:	f001 fa6a 	bl	8003ab0 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
				counter += BURST_MAX_SIZE;			
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	}
}
 80025dc:	e130      	b.n	8002840 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_HORIZONTAL_2)
 80025de:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80025e2:	f2a3 232d 	subw	r3, r3, #557	@ 0x22d
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d15e      	bne.n	80026aa <ILI9341_Draw_Image+0x1b6>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80025ec:	2003      	movs	r0, #3
 80025ee:	f000 fa01 	bl	80029f4 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 80025f2:	23f0      	movs	r3, #240	@ 0xf0
 80025f4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80025f8:	2100      	movs	r1, #0
 80025fa:	2000      	movs	r0, #0
 80025fc:	f000 f990 	bl	8002920 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002600:	2201      	movs	r2, #1
 8002602:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002606:	4891      	ldr	r0, [pc, #580]	@ (800284c <ILI9341_Draw_Image+0x358>)
 8002608:	f001 fa52 	bl	8003ab0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800260c:	2200      	movs	r2, #0
 800260e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002612:	488e      	ldr	r0, [pc, #568]	@ (800284c <ILI9341_Draw_Image+0x358>)
 8002614:	f001 fa4c 	bl	8003ab0 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 800261e:	2300      	movs	r3, #0
 8002620:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002624:	e035      	b.n	8002692 <ILI9341_Draw_Image+0x19e>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002626:	2300      	movs	r3, #0
 8002628:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 800262c:	e019      	b.n	8002662 <ILI9341_Draw_Image+0x16e>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 800262e:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8002632:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8002636:	4413      	add	r3, r2
 8002638:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 800263c:	f5a2 720b 	sub.w	r2, r2, #556	@ 0x22c
 8002640:	6812      	ldr	r2, [r2, #0]
 8002642:	4413      	add	r3, r2
 8002644:	7819      	ldrb	r1, [r3, #0]
 8002646:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800264a:	f5a3 7209 	sub.w	r2, r3, #548	@ 0x224
 800264e:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8002652:	4413      	add	r3, r2
 8002654:	460a      	mov	r2, r1
 8002656:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002658:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 800265c:	3301      	adds	r3, #1
 800265e:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8002662:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8002666:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800266a:	d3e0      	bcc.n	800262e <ILI9341_Draw_Image+0x13a>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 800266c:	f107 010c 	add.w	r1, r7, #12
 8002670:	230a      	movs	r3, #10
 8002672:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002676:	4876      	ldr	r0, [pc, #472]	@ (8002850 <ILI9341_Draw_Image+0x35c>)
 8002678:	f002 fcc9 	bl	800500e <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 800267c:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8002680:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002684:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002688:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800268c:	3301      	adds	r3, #1
 800268e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002692:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002696:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 800269a:	d9c4      	bls.n	8002626 <ILI9341_Draw_Image+0x132>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800269c:	2201      	movs	r2, #1
 800269e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026a2:	486a      	ldr	r0, [pc, #424]	@ (800284c <ILI9341_Draw_Image+0x358>)
 80026a4:	f001 fa04 	bl	8003ab0 <HAL_GPIO_WritePin>
}
 80026a8:	e0ca      	b.n	8002840 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_2)
 80026aa:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80026ae:	f2a3 232d 	subw	r3, r3, #557	@ 0x22d
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d15e      	bne.n	8002776 <ILI9341_Draw_Image+0x282>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
 80026b8:	2002      	movs	r0, #2
 80026ba:	f000 f99b 	bl	80029f4 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 80026be:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80026c2:	22f0      	movs	r2, #240	@ 0xf0
 80026c4:	2100      	movs	r1, #0
 80026c6:	2000      	movs	r0, #0
 80026c8:	f000 f92a 	bl	8002920 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80026cc:	2201      	movs	r2, #1
 80026ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80026d2:	485e      	ldr	r0, [pc, #376]	@ (800284c <ILI9341_Draw_Image+0x358>)
 80026d4:	f001 f9ec 	bl	8003ab0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80026d8:	2200      	movs	r2, #0
 80026da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026de:	485b      	ldr	r0, [pc, #364]	@ (800284c <ILI9341_Draw_Image+0x358>)
 80026e0:	f001 f9e6 	bl	8003ab0 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80026ea:	2300      	movs	r3, #0
 80026ec:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80026f0:	e035      	b.n	800275e <ILI9341_Draw_Image+0x26a>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80026f8:	e019      	b.n	800272e <ILI9341_Draw_Image+0x23a>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 80026fa:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80026fe:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8002702:	4413      	add	r3, r2
 8002704:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8002708:	f5a2 720b 	sub.w	r2, r2, #556	@ 0x22c
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	4413      	add	r3, r2
 8002710:	7819      	ldrb	r1, [r3, #0]
 8002712:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8002716:	f5a3 7209 	sub.w	r2, r3, #548	@ 0x224
 800271a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800271e:	4413      	add	r3, r2
 8002720:	460a      	mov	r2, r1
 8002722:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002724:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8002728:	3301      	adds	r3, #1
 800272a:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 800272e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8002732:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002736:	d3e0      	bcc.n	80026fa <ILI9341_Draw_Image+0x206>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002738:	f107 010c 	add.w	r1, r7, #12
 800273c:	230a      	movs	r3, #10
 800273e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002742:	4843      	ldr	r0, [pc, #268]	@ (8002850 <ILI9341_Draw_Image+0x35c>)
 8002744:	f002 fc63 	bl	800500e <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8002748:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800274c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002750:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002754:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8002758:	3301      	adds	r3, #1
 800275a:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 800275e:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8002762:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8002766:	d9c4      	bls.n	80026f2 <ILI9341_Draw_Image+0x1fe>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002768:	2201      	movs	r2, #1
 800276a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800276e:	4837      	ldr	r0, [pc, #220]	@ (800284c <ILI9341_Draw_Image+0x358>)
 8002770:	f001 f99e 	bl	8003ab0 <HAL_GPIO_WritePin>
}
 8002774:	e064      	b.n	8002840 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_1)
 8002776:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800277a:	f2a3 232d 	subw	r3, r3, #557	@ 0x22d
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d15d      	bne.n	8002840 <ILI9341_Draw_Image+0x34c>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002784:	2000      	movs	r0, #0
 8002786:	f000 f935 	bl	80029f4 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 800278a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800278e:	22f0      	movs	r2, #240	@ 0xf0
 8002790:	2100      	movs	r1, #0
 8002792:	2000      	movs	r0, #0
 8002794:	f000 f8c4 	bl	8002920 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002798:	2201      	movs	r2, #1
 800279a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800279e:	482b      	ldr	r0, [pc, #172]	@ (800284c <ILI9341_Draw_Image+0x358>)
 80027a0:	f001 f986 	bl	8003ab0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80027a4:	2200      	movs	r2, #0
 80027a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027aa:	4828      	ldr	r0, [pc, #160]	@ (800284c <ILI9341_Draw_Image+0x358>)
 80027ac:	f001 f980 	bl	8003ab0 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 80027bc:	e035      	b.n	800282a <ILI9341_Draw_Image+0x336>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80027be:	2300      	movs	r3, #0
 80027c0:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 80027c4:	e019      	b.n	80027fa <ILI9341_Draw_Image+0x306>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 80027c6:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 80027ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027ce:	4413      	add	r3, r2
 80027d0:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 80027d4:	f5a2 720b 	sub.w	r2, r2, #556	@ 0x22c
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	7819      	ldrb	r1, [r3, #0]
 80027de:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80027e2:	f5a3 7209 	sub.w	r2, r3, #548	@ 0x224
 80027e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027ea:	4413      	add	r3, r2
 80027ec:	460a      	mov	r2, r1
 80027ee:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80027f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027f4:	3301      	adds	r3, #1
 80027f6:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 80027fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027fe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002802:	d3e0      	bcc.n	80027c6 <ILI9341_Draw_Image+0x2d2>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002804:	f107 010c 	add.w	r1, r7, #12
 8002808:	230a      	movs	r3, #10
 800280a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800280e:	4810      	ldr	r0, [pc, #64]	@ (8002850 <ILI9341_Draw_Image+0x35c>)
 8002810:	f002 fbfd 	bl	800500e <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8002814:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8002818:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800281c:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002820:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8002824:	3301      	adds	r3, #1
 8002826:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800282a:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800282e:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8002832:	d9c4      	bls.n	80027be <ILI9341_Draw_Image+0x2ca>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002834:	2201      	movs	r2, #1
 8002836:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800283a:	4804      	ldr	r0, [pc, #16]	@ (800284c <ILI9341_Draw_Image+0x358>)
 800283c:	f001 f938 	bl	8003ab0 <HAL_GPIO_WritePin>
}
 8002840:	bf00      	nop
 8002842:	f507 770c 	add.w	r7, r7, #560	@ 0x230
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40020800 	.word	0x40020800
 8002850:	20000208 	.word	0x20000208

08002854 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8002858:	f7ff f8ac 	bl	80019b4 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 800285c:	f7fd fec0 	bl	80005e0 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002860:	2200      	movs	r2, #0
 8002862:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002866:	4802      	ldr	r0, [pc, #8]	@ (8002870 <ILI9341_SPI_Init+0x1c>)
 8002868:	f001 f922 	bl	8003ab0 <HAL_GPIO_WritePin>
}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40020800 	.word	0x40020800

08002874 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800287e:	1df9      	adds	r1, r7, #7
 8002880:	2301      	movs	r3, #1
 8002882:	2201      	movs	r2, #1
 8002884:	4803      	ldr	r0, [pc, #12]	@ (8002894 <ILI9341_SPI_Send+0x20>)
 8002886:	f002 fbc2 	bl	800500e <HAL_SPI_Transmit>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000208 	.word	0x20000208

08002898 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80028a2:	2200      	movs	r2, #0
 80028a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028a8:	480b      	ldr	r0, [pc, #44]	@ (80028d8 <ILI9341_Write_Command+0x40>)
 80028aa:	f001 f901 	bl	8003ab0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80028ae:	2200      	movs	r2, #0
 80028b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028b4:	4808      	ldr	r0, [pc, #32]	@ (80028d8 <ILI9341_Write_Command+0x40>)
 80028b6:	f001 f8fb 	bl	8003ab0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ffd9 	bl	8002874 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80028c2:	2201      	movs	r2, #1
 80028c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028c8:	4803      	ldr	r0, [pc, #12]	@ (80028d8 <ILI9341_Write_Command+0x40>)
 80028ca:	f001 f8f1 	bl	8003ab0 <HAL_GPIO_WritePin>
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40020800 	.word	0x40020800

080028dc <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80028e6:	2201      	movs	r2, #1
 80028e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028ec:	480b      	ldr	r0, [pc, #44]	@ (800291c <ILI9341_Write_Data+0x40>)
 80028ee:	f001 f8df 	bl	8003ab0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80028f2:	2200      	movs	r2, #0
 80028f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028f8:	4808      	ldr	r0, [pc, #32]	@ (800291c <ILI9341_Write_Data+0x40>)
 80028fa:	f001 f8d9 	bl	8003ab0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ffb7 	bl	8002874 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002906:	2201      	movs	r2, #1
 8002908:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800290c:	4803      	ldr	r0, [pc, #12]	@ (800291c <ILI9341_Write_Data+0x40>)
 800290e:	f001 f8cf 	bl	8003ab0 <HAL_GPIO_WritePin>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40020800 	.word	0x40020800

08002920 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002920:	b590      	push	{r4, r7, lr}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4604      	mov	r4, r0
 8002928:	4608      	mov	r0, r1
 800292a:	4611      	mov	r1, r2
 800292c:	461a      	mov	r2, r3
 800292e:	4623      	mov	r3, r4
 8002930:	80fb      	strh	r3, [r7, #6]
 8002932:	4603      	mov	r3, r0
 8002934:	80bb      	strh	r3, [r7, #4]
 8002936:	460b      	mov	r3, r1
 8002938:	807b      	strh	r3, [r7, #2]
 800293a:	4613      	mov	r3, r2
 800293c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800293e:	202a      	movs	r0, #42	@ 0x2a
 8002940:	f7ff ffaa 	bl	8002898 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8002944:	88fb      	ldrh	r3, [r7, #6]
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	b29b      	uxth	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff ffc5 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff ffc0 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 800295c:	887b      	ldrh	r3, [r7, #2]
 800295e:	0a1b      	lsrs	r3, r3, #8
 8002960:	b29b      	uxth	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ffb9 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800296a:	887b      	ldrh	r3, [r7, #2]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff ffb4 	bl	80028dc <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8002974:	202b      	movs	r0, #43	@ 0x2b
 8002976:	f7ff ff8f 	bl	8002898 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800297a:	88bb      	ldrh	r3, [r7, #4]
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	b29b      	uxth	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff ffaa 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8002988:	88bb      	ldrh	r3, [r7, #4]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ffa5 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8002992:	883b      	ldrh	r3, [r7, #0]
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	b29b      	uxth	r3, r3
 8002998:	b2db      	uxtb	r3, r3
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff ff9e 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80029a0:	883b      	ldrh	r3, [r7, #0]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff99 	bl	80028dc <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80029aa:	202c      	movs	r0, #44	@ 0x2c
 80029ac:	f7ff ff74 	bl	8002898 <ILI9341_Write_Command>
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd90      	pop	{r4, r7, pc}

080029b8 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80029bc:	2200      	movs	r2, #0
 80029be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029c2:	480b      	ldr	r0, [pc, #44]	@ (80029f0 <ILI9341_Reset+0x38>)
 80029c4:	f001 f874 	bl	8003ab0 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80029c8:	20c8      	movs	r0, #200	@ 0xc8
 80029ca:	f000 fda3 	bl	8003514 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80029ce:	2200      	movs	r2, #0
 80029d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029d4:	4806      	ldr	r0, [pc, #24]	@ (80029f0 <ILI9341_Reset+0x38>)
 80029d6:	f001 f86b 	bl	8003ab0 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80029da:	20c8      	movs	r0, #200	@ 0xc8
 80029dc:	f000 fd9a 	bl	8003514 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80029e0:	2201      	movs	r2, #1
 80029e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029e6:	4802      	ldr	r0, [pc, #8]	@ (80029f0 <ILI9341_Reset+0x38>)
 80029e8:	f001 f862 	bl	8003ab0 <HAL_GPIO_WritePin>
}
 80029ec:	bf00      	nop
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40020800 	.word	0x40020800

080029f4 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8002a02:	2036      	movs	r0, #54	@ 0x36
 8002a04:	f7ff ff48 	bl	8002898 <ILI9341_Write_Command>
HAL_Delay(1);
 8002a08:	2001      	movs	r0, #1
 8002a0a:	f000 fd83 	bl	8003514 <HAL_Delay>
	
switch(screen_rotation) 
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d837      	bhi.n	8002a84 <ILI9341_Set_Rotation+0x90>
 8002a14:	a201      	add	r2, pc, #4	@ (adr r2, 8002a1c <ILI9341_Set_Rotation+0x28>)
 8002a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1a:	bf00      	nop
 8002a1c:	08002a2d 	.word	0x08002a2d
 8002a20:	08002a43 	.word	0x08002a43
 8002a24:	08002a59 	.word	0x08002a59
 8002a28:	08002a6f 	.word	0x08002a6f
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8002a2c:	2048      	movs	r0, #72	@ 0x48
 8002a2e:	f7ff ff55 	bl	80028dc <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8002a32:	4b17      	ldr	r3, [pc, #92]	@ (8002a90 <ILI9341_Set_Rotation+0x9c>)
 8002a34:	22f0      	movs	r2, #240	@ 0xf0
 8002a36:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002a38:	4b16      	ldr	r3, [pc, #88]	@ (8002a94 <ILI9341_Set_Rotation+0xa0>)
 8002a3a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002a3e:	801a      	strh	r2, [r3, #0]
			break;
 8002a40:	e021      	b.n	8002a86 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8002a42:	2028      	movs	r0, #40	@ 0x28
 8002a44:	f7ff ff4a 	bl	80028dc <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002a48:	4b11      	ldr	r3, [pc, #68]	@ (8002a90 <ILI9341_Set_Rotation+0x9c>)
 8002a4a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002a4e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002a50:	4b10      	ldr	r3, [pc, #64]	@ (8002a94 <ILI9341_Set_Rotation+0xa0>)
 8002a52:	22f0      	movs	r2, #240	@ 0xf0
 8002a54:	801a      	strh	r2, [r3, #0]
			break;
 8002a56:	e016      	b.n	8002a86 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8002a58:	2088      	movs	r0, #136	@ 0x88
 8002a5a:	f7ff ff3f 	bl	80028dc <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8002a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a90 <ILI9341_Set_Rotation+0x9c>)
 8002a60:	22f0      	movs	r2, #240	@ 0xf0
 8002a62:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002a64:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <ILI9341_Set_Rotation+0xa0>)
 8002a66:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002a6a:	801a      	strh	r2, [r3, #0]
			break;
 8002a6c:	e00b      	b.n	8002a86 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8002a6e:	20e8      	movs	r0, #232	@ 0xe8
 8002a70:	f7ff ff34 	bl	80028dc <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002a74:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <ILI9341_Set_Rotation+0x9c>)
 8002a76:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002a7a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002a7c:	4b05      	ldr	r3, [pc, #20]	@ (8002a94 <ILI9341_Set_Rotation+0xa0>)
 8002a7e:	22f0      	movs	r2, #240	@ 0xf0
 8002a80:	801a      	strh	r2, [r3, #0]
			break;
 8002a82:	e000      	b.n	8002a86 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002a84:	bf00      	nop
	}
}
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000006 	.word	0x20000006
 8002a94:	20000004 	.word	0x20000004

08002a98 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002aa2:	4802      	ldr	r0, [pc, #8]	@ (8002aac <ILI9341_Enable+0x14>)
 8002aa4:	f001 f804 	bl	8003ab0 <HAL_GPIO_WritePin>
}
 8002aa8:	bf00      	nop
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40020800 	.word	0x40020800

08002ab0 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8002ab4:	f7ff fff0 	bl	8002a98 <ILI9341_Enable>
ILI9341_SPI_Init();
 8002ab8:	f7ff fecc 	bl	8002854 <ILI9341_SPI_Init>
ILI9341_Reset();
 8002abc:	f7ff ff7c 	bl	80029b8 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f7ff fee9 	bl	8002898 <ILI9341_Write_Command>
HAL_Delay(1000);
 8002ac6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002aca:	f000 fd23 	bl	8003514 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8002ace:	20cb      	movs	r0, #203	@ 0xcb
 8002ad0:	f7ff fee2 	bl	8002898 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8002ad4:	2039      	movs	r0, #57	@ 0x39
 8002ad6:	f7ff ff01 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8002ada:	202c      	movs	r0, #44	@ 0x2c
 8002adc:	f7ff fefe 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	f7ff fefb 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8002ae6:	2034      	movs	r0, #52	@ 0x34
 8002ae8:	f7ff fef8 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8002aec:	2002      	movs	r0, #2
 8002aee:	f7ff fef5 	bl	80028dc <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8002af2:	20cf      	movs	r0, #207	@ 0xcf
 8002af4:	f7ff fed0 	bl	8002898 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002af8:	2000      	movs	r0, #0
 8002afa:	f7ff feef 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002afe:	20c1      	movs	r0, #193	@ 0xc1
 8002b00:	f7ff feec 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8002b04:	2030      	movs	r0, #48	@ 0x30
 8002b06:	f7ff fee9 	bl	80028dc <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8002b0a:	20e8      	movs	r0, #232	@ 0xe8
 8002b0c:	f7ff fec4 	bl	8002898 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8002b10:	2085      	movs	r0, #133	@ 0x85
 8002b12:	f7ff fee3 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002b16:	2000      	movs	r0, #0
 8002b18:	f7ff fee0 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8002b1c:	2078      	movs	r0, #120	@ 0x78
 8002b1e:	f7ff fedd 	bl	80028dc <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8002b22:	20ea      	movs	r0, #234	@ 0xea
 8002b24:	f7ff feb8 	bl	8002898 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f7ff fed7 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f7ff fed4 	bl	80028dc <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8002b34:	20ed      	movs	r0, #237	@ 0xed
 8002b36:	f7ff feaf 	bl	8002898 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8002b3a:	2064      	movs	r0, #100	@ 0x64
 8002b3c:	f7ff fece 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002b40:	2003      	movs	r0, #3
 8002b42:	f7ff fecb 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8002b46:	2012      	movs	r0, #18
 8002b48:	f7ff fec8 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8002b4c:	2081      	movs	r0, #129	@ 0x81
 8002b4e:	f7ff fec5 	bl	80028dc <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8002b52:	20f7      	movs	r0, #247	@ 0xf7
 8002b54:	f7ff fea0 	bl	8002898 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8002b58:	2020      	movs	r0, #32
 8002b5a:	f7ff febf 	bl	80028dc <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8002b5e:	20c0      	movs	r0, #192	@ 0xc0
 8002b60:	f7ff fe9a 	bl	8002898 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002b64:	2023      	movs	r0, #35	@ 0x23
 8002b66:	f7ff feb9 	bl	80028dc <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8002b6a:	20c1      	movs	r0, #193	@ 0xc1
 8002b6c:	f7ff fe94 	bl	8002898 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002b70:	2010      	movs	r0, #16
 8002b72:	f7ff feb3 	bl	80028dc <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8002b76:	20c5      	movs	r0, #197	@ 0xc5
 8002b78:	f7ff fe8e 	bl	8002898 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8002b7c:	203e      	movs	r0, #62	@ 0x3e
 8002b7e:	f7ff fead 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8002b82:	2028      	movs	r0, #40	@ 0x28
 8002b84:	f7ff feaa 	bl	80028dc <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002b88:	20c7      	movs	r0, #199	@ 0xc7
 8002b8a:	f7ff fe85 	bl	8002898 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8002b8e:	2086      	movs	r0, #134	@ 0x86
 8002b90:	f7ff fea4 	bl	80028dc <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002b94:	2036      	movs	r0, #54	@ 0x36
 8002b96:	f7ff fe7f 	bl	8002898 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8002b9a:	2048      	movs	r0, #72	@ 0x48
 8002b9c:	f7ff fe9e 	bl	80028dc <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8002ba0:	203a      	movs	r0, #58	@ 0x3a
 8002ba2:	f7ff fe79 	bl	8002898 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8002ba6:	2055      	movs	r0, #85	@ 0x55
 8002ba8:	f7ff fe98 	bl	80028dc <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8002bac:	20b1      	movs	r0, #177	@ 0xb1
 8002bae:	f7ff fe73 	bl	8002898 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f7ff fe92 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002bb8:	2018      	movs	r0, #24
 8002bba:	f7ff fe8f 	bl	80028dc <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8002bbe:	20b6      	movs	r0, #182	@ 0xb6
 8002bc0:	f7ff fe6a 	bl	8002898 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002bc4:	2008      	movs	r0, #8
 8002bc6:	f7ff fe89 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8002bca:	2082      	movs	r0, #130	@ 0x82
 8002bcc:	f7ff fe86 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8002bd0:	2027      	movs	r0, #39	@ 0x27
 8002bd2:	f7ff fe83 	bl	80028dc <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8002bd6:	20f2      	movs	r0, #242	@ 0xf2
 8002bd8:	f7ff fe5e 	bl	8002898 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002bdc:	2000      	movs	r0, #0
 8002bde:	f7ff fe7d 	bl	80028dc <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8002be2:	2026      	movs	r0, #38	@ 0x26
 8002be4:	f7ff fe58 	bl	8002898 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002be8:	2001      	movs	r0, #1
 8002bea:	f7ff fe77 	bl	80028dc <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8002bee:	20e0      	movs	r0, #224	@ 0xe0
 8002bf0:	f7ff fe52 	bl	8002898 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8002bf4:	200f      	movs	r0, #15
 8002bf6:	f7ff fe71 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002bfa:	2031      	movs	r0, #49	@ 0x31
 8002bfc:	f7ff fe6e 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8002c00:	202b      	movs	r0, #43	@ 0x2b
 8002c02:	f7ff fe6b 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002c06:	200c      	movs	r0, #12
 8002c08:	f7ff fe68 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002c0c:	200e      	movs	r0, #14
 8002c0e:	f7ff fe65 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002c12:	2008      	movs	r0, #8
 8002c14:	f7ff fe62 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8002c18:	204e      	movs	r0, #78	@ 0x4e
 8002c1a:	f7ff fe5f 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8002c1e:	20f1      	movs	r0, #241	@ 0xf1
 8002c20:	f7ff fe5c 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8002c24:	2037      	movs	r0, #55	@ 0x37
 8002c26:	f7ff fe59 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002c2a:	2007      	movs	r0, #7
 8002c2c:	f7ff fe56 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8002c30:	2010      	movs	r0, #16
 8002c32:	f7ff fe53 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002c36:	2003      	movs	r0, #3
 8002c38:	f7ff fe50 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002c3c:	200e      	movs	r0, #14
 8002c3e:	f7ff fe4d 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8002c42:	2009      	movs	r0, #9
 8002c44:	f7ff fe4a 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f7ff fe47 	bl	80028dc <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8002c4e:	20e1      	movs	r0, #225	@ 0xe1
 8002c50:	f7ff fe22 	bl	8002898 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002c54:	2000      	movs	r0, #0
 8002c56:	f7ff fe41 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002c5a:	200e      	movs	r0, #14
 8002c5c:	f7ff fe3e 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8002c60:	2014      	movs	r0, #20
 8002c62:	f7ff fe3b 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002c66:	2003      	movs	r0, #3
 8002c68:	f7ff fe38 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002c6c:	2011      	movs	r0, #17
 8002c6e:	f7ff fe35 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002c72:	2007      	movs	r0, #7
 8002c74:	f7ff fe32 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002c78:	2031      	movs	r0, #49	@ 0x31
 8002c7a:	f7ff fe2f 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002c7e:	20c1      	movs	r0, #193	@ 0xc1
 8002c80:	f7ff fe2c 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002c84:	2048      	movs	r0, #72	@ 0x48
 8002c86:	f7ff fe29 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002c8a:	2008      	movs	r0, #8
 8002c8c:	f7ff fe26 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002c90:	200f      	movs	r0, #15
 8002c92:	f7ff fe23 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002c96:	200c      	movs	r0, #12
 8002c98:	f7ff fe20 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002c9c:	2031      	movs	r0, #49	@ 0x31
 8002c9e:	f7ff fe1d 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8002ca2:	2036      	movs	r0, #54	@ 0x36
 8002ca4:	f7ff fe1a 	bl	80028dc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002ca8:	200f      	movs	r0, #15
 8002caa:	f7ff fe17 	bl	80028dc <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8002cae:	2011      	movs	r0, #17
 8002cb0:	f7ff fdf2 	bl	8002898 <ILI9341_Write_Command>
HAL_Delay(120);
 8002cb4:	2078      	movs	r0, #120	@ 0x78
 8002cb6:	f000 fc2d 	bl	8003514 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8002cba:	2029      	movs	r0, #41	@ 0x29
 8002cbc:	f7ff fdec 	bl	8002898 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f7ff fe97 	bl	80029f4 <ILI9341_Set_Rotation>
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002cd0:	b08d      	sub	sp, #52	@ 0x34
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	6039      	str	r1, [r7, #0]
 8002cd8:	80fb      	strh	r3, [r7, #6]
 8002cda:	466b      	mov	r3, sp
 8002cdc:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002cea:	d202      	bcs.n	8002cf2 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cf0:	e002      	b.n	8002cf8 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8002cf2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002cfe:	4840      	ldr	r0, [pc, #256]	@ (8002e00 <ILI9341_Draw_Colour_Burst+0x134>)
 8002d00:	f000 fed6 	bl	8003ab0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002d04:	2200      	movs	r2, #0
 8002d06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d0a:	483d      	ldr	r0, [pc, #244]	@ (8002e00 <ILI9341_Draw_Colour_Burst+0x134>)
 8002d0c:	f000 fed0 	bl	8003ab0 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8002d10:	88fb      	ldrh	r3, [r7, #6]
 8002d12:	0a1b      	lsrs	r3, r3, #8
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 8002d1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	61fb      	str	r3, [r7, #28]
 8002d22:	2300      	movs	r3, #0
 8002d24:	4688      	mov	r8, r1
 8002d26:	4699      	mov	r9, r3
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	460c      	mov	r4, r1
 8002d40:	461d      	mov	r5, r3
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	00eb      	lsls	r3, r5, #3
 8002d4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d50:	00e2      	lsls	r2, r4, #3
 8002d52:	1dcb      	adds	r3, r1, #7
 8002d54:	08db      	lsrs	r3, r3, #3
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	ebad 0d03 	sub.w	sp, sp, r3
 8002d5c:	466b      	mov	r3, sp
 8002d5e:	3300      	adds	r3, #0
 8002d60:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002d62:	2300      	movs	r3, #0
 8002d64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d66:	e00e      	b.n	8002d86 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002d72:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d76:	3301      	adds	r3, #1
 8002d78:	88fa      	ldrh	r2, [r7, #6]
 8002d7a:	b2d1      	uxtb	r1, r2
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d82:	3302      	adds	r3, #2
 8002d84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d3ec      	bcc.n	8002d68 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9c:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002da2:	fbb3 f2f2 	udiv	r2, r3, r2
 8002da6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002da8:	fb01 f202 	mul.w	r2, r1, r2
 8002dac:	1a9b      	subs	r3, r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d010      	beq.n	8002dd8 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dba:	e009      	b.n	8002dd0 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	230a      	movs	r3, #10
 8002dc2:	69b9      	ldr	r1, [r7, #24]
 8002dc4:	480f      	ldr	r0, [pc, #60]	@ (8002e04 <ILI9341_Draw_Colour_Burst+0x138>)
 8002dc6:	f002 f922 	bl	800500e <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dcc:	3301      	adds	r3, #1
 8002dce:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d3f1      	bcc.n	8002dbc <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	230a      	movs	r3, #10
 8002dde:	69b9      	ldr	r1, [r7, #24]
 8002de0:	4808      	ldr	r0, [pc, #32]	@ (8002e04 <ILI9341_Draw_Colour_Burst+0x138>)
 8002de2:	f002 f914 	bl	800500e <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002de6:	2201      	movs	r2, #1
 8002de8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002dec:	4804      	ldr	r0, [pc, #16]	@ (8002e00 <ILI9341_Draw_Colour_Burst+0x134>)
 8002dee:	f000 fe5f 	bl	8003ab0 <HAL_GPIO_WritePin>
 8002df2:	46b5      	mov	sp, r6
}
 8002df4:	bf00      	nop
 8002df6:	3734      	adds	r7, #52	@ 0x34
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002dfe:	bf00      	nop
 8002e00:	40020800 	.word	0x40020800
 8002e04:	20000208 	.word	0x20000208

08002e08 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8002e12:	4b0e      	ldr	r3, [pc, #56]	@ (8002e4c <ILI9341_Fill_Screen+0x44>)
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	4b0d      	ldr	r3, [pc, #52]	@ (8002e50 <ILI9341_Fill_Screen+0x48>)
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2100      	movs	r1, #0
 8002e20:	2000      	movs	r0, #0
 8002e22:	f7ff fd7d 	bl	8002920 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8002e26:	4b09      	ldr	r3, [pc, #36]	@ (8002e4c <ILI9341_Fill_Screen+0x44>)
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4b08      	ldr	r3, [pc, #32]	@ (8002e50 <ILI9341_Fill_Screen+0x48>)
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	fb02 f303 	mul.w	r3, r2, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff ff44 	bl	8002ccc <ILI9341_Draw_Colour_Burst>
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20000006 	.word	0x20000006
 8002e50:	20000004 	.word	0x20000004

08002e54 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	80fb      	strh	r3, [r7, #6]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	80bb      	strh	r3, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002e66:	4b64      	ldr	r3, [pc, #400]	@ (8002ff8 <ILI9341_Draw_Pixel+0x1a4>)
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	88fa      	ldrh	r2, [r7, #6]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	f080 80be 	bcs.w	8002ff0 <ILI9341_Draw_Pixel+0x19c>
 8002e74:	4b61      	ldr	r3, [pc, #388]	@ (8002ffc <ILI9341_Draw_Pixel+0x1a8>)
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	88ba      	ldrh	r2, [r7, #4]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	f080 80b7 	bcs.w	8002ff0 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002e82:	2200      	movs	r2, #0
 8002e84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e88:	485d      	ldr	r0, [pc, #372]	@ (8003000 <ILI9341_Draw_Pixel+0x1ac>)
 8002e8a:	f000 fe11 	bl	8003ab0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e94:	485a      	ldr	r0, [pc, #360]	@ (8003000 <ILI9341_Draw_Pixel+0x1ac>)
 8002e96:	f000 fe0b 	bl	8003ab0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002e9a:	202a      	movs	r0, #42	@ 0x2a
 8002e9c:	f7ff fcea 	bl	8002874 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ea6:	4856      	ldr	r0, [pc, #344]	@ (8003000 <ILI9341_Draw_Pixel+0x1ac>)
 8002ea8:	f000 fe02 	bl	8003ab0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002eac:	2201      	movs	r2, #1
 8002eae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002eb2:	4853      	ldr	r0, [pc, #332]	@ (8003000 <ILI9341_Draw_Pixel+0x1ac>)
 8002eb4:	f000 fdfc 	bl	8003ab0 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ebe:	4850      	ldr	r0, [pc, #320]	@ (8003000 <ILI9341_Draw_Pixel+0x1ac>)
 8002ec0:	f000 fdf6 	bl	8003ab0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002ec4:	88fb      	ldrh	r3, [r7, #6]
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	753b      	strb	r3, [r7, #20]
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	757b      	strb	r3, [r7, #21]
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	121b      	asrs	r3, r3, #8
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	75bb      	strb	r3, [r7, #22]
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002ee8:	f107 0114 	add.w	r1, r7, #20
 8002eec:	2301      	movs	r3, #1
 8002eee:	2204      	movs	r2, #4
 8002ef0:	4844      	ldr	r0, [pc, #272]	@ (8003004 <ILI9341_Draw_Pixel+0x1b0>)
 8002ef2:	f002 f88c 	bl	800500e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002efc:	4840      	ldr	r0, [pc, #256]	@ (8003000 <ILI9341_Draw_Pixel+0x1ac>)
 8002efe:	f000 fdd7 	bl	8003ab0 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002f02:	2200      	movs	r2, #0
 8002f04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f08:	483d      	ldr	r0, [pc, #244]	@ (8003000 <ILI9341_Draw_Pixel+0x1ac>)
 8002f0a:	f000 fdd1 	bl	8003ab0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f14:	483a      	ldr	r0, [pc, #232]	@ (8003000 <ILI9341_Draw_Pixel+0x1ac>)
 8002f16:	f000 fdcb 	bl	8003ab0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002f1a:	202b      	movs	r0, #43	@ 0x2b
 8002f1c:	f7ff fcaa 	bl	8002874 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002f20:	2201      	movs	r2, #1
 8002f22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f26:	4836      	ldr	r0, [pc, #216]	@ (8003000 <ILI9341_Draw_Pixel+0x1ac>)
 8002f28:	f000 fdc2 	bl	8003ab0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f32:	4833      	ldr	r0, [pc, #204]	@ (8003000 <ILI9341_Draw_Pixel+0x1ac>)
 8002f34:	f000 fdbc 	bl	8003ab0 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f3e:	4830      	ldr	r0, [pc, #192]	@ (8003000 <ILI9341_Draw_Pixel+0x1ac>)
 8002f40:	f000 fdb6 	bl	8003ab0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002f44:	88bb      	ldrh	r3, [r7, #4]
 8002f46:	0a1b      	lsrs	r3, r3, #8
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	743b      	strb	r3, [r7, #16]
 8002f4e:	88bb      	ldrh	r3, [r7, #4]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	747b      	strb	r3, [r7, #17]
 8002f54:	88bb      	ldrh	r3, [r7, #4]
 8002f56:	3301      	adds	r3, #1
 8002f58:	121b      	asrs	r3, r3, #8
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	74bb      	strb	r3, [r7, #18]
 8002f5e:	88bb      	ldrh	r3, [r7, #4]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	3301      	adds	r3, #1
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002f68:	f107 0110 	add.w	r1, r7, #16
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	2204      	movs	r2, #4
 8002f70:	4824      	ldr	r0, [pc, #144]	@ (8003004 <ILI9341_Draw_Pixel+0x1b0>)
 8002f72:	f002 f84c 	bl	800500e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002f76:	2201      	movs	r2, #1
 8002f78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f7c:	4820      	ldr	r0, [pc, #128]	@ (8003000 <ILI9341_Draw_Pixel+0x1ac>)
 8002f7e:	f000 fd97 	bl	8003ab0 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002f82:	2200      	movs	r2, #0
 8002f84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f88:	481d      	ldr	r0, [pc, #116]	@ (8003000 <ILI9341_Draw_Pixel+0x1ac>)
 8002f8a:	f000 fd91 	bl	8003ab0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f94:	481a      	ldr	r0, [pc, #104]	@ (8003000 <ILI9341_Draw_Pixel+0x1ac>)
 8002f96:	f000 fd8b 	bl	8003ab0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002f9a:	202c      	movs	r0, #44	@ 0x2c
 8002f9c:	f7ff fc6a 	bl	8002874 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002fa6:	4816      	ldr	r0, [pc, #88]	@ (8003000 <ILI9341_Draw_Pixel+0x1ac>)
 8002fa8:	f000 fd82 	bl	8003ab0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002fac:	2201      	movs	r2, #1
 8002fae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fb2:	4813      	ldr	r0, [pc, #76]	@ (8003000 <ILI9341_Draw_Pixel+0x1ac>)
 8002fb4:	f000 fd7c 	bl	8003ab0 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fbe:	4810      	ldr	r0, [pc, #64]	@ (8003000 <ILI9341_Draw_Pixel+0x1ac>)
 8002fc0:	f000 fd76 	bl	8003ab0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002fc4:	887b      	ldrh	r3, [r7, #2]
 8002fc6:	0a1b      	lsrs	r3, r3, #8
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	733b      	strb	r3, [r7, #12]
 8002fce:	887b      	ldrh	r3, [r7, #2]
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002fd4:	f107 010c 	add.w	r1, r7, #12
 8002fd8:	2301      	movs	r3, #1
 8002fda:	2202      	movs	r2, #2
 8002fdc:	4809      	ldr	r0, [pc, #36]	@ (8003004 <ILI9341_Draw_Pixel+0x1b0>)
 8002fde:	f002 f816 	bl	800500e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fe8:	4805      	ldr	r0, [pc, #20]	@ (8003000 <ILI9341_Draw_Pixel+0x1ac>)
 8002fea:	f000 fd61 	bl	8003ab0 <HAL_GPIO_WritePin>
 8002fee:	e000      	b.n	8002ff2 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002ff0:	bf00      	nop
	
}
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	20000006 	.word	0x20000006
 8002ffc:	20000004 	.word	0x20000004
 8003000:	40020800 	.word	0x40020800
 8003004:	20000208 	.word	0x20000208

08003008 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	4604      	mov	r4, r0
 8003010:	4608      	mov	r0, r1
 8003012:	4611      	mov	r1, r2
 8003014:	461a      	mov	r2, r3
 8003016:	4623      	mov	r3, r4
 8003018:	80fb      	strh	r3, [r7, #6]
 800301a:	4603      	mov	r3, r0
 800301c:	80bb      	strh	r3, [r7, #4]
 800301e:	460b      	mov	r3, r1
 8003020:	807b      	strh	r3, [r7, #2]
 8003022:	4613      	mov	r3, r2
 8003024:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8003026:	4b24      	ldr	r3, [pc, #144]	@ (80030b8 <ILI9341_Draw_Rectangle+0xb0>)
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	b29b      	uxth	r3, r3
 800302c:	88fa      	ldrh	r2, [r7, #6]
 800302e:	429a      	cmp	r2, r3
 8003030:	d23d      	bcs.n	80030ae <ILI9341_Draw_Rectangle+0xa6>
 8003032:	4b22      	ldr	r3, [pc, #136]	@ (80030bc <ILI9341_Draw_Rectangle+0xb4>)
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	b29b      	uxth	r3, r3
 8003038:	88ba      	ldrh	r2, [r7, #4]
 800303a:	429a      	cmp	r2, r3
 800303c:	d237      	bcs.n	80030ae <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 800303e:	88fa      	ldrh	r2, [r7, #6]
 8003040:	887b      	ldrh	r3, [r7, #2]
 8003042:	4413      	add	r3, r2
 8003044:	4a1c      	ldr	r2, [pc, #112]	@ (80030b8 <ILI9341_Draw_Rectangle+0xb0>)
 8003046:	8812      	ldrh	r2, [r2, #0]
 8003048:	b292      	uxth	r2, r2
 800304a:	4293      	cmp	r3, r2
 800304c:	dd05      	ble.n	800305a <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 800304e:	4b1a      	ldr	r3, [pc, #104]	@ (80030b8 <ILI9341_Draw_Rectangle+0xb0>)
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	b29a      	uxth	r2, r3
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 800305a:	88ba      	ldrh	r2, [r7, #4]
 800305c:	883b      	ldrh	r3, [r7, #0]
 800305e:	4413      	add	r3, r2
 8003060:	4a16      	ldr	r2, [pc, #88]	@ (80030bc <ILI9341_Draw_Rectangle+0xb4>)
 8003062:	8812      	ldrh	r2, [r2, #0]
 8003064:	b292      	uxth	r2, r2
 8003066:	4293      	cmp	r3, r2
 8003068:	dd05      	ble.n	8003076 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 800306a:	4b14      	ldr	r3, [pc, #80]	@ (80030bc <ILI9341_Draw_Rectangle+0xb4>)
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	b29a      	uxth	r2, r3
 8003070:	88bb      	ldrh	r3, [r7, #4]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8003076:	88fa      	ldrh	r2, [r7, #6]
 8003078:	887b      	ldrh	r3, [r7, #2]
 800307a:	4413      	add	r3, r2
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b29c      	uxth	r4, r3
 8003082:	88ba      	ldrh	r2, [r7, #4]
 8003084:	883b      	ldrh	r3, [r7, #0]
 8003086:	4413      	add	r3, r2
 8003088:	b29b      	uxth	r3, r3
 800308a:	3b01      	subs	r3, #1
 800308c:	b29b      	uxth	r3, r3
 800308e:	88b9      	ldrh	r1, [r7, #4]
 8003090:	88f8      	ldrh	r0, [r7, #6]
 8003092:	4622      	mov	r2, r4
 8003094:	f7ff fc44 	bl	8002920 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8003098:	883b      	ldrh	r3, [r7, #0]
 800309a:	887a      	ldrh	r2, [r7, #2]
 800309c:	fb02 f303 	mul.w	r3, r2, r3
 80030a0:	461a      	mov	r2, r3
 80030a2:	8b3b      	ldrh	r3, [r7, #24]
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff fe10 	bl	8002ccc <ILI9341_Draw_Colour_Burst>
 80030ac:	e000      	b.n	80030b0 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80030ae:	bf00      	nop
}
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd90      	pop	{r4, r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000006 	.word	0x20000006
 80030bc:	20000004 	.word	0x20000004

080030c0 <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4604      	mov	r4, r0
 80030c8:	4608      	mov	r0, r1
 80030ca:	4611      	mov	r1, r2
 80030cc:	461a      	mov	r2, r3
 80030ce:	4623      	mov	r3, r4
 80030d0:	80fb      	strh	r3, [r7, #6]
 80030d2:	4603      	mov	r3, r0
 80030d4:	80bb      	strh	r3, [r7, #4]
 80030d6:	460b      	mov	r3, r1
 80030d8:	807b      	strh	r3, [r7, #2]
 80030da:	4613      	mov	r3, r2
 80030dc:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80030de:	4b18      	ldr	r3, [pc, #96]	@ (8003140 <ILI9341_Draw_Horizontal_Line+0x80>)
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	88fa      	ldrh	r2, [r7, #6]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d225      	bcs.n	8003136 <ILI9341_Draw_Horizontal_Line+0x76>
 80030ea:	4b16      	ldr	r3, [pc, #88]	@ (8003144 <ILI9341_Draw_Horizontal_Line+0x84>)
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	88ba      	ldrh	r2, [r7, #4]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d21f      	bcs.n	8003136 <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 80030f6:	88fa      	ldrh	r2, [r7, #6]
 80030f8:	887b      	ldrh	r3, [r7, #2]
 80030fa:	4413      	add	r3, r2
 80030fc:	4a10      	ldr	r2, [pc, #64]	@ (8003140 <ILI9341_Draw_Horizontal_Line+0x80>)
 80030fe:	8812      	ldrh	r2, [r2, #0]
 8003100:	b292      	uxth	r2, r2
 8003102:	4293      	cmp	r3, r2
 8003104:	dd05      	ble.n	8003112 <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 8003106:	4b0e      	ldr	r3, [pc, #56]	@ (8003140 <ILI9341_Draw_Horizontal_Line+0x80>)
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	b29a      	uxth	r2, r3
 800310c:	88fb      	ldrh	r3, [r7, #6]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 8003112:	88fa      	ldrh	r2, [r7, #6]
 8003114:	887b      	ldrh	r3, [r7, #2]
 8003116:	4413      	add	r3, r2
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	88bb      	ldrh	r3, [r7, #4]
 8003120:	88b9      	ldrh	r1, [r7, #4]
 8003122:	88f8      	ldrh	r0, [r7, #6]
 8003124:	f7ff fbfc 	bl	8002920 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 8003128:	887a      	ldrh	r2, [r7, #2]
 800312a:	883b      	ldrh	r3, [r7, #0]
 800312c:	4611      	mov	r1, r2
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fdcc 	bl	8002ccc <ILI9341_Draw_Colour_Burst>
 8003134:	e000      	b.n	8003138 <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8003136:	bf00      	nop
}
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	bd90      	pop	{r4, r7, pc}
 800313e:	bf00      	nop
 8003140:	20000006 	.word	0x20000006
 8003144:	20000004 	.word	0x20000004

08003148 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4604      	mov	r4, r0
 8003150:	4608      	mov	r0, r1
 8003152:	4611      	mov	r1, r2
 8003154:	461a      	mov	r2, r3
 8003156:	4623      	mov	r3, r4
 8003158:	80fb      	strh	r3, [r7, #6]
 800315a:	4603      	mov	r3, r0
 800315c:	80bb      	strh	r3, [r7, #4]
 800315e:	460b      	mov	r3, r1
 8003160:	807b      	strh	r3, [r7, #2]
 8003162:	4613      	mov	r3, r2
 8003164:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8003166:	4b18      	ldr	r3, [pc, #96]	@ (80031c8 <ILI9341_Draw_Vertical_Line+0x80>)
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	b29b      	uxth	r3, r3
 800316c:	88fa      	ldrh	r2, [r7, #6]
 800316e:	429a      	cmp	r2, r3
 8003170:	d225      	bcs.n	80031be <ILI9341_Draw_Vertical_Line+0x76>
 8003172:	4b16      	ldr	r3, [pc, #88]	@ (80031cc <ILI9341_Draw_Vertical_Line+0x84>)
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	b29b      	uxth	r3, r3
 8003178:	88ba      	ldrh	r2, [r7, #4]
 800317a:	429a      	cmp	r2, r3
 800317c:	d21f      	bcs.n	80031be <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 800317e:	88ba      	ldrh	r2, [r7, #4]
 8003180:	887b      	ldrh	r3, [r7, #2]
 8003182:	4413      	add	r3, r2
 8003184:	4a11      	ldr	r2, [pc, #68]	@ (80031cc <ILI9341_Draw_Vertical_Line+0x84>)
 8003186:	8812      	ldrh	r2, [r2, #0]
 8003188:	b292      	uxth	r2, r2
 800318a:	4293      	cmp	r3, r2
 800318c:	dd05      	ble.n	800319a <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 800318e:	4b0f      	ldr	r3, [pc, #60]	@ (80031cc <ILI9341_Draw_Vertical_Line+0x84>)
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	b29a      	uxth	r2, r3
 8003194:	88bb      	ldrh	r3, [r7, #4]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 800319a:	88ba      	ldrh	r2, [r7, #4]
 800319c:	887b      	ldrh	r3, [r7, #2]
 800319e:	4413      	add	r3, r2
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	88fa      	ldrh	r2, [r7, #6]
 80031a8:	88b9      	ldrh	r1, [r7, #4]
 80031aa:	88f8      	ldrh	r0, [r7, #6]
 80031ac:	f7ff fbb8 	bl	8002920 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 80031b0:	887a      	ldrh	r2, [r7, #2]
 80031b2:	883b      	ldrh	r3, [r7, #0]
 80031b4:	4611      	mov	r1, r2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff fd88 	bl	8002ccc <ILI9341_Draw_Colour_Burst>
 80031bc:	e000      	b.n	80031c0 <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80031be:	bf00      	nop
}
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd90      	pop	{r4, r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000006 	.word	0x20000006
 80031cc:	20000004 	.word	0x20000004

080031d0 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 80031d6:	2310      	movs	r3, #16
 80031d8:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 80031de:	e019      	b.n	8003214 <TP_Read+0x44>
    {
        value <<= 1;
 80031e0:	88bb      	ldrh	r3, [r7, #4]
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 80031e6:	2201      	movs	r2, #1
 80031e8:	2108      	movs	r1, #8
 80031ea:	480e      	ldr	r0, [pc, #56]	@ (8003224 <TP_Read+0x54>)
 80031ec:	f000 fc60 	bl	8003ab0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 80031f0:	2200      	movs	r2, #0
 80031f2:	2108      	movs	r1, #8
 80031f4:	480b      	ldr	r0, [pc, #44]	@ (8003224 <TP_Read+0x54>)
 80031f6:	f000 fc5b 	bl	8003ab0 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 80031fa:	2110      	movs	r1, #16
 80031fc:	4809      	ldr	r0, [pc, #36]	@ (8003224 <TP_Read+0x54>)
 80031fe:	f000 fc3f 	bl	8003a80 <HAL_GPIO_ReadPin>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <TP_Read+0x3e>
        {
            value++;
 8003208:	88bb      	ldrh	r3, [r7, #4]
 800320a:	3301      	adds	r3, #1
 800320c:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	3b01      	subs	r3, #1
 8003212:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1e2      	bne.n	80031e0 <TP_Read+0x10>
    };

    return value;
 800321a:	88bb      	ldrh	r3, [r7, #4]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40021000 	.word	0x40021000

08003228 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8003232:	2308      	movs	r3, #8
 8003234:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 8003236:	2200      	movs	r2, #0
 8003238:	2108      	movs	r1, #8
 800323a:	4815      	ldr	r0, [pc, #84]	@ (8003290 <TP_Write+0x68>)
 800323c:	f000 fc38 	bl	8003ab0 <HAL_GPIO_WritePin>
	
    while(i > 0)
 8003240:	e01e      	b.n	8003280 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	2b00      	cmp	r3, #0
 8003248:	da05      	bge.n	8003256 <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 800324a:	2201      	movs	r2, #1
 800324c:	2120      	movs	r1, #32
 800324e:	4810      	ldr	r0, [pc, #64]	@ (8003290 <TP_Write+0x68>)
 8003250:	f000 fc2e 	bl	8003ab0 <HAL_GPIO_WritePin>
 8003254:	e004      	b.n	8003260 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8003256:	2200      	movs	r2, #0
 8003258:	2120      	movs	r1, #32
 800325a:	480d      	ldr	r0, [pc, #52]	@ (8003290 <TP_Write+0x68>)
 800325c:	f000 fc28 	bl	8003ab0 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8003266:	2201      	movs	r2, #1
 8003268:	2108      	movs	r1, #8
 800326a:	4809      	ldr	r0, [pc, #36]	@ (8003290 <TP_Write+0x68>)
 800326c:	f000 fc20 	bl	8003ab0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 8003270:	2200      	movs	r2, #0
 8003272:	2108      	movs	r1, #8
 8003274:	4806      	ldr	r0, [pc, #24]	@ (8003290 <TP_Write+0x68>)
 8003276:	f000 fc1b 	bl	8003ab0 <HAL_GPIO_WritePin>
        i--;
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	3b01      	subs	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1dd      	bne.n	8003242 <TP_Write+0x1a>
    };
}
 8003286:	bf00      	nop
 8003288:	bf00      	nop
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40021000 	.word	0x40021000
 8003294:	00000000 	.word	0x00000000

08003298 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08a      	sub	sp, #40	@ 0x28
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 80032a0:	2201      	movs	r2, #1
 80032a2:	2108      	movs	r1, #8
 80032a4:	485a      	ldr	r0, [pc, #360]	@ (8003410 <TP_Read_Coordinates+0x178>)
 80032a6:	f000 fc03 	bl	8003ab0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 80032aa:	2201      	movs	r2, #1
 80032ac:	2120      	movs	r1, #32
 80032ae:	4858      	ldr	r0, [pc, #352]	@ (8003410 <TP_Read_Coordinates+0x178>)
 80032b0:	f000 fbfe 	bl	8003ab0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 80032b4:	2201      	movs	r2, #1
 80032b6:	2140      	movs	r1, #64	@ 0x40
 80032b8:	4855      	ldr	r0, [pc, #340]	@ (8003410 <TP_Read_Coordinates+0x178>)
 80032ba:	f000 fbf9 	bl	8003ab0 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 80032be:	2300      	movs	r3, #0
 80032c0:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 80032c2:	2300      	movs	r3, #0
 80032c4:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 80032ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032ce:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 80032d4:	2200      	movs	r2, #0
 80032d6:	2140      	movs	r1, #64	@ 0x40
 80032d8:	484d      	ldr	r0, [pc, #308]	@ (8003410 <TP_Read_Coordinates+0x178>)
 80032da:	f000 fbe9 	bl	8003ab0 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80032de:	e023      	b.n	8003328 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 80032e0:	2090      	movs	r0, #144	@ 0x90
 80032e2:	f7ff ffa1 	bl	8003228 <TP_Write>

				rawy = TP_Read();	
 80032e6:	f7ff ff73 	bl	80031d0 <TP_Read>
 80032ea:	4603      	mov	r3, r0
 80032ec:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 80032ee:	89fb      	ldrh	r3, [r7, #14]
 80032f0:	6a3a      	ldr	r2, [r7, #32]
 80032f2:	4413      	add	r3, r2
 80032f4:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 80032f6:	89fb      	ldrh	r3, [r7, #14]
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4413      	add	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 80032fe:	20d0      	movs	r0, #208	@ 0xd0
 8003300:	f7ff ff92 	bl	8003228 <TP_Write>
        rawx = TP_Read();
 8003304:	f7ff ff64 	bl	80031d0 <TP_Read>
 8003308:	4603      	mov	r3, r0
 800330a:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 800330c:	89bb      	ldrh	r3, [r7, #12]
 800330e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003310:	4413      	add	r3, r2
 8003312:	627b      	str	r3, [r7, #36]	@ 0x24
				calculating_x += rawx;
 8003314:	89bb      	ldrh	r3, [r7, #12]
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	4413      	add	r3, r2
 800331a:	61fb      	str	r3, [r7, #28]
        samples--;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	3b01      	subs	r3, #1
 8003320:	617b      	str	r3, [r7, #20]
				counted_samples++;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	3301      	adds	r3, #1
 8003326:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d006      	beq.n	800333c <TP_Read_Coordinates+0xa4>
 800332e:	2104      	movs	r1, #4
 8003330:	4837      	ldr	r0, [pc, #220]	@ (8003410 <TP_Read_Coordinates+0x178>)
 8003332:	f000 fba5 	bl	8003a80 <HAL_GPIO_ReadPin>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0d1      	beq.n	80032e0 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 800333c:	2201      	movs	r2, #1
 800333e:	2140      	movs	r1, #64	@ 0x40
 8003340:	4833      	ldr	r0, [pc, #204]	@ (8003410 <TP_Read_Coordinates+0x178>)
 8003342:	f000 fbb5 	bl	8003ab0 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800334c:	d14d      	bne.n	80033ea <TP_Read_Coordinates+0x152>
 800334e:	2104      	movs	r1, #4
 8003350:	482f      	ldr	r0, [pc, #188]	@ (8003410 <TP_Read_Coordinates+0x178>)
 8003352:	f000 fb95 	bl	8003a80 <HAL_GPIO_ReadPin>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d146      	bne.n	80033ea <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 800335c:	69fa      	ldr	r2, [r7, #28]
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	fbb2 f3f3 	udiv	r3, r2, r3
 8003364:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	fbb2 f3f3 	udiv	r3, r2, r3
 800336e:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8003378:	89bb      	ldrh	r3, [r7, #12]
 800337a:	425b      	negs	r3, r3
 800337c:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 800337e:	89fb      	ldrh	r3, [r7, #14]
 8003380:	425b      	negs	r3, r3
 8003382:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 8003384:	89ba      	ldrh	r2, [r7, #12]
 8003386:	4b23      	ldr	r3, [pc, #140]	@ (8003414 <TP_Read_Coordinates+0x17c>)
 8003388:	fba3 1302 	umull	r1, r3, r3, r2
 800338c:	1ad2      	subs	r2, r2, r3
 800338e:	0852      	lsrs	r2, r2, #1
 8003390:	4413      	add	r3, r2
 8003392:	0a1b      	lsrs	r3, r3, #8
 8003394:	b29b      	uxth	r3, r3
 8003396:	f1c3 03e3 	rsb	r3, r3, #227	@ 0xe3
 800339a:	ee07 3a90 	vmov	s15, r3
 800339e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80033a2:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 8003408 <TP_Read_Coordinates+0x170>
 80033a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80033aa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80033ae:	ee17 3a90 	vmov	r3, s15
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 80033b8:	89fb      	ldrh	r3, [r7, #14]
 80033ba:	4a17      	ldr	r2, [pc, #92]	@ (8003418 <TP_Read_Coordinates+0x180>)
 80033bc:	fba2 2303 	umull	r2, r3, r2, r3
 80033c0:	09db      	lsrs	r3, r3, #7
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b0f      	subs	r3, #15
 80033c6:	ee07 3a90 	vmov	s15, r3
 80033ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80033ce:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8003408 <TP_Read_Coordinates+0x170>
 80033d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3302      	adds	r3, #2
 80033da:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80033de:	ee17 2a90 	vmov	r2, s15
 80033e2:	b292      	uxth	r2, r2
 80033e4:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 80033e6:	2301      	movs	r3, #1
 80033e8:	e007      	b.n	80033fa <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3302      	adds	r3, #2
 80033f4:	2200      	movs	r2, #0
 80033f6:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 80033f8:	2300      	movs	r3, #0
		}
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3728      	adds	r7, #40	@ 0x28
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	f3af 8000 	nop.w
 8003408:	28f5c28f 	.word	0x28f5c28f
 800340c:	3ff28f5c 	.word	0x3ff28f5c
 8003410:	40021000 	.word	0x40021000
 8003414:	e01e01e1 	.word	0xe01e01e1
 8003418:	a0a0a0a1 	.word	0xa0a0a0a1

0800341c <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8003420:	2104      	movs	r1, #4
 8003422:	4805      	ldr	r0, [pc, #20]	@ (8003438 <TP_Touchpad_Pressed+0x1c>)
 8003424:	f000 fb2c 	bl	8003a80 <HAL_GPIO_ReadPin>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8003432:	2300      	movs	r3, #0
	}
}
 8003434:	4618      	mov	r0, r3
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40021000 	.word	0x40021000

0800343c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8003440:	4b0b      	ldr	r3, [pc, #44]	@ (8003470 <HAL_Init+0x34>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a0a      	ldr	r2, [pc, #40]	@ (8003470 <HAL_Init+0x34>)
 8003446:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800344a:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800344c:	4b08      	ldr	r3, [pc, #32]	@ (8003470 <HAL_Init+0x34>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a07      	ldr	r2, [pc, #28]	@ (8003470 <HAL_Init+0x34>)
 8003452:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003456:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003458:	2003      	movs	r0, #3
 800345a:	f000 f931 	bl	80036c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800345e:	2000      	movs	r0, #0
 8003460:	f000 f808 	bl	8003474 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003464:	f7fe fb28 	bl	8001ab8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40023c00 	.word	0x40023c00

08003474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800347c:	4b12      	ldr	r3, [pc, #72]	@ (80034c8 <HAL_InitTick+0x54>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4b12      	ldr	r3, [pc, #72]	@ (80034cc <HAL_InitTick+0x58>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	4619      	mov	r1, r3
 8003486:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800348a:	fbb3 f3f1 	udiv	r3, r3, r1
 800348e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f93b 	bl	800370e <HAL_SYSTICK_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e00e      	b.n	80034c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b0f      	cmp	r3, #15
 80034a6:	d80a      	bhi.n	80034be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034a8:	2200      	movs	r2, #0
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	f04f 30ff 	mov.w	r0, #4294967295
 80034b0:	f000 f911 	bl	80036d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034b4:	4a06      	ldr	r2, [pc, #24]	@ (80034d0 <HAL_InitTick+0x5c>)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e000      	b.n	80034c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	20000000 	.word	0x20000000
 80034cc:	2000000c 	.word	0x2000000c
 80034d0:	20000008 	.word	0x20000008

080034d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034d8:	4b06      	ldr	r3, [pc, #24]	@ (80034f4 <HAL_IncTick+0x20>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	461a      	mov	r2, r3
 80034de:	4b06      	ldr	r3, [pc, #24]	@ (80034f8 <HAL_IncTick+0x24>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4413      	add	r3, r2
 80034e4:	4a04      	ldr	r2, [pc, #16]	@ (80034f8 <HAL_IncTick+0x24>)
 80034e6:	6013      	str	r3, [r2, #0]
}
 80034e8:	bf00      	nop
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	2000000c 	.word	0x2000000c
 80034f8:	20000340 	.word	0x20000340

080034fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003500:	4b03      	ldr	r3, [pc, #12]	@ (8003510 <HAL_GetTick+0x14>)
 8003502:	681b      	ldr	r3, [r3, #0]
}
 8003504:	4618      	mov	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	20000340 	.word	0x20000340

08003514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800351c:	f7ff ffee 	bl	80034fc <HAL_GetTick>
 8003520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352c:	d005      	beq.n	800353a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800352e:	4b0a      	ldr	r3, [pc, #40]	@ (8003558 <HAL_Delay+0x44>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4413      	add	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800353a:	bf00      	nop
 800353c:	f7ff ffde 	bl	80034fc <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	429a      	cmp	r2, r3
 800354a:	d8f7      	bhi.n	800353c <HAL_Delay+0x28>
  {
  }
}
 800354c:	bf00      	nop
 800354e:	bf00      	nop
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	2000000c 	.word	0x2000000c

0800355c <__NVIC_SetPriorityGrouping>:
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800356c:	4b0b      	ldr	r3, [pc, #44]	@ (800359c <__NVIC_SetPriorityGrouping+0x40>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003578:	4013      	ands	r3, r2
 800357a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003584:	4b06      	ldr	r3, [pc, #24]	@ (80035a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003586:	4313      	orrs	r3, r2
 8003588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800358a:	4a04      	ldr	r2, [pc, #16]	@ (800359c <__NVIC_SetPriorityGrouping+0x40>)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	60d3      	str	r3, [r2, #12]
}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000ed00 	.word	0xe000ed00
 80035a0:	05fa0000 	.word	0x05fa0000

080035a4 <__NVIC_GetPriorityGrouping>:
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035a8:	4b04      	ldr	r3, [pc, #16]	@ (80035bc <__NVIC_GetPriorityGrouping+0x18>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	0a1b      	lsrs	r3, r3, #8
 80035ae:	f003 0307 	and.w	r3, r3, #7
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	e000ed00 	.word	0xe000ed00

080035c0 <__NVIC_SetPriority>:
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	6039      	str	r1, [r7, #0]
 80035ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	db0a      	blt.n	80035ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	490c      	ldr	r1, [pc, #48]	@ (800360c <__NVIC_SetPriority+0x4c>)
 80035da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035de:	0112      	lsls	r2, r2, #4
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	440b      	add	r3, r1
 80035e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80035e8:	e00a      	b.n	8003600 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	4908      	ldr	r1, [pc, #32]	@ (8003610 <__NVIC_SetPriority+0x50>)
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	3b04      	subs	r3, #4
 80035f8:	0112      	lsls	r2, r2, #4
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	440b      	add	r3, r1
 80035fe:	761a      	strb	r2, [r3, #24]
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	e000e100 	.word	0xe000e100
 8003610:	e000ed00 	.word	0xe000ed00

08003614 <NVIC_EncodePriority>:
{
 8003614:	b480      	push	{r7}
 8003616:	b089      	sub	sp, #36	@ 0x24
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f1c3 0307 	rsb	r3, r3, #7
 800362e:	2b04      	cmp	r3, #4
 8003630:	bf28      	it	cs
 8003632:	2304      	movcs	r3, #4
 8003634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	3304      	adds	r3, #4
 800363a:	2b06      	cmp	r3, #6
 800363c:	d902      	bls.n	8003644 <NVIC_EncodePriority+0x30>
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	3b03      	subs	r3, #3
 8003642:	e000      	b.n	8003646 <NVIC_EncodePriority+0x32>
 8003644:	2300      	movs	r3, #0
 8003646:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003648:	f04f 32ff 	mov.w	r2, #4294967295
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43da      	mvns	r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	401a      	ands	r2, r3
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800365c:	f04f 31ff 	mov.w	r1, #4294967295
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	fa01 f303 	lsl.w	r3, r1, r3
 8003666:	43d9      	mvns	r1, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800366c:	4313      	orrs	r3, r2
}
 800366e:	4618      	mov	r0, r3
 8003670:	3724      	adds	r7, #36	@ 0x24
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
	...

0800367c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3b01      	subs	r3, #1
 8003688:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800368c:	d301      	bcc.n	8003692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800368e:	2301      	movs	r3, #1
 8003690:	e00f      	b.n	80036b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003692:	4a0a      	ldr	r2, [pc, #40]	@ (80036bc <SysTick_Config+0x40>)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3b01      	subs	r3, #1
 8003698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800369a:	210f      	movs	r1, #15
 800369c:	f04f 30ff 	mov.w	r0, #4294967295
 80036a0:	f7ff ff8e 	bl	80035c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036a4:	4b05      	ldr	r3, [pc, #20]	@ (80036bc <SysTick_Config+0x40>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036aa:	4b04      	ldr	r3, [pc, #16]	@ (80036bc <SysTick_Config+0x40>)
 80036ac:	2207      	movs	r2, #7
 80036ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	e000e010 	.word	0xe000e010

080036c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff ff47 	bl	800355c <__NVIC_SetPriorityGrouping>
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b086      	sub	sp, #24
 80036da:	af00      	add	r7, sp, #0
 80036dc:	4603      	mov	r3, r0
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	607a      	str	r2, [r7, #4]
 80036e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036e8:	f7ff ff5c 	bl	80035a4 <__NVIC_GetPriorityGrouping>
 80036ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	6978      	ldr	r0, [r7, #20]
 80036f4:	f7ff ff8e 	bl	8003614 <NVIC_EncodePriority>
 80036f8:	4602      	mov	r2, r0
 80036fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036fe:	4611      	mov	r1, r2
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff ff5d 	bl	80035c0 <__NVIC_SetPriority>
}
 8003706:	bf00      	nop
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b082      	sub	sp, #8
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff ffb0 	bl	800367c <SysTick_Config>
 800371c:	4603      	mov	r3, r0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003728:	b480      	push	{r7}
 800372a:	b089      	sub	sp, #36	@ 0x24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800373a:	2300      	movs	r3, #0
 800373c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800373e:	2300      	movs	r3, #0
 8003740:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003742:	2300      	movs	r3, #0
 8003744:	61fb      	str	r3, [r7, #28]
 8003746:	e175      	b.n	8003a34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003748:	2201      	movs	r2, #1
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	4013      	ands	r3, r2
 800375a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	429a      	cmp	r2, r3
 8003762:	f040 8164 	bne.w	8003a2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d00b      	beq.n	8003786 <HAL_GPIO_Init+0x5e>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d007      	beq.n	8003786 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800377a:	2b11      	cmp	r3, #17
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b12      	cmp	r3, #18
 8003784:	d130      	bne.n	80037e8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	2203      	movs	r2, #3
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4013      	ands	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037bc:	2201      	movs	r2, #1
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4013      	ands	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 0201 	and.w	r2, r3, #1
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	2203      	movs	r2, #3
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	43db      	mvns	r3, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4013      	ands	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d003      	beq.n	8003828 <HAL_GPIO_Init+0x100>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b12      	cmp	r3, #18
 8003826:	d123      	bne.n	8003870 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	08da      	lsrs	r2, r3, #3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3208      	adds	r2, #8
 8003830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	220f      	movs	r2, #15
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4013      	ands	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	4313      	orrs	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	08da      	lsrs	r2, r3, #3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3208      	adds	r2, #8
 800386a:	69b9      	ldr	r1, [r7, #24]
 800386c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	2203      	movs	r2, #3
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 0203 	and.w	r2, r3, #3
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4313      	orrs	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80be 	beq.w	8003a2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038b2:	4b66      	ldr	r3, [pc, #408]	@ (8003a4c <HAL_GPIO_Init+0x324>)
 80038b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b6:	4a65      	ldr	r2, [pc, #404]	@ (8003a4c <HAL_GPIO_Init+0x324>)
 80038b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80038be:	4b63      	ldr	r3, [pc, #396]	@ (8003a4c <HAL_GPIO_Init+0x324>)
 80038c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80038ca:	4a61      	ldr	r2, [pc, #388]	@ (8003a50 <HAL_GPIO_Init+0x328>)
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	089b      	lsrs	r3, r3, #2
 80038d0:	3302      	adds	r3, #2
 80038d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	220f      	movs	r2, #15
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	43db      	mvns	r3, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4013      	ands	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a58      	ldr	r2, [pc, #352]	@ (8003a54 <HAL_GPIO_Init+0x32c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d037      	beq.n	8003966 <HAL_GPIO_Init+0x23e>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a57      	ldr	r2, [pc, #348]	@ (8003a58 <HAL_GPIO_Init+0x330>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d031      	beq.n	8003962 <HAL_GPIO_Init+0x23a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a56      	ldr	r2, [pc, #344]	@ (8003a5c <HAL_GPIO_Init+0x334>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d02b      	beq.n	800395e <HAL_GPIO_Init+0x236>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a55      	ldr	r2, [pc, #340]	@ (8003a60 <HAL_GPIO_Init+0x338>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d025      	beq.n	800395a <HAL_GPIO_Init+0x232>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a54      	ldr	r2, [pc, #336]	@ (8003a64 <HAL_GPIO_Init+0x33c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d01f      	beq.n	8003956 <HAL_GPIO_Init+0x22e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a53      	ldr	r2, [pc, #332]	@ (8003a68 <HAL_GPIO_Init+0x340>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d019      	beq.n	8003952 <HAL_GPIO_Init+0x22a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a52      	ldr	r2, [pc, #328]	@ (8003a6c <HAL_GPIO_Init+0x344>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d013      	beq.n	800394e <HAL_GPIO_Init+0x226>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a51      	ldr	r2, [pc, #324]	@ (8003a70 <HAL_GPIO_Init+0x348>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00d      	beq.n	800394a <HAL_GPIO_Init+0x222>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a50      	ldr	r2, [pc, #320]	@ (8003a74 <HAL_GPIO_Init+0x34c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d007      	beq.n	8003946 <HAL_GPIO_Init+0x21e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a4f      	ldr	r2, [pc, #316]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d101      	bne.n	8003942 <HAL_GPIO_Init+0x21a>
 800393e:	2309      	movs	r3, #9
 8003940:	e012      	b.n	8003968 <HAL_GPIO_Init+0x240>
 8003942:	230a      	movs	r3, #10
 8003944:	e010      	b.n	8003968 <HAL_GPIO_Init+0x240>
 8003946:	2308      	movs	r3, #8
 8003948:	e00e      	b.n	8003968 <HAL_GPIO_Init+0x240>
 800394a:	2307      	movs	r3, #7
 800394c:	e00c      	b.n	8003968 <HAL_GPIO_Init+0x240>
 800394e:	2306      	movs	r3, #6
 8003950:	e00a      	b.n	8003968 <HAL_GPIO_Init+0x240>
 8003952:	2305      	movs	r3, #5
 8003954:	e008      	b.n	8003968 <HAL_GPIO_Init+0x240>
 8003956:	2304      	movs	r3, #4
 8003958:	e006      	b.n	8003968 <HAL_GPIO_Init+0x240>
 800395a:	2303      	movs	r3, #3
 800395c:	e004      	b.n	8003968 <HAL_GPIO_Init+0x240>
 800395e:	2302      	movs	r3, #2
 8003960:	e002      	b.n	8003968 <HAL_GPIO_Init+0x240>
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <HAL_GPIO_Init+0x240>
 8003966:	2300      	movs	r3, #0
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	f002 0203 	and.w	r2, r2, #3
 800396e:	0092      	lsls	r2, r2, #2
 8003970:	4093      	lsls	r3, r2
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4313      	orrs	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003978:	4935      	ldr	r1, [pc, #212]	@ (8003a50 <HAL_GPIO_Init+0x328>)
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	089b      	lsrs	r3, r3, #2
 800397e:	3302      	adds	r3, #2
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003986:	4b3d      	ldr	r3, [pc, #244]	@ (8003a7c <HAL_GPIO_Init+0x354>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	43db      	mvns	r3, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4013      	ands	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039aa:	4a34      	ldr	r2, [pc, #208]	@ (8003a7c <HAL_GPIO_Init+0x354>)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039b0:	4b32      	ldr	r3, [pc, #200]	@ (8003a7c <HAL_GPIO_Init+0x354>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039d4:	4a29      	ldr	r2, [pc, #164]	@ (8003a7c <HAL_GPIO_Init+0x354>)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039da:	4b28      	ldr	r3, [pc, #160]	@ (8003a7c <HAL_GPIO_Init+0x354>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	43db      	mvns	r3, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4013      	ands	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039fe:	4a1f      	ldr	r2, [pc, #124]	@ (8003a7c <HAL_GPIO_Init+0x354>)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a04:	4b1d      	ldr	r3, [pc, #116]	@ (8003a7c <HAL_GPIO_Init+0x354>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a28:	4a14      	ldr	r2, [pc, #80]	@ (8003a7c <HAL_GPIO_Init+0x354>)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	3301      	adds	r3, #1
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	2b0f      	cmp	r3, #15
 8003a38:	f67f ae86 	bls.w	8003748 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003a3c:	bf00      	nop
 8003a3e:	bf00      	nop
 8003a40:	3724      	adds	r7, #36	@ 0x24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	40013800 	.word	0x40013800
 8003a54:	40020000 	.word	0x40020000
 8003a58:	40020400 	.word	0x40020400
 8003a5c:	40020800 	.word	0x40020800
 8003a60:	40020c00 	.word	0x40020c00
 8003a64:	40021000 	.word	0x40021000
 8003a68:	40021400 	.word	0x40021400
 8003a6c:	40021800 	.word	0x40021800
 8003a70:	40021c00 	.word	0x40021c00
 8003a74:	40022000 	.word	0x40022000
 8003a78:	40022400 	.word	0x40022400
 8003a7c:	40013c00 	.word	0x40013c00

08003a80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	887b      	ldrh	r3, [r7, #2]
 8003a92:	4013      	ands	r3, r2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
 8003a9c:	e001      	b.n	8003aa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	807b      	strh	r3, [r7, #2]
 8003abc:	4613      	mov	r3, r2
 8003abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ac0:	787b      	ldrb	r3, [r7, #1]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ac6:	887a      	ldrh	r2, [r7, #2]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003acc:	e003      	b.n	8003ad6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003ace:	887b      	ldrh	r3, [r7, #2]
 8003ad0:	041a      	lsls	r2, r3, #16
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	619a      	str	r2, [r3, #24]
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
	...

08003ae4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ae8:	4b05      	ldr	r3, [pc, #20]	@ (8003b00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a04      	ldr	r2, [pc, #16]	@ (8003b00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003aee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af2:	6013      	str	r3, [r2, #0]
}
 8003af4:	bf00      	nop
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	40007000 	.word	0x40007000

08003b04 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b0e:	4b23      	ldr	r3, [pc, #140]	@ (8003b9c <HAL_PWREx_EnableOverDrive+0x98>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	4a22      	ldr	r2, [pc, #136]	@ (8003b9c <HAL_PWREx_EnableOverDrive+0x98>)
 8003b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b1a:	4b20      	ldr	r3, [pc, #128]	@ (8003b9c <HAL_PWREx_EnableOverDrive+0x98>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b26:	4b1e      	ldr	r3, [pc, #120]	@ (8003ba0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ba0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b30:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b32:	f7ff fce3 	bl	80034fc <HAL_GetTick>
 8003b36:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b38:	e009      	b.n	8003b4e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b3a:	f7ff fcdf 	bl	80034fc <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b48:	d901      	bls.n	8003b4e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e022      	b.n	8003b94 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b4e:	4b14      	ldr	r3, [pc, #80]	@ (8003ba0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b5a:	d1ee      	bne.n	8003b3a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b5c:	4b10      	ldr	r3, [pc, #64]	@ (8003ba0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a0f      	ldr	r2, [pc, #60]	@ (8003ba0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b68:	f7ff fcc8 	bl	80034fc <HAL_GetTick>
 8003b6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b6e:	e009      	b.n	8003b84 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b70:	f7ff fcc4 	bl	80034fc <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b7e:	d901      	bls.n	8003b84 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e007      	b.n	8003b94 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b84:	4b06      	ldr	r3, [pc, #24]	@ (8003ba0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b90:	d1ee      	bne.n	8003b70 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	40007000 	.word	0x40007000

08003ba4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003bac:	2300      	movs	r3, #0
 8003bae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e29b      	b.n	80040f2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 8087 	beq.w	8003cd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bc8:	4b96      	ldr	r3, [pc, #600]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 030c 	and.w	r3, r3, #12
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d00c      	beq.n	8003bee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bd4:	4b93      	ldr	r3, [pc, #588]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 030c 	and.w	r3, r3, #12
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d112      	bne.n	8003c06 <HAL_RCC_OscConfig+0x62>
 8003be0:	4b90      	ldr	r3, [pc, #576]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003be8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bec:	d10b      	bne.n	8003c06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bee:	4b8d      	ldr	r3, [pc, #564]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d06c      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x130>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d168      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e275      	b.n	80040f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c0e:	d106      	bne.n	8003c1e <HAL_RCC_OscConfig+0x7a>
 8003c10:	4b84      	ldr	r3, [pc, #528]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a83      	ldr	r2, [pc, #524]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003c16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	e02e      	b.n	8003c7c <HAL_RCC_OscConfig+0xd8>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10c      	bne.n	8003c40 <HAL_RCC_OscConfig+0x9c>
 8003c26:	4b7f      	ldr	r3, [pc, #508]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003c2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	4b7c      	ldr	r3, [pc, #496]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a7b      	ldr	r2, [pc, #492]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003c38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	e01d      	b.n	8003c7c <HAL_RCC_OscConfig+0xd8>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c48:	d10c      	bne.n	8003c64 <HAL_RCC_OscConfig+0xc0>
 8003c4a:	4b76      	ldr	r3, [pc, #472]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a75      	ldr	r2, [pc, #468]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003c50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	4b73      	ldr	r3, [pc, #460]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a72      	ldr	r2, [pc, #456]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	e00b      	b.n	8003c7c <HAL_RCC_OscConfig+0xd8>
 8003c64:	4b6f      	ldr	r3, [pc, #444]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a6e      	ldr	r2, [pc, #440]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003c6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	4b6c      	ldr	r3, [pc, #432]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a6b      	ldr	r2, [pc, #428]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003c76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d013      	beq.n	8003cac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c84:	f7ff fc3a 	bl	80034fc <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c8c:	f7ff fc36 	bl	80034fc <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b64      	cmp	r3, #100	@ 0x64
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e229      	b.n	80040f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9e:	4b61      	ldr	r3, [pc, #388]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0f0      	beq.n	8003c8c <HAL_RCC_OscConfig+0xe8>
 8003caa:	e014      	b.n	8003cd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cac:	f7ff fc26 	bl	80034fc <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb4:	f7ff fc22 	bl	80034fc <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	@ 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e215      	b.n	80040f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc6:	4b57      	ldr	r3, [pc, #348]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x110>
 8003cd2:	e000      	b.n	8003cd6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d069      	beq.n	8003db6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ce2:	4b50      	ldr	r3, [pc, #320]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00b      	beq.n	8003d06 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cee:	4b4d      	ldr	r3, [pc, #308]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d11c      	bne.n	8003d34 <HAL_RCC_OscConfig+0x190>
 8003cfa:	4b4a      	ldr	r3, [pc, #296]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d116      	bne.n	8003d34 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d06:	4b47      	ldr	r3, [pc, #284]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d005      	beq.n	8003d1e <HAL_RCC_OscConfig+0x17a>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d001      	beq.n	8003d1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e1e9      	b.n	80040f2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d1e:	4b41      	ldr	r3, [pc, #260]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	493d      	ldr	r1, [pc, #244]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d32:	e040      	b.n	8003db6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d023      	beq.n	8003d84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d3c:	4b39      	ldr	r3, [pc, #228]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a38      	ldr	r2, [pc, #224]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7ff fbd8 	bl	80034fc <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d50:	f7ff fbd4 	bl	80034fc <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e1c7      	b.n	80040f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d62:	4b30      	ldr	r3, [pc, #192]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0f0      	beq.n	8003d50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	4929      	ldr	r1, [pc, #164]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	600b      	str	r3, [r1, #0]
 8003d82:	e018      	b.n	8003db6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d84:	4b27      	ldr	r3, [pc, #156]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a26      	ldr	r2, [pc, #152]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003d8a:	f023 0301 	bic.w	r3, r3, #1
 8003d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7ff fbb4 	bl	80034fc <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d98:	f7ff fbb0 	bl	80034fc <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e1a3      	b.n	80040f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003daa:	4b1e      	ldr	r3, [pc, #120]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d038      	beq.n	8003e34 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d019      	beq.n	8003dfe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dca:	4b16      	ldr	r3, [pc, #88]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003dcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dce:	4a15      	ldr	r2, [pc, #84]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd6:	f7ff fb91 	bl	80034fc <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dde:	f7ff fb8d 	bl	80034fc <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e180      	b.n	80040f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df0:	4b0c      	ldr	r3, [pc, #48]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003df2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0f0      	beq.n	8003dde <HAL_RCC_OscConfig+0x23a>
 8003dfc:	e01a      	b.n	8003e34 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dfe:	4b09      	ldr	r3, [pc, #36]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e02:	4a08      	ldr	r2, [pc, #32]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0a:	f7ff fb77 	bl	80034fc <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e10:	e00a      	b.n	8003e28 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e12:	f7ff fb73 	bl	80034fc <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d903      	bls.n	8003e28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e166      	b.n	80040f2 <HAL_RCC_OscConfig+0x54e>
 8003e24:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e28:	4b92      	ldr	r3, [pc, #584]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003e2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1ee      	bne.n	8003e12 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 80a4 	beq.w	8003f8a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e42:	4b8c      	ldr	r3, [pc, #560]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10d      	bne.n	8003e6a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e4e:	4b89      	ldr	r3, [pc, #548]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	4a88      	ldr	r2, [pc, #544]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e5a:	4b86      	ldr	r3, [pc, #536]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e62:	60bb      	str	r3, [r7, #8]
 8003e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e66:	2301      	movs	r3, #1
 8003e68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e6a:	4b83      	ldr	r3, [pc, #524]	@ (8004078 <HAL_RCC_OscConfig+0x4d4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d118      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e76:	4b80      	ldr	r3, [pc, #512]	@ (8004078 <HAL_RCC_OscConfig+0x4d4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a7f      	ldr	r2, [pc, #508]	@ (8004078 <HAL_RCC_OscConfig+0x4d4>)
 8003e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e82:	f7ff fb3b 	bl	80034fc <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e8a:	f7ff fb37 	bl	80034fc <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b64      	cmp	r3, #100	@ 0x64
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e12a      	b.n	80040f2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e9c:	4b76      	ldr	r3, [pc, #472]	@ (8004078 <HAL_RCC_OscConfig+0x4d4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f0      	beq.n	8003e8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d106      	bne.n	8003ebe <HAL_RCC_OscConfig+0x31a>
 8003eb0:	4b70      	ldr	r3, [pc, #448]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb4:	4a6f      	ldr	r2, [pc, #444]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003eb6:	f043 0301 	orr.w	r3, r3, #1
 8003eba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ebc:	e02d      	b.n	8003f1a <HAL_RCC_OscConfig+0x376>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10c      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x33c>
 8003ec6:	4b6b      	ldr	r3, [pc, #428]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eca:	4a6a      	ldr	r2, [pc, #424]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003ecc:	f023 0301 	bic.w	r3, r3, #1
 8003ed0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ed2:	4b68      	ldr	r3, [pc, #416]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed6:	4a67      	ldr	r2, [pc, #412]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003ed8:	f023 0304 	bic.w	r3, r3, #4
 8003edc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ede:	e01c      	b.n	8003f1a <HAL_RCC_OscConfig+0x376>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	2b05      	cmp	r3, #5
 8003ee6:	d10c      	bne.n	8003f02 <HAL_RCC_OscConfig+0x35e>
 8003ee8:	4b62      	ldr	r3, [pc, #392]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eec:	4a61      	ldr	r2, [pc, #388]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003eee:	f043 0304 	orr.w	r3, r3, #4
 8003ef2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ef4:	4b5f      	ldr	r3, [pc, #380]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef8:	4a5e      	ldr	r2, [pc, #376]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f00:	e00b      	b.n	8003f1a <HAL_RCC_OscConfig+0x376>
 8003f02:	4b5c      	ldr	r3, [pc, #368]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f06:	4a5b      	ldr	r2, [pc, #364]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003f08:	f023 0301 	bic.w	r3, r3, #1
 8003f0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f0e:	4b59      	ldr	r3, [pc, #356]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f12:	4a58      	ldr	r2, [pc, #352]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003f14:	f023 0304 	bic.w	r3, r3, #4
 8003f18:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d015      	beq.n	8003f4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f22:	f7ff faeb 	bl	80034fc <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f28:	e00a      	b.n	8003f40 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f2a:	f7ff fae7 	bl	80034fc <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e0d8      	b.n	80040f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f40:	4b4c      	ldr	r3, [pc, #304]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0ee      	beq.n	8003f2a <HAL_RCC_OscConfig+0x386>
 8003f4c:	e014      	b.n	8003f78 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4e:	f7ff fad5 	bl	80034fc <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f54:	e00a      	b.n	8003f6c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f56:	f7ff fad1 	bl	80034fc <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e0c2      	b.n	80040f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f6c:	4b41      	ldr	r3, [pc, #260]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1ee      	bne.n	8003f56 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f78:	7dfb      	ldrb	r3, [r7, #23]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d105      	bne.n	8003f8a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f7e:	4b3d      	ldr	r3, [pc, #244]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f82:	4a3c      	ldr	r2, [pc, #240]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003f84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f88:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 80ae 	beq.w	80040f0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f94:	4b37      	ldr	r3, [pc, #220]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 030c 	and.w	r3, r3, #12
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d06d      	beq.n	800407c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d14b      	bne.n	8004040 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa8:	4b32      	ldr	r3, [pc, #200]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a31      	ldr	r2, [pc, #196]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003fae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb4:	f7ff faa2 	bl	80034fc <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7ff fa9e 	bl	80034fc <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e091      	b.n	80040f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fce:	4b29      	ldr	r3, [pc, #164]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69da      	ldr	r2, [r3, #28]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe8:	019b      	lsls	r3, r3, #6
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff0:	085b      	lsrs	r3, r3, #1
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	041b      	lsls	r3, r3, #16
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffc:	061b      	lsls	r3, r3, #24
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004004:	071b      	lsls	r3, r3, #28
 8004006:	491b      	ldr	r1, [pc, #108]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8004008:	4313      	orrs	r3, r2
 800400a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800400c:	4b19      	ldr	r3, [pc, #100]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a18      	ldr	r2, [pc, #96]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8004012:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7ff fa70 	bl	80034fc <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004020:	f7ff fa6c 	bl	80034fc <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e05f      	b.n	80040f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004032:	4b10      	ldr	r3, [pc, #64]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0x47c>
 800403e:	e057      	b.n	80040f0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004040:	4b0c      	ldr	r3, [pc, #48]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a0b      	ldr	r2, [pc, #44]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8004046:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800404a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404c:	f7ff fa56 	bl	80034fc <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004054:	f7ff fa52 	bl	80034fc <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e045      	b.n	80040f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004066:	4b03      	ldr	r3, [pc, #12]	@ (8004074 <HAL_RCC_OscConfig+0x4d0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0x4b0>
 8004072:	e03d      	b.n	80040f0 <HAL_RCC_OscConfig+0x54c>
 8004074:	40023800 	.word	0x40023800
 8004078:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800407c:	4b1f      	ldr	r3, [pc, #124]	@ (80040fc <HAL_RCC_OscConfig+0x558>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d030      	beq.n	80040ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004094:	429a      	cmp	r2, r3
 8004096:	d129      	bne.n	80040ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d122      	bne.n	80040ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040ac:	4013      	ands	r3, r2
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d119      	bne.n	80040ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c2:	085b      	lsrs	r3, r3, #1
 80040c4:	3b01      	subs	r3, #1
 80040c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d10f      	bne.n	80040ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040d8:	429a      	cmp	r2, r3
 80040da:	d107      	bne.n	80040ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d001      	beq.n	80040f0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e000      	b.n	80040f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40023800 	.word	0x40023800

08004100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0d0      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004118:	4b6a      	ldr	r3, [pc, #424]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 030f 	and.w	r3, r3, #15
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d910      	bls.n	8004148 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004126:	4b67      	ldr	r3, [pc, #412]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f023 020f 	bic.w	r2, r3, #15
 800412e:	4965      	ldr	r1, [pc, #404]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	4313      	orrs	r3, r2
 8004134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004136:	4b63      	ldr	r3, [pc, #396]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d001      	beq.n	8004148 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0b8      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d020      	beq.n	8004196 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004160:	4b59      	ldr	r3, [pc, #356]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	4a58      	ldr	r2, [pc, #352]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004166:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800416a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004178:	4b53      	ldr	r3, [pc, #332]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	4a52      	ldr	r2, [pc, #328]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 800417e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004182:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004184:	4b50      	ldr	r3, [pc, #320]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	494d      	ldr	r1, [pc, #308]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004192:	4313      	orrs	r3, r2
 8004194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d040      	beq.n	8004224 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d107      	bne.n	80041ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041aa:	4b47      	ldr	r3, [pc, #284]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d115      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e07f      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d107      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c2:	4b41      	ldr	r3, [pc, #260]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d109      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e073      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d2:	4b3d      	ldr	r3, [pc, #244]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e06b      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041e2:	4b39      	ldr	r3, [pc, #228]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f023 0203 	bic.w	r2, r3, #3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	4936      	ldr	r1, [pc, #216]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f4:	f7ff f982 	bl	80034fc <HAL_GetTick>
 80041f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fa:	e00a      	b.n	8004212 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041fc:	f7ff f97e 	bl	80034fc <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800420a:	4293      	cmp	r3, r2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e053      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004212:	4b2d      	ldr	r3, [pc, #180]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 020c 	and.w	r2, r3, #12
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	429a      	cmp	r2, r3
 8004222:	d1eb      	bne.n	80041fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004224:	4b27      	ldr	r3, [pc, #156]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d210      	bcs.n	8004254 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004232:	4b24      	ldr	r3, [pc, #144]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f023 020f 	bic.w	r2, r3, #15
 800423a:	4922      	ldr	r1, [pc, #136]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	4313      	orrs	r3, r2
 8004240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004242:	4b20      	ldr	r3, [pc, #128]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d001      	beq.n	8004254 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e032      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004260:	4b19      	ldr	r3, [pc, #100]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	4916      	ldr	r1, [pc, #88]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 800426e:	4313      	orrs	r3, r2
 8004270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800427e:	4b12      	ldr	r3, [pc, #72]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	490e      	ldr	r1, [pc, #56]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004292:	f000 f821 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
 8004296:	4602      	mov	r2, r0
 8004298:	4b0b      	ldr	r3, [pc, #44]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	490a      	ldr	r1, [pc, #40]	@ (80042cc <HAL_RCC_ClockConfig+0x1cc>)
 80042a4:	5ccb      	ldrb	r3, [r1, r3]
 80042a6:	fa22 f303 	lsr.w	r3, r2, r3
 80042aa:	4a09      	ldr	r2, [pc, #36]	@ (80042d0 <HAL_RCC_ClockConfig+0x1d0>)
 80042ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042ae:	4b09      	ldr	r3, [pc, #36]	@ (80042d4 <HAL_RCC_ClockConfig+0x1d4>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff f8de 	bl	8003474 <HAL_InitTick>

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40023c00 	.word	0x40023c00
 80042c8:	40023800 	.word	0x40023800
 80042cc:	0802ea78 	.word	0x0802ea78
 80042d0:	20000000 	.word	0x20000000
 80042d4:	20000008 	.word	0x20000008

080042d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042dc:	b094      	sub	sp, #80	@ 0x50
 80042de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80042e0:	2300      	movs	r3, #0
 80042e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80042e4:	2300      	movs	r3, #0
 80042e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042e8:	2300      	movs	r3, #0
 80042ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042f0:	4b79      	ldr	r3, [pc, #484]	@ (80044d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 030c 	and.w	r3, r3, #12
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d00d      	beq.n	8004318 <HAL_RCC_GetSysClockFreq+0x40>
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	f200 80e1 	bhi.w	80044c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_RCC_GetSysClockFreq+0x34>
 8004306:	2b04      	cmp	r3, #4
 8004308:	d003      	beq.n	8004312 <HAL_RCC_GetSysClockFreq+0x3a>
 800430a:	e0db      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800430c:	4b73      	ldr	r3, [pc, #460]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x204>)
 800430e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004310:	e0db      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004312:	4b73      	ldr	r3, [pc, #460]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004314:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004316:	e0d8      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004318:	4b6f      	ldr	r3, [pc, #444]	@ (80044d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004320:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004322:	4b6d      	ldr	r3, [pc, #436]	@ (80044d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d063      	beq.n	80043f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800432e:	4b6a      	ldr	r3, [pc, #424]	@ (80044d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	099b      	lsrs	r3, r3, #6
 8004334:	2200      	movs	r2, #0
 8004336:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004338:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800433a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800433c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004340:	633b      	str	r3, [r7, #48]	@ 0x30
 8004342:	2300      	movs	r3, #0
 8004344:	637b      	str	r3, [r7, #52]	@ 0x34
 8004346:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800434a:	4622      	mov	r2, r4
 800434c:	462b      	mov	r3, r5
 800434e:	f04f 0000 	mov.w	r0, #0
 8004352:	f04f 0100 	mov.w	r1, #0
 8004356:	0159      	lsls	r1, r3, #5
 8004358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800435c:	0150      	lsls	r0, r2, #5
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	4621      	mov	r1, r4
 8004364:	1a51      	subs	r1, r2, r1
 8004366:	6139      	str	r1, [r7, #16]
 8004368:	4629      	mov	r1, r5
 800436a:	eb63 0301 	sbc.w	r3, r3, r1
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800437c:	4659      	mov	r1, fp
 800437e:	018b      	lsls	r3, r1, #6
 8004380:	4651      	mov	r1, sl
 8004382:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004386:	4651      	mov	r1, sl
 8004388:	018a      	lsls	r2, r1, #6
 800438a:	4651      	mov	r1, sl
 800438c:	ebb2 0801 	subs.w	r8, r2, r1
 8004390:	4659      	mov	r1, fp
 8004392:	eb63 0901 	sbc.w	r9, r3, r1
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	f04f 0300 	mov.w	r3, #0
 800439e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043aa:	4690      	mov	r8, r2
 80043ac:	4699      	mov	r9, r3
 80043ae:	4623      	mov	r3, r4
 80043b0:	eb18 0303 	adds.w	r3, r8, r3
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	462b      	mov	r3, r5
 80043b8:	eb49 0303 	adc.w	r3, r9, r3
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043ca:	4629      	mov	r1, r5
 80043cc:	024b      	lsls	r3, r1, #9
 80043ce:	4621      	mov	r1, r4
 80043d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043d4:	4621      	mov	r1, r4
 80043d6:	024a      	lsls	r2, r1, #9
 80043d8:	4610      	mov	r0, r2
 80043da:	4619      	mov	r1, r3
 80043dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043de:	2200      	movs	r2, #0
 80043e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043e8:	f7fb ff82 	bl	80002f0 <__aeabi_uldivmod>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4613      	mov	r3, r2
 80043f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043f4:	e058      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043f6:	4b38      	ldr	r3, [pc, #224]	@ (80044d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	099b      	lsrs	r3, r3, #6
 80043fc:	2200      	movs	r2, #0
 80043fe:	4618      	mov	r0, r3
 8004400:	4611      	mov	r1, r2
 8004402:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004406:	623b      	str	r3, [r7, #32]
 8004408:	2300      	movs	r3, #0
 800440a:	627b      	str	r3, [r7, #36]	@ 0x24
 800440c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004410:	4642      	mov	r2, r8
 8004412:	464b      	mov	r3, r9
 8004414:	f04f 0000 	mov.w	r0, #0
 8004418:	f04f 0100 	mov.w	r1, #0
 800441c:	0159      	lsls	r1, r3, #5
 800441e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004422:	0150      	lsls	r0, r2, #5
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4641      	mov	r1, r8
 800442a:	ebb2 0a01 	subs.w	sl, r2, r1
 800442e:	4649      	mov	r1, r9
 8004430:	eb63 0b01 	sbc.w	fp, r3, r1
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004440:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004444:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004448:	ebb2 040a 	subs.w	r4, r2, sl
 800444c:	eb63 050b 	sbc.w	r5, r3, fp
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	00eb      	lsls	r3, r5, #3
 800445a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800445e:	00e2      	lsls	r2, r4, #3
 8004460:	4614      	mov	r4, r2
 8004462:	461d      	mov	r5, r3
 8004464:	4643      	mov	r3, r8
 8004466:	18e3      	adds	r3, r4, r3
 8004468:	603b      	str	r3, [r7, #0]
 800446a:	464b      	mov	r3, r9
 800446c:	eb45 0303 	adc.w	r3, r5, r3
 8004470:	607b      	str	r3, [r7, #4]
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800447e:	4629      	mov	r1, r5
 8004480:	028b      	lsls	r3, r1, #10
 8004482:	4621      	mov	r1, r4
 8004484:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004488:	4621      	mov	r1, r4
 800448a:	028a      	lsls	r2, r1, #10
 800448c:	4610      	mov	r0, r2
 800448e:	4619      	mov	r1, r3
 8004490:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004492:	2200      	movs	r2, #0
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	61fa      	str	r2, [r7, #28]
 8004498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800449c:	f7fb ff28 	bl	80002f0 <__aeabi_uldivmod>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4613      	mov	r3, r2
 80044a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80044a8:	4b0b      	ldr	r3, [pc, #44]	@ (80044d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	0c1b      	lsrs	r3, r3, #16
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	3301      	adds	r3, #1
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80044b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044c2:	e002      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044c4:	4b05      	ldr	r3, [pc, #20]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x204>)
 80044c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3750      	adds	r7, #80	@ 0x50
 80044d0:	46bd      	mov	sp, r7
 80044d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044d6:	bf00      	nop
 80044d8:	40023800 	.word	0x40023800
 80044dc:	00f42400 	.word	0x00f42400
 80044e0:	007a1200 	.word	0x007a1200

080044e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044e8:	4b03      	ldr	r3, [pc, #12]	@ (80044f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80044ea:	681b      	ldr	r3, [r3, #0]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	20000000 	.word	0x20000000

080044fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004500:	f7ff fff0 	bl	80044e4 <HAL_RCC_GetHCLKFreq>
 8004504:	4602      	mov	r2, r0
 8004506:	4b05      	ldr	r3, [pc, #20]	@ (800451c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	0a9b      	lsrs	r3, r3, #10
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	4903      	ldr	r1, [pc, #12]	@ (8004520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004512:	5ccb      	ldrb	r3, [r1, r3]
 8004514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004518:	4618      	mov	r0, r3
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40023800 	.word	0x40023800
 8004520:	0802ea88 	.word	0x0802ea88

08004524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004528:	f7ff ffdc 	bl	80044e4 <HAL_RCC_GetHCLKFreq>
 800452c:	4602      	mov	r2, r0
 800452e:	4b05      	ldr	r3, [pc, #20]	@ (8004544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	0b5b      	lsrs	r3, r3, #13
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	4903      	ldr	r1, [pc, #12]	@ (8004548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800453a:	5ccb      	ldrb	r3, [r1, r3]
 800453c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004540:	4618      	mov	r0, r3
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40023800 	.word	0x40023800
 8004548:	0802ea88 	.word	0x0802ea88

0800454c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004554:	2300      	movs	r3, #0
 8004556:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004558:	2300      	movs	r3, #0
 800455a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004560:	2300      	movs	r3, #0
 8004562:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d012      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004574:	4b69      	ldr	r3, [pc, #420]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4a68      	ldr	r2, [pc, #416]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800457e:	6093      	str	r3, [r2, #8]
 8004580:	4b66      	ldr	r3, [pc, #408]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004588:	4964      	ldr	r1, [pc, #400]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458a:	4313      	orrs	r3, r2
 800458c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004596:	2301      	movs	r3, #1
 8004598:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d017      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045a6:	4b5d      	ldr	r3, [pc, #372]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045ac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b4:	4959      	ldr	r1, [pc, #356]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045c4:	d101      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80045c6:	2301      	movs	r3, #1
 80045c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80045d2:	2301      	movs	r3, #1
 80045d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d017      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045e2:	4b4e      	ldr	r3, [pc, #312]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045e8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f0:	494a      	ldr	r1, [pc, #296]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004600:	d101      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004602:	2301      	movs	r3, #1
 8004604:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800460e:	2301      	movs	r3, #1
 8004610:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800461e:	2301      	movs	r3, #1
 8004620:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 808b 	beq.w	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004630:	4b3a      	ldr	r3, [pc, #232]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004634:	4a39      	ldr	r2, [pc, #228]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800463a:	6413      	str	r3, [r2, #64]	@ 0x40
 800463c:	4b37      	ldr	r3, [pc, #220]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004648:	4b35      	ldr	r3, [pc, #212]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a34      	ldr	r2, [pc, #208]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800464e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004654:	f7fe ff52 	bl	80034fc <HAL_GetTick>
 8004658:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800465a:	e008      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465c:	f7fe ff4e 	bl	80034fc <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b64      	cmp	r3, #100	@ 0x64
 8004668:	d901      	bls.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e38f      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800466e:	4b2c      	ldr	r3, [pc, #176]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f0      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800467a:	4b28      	ldr	r3, [pc, #160]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800467e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004682:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d035      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	429a      	cmp	r2, r3
 8004696:	d02e      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004698:	4b20      	ldr	r3, [pc, #128]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800469c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046a2:	4b1e      	ldr	r3, [pc, #120]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a6:	4a1d      	ldr	r2, [pc, #116]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ac:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046ae:	4b1b      	ldr	r3, [pc, #108]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b2:	4a1a      	ldr	r2, [pc, #104]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046b8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80046ba:	4a18      	ldr	r2, [pc, #96]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046c0:	4b16      	ldr	r3, [pc, #88]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d114      	bne.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fe ff16 	bl	80034fc <HAL_GetTick>
 80046d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d2:	e00a      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d4:	f7fe ff12 	bl	80034fc <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e351      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ea:	4b0c      	ldr	r3, [pc, #48]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0ee      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004702:	d111      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004704:	4b05      	ldr	r3, [pc, #20]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004710:	4b04      	ldr	r3, [pc, #16]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004712:	400b      	ands	r3, r1
 8004714:	4901      	ldr	r1, [pc, #4]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004716:	4313      	orrs	r3, r2
 8004718:	608b      	str	r3, [r1, #8]
 800471a:	e00b      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800471c:	40023800 	.word	0x40023800
 8004720:	40007000 	.word	0x40007000
 8004724:	0ffffcff 	.word	0x0ffffcff
 8004728:	4bac      	ldr	r3, [pc, #688]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	4aab      	ldr	r2, [pc, #684]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800472e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004732:	6093      	str	r3, [r2, #8]
 8004734:	4ba9      	ldr	r3, [pc, #676]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004736:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004740:	49a6      	ldr	r1, [pc, #664]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004742:	4313      	orrs	r3, r2
 8004744:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0310 	and.w	r3, r3, #16
 800474e:	2b00      	cmp	r3, #0
 8004750:	d010      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004752:	4ba2      	ldr	r3, [pc, #648]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004754:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004758:	4aa0      	ldr	r2, [pc, #640]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800475a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800475e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004762:	4b9e      	ldr	r3, [pc, #632]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004764:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476c:	499b      	ldr	r1, [pc, #620]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004780:	4b96      	ldr	r3, [pc, #600]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004786:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800478e:	4993      	ldr	r1, [pc, #588]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047a2:	4b8e      	ldr	r3, [pc, #568]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047b0:	498a      	ldr	r1, [pc, #552]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047c4:	4b85      	ldr	r3, [pc, #532]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047d2:	4982      	ldr	r1, [pc, #520]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047e6:	4b7d      	ldr	r3, [pc, #500]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f4:	4979      	ldr	r1, [pc, #484]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004808:	4b74      	ldr	r3, [pc, #464]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800480e:	f023 0203 	bic.w	r2, r3, #3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004816:	4971      	ldr	r1, [pc, #452]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004818:	4313      	orrs	r3, r2
 800481a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800482a:	4b6c      	ldr	r3, [pc, #432]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004830:	f023 020c 	bic.w	r2, r3, #12
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004838:	4968      	ldr	r1, [pc, #416]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800484c:	4b63      	ldr	r3, [pc, #396]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004852:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800485a:	4960      	ldr	r1, [pc, #384]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800486e:	4b5b      	ldr	r3, [pc, #364]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004874:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800487c:	4957      	ldr	r1, [pc, #348]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004890:	4b52      	ldr	r3, [pc, #328]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004896:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800489e:	494f      	ldr	r1, [pc, #316]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80048b2:	4b4a      	ldr	r3, [pc, #296]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c0:	4946      	ldr	r1, [pc, #280]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80048d4:	4b41      	ldr	r3, [pc, #260]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048da:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e2:	493e      	ldr	r1, [pc, #248]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80048f6:	4b39      	ldr	r3, [pc, #228]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004904:	4935      	ldr	r1, [pc, #212]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004918:	4b30      	ldr	r3, [pc, #192]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004926:	492d      	ldr	r1, [pc, #180]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d011      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800493a:	4b28      	ldr	r3, [pc, #160]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800493c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004940:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004948:	4924      	ldr	r1, [pc, #144]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004954:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004958:	d101      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800495a:	2301      	movs	r3, #1
 800495c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800496a:	2301      	movs	r3, #1
 800496c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800497a:	4b18      	ldr	r3, [pc, #96]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800497c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004980:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004988:	4914      	ldr	r1, [pc, #80]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00b      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800499c:	4b0f      	ldr	r3, [pc, #60]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800499e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049ac:	490b      	ldr	r1, [pc, #44]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00f      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80049c0:	4b06      	ldr	r3, [pc, #24]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049d0:	4902      	ldr	r1, [pc, #8]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80049d8:	e002      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80049da:	bf00      	nop
 80049dc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00b      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049ec:	4b8a      	ldr	r3, [pc, #552]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fc:	4986      	ldr	r1, [pc, #536]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00b      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a10:	4b81      	ldr	r3, [pc, #516]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a16:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a20:	497d      	ldr	r1, [pc, #500]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d006      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 80d6 	beq.w	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a3c:	4b76      	ldr	r3, [pc, #472]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a75      	ldr	r2, [pc, #468]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a48:	f7fe fd58 	bl	80034fc <HAL_GetTick>
 8004a4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a50:	f7fe fd54 	bl	80034fc <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b64      	cmp	r3, #100	@ 0x64
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e195      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a62:	4b6d      	ldr	r3, [pc, #436]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f0      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d021      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d11d      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a82:	4b65      	ldr	r3, [pc, #404]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a88:	0c1b      	lsrs	r3, r3, #16
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a90:	4b61      	ldr	r3, [pc, #388]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a96:	0e1b      	lsrs	r3, r3, #24
 8004a98:	f003 030f 	and.w	r3, r3, #15
 8004a9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	019a      	lsls	r2, r3, #6
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	041b      	lsls	r3, r3, #16
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	061b      	lsls	r3, r3, #24
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	071b      	lsls	r3, r3, #28
 8004ab6:	4958      	ldr	r1, [pc, #352]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d004      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ace:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ad2:	d00a      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d02e      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ae8:	d129      	bne.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004aea:	4b4b      	ldr	r3, [pc, #300]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004af0:	0c1b      	lsrs	r3, r3, #16
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004af8:	4b47      	ldr	r3, [pc, #284]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004afe:	0f1b      	lsrs	r3, r3, #28
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	019a      	lsls	r2, r3, #6
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	041b      	lsls	r3, r3, #16
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	061b      	lsls	r3, r3, #24
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	071b      	lsls	r3, r3, #28
 8004b1e:	493e      	ldr	r1, [pc, #248]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b26:	4b3c      	ldr	r3, [pc, #240]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b2c:	f023 021f 	bic.w	r2, r3, #31
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b34:	3b01      	subs	r3, #1
 8004b36:	4938      	ldr	r1, [pc, #224]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d01d      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b4a:	4b33      	ldr	r3, [pc, #204]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b50:	0e1b      	lsrs	r3, r3, #24
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b58:	4b2f      	ldr	r3, [pc, #188]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b5e:	0f1b      	lsrs	r3, r3, #28
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	019a      	lsls	r2, r3, #6
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	041b      	lsls	r3, r3, #16
 8004b72:	431a      	orrs	r2, r3
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	061b      	lsls	r3, r3, #24
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	071b      	lsls	r3, r3, #28
 8004b7e:	4926      	ldr	r1, [pc, #152]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d011      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	019a      	lsls	r2, r3, #6
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	041b      	lsls	r3, r3, #16
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	061b      	lsls	r3, r3, #24
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	071b      	lsls	r3, r3, #28
 8004bae:	491a      	ldr	r1, [pc, #104]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bb6:	4b18      	ldr	r3, [pc, #96]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a17      	ldr	r2, [pc, #92]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bbc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc2:	f7fe fc9b 	bl	80034fc <HAL_GetTick>
 8004bc6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bca:	f7fe fc97 	bl	80034fc <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b64      	cmp	r3, #100	@ 0x64
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e0d8      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0f0      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	f040 80ce 	bne.w	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004bf0:	4b09      	ldr	r3, [pc, #36]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a08      	ldr	r2, [pc, #32]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bfc:	f7fe fc7e 	bl	80034fc <HAL_GetTick>
 8004c00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c02:	e00b      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c04:	f7fe fc7a 	bl	80034fc <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b64      	cmp	r3, #100	@ 0x64
 8004c10:	d904      	bls.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e0bb      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004c16:	bf00      	nop
 8004c18:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c1c:	4b5e      	ldr	r3, [pc, #376]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c28:	d0ec      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d009      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d02e      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d12a      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c52:	4b51      	ldr	r3, [pc, #324]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c58:	0c1b      	lsrs	r3, r3, #16
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c60:	4b4d      	ldr	r3, [pc, #308]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c66:	0f1b      	lsrs	r3, r3, #28
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	019a      	lsls	r2, r3, #6
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	041b      	lsls	r3, r3, #16
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	061b      	lsls	r3, r3, #24
 8004c80:	431a      	orrs	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	071b      	lsls	r3, r3, #28
 8004c86:	4944      	ldr	r1, [pc, #272]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c8e:	4b42      	ldr	r3, [pc, #264]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c94:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	021b      	lsls	r3, r3, #8
 8004ca0:	493d      	ldr	r1, [pc, #244]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d022      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cbc:	d11d      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cbe:	4b36      	ldr	r3, [pc, #216]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc4:	0e1b      	lsrs	r3, r3, #24
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ccc:	4b32      	ldr	r3, [pc, #200]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd2:	0f1b      	lsrs	r3, r3, #28
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	019a      	lsls	r2, r3, #6
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	041b      	lsls	r3, r3, #16
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	061b      	lsls	r3, r3, #24
 8004cec:	431a      	orrs	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	071b      	lsls	r3, r3, #28
 8004cf2:	4929      	ldr	r1, [pc, #164]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d028      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d06:	4b24      	ldr	r3, [pc, #144]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d0c:	0e1b      	lsrs	r3, r3, #24
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d14:	4b20      	ldr	r3, [pc, #128]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d1a:	0c1b      	lsrs	r3, r3, #16
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	019a      	lsls	r2, r3, #6
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	041b      	lsls	r3, r3, #16
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	061b      	lsls	r3, r3, #24
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	071b      	lsls	r3, r3, #28
 8004d3a:	4917      	ldr	r1, [pc, #92]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d42:	4b15      	ldr	r3, [pc, #84]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d50:	4911      	ldr	r1, [pc, #68]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d58:	4b0f      	ldr	r3, [pc, #60]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a0e      	ldr	r2, [pc, #56]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d64:	f7fe fbca 	bl	80034fc <HAL_GetTick>
 8004d68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d6c:	f7fe fbc6 	bl	80034fc <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b64      	cmp	r3, #100	@ 0x64
 8004d78:	d901      	bls.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e007      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d7e:	4b06      	ldr	r3, [pc, #24]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d8a:	d1ef      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3720      	adds	r7, #32
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40023800 	.word	0x40023800

08004d9c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e01c      	b.n	8004de8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	795b      	ldrb	r3, [r3, #5]
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d105      	bne.n	8004dc4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7fc fdd8 	bl	8001974 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f042 0204 	orr.w	r2, r2, #4
 8004dd8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	791b      	ldrb	r3, [r3, #4]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d101      	bne.n	8004e0a <HAL_RNG_GenerateRandomNumber+0x1a>
 8004e06:	2302      	movs	r3, #2
 8004e08:	e03d      	b.n	8004e86 <HAL_RNG_GenerateRandomNumber+0x96>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	795b      	ldrb	r3, [r3, #5]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d12c      	bne.n	8004e74 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e20:	f7fe fb6c 	bl	80034fc <HAL_GetTick>
 8004e24:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004e26:	e011      	b.n	8004e4c <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004e28:	f7fe fb68 	bl	80034fc <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d90a      	bls.n	8004e4c <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e01c      	b.n	8004e86 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d1e6      	bne.n	8004e28 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	715a      	strb	r2, [r3, #5]
 8004e72:	e004      	b.n	8004e7e <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2204      	movs	r2, #4
 8004e78:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	711a      	strb	r2, [r3, #4]

  return status;
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	330c      	adds	r3, #12
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7ff ffa7 	bl	8004df0 <HAL_RNG_GenerateRandomNumber>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d102      	bne.n	8004eae <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	e000      	b.n	8004eb0 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8004eae:	2300      	movs	r3, #0
  }
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e09d      	b.n	8005006 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d108      	bne.n	8004ee4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eda:	d009      	beq.n	8004ef0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	61da      	str	r2, [r3, #28]
 8004ee2:	e005      	b.n	8004ef0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7fc fd90 	bl	8001a30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f30:	d902      	bls.n	8004f38 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f32:	2300      	movs	r3, #0
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	e002      	b.n	8004f3e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f3c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004f46:	d007      	beq.n	8004f58 <HAL_SPI_Init+0xa0>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f50:	d002      	beq.n	8004f58 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f9a:	ea42 0103 	orr.w	r1, r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	0c1b      	lsrs	r3, r3, #16
 8004fb4:	f003 0204 	and.w	r2, r3, #4
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbc:	f003 0310 	and.w	r3, r3, #16
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004fd4:	ea42 0103 	orr.w	r1, r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ff4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b088      	sub	sp, #32
 8005012:	af00      	add	r7, sp, #0
 8005014:	60f8      	str	r0, [r7, #12]
 8005016:	60b9      	str	r1, [r7, #8]
 8005018:	603b      	str	r3, [r7, #0]
 800501a:	4613      	mov	r3, r2
 800501c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_SPI_Transmit+0x22>
 800502c:	2302      	movs	r3, #2
 800502e:	e158      	b.n	80052e2 <HAL_SPI_Transmit+0x2d4>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005038:	f7fe fa60 	bl	80034fc <HAL_GetTick>
 800503c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800503e:	88fb      	ldrh	r3, [r7, #6]
 8005040:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b01      	cmp	r3, #1
 800504c:	d002      	beq.n	8005054 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800504e:	2302      	movs	r3, #2
 8005050:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005052:	e13d      	b.n	80052d0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_SPI_Transmit+0x52>
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d102      	bne.n	8005066 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005064:	e134      	b.n	80052d0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2203      	movs	r2, #3
 800506a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	88fa      	ldrh	r2, [r7, #6]
 800507e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	88fa      	ldrh	r2, [r7, #6]
 8005084:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050b0:	d10f      	bne.n	80050d2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050dc:	2b40      	cmp	r3, #64	@ 0x40
 80050de:	d007      	beq.n	80050f0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80050f8:	d94b      	bls.n	8005192 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d002      	beq.n	8005108 <HAL_SPI_Transmit+0xfa>
 8005102:	8afb      	ldrh	r3, [r7, #22]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d13e      	bne.n	8005186 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800510c:	881a      	ldrh	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005118:	1c9a      	adds	r2, r3, #2
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005122:	b29b      	uxth	r3, r3
 8005124:	3b01      	subs	r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800512c:	e02b      	b.n	8005186 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b02      	cmp	r3, #2
 800513a:	d112      	bne.n	8005162 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005140:	881a      	ldrh	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514c:	1c9a      	adds	r2, r3, #2
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005156:	b29b      	uxth	r3, r3
 8005158:	3b01      	subs	r3, #1
 800515a:	b29a      	uxth	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005160:	e011      	b.n	8005186 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005162:	f7fe f9cb 	bl	80034fc <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d803      	bhi.n	800517a <HAL_SPI_Transmit+0x16c>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005178:	d102      	bne.n	8005180 <HAL_SPI_Transmit+0x172>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d102      	bne.n	8005186 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005184:	e0a4      	b.n	80052d0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800518a:	b29b      	uxth	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1ce      	bne.n	800512e <HAL_SPI_Transmit+0x120>
 8005190:	e07c      	b.n	800528c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <HAL_SPI_Transmit+0x192>
 800519a:	8afb      	ldrh	r3, [r7, #22]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d170      	bne.n	8005282 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d912      	bls.n	80051d0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ae:	881a      	ldrh	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ba:	1c9a      	adds	r2, r3, #2
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b02      	subs	r3, #2
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051ce:	e058      	b.n	8005282 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	330c      	adds	r3, #12
 80051da:	7812      	ldrb	r2, [r2, #0]
 80051dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80051f6:	e044      	b.n	8005282 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b02      	cmp	r3, #2
 8005204:	d12b      	bne.n	800525e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	d912      	bls.n	8005236 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005214:	881a      	ldrh	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005220:	1c9a      	adds	r2, r3, #2
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800522a:	b29b      	uxth	r3, r3
 800522c:	3b02      	subs	r3, #2
 800522e:	b29a      	uxth	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005234:	e025      	b.n	8005282 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	330c      	adds	r3, #12
 8005240:	7812      	ldrb	r2, [r2, #0]
 8005242:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005252:	b29b      	uxth	r3, r3
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800525c:	e011      	b.n	8005282 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800525e:	f7fe f94d 	bl	80034fc <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d803      	bhi.n	8005276 <HAL_SPI_Transmit+0x268>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005274:	d102      	bne.n	800527c <HAL_SPI_Transmit+0x26e>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d102      	bne.n	8005282 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005280:	e026      	b.n	80052d0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005286:	b29b      	uxth	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1b5      	bne.n	80051f8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	6839      	ldr	r1, [r7, #0]
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 f945 	bl	8005520 <SPI_EndRxTxTransaction>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d002      	beq.n	80052a2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10a      	bne.n	80052c0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052aa:	2300      	movs	r3, #0
 80052ac:	613b      	str	r3, [r7, #16]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	613b      	str	r3, [r7, #16]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	613b      	str	r3, [r7, #16]
 80052be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	77fb      	strb	r3, [r7, #31]
 80052cc:	e000      	b.n	80052d0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80052ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80052e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3720      	adds	r7, #32
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	603b      	str	r3, [r7, #0]
 80052f8:	4613      	mov	r3, r2
 80052fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052fc:	f7fe f8fe 	bl	80034fc <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005304:	1a9b      	subs	r3, r3, r2
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	4413      	add	r3, r2
 800530a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800530c:	f7fe f8f6 	bl	80034fc <HAL_GetTick>
 8005310:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005312:	4b39      	ldr	r3, [pc, #228]	@ (80053f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	015b      	lsls	r3, r3, #5
 8005318:	0d1b      	lsrs	r3, r3, #20
 800531a:	69fa      	ldr	r2, [r7, #28]
 800531c:	fb02 f303 	mul.w	r3, r2, r3
 8005320:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005322:	e054      	b.n	80053ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532a:	d050      	beq.n	80053ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800532c:	f7fe f8e6 	bl	80034fc <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	69fa      	ldr	r2, [r7, #28]
 8005338:	429a      	cmp	r2, r3
 800533a:	d902      	bls.n	8005342 <SPI_WaitFlagStateUntilTimeout+0x56>
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d13d      	bne.n	80053be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005350:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800535a:	d111      	bne.n	8005380 <SPI_WaitFlagStateUntilTimeout+0x94>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005364:	d004      	beq.n	8005370 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800536e:	d107      	bne.n	8005380 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800537e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005384:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005388:	d10f      	bne.n	80053aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e017      	b.n	80053ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4013      	ands	r3, r2
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	429a      	cmp	r2, r3
 80053dc:	bf0c      	ite	eq
 80053de:	2301      	moveq	r3, #1
 80053e0:	2300      	movne	r3, #0
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	461a      	mov	r2, r3
 80053e6:	79fb      	ldrb	r3, [r7, #7]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d19b      	bne.n	8005324 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3720      	adds	r7, #32
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	20000000 	.word	0x20000000

080053fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
 8005408:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800540a:	f7fe f877 	bl	80034fc <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005412:	1a9b      	subs	r3, r3, r2
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	4413      	add	r3, r2
 8005418:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800541a:	f7fe f86f 	bl	80034fc <HAL_GetTick>
 800541e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005420:	4b3e      	ldr	r3, [pc, #248]	@ (800551c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	00da      	lsls	r2, r3, #3
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	0d1b      	lsrs	r3, r3, #20
 8005430:	69fa      	ldr	r2, [r7, #28]
 8005432:	fb02 f303 	mul.w	r3, r2, r3
 8005436:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005438:	e062      	b.n	8005500 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005440:	d109      	bne.n	8005456 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d106      	bne.n	8005456 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	330c      	adds	r3, #12
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	b2db      	uxtb	r3, r3
 8005452:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005454:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545c:	d050      	beq.n	8005500 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800545e:	f7fe f84d 	bl	80034fc <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	429a      	cmp	r2, r3
 800546c:	d902      	bls.n	8005474 <SPI_WaitFifoStateUntilTimeout+0x78>
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d13d      	bne.n	80054f0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005482:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800548c:	d111      	bne.n	80054b2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005496:	d004      	beq.n	80054a2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054a0:	d107      	bne.n	80054b2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054ba:	d10f      	bne.n	80054dc <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e010      	b.n	8005512 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	3b01      	subs	r3, #1
 80054fe:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689a      	ldr	r2, [r3, #8]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	4013      	ands	r3, r2
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	429a      	cmp	r2, r3
 800550e:	d194      	bne.n	800543a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3720      	adds	r7, #32
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000000 	.word	0x20000000

08005520 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af02      	add	r7, sp, #8
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2200      	movs	r2, #0
 8005534:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f7ff ff5f 	bl	80053fc <SPI_WaitFifoStateUntilTimeout>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d007      	beq.n	8005554 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005548:	f043 0220 	orr.w	r2, r3, #32
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e027      	b.n	80055a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2200      	movs	r2, #0
 800555c:	2180      	movs	r1, #128	@ 0x80
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f7ff fec4 	bl	80052ec <SPI_WaitFlagStateUntilTimeout>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d007      	beq.n	800557a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800556e:	f043 0220 	orr.w	r2, r3, #32
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e014      	b.n	80055a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2200      	movs	r2, #0
 8005582:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f7ff ff38 	bl	80053fc <SPI_WaitFifoStateUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d007      	beq.n	80055a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005596:	f043 0220 	orr.w	r2, r3, #32
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e000      	b.n	80055a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e049      	b.n	8005652 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d106      	bne.n	80055d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7fc fbea 	bl	8001dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3304      	adds	r3, #4
 80055e8:	4619      	mov	r1, r3
 80055ea:	4610      	mov	r0, r2
 80055ec:	f000 f994 	bl	8005918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
	...

0800565c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b01      	cmp	r3, #1
 800566e:	d001      	beq.n	8005674 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e04c      	b.n	800570e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a26      	ldr	r2, [pc, #152]	@ (800571c <HAL_TIM_Base_Start+0xc0>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d022      	beq.n	80056cc <HAL_TIM_Base_Start+0x70>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800568e:	d01d      	beq.n	80056cc <HAL_TIM_Base_Start+0x70>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a22      	ldr	r2, [pc, #136]	@ (8005720 <HAL_TIM_Base_Start+0xc4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d018      	beq.n	80056cc <HAL_TIM_Base_Start+0x70>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a21      	ldr	r2, [pc, #132]	@ (8005724 <HAL_TIM_Base_Start+0xc8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d013      	beq.n	80056cc <HAL_TIM_Base_Start+0x70>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005728 <HAL_TIM_Base_Start+0xcc>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00e      	beq.n	80056cc <HAL_TIM_Base_Start+0x70>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a1e      	ldr	r2, [pc, #120]	@ (800572c <HAL_TIM_Base_Start+0xd0>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d009      	beq.n	80056cc <HAL_TIM_Base_Start+0x70>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005730 <HAL_TIM_Base_Start+0xd4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d004      	beq.n	80056cc <HAL_TIM_Base_Start+0x70>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005734 <HAL_TIM_Base_Start+0xd8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d115      	bne.n	80056f8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	4b19      	ldr	r3, [pc, #100]	@ (8005738 <HAL_TIM_Base_Start+0xdc>)
 80056d4:	4013      	ands	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2b06      	cmp	r3, #6
 80056dc:	d015      	beq.n	800570a <HAL_TIM_Base_Start+0xae>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056e4:	d011      	beq.n	800570a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f042 0201 	orr.w	r2, r2, #1
 80056f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f6:	e008      	b.n	800570a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	e000      	b.n	800570c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	40010000 	.word	0x40010000
 8005720:	40000400 	.word	0x40000400
 8005724:	40000800 	.word	0x40000800
 8005728:	40000c00 	.word	0x40000c00
 800572c:	40010400 	.word	0x40010400
 8005730:	40014000 	.word	0x40014000
 8005734:	40001800 	.word	0x40001800
 8005738:	00010007 	.word	0x00010007

0800573c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6a1a      	ldr	r2, [r3, #32]
 800574a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800574e:	4013      	ands	r3, r2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10f      	bne.n	8005774 <HAL_TIM_Base_Stop+0x38>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6a1a      	ldr	r2, [r3, #32]
 800575a:	f240 4344 	movw	r3, #1092	@ 0x444
 800575e:	4013      	ands	r3, r2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d107      	bne.n	8005774 <HAL_TIM_Base_Stop+0x38>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0201 	bic.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
	...

0800578c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800579c:	2b01      	cmp	r3, #1
 800579e:	d101      	bne.n	80057a4 <HAL_TIM_ConfigClockSource+0x18>
 80057a0:	2302      	movs	r3, #2
 80057a2:	e0b3      	b.n	800590c <HAL_TIM_ConfigClockSource+0x180>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4b55      	ldr	r3, [pc, #340]	@ (8005914 <HAL_TIM_ConfigClockSource+0x188>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057dc:	d03e      	beq.n	800585c <HAL_TIM_ConfigClockSource+0xd0>
 80057de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057e2:	f200 8087 	bhi.w	80058f4 <HAL_TIM_ConfigClockSource+0x168>
 80057e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ea:	f000 8085 	beq.w	80058f8 <HAL_TIM_ConfigClockSource+0x16c>
 80057ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057f2:	d87f      	bhi.n	80058f4 <HAL_TIM_ConfigClockSource+0x168>
 80057f4:	2b70      	cmp	r3, #112	@ 0x70
 80057f6:	d01a      	beq.n	800582e <HAL_TIM_ConfigClockSource+0xa2>
 80057f8:	2b70      	cmp	r3, #112	@ 0x70
 80057fa:	d87b      	bhi.n	80058f4 <HAL_TIM_ConfigClockSource+0x168>
 80057fc:	2b60      	cmp	r3, #96	@ 0x60
 80057fe:	d050      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0x116>
 8005800:	2b60      	cmp	r3, #96	@ 0x60
 8005802:	d877      	bhi.n	80058f4 <HAL_TIM_ConfigClockSource+0x168>
 8005804:	2b50      	cmp	r3, #80	@ 0x50
 8005806:	d03c      	beq.n	8005882 <HAL_TIM_ConfigClockSource+0xf6>
 8005808:	2b50      	cmp	r3, #80	@ 0x50
 800580a:	d873      	bhi.n	80058f4 <HAL_TIM_ConfigClockSource+0x168>
 800580c:	2b40      	cmp	r3, #64	@ 0x40
 800580e:	d058      	beq.n	80058c2 <HAL_TIM_ConfigClockSource+0x136>
 8005810:	2b40      	cmp	r3, #64	@ 0x40
 8005812:	d86f      	bhi.n	80058f4 <HAL_TIM_ConfigClockSource+0x168>
 8005814:	2b30      	cmp	r3, #48	@ 0x30
 8005816:	d064      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x156>
 8005818:	2b30      	cmp	r3, #48	@ 0x30
 800581a:	d86b      	bhi.n	80058f4 <HAL_TIM_ConfigClockSource+0x168>
 800581c:	2b20      	cmp	r3, #32
 800581e:	d060      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x156>
 8005820:	2b20      	cmp	r3, #32
 8005822:	d867      	bhi.n	80058f4 <HAL_TIM_ConfigClockSource+0x168>
 8005824:	2b00      	cmp	r3, #0
 8005826:	d05c      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x156>
 8005828:	2b10      	cmp	r3, #16
 800582a:	d05a      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800582c:	e062      	b.n	80058f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6818      	ldr	r0, [r3, #0]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	6899      	ldr	r1, [r3, #8]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f000 f985 	bl	8005b4c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005850:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	609a      	str	r2, [r3, #8]
      break;
 800585a:	e04e      	b.n	80058fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6818      	ldr	r0, [r3, #0]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	6899      	ldr	r1, [r3, #8]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f000 f96e 	bl	8005b4c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800587e:	609a      	str	r2, [r3, #8]
      break;
 8005880:	e03b      	b.n	80058fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6818      	ldr	r0, [r3, #0]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	6859      	ldr	r1, [r3, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	461a      	mov	r2, r3
 8005890:	f000 f8e2 	bl	8005a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2150      	movs	r1, #80	@ 0x50
 800589a:	4618      	mov	r0, r3
 800589c:	f000 f93b 	bl	8005b16 <TIM_ITRx_SetConfig>
      break;
 80058a0:	e02b      	b.n	80058fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	6859      	ldr	r1, [r3, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	461a      	mov	r2, r3
 80058b0:	f000 f901 	bl	8005ab6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2160      	movs	r1, #96	@ 0x60
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 f92b 	bl	8005b16 <TIM_ITRx_SetConfig>
      break;
 80058c0:	e01b      	b.n	80058fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	6859      	ldr	r1, [r3, #4]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	461a      	mov	r2, r3
 80058d0:	f000 f8c2 	bl	8005a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2140      	movs	r1, #64	@ 0x40
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 f91b 	bl	8005b16 <TIM_ITRx_SetConfig>
      break;
 80058e0:	e00b      	b.n	80058fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4619      	mov	r1, r3
 80058ec:	4610      	mov	r0, r2
 80058ee:	f000 f912 	bl	8005b16 <TIM_ITRx_SetConfig>
        break;
 80058f2:	e002      	b.n	80058fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80058f4:	bf00      	nop
 80058f6:	e000      	b.n	80058fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80058f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	fffeff88 	.word	0xfffeff88

08005918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a40      	ldr	r2, [pc, #256]	@ (8005a2c <TIM_Base_SetConfig+0x114>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d013      	beq.n	8005958 <TIM_Base_SetConfig+0x40>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005936:	d00f      	beq.n	8005958 <TIM_Base_SetConfig+0x40>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a3d      	ldr	r2, [pc, #244]	@ (8005a30 <TIM_Base_SetConfig+0x118>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d00b      	beq.n	8005958 <TIM_Base_SetConfig+0x40>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a3c      	ldr	r2, [pc, #240]	@ (8005a34 <TIM_Base_SetConfig+0x11c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d007      	beq.n	8005958 <TIM_Base_SetConfig+0x40>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a3b      	ldr	r2, [pc, #236]	@ (8005a38 <TIM_Base_SetConfig+0x120>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d003      	beq.n	8005958 <TIM_Base_SetConfig+0x40>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a3a      	ldr	r2, [pc, #232]	@ (8005a3c <TIM_Base_SetConfig+0x124>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d108      	bne.n	800596a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800595e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a2f      	ldr	r2, [pc, #188]	@ (8005a2c <TIM_Base_SetConfig+0x114>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d02b      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005978:	d027      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a2c      	ldr	r2, [pc, #176]	@ (8005a30 <TIM_Base_SetConfig+0x118>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d023      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a2b      	ldr	r2, [pc, #172]	@ (8005a34 <TIM_Base_SetConfig+0x11c>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d01f      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a2a      	ldr	r2, [pc, #168]	@ (8005a38 <TIM_Base_SetConfig+0x120>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d01b      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a29      	ldr	r2, [pc, #164]	@ (8005a3c <TIM_Base_SetConfig+0x124>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d017      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a28      	ldr	r2, [pc, #160]	@ (8005a40 <TIM_Base_SetConfig+0x128>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d013      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a27      	ldr	r2, [pc, #156]	@ (8005a44 <TIM_Base_SetConfig+0x12c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00f      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a26      	ldr	r2, [pc, #152]	@ (8005a48 <TIM_Base_SetConfig+0x130>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00b      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a25      	ldr	r2, [pc, #148]	@ (8005a4c <TIM_Base_SetConfig+0x134>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d007      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a24      	ldr	r2, [pc, #144]	@ (8005a50 <TIM_Base_SetConfig+0x138>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d003      	beq.n	80059ca <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a23      	ldr	r2, [pc, #140]	@ (8005a54 <TIM_Base_SetConfig+0x13c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d108      	bne.n	80059dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a0a      	ldr	r2, [pc, #40]	@ (8005a2c <TIM_Base_SetConfig+0x114>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d003      	beq.n	8005a10 <TIM_Base_SetConfig+0xf8>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a0c      	ldr	r2, [pc, #48]	@ (8005a3c <TIM_Base_SetConfig+0x124>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d103      	bne.n	8005a18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	691a      	ldr	r2, [r3, #16]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	615a      	str	r2, [r3, #20]
}
 8005a1e:	bf00      	nop
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	40010000 	.word	0x40010000
 8005a30:	40000400 	.word	0x40000400
 8005a34:	40000800 	.word	0x40000800
 8005a38:	40000c00 	.word	0x40000c00
 8005a3c:	40010400 	.word	0x40010400
 8005a40:	40014000 	.word	0x40014000
 8005a44:	40014400 	.word	0x40014400
 8005a48:	40014800 	.word	0x40014800
 8005a4c:	40001800 	.word	0x40001800
 8005a50:	40001c00 	.word	0x40001c00
 8005a54:	40002000 	.word	0x40002000

08005a58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f023 0201 	bic.w	r2, r3, #1
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	011b      	lsls	r3, r3, #4
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f023 030a 	bic.w	r3, r3, #10
 8005a94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	621a      	str	r2, [r3, #32]
}
 8005aaa:	bf00      	nop
 8005aac:	371c      	adds	r7, #28
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b087      	sub	sp, #28
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	60f8      	str	r0, [r7, #12]
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	f023 0210 	bic.w	r2, r3, #16
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ae0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	031b      	lsls	r3, r3, #12
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005af2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	621a      	str	r2, [r3, #32]
}
 8005b0a:	bf00      	nop
 8005b0c:	371c      	adds	r7, #28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b085      	sub	sp, #20
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	f043 0307 	orr.w	r3, r3, #7
 8005b38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	609a      	str	r2, [r3, #8]
}
 8005b40:	bf00      	nop
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
 8005b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	021a      	lsls	r2, r3, #8
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	609a      	str	r2, [r3, #8]
}
 8005b80:	bf00      	nop
 8005b82:	371c      	adds	r7, #28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d101      	bne.n	8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	e06d      	b.n	8005c80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a30      	ldr	r2, [pc, #192]	@ (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d004      	beq.n	8005bd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a2f      	ldr	r2, [pc, #188]	@ (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d108      	bne.n	8005bea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005bde:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bf0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a20      	ldr	r2, [pc, #128]	@ (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d022      	beq.n	8005c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c16:	d01d      	beq.n	8005c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005c94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d018      	beq.n	8005c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a1c      	ldr	r2, [pc, #112]	@ (8005c98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d013      	beq.n	8005c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a1a      	ldr	r2, [pc, #104]	@ (8005c9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d00e      	beq.n	8005c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a15      	ldr	r2, [pc, #84]	@ (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d009      	beq.n	8005c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a16      	ldr	r2, [pc, #88]	@ (8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d004      	beq.n	8005c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a15      	ldr	r2, [pc, #84]	@ (8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d10c      	bne.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	40010000 	.word	0x40010000
 8005c90:	40010400 	.word	0x40010400
 8005c94:	40000400 	.word	0x40000400
 8005c98:	40000800 	.word	0x40000800
 8005c9c:	40000c00 	.word	0x40000c00
 8005ca0:	40014000 	.word	0x40014000
 8005ca4:	40001800 	.word	0x40001800

08005ca8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e040      	b.n	8005d3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d106      	bne.n	8005cd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7fc f8be 	bl	8001e4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2224      	movs	r2, #36	@ 0x24
 8005cd4:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0201 	bic.w	r2, r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f82c 	bl	8005d44 <UART_SetConfig>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d101      	bne.n	8005cf6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e022      	b.n	8005d3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fa84 	bl	800620c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689a      	ldr	r2, [r3, #8]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0201 	orr.w	r2, r2, #1
 8005d32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fb0b 	bl	8006350 <UART_CheckIdleState>
 8005d3a:	4603      	mov	r3, r0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	69db      	ldr	r3, [r3, #28]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	4ba6      	ldr	r3, [pc, #664]	@ (8006008 <UART_SetConfig+0x2c4>)
 8005d70:	4013      	ands	r3, r2
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6812      	ldr	r2, [r2, #0]
 8005d76:	6979      	ldr	r1, [r7, #20]
 8005d78:	430b      	orrs	r3, r1
 8005d7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68da      	ldr	r2, [r3, #12]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a94      	ldr	r2, [pc, #592]	@ (800600c <UART_SetConfig+0x2c8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d120      	bne.n	8005e02 <UART_SetConfig+0xbe>
 8005dc0:	4b93      	ldr	r3, [pc, #588]	@ (8006010 <UART_SetConfig+0x2cc>)
 8005dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dc6:	f003 0303 	and.w	r3, r3, #3
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d816      	bhi.n	8005dfc <UART_SetConfig+0xb8>
 8005dce:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd4 <UART_SetConfig+0x90>)
 8005dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd4:	08005de5 	.word	0x08005de5
 8005dd8:	08005df1 	.word	0x08005df1
 8005ddc:	08005deb 	.word	0x08005deb
 8005de0:	08005df7 	.word	0x08005df7
 8005de4:	2301      	movs	r3, #1
 8005de6:	77fb      	strb	r3, [r7, #31]
 8005de8:	e150      	b.n	800608c <UART_SetConfig+0x348>
 8005dea:	2302      	movs	r3, #2
 8005dec:	77fb      	strb	r3, [r7, #31]
 8005dee:	e14d      	b.n	800608c <UART_SetConfig+0x348>
 8005df0:	2304      	movs	r3, #4
 8005df2:	77fb      	strb	r3, [r7, #31]
 8005df4:	e14a      	b.n	800608c <UART_SetConfig+0x348>
 8005df6:	2308      	movs	r3, #8
 8005df8:	77fb      	strb	r3, [r7, #31]
 8005dfa:	e147      	b.n	800608c <UART_SetConfig+0x348>
 8005dfc:	2310      	movs	r3, #16
 8005dfe:	77fb      	strb	r3, [r7, #31]
 8005e00:	e144      	b.n	800608c <UART_SetConfig+0x348>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a83      	ldr	r2, [pc, #524]	@ (8006014 <UART_SetConfig+0x2d0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d132      	bne.n	8005e72 <UART_SetConfig+0x12e>
 8005e0c:	4b80      	ldr	r3, [pc, #512]	@ (8006010 <UART_SetConfig+0x2cc>)
 8005e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e12:	f003 030c 	and.w	r3, r3, #12
 8005e16:	2b0c      	cmp	r3, #12
 8005e18:	d828      	bhi.n	8005e6c <UART_SetConfig+0x128>
 8005e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e20 <UART_SetConfig+0xdc>)
 8005e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e20:	08005e55 	.word	0x08005e55
 8005e24:	08005e6d 	.word	0x08005e6d
 8005e28:	08005e6d 	.word	0x08005e6d
 8005e2c:	08005e6d 	.word	0x08005e6d
 8005e30:	08005e61 	.word	0x08005e61
 8005e34:	08005e6d 	.word	0x08005e6d
 8005e38:	08005e6d 	.word	0x08005e6d
 8005e3c:	08005e6d 	.word	0x08005e6d
 8005e40:	08005e5b 	.word	0x08005e5b
 8005e44:	08005e6d 	.word	0x08005e6d
 8005e48:	08005e6d 	.word	0x08005e6d
 8005e4c:	08005e6d 	.word	0x08005e6d
 8005e50:	08005e67 	.word	0x08005e67
 8005e54:	2300      	movs	r3, #0
 8005e56:	77fb      	strb	r3, [r7, #31]
 8005e58:	e118      	b.n	800608c <UART_SetConfig+0x348>
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	77fb      	strb	r3, [r7, #31]
 8005e5e:	e115      	b.n	800608c <UART_SetConfig+0x348>
 8005e60:	2304      	movs	r3, #4
 8005e62:	77fb      	strb	r3, [r7, #31]
 8005e64:	e112      	b.n	800608c <UART_SetConfig+0x348>
 8005e66:	2308      	movs	r3, #8
 8005e68:	77fb      	strb	r3, [r7, #31]
 8005e6a:	e10f      	b.n	800608c <UART_SetConfig+0x348>
 8005e6c:	2310      	movs	r3, #16
 8005e6e:	77fb      	strb	r3, [r7, #31]
 8005e70:	e10c      	b.n	800608c <UART_SetConfig+0x348>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a68      	ldr	r2, [pc, #416]	@ (8006018 <UART_SetConfig+0x2d4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d120      	bne.n	8005ebe <UART_SetConfig+0x17a>
 8005e7c:	4b64      	ldr	r3, [pc, #400]	@ (8006010 <UART_SetConfig+0x2cc>)
 8005e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e82:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e86:	2b30      	cmp	r3, #48	@ 0x30
 8005e88:	d013      	beq.n	8005eb2 <UART_SetConfig+0x16e>
 8005e8a:	2b30      	cmp	r3, #48	@ 0x30
 8005e8c:	d814      	bhi.n	8005eb8 <UART_SetConfig+0x174>
 8005e8e:	2b20      	cmp	r3, #32
 8005e90:	d009      	beq.n	8005ea6 <UART_SetConfig+0x162>
 8005e92:	2b20      	cmp	r3, #32
 8005e94:	d810      	bhi.n	8005eb8 <UART_SetConfig+0x174>
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <UART_SetConfig+0x15c>
 8005e9a:	2b10      	cmp	r3, #16
 8005e9c:	d006      	beq.n	8005eac <UART_SetConfig+0x168>
 8005e9e:	e00b      	b.n	8005eb8 <UART_SetConfig+0x174>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	77fb      	strb	r3, [r7, #31]
 8005ea4:	e0f2      	b.n	800608c <UART_SetConfig+0x348>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	77fb      	strb	r3, [r7, #31]
 8005eaa:	e0ef      	b.n	800608c <UART_SetConfig+0x348>
 8005eac:	2304      	movs	r3, #4
 8005eae:	77fb      	strb	r3, [r7, #31]
 8005eb0:	e0ec      	b.n	800608c <UART_SetConfig+0x348>
 8005eb2:	2308      	movs	r3, #8
 8005eb4:	77fb      	strb	r3, [r7, #31]
 8005eb6:	e0e9      	b.n	800608c <UART_SetConfig+0x348>
 8005eb8:	2310      	movs	r3, #16
 8005eba:	77fb      	strb	r3, [r7, #31]
 8005ebc:	e0e6      	b.n	800608c <UART_SetConfig+0x348>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a56      	ldr	r2, [pc, #344]	@ (800601c <UART_SetConfig+0x2d8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d120      	bne.n	8005f0a <UART_SetConfig+0x1c6>
 8005ec8:	4b51      	ldr	r3, [pc, #324]	@ (8006010 <UART_SetConfig+0x2cc>)
 8005eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ece:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005ed2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ed4:	d013      	beq.n	8005efe <UART_SetConfig+0x1ba>
 8005ed6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ed8:	d814      	bhi.n	8005f04 <UART_SetConfig+0x1c0>
 8005eda:	2b80      	cmp	r3, #128	@ 0x80
 8005edc:	d009      	beq.n	8005ef2 <UART_SetConfig+0x1ae>
 8005ede:	2b80      	cmp	r3, #128	@ 0x80
 8005ee0:	d810      	bhi.n	8005f04 <UART_SetConfig+0x1c0>
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <UART_SetConfig+0x1a8>
 8005ee6:	2b40      	cmp	r3, #64	@ 0x40
 8005ee8:	d006      	beq.n	8005ef8 <UART_SetConfig+0x1b4>
 8005eea:	e00b      	b.n	8005f04 <UART_SetConfig+0x1c0>
 8005eec:	2300      	movs	r3, #0
 8005eee:	77fb      	strb	r3, [r7, #31]
 8005ef0:	e0cc      	b.n	800608c <UART_SetConfig+0x348>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	77fb      	strb	r3, [r7, #31]
 8005ef6:	e0c9      	b.n	800608c <UART_SetConfig+0x348>
 8005ef8:	2304      	movs	r3, #4
 8005efa:	77fb      	strb	r3, [r7, #31]
 8005efc:	e0c6      	b.n	800608c <UART_SetConfig+0x348>
 8005efe:	2308      	movs	r3, #8
 8005f00:	77fb      	strb	r3, [r7, #31]
 8005f02:	e0c3      	b.n	800608c <UART_SetConfig+0x348>
 8005f04:	2310      	movs	r3, #16
 8005f06:	77fb      	strb	r3, [r7, #31]
 8005f08:	e0c0      	b.n	800608c <UART_SetConfig+0x348>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a44      	ldr	r2, [pc, #272]	@ (8006020 <UART_SetConfig+0x2dc>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d125      	bne.n	8005f60 <UART_SetConfig+0x21c>
 8005f14:	4b3e      	ldr	r3, [pc, #248]	@ (8006010 <UART_SetConfig+0x2cc>)
 8005f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f22:	d017      	beq.n	8005f54 <UART_SetConfig+0x210>
 8005f24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f28:	d817      	bhi.n	8005f5a <UART_SetConfig+0x216>
 8005f2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f2e:	d00b      	beq.n	8005f48 <UART_SetConfig+0x204>
 8005f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f34:	d811      	bhi.n	8005f5a <UART_SetConfig+0x216>
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <UART_SetConfig+0x1fe>
 8005f3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f3e:	d006      	beq.n	8005f4e <UART_SetConfig+0x20a>
 8005f40:	e00b      	b.n	8005f5a <UART_SetConfig+0x216>
 8005f42:	2300      	movs	r3, #0
 8005f44:	77fb      	strb	r3, [r7, #31]
 8005f46:	e0a1      	b.n	800608c <UART_SetConfig+0x348>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	77fb      	strb	r3, [r7, #31]
 8005f4c:	e09e      	b.n	800608c <UART_SetConfig+0x348>
 8005f4e:	2304      	movs	r3, #4
 8005f50:	77fb      	strb	r3, [r7, #31]
 8005f52:	e09b      	b.n	800608c <UART_SetConfig+0x348>
 8005f54:	2308      	movs	r3, #8
 8005f56:	77fb      	strb	r3, [r7, #31]
 8005f58:	e098      	b.n	800608c <UART_SetConfig+0x348>
 8005f5a:	2310      	movs	r3, #16
 8005f5c:	77fb      	strb	r3, [r7, #31]
 8005f5e:	e095      	b.n	800608c <UART_SetConfig+0x348>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a2f      	ldr	r2, [pc, #188]	@ (8006024 <UART_SetConfig+0x2e0>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d125      	bne.n	8005fb6 <UART_SetConfig+0x272>
 8005f6a:	4b29      	ldr	r3, [pc, #164]	@ (8006010 <UART_SetConfig+0x2cc>)
 8005f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f78:	d017      	beq.n	8005faa <UART_SetConfig+0x266>
 8005f7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f7e:	d817      	bhi.n	8005fb0 <UART_SetConfig+0x26c>
 8005f80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f84:	d00b      	beq.n	8005f9e <UART_SetConfig+0x25a>
 8005f86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f8a:	d811      	bhi.n	8005fb0 <UART_SetConfig+0x26c>
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d003      	beq.n	8005f98 <UART_SetConfig+0x254>
 8005f90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f94:	d006      	beq.n	8005fa4 <UART_SetConfig+0x260>
 8005f96:	e00b      	b.n	8005fb0 <UART_SetConfig+0x26c>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	77fb      	strb	r3, [r7, #31]
 8005f9c:	e076      	b.n	800608c <UART_SetConfig+0x348>
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	77fb      	strb	r3, [r7, #31]
 8005fa2:	e073      	b.n	800608c <UART_SetConfig+0x348>
 8005fa4:	2304      	movs	r3, #4
 8005fa6:	77fb      	strb	r3, [r7, #31]
 8005fa8:	e070      	b.n	800608c <UART_SetConfig+0x348>
 8005faa:	2308      	movs	r3, #8
 8005fac:	77fb      	strb	r3, [r7, #31]
 8005fae:	e06d      	b.n	800608c <UART_SetConfig+0x348>
 8005fb0:	2310      	movs	r3, #16
 8005fb2:	77fb      	strb	r3, [r7, #31]
 8005fb4:	e06a      	b.n	800608c <UART_SetConfig+0x348>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a1b      	ldr	r2, [pc, #108]	@ (8006028 <UART_SetConfig+0x2e4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d138      	bne.n	8006032 <UART_SetConfig+0x2ee>
 8005fc0:	4b13      	ldr	r3, [pc, #76]	@ (8006010 <UART_SetConfig+0x2cc>)
 8005fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fc6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005fca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fce:	d017      	beq.n	8006000 <UART_SetConfig+0x2bc>
 8005fd0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fd4:	d82a      	bhi.n	800602c <UART_SetConfig+0x2e8>
 8005fd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fda:	d00b      	beq.n	8005ff4 <UART_SetConfig+0x2b0>
 8005fdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fe0:	d824      	bhi.n	800602c <UART_SetConfig+0x2e8>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <UART_SetConfig+0x2aa>
 8005fe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fea:	d006      	beq.n	8005ffa <UART_SetConfig+0x2b6>
 8005fec:	e01e      	b.n	800602c <UART_SetConfig+0x2e8>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	77fb      	strb	r3, [r7, #31]
 8005ff2:	e04b      	b.n	800608c <UART_SetConfig+0x348>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	77fb      	strb	r3, [r7, #31]
 8005ff8:	e048      	b.n	800608c <UART_SetConfig+0x348>
 8005ffa:	2304      	movs	r3, #4
 8005ffc:	77fb      	strb	r3, [r7, #31]
 8005ffe:	e045      	b.n	800608c <UART_SetConfig+0x348>
 8006000:	2308      	movs	r3, #8
 8006002:	77fb      	strb	r3, [r7, #31]
 8006004:	e042      	b.n	800608c <UART_SetConfig+0x348>
 8006006:	bf00      	nop
 8006008:	efff69f3 	.word	0xefff69f3
 800600c:	40011000 	.word	0x40011000
 8006010:	40023800 	.word	0x40023800
 8006014:	40004400 	.word	0x40004400
 8006018:	40004800 	.word	0x40004800
 800601c:	40004c00 	.word	0x40004c00
 8006020:	40005000 	.word	0x40005000
 8006024:	40011400 	.word	0x40011400
 8006028:	40007800 	.word	0x40007800
 800602c:	2310      	movs	r3, #16
 800602e:	77fb      	strb	r3, [r7, #31]
 8006030:	e02c      	b.n	800608c <UART_SetConfig+0x348>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a72      	ldr	r2, [pc, #456]	@ (8006200 <UART_SetConfig+0x4bc>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d125      	bne.n	8006088 <UART_SetConfig+0x344>
 800603c:	4b71      	ldr	r3, [pc, #452]	@ (8006204 <UART_SetConfig+0x4c0>)
 800603e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006042:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006046:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800604a:	d017      	beq.n	800607c <UART_SetConfig+0x338>
 800604c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006050:	d817      	bhi.n	8006082 <UART_SetConfig+0x33e>
 8006052:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006056:	d00b      	beq.n	8006070 <UART_SetConfig+0x32c>
 8006058:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800605c:	d811      	bhi.n	8006082 <UART_SetConfig+0x33e>
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <UART_SetConfig+0x326>
 8006062:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006066:	d006      	beq.n	8006076 <UART_SetConfig+0x332>
 8006068:	e00b      	b.n	8006082 <UART_SetConfig+0x33e>
 800606a:	2300      	movs	r3, #0
 800606c:	77fb      	strb	r3, [r7, #31]
 800606e:	e00d      	b.n	800608c <UART_SetConfig+0x348>
 8006070:	2302      	movs	r3, #2
 8006072:	77fb      	strb	r3, [r7, #31]
 8006074:	e00a      	b.n	800608c <UART_SetConfig+0x348>
 8006076:	2304      	movs	r3, #4
 8006078:	77fb      	strb	r3, [r7, #31]
 800607a:	e007      	b.n	800608c <UART_SetConfig+0x348>
 800607c:	2308      	movs	r3, #8
 800607e:	77fb      	strb	r3, [r7, #31]
 8006080:	e004      	b.n	800608c <UART_SetConfig+0x348>
 8006082:	2310      	movs	r3, #16
 8006084:	77fb      	strb	r3, [r7, #31]
 8006086:	e001      	b.n	800608c <UART_SetConfig+0x348>
 8006088:	2310      	movs	r3, #16
 800608a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	69db      	ldr	r3, [r3, #28]
 8006090:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006094:	d15c      	bne.n	8006150 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8006096:	7ffb      	ldrb	r3, [r7, #31]
 8006098:	2b08      	cmp	r3, #8
 800609a:	d828      	bhi.n	80060ee <UART_SetConfig+0x3aa>
 800609c:	a201      	add	r2, pc, #4	@ (adr r2, 80060a4 <UART_SetConfig+0x360>)
 800609e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a2:	bf00      	nop
 80060a4:	080060c9 	.word	0x080060c9
 80060a8:	080060d1 	.word	0x080060d1
 80060ac:	080060d9 	.word	0x080060d9
 80060b0:	080060ef 	.word	0x080060ef
 80060b4:	080060df 	.word	0x080060df
 80060b8:	080060ef 	.word	0x080060ef
 80060bc:	080060ef 	.word	0x080060ef
 80060c0:	080060ef 	.word	0x080060ef
 80060c4:	080060e7 	.word	0x080060e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060c8:	f7fe fa18 	bl	80044fc <HAL_RCC_GetPCLK1Freq>
 80060cc:	61b8      	str	r0, [r7, #24]
        break;
 80060ce:	e013      	b.n	80060f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060d0:	f7fe fa28 	bl	8004524 <HAL_RCC_GetPCLK2Freq>
 80060d4:	61b8      	str	r0, [r7, #24]
        break;
 80060d6:	e00f      	b.n	80060f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060d8:	4b4b      	ldr	r3, [pc, #300]	@ (8006208 <UART_SetConfig+0x4c4>)
 80060da:	61bb      	str	r3, [r7, #24]
        break;
 80060dc:	e00c      	b.n	80060f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060de:	f7fe f8fb 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
 80060e2:	61b8      	str	r0, [r7, #24]
        break;
 80060e4:	e008      	b.n	80060f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060ea:	61bb      	str	r3, [r7, #24]
        break;
 80060ec:	e004      	b.n	80060f8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	77bb      	strb	r3, [r7, #30]
        break;
 80060f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d074      	beq.n	80061e8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	005a      	lsls	r2, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	085b      	lsrs	r3, r3, #1
 8006108:	441a      	add	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006112:	b29b      	uxth	r3, r3
 8006114:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	2b0f      	cmp	r3, #15
 800611a:	d916      	bls.n	800614a <UART_SetConfig+0x406>
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006122:	d212      	bcs.n	800614a <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	b29b      	uxth	r3, r3
 8006128:	f023 030f 	bic.w	r3, r3, #15
 800612c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	085b      	lsrs	r3, r3, #1
 8006132:	b29b      	uxth	r3, r3
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	b29a      	uxth	r2, r3
 800613a:	89fb      	ldrh	r3, [r7, #14]
 800613c:	4313      	orrs	r3, r2
 800613e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	89fa      	ldrh	r2, [r7, #14]
 8006146:	60da      	str	r2, [r3, #12]
 8006148:	e04e      	b.n	80061e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	77bb      	strb	r3, [r7, #30]
 800614e:	e04b      	b.n	80061e8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006150:	7ffb      	ldrb	r3, [r7, #31]
 8006152:	2b08      	cmp	r3, #8
 8006154:	d827      	bhi.n	80061a6 <UART_SetConfig+0x462>
 8006156:	a201      	add	r2, pc, #4	@ (adr r2, 800615c <UART_SetConfig+0x418>)
 8006158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615c:	08006181 	.word	0x08006181
 8006160:	08006189 	.word	0x08006189
 8006164:	08006191 	.word	0x08006191
 8006168:	080061a7 	.word	0x080061a7
 800616c:	08006197 	.word	0x08006197
 8006170:	080061a7 	.word	0x080061a7
 8006174:	080061a7 	.word	0x080061a7
 8006178:	080061a7 	.word	0x080061a7
 800617c:	0800619f 	.word	0x0800619f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006180:	f7fe f9bc 	bl	80044fc <HAL_RCC_GetPCLK1Freq>
 8006184:	61b8      	str	r0, [r7, #24]
        break;
 8006186:	e013      	b.n	80061b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006188:	f7fe f9cc 	bl	8004524 <HAL_RCC_GetPCLK2Freq>
 800618c:	61b8      	str	r0, [r7, #24]
        break;
 800618e:	e00f      	b.n	80061b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006190:	4b1d      	ldr	r3, [pc, #116]	@ (8006208 <UART_SetConfig+0x4c4>)
 8006192:	61bb      	str	r3, [r7, #24]
        break;
 8006194:	e00c      	b.n	80061b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006196:	f7fe f89f 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
 800619a:	61b8      	str	r0, [r7, #24]
        break;
 800619c:	e008      	b.n	80061b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800619e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061a2:	61bb      	str	r3, [r7, #24]
        break;
 80061a4:	e004      	b.n	80061b0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80061a6:	2300      	movs	r3, #0
 80061a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	77bb      	strb	r3, [r7, #30]
        break;
 80061ae:	bf00      	nop
    }

    if (pclk != 0U)
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d018      	beq.n	80061e8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	085a      	lsrs	r2, r3, #1
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	441a      	add	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	2b0f      	cmp	r3, #15
 80061d0:	d908      	bls.n	80061e4 <UART_SetConfig+0x4a0>
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061d8:	d204      	bcs.n	80061e4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	60da      	str	r2, [r3, #12]
 80061e2:	e001      	b.n	80061e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 80061f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3720      	adds	r7, #32
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	40007c00 	.word	0x40007c00
 8006204:	40023800 	.word	0x40023800
 8006208:	00f42400 	.word	0x00f42400

0800620c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00a      	beq.n	8006236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00a      	beq.n	800627a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627e:	f003 0308 	and.w	r3, r3, #8
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a0:	f003 0310 	and.w	r3, r3, #16
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00a      	beq.n	80062be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c2:	f003 0320 	and.w	r3, r3, #32
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d01a      	beq.n	8006322 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006306:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800630a:	d10a      	bne.n	8006322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00a      	beq.n	8006344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	605a      	str	r2, [r3, #4]
  }
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af02      	add	r7, sp, #8
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006360:	f7fd f8cc 	bl	80034fc <HAL_GetTick>
 8006364:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0308 	and.w	r3, r3, #8
 8006370:	2b08      	cmp	r3, #8
 8006372:	d10e      	bne.n	8006392 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006374:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f82d 	bl	80063e2 <UART_WaitOnFlagUntilTimeout>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e023      	b.n	80063da <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b04      	cmp	r3, #4
 800639e:	d10e      	bne.n	80063be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f817 	bl	80063e2 <UART_WaitOnFlagUntilTimeout>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e00d      	b.n	80063da <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2220      	movs	r2, #32
 80063c2:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2220      	movs	r2, #32
 80063c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b084      	sub	sp, #16
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	60f8      	str	r0, [r7, #12]
 80063ea:	60b9      	str	r1, [r7, #8]
 80063ec:	603b      	str	r3, [r7, #0]
 80063ee:	4613      	mov	r3, r2
 80063f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063f2:	e05e      	b.n	80064b2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fa:	d05a      	beq.n	80064b2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063fc:	f7fd f87e 	bl	80034fc <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	429a      	cmp	r2, r3
 800640a:	d302      	bcc.n	8006412 <UART_WaitOnFlagUntilTimeout+0x30>
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d11b      	bne.n	800644a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8006420:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 0201 	bic.w	r2, r2, #1
 8006430:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2220      	movs	r2, #32
 8006436:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2220      	movs	r2, #32
 800643c:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e043      	b.n	80064d2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	d02c      	beq.n	80064b2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006462:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006466:	d124      	bne.n	80064b2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006470:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8006480:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0201 	bic.w	r2, r2, #1
 8006490:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2220      	movs	r2, #32
 8006496:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2220      	movs	r2, #32
 800649c:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e00f      	b.n	80064d2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69da      	ldr	r2, [r3, #28]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4013      	ands	r3, r2
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	429a      	cmp	r2, r3
 80064c0:	bf0c      	ite	eq
 80064c2:	2301      	moveq	r3, #1
 80064c4:	2300      	movne	r3, #0
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	461a      	mov	r2, r3
 80064ca:	79fb      	ldrb	r3, [r7, #7]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d091      	beq.n	80063f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <__cvt>:
 80064da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064dc:	ed2d 8b02 	vpush	{d8}
 80064e0:	eeb0 8b40 	vmov.f64	d8, d0
 80064e4:	b085      	sub	sp, #20
 80064e6:	4617      	mov	r7, r2
 80064e8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80064ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064ec:	ee18 2a90 	vmov	r2, s17
 80064f0:	f025 0520 	bic.w	r5, r5, #32
 80064f4:	2a00      	cmp	r2, #0
 80064f6:	bfb6      	itet	lt
 80064f8:	222d      	movlt	r2, #45	@ 0x2d
 80064fa:	2200      	movge	r2, #0
 80064fc:	eeb1 8b40 	vneglt.f64	d8, d0
 8006500:	2d46      	cmp	r5, #70	@ 0x46
 8006502:	460c      	mov	r4, r1
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	d004      	beq.n	8006512 <__cvt+0x38>
 8006508:	2d45      	cmp	r5, #69	@ 0x45
 800650a:	d100      	bne.n	800650e <__cvt+0x34>
 800650c:	3401      	adds	r4, #1
 800650e:	2102      	movs	r1, #2
 8006510:	e000      	b.n	8006514 <__cvt+0x3a>
 8006512:	2103      	movs	r1, #3
 8006514:	ab03      	add	r3, sp, #12
 8006516:	9301      	str	r3, [sp, #4]
 8006518:	ab02      	add	r3, sp, #8
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	4622      	mov	r2, r4
 800651e:	4633      	mov	r3, r6
 8006520:	eeb0 0b48 	vmov.f64	d0, d8
 8006524:	f000 fe40 	bl	80071a8 <_dtoa_r>
 8006528:	2d47      	cmp	r5, #71	@ 0x47
 800652a:	d114      	bne.n	8006556 <__cvt+0x7c>
 800652c:	07fb      	lsls	r3, r7, #31
 800652e:	d50a      	bpl.n	8006546 <__cvt+0x6c>
 8006530:	1902      	adds	r2, r0, r4
 8006532:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800653a:	bf08      	it	eq
 800653c:	9203      	streq	r2, [sp, #12]
 800653e:	2130      	movs	r1, #48	@ 0x30
 8006540:	9b03      	ldr	r3, [sp, #12]
 8006542:	4293      	cmp	r3, r2
 8006544:	d319      	bcc.n	800657a <__cvt+0xa0>
 8006546:	9b03      	ldr	r3, [sp, #12]
 8006548:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800654a:	1a1b      	subs	r3, r3, r0
 800654c:	6013      	str	r3, [r2, #0]
 800654e:	b005      	add	sp, #20
 8006550:	ecbd 8b02 	vpop	{d8}
 8006554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006556:	2d46      	cmp	r5, #70	@ 0x46
 8006558:	eb00 0204 	add.w	r2, r0, r4
 800655c:	d1e9      	bne.n	8006532 <__cvt+0x58>
 800655e:	7803      	ldrb	r3, [r0, #0]
 8006560:	2b30      	cmp	r3, #48	@ 0x30
 8006562:	d107      	bne.n	8006574 <__cvt+0x9a>
 8006564:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800656c:	bf1c      	itt	ne
 800656e:	f1c4 0401 	rsbne	r4, r4, #1
 8006572:	6034      	strne	r4, [r6, #0]
 8006574:	6833      	ldr	r3, [r6, #0]
 8006576:	441a      	add	r2, r3
 8006578:	e7db      	b.n	8006532 <__cvt+0x58>
 800657a:	1c5c      	adds	r4, r3, #1
 800657c:	9403      	str	r4, [sp, #12]
 800657e:	7019      	strb	r1, [r3, #0]
 8006580:	e7de      	b.n	8006540 <__cvt+0x66>

08006582 <__exponent>:
 8006582:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006584:	2900      	cmp	r1, #0
 8006586:	bfba      	itte	lt
 8006588:	4249      	neglt	r1, r1
 800658a:	232d      	movlt	r3, #45	@ 0x2d
 800658c:	232b      	movge	r3, #43	@ 0x2b
 800658e:	2909      	cmp	r1, #9
 8006590:	7002      	strb	r2, [r0, #0]
 8006592:	7043      	strb	r3, [r0, #1]
 8006594:	dd29      	ble.n	80065ea <__exponent+0x68>
 8006596:	f10d 0307 	add.w	r3, sp, #7
 800659a:	461d      	mov	r5, r3
 800659c:	270a      	movs	r7, #10
 800659e:	461a      	mov	r2, r3
 80065a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80065a4:	fb07 1416 	mls	r4, r7, r6, r1
 80065a8:	3430      	adds	r4, #48	@ 0x30
 80065aa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80065ae:	460c      	mov	r4, r1
 80065b0:	2c63      	cmp	r4, #99	@ 0x63
 80065b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80065b6:	4631      	mov	r1, r6
 80065b8:	dcf1      	bgt.n	800659e <__exponent+0x1c>
 80065ba:	3130      	adds	r1, #48	@ 0x30
 80065bc:	1e94      	subs	r4, r2, #2
 80065be:	f803 1c01 	strb.w	r1, [r3, #-1]
 80065c2:	1c41      	adds	r1, r0, #1
 80065c4:	4623      	mov	r3, r4
 80065c6:	42ab      	cmp	r3, r5
 80065c8:	d30a      	bcc.n	80065e0 <__exponent+0x5e>
 80065ca:	f10d 0309 	add.w	r3, sp, #9
 80065ce:	1a9b      	subs	r3, r3, r2
 80065d0:	42ac      	cmp	r4, r5
 80065d2:	bf88      	it	hi
 80065d4:	2300      	movhi	r3, #0
 80065d6:	3302      	adds	r3, #2
 80065d8:	4403      	add	r3, r0
 80065da:	1a18      	subs	r0, r3, r0
 80065dc:	b003      	add	sp, #12
 80065de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065e0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80065e4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80065e8:	e7ed      	b.n	80065c6 <__exponent+0x44>
 80065ea:	2330      	movs	r3, #48	@ 0x30
 80065ec:	3130      	adds	r1, #48	@ 0x30
 80065ee:	7083      	strb	r3, [r0, #2]
 80065f0:	70c1      	strb	r1, [r0, #3]
 80065f2:	1d03      	adds	r3, r0, #4
 80065f4:	e7f1      	b.n	80065da <__exponent+0x58>
	...

080065f8 <_printf_float>:
 80065f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fc:	b08d      	sub	sp, #52	@ 0x34
 80065fe:	460c      	mov	r4, r1
 8006600:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006604:	4616      	mov	r6, r2
 8006606:	461f      	mov	r7, r3
 8006608:	4605      	mov	r5, r0
 800660a:	f000 fccb 	bl	8006fa4 <_localeconv_r>
 800660e:	f8d0 b000 	ldr.w	fp, [r0]
 8006612:	4658      	mov	r0, fp
 8006614:	f7f9 fe64 	bl	80002e0 <strlen>
 8006618:	2300      	movs	r3, #0
 800661a:	930a      	str	r3, [sp, #40]	@ 0x28
 800661c:	f8d8 3000 	ldr.w	r3, [r8]
 8006620:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006624:	6822      	ldr	r2, [r4, #0]
 8006626:	9005      	str	r0, [sp, #20]
 8006628:	3307      	adds	r3, #7
 800662a:	f023 0307 	bic.w	r3, r3, #7
 800662e:	f103 0108 	add.w	r1, r3, #8
 8006632:	f8c8 1000 	str.w	r1, [r8]
 8006636:	ed93 0b00 	vldr	d0, [r3]
 800663a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8006898 <_printf_float+0x2a0>
 800663e:	eeb0 7bc0 	vabs.f64	d7, d0
 8006642:	eeb4 7b46 	vcmp.f64	d7, d6
 8006646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800664a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800664e:	dd24      	ble.n	800669a <_printf_float+0xa2>
 8006650:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006658:	d502      	bpl.n	8006660 <_printf_float+0x68>
 800665a:	232d      	movs	r3, #45	@ 0x2d
 800665c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006660:	498f      	ldr	r1, [pc, #572]	@ (80068a0 <_printf_float+0x2a8>)
 8006662:	4b90      	ldr	r3, [pc, #576]	@ (80068a4 <_printf_float+0x2ac>)
 8006664:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006668:	bf94      	ite	ls
 800666a:	4688      	movls	r8, r1
 800666c:	4698      	movhi	r8, r3
 800666e:	f022 0204 	bic.w	r2, r2, #4
 8006672:	2303      	movs	r3, #3
 8006674:	6123      	str	r3, [r4, #16]
 8006676:	6022      	str	r2, [r4, #0]
 8006678:	f04f 0a00 	mov.w	sl, #0
 800667c:	9700      	str	r7, [sp, #0]
 800667e:	4633      	mov	r3, r6
 8006680:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006682:	4621      	mov	r1, r4
 8006684:	4628      	mov	r0, r5
 8006686:	f000 f9d1 	bl	8006a2c <_printf_common>
 800668a:	3001      	adds	r0, #1
 800668c:	f040 8089 	bne.w	80067a2 <_printf_float+0x1aa>
 8006690:	f04f 30ff 	mov.w	r0, #4294967295
 8006694:	b00d      	add	sp, #52	@ 0x34
 8006696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800669a:	eeb4 0b40 	vcmp.f64	d0, d0
 800669e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066a2:	d709      	bvc.n	80066b8 <_printf_float+0xc0>
 80066a4:	ee10 3a90 	vmov	r3, s1
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	bfbc      	itt	lt
 80066ac:	232d      	movlt	r3, #45	@ 0x2d
 80066ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80066b2:	497d      	ldr	r1, [pc, #500]	@ (80068a8 <_printf_float+0x2b0>)
 80066b4:	4b7d      	ldr	r3, [pc, #500]	@ (80068ac <_printf_float+0x2b4>)
 80066b6:	e7d5      	b.n	8006664 <_printf_float+0x6c>
 80066b8:	6863      	ldr	r3, [r4, #4]
 80066ba:	1c59      	adds	r1, r3, #1
 80066bc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80066c0:	d139      	bne.n	8006736 <_printf_float+0x13e>
 80066c2:	2306      	movs	r3, #6
 80066c4:	6063      	str	r3, [r4, #4]
 80066c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80066ca:	2300      	movs	r3, #0
 80066cc:	6022      	str	r2, [r4, #0]
 80066ce:	9303      	str	r3, [sp, #12]
 80066d0:	ab0a      	add	r3, sp, #40	@ 0x28
 80066d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80066d6:	ab09      	add	r3, sp, #36	@ 0x24
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	6861      	ldr	r1, [r4, #4]
 80066dc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80066e0:	4628      	mov	r0, r5
 80066e2:	f7ff fefa 	bl	80064da <__cvt>
 80066e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80066ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80066ec:	4680      	mov	r8, r0
 80066ee:	d129      	bne.n	8006744 <_printf_float+0x14c>
 80066f0:	1cc8      	adds	r0, r1, #3
 80066f2:	db02      	blt.n	80066fa <_printf_float+0x102>
 80066f4:	6863      	ldr	r3, [r4, #4]
 80066f6:	4299      	cmp	r1, r3
 80066f8:	dd41      	ble.n	800677e <_printf_float+0x186>
 80066fa:	f1a9 0902 	sub.w	r9, r9, #2
 80066fe:	fa5f f989 	uxtb.w	r9, r9
 8006702:	3901      	subs	r1, #1
 8006704:	464a      	mov	r2, r9
 8006706:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800670a:	9109      	str	r1, [sp, #36]	@ 0x24
 800670c:	f7ff ff39 	bl	8006582 <__exponent>
 8006710:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006712:	1813      	adds	r3, r2, r0
 8006714:	2a01      	cmp	r2, #1
 8006716:	4682      	mov	sl, r0
 8006718:	6123      	str	r3, [r4, #16]
 800671a:	dc02      	bgt.n	8006722 <_printf_float+0x12a>
 800671c:	6822      	ldr	r2, [r4, #0]
 800671e:	07d2      	lsls	r2, r2, #31
 8006720:	d501      	bpl.n	8006726 <_printf_float+0x12e>
 8006722:	3301      	adds	r3, #1
 8006724:	6123      	str	r3, [r4, #16]
 8006726:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0a6      	beq.n	800667c <_printf_float+0x84>
 800672e:	232d      	movs	r3, #45	@ 0x2d
 8006730:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006734:	e7a2      	b.n	800667c <_printf_float+0x84>
 8006736:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800673a:	d1c4      	bne.n	80066c6 <_printf_float+0xce>
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1c2      	bne.n	80066c6 <_printf_float+0xce>
 8006740:	2301      	movs	r3, #1
 8006742:	e7bf      	b.n	80066c4 <_printf_float+0xcc>
 8006744:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006748:	d9db      	bls.n	8006702 <_printf_float+0x10a>
 800674a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800674e:	d118      	bne.n	8006782 <_printf_float+0x18a>
 8006750:	2900      	cmp	r1, #0
 8006752:	6863      	ldr	r3, [r4, #4]
 8006754:	dd0b      	ble.n	800676e <_printf_float+0x176>
 8006756:	6121      	str	r1, [r4, #16]
 8006758:	b913      	cbnz	r3, 8006760 <_printf_float+0x168>
 800675a:	6822      	ldr	r2, [r4, #0]
 800675c:	07d0      	lsls	r0, r2, #31
 800675e:	d502      	bpl.n	8006766 <_printf_float+0x16e>
 8006760:	3301      	adds	r3, #1
 8006762:	440b      	add	r3, r1
 8006764:	6123      	str	r3, [r4, #16]
 8006766:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006768:	f04f 0a00 	mov.w	sl, #0
 800676c:	e7db      	b.n	8006726 <_printf_float+0x12e>
 800676e:	b913      	cbnz	r3, 8006776 <_printf_float+0x17e>
 8006770:	6822      	ldr	r2, [r4, #0]
 8006772:	07d2      	lsls	r2, r2, #31
 8006774:	d501      	bpl.n	800677a <_printf_float+0x182>
 8006776:	3302      	adds	r3, #2
 8006778:	e7f4      	b.n	8006764 <_printf_float+0x16c>
 800677a:	2301      	movs	r3, #1
 800677c:	e7f2      	b.n	8006764 <_printf_float+0x16c>
 800677e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8006782:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006784:	4299      	cmp	r1, r3
 8006786:	db05      	blt.n	8006794 <_printf_float+0x19c>
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	6121      	str	r1, [r4, #16]
 800678c:	07d8      	lsls	r0, r3, #31
 800678e:	d5ea      	bpl.n	8006766 <_printf_float+0x16e>
 8006790:	1c4b      	adds	r3, r1, #1
 8006792:	e7e7      	b.n	8006764 <_printf_float+0x16c>
 8006794:	2900      	cmp	r1, #0
 8006796:	bfd4      	ite	le
 8006798:	f1c1 0202 	rsble	r2, r1, #2
 800679c:	2201      	movgt	r2, #1
 800679e:	4413      	add	r3, r2
 80067a0:	e7e0      	b.n	8006764 <_printf_float+0x16c>
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	055a      	lsls	r2, r3, #21
 80067a6:	d407      	bmi.n	80067b8 <_printf_float+0x1c0>
 80067a8:	6923      	ldr	r3, [r4, #16]
 80067aa:	4642      	mov	r2, r8
 80067ac:	4631      	mov	r1, r6
 80067ae:	4628      	mov	r0, r5
 80067b0:	47b8      	blx	r7
 80067b2:	3001      	adds	r0, #1
 80067b4:	d12a      	bne.n	800680c <_printf_float+0x214>
 80067b6:	e76b      	b.n	8006690 <_printf_float+0x98>
 80067b8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80067bc:	f240 80e0 	bls.w	8006980 <_printf_float+0x388>
 80067c0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80067c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80067c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067cc:	d133      	bne.n	8006836 <_printf_float+0x23e>
 80067ce:	4a38      	ldr	r2, [pc, #224]	@ (80068b0 <_printf_float+0x2b8>)
 80067d0:	2301      	movs	r3, #1
 80067d2:	4631      	mov	r1, r6
 80067d4:	4628      	mov	r0, r5
 80067d6:	47b8      	blx	r7
 80067d8:	3001      	adds	r0, #1
 80067da:	f43f af59 	beq.w	8006690 <_printf_float+0x98>
 80067de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80067e2:	4543      	cmp	r3, r8
 80067e4:	db02      	blt.n	80067ec <_printf_float+0x1f4>
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	07d8      	lsls	r0, r3, #31
 80067ea:	d50f      	bpl.n	800680c <_printf_float+0x214>
 80067ec:	9b05      	ldr	r3, [sp, #20]
 80067ee:	465a      	mov	r2, fp
 80067f0:	4631      	mov	r1, r6
 80067f2:	4628      	mov	r0, r5
 80067f4:	47b8      	blx	r7
 80067f6:	3001      	adds	r0, #1
 80067f8:	f43f af4a 	beq.w	8006690 <_printf_float+0x98>
 80067fc:	f04f 0900 	mov.w	r9, #0
 8006800:	f108 38ff 	add.w	r8, r8, #4294967295
 8006804:	f104 0a1a 	add.w	sl, r4, #26
 8006808:	45c8      	cmp	r8, r9
 800680a:	dc09      	bgt.n	8006820 <_printf_float+0x228>
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	079b      	lsls	r3, r3, #30
 8006810:	f100 8107 	bmi.w	8006a22 <_printf_float+0x42a>
 8006814:	68e0      	ldr	r0, [r4, #12]
 8006816:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006818:	4298      	cmp	r0, r3
 800681a:	bfb8      	it	lt
 800681c:	4618      	movlt	r0, r3
 800681e:	e739      	b.n	8006694 <_printf_float+0x9c>
 8006820:	2301      	movs	r3, #1
 8006822:	4652      	mov	r2, sl
 8006824:	4631      	mov	r1, r6
 8006826:	4628      	mov	r0, r5
 8006828:	47b8      	blx	r7
 800682a:	3001      	adds	r0, #1
 800682c:	f43f af30 	beq.w	8006690 <_printf_float+0x98>
 8006830:	f109 0901 	add.w	r9, r9, #1
 8006834:	e7e8      	b.n	8006808 <_printf_float+0x210>
 8006836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006838:	2b00      	cmp	r3, #0
 800683a:	dc3b      	bgt.n	80068b4 <_printf_float+0x2bc>
 800683c:	4a1c      	ldr	r2, [pc, #112]	@ (80068b0 <_printf_float+0x2b8>)
 800683e:	2301      	movs	r3, #1
 8006840:	4631      	mov	r1, r6
 8006842:	4628      	mov	r0, r5
 8006844:	47b8      	blx	r7
 8006846:	3001      	adds	r0, #1
 8006848:	f43f af22 	beq.w	8006690 <_printf_float+0x98>
 800684c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006850:	ea59 0303 	orrs.w	r3, r9, r3
 8006854:	d102      	bne.n	800685c <_printf_float+0x264>
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	07d9      	lsls	r1, r3, #31
 800685a:	d5d7      	bpl.n	800680c <_printf_float+0x214>
 800685c:	9b05      	ldr	r3, [sp, #20]
 800685e:	465a      	mov	r2, fp
 8006860:	4631      	mov	r1, r6
 8006862:	4628      	mov	r0, r5
 8006864:	47b8      	blx	r7
 8006866:	3001      	adds	r0, #1
 8006868:	f43f af12 	beq.w	8006690 <_printf_float+0x98>
 800686c:	f04f 0a00 	mov.w	sl, #0
 8006870:	f104 0b1a 	add.w	fp, r4, #26
 8006874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006876:	425b      	negs	r3, r3
 8006878:	4553      	cmp	r3, sl
 800687a:	dc01      	bgt.n	8006880 <_printf_float+0x288>
 800687c:	464b      	mov	r3, r9
 800687e:	e794      	b.n	80067aa <_printf_float+0x1b2>
 8006880:	2301      	movs	r3, #1
 8006882:	465a      	mov	r2, fp
 8006884:	4631      	mov	r1, r6
 8006886:	4628      	mov	r0, r5
 8006888:	47b8      	blx	r7
 800688a:	3001      	adds	r0, #1
 800688c:	f43f af00 	beq.w	8006690 <_printf_float+0x98>
 8006890:	f10a 0a01 	add.w	sl, sl, #1
 8006894:	e7ee      	b.n	8006874 <_printf_float+0x27c>
 8006896:	bf00      	nop
 8006898:	ffffffff 	.word	0xffffffff
 800689c:	7fefffff 	.word	0x7fefffff
 80068a0:	0802ecd0 	.word	0x0802ecd0
 80068a4:	0802ecd4 	.word	0x0802ecd4
 80068a8:	0802ecd8 	.word	0x0802ecd8
 80068ac:	0802ecdc 	.word	0x0802ecdc
 80068b0:	0802ece0 	.word	0x0802ece0
 80068b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80068b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80068ba:	4553      	cmp	r3, sl
 80068bc:	bfa8      	it	ge
 80068be:	4653      	movge	r3, sl
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	4699      	mov	r9, r3
 80068c4:	dc37      	bgt.n	8006936 <_printf_float+0x33e>
 80068c6:	2300      	movs	r3, #0
 80068c8:	9307      	str	r3, [sp, #28]
 80068ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068ce:	f104 021a 	add.w	r2, r4, #26
 80068d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80068d4:	9907      	ldr	r1, [sp, #28]
 80068d6:	9306      	str	r3, [sp, #24]
 80068d8:	eba3 0309 	sub.w	r3, r3, r9
 80068dc:	428b      	cmp	r3, r1
 80068de:	dc31      	bgt.n	8006944 <_printf_float+0x34c>
 80068e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068e2:	459a      	cmp	sl, r3
 80068e4:	dc3b      	bgt.n	800695e <_printf_float+0x366>
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	07da      	lsls	r2, r3, #31
 80068ea:	d438      	bmi.n	800695e <_printf_float+0x366>
 80068ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068ee:	ebaa 0903 	sub.w	r9, sl, r3
 80068f2:	9b06      	ldr	r3, [sp, #24]
 80068f4:	ebaa 0303 	sub.w	r3, sl, r3
 80068f8:	4599      	cmp	r9, r3
 80068fa:	bfa8      	it	ge
 80068fc:	4699      	movge	r9, r3
 80068fe:	f1b9 0f00 	cmp.w	r9, #0
 8006902:	dc34      	bgt.n	800696e <_printf_float+0x376>
 8006904:	f04f 0800 	mov.w	r8, #0
 8006908:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800690c:	f104 0b1a 	add.w	fp, r4, #26
 8006910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006912:	ebaa 0303 	sub.w	r3, sl, r3
 8006916:	eba3 0309 	sub.w	r3, r3, r9
 800691a:	4543      	cmp	r3, r8
 800691c:	f77f af76 	ble.w	800680c <_printf_float+0x214>
 8006920:	2301      	movs	r3, #1
 8006922:	465a      	mov	r2, fp
 8006924:	4631      	mov	r1, r6
 8006926:	4628      	mov	r0, r5
 8006928:	47b8      	blx	r7
 800692a:	3001      	adds	r0, #1
 800692c:	f43f aeb0 	beq.w	8006690 <_printf_float+0x98>
 8006930:	f108 0801 	add.w	r8, r8, #1
 8006934:	e7ec      	b.n	8006910 <_printf_float+0x318>
 8006936:	4642      	mov	r2, r8
 8006938:	4631      	mov	r1, r6
 800693a:	4628      	mov	r0, r5
 800693c:	47b8      	blx	r7
 800693e:	3001      	adds	r0, #1
 8006940:	d1c1      	bne.n	80068c6 <_printf_float+0x2ce>
 8006942:	e6a5      	b.n	8006690 <_printf_float+0x98>
 8006944:	2301      	movs	r3, #1
 8006946:	4631      	mov	r1, r6
 8006948:	4628      	mov	r0, r5
 800694a:	9206      	str	r2, [sp, #24]
 800694c:	47b8      	blx	r7
 800694e:	3001      	adds	r0, #1
 8006950:	f43f ae9e 	beq.w	8006690 <_printf_float+0x98>
 8006954:	9b07      	ldr	r3, [sp, #28]
 8006956:	9a06      	ldr	r2, [sp, #24]
 8006958:	3301      	adds	r3, #1
 800695a:	9307      	str	r3, [sp, #28]
 800695c:	e7b9      	b.n	80068d2 <_printf_float+0x2da>
 800695e:	9b05      	ldr	r3, [sp, #20]
 8006960:	465a      	mov	r2, fp
 8006962:	4631      	mov	r1, r6
 8006964:	4628      	mov	r0, r5
 8006966:	47b8      	blx	r7
 8006968:	3001      	adds	r0, #1
 800696a:	d1bf      	bne.n	80068ec <_printf_float+0x2f4>
 800696c:	e690      	b.n	8006690 <_printf_float+0x98>
 800696e:	9a06      	ldr	r2, [sp, #24]
 8006970:	464b      	mov	r3, r9
 8006972:	4442      	add	r2, r8
 8006974:	4631      	mov	r1, r6
 8006976:	4628      	mov	r0, r5
 8006978:	47b8      	blx	r7
 800697a:	3001      	adds	r0, #1
 800697c:	d1c2      	bne.n	8006904 <_printf_float+0x30c>
 800697e:	e687      	b.n	8006690 <_printf_float+0x98>
 8006980:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8006984:	f1b9 0f01 	cmp.w	r9, #1
 8006988:	dc01      	bgt.n	800698e <_printf_float+0x396>
 800698a:	07db      	lsls	r3, r3, #31
 800698c:	d536      	bpl.n	80069fc <_printf_float+0x404>
 800698e:	2301      	movs	r3, #1
 8006990:	4642      	mov	r2, r8
 8006992:	4631      	mov	r1, r6
 8006994:	4628      	mov	r0, r5
 8006996:	47b8      	blx	r7
 8006998:	3001      	adds	r0, #1
 800699a:	f43f ae79 	beq.w	8006690 <_printf_float+0x98>
 800699e:	9b05      	ldr	r3, [sp, #20]
 80069a0:	465a      	mov	r2, fp
 80069a2:	4631      	mov	r1, r6
 80069a4:	4628      	mov	r0, r5
 80069a6:	47b8      	blx	r7
 80069a8:	3001      	adds	r0, #1
 80069aa:	f43f ae71 	beq.w	8006690 <_printf_float+0x98>
 80069ae:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80069b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80069b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ba:	f109 39ff 	add.w	r9, r9, #4294967295
 80069be:	d018      	beq.n	80069f2 <_printf_float+0x3fa>
 80069c0:	464b      	mov	r3, r9
 80069c2:	f108 0201 	add.w	r2, r8, #1
 80069c6:	4631      	mov	r1, r6
 80069c8:	4628      	mov	r0, r5
 80069ca:	47b8      	blx	r7
 80069cc:	3001      	adds	r0, #1
 80069ce:	d10c      	bne.n	80069ea <_printf_float+0x3f2>
 80069d0:	e65e      	b.n	8006690 <_printf_float+0x98>
 80069d2:	2301      	movs	r3, #1
 80069d4:	465a      	mov	r2, fp
 80069d6:	4631      	mov	r1, r6
 80069d8:	4628      	mov	r0, r5
 80069da:	47b8      	blx	r7
 80069dc:	3001      	adds	r0, #1
 80069de:	f43f ae57 	beq.w	8006690 <_printf_float+0x98>
 80069e2:	f108 0801 	add.w	r8, r8, #1
 80069e6:	45c8      	cmp	r8, r9
 80069e8:	dbf3      	blt.n	80069d2 <_printf_float+0x3da>
 80069ea:	4653      	mov	r3, sl
 80069ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80069f0:	e6dc      	b.n	80067ac <_printf_float+0x1b4>
 80069f2:	f04f 0800 	mov.w	r8, #0
 80069f6:	f104 0b1a 	add.w	fp, r4, #26
 80069fa:	e7f4      	b.n	80069e6 <_printf_float+0x3ee>
 80069fc:	2301      	movs	r3, #1
 80069fe:	4642      	mov	r2, r8
 8006a00:	e7e1      	b.n	80069c6 <_printf_float+0x3ce>
 8006a02:	2301      	movs	r3, #1
 8006a04:	464a      	mov	r2, r9
 8006a06:	4631      	mov	r1, r6
 8006a08:	4628      	mov	r0, r5
 8006a0a:	47b8      	blx	r7
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	f43f ae3f 	beq.w	8006690 <_printf_float+0x98>
 8006a12:	f108 0801 	add.w	r8, r8, #1
 8006a16:	68e3      	ldr	r3, [r4, #12]
 8006a18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a1a:	1a5b      	subs	r3, r3, r1
 8006a1c:	4543      	cmp	r3, r8
 8006a1e:	dcf0      	bgt.n	8006a02 <_printf_float+0x40a>
 8006a20:	e6f8      	b.n	8006814 <_printf_float+0x21c>
 8006a22:	f04f 0800 	mov.w	r8, #0
 8006a26:	f104 0919 	add.w	r9, r4, #25
 8006a2a:	e7f4      	b.n	8006a16 <_printf_float+0x41e>

08006a2c <_printf_common>:
 8006a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a30:	4616      	mov	r6, r2
 8006a32:	4698      	mov	r8, r3
 8006a34:	688a      	ldr	r2, [r1, #8]
 8006a36:	690b      	ldr	r3, [r1, #16]
 8006a38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	bfb8      	it	lt
 8006a40:	4613      	movlt	r3, r2
 8006a42:	6033      	str	r3, [r6, #0]
 8006a44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a48:	4607      	mov	r7, r0
 8006a4a:	460c      	mov	r4, r1
 8006a4c:	b10a      	cbz	r2, 8006a52 <_printf_common+0x26>
 8006a4e:	3301      	adds	r3, #1
 8006a50:	6033      	str	r3, [r6, #0]
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	0699      	lsls	r1, r3, #26
 8006a56:	bf42      	ittt	mi
 8006a58:	6833      	ldrmi	r3, [r6, #0]
 8006a5a:	3302      	addmi	r3, #2
 8006a5c:	6033      	strmi	r3, [r6, #0]
 8006a5e:	6825      	ldr	r5, [r4, #0]
 8006a60:	f015 0506 	ands.w	r5, r5, #6
 8006a64:	d106      	bne.n	8006a74 <_printf_common+0x48>
 8006a66:	f104 0a19 	add.w	sl, r4, #25
 8006a6a:	68e3      	ldr	r3, [r4, #12]
 8006a6c:	6832      	ldr	r2, [r6, #0]
 8006a6e:	1a9b      	subs	r3, r3, r2
 8006a70:	42ab      	cmp	r3, r5
 8006a72:	dc26      	bgt.n	8006ac2 <_printf_common+0x96>
 8006a74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a78:	6822      	ldr	r2, [r4, #0]
 8006a7a:	3b00      	subs	r3, #0
 8006a7c:	bf18      	it	ne
 8006a7e:	2301      	movne	r3, #1
 8006a80:	0692      	lsls	r2, r2, #26
 8006a82:	d42b      	bmi.n	8006adc <_printf_common+0xb0>
 8006a84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a88:	4641      	mov	r1, r8
 8006a8a:	4638      	mov	r0, r7
 8006a8c:	47c8      	blx	r9
 8006a8e:	3001      	adds	r0, #1
 8006a90:	d01e      	beq.n	8006ad0 <_printf_common+0xa4>
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	6922      	ldr	r2, [r4, #16]
 8006a96:	f003 0306 	and.w	r3, r3, #6
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	bf02      	ittt	eq
 8006a9e:	68e5      	ldreq	r5, [r4, #12]
 8006aa0:	6833      	ldreq	r3, [r6, #0]
 8006aa2:	1aed      	subeq	r5, r5, r3
 8006aa4:	68a3      	ldr	r3, [r4, #8]
 8006aa6:	bf0c      	ite	eq
 8006aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006aac:	2500      	movne	r5, #0
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	bfc4      	itt	gt
 8006ab2:	1a9b      	subgt	r3, r3, r2
 8006ab4:	18ed      	addgt	r5, r5, r3
 8006ab6:	2600      	movs	r6, #0
 8006ab8:	341a      	adds	r4, #26
 8006aba:	42b5      	cmp	r5, r6
 8006abc:	d11a      	bne.n	8006af4 <_printf_common+0xc8>
 8006abe:	2000      	movs	r0, #0
 8006ac0:	e008      	b.n	8006ad4 <_printf_common+0xa8>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	4652      	mov	r2, sl
 8006ac6:	4641      	mov	r1, r8
 8006ac8:	4638      	mov	r0, r7
 8006aca:	47c8      	blx	r9
 8006acc:	3001      	adds	r0, #1
 8006ace:	d103      	bne.n	8006ad8 <_printf_common+0xac>
 8006ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad8:	3501      	adds	r5, #1
 8006ada:	e7c6      	b.n	8006a6a <_printf_common+0x3e>
 8006adc:	18e1      	adds	r1, r4, r3
 8006ade:	1c5a      	adds	r2, r3, #1
 8006ae0:	2030      	movs	r0, #48	@ 0x30
 8006ae2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ae6:	4422      	add	r2, r4
 8006ae8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006aec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006af0:	3302      	adds	r3, #2
 8006af2:	e7c7      	b.n	8006a84 <_printf_common+0x58>
 8006af4:	2301      	movs	r3, #1
 8006af6:	4622      	mov	r2, r4
 8006af8:	4641      	mov	r1, r8
 8006afa:	4638      	mov	r0, r7
 8006afc:	47c8      	blx	r9
 8006afe:	3001      	adds	r0, #1
 8006b00:	d0e6      	beq.n	8006ad0 <_printf_common+0xa4>
 8006b02:	3601      	adds	r6, #1
 8006b04:	e7d9      	b.n	8006aba <_printf_common+0x8e>
	...

08006b08 <_printf_i>:
 8006b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b0c:	7e0f      	ldrb	r7, [r1, #24]
 8006b0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b10:	2f78      	cmp	r7, #120	@ 0x78
 8006b12:	4691      	mov	r9, r2
 8006b14:	4680      	mov	r8, r0
 8006b16:	460c      	mov	r4, r1
 8006b18:	469a      	mov	sl, r3
 8006b1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b1e:	d807      	bhi.n	8006b30 <_printf_i+0x28>
 8006b20:	2f62      	cmp	r7, #98	@ 0x62
 8006b22:	d80a      	bhi.n	8006b3a <_printf_i+0x32>
 8006b24:	2f00      	cmp	r7, #0
 8006b26:	f000 80d2 	beq.w	8006cce <_printf_i+0x1c6>
 8006b2a:	2f58      	cmp	r7, #88	@ 0x58
 8006b2c:	f000 80b9 	beq.w	8006ca2 <_printf_i+0x19a>
 8006b30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b38:	e03a      	b.n	8006bb0 <_printf_i+0xa8>
 8006b3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b3e:	2b15      	cmp	r3, #21
 8006b40:	d8f6      	bhi.n	8006b30 <_printf_i+0x28>
 8006b42:	a101      	add	r1, pc, #4	@ (adr r1, 8006b48 <_printf_i+0x40>)
 8006b44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b48:	08006ba1 	.word	0x08006ba1
 8006b4c:	08006bb5 	.word	0x08006bb5
 8006b50:	08006b31 	.word	0x08006b31
 8006b54:	08006b31 	.word	0x08006b31
 8006b58:	08006b31 	.word	0x08006b31
 8006b5c:	08006b31 	.word	0x08006b31
 8006b60:	08006bb5 	.word	0x08006bb5
 8006b64:	08006b31 	.word	0x08006b31
 8006b68:	08006b31 	.word	0x08006b31
 8006b6c:	08006b31 	.word	0x08006b31
 8006b70:	08006b31 	.word	0x08006b31
 8006b74:	08006cb5 	.word	0x08006cb5
 8006b78:	08006bdf 	.word	0x08006bdf
 8006b7c:	08006c6f 	.word	0x08006c6f
 8006b80:	08006b31 	.word	0x08006b31
 8006b84:	08006b31 	.word	0x08006b31
 8006b88:	08006cd7 	.word	0x08006cd7
 8006b8c:	08006b31 	.word	0x08006b31
 8006b90:	08006bdf 	.word	0x08006bdf
 8006b94:	08006b31 	.word	0x08006b31
 8006b98:	08006b31 	.word	0x08006b31
 8006b9c:	08006c77 	.word	0x08006c77
 8006ba0:	6833      	ldr	r3, [r6, #0]
 8006ba2:	1d1a      	adds	r2, r3, #4
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6032      	str	r2, [r6, #0]
 8006ba8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e09d      	b.n	8006cf0 <_printf_i+0x1e8>
 8006bb4:	6833      	ldr	r3, [r6, #0]
 8006bb6:	6820      	ldr	r0, [r4, #0]
 8006bb8:	1d19      	adds	r1, r3, #4
 8006bba:	6031      	str	r1, [r6, #0]
 8006bbc:	0606      	lsls	r6, r0, #24
 8006bbe:	d501      	bpl.n	8006bc4 <_printf_i+0xbc>
 8006bc0:	681d      	ldr	r5, [r3, #0]
 8006bc2:	e003      	b.n	8006bcc <_printf_i+0xc4>
 8006bc4:	0645      	lsls	r5, r0, #25
 8006bc6:	d5fb      	bpl.n	8006bc0 <_printf_i+0xb8>
 8006bc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006bcc:	2d00      	cmp	r5, #0
 8006bce:	da03      	bge.n	8006bd8 <_printf_i+0xd0>
 8006bd0:	232d      	movs	r3, #45	@ 0x2d
 8006bd2:	426d      	negs	r5, r5
 8006bd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bd8:	4859      	ldr	r0, [pc, #356]	@ (8006d40 <_printf_i+0x238>)
 8006bda:	230a      	movs	r3, #10
 8006bdc:	e011      	b.n	8006c02 <_printf_i+0xfa>
 8006bde:	6821      	ldr	r1, [r4, #0]
 8006be0:	6833      	ldr	r3, [r6, #0]
 8006be2:	0608      	lsls	r0, r1, #24
 8006be4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006be8:	d402      	bmi.n	8006bf0 <_printf_i+0xe8>
 8006bea:	0649      	lsls	r1, r1, #25
 8006bec:	bf48      	it	mi
 8006bee:	b2ad      	uxthmi	r5, r5
 8006bf0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006bf2:	4853      	ldr	r0, [pc, #332]	@ (8006d40 <_printf_i+0x238>)
 8006bf4:	6033      	str	r3, [r6, #0]
 8006bf6:	bf14      	ite	ne
 8006bf8:	230a      	movne	r3, #10
 8006bfa:	2308      	moveq	r3, #8
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c02:	6866      	ldr	r6, [r4, #4]
 8006c04:	60a6      	str	r6, [r4, #8]
 8006c06:	2e00      	cmp	r6, #0
 8006c08:	bfa2      	ittt	ge
 8006c0a:	6821      	ldrge	r1, [r4, #0]
 8006c0c:	f021 0104 	bicge.w	r1, r1, #4
 8006c10:	6021      	strge	r1, [r4, #0]
 8006c12:	b90d      	cbnz	r5, 8006c18 <_printf_i+0x110>
 8006c14:	2e00      	cmp	r6, #0
 8006c16:	d04b      	beq.n	8006cb0 <_printf_i+0x1a8>
 8006c18:	4616      	mov	r6, r2
 8006c1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c1e:	fb03 5711 	mls	r7, r3, r1, r5
 8006c22:	5dc7      	ldrb	r7, [r0, r7]
 8006c24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c28:	462f      	mov	r7, r5
 8006c2a:	42bb      	cmp	r3, r7
 8006c2c:	460d      	mov	r5, r1
 8006c2e:	d9f4      	bls.n	8006c1a <_printf_i+0x112>
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d10b      	bne.n	8006c4c <_printf_i+0x144>
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	07df      	lsls	r7, r3, #31
 8006c38:	d508      	bpl.n	8006c4c <_printf_i+0x144>
 8006c3a:	6923      	ldr	r3, [r4, #16]
 8006c3c:	6861      	ldr	r1, [r4, #4]
 8006c3e:	4299      	cmp	r1, r3
 8006c40:	bfde      	ittt	le
 8006c42:	2330      	movle	r3, #48	@ 0x30
 8006c44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c4c:	1b92      	subs	r2, r2, r6
 8006c4e:	6122      	str	r2, [r4, #16]
 8006c50:	f8cd a000 	str.w	sl, [sp]
 8006c54:	464b      	mov	r3, r9
 8006c56:	aa03      	add	r2, sp, #12
 8006c58:	4621      	mov	r1, r4
 8006c5a:	4640      	mov	r0, r8
 8006c5c:	f7ff fee6 	bl	8006a2c <_printf_common>
 8006c60:	3001      	adds	r0, #1
 8006c62:	d14a      	bne.n	8006cfa <_printf_i+0x1f2>
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295
 8006c68:	b004      	add	sp, #16
 8006c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	f043 0320 	orr.w	r3, r3, #32
 8006c74:	6023      	str	r3, [r4, #0]
 8006c76:	4833      	ldr	r0, [pc, #204]	@ (8006d44 <_printf_i+0x23c>)
 8006c78:	2778      	movs	r7, #120	@ 0x78
 8006c7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	6831      	ldr	r1, [r6, #0]
 8006c82:	061f      	lsls	r7, r3, #24
 8006c84:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c88:	d402      	bmi.n	8006c90 <_printf_i+0x188>
 8006c8a:	065f      	lsls	r7, r3, #25
 8006c8c:	bf48      	it	mi
 8006c8e:	b2ad      	uxthmi	r5, r5
 8006c90:	6031      	str	r1, [r6, #0]
 8006c92:	07d9      	lsls	r1, r3, #31
 8006c94:	bf44      	itt	mi
 8006c96:	f043 0320 	orrmi.w	r3, r3, #32
 8006c9a:	6023      	strmi	r3, [r4, #0]
 8006c9c:	b11d      	cbz	r5, 8006ca6 <_printf_i+0x19e>
 8006c9e:	2310      	movs	r3, #16
 8006ca0:	e7ac      	b.n	8006bfc <_printf_i+0xf4>
 8006ca2:	4827      	ldr	r0, [pc, #156]	@ (8006d40 <_printf_i+0x238>)
 8006ca4:	e7e9      	b.n	8006c7a <_printf_i+0x172>
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	f023 0320 	bic.w	r3, r3, #32
 8006cac:	6023      	str	r3, [r4, #0]
 8006cae:	e7f6      	b.n	8006c9e <_printf_i+0x196>
 8006cb0:	4616      	mov	r6, r2
 8006cb2:	e7bd      	b.n	8006c30 <_printf_i+0x128>
 8006cb4:	6833      	ldr	r3, [r6, #0]
 8006cb6:	6825      	ldr	r5, [r4, #0]
 8006cb8:	6961      	ldr	r1, [r4, #20]
 8006cba:	1d18      	adds	r0, r3, #4
 8006cbc:	6030      	str	r0, [r6, #0]
 8006cbe:	062e      	lsls	r6, r5, #24
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	d501      	bpl.n	8006cc8 <_printf_i+0x1c0>
 8006cc4:	6019      	str	r1, [r3, #0]
 8006cc6:	e002      	b.n	8006cce <_printf_i+0x1c6>
 8006cc8:	0668      	lsls	r0, r5, #25
 8006cca:	d5fb      	bpl.n	8006cc4 <_printf_i+0x1bc>
 8006ccc:	8019      	strh	r1, [r3, #0]
 8006cce:	2300      	movs	r3, #0
 8006cd0:	6123      	str	r3, [r4, #16]
 8006cd2:	4616      	mov	r6, r2
 8006cd4:	e7bc      	b.n	8006c50 <_printf_i+0x148>
 8006cd6:	6833      	ldr	r3, [r6, #0]
 8006cd8:	1d1a      	adds	r2, r3, #4
 8006cda:	6032      	str	r2, [r6, #0]
 8006cdc:	681e      	ldr	r6, [r3, #0]
 8006cde:	6862      	ldr	r2, [r4, #4]
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f7f9 faac 	bl	8000240 <memchr>
 8006ce8:	b108      	cbz	r0, 8006cee <_printf_i+0x1e6>
 8006cea:	1b80      	subs	r0, r0, r6
 8006cec:	6060      	str	r0, [r4, #4]
 8006cee:	6863      	ldr	r3, [r4, #4]
 8006cf0:	6123      	str	r3, [r4, #16]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cf8:	e7aa      	b.n	8006c50 <_printf_i+0x148>
 8006cfa:	6923      	ldr	r3, [r4, #16]
 8006cfc:	4632      	mov	r2, r6
 8006cfe:	4649      	mov	r1, r9
 8006d00:	4640      	mov	r0, r8
 8006d02:	47d0      	blx	sl
 8006d04:	3001      	adds	r0, #1
 8006d06:	d0ad      	beq.n	8006c64 <_printf_i+0x15c>
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	079b      	lsls	r3, r3, #30
 8006d0c:	d413      	bmi.n	8006d36 <_printf_i+0x22e>
 8006d0e:	68e0      	ldr	r0, [r4, #12]
 8006d10:	9b03      	ldr	r3, [sp, #12]
 8006d12:	4298      	cmp	r0, r3
 8006d14:	bfb8      	it	lt
 8006d16:	4618      	movlt	r0, r3
 8006d18:	e7a6      	b.n	8006c68 <_printf_i+0x160>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	4632      	mov	r2, r6
 8006d1e:	4649      	mov	r1, r9
 8006d20:	4640      	mov	r0, r8
 8006d22:	47d0      	blx	sl
 8006d24:	3001      	adds	r0, #1
 8006d26:	d09d      	beq.n	8006c64 <_printf_i+0x15c>
 8006d28:	3501      	adds	r5, #1
 8006d2a:	68e3      	ldr	r3, [r4, #12]
 8006d2c:	9903      	ldr	r1, [sp, #12]
 8006d2e:	1a5b      	subs	r3, r3, r1
 8006d30:	42ab      	cmp	r3, r5
 8006d32:	dcf2      	bgt.n	8006d1a <_printf_i+0x212>
 8006d34:	e7eb      	b.n	8006d0e <_printf_i+0x206>
 8006d36:	2500      	movs	r5, #0
 8006d38:	f104 0619 	add.w	r6, r4, #25
 8006d3c:	e7f5      	b.n	8006d2a <_printf_i+0x222>
 8006d3e:	bf00      	nop
 8006d40:	0802ece2 	.word	0x0802ece2
 8006d44:	0802ecf3 	.word	0x0802ecf3

08006d48 <std>:
 8006d48:	2300      	movs	r3, #0
 8006d4a:	b510      	push	{r4, lr}
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d56:	6083      	str	r3, [r0, #8]
 8006d58:	8181      	strh	r1, [r0, #12]
 8006d5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d5c:	81c2      	strh	r2, [r0, #14]
 8006d5e:	6183      	str	r3, [r0, #24]
 8006d60:	4619      	mov	r1, r3
 8006d62:	2208      	movs	r2, #8
 8006d64:	305c      	adds	r0, #92	@ 0x5c
 8006d66:	f000 f914 	bl	8006f92 <memset>
 8006d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006da0 <std+0x58>)
 8006d6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006da4 <std+0x5c>)
 8006d70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d72:	4b0d      	ldr	r3, [pc, #52]	@ (8006da8 <std+0x60>)
 8006d74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d76:	4b0d      	ldr	r3, [pc, #52]	@ (8006dac <std+0x64>)
 8006d78:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006db0 <std+0x68>)
 8006d7c:	6224      	str	r4, [r4, #32]
 8006d7e:	429c      	cmp	r4, r3
 8006d80:	d006      	beq.n	8006d90 <std+0x48>
 8006d82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d86:	4294      	cmp	r4, r2
 8006d88:	d002      	beq.n	8006d90 <std+0x48>
 8006d8a:	33d0      	adds	r3, #208	@ 0xd0
 8006d8c:	429c      	cmp	r4, r3
 8006d8e:	d105      	bne.n	8006d9c <std+0x54>
 8006d90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d98:	f000 b978 	b.w	800708c <__retarget_lock_init_recursive>
 8006d9c:	bd10      	pop	{r4, pc}
 8006d9e:	bf00      	nop
 8006da0:	08006f0d 	.word	0x08006f0d
 8006da4:	08006f2f 	.word	0x08006f2f
 8006da8:	08006f67 	.word	0x08006f67
 8006dac:	08006f8b 	.word	0x08006f8b
 8006db0:	20000344 	.word	0x20000344

08006db4 <stdio_exit_handler>:
 8006db4:	4a02      	ldr	r2, [pc, #8]	@ (8006dc0 <stdio_exit_handler+0xc>)
 8006db6:	4903      	ldr	r1, [pc, #12]	@ (8006dc4 <stdio_exit_handler+0x10>)
 8006db8:	4803      	ldr	r0, [pc, #12]	@ (8006dc8 <stdio_exit_handler+0x14>)
 8006dba:	f000 b869 	b.w	8006e90 <_fwalk_sglue>
 8006dbe:	bf00      	nop
 8006dc0:	20000010 	.word	0x20000010
 8006dc4:	08008911 	.word	0x08008911
 8006dc8:	20000020 	.word	0x20000020

08006dcc <cleanup_stdio>:
 8006dcc:	6841      	ldr	r1, [r0, #4]
 8006dce:	4b0c      	ldr	r3, [pc, #48]	@ (8006e00 <cleanup_stdio+0x34>)
 8006dd0:	4299      	cmp	r1, r3
 8006dd2:	b510      	push	{r4, lr}
 8006dd4:	4604      	mov	r4, r0
 8006dd6:	d001      	beq.n	8006ddc <cleanup_stdio+0x10>
 8006dd8:	f001 fd9a 	bl	8008910 <_fflush_r>
 8006ddc:	68a1      	ldr	r1, [r4, #8]
 8006dde:	4b09      	ldr	r3, [pc, #36]	@ (8006e04 <cleanup_stdio+0x38>)
 8006de0:	4299      	cmp	r1, r3
 8006de2:	d002      	beq.n	8006dea <cleanup_stdio+0x1e>
 8006de4:	4620      	mov	r0, r4
 8006de6:	f001 fd93 	bl	8008910 <_fflush_r>
 8006dea:	68e1      	ldr	r1, [r4, #12]
 8006dec:	4b06      	ldr	r3, [pc, #24]	@ (8006e08 <cleanup_stdio+0x3c>)
 8006dee:	4299      	cmp	r1, r3
 8006df0:	d004      	beq.n	8006dfc <cleanup_stdio+0x30>
 8006df2:	4620      	mov	r0, r4
 8006df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006df8:	f001 bd8a 	b.w	8008910 <_fflush_r>
 8006dfc:	bd10      	pop	{r4, pc}
 8006dfe:	bf00      	nop
 8006e00:	20000344 	.word	0x20000344
 8006e04:	200003ac 	.word	0x200003ac
 8006e08:	20000414 	.word	0x20000414

08006e0c <global_stdio_init.part.0>:
 8006e0c:	b510      	push	{r4, lr}
 8006e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e3c <global_stdio_init.part.0+0x30>)
 8006e10:	4c0b      	ldr	r4, [pc, #44]	@ (8006e40 <global_stdio_init.part.0+0x34>)
 8006e12:	4a0c      	ldr	r2, [pc, #48]	@ (8006e44 <global_stdio_init.part.0+0x38>)
 8006e14:	601a      	str	r2, [r3, #0]
 8006e16:	4620      	mov	r0, r4
 8006e18:	2200      	movs	r2, #0
 8006e1a:	2104      	movs	r1, #4
 8006e1c:	f7ff ff94 	bl	8006d48 <std>
 8006e20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e24:	2201      	movs	r2, #1
 8006e26:	2109      	movs	r1, #9
 8006e28:	f7ff ff8e 	bl	8006d48 <std>
 8006e2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e30:	2202      	movs	r2, #2
 8006e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e36:	2112      	movs	r1, #18
 8006e38:	f7ff bf86 	b.w	8006d48 <std>
 8006e3c:	2000047c 	.word	0x2000047c
 8006e40:	20000344 	.word	0x20000344
 8006e44:	08006db5 	.word	0x08006db5

08006e48 <__sfp_lock_acquire>:
 8006e48:	4801      	ldr	r0, [pc, #4]	@ (8006e50 <__sfp_lock_acquire+0x8>)
 8006e4a:	f000 b920 	b.w	800708e <__retarget_lock_acquire_recursive>
 8006e4e:	bf00      	nop
 8006e50:	20000485 	.word	0x20000485

08006e54 <__sfp_lock_release>:
 8006e54:	4801      	ldr	r0, [pc, #4]	@ (8006e5c <__sfp_lock_release+0x8>)
 8006e56:	f000 b91b 	b.w	8007090 <__retarget_lock_release_recursive>
 8006e5a:	bf00      	nop
 8006e5c:	20000485 	.word	0x20000485

08006e60 <__sinit>:
 8006e60:	b510      	push	{r4, lr}
 8006e62:	4604      	mov	r4, r0
 8006e64:	f7ff fff0 	bl	8006e48 <__sfp_lock_acquire>
 8006e68:	6a23      	ldr	r3, [r4, #32]
 8006e6a:	b11b      	cbz	r3, 8006e74 <__sinit+0x14>
 8006e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e70:	f7ff bff0 	b.w	8006e54 <__sfp_lock_release>
 8006e74:	4b04      	ldr	r3, [pc, #16]	@ (8006e88 <__sinit+0x28>)
 8006e76:	6223      	str	r3, [r4, #32]
 8006e78:	4b04      	ldr	r3, [pc, #16]	@ (8006e8c <__sinit+0x2c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1f5      	bne.n	8006e6c <__sinit+0xc>
 8006e80:	f7ff ffc4 	bl	8006e0c <global_stdio_init.part.0>
 8006e84:	e7f2      	b.n	8006e6c <__sinit+0xc>
 8006e86:	bf00      	nop
 8006e88:	08006dcd 	.word	0x08006dcd
 8006e8c:	2000047c 	.word	0x2000047c

08006e90 <_fwalk_sglue>:
 8006e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e94:	4607      	mov	r7, r0
 8006e96:	4688      	mov	r8, r1
 8006e98:	4614      	mov	r4, r2
 8006e9a:	2600      	movs	r6, #0
 8006e9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ea0:	f1b9 0901 	subs.w	r9, r9, #1
 8006ea4:	d505      	bpl.n	8006eb2 <_fwalk_sglue+0x22>
 8006ea6:	6824      	ldr	r4, [r4, #0]
 8006ea8:	2c00      	cmp	r4, #0
 8006eaa:	d1f7      	bne.n	8006e9c <_fwalk_sglue+0xc>
 8006eac:	4630      	mov	r0, r6
 8006eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eb2:	89ab      	ldrh	r3, [r5, #12]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d907      	bls.n	8006ec8 <_fwalk_sglue+0x38>
 8006eb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	d003      	beq.n	8006ec8 <_fwalk_sglue+0x38>
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	47c0      	blx	r8
 8006ec6:	4306      	orrs	r6, r0
 8006ec8:	3568      	adds	r5, #104	@ 0x68
 8006eca:	e7e9      	b.n	8006ea0 <_fwalk_sglue+0x10>

08006ecc <siprintf>:
 8006ecc:	b40e      	push	{r1, r2, r3}
 8006ece:	b500      	push	{lr}
 8006ed0:	b09c      	sub	sp, #112	@ 0x70
 8006ed2:	ab1d      	add	r3, sp, #116	@ 0x74
 8006ed4:	9002      	str	r0, [sp, #8]
 8006ed6:	9006      	str	r0, [sp, #24]
 8006ed8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006edc:	4809      	ldr	r0, [pc, #36]	@ (8006f04 <siprintf+0x38>)
 8006ede:	9107      	str	r1, [sp, #28]
 8006ee0:	9104      	str	r1, [sp, #16]
 8006ee2:	4909      	ldr	r1, [pc, #36]	@ (8006f08 <siprintf+0x3c>)
 8006ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ee8:	9105      	str	r1, [sp, #20]
 8006eea:	6800      	ldr	r0, [r0, #0]
 8006eec:	9301      	str	r3, [sp, #4]
 8006eee:	a902      	add	r1, sp, #8
 8006ef0:	f001 fb8e 	bl	8008610 <_svfiprintf_r>
 8006ef4:	9b02      	ldr	r3, [sp, #8]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	701a      	strb	r2, [r3, #0]
 8006efa:	b01c      	add	sp, #112	@ 0x70
 8006efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f00:	b003      	add	sp, #12
 8006f02:	4770      	bx	lr
 8006f04:	2000001c 	.word	0x2000001c
 8006f08:	ffff0208 	.word	0xffff0208

08006f0c <__sread>:
 8006f0c:	b510      	push	{r4, lr}
 8006f0e:	460c      	mov	r4, r1
 8006f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f14:	f000 f86c 	bl	8006ff0 <_read_r>
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	bfab      	itete	ge
 8006f1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f1e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f20:	181b      	addge	r3, r3, r0
 8006f22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f26:	bfac      	ite	ge
 8006f28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f2a:	81a3      	strhlt	r3, [r4, #12]
 8006f2c:	bd10      	pop	{r4, pc}

08006f2e <__swrite>:
 8006f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f32:	461f      	mov	r7, r3
 8006f34:	898b      	ldrh	r3, [r1, #12]
 8006f36:	05db      	lsls	r3, r3, #23
 8006f38:	4605      	mov	r5, r0
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	4616      	mov	r6, r2
 8006f3e:	d505      	bpl.n	8006f4c <__swrite+0x1e>
 8006f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f44:	2302      	movs	r3, #2
 8006f46:	2200      	movs	r2, #0
 8006f48:	f000 f840 	bl	8006fcc <_lseek_r>
 8006f4c:	89a3      	ldrh	r3, [r4, #12]
 8006f4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f56:	81a3      	strh	r3, [r4, #12]
 8006f58:	4632      	mov	r2, r6
 8006f5a:	463b      	mov	r3, r7
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f62:	f000 b857 	b.w	8007014 <_write_r>

08006f66 <__sseek>:
 8006f66:	b510      	push	{r4, lr}
 8006f68:	460c      	mov	r4, r1
 8006f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f6e:	f000 f82d 	bl	8006fcc <_lseek_r>
 8006f72:	1c43      	adds	r3, r0, #1
 8006f74:	89a3      	ldrh	r3, [r4, #12]
 8006f76:	bf15      	itete	ne
 8006f78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f82:	81a3      	strheq	r3, [r4, #12]
 8006f84:	bf18      	it	ne
 8006f86:	81a3      	strhne	r3, [r4, #12]
 8006f88:	bd10      	pop	{r4, pc}

08006f8a <__sclose>:
 8006f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f8e:	f000 b80d 	b.w	8006fac <_close_r>

08006f92 <memset>:
 8006f92:	4402      	add	r2, r0
 8006f94:	4603      	mov	r3, r0
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d100      	bne.n	8006f9c <memset+0xa>
 8006f9a:	4770      	bx	lr
 8006f9c:	f803 1b01 	strb.w	r1, [r3], #1
 8006fa0:	e7f9      	b.n	8006f96 <memset+0x4>
	...

08006fa4 <_localeconv_r>:
 8006fa4:	4800      	ldr	r0, [pc, #0]	@ (8006fa8 <_localeconv_r+0x4>)
 8006fa6:	4770      	bx	lr
 8006fa8:	2000015c 	.word	0x2000015c

08006fac <_close_r>:
 8006fac:	b538      	push	{r3, r4, r5, lr}
 8006fae:	4d06      	ldr	r5, [pc, #24]	@ (8006fc8 <_close_r+0x1c>)
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	4608      	mov	r0, r1
 8006fb6:	602b      	str	r3, [r5, #0]
 8006fb8:	f7fa fe04 	bl	8001bc4 <_close>
 8006fbc:	1c43      	adds	r3, r0, #1
 8006fbe:	d102      	bne.n	8006fc6 <_close_r+0x1a>
 8006fc0:	682b      	ldr	r3, [r5, #0]
 8006fc2:	b103      	cbz	r3, 8006fc6 <_close_r+0x1a>
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	bd38      	pop	{r3, r4, r5, pc}
 8006fc8:	20000480 	.word	0x20000480

08006fcc <_lseek_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	4d07      	ldr	r5, [pc, #28]	@ (8006fec <_lseek_r+0x20>)
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	4608      	mov	r0, r1
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	602a      	str	r2, [r5, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f7fa fe19 	bl	8001c12 <_lseek>
 8006fe0:	1c43      	adds	r3, r0, #1
 8006fe2:	d102      	bne.n	8006fea <_lseek_r+0x1e>
 8006fe4:	682b      	ldr	r3, [r5, #0]
 8006fe6:	b103      	cbz	r3, 8006fea <_lseek_r+0x1e>
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	bd38      	pop	{r3, r4, r5, pc}
 8006fec:	20000480 	.word	0x20000480

08006ff0 <_read_r>:
 8006ff0:	b538      	push	{r3, r4, r5, lr}
 8006ff2:	4d07      	ldr	r5, [pc, #28]	@ (8007010 <_read_r+0x20>)
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	4608      	mov	r0, r1
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	602a      	str	r2, [r5, #0]
 8006ffe:	461a      	mov	r2, r3
 8007000:	f7fa fda7 	bl	8001b52 <_read>
 8007004:	1c43      	adds	r3, r0, #1
 8007006:	d102      	bne.n	800700e <_read_r+0x1e>
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	b103      	cbz	r3, 800700e <_read_r+0x1e>
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	20000480 	.word	0x20000480

08007014 <_write_r>:
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	4d07      	ldr	r5, [pc, #28]	@ (8007034 <_write_r+0x20>)
 8007018:	4604      	mov	r4, r0
 800701a:	4608      	mov	r0, r1
 800701c:	4611      	mov	r1, r2
 800701e:	2200      	movs	r2, #0
 8007020:	602a      	str	r2, [r5, #0]
 8007022:	461a      	mov	r2, r3
 8007024:	f7fa fdb2 	bl	8001b8c <_write>
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	d102      	bne.n	8007032 <_write_r+0x1e>
 800702c:	682b      	ldr	r3, [r5, #0]
 800702e:	b103      	cbz	r3, 8007032 <_write_r+0x1e>
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	bd38      	pop	{r3, r4, r5, pc}
 8007034:	20000480 	.word	0x20000480

08007038 <__errno>:
 8007038:	4b01      	ldr	r3, [pc, #4]	@ (8007040 <__errno+0x8>)
 800703a:	6818      	ldr	r0, [r3, #0]
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	2000001c 	.word	0x2000001c

08007044 <__libc_init_array>:
 8007044:	b570      	push	{r4, r5, r6, lr}
 8007046:	4d0d      	ldr	r5, [pc, #52]	@ (800707c <__libc_init_array+0x38>)
 8007048:	4c0d      	ldr	r4, [pc, #52]	@ (8007080 <__libc_init_array+0x3c>)
 800704a:	1b64      	subs	r4, r4, r5
 800704c:	10a4      	asrs	r4, r4, #2
 800704e:	2600      	movs	r6, #0
 8007050:	42a6      	cmp	r6, r4
 8007052:	d109      	bne.n	8007068 <__libc_init_array+0x24>
 8007054:	4d0b      	ldr	r5, [pc, #44]	@ (8007084 <__libc_init_array+0x40>)
 8007056:	4c0c      	ldr	r4, [pc, #48]	@ (8007088 <__libc_init_array+0x44>)
 8007058:	f001 fff8 	bl	800904c <_init>
 800705c:	1b64      	subs	r4, r4, r5
 800705e:	10a4      	asrs	r4, r4, #2
 8007060:	2600      	movs	r6, #0
 8007062:	42a6      	cmp	r6, r4
 8007064:	d105      	bne.n	8007072 <__libc_init_array+0x2e>
 8007066:	bd70      	pop	{r4, r5, r6, pc}
 8007068:	f855 3b04 	ldr.w	r3, [r5], #4
 800706c:	4798      	blx	r3
 800706e:	3601      	adds	r6, #1
 8007070:	e7ee      	b.n	8007050 <__libc_init_array+0xc>
 8007072:	f855 3b04 	ldr.w	r3, [r5], #4
 8007076:	4798      	blx	r3
 8007078:	3601      	adds	r6, #1
 800707a:	e7f2      	b.n	8007062 <__libc_init_array+0x1e>
 800707c:	0802f048 	.word	0x0802f048
 8007080:	0802f048 	.word	0x0802f048
 8007084:	0802f048 	.word	0x0802f048
 8007088:	0802f04c 	.word	0x0802f04c

0800708c <__retarget_lock_init_recursive>:
 800708c:	4770      	bx	lr

0800708e <__retarget_lock_acquire_recursive>:
 800708e:	4770      	bx	lr

08007090 <__retarget_lock_release_recursive>:
 8007090:	4770      	bx	lr

08007092 <quorem>:
 8007092:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007096:	6903      	ldr	r3, [r0, #16]
 8007098:	690c      	ldr	r4, [r1, #16]
 800709a:	42a3      	cmp	r3, r4
 800709c:	4607      	mov	r7, r0
 800709e:	db7e      	blt.n	800719e <quorem+0x10c>
 80070a0:	3c01      	subs	r4, #1
 80070a2:	f101 0814 	add.w	r8, r1, #20
 80070a6:	00a3      	lsls	r3, r4, #2
 80070a8:	f100 0514 	add.w	r5, r0, #20
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070b2:	9301      	str	r3, [sp, #4]
 80070b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070bc:	3301      	adds	r3, #1
 80070be:	429a      	cmp	r2, r3
 80070c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80070c8:	d32e      	bcc.n	8007128 <quorem+0x96>
 80070ca:	f04f 0a00 	mov.w	sl, #0
 80070ce:	46c4      	mov	ip, r8
 80070d0:	46ae      	mov	lr, r5
 80070d2:	46d3      	mov	fp, sl
 80070d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80070d8:	b298      	uxth	r0, r3
 80070da:	fb06 a000 	mla	r0, r6, r0, sl
 80070de:	0c02      	lsrs	r2, r0, #16
 80070e0:	0c1b      	lsrs	r3, r3, #16
 80070e2:	fb06 2303 	mla	r3, r6, r3, r2
 80070e6:	f8de 2000 	ldr.w	r2, [lr]
 80070ea:	b280      	uxth	r0, r0
 80070ec:	b292      	uxth	r2, r2
 80070ee:	1a12      	subs	r2, r2, r0
 80070f0:	445a      	add	r2, fp
 80070f2:	f8de 0000 	ldr.w	r0, [lr]
 80070f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007100:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007104:	b292      	uxth	r2, r2
 8007106:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800710a:	45e1      	cmp	r9, ip
 800710c:	f84e 2b04 	str.w	r2, [lr], #4
 8007110:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007114:	d2de      	bcs.n	80070d4 <quorem+0x42>
 8007116:	9b00      	ldr	r3, [sp, #0]
 8007118:	58eb      	ldr	r3, [r5, r3]
 800711a:	b92b      	cbnz	r3, 8007128 <quorem+0x96>
 800711c:	9b01      	ldr	r3, [sp, #4]
 800711e:	3b04      	subs	r3, #4
 8007120:	429d      	cmp	r5, r3
 8007122:	461a      	mov	r2, r3
 8007124:	d32f      	bcc.n	8007186 <quorem+0xf4>
 8007126:	613c      	str	r4, [r7, #16]
 8007128:	4638      	mov	r0, r7
 800712a:	f001 f90d 	bl	8008348 <__mcmp>
 800712e:	2800      	cmp	r0, #0
 8007130:	db25      	blt.n	800717e <quorem+0xec>
 8007132:	4629      	mov	r1, r5
 8007134:	2000      	movs	r0, #0
 8007136:	f858 2b04 	ldr.w	r2, [r8], #4
 800713a:	f8d1 c000 	ldr.w	ip, [r1]
 800713e:	fa1f fe82 	uxth.w	lr, r2
 8007142:	fa1f f38c 	uxth.w	r3, ip
 8007146:	eba3 030e 	sub.w	r3, r3, lr
 800714a:	4403      	add	r3, r0
 800714c:	0c12      	lsrs	r2, r2, #16
 800714e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007152:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007156:	b29b      	uxth	r3, r3
 8007158:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800715c:	45c1      	cmp	r9, r8
 800715e:	f841 3b04 	str.w	r3, [r1], #4
 8007162:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007166:	d2e6      	bcs.n	8007136 <quorem+0xa4>
 8007168:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800716c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007170:	b922      	cbnz	r2, 800717c <quorem+0xea>
 8007172:	3b04      	subs	r3, #4
 8007174:	429d      	cmp	r5, r3
 8007176:	461a      	mov	r2, r3
 8007178:	d30b      	bcc.n	8007192 <quorem+0x100>
 800717a:	613c      	str	r4, [r7, #16]
 800717c:	3601      	adds	r6, #1
 800717e:	4630      	mov	r0, r6
 8007180:	b003      	add	sp, #12
 8007182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007186:	6812      	ldr	r2, [r2, #0]
 8007188:	3b04      	subs	r3, #4
 800718a:	2a00      	cmp	r2, #0
 800718c:	d1cb      	bne.n	8007126 <quorem+0x94>
 800718e:	3c01      	subs	r4, #1
 8007190:	e7c6      	b.n	8007120 <quorem+0x8e>
 8007192:	6812      	ldr	r2, [r2, #0]
 8007194:	3b04      	subs	r3, #4
 8007196:	2a00      	cmp	r2, #0
 8007198:	d1ef      	bne.n	800717a <quorem+0xe8>
 800719a:	3c01      	subs	r4, #1
 800719c:	e7ea      	b.n	8007174 <quorem+0xe2>
 800719e:	2000      	movs	r0, #0
 80071a0:	e7ee      	b.n	8007180 <quorem+0xee>
 80071a2:	0000      	movs	r0, r0
 80071a4:	0000      	movs	r0, r0
	...

080071a8 <_dtoa_r>:
 80071a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ac:	ed2d 8b02 	vpush	{d8}
 80071b0:	69c7      	ldr	r7, [r0, #28]
 80071b2:	b091      	sub	sp, #68	@ 0x44
 80071b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80071b8:	ec55 4b10 	vmov	r4, r5, d0
 80071bc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80071be:	9107      	str	r1, [sp, #28]
 80071c0:	4681      	mov	r9, r0
 80071c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80071c4:	930d      	str	r3, [sp, #52]	@ 0x34
 80071c6:	b97f      	cbnz	r7, 80071e8 <_dtoa_r+0x40>
 80071c8:	2010      	movs	r0, #16
 80071ca:	f000 fd8d 	bl	8007ce8 <malloc>
 80071ce:	4602      	mov	r2, r0
 80071d0:	f8c9 001c 	str.w	r0, [r9, #28]
 80071d4:	b920      	cbnz	r0, 80071e0 <_dtoa_r+0x38>
 80071d6:	4ba0      	ldr	r3, [pc, #640]	@ (8007458 <_dtoa_r+0x2b0>)
 80071d8:	21ef      	movs	r1, #239	@ 0xef
 80071da:	48a0      	ldr	r0, [pc, #640]	@ (800745c <_dtoa_r+0x2b4>)
 80071dc:	f001 fbf8 	bl	80089d0 <__assert_func>
 80071e0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80071e4:	6007      	str	r7, [r0, #0]
 80071e6:	60c7      	str	r7, [r0, #12]
 80071e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80071ec:	6819      	ldr	r1, [r3, #0]
 80071ee:	b159      	cbz	r1, 8007208 <_dtoa_r+0x60>
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	604a      	str	r2, [r1, #4]
 80071f4:	2301      	movs	r3, #1
 80071f6:	4093      	lsls	r3, r2
 80071f8:	608b      	str	r3, [r1, #8]
 80071fa:	4648      	mov	r0, r9
 80071fc:	f000 fe6a 	bl	8007ed4 <_Bfree>
 8007200:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007204:	2200      	movs	r2, #0
 8007206:	601a      	str	r2, [r3, #0]
 8007208:	1e2b      	subs	r3, r5, #0
 800720a:	bfbb      	ittet	lt
 800720c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007210:	9303      	strlt	r3, [sp, #12]
 8007212:	2300      	movge	r3, #0
 8007214:	2201      	movlt	r2, #1
 8007216:	bfac      	ite	ge
 8007218:	6033      	strge	r3, [r6, #0]
 800721a:	6032      	strlt	r2, [r6, #0]
 800721c:	4b90      	ldr	r3, [pc, #576]	@ (8007460 <_dtoa_r+0x2b8>)
 800721e:	9e03      	ldr	r6, [sp, #12]
 8007220:	43b3      	bics	r3, r6
 8007222:	d110      	bne.n	8007246 <_dtoa_r+0x9e>
 8007224:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007226:	f242 730f 	movw	r3, #9999	@ 0x270f
 800722a:	6013      	str	r3, [r2, #0]
 800722c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007230:	4323      	orrs	r3, r4
 8007232:	f000 84de 	beq.w	8007bf2 <_dtoa_r+0xa4a>
 8007236:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007238:	4f8a      	ldr	r7, [pc, #552]	@ (8007464 <_dtoa_r+0x2bc>)
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 84e0 	beq.w	8007c00 <_dtoa_r+0xa58>
 8007240:	1cfb      	adds	r3, r7, #3
 8007242:	f000 bcdb 	b.w	8007bfc <_dtoa_r+0xa54>
 8007246:	ed9d 8b02 	vldr	d8, [sp, #8]
 800724a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800724e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007252:	d10a      	bne.n	800726a <_dtoa_r+0xc2>
 8007254:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007256:	2301      	movs	r3, #1
 8007258:	6013      	str	r3, [r2, #0]
 800725a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800725c:	b113      	cbz	r3, 8007264 <_dtoa_r+0xbc>
 800725e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007260:	4b81      	ldr	r3, [pc, #516]	@ (8007468 <_dtoa_r+0x2c0>)
 8007262:	6013      	str	r3, [r2, #0]
 8007264:	4f81      	ldr	r7, [pc, #516]	@ (800746c <_dtoa_r+0x2c4>)
 8007266:	f000 bccb 	b.w	8007c00 <_dtoa_r+0xa58>
 800726a:	aa0e      	add	r2, sp, #56	@ 0x38
 800726c:	a90f      	add	r1, sp, #60	@ 0x3c
 800726e:	4648      	mov	r0, r9
 8007270:	eeb0 0b48 	vmov.f64	d0, d8
 8007274:	f001 f918 	bl	80084a8 <__d2b>
 8007278:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800727c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800727e:	9001      	str	r0, [sp, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d045      	beq.n	8007310 <_dtoa_r+0x168>
 8007284:	eeb0 7b48 	vmov.f64	d7, d8
 8007288:	ee18 1a90 	vmov	r1, s17
 800728c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007290:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8007294:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007298:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800729c:	2500      	movs	r5, #0
 800729e:	ee07 1a90 	vmov	s15, r1
 80072a2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80072a6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007440 <_dtoa_r+0x298>
 80072aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80072ae:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007448 <_dtoa_r+0x2a0>
 80072b2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80072b6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007450 <_dtoa_r+0x2a8>
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80072c2:	eeb0 7b46 	vmov.f64	d7, d6
 80072c6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80072ca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80072ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80072d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d6:	ee16 8a90 	vmov	r8, s13
 80072da:	d508      	bpl.n	80072ee <_dtoa_r+0x146>
 80072dc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80072e0:	eeb4 6b47 	vcmp.f64	d6, d7
 80072e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e8:	bf18      	it	ne
 80072ea:	f108 38ff 	addne.w	r8, r8, #4294967295
 80072ee:	f1b8 0f16 	cmp.w	r8, #22
 80072f2:	d82b      	bhi.n	800734c <_dtoa_r+0x1a4>
 80072f4:	495e      	ldr	r1, [pc, #376]	@ (8007470 <_dtoa_r+0x2c8>)
 80072f6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80072fa:	ed91 7b00 	vldr	d7, [r1]
 80072fe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007306:	d501      	bpl.n	800730c <_dtoa_r+0x164>
 8007308:	f108 38ff 	add.w	r8, r8, #4294967295
 800730c:	2100      	movs	r1, #0
 800730e:	e01e      	b.n	800734e <_dtoa_r+0x1a6>
 8007310:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007312:	4413      	add	r3, r2
 8007314:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007318:	2920      	cmp	r1, #32
 800731a:	bfc1      	itttt	gt
 800731c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007320:	408e      	lslgt	r6, r1
 8007322:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8007326:	fa24 f101 	lsrgt.w	r1, r4, r1
 800732a:	bfd6      	itet	le
 800732c:	f1c1 0120 	rsble	r1, r1, #32
 8007330:	4331      	orrgt	r1, r6
 8007332:	fa04 f101 	lslle.w	r1, r4, r1
 8007336:	ee07 1a90 	vmov	s15, r1
 800733a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800733e:	3b01      	subs	r3, #1
 8007340:	ee17 1a90 	vmov	r1, s15
 8007344:	2501      	movs	r5, #1
 8007346:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800734a:	e7a8      	b.n	800729e <_dtoa_r+0xf6>
 800734c:	2101      	movs	r1, #1
 800734e:	1ad2      	subs	r2, r2, r3
 8007350:	1e53      	subs	r3, r2, #1
 8007352:	9306      	str	r3, [sp, #24]
 8007354:	bf45      	ittet	mi
 8007356:	f1c2 0301 	rsbmi	r3, r2, #1
 800735a:	9305      	strmi	r3, [sp, #20]
 800735c:	2300      	movpl	r3, #0
 800735e:	2300      	movmi	r3, #0
 8007360:	bf4c      	ite	mi
 8007362:	9306      	strmi	r3, [sp, #24]
 8007364:	9305      	strpl	r3, [sp, #20]
 8007366:	f1b8 0f00 	cmp.w	r8, #0
 800736a:	910c      	str	r1, [sp, #48]	@ 0x30
 800736c:	db18      	blt.n	80073a0 <_dtoa_r+0x1f8>
 800736e:	9b06      	ldr	r3, [sp, #24]
 8007370:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007374:	4443      	add	r3, r8
 8007376:	9306      	str	r3, [sp, #24]
 8007378:	2300      	movs	r3, #0
 800737a:	9a07      	ldr	r2, [sp, #28]
 800737c:	2a09      	cmp	r2, #9
 800737e:	d849      	bhi.n	8007414 <_dtoa_r+0x26c>
 8007380:	2a05      	cmp	r2, #5
 8007382:	bfc4      	itt	gt
 8007384:	3a04      	subgt	r2, #4
 8007386:	9207      	strgt	r2, [sp, #28]
 8007388:	9a07      	ldr	r2, [sp, #28]
 800738a:	f1a2 0202 	sub.w	r2, r2, #2
 800738e:	bfcc      	ite	gt
 8007390:	2400      	movgt	r4, #0
 8007392:	2401      	movle	r4, #1
 8007394:	2a03      	cmp	r2, #3
 8007396:	d848      	bhi.n	800742a <_dtoa_r+0x282>
 8007398:	e8df f002 	tbb	[pc, r2]
 800739c:	3a2c2e0b 	.word	0x3a2c2e0b
 80073a0:	9b05      	ldr	r3, [sp, #20]
 80073a2:	2200      	movs	r2, #0
 80073a4:	eba3 0308 	sub.w	r3, r3, r8
 80073a8:	9305      	str	r3, [sp, #20]
 80073aa:	920a      	str	r2, [sp, #40]	@ 0x28
 80073ac:	f1c8 0300 	rsb	r3, r8, #0
 80073b0:	e7e3      	b.n	800737a <_dtoa_r+0x1d2>
 80073b2:	2200      	movs	r2, #0
 80073b4:	9208      	str	r2, [sp, #32]
 80073b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073b8:	2a00      	cmp	r2, #0
 80073ba:	dc39      	bgt.n	8007430 <_dtoa_r+0x288>
 80073bc:	f04f 0b01 	mov.w	fp, #1
 80073c0:	46da      	mov	sl, fp
 80073c2:	465a      	mov	r2, fp
 80073c4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80073c8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80073cc:	2100      	movs	r1, #0
 80073ce:	2004      	movs	r0, #4
 80073d0:	f100 0614 	add.w	r6, r0, #20
 80073d4:	4296      	cmp	r6, r2
 80073d6:	d930      	bls.n	800743a <_dtoa_r+0x292>
 80073d8:	6079      	str	r1, [r7, #4]
 80073da:	4648      	mov	r0, r9
 80073dc:	9304      	str	r3, [sp, #16]
 80073de:	f000 fd39 	bl	8007e54 <_Balloc>
 80073e2:	9b04      	ldr	r3, [sp, #16]
 80073e4:	4607      	mov	r7, r0
 80073e6:	2800      	cmp	r0, #0
 80073e8:	d146      	bne.n	8007478 <_dtoa_r+0x2d0>
 80073ea:	4b22      	ldr	r3, [pc, #136]	@ (8007474 <_dtoa_r+0x2cc>)
 80073ec:	4602      	mov	r2, r0
 80073ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80073f2:	e6f2      	b.n	80071da <_dtoa_r+0x32>
 80073f4:	2201      	movs	r2, #1
 80073f6:	e7dd      	b.n	80073b4 <_dtoa_r+0x20c>
 80073f8:	2200      	movs	r2, #0
 80073fa:	9208      	str	r2, [sp, #32]
 80073fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073fe:	eb08 0b02 	add.w	fp, r8, r2
 8007402:	f10b 0a01 	add.w	sl, fp, #1
 8007406:	4652      	mov	r2, sl
 8007408:	2a01      	cmp	r2, #1
 800740a:	bfb8      	it	lt
 800740c:	2201      	movlt	r2, #1
 800740e:	e7db      	b.n	80073c8 <_dtoa_r+0x220>
 8007410:	2201      	movs	r2, #1
 8007412:	e7f2      	b.n	80073fa <_dtoa_r+0x252>
 8007414:	2401      	movs	r4, #1
 8007416:	2200      	movs	r2, #0
 8007418:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800741c:	f04f 3bff 	mov.w	fp, #4294967295
 8007420:	2100      	movs	r1, #0
 8007422:	46da      	mov	sl, fp
 8007424:	2212      	movs	r2, #18
 8007426:	9109      	str	r1, [sp, #36]	@ 0x24
 8007428:	e7ce      	b.n	80073c8 <_dtoa_r+0x220>
 800742a:	2201      	movs	r2, #1
 800742c:	9208      	str	r2, [sp, #32]
 800742e:	e7f5      	b.n	800741c <_dtoa_r+0x274>
 8007430:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8007434:	46da      	mov	sl, fp
 8007436:	465a      	mov	r2, fp
 8007438:	e7c6      	b.n	80073c8 <_dtoa_r+0x220>
 800743a:	3101      	adds	r1, #1
 800743c:	0040      	lsls	r0, r0, #1
 800743e:	e7c7      	b.n	80073d0 <_dtoa_r+0x228>
 8007440:	636f4361 	.word	0x636f4361
 8007444:	3fd287a7 	.word	0x3fd287a7
 8007448:	8b60c8b3 	.word	0x8b60c8b3
 800744c:	3fc68a28 	.word	0x3fc68a28
 8007450:	509f79fb 	.word	0x509f79fb
 8007454:	3fd34413 	.word	0x3fd34413
 8007458:	0802ed11 	.word	0x0802ed11
 800745c:	0802ed28 	.word	0x0802ed28
 8007460:	7ff00000 	.word	0x7ff00000
 8007464:	0802ed0d 	.word	0x0802ed0d
 8007468:	0802ece1 	.word	0x0802ece1
 800746c:	0802ece0 	.word	0x0802ece0
 8007470:	0802ee20 	.word	0x0802ee20
 8007474:	0802ed80 	.word	0x0802ed80
 8007478:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800747c:	f1ba 0f0e 	cmp.w	sl, #14
 8007480:	6010      	str	r0, [r2, #0]
 8007482:	d86f      	bhi.n	8007564 <_dtoa_r+0x3bc>
 8007484:	2c00      	cmp	r4, #0
 8007486:	d06d      	beq.n	8007564 <_dtoa_r+0x3bc>
 8007488:	f1b8 0f00 	cmp.w	r8, #0
 800748c:	f340 80c2 	ble.w	8007614 <_dtoa_r+0x46c>
 8007490:	4aca      	ldr	r2, [pc, #808]	@ (80077bc <_dtoa_r+0x614>)
 8007492:	f008 010f 	and.w	r1, r8, #15
 8007496:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800749a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800749e:	ed92 7b00 	vldr	d7, [r2]
 80074a2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80074a6:	f000 80a9 	beq.w	80075fc <_dtoa_r+0x454>
 80074aa:	4ac5      	ldr	r2, [pc, #788]	@ (80077c0 <_dtoa_r+0x618>)
 80074ac:	ed92 6b08 	vldr	d6, [r2, #32]
 80074b0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80074b4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80074b8:	f001 010f 	and.w	r1, r1, #15
 80074bc:	2203      	movs	r2, #3
 80074be:	48c0      	ldr	r0, [pc, #768]	@ (80077c0 <_dtoa_r+0x618>)
 80074c0:	2900      	cmp	r1, #0
 80074c2:	f040 809d 	bne.w	8007600 <_dtoa_r+0x458>
 80074c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80074ca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80074ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 80074d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80074d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80074d8:	2900      	cmp	r1, #0
 80074da:	f000 80c1 	beq.w	8007660 <_dtoa_r+0x4b8>
 80074de:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80074e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80074e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ea:	f140 80b9 	bpl.w	8007660 <_dtoa_r+0x4b8>
 80074ee:	f1ba 0f00 	cmp.w	sl, #0
 80074f2:	f000 80b5 	beq.w	8007660 <_dtoa_r+0x4b8>
 80074f6:	f1bb 0f00 	cmp.w	fp, #0
 80074fa:	dd31      	ble.n	8007560 <_dtoa_r+0x3b8>
 80074fc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007500:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007504:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007508:	f108 31ff 	add.w	r1, r8, #4294967295
 800750c:	9104      	str	r1, [sp, #16]
 800750e:	3201      	adds	r2, #1
 8007510:	465c      	mov	r4, fp
 8007512:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007516:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800751a:	ee07 2a90 	vmov	s15, r2
 800751e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007522:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007526:	ee15 2a90 	vmov	r2, s11
 800752a:	ec51 0b15 	vmov	r0, r1, d5
 800752e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8007532:	2c00      	cmp	r4, #0
 8007534:	f040 8098 	bne.w	8007668 <_dtoa_r+0x4c0>
 8007538:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800753c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007540:	ec41 0b17 	vmov	d7, r0, r1
 8007544:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800754c:	f300 8261 	bgt.w	8007a12 <_dtoa_r+0x86a>
 8007550:	eeb1 7b47 	vneg.f64	d7, d7
 8007554:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800755c:	f100 80f5 	bmi.w	800774a <_dtoa_r+0x5a2>
 8007560:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007564:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007566:	2a00      	cmp	r2, #0
 8007568:	f2c0 812c 	blt.w	80077c4 <_dtoa_r+0x61c>
 800756c:	f1b8 0f0e 	cmp.w	r8, #14
 8007570:	f300 8128 	bgt.w	80077c4 <_dtoa_r+0x61c>
 8007574:	4b91      	ldr	r3, [pc, #580]	@ (80077bc <_dtoa_r+0x614>)
 8007576:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800757a:	ed93 6b00 	vldr	d6, [r3]
 800757e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007580:	2b00      	cmp	r3, #0
 8007582:	da03      	bge.n	800758c <_dtoa_r+0x3e4>
 8007584:	f1ba 0f00 	cmp.w	sl, #0
 8007588:	f340 80d2 	ble.w	8007730 <_dtoa_r+0x588>
 800758c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8007590:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007594:	463e      	mov	r6, r7
 8007596:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800759a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800759e:	ee15 3a10 	vmov	r3, s10
 80075a2:	3330      	adds	r3, #48	@ 0x30
 80075a4:	f806 3b01 	strb.w	r3, [r6], #1
 80075a8:	1bf3      	subs	r3, r6, r7
 80075aa:	459a      	cmp	sl, r3
 80075ac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80075b0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80075b4:	f040 80f8 	bne.w	80077a8 <_dtoa_r+0x600>
 80075b8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80075bc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80075c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c4:	f300 80dd 	bgt.w	8007782 <_dtoa_r+0x5da>
 80075c8:	eeb4 7b46 	vcmp.f64	d7, d6
 80075cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d0:	d104      	bne.n	80075dc <_dtoa_r+0x434>
 80075d2:	ee15 3a10 	vmov	r3, s10
 80075d6:	07db      	lsls	r3, r3, #31
 80075d8:	f100 80d3 	bmi.w	8007782 <_dtoa_r+0x5da>
 80075dc:	9901      	ldr	r1, [sp, #4]
 80075de:	4648      	mov	r0, r9
 80075e0:	f000 fc78 	bl	8007ed4 <_Bfree>
 80075e4:	2300      	movs	r3, #0
 80075e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80075e8:	7033      	strb	r3, [r6, #0]
 80075ea:	f108 0301 	add.w	r3, r8, #1
 80075ee:	6013      	str	r3, [r2, #0]
 80075f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 8304 	beq.w	8007c00 <_dtoa_r+0xa58>
 80075f8:	601e      	str	r6, [r3, #0]
 80075fa:	e301      	b.n	8007c00 <_dtoa_r+0xa58>
 80075fc:	2202      	movs	r2, #2
 80075fe:	e75e      	b.n	80074be <_dtoa_r+0x316>
 8007600:	07cc      	lsls	r4, r1, #31
 8007602:	d504      	bpl.n	800760e <_dtoa_r+0x466>
 8007604:	ed90 6b00 	vldr	d6, [r0]
 8007608:	3201      	adds	r2, #1
 800760a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800760e:	1049      	asrs	r1, r1, #1
 8007610:	3008      	adds	r0, #8
 8007612:	e755      	b.n	80074c0 <_dtoa_r+0x318>
 8007614:	d022      	beq.n	800765c <_dtoa_r+0x4b4>
 8007616:	f1c8 0100 	rsb	r1, r8, #0
 800761a:	4a68      	ldr	r2, [pc, #416]	@ (80077bc <_dtoa_r+0x614>)
 800761c:	f001 000f 	and.w	r0, r1, #15
 8007620:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007624:	ed92 7b00 	vldr	d7, [r2]
 8007628:	ee28 7b07 	vmul.f64	d7, d8, d7
 800762c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007630:	4863      	ldr	r0, [pc, #396]	@ (80077c0 <_dtoa_r+0x618>)
 8007632:	1109      	asrs	r1, r1, #4
 8007634:	2400      	movs	r4, #0
 8007636:	2202      	movs	r2, #2
 8007638:	b929      	cbnz	r1, 8007646 <_dtoa_r+0x49e>
 800763a:	2c00      	cmp	r4, #0
 800763c:	f43f af49 	beq.w	80074d2 <_dtoa_r+0x32a>
 8007640:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007644:	e745      	b.n	80074d2 <_dtoa_r+0x32a>
 8007646:	07ce      	lsls	r6, r1, #31
 8007648:	d505      	bpl.n	8007656 <_dtoa_r+0x4ae>
 800764a:	ed90 6b00 	vldr	d6, [r0]
 800764e:	3201      	adds	r2, #1
 8007650:	2401      	movs	r4, #1
 8007652:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007656:	1049      	asrs	r1, r1, #1
 8007658:	3008      	adds	r0, #8
 800765a:	e7ed      	b.n	8007638 <_dtoa_r+0x490>
 800765c:	2202      	movs	r2, #2
 800765e:	e738      	b.n	80074d2 <_dtoa_r+0x32a>
 8007660:	f8cd 8010 	str.w	r8, [sp, #16]
 8007664:	4654      	mov	r4, sl
 8007666:	e754      	b.n	8007512 <_dtoa_r+0x36a>
 8007668:	4a54      	ldr	r2, [pc, #336]	@ (80077bc <_dtoa_r+0x614>)
 800766a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800766e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007672:	9a08      	ldr	r2, [sp, #32]
 8007674:	ec41 0b17 	vmov	d7, r0, r1
 8007678:	443c      	add	r4, r7
 800767a:	b34a      	cbz	r2, 80076d0 <_dtoa_r+0x528>
 800767c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8007680:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8007684:	463e      	mov	r6, r7
 8007686:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800768a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800768e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007692:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007696:	ee14 2a90 	vmov	r2, s9
 800769a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800769e:	3230      	adds	r2, #48	@ 0x30
 80076a0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80076a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80076a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ac:	f806 2b01 	strb.w	r2, [r6], #1
 80076b0:	d438      	bmi.n	8007724 <_dtoa_r+0x57c>
 80076b2:	ee32 5b46 	vsub.f64	d5, d2, d6
 80076b6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80076ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076be:	d462      	bmi.n	8007786 <_dtoa_r+0x5de>
 80076c0:	42a6      	cmp	r6, r4
 80076c2:	f43f af4d 	beq.w	8007560 <_dtoa_r+0x3b8>
 80076c6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80076ca:	ee26 6b03 	vmul.f64	d6, d6, d3
 80076ce:	e7e0      	b.n	8007692 <_dtoa_r+0x4ea>
 80076d0:	4621      	mov	r1, r4
 80076d2:	463e      	mov	r6, r7
 80076d4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80076d8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80076dc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80076e0:	ee14 2a90 	vmov	r2, s9
 80076e4:	3230      	adds	r2, #48	@ 0x30
 80076e6:	f806 2b01 	strb.w	r2, [r6], #1
 80076ea:	42a6      	cmp	r6, r4
 80076ec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80076f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80076f4:	d119      	bne.n	800772a <_dtoa_r+0x582>
 80076f6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80076fa:	ee37 4b05 	vadd.f64	d4, d7, d5
 80076fe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007706:	dc3e      	bgt.n	8007786 <_dtoa_r+0x5de>
 8007708:	ee35 5b47 	vsub.f64	d5, d5, d7
 800770c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007714:	f57f af24 	bpl.w	8007560 <_dtoa_r+0x3b8>
 8007718:	460e      	mov	r6, r1
 800771a:	3901      	subs	r1, #1
 800771c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007720:	2b30      	cmp	r3, #48	@ 0x30
 8007722:	d0f9      	beq.n	8007718 <_dtoa_r+0x570>
 8007724:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007728:	e758      	b.n	80075dc <_dtoa_r+0x434>
 800772a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800772e:	e7d5      	b.n	80076dc <_dtoa_r+0x534>
 8007730:	d10b      	bne.n	800774a <_dtoa_r+0x5a2>
 8007732:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007736:	ee26 6b07 	vmul.f64	d6, d6, d7
 800773a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800773e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007746:	f2c0 8161 	blt.w	8007a0c <_dtoa_r+0x864>
 800774a:	2400      	movs	r4, #0
 800774c:	4625      	mov	r5, r4
 800774e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007750:	43db      	mvns	r3, r3
 8007752:	9304      	str	r3, [sp, #16]
 8007754:	463e      	mov	r6, r7
 8007756:	f04f 0800 	mov.w	r8, #0
 800775a:	4621      	mov	r1, r4
 800775c:	4648      	mov	r0, r9
 800775e:	f000 fbb9 	bl	8007ed4 <_Bfree>
 8007762:	2d00      	cmp	r5, #0
 8007764:	d0de      	beq.n	8007724 <_dtoa_r+0x57c>
 8007766:	f1b8 0f00 	cmp.w	r8, #0
 800776a:	d005      	beq.n	8007778 <_dtoa_r+0x5d0>
 800776c:	45a8      	cmp	r8, r5
 800776e:	d003      	beq.n	8007778 <_dtoa_r+0x5d0>
 8007770:	4641      	mov	r1, r8
 8007772:	4648      	mov	r0, r9
 8007774:	f000 fbae 	bl	8007ed4 <_Bfree>
 8007778:	4629      	mov	r1, r5
 800777a:	4648      	mov	r0, r9
 800777c:	f000 fbaa 	bl	8007ed4 <_Bfree>
 8007780:	e7d0      	b.n	8007724 <_dtoa_r+0x57c>
 8007782:	f8cd 8010 	str.w	r8, [sp, #16]
 8007786:	4633      	mov	r3, r6
 8007788:	461e      	mov	r6, r3
 800778a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800778e:	2a39      	cmp	r2, #57	@ 0x39
 8007790:	d106      	bne.n	80077a0 <_dtoa_r+0x5f8>
 8007792:	429f      	cmp	r7, r3
 8007794:	d1f8      	bne.n	8007788 <_dtoa_r+0x5e0>
 8007796:	9a04      	ldr	r2, [sp, #16]
 8007798:	3201      	adds	r2, #1
 800779a:	9204      	str	r2, [sp, #16]
 800779c:	2230      	movs	r2, #48	@ 0x30
 800779e:	703a      	strb	r2, [r7, #0]
 80077a0:	781a      	ldrb	r2, [r3, #0]
 80077a2:	3201      	adds	r2, #1
 80077a4:	701a      	strb	r2, [r3, #0]
 80077a6:	e7bd      	b.n	8007724 <_dtoa_r+0x57c>
 80077a8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80077ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80077b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b4:	f47f aeef 	bne.w	8007596 <_dtoa_r+0x3ee>
 80077b8:	e710      	b.n	80075dc <_dtoa_r+0x434>
 80077ba:	bf00      	nop
 80077bc:	0802ee20 	.word	0x0802ee20
 80077c0:	0802edf8 	.word	0x0802edf8
 80077c4:	9908      	ldr	r1, [sp, #32]
 80077c6:	2900      	cmp	r1, #0
 80077c8:	f000 80e3 	beq.w	8007992 <_dtoa_r+0x7ea>
 80077cc:	9907      	ldr	r1, [sp, #28]
 80077ce:	2901      	cmp	r1, #1
 80077d0:	f300 80c8 	bgt.w	8007964 <_dtoa_r+0x7bc>
 80077d4:	2d00      	cmp	r5, #0
 80077d6:	f000 80c1 	beq.w	800795c <_dtoa_r+0x7b4>
 80077da:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80077de:	9e05      	ldr	r6, [sp, #20]
 80077e0:	461c      	mov	r4, r3
 80077e2:	9304      	str	r3, [sp, #16]
 80077e4:	9b05      	ldr	r3, [sp, #20]
 80077e6:	4413      	add	r3, r2
 80077e8:	9305      	str	r3, [sp, #20]
 80077ea:	9b06      	ldr	r3, [sp, #24]
 80077ec:	2101      	movs	r1, #1
 80077ee:	4413      	add	r3, r2
 80077f0:	4648      	mov	r0, r9
 80077f2:	9306      	str	r3, [sp, #24]
 80077f4:	f000 fc22 	bl	800803c <__i2b>
 80077f8:	9b04      	ldr	r3, [sp, #16]
 80077fa:	4605      	mov	r5, r0
 80077fc:	b166      	cbz	r6, 8007818 <_dtoa_r+0x670>
 80077fe:	9a06      	ldr	r2, [sp, #24]
 8007800:	2a00      	cmp	r2, #0
 8007802:	dd09      	ble.n	8007818 <_dtoa_r+0x670>
 8007804:	42b2      	cmp	r2, r6
 8007806:	9905      	ldr	r1, [sp, #20]
 8007808:	bfa8      	it	ge
 800780a:	4632      	movge	r2, r6
 800780c:	1a89      	subs	r1, r1, r2
 800780e:	9105      	str	r1, [sp, #20]
 8007810:	9906      	ldr	r1, [sp, #24]
 8007812:	1ab6      	subs	r6, r6, r2
 8007814:	1a8a      	subs	r2, r1, r2
 8007816:	9206      	str	r2, [sp, #24]
 8007818:	b1fb      	cbz	r3, 800785a <_dtoa_r+0x6b2>
 800781a:	9a08      	ldr	r2, [sp, #32]
 800781c:	2a00      	cmp	r2, #0
 800781e:	f000 80bc 	beq.w	800799a <_dtoa_r+0x7f2>
 8007822:	b19c      	cbz	r4, 800784c <_dtoa_r+0x6a4>
 8007824:	4629      	mov	r1, r5
 8007826:	4622      	mov	r2, r4
 8007828:	4648      	mov	r0, r9
 800782a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800782c:	f000 fcc6 	bl	80081bc <__pow5mult>
 8007830:	9a01      	ldr	r2, [sp, #4]
 8007832:	4601      	mov	r1, r0
 8007834:	4605      	mov	r5, r0
 8007836:	4648      	mov	r0, r9
 8007838:	f000 fc16 	bl	8008068 <__multiply>
 800783c:	9901      	ldr	r1, [sp, #4]
 800783e:	9004      	str	r0, [sp, #16]
 8007840:	4648      	mov	r0, r9
 8007842:	f000 fb47 	bl	8007ed4 <_Bfree>
 8007846:	9a04      	ldr	r2, [sp, #16]
 8007848:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800784a:	9201      	str	r2, [sp, #4]
 800784c:	1b1a      	subs	r2, r3, r4
 800784e:	d004      	beq.n	800785a <_dtoa_r+0x6b2>
 8007850:	9901      	ldr	r1, [sp, #4]
 8007852:	4648      	mov	r0, r9
 8007854:	f000 fcb2 	bl	80081bc <__pow5mult>
 8007858:	9001      	str	r0, [sp, #4]
 800785a:	2101      	movs	r1, #1
 800785c:	4648      	mov	r0, r9
 800785e:	f000 fbed 	bl	800803c <__i2b>
 8007862:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007864:	4604      	mov	r4, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	f000 81d0 	beq.w	8007c0c <_dtoa_r+0xa64>
 800786c:	461a      	mov	r2, r3
 800786e:	4601      	mov	r1, r0
 8007870:	4648      	mov	r0, r9
 8007872:	f000 fca3 	bl	80081bc <__pow5mult>
 8007876:	9b07      	ldr	r3, [sp, #28]
 8007878:	2b01      	cmp	r3, #1
 800787a:	4604      	mov	r4, r0
 800787c:	f300 8095 	bgt.w	80079aa <_dtoa_r+0x802>
 8007880:	9b02      	ldr	r3, [sp, #8]
 8007882:	2b00      	cmp	r3, #0
 8007884:	f040 808b 	bne.w	800799e <_dtoa_r+0x7f6>
 8007888:	9b03      	ldr	r3, [sp, #12]
 800788a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800788e:	2a00      	cmp	r2, #0
 8007890:	f040 8087 	bne.w	80079a2 <_dtoa_r+0x7fa>
 8007894:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007898:	0d12      	lsrs	r2, r2, #20
 800789a:	0512      	lsls	r2, r2, #20
 800789c:	2a00      	cmp	r2, #0
 800789e:	f000 8082 	beq.w	80079a6 <_dtoa_r+0x7fe>
 80078a2:	9b05      	ldr	r3, [sp, #20]
 80078a4:	3301      	adds	r3, #1
 80078a6:	9305      	str	r3, [sp, #20]
 80078a8:	9b06      	ldr	r3, [sp, #24]
 80078aa:	3301      	adds	r3, #1
 80078ac:	9306      	str	r3, [sp, #24]
 80078ae:	2301      	movs	r3, #1
 80078b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 81af 	beq.w	8007c18 <_dtoa_r+0xa70>
 80078ba:	6922      	ldr	r2, [r4, #16]
 80078bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80078c0:	6910      	ldr	r0, [r2, #16]
 80078c2:	f000 fb6f 	bl	8007fa4 <__hi0bits>
 80078c6:	f1c0 0020 	rsb	r0, r0, #32
 80078ca:	9b06      	ldr	r3, [sp, #24]
 80078cc:	4418      	add	r0, r3
 80078ce:	f010 001f 	ands.w	r0, r0, #31
 80078d2:	d076      	beq.n	80079c2 <_dtoa_r+0x81a>
 80078d4:	f1c0 0220 	rsb	r2, r0, #32
 80078d8:	2a04      	cmp	r2, #4
 80078da:	dd69      	ble.n	80079b0 <_dtoa_r+0x808>
 80078dc:	9b05      	ldr	r3, [sp, #20]
 80078de:	f1c0 001c 	rsb	r0, r0, #28
 80078e2:	4403      	add	r3, r0
 80078e4:	9305      	str	r3, [sp, #20]
 80078e6:	9b06      	ldr	r3, [sp, #24]
 80078e8:	4406      	add	r6, r0
 80078ea:	4403      	add	r3, r0
 80078ec:	9306      	str	r3, [sp, #24]
 80078ee:	9b05      	ldr	r3, [sp, #20]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	dd05      	ble.n	8007900 <_dtoa_r+0x758>
 80078f4:	9901      	ldr	r1, [sp, #4]
 80078f6:	461a      	mov	r2, r3
 80078f8:	4648      	mov	r0, r9
 80078fa:	f000 fcb9 	bl	8008270 <__lshift>
 80078fe:	9001      	str	r0, [sp, #4]
 8007900:	9b06      	ldr	r3, [sp, #24]
 8007902:	2b00      	cmp	r3, #0
 8007904:	dd05      	ble.n	8007912 <_dtoa_r+0x76a>
 8007906:	4621      	mov	r1, r4
 8007908:	461a      	mov	r2, r3
 800790a:	4648      	mov	r0, r9
 800790c:	f000 fcb0 	bl	8008270 <__lshift>
 8007910:	4604      	mov	r4, r0
 8007912:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007914:	2b00      	cmp	r3, #0
 8007916:	d056      	beq.n	80079c6 <_dtoa_r+0x81e>
 8007918:	9801      	ldr	r0, [sp, #4]
 800791a:	4621      	mov	r1, r4
 800791c:	f000 fd14 	bl	8008348 <__mcmp>
 8007920:	2800      	cmp	r0, #0
 8007922:	da50      	bge.n	80079c6 <_dtoa_r+0x81e>
 8007924:	f108 33ff 	add.w	r3, r8, #4294967295
 8007928:	9304      	str	r3, [sp, #16]
 800792a:	9901      	ldr	r1, [sp, #4]
 800792c:	2300      	movs	r3, #0
 800792e:	220a      	movs	r2, #10
 8007930:	4648      	mov	r0, r9
 8007932:	f000 faf1 	bl	8007f18 <__multadd>
 8007936:	9b08      	ldr	r3, [sp, #32]
 8007938:	9001      	str	r0, [sp, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	f000 816e 	beq.w	8007c1c <_dtoa_r+0xa74>
 8007940:	4629      	mov	r1, r5
 8007942:	2300      	movs	r3, #0
 8007944:	220a      	movs	r2, #10
 8007946:	4648      	mov	r0, r9
 8007948:	f000 fae6 	bl	8007f18 <__multadd>
 800794c:	f1bb 0f00 	cmp.w	fp, #0
 8007950:	4605      	mov	r5, r0
 8007952:	dc64      	bgt.n	8007a1e <_dtoa_r+0x876>
 8007954:	9b07      	ldr	r3, [sp, #28]
 8007956:	2b02      	cmp	r3, #2
 8007958:	dc3e      	bgt.n	80079d8 <_dtoa_r+0x830>
 800795a:	e060      	b.n	8007a1e <_dtoa_r+0x876>
 800795c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800795e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007962:	e73c      	b.n	80077de <_dtoa_r+0x636>
 8007964:	f10a 34ff 	add.w	r4, sl, #4294967295
 8007968:	42a3      	cmp	r3, r4
 800796a:	bfbf      	itttt	lt
 800796c:	1ae2      	sublt	r2, r4, r3
 800796e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007970:	189b      	addlt	r3, r3, r2
 8007972:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8007974:	bfae      	itee	ge
 8007976:	1b1c      	subge	r4, r3, r4
 8007978:	4623      	movlt	r3, r4
 800797a:	2400      	movlt	r4, #0
 800797c:	f1ba 0f00 	cmp.w	sl, #0
 8007980:	bfb5      	itete	lt
 8007982:	9a05      	ldrlt	r2, [sp, #20]
 8007984:	9e05      	ldrge	r6, [sp, #20]
 8007986:	eba2 060a 	sublt.w	r6, r2, sl
 800798a:	4652      	movge	r2, sl
 800798c:	bfb8      	it	lt
 800798e:	2200      	movlt	r2, #0
 8007990:	e727      	b.n	80077e2 <_dtoa_r+0x63a>
 8007992:	9e05      	ldr	r6, [sp, #20]
 8007994:	9d08      	ldr	r5, [sp, #32]
 8007996:	461c      	mov	r4, r3
 8007998:	e730      	b.n	80077fc <_dtoa_r+0x654>
 800799a:	461a      	mov	r2, r3
 800799c:	e758      	b.n	8007850 <_dtoa_r+0x6a8>
 800799e:	2300      	movs	r3, #0
 80079a0:	e786      	b.n	80078b0 <_dtoa_r+0x708>
 80079a2:	9b02      	ldr	r3, [sp, #8]
 80079a4:	e784      	b.n	80078b0 <_dtoa_r+0x708>
 80079a6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80079a8:	e783      	b.n	80078b2 <_dtoa_r+0x70a>
 80079aa:	2300      	movs	r3, #0
 80079ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079ae:	e784      	b.n	80078ba <_dtoa_r+0x712>
 80079b0:	d09d      	beq.n	80078ee <_dtoa_r+0x746>
 80079b2:	9b05      	ldr	r3, [sp, #20]
 80079b4:	321c      	adds	r2, #28
 80079b6:	4413      	add	r3, r2
 80079b8:	9305      	str	r3, [sp, #20]
 80079ba:	9b06      	ldr	r3, [sp, #24]
 80079bc:	4416      	add	r6, r2
 80079be:	4413      	add	r3, r2
 80079c0:	e794      	b.n	80078ec <_dtoa_r+0x744>
 80079c2:	4602      	mov	r2, r0
 80079c4:	e7f5      	b.n	80079b2 <_dtoa_r+0x80a>
 80079c6:	f1ba 0f00 	cmp.w	sl, #0
 80079ca:	f8cd 8010 	str.w	r8, [sp, #16]
 80079ce:	46d3      	mov	fp, sl
 80079d0:	dc21      	bgt.n	8007a16 <_dtoa_r+0x86e>
 80079d2:	9b07      	ldr	r3, [sp, #28]
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	dd1e      	ble.n	8007a16 <_dtoa_r+0x86e>
 80079d8:	f1bb 0f00 	cmp.w	fp, #0
 80079dc:	f47f aeb7 	bne.w	800774e <_dtoa_r+0x5a6>
 80079e0:	4621      	mov	r1, r4
 80079e2:	465b      	mov	r3, fp
 80079e4:	2205      	movs	r2, #5
 80079e6:	4648      	mov	r0, r9
 80079e8:	f000 fa96 	bl	8007f18 <__multadd>
 80079ec:	4601      	mov	r1, r0
 80079ee:	4604      	mov	r4, r0
 80079f0:	9801      	ldr	r0, [sp, #4]
 80079f2:	f000 fca9 	bl	8008348 <__mcmp>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	f77f aea9 	ble.w	800774e <_dtoa_r+0x5a6>
 80079fc:	463e      	mov	r6, r7
 80079fe:	2331      	movs	r3, #49	@ 0x31
 8007a00:	f806 3b01 	strb.w	r3, [r6], #1
 8007a04:	9b04      	ldr	r3, [sp, #16]
 8007a06:	3301      	adds	r3, #1
 8007a08:	9304      	str	r3, [sp, #16]
 8007a0a:	e6a4      	b.n	8007756 <_dtoa_r+0x5ae>
 8007a0c:	f8cd 8010 	str.w	r8, [sp, #16]
 8007a10:	4654      	mov	r4, sl
 8007a12:	4625      	mov	r5, r4
 8007a14:	e7f2      	b.n	80079fc <_dtoa_r+0x854>
 8007a16:	9b08      	ldr	r3, [sp, #32]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 8103 	beq.w	8007c24 <_dtoa_r+0xa7c>
 8007a1e:	2e00      	cmp	r6, #0
 8007a20:	dd05      	ble.n	8007a2e <_dtoa_r+0x886>
 8007a22:	4629      	mov	r1, r5
 8007a24:	4632      	mov	r2, r6
 8007a26:	4648      	mov	r0, r9
 8007a28:	f000 fc22 	bl	8008270 <__lshift>
 8007a2c:	4605      	mov	r5, r0
 8007a2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d058      	beq.n	8007ae6 <_dtoa_r+0x93e>
 8007a34:	6869      	ldr	r1, [r5, #4]
 8007a36:	4648      	mov	r0, r9
 8007a38:	f000 fa0c 	bl	8007e54 <_Balloc>
 8007a3c:	4606      	mov	r6, r0
 8007a3e:	b928      	cbnz	r0, 8007a4c <_dtoa_r+0x8a4>
 8007a40:	4b82      	ldr	r3, [pc, #520]	@ (8007c4c <_dtoa_r+0xaa4>)
 8007a42:	4602      	mov	r2, r0
 8007a44:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007a48:	f7ff bbc7 	b.w	80071da <_dtoa_r+0x32>
 8007a4c:	692a      	ldr	r2, [r5, #16]
 8007a4e:	3202      	adds	r2, #2
 8007a50:	0092      	lsls	r2, r2, #2
 8007a52:	f105 010c 	add.w	r1, r5, #12
 8007a56:	300c      	adds	r0, #12
 8007a58:	f000 ffac 	bl	80089b4 <memcpy>
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	4631      	mov	r1, r6
 8007a60:	4648      	mov	r0, r9
 8007a62:	f000 fc05 	bl	8008270 <__lshift>
 8007a66:	1c7b      	adds	r3, r7, #1
 8007a68:	9305      	str	r3, [sp, #20]
 8007a6a:	eb07 030b 	add.w	r3, r7, fp
 8007a6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a70:	9b02      	ldr	r3, [sp, #8]
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	46a8      	mov	r8, r5
 8007a78:	9308      	str	r3, [sp, #32]
 8007a7a:	4605      	mov	r5, r0
 8007a7c:	9b05      	ldr	r3, [sp, #20]
 8007a7e:	9801      	ldr	r0, [sp, #4]
 8007a80:	4621      	mov	r1, r4
 8007a82:	f103 3bff 	add.w	fp, r3, #4294967295
 8007a86:	f7ff fb04 	bl	8007092 <quorem>
 8007a8a:	4641      	mov	r1, r8
 8007a8c:	9002      	str	r0, [sp, #8]
 8007a8e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007a92:	9801      	ldr	r0, [sp, #4]
 8007a94:	f000 fc58 	bl	8008348 <__mcmp>
 8007a98:	462a      	mov	r2, r5
 8007a9a:	9006      	str	r0, [sp, #24]
 8007a9c:	4621      	mov	r1, r4
 8007a9e:	4648      	mov	r0, r9
 8007aa0:	f000 fc6e 	bl	8008380 <__mdiff>
 8007aa4:	68c2      	ldr	r2, [r0, #12]
 8007aa6:	4606      	mov	r6, r0
 8007aa8:	b9fa      	cbnz	r2, 8007aea <_dtoa_r+0x942>
 8007aaa:	4601      	mov	r1, r0
 8007aac:	9801      	ldr	r0, [sp, #4]
 8007aae:	f000 fc4b 	bl	8008348 <__mcmp>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	4648      	mov	r0, r9
 8007ab8:	920a      	str	r2, [sp, #40]	@ 0x28
 8007aba:	f000 fa0b 	bl	8007ed4 <_Bfree>
 8007abe:	9b07      	ldr	r3, [sp, #28]
 8007ac0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ac2:	9e05      	ldr	r6, [sp, #20]
 8007ac4:	ea43 0102 	orr.w	r1, r3, r2
 8007ac8:	9b08      	ldr	r3, [sp, #32]
 8007aca:	4319      	orrs	r1, r3
 8007acc:	d10f      	bne.n	8007aee <_dtoa_r+0x946>
 8007ace:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007ad2:	d028      	beq.n	8007b26 <_dtoa_r+0x97e>
 8007ad4:	9b06      	ldr	r3, [sp, #24]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	dd02      	ble.n	8007ae0 <_dtoa_r+0x938>
 8007ada:	9b02      	ldr	r3, [sp, #8]
 8007adc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8007ae0:	f88b a000 	strb.w	sl, [fp]
 8007ae4:	e639      	b.n	800775a <_dtoa_r+0x5b2>
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	e7bd      	b.n	8007a66 <_dtoa_r+0x8be>
 8007aea:	2201      	movs	r2, #1
 8007aec:	e7e2      	b.n	8007ab4 <_dtoa_r+0x90c>
 8007aee:	9b06      	ldr	r3, [sp, #24]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	db04      	blt.n	8007afe <_dtoa_r+0x956>
 8007af4:	9907      	ldr	r1, [sp, #28]
 8007af6:	430b      	orrs	r3, r1
 8007af8:	9908      	ldr	r1, [sp, #32]
 8007afa:	430b      	orrs	r3, r1
 8007afc:	d120      	bne.n	8007b40 <_dtoa_r+0x998>
 8007afe:	2a00      	cmp	r2, #0
 8007b00:	ddee      	ble.n	8007ae0 <_dtoa_r+0x938>
 8007b02:	9901      	ldr	r1, [sp, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	4648      	mov	r0, r9
 8007b08:	f000 fbb2 	bl	8008270 <__lshift>
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	9001      	str	r0, [sp, #4]
 8007b10:	f000 fc1a 	bl	8008348 <__mcmp>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	dc03      	bgt.n	8007b20 <_dtoa_r+0x978>
 8007b18:	d1e2      	bne.n	8007ae0 <_dtoa_r+0x938>
 8007b1a:	f01a 0f01 	tst.w	sl, #1
 8007b1e:	d0df      	beq.n	8007ae0 <_dtoa_r+0x938>
 8007b20:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007b24:	d1d9      	bne.n	8007ada <_dtoa_r+0x932>
 8007b26:	2339      	movs	r3, #57	@ 0x39
 8007b28:	f88b 3000 	strb.w	r3, [fp]
 8007b2c:	4633      	mov	r3, r6
 8007b2e:	461e      	mov	r6, r3
 8007b30:	3b01      	subs	r3, #1
 8007b32:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007b36:	2a39      	cmp	r2, #57	@ 0x39
 8007b38:	d053      	beq.n	8007be2 <_dtoa_r+0xa3a>
 8007b3a:	3201      	adds	r2, #1
 8007b3c:	701a      	strb	r2, [r3, #0]
 8007b3e:	e60c      	b.n	800775a <_dtoa_r+0x5b2>
 8007b40:	2a00      	cmp	r2, #0
 8007b42:	dd07      	ble.n	8007b54 <_dtoa_r+0x9ac>
 8007b44:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007b48:	d0ed      	beq.n	8007b26 <_dtoa_r+0x97e>
 8007b4a:	f10a 0301 	add.w	r3, sl, #1
 8007b4e:	f88b 3000 	strb.w	r3, [fp]
 8007b52:	e602      	b.n	800775a <_dtoa_r+0x5b2>
 8007b54:	9b05      	ldr	r3, [sp, #20]
 8007b56:	9a05      	ldr	r2, [sp, #20]
 8007b58:	f803 ac01 	strb.w	sl, [r3, #-1]
 8007b5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d029      	beq.n	8007bb6 <_dtoa_r+0xa0e>
 8007b62:	9901      	ldr	r1, [sp, #4]
 8007b64:	2300      	movs	r3, #0
 8007b66:	220a      	movs	r2, #10
 8007b68:	4648      	mov	r0, r9
 8007b6a:	f000 f9d5 	bl	8007f18 <__multadd>
 8007b6e:	45a8      	cmp	r8, r5
 8007b70:	9001      	str	r0, [sp, #4]
 8007b72:	f04f 0300 	mov.w	r3, #0
 8007b76:	f04f 020a 	mov.w	r2, #10
 8007b7a:	4641      	mov	r1, r8
 8007b7c:	4648      	mov	r0, r9
 8007b7e:	d107      	bne.n	8007b90 <_dtoa_r+0x9e8>
 8007b80:	f000 f9ca 	bl	8007f18 <__multadd>
 8007b84:	4680      	mov	r8, r0
 8007b86:	4605      	mov	r5, r0
 8007b88:	9b05      	ldr	r3, [sp, #20]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	9305      	str	r3, [sp, #20]
 8007b8e:	e775      	b.n	8007a7c <_dtoa_r+0x8d4>
 8007b90:	f000 f9c2 	bl	8007f18 <__multadd>
 8007b94:	4629      	mov	r1, r5
 8007b96:	4680      	mov	r8, r0
 8007b98:	2300      	movs	r3, #0
 8007b9a:	220a      	movs	r2, #10
 8007b9c:	4648      	mov	r0, r9
 8007b9e:	f000 f9bb 	bl	8007f18 <__multadd>
 8007ba2:	4605      	mov	r5, r0
 8007ba4:	e7f0      	b.n	8007b88 <_dtoa_r+0x9e0>
 8007ba6:	f1bb 0f00 	cmp.w	fp, #0
 8007baa:	bfcc      	ite	gt
 8007bac:	465e      	movgt	r6, fp
 8007bae:	2601      	movle	r6, #1
 8007bb0:	443e      	add	r6, r7
 8007bb2:	f04f 0800 	mov.w	r8, #0
 8007bb6:	9901      	ldr	r1, [sp, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	4648      	mov	r0, r9
 8007bbc:	f000 fb58 	bl	8008270 <__lshift>
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	9001      	str	r0, [sp, #4]
 8007bc4:	f000 fbc0 	bl	8008348 <__mcmp>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	dcaf      	bgt.n	8007b2c <_dtoa_r+0x984>
 8007bcc:	d102      	bne.n	8007bd4 <_dtoa_r+0xa2c>
 8007bce:	f01a 0f01 	tst.w	sl, #1
 8007bd2:	d1ab      	bne.n	8007b2c <_dtoa_r+0x984>
 8007bd4:	4633      	mov	r3, r6
 8007bd6:	461e      	mov	r6, r3
 8007bd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bdc:	2a30      	cmp	r2, #48	@ 0x30
 8007bde:	d0fa      	beq.n	8007bd6 <_dtoa_r+0xa2e>
 8007be0:	e5bb      	b.n	800775a <_dtoa_r+0x5b2>
 8007be2:	429f      	cmp	r7, r3
 8007be4:	d1a3      	bne.n	8007b2e <_dtoa_r+0x986>
 8007be6:	9b04      	ldr	r3, [sp, #16]
 8007be8:	3301      	adds	r3, #1
 8007bea:	9304      	str	r3, [sp, #16]
 8007bec:	2331      	movs	r3, #49	@ 0x31
 8007bee:	703b      	strb	r3, [r7, #0]
 8007bf0:	e5b3      	b.n	800775a <_dtoa_r+0x5b2>
 8007bf2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007bf4:	4f16      	ldr	r7, [pc, #88]	@ (8007c50 <_dtoa_r+0xaa8>)
 8007bf6:	b11b      	cbz	r3, 8007c00 <_dtoa_r+0xa58>
 8007bf8:	f107 0308 	add.w	r3, r7, #8
 8007bfc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007bfe:	6013      	str	r3, [r2, #0]
 8007c00:	4638      	mov	r0, r7
 8007c02:	b011      	add	sp, #68	@ 0x44
 8007c04:	ecbd 8b02 	vpop	{d8}
 8007c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0c:	9b07      	ldr	r3, [sp, #28]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	f77f ae36 	ble.w	8007880 <_dtoa_r+0x6d8>
 8007c14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c18:	2001      	movs	r0, #1
 8007c1a:	e656      	b.n	80078ca <_dtoa_r+0x722>
 8007c1c:	f1bb 0f00 	cmp.w	fp, #0
 8007c20:	f77f aed7 	ble.w	80079d2 <_dtoa_r+0x82a>
 8007c24:	463e      	mov	r6, r7
 8007c26:	9801      	ldr	r0, [sp, #4]
 8007c28:	4621      	mov	r1, r4
 8007c2a:	f7ff fa32 	bl	8007092 <quorem>
 8007c2e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007c32:	f806 ab01 	strb.w	sl, [r6], #1
 8007c36:	1bf2      	subs	r2, r6, r7
 8007c38:	4593      	cmp	fp, r2
 8007c3a:	ddb4      	ble.n	8007ba6 <_dtoa_r+0x9fe>
 8007c3c:	9901      	ldr	r1, [sp, #4]
 8007c3e:	2300      	movs	r3, #0
 8007c40:	220a      	movs	r2, #10
 8007c42:	4648      	mov	r0, r9
 8007c44:	f000 f968 	bl	8007f18 <__multadd>
 8007c48:	9001      	str	r0, [sp, #4]
 8007c4a:	e7ec      	b.n	8007c26 <_dtoa_r+0xa7e>
 8007c4c:	0802ed80 	.word	0x0802ed80
 8007c50:	0802ed04 	.word	0x0802ed04

08007c54 <_free_r>:
 8007c54:	b538      	push	{r3, r4, r5, lr}
 8007c56:	4605      	mov	r5, r0
 8007c58:	2900      	cmp	r1, #0
 8007c5a:	d041      	beq.n	8007ce0 <_free_r+0x8c>
 8007c5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c60:	1f0c      	subs	r4, r1, #4
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	bfb8      	it	lt
 8007c66:	18e4      	addlt	r4, r4, r3
 8007c68:	f000 f8e8 	bl	8007e3c <__malloc_lock>
 8007c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ce4 <_free_r+0x90>)
 8007c6e:	6813      	ldr	r3, [r2, #0]
 8007c70:	b933      	cbnz	r3, 8007c80 <_free_r+0x2c>
 8007c72:	6063      	str	r3, [r4, #4]
 8007c74:	6014      	str	r4, [r2, #0]
 8007c76:	4628      	mov	r0, r5
 8007c78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c7c:	f000 b8e4 	b.w	8007e48 <__malloc_unlock>
 8007c80:	42a3      	cmp	r3, r4
 8007c82:	d908      	bls.n	8007c96 <_free_r+0x42>
 8007c84:	6820      	ldr	r0, [r4, #0]
 8007c86:	1821      	adds	r1, r4, r0
 8007c88:	428b      	cmp	r3, r1
 8007c8a:	bf01      	itttt	eq
 8007c8c:	6819      	ldreq	r1, [r3, #0]
 8007c8e:	685b      	ldreq	r3, [r3, #4]
 8007c90:	1809      	addeq	r1, r1, r0
 8007c92:	6021      	streq	r1, [r4, #0]
 8007c94:	e7ed      	b.n	8007c72 <_free_r+0x1e>
 8007c96:	461a      	mov	r2, r3
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	b10b      	cbz	r3, 8007ca0 <_free_r+0x4c>
 8007c9c:	42a3      	cmp	r3, r4
 8007c9e:	d9fa      	bls.n	8007c96 <_free_r+0x42>
 8007ca0:	6811      	ldr	r1, [r2, #0]
 8007ca2:	1850      	adds	r0, r2, r1
 8007ca4:	42a0      	cmp	r0, r4
 8007ca6:	d10b      	bne.n	8007cc0 <_free_r+0x6c>
 8007ca8:	6820      	ldr	r0, [r4, #0]
 8007caa:	4401      	add	r1, r0
 8007cac:	1850      	adds	r0, r2, r1
 8007cae:	4283      	cmp	r3, r0
 8007cb0:	6011      	str	r1, [r2, #0]
 8007cb2:	d1e0      	bne.n	8007c76 <_free_r+0x22>
 8007cb4:	6818      	ldr	r0, [r3, #0]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	6053      	str	r3, [r2, #4]
 8007cba:	4408      	add	r0, r1
 8007cbc:	6010      	str	r0, [r2, #0]
 8007cbe:	e7da      	b.n	8007c76 <_free_r+0x22>
 8007cc0:	d902      	bls.n	8007cc8 <_free_r+0x74>
 8007cc2:	230c      	movs	r3, #12
 8007cc4:	602b      	str	r3, [r5, #0]
 8007cc6:	e7d6      	b.n	8007c76 <_free_r+0x22>
 8007cc8:	6820      	ldr	r0, [r4, #0]
 8007cca:	1821      	adds	r1, r4, r0
 8007ccc:	428b      	cmp	r3, r1
 8007cce:	bf04      	itt	eq
 8007cd0:	6819      	ldreq	r1, [r3, #0]
 8007cd2:	685b      	ldreq	r3, [r3, #4]
 8007cd4:	6063      	str	r3, [r4, #4]
 8007cd6:	bf04      	itt	eq
 8007cd8:	1809      	addeq	r1, r1, r0
 8007cda:	6021      	streq	r1, [r4, #0]
 8007cdc:	6054      	str	r4, [r2, #4]
 8007cde:	e7ca      	b.n	8007c76 <_free_r+0x22>
 8007ce0:	bd38      	pop	{r3, r4, r5, pc}
 8007ce2:	bf00      	nop
 8007ce4:	2000048c 	.word	0x2000048c

08007ce8 <malloc>:
 8007ce8:	4b02      	ldr	r3, [pc, #8]	@ (8007cf4 <malloc+0xc>)
 8007cea:	4601      	mov	r1, r0
 8007cec:	6818      	ldr	r0, [r3, #0]
 8007cee:	f000 b825 	b.w	8007d3c <_malloc_r>
 8007cf2:	bf00      	nop
 8007cf4:	2000001c 	.word	0x2000001c

08007cf8 <sbrk_aligned>:
 8007cf8:	b570      	push	{r4, r5, r6, lr}
 8007cfa:	4e0f      	ldr	r6, [pc, #60]	@ (8007d38 <sbrk_aligned+0x40>)
 8007cfc:	460c      	mov	r4, r1
 8007cfe:	6831      	ldr	r1, [r6, #0]
 8007d00:	4605      	mov	r5, r0
 8007d02:	b911      	cbnz	r1, 8007d0a <sbrk_aligned+0x12>
 8007d04:	f000 fe46 	bl	8008994 <_sbrk_r>
 8007d08:	6030      	str	r0, [r6, #0]
 8007d0a:	4621      	mov	r1, r4
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	f000 fe41 	bl	8008994 <_sbrk_r>
 8007d12:	1c43      	adds	r3, r0, #1
 8007d14:	d103      	bne.n	8007d1e <sbrk_aligned+0x26>
 8007d16:	f04f 34ff 	mov.w	r4, #4294967295
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	bd70      	pop	{r4, r5, r6, pc}
 8007d1e:	1cc4      	adds	r4, r0, #3
 8007d20:	f024 0403 	bic.w	r4, r4, #3
 8007d24:	42a0      	cmp	r0, r4
 8007d26:	d0f8      	beq.n	8007d1a <sbrk_aligned+0x22>
 8007d28:	1a21      	subs	r1, r4, r0
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f000 fe32 	bl	8008994 <_sbrk_r>
 8007d30:	3001      	adds	r0, #1
 8007d32:	d1f2      	bne.n	8007d1a <sbrk_aligned+0x22>
 8007d34:	e7ef      	b.n	8007d16 <sbrk_aligned+0x1e>
 8007d36:	bf00      	nop
 8007d38:	20000488 	.word	0x20000488

08007d3c <_malloc_r>:
 8007d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d40:	1ccd      	adds	r5, r1, #3
 8007d42:	f025 0503 	bic.w	r5, r5, #3
 8007d46:	3508      	adds	r5, #8
 8007d48:	2d0c      	cmp	r5, #12
 8007d4a:	bf38      	it	cc
 8007d4c:	250c      	movcc	r5, #12
 8007d4e:	2d00      	cmp	r5, #0
 8007d50:	4606      	mov	r6, r0
 8007d52:	db01      	blt.n	8007d58 <_malloc_r+0x1c>
 8007d54:	42a9      	cmp	r1, r5
 8007d56:	d904      	bls.n	8007d62 <_malloc_r+0x26>
 8007d58:	230c      	movs	r3, #12
 8007d5a:	6033      	str	r3, [r6, #0]
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e38 <_malloc_r+0xfc>
 8007d66:	f000 f869 	bl	8007e3c <__malloc_lock>
 8007d6a:	f8d8 3000 	ldr.w	r3, [r8]
 8007d6e:	461c      	mov	r4, r3
 8007d70:	bb44      	cbnz	r4, 8007dc4 <_malloc_r+0x88>
 8007d72:	4629      	mov	r1, r5
 8007d74:	4630      	mov	r0, r6
 8007d76:	f7ff ffbf 	bl	8007cf8 <sbrk_aligned>
 8007d7a:	1c43      	adds	r3, r0, #1
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	d158      	bne.n	8007e32 <_malloc_r+0xf6>
 8007d80:	f8d8 4000 	ldr.w	r4, [r8]
 8007d84:	4627      	mov	r7, r4
 8007d86:	2f00      	cmp	r7, #0
 8007d88:	d143      	bne.n	8007e12 <_malloc_r+0xd6>
 8007d8a:	2c00      	cmp	r4, #0
 8007d8c:	d04b      	beq.n	8007e26 <_malloc_r+0xea>
 8007d8e:	6823      	ldr	r3, [r4, #0]
 8007d90:	4639      	mov	r1, r7
 8007d92:	4630      	mov	r0, r6
 8007d94:	eb04 0903 	add.w	r9, r4, r3
 8007d98:	f000 fdfc 	bl	8008994 <_sbrk_r>
 8007d9c:	4581      	cmp	r9, r0
 8007d9e:	d142      	bne.n	8007e26 <_malloc_r+0xea>
 8007da0:	6821      	ldr	r1, [r4, #0]
 8007da2:	1a6d      	subs	r5, r5, r1
 8007da4:	4629      	mov	r1, r5
 8007da6:	4630      	mov	r0, r6
 8007da8:	f7ff ffa6 	bl	8007cf8 <sbrk_aligned>
 8007dac:	3001      	adds	r0, #1
 8007dae:	d03a      	beq.n	8007e26 <_malloc_r+0xea>
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	442b      	add	r3, r5
 8007db4:	6023      	str	r3, [r4, #0]
 8007db6:	f8d8 3000 	ldr.w	r3, [r8]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	bb62      	cbnz	r2, 8007e18 <_malloc_r+0xdc>
 8007dbe:	f8c8 7000 	str.w	r7, [r8]
 8007dc2:	e00f      	b.n	8007de4 <_malloc_r+0xa8>
 8007dc4:	6822      	ldr	r2, [r4, #0]
 8007dc6:	1b52      	subs	r2, r2, r5
 8007dc8:	d420      	bmi.n	8007e0c <_malloc_r+0xd0>
 8007dca:	2a0b      	cmp	r2, #11
 8007dcc:	d917      	bls.n	8007dfe <_malloc_r+0xc2>
 8007dce:	1961      	adds	r1, r4, r5
 8007dd0:	42a3      	cmp	r3, r4
 8007dd2:	6025      	str	r5, [r4, #0]
 8007dd4:	bf18      	it	ne
 8007dd6:	6059      	strne	r1, [r3, #4]
 8007dd8:	6863      	ldr	r3, [r4, #4]
 8007dda:	bf08      	it	eq
 8007ddc:	f8c8 1000 	streq.w	r1, [r8]
 8007de0:	5162      	str	r2, [r4, r5]
 8007de2:	604b      	str	r3, [r1, #4]
 8007de4:	4630      	mov	r0, r6
 8007de6:	f000 f82f 	bl	8007e48 <__malloc_unlock>
 8007dea:	f104 000b 	add.w	r0, r4, #11
 8007dee:	1d23      	adds	r3, r4, #4
 8007df0:	f020 0007 	bic.w	r0, r0, #7
 8007df4:	1ac2      	subs	r2, r0, r3
 8007df6:	bf1c      	itt	ne
 8007df8:	1a1b      	subne	r3, r3, r0
 8007dfa:	50a3      	strne	r3, [r4, r2]
 8007dfc:	e7af      	b.n	8007d5e <_malloc_r+0x22>
 8007dfe:	6862      	ldr	r2, [r4, #4]
 8007e00:	42a3      	cmp	r3, r4
 8007e02:	bf0c      	ite	eq
 8007e04:	f8c8 2000 	streq.w	r2, [r8]
 8007e08:	605a      	strne	r2, [r3, #4]
 8007e0a:	e7eb      	b.n	8007de4 <_malloc_r+0xa8>
 8007e0c:	4623      	mov	r3, r4
 8007e0e:	6864      	ldr	r4, [r4, #4]
 8007e10:	e7ae      	b.n	8007d70 <_malloc_r+0x34>
 8007e12:	463c      	mov	r4, r7
 8007e14:	687f      	ldr	r7, [r7, #4]
 8007e16:	e7b6      	b.n	8007d86 <_malloc_r+0x4a>
 8007e18:	461a      	mov	r2, r3
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	42a3      	cmp	r3, r4
 8007e1e:	d1fb      	bne.n	8007e18 <_malloc_r+0xdc>
 8007e20:	2300      	movs	r3, #0
 8007e22:	6053      	str	r3, [r2, #4]
 8007e24:	e7de      	b.n	8007de4 <_malloc_r+0xa8>
 8007e26:	230c      	movs	r3, #12
 8007e28:	6033      	str	r3, [r6, #0]
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	f000 f80c 	bl	8007e48 <__malloc_unlock>
 8007e30:	e794      	b.n	8007d5c <_malloc_r+0x20>
 8007e32:	6005      	str	r5, [r0, #0]
 8007e34:	e7d6      	b.n	8007de4 <_malloc_r+0xa8>
 8007e36:	bf00      	nop
 8007e38:	2000048c 	.word	0x2000048c

08007e3c <__malloc_lock>:
 8007e3c:	4801      	ldr	r0, [pc, #4]	@ (8007e44 <__malloc_lock+0x8>)
 8007e3e:	f7ff b926 	b.w	800708e <__retarget_lock_acquire_recursive>
 8007e42:	bf00      	nop
 8007e44:	20000484 	.word	0x20000484

08007e48 <__malloc_unlock>:
 8007e48:	4801      	ldr	r0, [pc, #4]	@ (8007e50 <__malloc_unlock+0x8>)
 8007e4a:	f7ff b921 	b.w	8007090 <__retarget_lock_release_recursive>
 8007e4e:	bf00      	nop
 8007e50:	20000484 	.word	0x20000484

08007e54 <_Balloc>:
 8007e54:	b570      	push	{r4, r5, r6, lr}
 8007e56:	69c6      	ldr	r6, [r0, #28]
 8007e58:	4604      	mov	r4, r0
 8007e5a:	460d      	mov	r5, r1
 8007e5c:	b976      	cbnz	r6, 8007e7c <_Balloc+0x28>
 8007e5e:	2010      	movs	r0, #16
 8007e60:	f7ff ff42 	bl	8007ce8 <malloc>
 8007e64:	4602      	mov	r2, r0
 8007e66:	61e0      	str	r0, [r4, #28]
 8007e68:	b920      	cbnz	r0, 8007e74 <_Balloc+0x20>
 8007e6a:	4b18      	ldr	r3, [pc, #96]	@ (8007ecc <_Balloc+0x78>)
 8007e6c:	4818      	ldr	r0, [pc, #96]	@ (8007ed0 <_Balloc+0x7c>)
 8007e6e:	216b      	movs	r1, #107	@ 0x6b
 8007e70:	f000 fdae 	bl	80089d0 <__assert_func>
 8007e74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e78:	6006      	str	r6, [r0, #0]
 8007e7a:	60c6      	str	r6, [r0, #12]
 8007e7c:	69e6      	ldr	r6, [r4, #28]
 8007e7e:	68f3      	ldr	r3, [r6, #12]
 8007e80:	b183      	cbz	r3, 8007ea4 <_Balloc+0x50>
 8007e82:	69e3      	ldr	r3, [r4, #28]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e8a:	b9b8      	cbnz	r0, 8007ebc <_Balloc+0x68>
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	fa01 f605 	lsl.w	r6, r1, r5
 8007e92:	1d72      	adds	r2, r6, #5
 8007e94:	0092      	lsls	r2, r2, #2
 8007e96:	4620      	mov	r0, r4
 8007e98:	f000 fdb8 	bl	8008a0c <_calloc_r>
 8007e9c:	b160      	cbz	r0, 8007eb8 <_Balloc+0x64>
 8007e9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ea2:	e00e      	b.n	8007ec2 <_Balloc+0x6e>
 8007ea4:	2221      	movs	r2, #33	@ 0x21
 8007ea6:	2104      	movs	r1, #4
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f000 fdaf 	bl	8008a0c <_calloc_r>
 8007eae:	69e3      	ldr	r3, [r4, #28]
 8007eb0:	60f0      	str	r0, [r6, #12]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e4      	bne.n	8007e82 <_Balloc+0x2e>
 8007eb8:	2000      	movs	r0, #0
 8007eba:	bd70      	pop	{r4, r5, r6, pc}
 8007ebc:	6802      	ldr	r2, [r0, #0]
 8007ebe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ec8:	e7f7      	b.n	8007eba <_Balloc+0x66>
 8007eca:	bf00      	nop
 8007ecc:	0802ed11 	.word	0x0802ed11
 8007ed0:	0802ed91 	.word	0x0802ed91

08007ed4 <_Bfree>:
 8007ed4:	b570      	push	{r4, r5, r6, lr}
 8007ed6:	69c6      	ldr	r6, [r0, #28]
 8007ed8:	4605      	mov	r5, r0
 8007eda:	460c      	mov	r4, r1
 8007edc:	b976      	cbnz	r6, 8007efc <_Bfree+0x28>
 8007ede:	2010      	movs	r0, #16
 8007ee0:	f7ff ff02 	bl	8007ce8 <malloc>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	61e8      	str	r0, [r5, #28]
 8007ee8:	b920      	cbnz	r0, 8007ef4 <_Bfree+0x20>
 8007eea:	4b09      	ldr	r3, [pc, #36]	@ (8007f10 <_Bfree+0x3c>)
 8007eec:	4809      	ldr	r0, [pc, #36]	@ (8007f14 <_Bfree+0x40>)
 8007eee:	218f      	movs	r1, #143	@ 0x8f
 8007ef0:	f000 fd6e 	bl	80089d0 <__assert_func>
 8007ef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ef8:	6006      	str	r6, [r0, #0]
 8007efa:	60c6      	str	r6, [r0, #12]
 8007efc:	b13c      	cbz	r4, 8007f0e <_Bfree+0x3a>
 8007efe:	69eb      	ldr	r3, [r5, #28]
 8007f00:	6862      	ldr	r2, [r4, #4]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f08:	6021      	str	r1, [r4, #0]
 8007f0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
 8007f10:	0802ed11 	.word	0x0802ed11
 8007f14:	0802ed91 	.word	0x0802ed91

08007f18 <__multadd>:
 8007f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f1c:	690d      	ldr	r5, [r1, #16]
 8007f1e:	4607      	mov	r7, r0
 8007f20:	460c      	mov	r4, r1
 8007f22:	461e      	mov	r6, r3
 8007f24:	f101 0c14 	add.w	ip, r1, #20
 8007f28:	2000      	movs	r0, #0
 8007f2a:	f8dc 3000 	ldr.w	r3, [ip]
 8007f2e:	b299      	uxth	r1, r3
 8007f30:	fb02 6101 	mla	r1, r2, r1, r6
 8007f34:	0c1e      	lsrs	r6, r3, #16
 8007f36:	0c0b      	lsrs	r3, r1, #16
 8007f38:	fb02 3306 	mla	r3, r2, r6, r3
 8007f3c:	b289      	uxth	r1, r1
 8007f3e:	3001      	adds	r0, #1
 8007f40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f44:	4285      	cmp	r5, r0
 8007f46:	f84c 1b04 	str.w	r1, [ip], #4
 8007f4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f4e:	dcec      	bgt.n	8007f2a <__multadd+0x12>
 8007f50:	b30e      	cbz	r6, 8007f96 <__multadd+0x7e>
 8007f52:	68a3      	ldr	r3, [r4, #8]
 8007f54:	42ab      	cmp	r3, r5
 8007f56:	dc19      	bgt.n	8007f8c <__multadd+0x74>
 8007f58:	6861      	ldr	r1, [r4, #4]
 8007f5a:	4638      	mov	r0, r7
 8007f5c:	3101      	adds	r1, #1
 8007f5e:	f7ff ff79 	bl	8007e54 <_Balloc>
 8007f62:	4680      	mov	r8, r0
 8007f64:	b928      	cbnz	r0, 8007f72 <__multadd+0x5a>
 8007f66:	4602      	mov	r2, r0
 8007f68:	4b0c      	ldr	r3, [pc, #48]	@ (8007f9c <__multadd+0x84>)
 8007f6a:	480d      	ldr	r0, [pc, #52]	@ (8007fa0 <__multadd+0x88>)
 8007f6c:	21ba      	movs	r1, #186	@ 0xba
 8007f6e:	f000 fd2f 	bl	80089d0 <__assert_func>
 8007f72:	6922      	ldr	r2, [r4, #16]
 8007f74:	3202      	adds	r2, #2
 8007f76:	f104 010c 	add.w	r1, r4, #12
 8007f7a:	0092      	lsls	r2, r2, #2
 8007f7c:	300c      	adds	r0, #12
 8007f7e:	f000 fd19 	bl	80089b4 <memcpy>
 8007f82:	4621      	mov	r1, r4
 8007f84:	4638      	mov	r0, r7
 8007f86:	f7ff ffa5 	bl	8007ed4 <_Bfree>
 8007f8a:	4644      	mov	r4, r8
 8007f8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f90:	3501      	adds	r5, #1
 8007f92:	615e      	str	r6, [r3, #20]
 8007f94:	6125      	str	r5, [r4, #16]
 8007f96:	4620      	mov	r0, r4
 8007f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f9c:	0802ed80 	.word	0x0802ed80
 8007fa0:	0802ed91 	.word	0x0802ed91

08007fa4 <__hi0bits>:
 8007fa4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007fa8:	4603      	mov	r3, r0
 8007faa:	bf36      	itet	cc
 8007fac:	0403      	lslcc	r3, r0, #16
 8007fae:	2000      	movcs	r0, #0
 8007fb0:	2010      	movcc	r0, #16
 8007fb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007fb6:	bf3c      	itt	cc
 8007fb8:	021b      	lslcc	r3, r3, #8
 8007fba:	3008      	addcc	r0, #8
 8007fbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fc0:	bf3c      	itt	cc
 8007fc2:	011b      	lslcc	r3, r3, #4
 8007fc4:	3004      	addcc	r0, #4
 8007fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fca:	bf3c      	itt	cc
 8007fcc:	009b      	lslcc	r3, r3, #2
 8007fce:	3002      	addcc	r0, #2
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	db05      	blt.n	8007fe0 <__hi0bits+0x3c>
 8007fd4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007fd8:	f100 0001 	add.w	r0, r0, #1
 8007fdc:	bf08      	it	eq
 8007fde:	2020      	moveq	r0, #32
 8007fe0:	4770      	bx	lr

08007fe2 <__lo0bits>:
 8007fe2:	6803      	ldr	r3, [r0, #0]
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	f013 0007 	ands.w	r0, r3, #7
 8007fea:	d00b      	beq.n	8008004 <__lo0bits+0x22>
 8007fec:	07d9      	lsls	r1, r3, #31
 8007fee:	d421      	bmi.n	8008034 <__lo0bits+0x52>
 8007ff0:	0798      	lsls	r0, r3, #30
 8007ff2:	bf49      	itett	mi
 8007ff4:	085b      	lsrmi	r3, r3, #1
 8007ff6:	089b      	lsrpl	r3, r3, #2
 8007ff8:	2001      	movmi	r0, #1
 8007ffa:	6013      	strmi	r3, [r2, #0]
 8007ffc:	bf5c      	itt	pl
 8007ffe:	6013      	strpl	r3, [r2, #0]
 8008000:	2002      	movpl	r0, #2
 8008002:	4770      	bx	lr
 8008004:	b299      	uxth	r1, r3
 8008006:	b909      	cbnz	r1, 800800c <__lo0bits+0x2a>
 8008008:	0c1b      	lsrs	r3, r3, #16
 800800a:	2010      	movs	r0, #16
 800800c:	b2d9      	uxtb	r1, r3
 800800e:	b909      	cbnz	r1, 8008014 <__lo0bits+0x32>
 8008010:	3008      	adds	r0, #8
 8008012:	0a1b      	lsrs	r3, r3, #8
 8008014:	0719      	lsls	r1, r3, #28
 8008016:	bf04      	itt	eq
 8008018:	091b      	lsreq	r3, r3, #4
 800801a:	3004      	addeq	r0, #4
 800801c:	0799      	lsls	r1, r3, #30
 800801e:	bf04      	itt	eq
 8008020:	089b      	lsreq	r3, r3, #2
 8008022:	3002      	addeq	r0, #2
 8008024:	07d9      	lsls	r1, r3, #31
 8008026:	d403      	bmi.n	8008030 <__lo0bits+0x4e>
 8008028:	085b      	lsrs	r3, r3, #1
 800802a:	f100 0001 	add.w	r0, r0, #1
 800802e:	d003      	beq.n	8008038 <__lo0bits+0x56>
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	4770      	bx	lr
 8008034:	2000      	movs	r0, #0
 8008036:	4770      	bx	lr
 8008038:	2020      	movs	r0, #32
 800803a:	4770      	bx	lr

0800803c <__i2b>:
 800803c:	b510      	push	{r4, lr}
 800803e:	460c      	mov	r4, r1
 8008040:	2101      	movs	r1, #1
 8008042:	f7ff ff07 	bl	8007e54 <_Balloc>
 8008046:	4602      	mov	r2, r0
 8008048:	b928      	cbnz	r0, 8008056 <__i2b+0x1a>
 800804a:	4b05      	ldr	r3, [pc, #20]	@ (8008060 <__i2b+0x24>)
 800804c:	4805      	ldr	r0, [pc, #20]	@ (8008064 <__i2b+0x28>)
 800804e:	f240 1145 	movw	r1, #325	@ 0x145
 8008052:	f000 fcbd 	bl	80089d0 <__assert_func>
 8008056:	2301      	movs	r3, #1
 8008058:	6144      	str	r4, [r0, #20]
 800805a:	6103      	str	r3, [r0, #16]
 800805c:	bd10      	pop	{r4, pc}
 800805e:	bf00      	nop
 8008060:	0802ed80 	.word	0x0802ed80
 8008064:	0802ed91 	.word	0x0802ed91

08008068 <__multiply>:
 8008068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806c:	4614      	mov	r4, r2
 800806e:	690a      	ldr	r2, [r1, #16]
 8008070:	6923      	ldr	r3, [r4, #16]
 8008072:	429a      	cmp	r2, r3
 8008074:	bfa8      	it	ge
 8008076:	4623      	movge	r3, r4
 8008078:	460f      	mov	r7, r1
 800807a:	bfa4      	itt	ge
 800807c:	460c      	movge	r4, r1
 800807e:	461f      	movge	r7, r3
 8008080:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008084:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008088:	68a3      	ldr	r3, [r4, #8]
 800808a:	6861      	ldr	r1, [r4, #4]
 800808c:	eb0a 0609 	add.w	r6, sl, r9
 8008090:	42b3      	cmp	r3, r6
 8008092:	b085      	sub	sp, #20
 8008094:	bfb8      	it	lt
 8008096:	3101      	addlt	r1, #1
 8008098:	f7ff fedc 	bl	8007e54 <_Balloc>
 800809c:	b930      	cbnz	r0, 80080ac <__multiply+0x44>
 800809e:	4602      	mov	r2, r0
 80080a0:	4b44      	ldr	r3, [pc, #272]	@ (80081b4 <__multiply+0x14c>)
 80080a2:	4845      	ldr	r0, [pc, #276]	@ (80081b8 <__multiply+0x150>)
 80080a4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80080a8:	f000 fc92 	bl	80089d0 <__assert_func>
 80080ac:	f100 0514 	add.w	r5, r0, #20
 80080b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80080b4:	462b      	mov	r3, r5
 80080b6:	2200      	movs	r2, #0
 80080b8:	4543      	cmp	r3, r8
 80080ba:	d321      	bcc.n	8008100 <__multiply+0x98>
 80080bc:	f107 0114 	add.w	r1, r7, #20
 80080c0:	f104 0214 	add.w	r2, r4, #20
 80080c4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80080c8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80080cc:	9302      	str	r3, [sp, #8]
 80080ce:	1b13      	subs	r3, r2, r4
 80080d0:	3b15      	subs	r3, #21
 80080d2:	f023 0303 	bic.w	r3, r3, #3
 80080d6:	3304      	adds	r3, #4
 80080d8:	f104 0715 	add.w	r7, r4, #21
 80080dc:	42ba      	cmp	r2, r7
 80080de:	bf38      	it	cc
 80080e0:	2304      	movcc	r3, #4
 80080e2:	9301      	str	r3, [sp, #4]
 80080e4:	9b02      	ldr	r3, [sp, #8]
 80080e6:	9103      	str	r1, [sp, #12]
 80080e8:	428b      	cmp	r3, r1
 80080ea:	d80c      	bhi.n	8008106 <__multiply+0x9e>
 80080ec:	2e00      	cmp	r6, #0
 80080ee:	dd03      	ble.n	80080f8 <__multiply+0x90>
 80080f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d05b      	beq.n	80081b0 <__multiply+0x148>
 80080f8:	6106      	str	r6, [r0, #16]
 80080fa:	b005      	add	sp, #20
 80080fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008100:	f843 2b04 	str.w	r2, [r3], #4
 8008104:	e7d8      	b.n	80080b8 <__multiply+0x50>
 8008106:	f8b1 a000 	ldrh.w	sl, [r1]
 800810a:	f1ba 0f00 	cmp.w	sl, #0
 800810e:	d024      	beq.n	800815a <__multiply+0xf2>
 8008110:	f104 0e14 	add.w	lr, r4, #20
 8008114:	46a9      	mov	r9, r5
 8008116:	f04f 0c00 	mov.w	ip, #0
 800811a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800811e:	f8d9 3000 	ldr.w	r3, [r9]
 8008122:	fa1f fb87 	uxth.w	fp, r7
 8008126:	b29b      	uxth	r3, r3
 8008128:	fb0a 330b 	mla	r3, sl, fp, r3
 800812c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008130:	f8d9 7000 	ldr.w	r7, [r9]
 8008134:	4463      	add	r3, ip
 8008136:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800813a:	fb0a c70b 	mla	r7, sl, fp, ip
 800813e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008142:	b29b      	uxth	r3, r3
 8008144:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008148:	4572      	cmp	r2, lr
 800814a:	f849 3b04 	str.w	r3, [r9], #4
 800814e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008152:	d8e2      	bhi.n	800811a <__multiply+0xb2>
 8008154:	9b01      	ldr	r3, [sp, #4]
 8008156:	f845 c003 	str.w	ip, [r5, r3]
 800815a:	9b03      	ldr	r3, [sp, #12]
 800815c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008160:	3104      	adds	r1, #4
 8008162:	f1b9 0f00 	cmp.w	r9, #0
 8008166:	d021      	beq.n	80081ac <__multiply+0x144>
 8008168:	682b      	ldr	r3, [r5, #0]
 800816a:	f104 0c14 	add.w	ip, r4, #20
 800816e:	46ae      	mov	lr, r5
 8008170:	f04f 0a00 	mov.w	sl, #0
 8008174:	f8bc b000 	ldrh.w	fp, [ip]
 8008178:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800817c:	fb09 770b 	mla	r7, r9, fp, r7
 8008180:	4457      	add	r7, sl
 8008182:	b29b      	uxth	r3, r3
 8008184:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008188:	f84e 3b04 	str.w	r3, [lr], #4
 800818c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008190:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008194:	f8be 3000 	ldrh.w	r3, [lr]
 8008198:	fb09 330a 	mla	r3, r9, sl, r3
 800819c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80081a0:	4562      	cmp	r2, ip
 80081a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081a6:	d8e5      	bhi.n	8008174 <__multiply+0x10c>
 80081a8:	9f01      	ldr	r7, [sp, #4]
 80081aa:	51eb      	str	r3, [r5, r7]
 80081ac:	3504      	adds	r5, #4
 80081ae:	e799      	b.n	80080e4 <__multiply+0x7c>
 80081b0:	3e01      	subs	r6, #1
 80081b2:	e79b      	b.n	80080ec <__multiply+0x84>
 80081b4:	0802ed80 	.word	0x0802ed80
 80081b8:	0802ed91 	.word	0x0802ed91

080081bc <__pow5mult>:
 80081bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081c0:	4615      	mov	r5, r2
 80081c2:	f012 0203 	ands.w	r2, r2, #3
 80081c6:	4607      	mov	r7, r0
 80081c8:	460e      	mov	r6, r1
 80081ca:	d007      	beq.n	80081dc <__pow5mult+0x20>
 80081cc:	4c25      	ldr	r4, [pc, #148]	@ (8008264 <__pow5mult+0xa8>)
 80081ce:	3a01      	subs	r2, #1
 80081d0:	2300      	movs	r3, #0
 80081d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80081d6:	f7ff fe9f 	bl	8007f18 <__multadd>
 80081da:	4606      	mov	r6, r0
 80081dc:	10ad      	asrs	r5, r5, #2
 80081de:	d03d      	beq.n	800825c <__pow5mult+0xa0>
 80081e0:	69fc      	ldr	r4, [r7, #28]
 80081e2:	b97c      	cbnz	r4, 8008204 <__pow5mult+0x48>
 80081e4:	2010      	movs	r0, #16
 80081e6:	f7ff fd7f 	bl	8007ce8 <malloc>
 80081ea:	4602      	mov	r2, r0
 80081ec:	61f8      	str	r0, [r7, #28]
 80081ee:	b928      	cbnz	r0, 80081fc <__pow5mult+0x40>
 80081f0:	4b1d      	ldr	r3, [pc, #116]	@ (8008268 <__pow5mult+0xac>)
 80081f2:	481e      	ldr	r0, [pc, #120]	@ (800826c <__pow5mult+0xb0>)
 80081f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80081f8:	f000 fbea 	bl	80089d0 <__assert_func>
 80081fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008200:	6004      	str	r4, [r0, #0]
 8008202:	60c4      	str	r4, [r0, #12]
 8008204:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008208:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800820c:	b94c      	cbnz	r4, 8008222 <__pow5mult+0x66>
 800820e:	f240 2171 	movw	r1, #625	@ 0x271
 8008212:	4638      	mov	r0, r7
 8008214:	f7ff ff12 	bl	800803c <__i2b>
 8008218:	2300      	movs	r3, #0
 800821a:	f8c8 0008 	str.w	r0, [r8, #8]
 800821e:	4604      	mov	r4, r0
 8008220:	6003      	str	r3, [r0, #0]
 8008222:	f04f 0900 	mov.w	r9, #0
 8008226:	07eb      	lsls	r3, r5, #31
 8008228:	d50a      	bpl.n	8008240 <__pow5mult+0x84>
 800822a:	4631      	mov	r1, r6
 800822c:	4622      	mov	r2, r4
 800822e:	4638      	mov	r0, r7
 8008230:	f7ff ff1a 	bl	8008068 <__multiply>
 8008234:	4631      	mov	r1, r6
 8008236:	4680      	mov	r8, r0
 8008238:	4638      	mov	r0, r7
 800823a:	f7ff fe4b 	bl	8007ed4 <_Bfree>
 800823e:	4646      	mov	r6, r8
 8008240:	106d      	asrs	r5, r5, #1
 8008242:	d00b      	beq.n	800825c <__pow5mult+0xa0>
 8008244:	6820      	ldr	r0, [r4, #0]
 8008246:	b938      	cbnz	r0, 8008258 <__pow5mult+0x9c>
 8008248:	4622      	mov	r2, r4
 800824a:	4621      	mov	r1, r4
 800824c:	4638      	mov	r0, r7
 800824e:	f7ff ff0b 	bl	8008068 <__multiply>
 8008252:	6020      	str	r0, [r4, #0]
 8008254:	f8c0 9000 	str.w	r9, [r0]
 8008258:	4604      	mov	r4, r0
 800825a:	e7e4      	b.n	8008226 <__pow5mult+0x6a>
 800825c:	4630      	mov	r0, r6
 800825e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008262:	bf00      	nop
 8008264:	0802edec 	.word	0x0802edec
 8008268:	0802ed11 	.word	0x0802ed11
 800826c:	0802ed91 	.word	0x0802ed91

08008270 <__lshift>:
 8008270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008274:	460c      	mov	r4, r1
 8008276:	6849      	ldr	r1, [r1, #4]
 8008278:	6923      	ldr	r3, [r4, #16]
 800827a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800827e:	68a3      	ldr	r3, [r4, #8]
 8008280:	4607      	mov	r7, r0
 8008282:	4691      	mov	r9, r2
 8008284:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008288:	f108 0601 	add.w	r6, r8, #1
 800828c:	42b3      	cmp	r3, r6
 800828e:	db0b      	blt.n	80082a8 <__lshift+0x38>
 8008290:	4638      	mov	r0, r7
 8008292:	f7ff fddf 	bl	8007e54 <_Balloc>
 8008296:	4605      	mov	r5, r0
 8008298:	b948      	cbnz	r0, 80082ae <__lshift+0x3e>
 800829a:	4602      	mov	r2, r0
 800829c:	4b28      	ldr	r3, [pc, #160]	@ (8008340 <__lshift+0xd0>)
 800829e:	4829      	ldr	r0, [pc, #164]	@ (8008344 <__lshift+0xd4>)
 80082a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80082a4:	f000 fb94 	bl	80089d0 <__assert_func>
 80082a8:	3101      	adds	r1, #1
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	e7ee      	b.n	800828c <__lshift+0x1c>
 80082ae:	2300      	movs	r3, #0
 80082b0:	f100 0114 	add.w	r1, r0, #20
 80082b4:	f100 0210 	add.w	r2, r0, #16
 80082b8:	4618      	mov	r0, r3
 80082ba:	4553      	cmp	r3, sl
 80082bc:	db33      	blt.n	8008326 <__lshift+0xb6>
 80082be:	6920      	ldr	r0, [r4, #16]
 80082c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082c4:	f104 0314 	add.w	r3, r4, #20
 80082c8:	f019 091f 	ands.w	r9, r9, #31
 80082cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80082d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80082d4:	d02b      	beq.n	800832e <__lshift+0xbe>
 80082d6:	f1c9 0e20 	rsb	lr, r9, #32
 80082da:	468a      	mov	sl, r1
 80082dc:	2200      	movs	r2, #0
 80082de:	6818      	ldr	r0, [r3, #0]
 80082e0:	fa00 f009 	lsl.w	r0, r0, r9
 80082e4:	4310      	orrs	r0, r2
 80082e6:	f84a 0b04 	str.w	r0, [sl], #4
 80082ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ee:	459c      	cmp	ip, r3
 80082f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80082f4:	d8f3      	bhi.n	80082de <__lshift+0x6e>
 80082f6:	ebac 0304 	sub.w	r3, ip, r4
 80082fa:	3b15      	subs	r3, #21
 80082fc:	f023 0303 	bic.w	r3, r3, #3
 8008300:	3304      	adds	r3, #4
 8008302:	f104 0015 	add.w	r0, r4, #21
 8008306:	4584      	cmp	ip, r0
 8008308:	bf38      	it	cc
 800830a:	2304      	movcc	r3, #4
 800830c:	50ca      	str	r2, [r1, r3]
 800830e:	b10a      	cbz	r2, 8008314 <__lshift+0xa4>
 8008310:	f108 0602 	add.w	r6, r8, #2
 8008314:	3e01      	subs	r6, #1
 8008316:	4638      	mov	r0, r7
 8008318:	612e      	str	r6, [r5, #16]
 800831a:	4621      	mov	r1, r4
 800831c:	f7ff fdda 	bl	8007ed4 <_Bfree>
 8008320:	4628      	mov	r0, r5
 8008322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008326:	f842 0f04 	str.w	r0, [r2, #4]!
 800832a:	3301      	adds	r3, #1
 800832c:	e7c5      	b.n	80082ba <__lshift+0x4a>
 800832e:	3904      	subs	r1, #4
 8008330:	f853 2b04 	ldr.w	r2, [r3], #4
 8008334:	f841 2f04 	str.w	r2, [r1, #4]!
 8008338:	459c      	cmp	ip, r3
 800833a:	d8f9      	bhi.n	8008330 <__lshift+0xc0>
 800833c:	e7ea      	b.n	8008314 <__lshift+0xa4>
 800833e:	bf00      	nop
 8008340:	0802ed80 	.word	0x0802ed80
 8008344:	0802ed91 	.word	0x0802ed91

08008348 <__mcmp>:
 8008348:	690a      	ldr	r2, [r1, #16]
 800834a:	4603      	mov	r3, r0
 800834c:	6900      	ldr	r0, [r0, #16]
 800834e:	1a80      	subs	r0, r0, r2
 8008350:	b530      	push	{r4, r5, lr}
 8008352:	d10e      	bne.n	8008372 <__mcmp+0x2a>
 8008354:	3314      	adds	r3, #20
 8008356:	3114      	adds	r1, #20
 8008358:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800835c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008360:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008364:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008368:	4295      	cmp	r5, r2
 800836a:	d003      	beq.n	8008374 <__mcmp+0x2c>
 800836c:	d205      	bcs.n	800837a <__mcmp+0x32>
 800836e:	f04f 30ff 	mov.w	r0, #4294967295
 8008372:	bd30      	pop	{r4, r5, pc}
 8008374:	42a3      	cmp	r3, r4
 8008376:	d3f3      	bcc.n	8008360 <__mcmp+0x18>
 8008378:	e7fb      	b.n	8008372 <__mcmp+0x2a>
 800837a:	2001      	movs	r0, #1
 800837c:	e7f9      	b.n	8008372 <__mcmp+0x2a>
	...

08008380 <__mdiff>:
 8008380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008384:	4689      	mov	r9, r1
 8008386:	4606      	mov	r6, r0
 8008388:	4611      	mov	r1, r2
 800838a:	4648      	mov	r0, r9
 800838c:	4614      	mov	r4, r2
 800838e:	f7ff ffdb 	bl	8008348 <__mcmp>
 8008392:	1e05      	subs	r5, r0, #0
 8008394:	d112      	bne.n	80083bc <__mdiff+0x3c>
 8008396:	4629      	mov	r1, r5
 8008398:	4630      	mov	r0, r6
 800839a:	f7ff fd5b 	bl	8007e54 <_Balloc>
 800839e:	4602      	mov	r2, r0
 80083a0:	b928      	cbnz	r0, 80083ae <__mdiff+0x2e>
 80083a2:	4b3f      	ldr	r3, [pc, #252]	@ (80084a0 <__mdiff+0x120>)
 80083a4:	f240 2137 	movw	r1, #567	@ 0x237
 80083a8:	483e      	ldr	r0, [pc, #248]	@ (80084a4 <__mdiff+0x124>)
 80083aa:	f000 fb11 	bl	80089d0 <__assert_func>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80083b4:	4610      	mov	r0, r2
 80083b6:	b003      	add	sp, #12
 80083b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083bc:	bfbc      	itt	lt
 80083be:	464b      	movlt	r3, r9
 80083c0:	46a1      	movlt	r9, r4
 80083c2:	4630      	mov	r0, r6
 80083c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80083c8:	bfba      	itte	lt
 80083ca:	461c      	movlt	r4, r3
 80083cc:	2501      	movlt	r5, #1
 80083ce:	2500      	movge	r5, #0
 80083d0:	f7ff fd40 	bl	8007e54 <_Balloc>
 80083d4:	4602      	mov	r2, r0
 80083d6:	b918      	cbnz	r0, 80083e0 <__mdiff+0x60>
 80083d8:	4b31      	ldr	r3, [pc, #196]	@ (80084a0 <__mdiff+0x120>)
 80083da:	f240 2145 	movw	r1, #581	@ 0x245
 80083de:	e7e3      	b.n	80083a8 <__mdiff+0x28>
 80083e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80083e4:	6926      	ldr	r6, [r4, #16]
 80083e6:	60c5      	str	r5, [r0, #12]
 80083e8:	f109 0310 	add.w	r3, r9, #16
 80083ec:	f109 0514 	add.w	r5, r9, #20
 80083f0:	f104 0e14 	add.w	lr, r4, #20
 80083f4:	f100 0b14 	add.w	fp, r0, #20
 80083f8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80083fc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008400:	9301      	str	r3, [sp, #4]
 8008402:	46d9      	mov	r9, fp
 8008404:	f04f 0c00 	mov.w	ip, #0
 8008408:	9b01      	ldr	r3, [sp, #4]
 800840a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800840e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008412:	9301      	str	r3, [sp, #4]
 8008414:	fa1f f38a 	uxth.w	r3, sl
 8008418:	4619      	mov	r1, r3
 800841a:	b283      	uxth	r3, r0
 800841c:	1acb      	subs	r3, r1, r3
 800841e:	0c00      	lsrs	r0, r0, #16
 8008420:	4463      	add	r3, ip
 8008422:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008426:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800842a:	b29b      	uxth	r3, r3
 800842c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008430:	4576      	cmp	r6, lr
 8008432:	f849 3b04 	str.w	r3, [r9], #4
 8008436:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800843a:	d8e5      	bhi.n	8008408 <__mdiff+0x88>
 800843c:	1b33      	subs	r3, r6, r4
 800843e:	3b15      	subs	r3, #21
 8008440:	f023 0303 	bic.w	r3, r3, #3
 8008444:	3415      	adds	r4, #21
 8008446:	3304      	adds	r3, #4
 8008448:	42a6      	cmp	r6, r4
 800844a:	bf38      	it	cc
 800844c:	2304      	movcc	r3, #4
 800844e:	441d      	add	r5, r3
 8008450:	445b      	add	r3, fp
 8008452:	461e      	mov	r6, r3
 8008454:	462c      	mov	r4, r5
 8008456:	4544      	cmp	r4, r8
 8008458:	d30e      	bcc.n	8008478 <__mdiff+0xf8>
 800845a:	f108 0103 	add.w	r1, r8, #3
 800845e:	1b49      	subs	r1, r1, r5
 8008460:	f021 0103 	bic.w	r1, r1, #3
 8008464:	3d03      	subs	r5, #3
 8008466:	45a8      	cmp	r8, r5
 8008468:	bf38      	it	cc
 800846a:	2100      	movcc	r1, #0
 800846c:	440b      	add	r3, r1
 800846e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008472:	b191      	cbz	r1, 800849a <__mdiff+0x11a>
 8008474:	6117      	str	r7, [r2, #16]
 8008476:	e79d      	b.n	80083b4 <__mdiff+0x34>
 8008478:	f854 1b04 	ldr.w	r1, [r4], #4
 800847c:	46e6      	mov	lr, ip
 800847e:	0c08      	lsrs	r0, r1, #16
 8008480:	fa1c fc81 	uxtah	ip, ip, r1
 8008484:	4471      	add	r1, lr
 8008486:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800848a:	b289      	uxth	r1, r1
 800848c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008490:	f846 1b04 	str.w	r1, [r6], #4
 8008494:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008498:	e7dd      	b.n	8008456 <__mdiff+0xd6>
 800849a:	3f01      	subs	r7, #1
 800849c:	e7e7      	b.n	800846e <__mdiff+0xee>
 800849e:	bf00      	nop
 80084a0:	0802ed80 	.word	0x0802ed80
 80084a4:	0802ed91 	.word	0x0802ed91

080084a8 <__d2b>:
 80084a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80084ac:	460f      	mov	r7, r1
 80084ae:	2101      	movs	r1, #1
 80084b0:	ec59 8b10 	vmov	r8, r9, d0
 80084b4:	4616      	mov	r6, r2
 80084b6:	f7ff fccd 	bl	8007e54 <_Balloc>
 80084ba:	4604      	mov	r4, r0
 80084bc:	b930      	cbnz	r0, 80084cc <__d2b+0x24>
 80084be:	4602      	mov	r2, r0
 80084c0:	4b23      	ldr	r3, [pc, #140]	@ (8008550 <__d2b+0xa8>)
 80084c2:	4824      	ldr	r0, [pc, #144]	@ (8008554 <__d2b+0xac>)
 80084c4:	f240 310f 	movw	r1, #783	@ 0x30f
 80084c8:	f000 fa82 	bl	80089d0 <__assert_func>
 80084cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80084d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084d4:	b10d      	cbz	r5, 80084da <__d2b+0x32>
 80084d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084da:	9301      	str	r3, [sp, #4]
 80084dc:	f1b8 0300 	subs.w	r3, r8, #0
 80084e0:	d023      	beq.n	800852a <__d2b+0x82>
 80084e2:	4668      	mov	r0, sp
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	f7ff fd7c 	bl	8007fe2 <__lo0bits>
 80084ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 80084ee:	b1d0      	cbz	r0, 8008526 <__d2b+0x7e>
 80084f0:	f1c0 0320 	rsb	r3, r0, #32
 80084f4:	fa02 f303 	lsl.w	r3, r2, r3
 80084f8:	430b      	orrs	r3, r1
 80084fa:	40c2      	lsrs	r2, r0
 80084fc:	6163      	str	r3, [r4, #20]
 80084fe:	9201      	str	r2, [sp, #4]
 8008500:	9b01      	ldr	r3, [sp, #4]
 8008502:	61a3      	str	r3, [r4, #24]
 8008504:	2b00      	cmp	r3, #0
 8008506:	bf0c      	ite	eq
 8008508:	2201      	moveq	r2, #1
 800850a:	2202      	movne	r2, #2
 800850c:	6122      	str	r2, [r4, #16]
 800850e:	b1a5      	cbz	r5, 800853a <__d2b+0x92>
 8008510:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008514:	4405      	add	r5, r0
 8008516:	603d      	str	r5, [r7, #0]
 8008518:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800851c:	6030      	str	r0, [r6, #0]
 800851e:	4620      	mov	r0, r4
 8008520:	b003      	add	sp, #12
 8008522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008526:	6161      	str	r1, [r4, #20]
 8008528:	e7ea      	b.n	8008500 <__d2b+0x58>
 800852a:	a801      	add	r0, sp, #4
 800852c:	f7ff fd59 	bl	8007fe2 <__lo0bits>
 8008530:	9b01      	ldr	r3, [sp, #4]
 8008532:	6163      	str	r3, [r4, #20]
 8008534:	3020      	adds	r0, #32
 8008536:	2201      	movs	r2, #1
 8008538:	e7e8      	b.n	800850c <__d2b+0x64>
 800853a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800853e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008542:	6038      	str	r0, [r7, #0]
 8008544:	6918      	ldr	r0, [r3, #16]
 8008546:	f7ff fd2d 	bl	8007fa4 <__hi0bits>
 800854a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800854e:	e7e5      	b.n	800851c <__d2b+0x74>
 8008550:	0802ed80 	.word	0x0802ed80
 8008554:	0802ed91 	.word	0x0802ed91

08008558 <__ssputs_r>:
 8008558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800855c:	688e      	ldr	r6, [r1, #8]
 800855e:	461f      	mov	r7, r3
 8008560:	42be      	cmp	r6, r7
 8008562:	680b      	ldr	r3, [r1, #0]
 8008564:	4682      	mov	sl, r0
 8008566:	460c      	mov	r4, r1
 8008568:	4690      	mov	r8, r2
 800856a:	d82d      	bhi.n	80085c8 <__ssputs_r+0x70>
 800856c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008570:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008574:	d026      	beq.n	80085c4 <__ssputs_r+0x6c>
 8008576:	6965      	ldr	r5, [r4, #20]
 8008578:	6909      	ldr	r1, [r1, #16]
 800857a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800857e:	eba3 0901 	sub.w	r9, r3, r1
 8008582:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008586:	1c7b      	adds	r3, r7, #1
 8008588:	444b      	add	r3, r9
 800858a:	106d      	asrs	r5, r5, #1
 800858c:	429d      	cmp	r5, r3
 800858e:	bf38      	it	cc
 8008590:	461d      	movcc	r5, r3
 8008592:	0553      	lsls	r3, r2, #21
 8008594:	d527      	bpl.n	80085e6 <__ssputs_r+0x8e>
 8008596:	4629      	mov	r1, r5
 8008598:	f7ff fbd0 	bl	8007d3c <_malloc_r>
 800859c:	4606      	mov	r6, r0
 800859e:	b360      	cbz	r0, 80085fa <__ssputs_r+0xa2>
 80085a0:	6921      	ldr	r1, [r4, #16]
 80085a2:	464a      	mov	r2, r9
 80085a4:	f000 fa06 	bl	80089b4 <memcpy>
 80085a8:	89a3      	ldrh	r3, [r4, #12]
 80085aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80085ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085b2:	81a3      	strh	r3, [r4, #12]
 80085b4:	6126      	str	r6, [r4, #16]
 80085b6:	6165      	str	r5, [r4, #20]
 80085b8:	444e      	add	r6, r9
 80085ba:	eba5 0509 	sub.w	r5, r5, r9
 80085be:	6026      	str	r6, [r4, #0]
 80085c0:	60a5      	str	r5, [r4, #8]
 80085c2:	463e      	mov	r6, r7
 80085c4:	42be      	cmp	r6, r7
 80085c6:	d900      	bls.n	80085ca <__ssputs_r+0x72>
 80085c8:	463e      	mov	r6, r7
 80085ca:	6820      	ldr	r0, [r4, #0]
 80085cc:	4632      	mov	r2, r6
 80085ce:	4641      	mov	r1, r8
 80085d0:	f000 f9c6 	bl	8008960 <memmove>
 80085d4:	68a3      	ldr	r3, [r4, #8]
 80085d6:	1b9b      	subs	r3, r3, r6
 80085d8:	60a3      	str	r3, [r4, #8]
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	4433      	add	r3, r6
 80085de:	6023      	str	r3, [r4, #0]
 80085e0:	2000      	movs	r0, #0
 80085e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085e6:	462a      	mov	r2, r5
 80085e8:	f000 fa36 	bl	8008a58 <_realloc_r>
 80085ec:	4606      	mov	r6, r0
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d1e0      	bne.n	80085b4 <__ssputs_r+0x5c>
 80085f2:	6921      	ldr	r1, [r4, #16]
 80085f4:	4650      	mov	r0, sl
 80085f6:	f7ff fb2d 	bl	8007c54 <_free_r>
 80085fa:	230c      	movs	r3, #12
 80085fc:	f8ca 3000 	str.w	r3, [sl]
 8008600:	89a3      	ldrh	r3, [r4, #12]
 8008602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008606:	81a3      	strh	r3, [r4, #12]
 8008608:	f04f 30ff 	mov.w	r0, #4294967295
 800860c:	e7e9      	b.n	80085e2 <__ssputs_r+0x8a>
	...

08008610 <_svfiprintf_r>:
 8008610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008614:	4698      	mov	r8, r3
 8008616:	898b      	ldrh	r3, [r1, #12]
 8008618:	061b      	lsls	r3, r3, #24
 800861a:	b09d      	sub	sp, #116	@ 0x74
 800861c:	4607      	mov	r7, r0
 800861e:	460d      	mov	r5, r1
 8008620:	4614      	mov	r4, r2
 8008622:	d510      	bpl.n	8008646 <_svfiprintf_r+0x36>
 8008624:	690b      	ldr	r3, [r1, #16]
 8008626:	b973      	cbnz	r3, 8008646 <_svfiprintf_r+0x36>
 8008628:	2140      	movs	r1, #64	@ 0x40
 800862a:	f7ff fb87 	bl	8007d3c <_malloc_r>
 800862e:	6028      	str	r0, [r5, #0]
 8008630:	6128      	str	r0, [r5, #16]
 8008632:	b930      	cbnz	r0, 8008642 <_svfiprintf_r+0x32>
 8008634:	230c      	movs	r3, #12
 8008636:	603b      	str	r3, [r7, #0]
 8008638:	f04f 30ff 	mov.w	r0, #4294967295
 800863c:	b01d      	add	sp, #116	@ 0x74
 800863e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008642:	2340      	movs	r3, #64	@ 0x40
 8008644:	616b      	str	r3, [r5, #20]
 8008646:	2300      	movs	r3, #0
 8008648:	9309      	str	r3, [sp, #36]	@ 0x24
 800864a:	2320      	movs	r3, #32
 800864c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008650:	f8cd 800c 	str.w	r8, [sp, #12]
 8008654:	2330      	movs	r3, #48	@ 0x30
 8008656:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80087f4 <_svfiprintf_r+0x1e4>
 800865a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800865e:	f04f 0901 	mov.w	r9, #1
 8008662:	4623      	mov	r3, r4
 8008664:	469a      	mov	sl, r3
 8008666:	f813 2b01 	ldrb.w	r2, [r3], #1
 800866a:	b10a      	cbz	r2, 8008670 <_svfiprintf_r+0x60>
 800866c:	2a25      	cmp	r2, #37	@ 0x25
 800866e:	d1f9      	bne.n	8008664 <_svfiprintf_r+0x54>
 8008670:	ebba 0b04 	subs.w	fp, sl, r4
 8008674:	d00b      	beq.n	800868e <_svfiprintf_r+0x7e>
 8008676:	465b      	mov	r3, fp
 8008678:	4622      	mov	r2, r4
 800867a:	4629      	mov	r1, r5
 800867c:	4638      	mov	r0, r7
 800867e:	f7ff ff6b 	bl	8008558 <__ssputs_r>
 8008682:	3001      	adds	r0, #1
 8008684:	f000 80a7 	beq.w	80087d6 <_svfiprintf_r+0x1c6>
 8008688:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800868a:	445a      	add	r2, fp
 800868c:	9209      	str	r2, [sp, #36]	@ 0x24
 800868e:	f89a 3000 	ldrb.w	r3, [sl]
 8008692:	2b00      	cmp	r3, #0
 8008694:	f000 809f 	beq.w	80087d6 <_svfiprintf_r+0x1c6>
 8008698:	2300      	movs	r3, #0
 800869a:	f04f 32ff 	mov.w	r2, #4294967295
 800869e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086a2:	f10a 0a01 	add.w	sl, sl, #1
 80086a6:	9304      	str	r3, [sp, #16]
 80086a8:	9307      	str	r3, [sp, #28]
 80086aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80086b0:	4654      	mov	r4, sl
 80086b2:	2205      	movs	r2, #5
 80086b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086b8:	484e      	ldr	r0, [pc, #312]	@ (80087f4 <_svfiprintf_r+0x1e4>)
 80086ba:	f7f7 fdc1 	bl	8000240 <memchr>
 80086be:	9a04      	ldr	r2, [sp, #16]
 80086c0:	b9d8      	cbnz	r0, 80086fa <_svfiprintf_r+0xea>
 80086c2:	06d0      	lsls	r0, r2, #27
 80086c4:	bf44      	itt	mi
 80086c6:	2320      	movmi	r3, #32
 80086c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086cc:	0711      	lsls	r1, r2, #28
 80086ce:	bf44      	itt	mi
 80086d0:	232b      	movmi	r3, #43	@ 0x2b
 80086d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086d6:	f89a 3000 	ldrb.w	r3, [sl]
 80086da:	2b2a      	cmp	r3, #42	@ 0x2a
 80086dc:	d015      	beq.n	800870a <_svfiprintf_r+0xfa>
 80086de:	9a07      	ldr	r2, [sp, #28]
 80086e0:	4654      	mov	r4, sl
 80086e2:	2000      	movs	r0, #0
 80086e4:	f04f 0c0a 	mov.w	ip, #10
 80086e8:	4621      	mov	r1, r4
 80086ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086ee:	3b30      	subs	r3, #48	@ 0x30
 80086f0:	2b09      	cmp	r3, #9
 80086f2:	d94b      	bls.n	800878c <_svfiprintf_r+0x17c>
 80086f4:	b1b0      	cbz	r0, 8008724 <_svfiprintf_r+0x114>
 80086f6:	9207      	str	r2, [sp, #28]
 80086f8:	e014      	b.n	8008724 <_svfiprintf_r+0x114>
 80086fa:	eba0 0308 	sub.w	r3, r0, r8
 80086fe:	fa09 f303 	lsl.w	r3, r9, r3
 8008702:	4313      	orrs	r3, r2
 8008704:	9304      	str	r3, [sp, #16]
 8008706:	46a2      	mov	sl, r4
 8008708:	e7d2      	b.n	80086b0 <_svfiprintf_r+0xa0>
 800870a:	9b03      	ldr	r3, [sp, #12]
 800870c:	1d19      	adds	r1, r3, #4
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	9103      	str	r1, [sp, #12]
 8008712:	2b00      	cmp	r3, #0
 8008714:	bfbb      	ittet	lt
 8008716:	425b      	neglt	r3, r3
 8008718:	f042 0202 	orrlt.w	r2, r2, #2
 800871c:	9307      	strge	r3, [sp, #28]
 800871e:	9307      	strlt	r3, [sp, #28]
 8008720:	bfb8      	it	lt
 8008722:	9204      	strlt	r2, [sp, #16]
 8008724:	7823      	ldrb	r3, [r4, #0]
 8008726:	2b2e      	cmp	r3, #46	@ 0x2e
 8008728:	d10a      	bne.n	8008740 <_svfiprintf_r+0x130>
 800872a:	7863      	ldrb	r3, [r4, #1]
 800872c:	2b2a      	cmp	r3, #42	@ 0x2a
 800872e:	d132      	bne.n	8008796 <_svfiprintf_r+0x186>
 8008730:	9b03      	ldr	r3, [sp, #12]
 8008732:	1d1a      	adds	r2, r3, #4
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	9203      	str	r2, [sp, #12]
 8008738:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800873c:	3402      	adds	r4, #2
 800873e:	9305      	str	r3, [sp, #20]
 8008740:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008804 <_svfiprintf_r+0x1f4>
 8008744:	7821      	ldrb	r1, [r4, #0]
 8008746:	2203      	movs	r2, #3
 8008748:	4650      	mov	r0, sl
 800874a:	f7f7 fd79 	bl	8000240 <memchr>
 800874e:	b138      	cbz	r0, 8008760 <_svfiprintf_r+0x150>
 8008750:	9b04      	ldr	r3, [sp, #16]
 8008752:	eba0 000a 	sub.w	r0, r0, sl
 8008756:	2240      	movs	r2, #64	@ 0x40
 8008758:	4082      	lsls	r2, r0
 800875a:	4313      	orrs	r3, r2
 800875c:	3401      	adds	r4, #1
 800875e:	9304      	str	r3, [sp, #16]
 8008760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008764:	4824      	ldr	r0, [pc, #144]	@ (80087f8 <_svfiprintf_r+0x1e8>)
 8008766:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800876a:	2206      	movs	r2, #6
 800876c:	f7f7 fd68 	bl	8000240 <memchr>
 8008770:	2800      	cmp	r0, #0
 8008772:	d036      	beq.n	80087e2 <_svfiprintf_r+0x1d2>
 8008774:	4b21      	ldr	r3, [pc, #132]	@ (80087fc <_svfiprintf_r+0x1ec>)
 8008776:	bb1b      	cbnz	r3, 80087c0 <_svfiprintf_r+0x1b0>
 8008778:	9b03      	ldr	r3, [sp, #12]
 800877a:	3307      	adds	r3, #7
 800877c:	f023 0307 	bic.w	r3, r3, #7
 8008780:	3308      	adds	r3, #8
 8008782:	9303      	str	r3, [sp, #12]
 8008784:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008786:	4433      	add	r3, r6
 8008788:	9309      	str	r3, [sp, #36]	@ 0x24
 800878a:	e76a      	b.n	8008662 <_svfiprintf_r+0x52>
 800878c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008790:	460c      	mov	r4, r1
 8008792:	2001      	movs	r0, #1
 8008794:	e7a8      	b.n	80086e8 <_svfiprintf_r+0xd8>
 8008796:	2300      	movs	r3, #0
 8008798:	3401      	adds	r4, #1
 800879a:	9305      	str	r3, [sp, #20]
 800879c:	4619      	mov	r1, r3
 800879e:	f04f 0c0a 	mov.w	ip, #10
 80087a2:	4620      	mov	r0, r4
 80087a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087a8:	3a30      	subs	r2, #48	@ 0x30
 80087aa:	2a09      	cmp	r2, #9
 80087ac:	d903      	bls.n	80087b6 <_svfiprintf_r+0x1a6>
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d0c6      	beq.n	8008740 <_svfiprintf_r+0x130>
 80087b2:	9105      	str	r1, [sp, #20]
 80087b4:	e7c4      	b.n	8008740 <_svfiprintf_r+0x130>
 80087b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80087ba:	4604      	mov	r4, r0
 80087bc:	2301      	movs	r3, #1
 80087be:	e7f0      	b.n	80087a2 <_svfiprintf_r+0x192>
 80087c0:	ab03      	add	r3, sp, #12
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	462a      	mov	r2, r5
 80087c6:	4b0e      	ldr	r3, [pc, #56]	@ (8008800 <_svfiprintf_r+0x1f0>)
 80087c8:	a904      	add	r1, sp, #16
 80087ca:	4638      	mov	r0, r7
 80087cc:	f7fd ff14 	bl	80065f8 <_printf_float>
 80087d0:	1c42      	adds	r2, r0, #1
 80087d2:	4606      	mov	r6, r0
 80087d4:	d1d6      	bne.n	8008784 <_svfiprintf_r+0x174>
 80087d6:	89ab      	ldrh	r3, [r5, #12]
 80087d8:	065b      	lsls	r3, r3, #25
 80087da:	f53f af2d 	bmi.w	8008638 <_svfiprintf_r+0x28>
 80087de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087e0:	e72c      	b.n	800863c <_svfiprintf_r+0x2c>
 80087e2:	ab03      	add	r3, sp, #12
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	462a      	mov	r2, r5
 80087e8:	4b05      	ldr	r3, [pc, #20]	@ (8008800 <_svfiprintf_r+0x1f0>)
 80087ea:	a904      	add	r1, sp, #16
 80087ec:	4638      	mov	r0, r7
 80087ee:	f7fe f98b 	bl	8006b08 <_printf_i>
 80087f2:	e7ed      	b.n	80087d0 <_svfiprintf_r+0x1c0>
 80087f4:	0802eee8 	.word	0x0802eee8
 80087f8:	0802eef2 	.word	0x0802eef2
 80087fc:	080065f9 	.word	0x080065f9
 8008800:	08008559 	.word	0x08008559
 8008804:	0802eeee 	.word	0x0802eeee

08008808 <__sflush_r>:
 8008808:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800880c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008810:	0716      	lsls	r6, r2, #28
 8008812:	4605      	mov	r5, r0
 8008814:	460c      	mov	r4, r1
 8008816:	d454      	bmi.n	80088c2 <__sflush_r+0xba>
 8008818:	684b      	ldr	r3, [r1, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	dc02      	bgt.n	8008824 <__sflush_r+0x1c>
 800881e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008820:	2b00      	cmp	r3, #0
 8008822:	dd48      	ble.n	80088b6 <__sflush_r+0xae>
 8008824:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008826:	2e00      	cmp	r6, #0
 8008828:	d045      	beq.n	80088b6 <__sflush_r+0xae>
 800882a:	2300      	movs	r3, #0
 800882c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008830:	682f      	ldr	r7, [r5, #0]
 8008832:	6a21      	ldr	r1, [r4, #32]
 8008834:	602b      	str	r3, [r5, #0]
 8008836:	d030      	beq.n	800889a <__sflush_r+0x92>
 8008838:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800883a:	89a3      	ldrh	r3, [r4, #12]
 800883c:	0759      	lsls	r1, r3, #29
 800883e:	d505      	bpl.n	800884c <__sflush_r+0x44>
 8008840:	6863      	ldr	r3, [r4, #4]
 8008842:	1ad2      	subs	r2, r2, r3
 8008844:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008846:	b10b      	cbz	r3, 800884c <__sflush_r+0x44>
 8008848:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800884a:	1ad2      	subs	r2, r2, r3
 800884c:	2300      	movs	r3, #0
 800884e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008850:	6a21      	ldr	r1, [r4, #32]
 8008852:	4628      	mov	r0, r5
 8008854:	47b0      	blx	r6
 8008856:	1c43      	adds	r3, r0, #1
 8008858:	89a3      	ldrh	r3, [r4, #12]
 800885a:	d106      	bne.n	800886a <__sflush_r+0x62>
 800885c:	6829      	ldr	r1, [r5, #0]
 800885e:	291d      	cmp	r1, #29
 8008860:	d82b      	bhi.n	80088ba <__sflush_r+0xb2>
 8008862:	4a2a      	ldr	r2, [pc, #168]	@ (800890c <__sflush_r+0x104>)
 8008864:	410a      	asrs	r2, r1
 8008866:	07d6      	lsls	r6, r2, #31
 8008868:	d427      	bmi.n	80088ba <__sflush_r+0xb2>
 800886a:	2200      	movs	r2, #0
 800886c:	6062      	str	r2, [r4, #4]
 800886e:	04d9      	lsls	r1, r3, #19
 8008870:	6922      	ldr	r2, [r4, #16]
 8008872:	6022      	str	r2, [r4, #0]
 8008874:	d504      	bpl.n	8008880 <__sflush_r+0x78>
 8008876:	1c42      	adds	r2, r0, #1
 8008878:	d101      	bne.n	800887e <__sflush_r+0x76>
 800887a:	682b      	ldr	r3, [r5, #0]
 800887c:	b903      	cbnz	r3, 8008880 <__sflush_r+0x78>
 800887e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008880:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008882:	602f      	str	r7, [r5, #0]
 8008884:	b1b9      	cbz	r1, 80088b6 <__sflush_r+0xae>
 8008886:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800888a:	4299      	cmp	r1, r3
 800888c:	d002      	beq.n	8008894 <__sflush_r+0x8c>
 800888e:	4628      	mov	r0, r5
 8008890:	f7ff f9e0 	bl	8007c54 <_free_r>
 8008894:	2300      	movs	r3, #0
 8008896:	6363      	str	r3, [r4, #52]	@ 0x34
 8008898:	e00d      	b.n	80088b6 <__sflush_r+0xae>
 800889a:	2301      	movs	r3, #1
 800889c:	4628      	mov	r0, r5
 800889e:	47b0      	blx	r6
 80088a0:	4602      	mov	r2, r0
 80088a2:	1c50      	adds	r0, r2, #1
 80088a4:	d1c9      	bne.n	800883a <__sflush_r+0x32>
 80088a6:	682b      	ldr	r3, [r5, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d0c6      	beq.n	800883a <__sflush_r+0x32>
 80088ac:	2b1d      	cmp	r3, #29
 80088ae:	d001      	beq.n	80088b4 <__sflush_r+0xac>
 80088b0:	2b16      	cmp	r3, #22
 80088b2:	d11e      	bne.n	80088f2 <__sflush_r+0xea>
 80088b4:	602f      	str	r7, [r5, #0]
 80088b6:	2000      	movs	r0, #0
 80088b8:	e022      	b.n	8008900 <__sflush_r+0xf8>
 80088ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088be:	b21b      	sxth	r3, r3
 80088c0:	e01b      	b.n	80088fa <__sflush_r+0xf2>
 80088c2:	690f      	ldr	r7, [r1, #16]
 80088c4:	2f00      	cmp	r7, #0
 80088c6:	d0f6      	beq.n	80088b6 <__sflush_r+0xae>
 80088c8:	0793      	lsls	r3, r2, #30
 80088ca:	680e      	ldr	r6, [r1, #0]
 80088cc:	bf08      	it	eq
 80088ce:	694b      	ldreq	r3, [r1, #20]
 80088d0:	600f      	str	r7, [r1, #0]
 80088d2:	bf18      	it	ne
 80088d4:	2300      	movne	r3, #0
 80088d6:	eba6 0807 	sub.w	r8, r6, r7
 80088da:	608b      	str	r3, [r1, #8]
 80088dc:	f1b8 0f00 	cmp.w	r8, #0
 80088e0:	dde9      	ble.n	80088b6 <__sflush_r+0xae>
 80088e2:	6a21      	ldr	r1, [r4, #32]
 80088e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80088e6:	4643      	mov	r3, r8
 80088e8:	463a      	mov	r2, r7
 80088ea:	4628      	mov	r0, r5
 80088ec:	47b0      	blx	r6
 80088ee:	2800      	cmp	r0, #0
 80088f0:	dc08      	bgt.n	8008904 <__sflush_r+0xfc>
 80088f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088fa:	81a3      	strh	r3, [r4, #12]
 80088fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008904:	4407      	add	r7, r0
 8008906:	eba8 0800 	sub.w	r8, r8, r0
 800890a:	e7e7      	b.n	80088dc <__sflush_r+0xd4>
 800890c:	dfbffffe 	.word	0xdfbffffe

08008910 <_fflush_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	690b      	ldr	r3, [r1, #16]
 8008914:	4605      	mov	r5, r0
 8008916:	460c      	mov	r4, r1
 8008918:	b913      	cbnz	r3, 8008920 <_fflush_r+0x10>
 800891a:	2500      	movs	r5, #0
 800891c:	4628      	mov	r0, r5
 800891e:	bd38      	pop	{r3, r4, r5, pc}
 8008920:	b118      	cbz	r0, 800892a <_fflush_r+0x1a>
 8008922:	6a03      	ldr	r3, [r0, #32]
 8008924:	b90b      	cbnz	r3, 800892a <_fflush_r+0x1a>
 8008926:	f7fe fa9b 	bl	8006e60 <__sinit>
 800892a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d0f3      	beq.n	800891a <_fflush_r+0xa>
 8008932:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008934:	07d0      	lsls	r0, r2, #31
 8008936:	d404      	bmi.n	8008942 <_fflush_r+0x32>
 8008938:	0599      	lsls	r1, r3, #22
 800893a:	d402      	bmi.n	8008942 <_fflush_r+0x32>
 800893c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800893e:	f7fe fba6 	bl	800708e <__retarget_lock_acquire_recursive>
 8008942:	4628      	mov	r0, r5
 8008944:	4621      	mov	r1, r4
 8008946:	f7ff ff5f 	bl	8008808 <__sflush_r>
 800894a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800894c:	07da      	lsls	r2, r3, #31
 800894e:	4605      	mov	r5, r0
 8008950:	d4e4      	bmi.n	800891c <_fflush_r+0xc>
 8008952:	89a3      	ldrh	r3, [r4, #12]
 8008954:	059b      	lsls	r3, r3, #22
 8008956:	d4e1      	bmi.n	800891c <_fflush_r+0xc>
 8008958:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800895a:	f7fe fb99 	bl	8007090 <__retarget_lock_release_recursive>
 800895e:	e7dd      	b.n	800891c <_fflush_r+0xc>

08008960 <memmove>:
 8008960:	4288      	cmp	r0, r1
 8008962:	b510      	push	{r4, lr}
 8008964:	eb01 0402 	add.w	r4, r1, r2
 8008968:	d902      	bls.n	8008970 <memmove+0x10>
 800896a:	4284      	cmp	r4, r0
 800896c:	4623      	mov	r3, r4
 800896e:	d807      	bhi.n	8008980 <memmove+0x20>
 8008970:	1e43      	subs	r3, r0, #1
 8008972:	42a1      	cmp	r1, r4
 8008974:	d008      	beq.n	8008988 <memmove+0x28>
 8008976:	f811 2b01 	ldrb.w	r2, [r1], #1
 800897a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800897e:	e7f8      	b.n	8008972 <memmove+0x12>
 8008980:	4402      	add	r2, r0
 8008982:	4601      	mov	r1, r0
 8008984:	428a      	cmp	r2, r1
 8008986:	d100      	bne.n	800898a <memmove+0x2a>
 8008988:	bd10      	pop	{r4, pc}
 800898a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800898e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008992:	e7f7      	b.n	8008984 <memmove+0x24>

08008994 <_sbrk_r>:
 8008994:	b538      	push	{r3, r4, r5, lr}
 8008996:	4d06      	ldr	r5, [pc, #24]	@ (80089b0 <_sbrk_r+0x1c>)
 8008998:	2300      	movs	r3, #0
 800899a:	4604      	mov	r4, r0
 800899c:	4608      	mov	r0, r1
 800899e:	602b      	str	r3, [r5, #0]
 80089a0:	f7f9 f944 	bl	8001c2c <_sbrk>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	d102      	bne.n	80089ae <_sbrk_r+0x1a>
 80089a8:	682b      	ldr	r3, [r5, #0]
 80089aa:	b103      	cbz	r3, 80089ae <_sbrk_r+0x1a>
 80089ac:	6023      	str	r3, [r4, #0]
 80089ae:	bd38      	pop	{r3, r4, r5, pc}
 80089b0:	20000480 	.word	0x20000480

080089b4 <memcpy>:
 80089b4:	440a      	add	r2, r1
 80089b6:	4291      	cmp	r1, r2
 80089b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80089bc:	d100      	bne.n	80089c0 <memcpy+0xc>
 80089be:	4770      	bx	lr
 80089c0:	b510      	push	{r4, lr}
 80089c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089ca:	4291      	cmp	r1, r2
 80089cc:	d1f9      	bne.n	80089c2 <memcpy+0xe>
 80089ce:	bd10      	pop	{r4, pc}

080089d0 <__assert_func>:
 80089d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089d2:	4614      	mov	r4, r2
 80089d4:	461a      	mov	r2, r3
 80089d6:	4b09      	ldr	r3, [pc, #36]	@ (80089fc <__assert_func+0x2c>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4605      	mov	r5, r0
 80089dc:	68d8      	ldr	r0, [r3, #12]
 80089de:	b954      	cbnz	r4, 80089f6 <__assert_func+0x26>
 80089e0:	4b07      	ldr	r3, [pc, #28]	@ (8008a00 <__assert_func+0x30>)
 80089e2:	461c      	mov	r4, r3
 80089e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089e8:	9100      	str	r1, [sp, #0]
 80089ea:	462b      	mov	r3, r5
 80089ec:	4905      	ldr	r1, [pc, #20]	@ (8008a04 <__assert_func+0x34>)
 80089ee:	f000 f86f 	bl	8008ad0 <fiprintf>
 80089f2:	f000 f87f 	bl	8008af4 <abort>
 80089f6:	4b04      	ldr	r3, [pc, #16]	@ (8008a08 <__assert_func+0x38>)
 80089f8:	e7f4      	b.n	80089e4 <__assert_func+0x14>
 80089fa:	bf00      	nop
 80089fc:	2000001c 	.word	0x2000001c
 8008a00:	0802ef3e 	.word	0x0802ef3e
 8008a04:	0802ef10 	.word	0x0802ef10
 8008a08:	0802ef03 	.word	0x0802ef03

08008a0c <_calloc_r>:
 8008a0c:	b570      	push	{r4, r5, r6, lr}
 8008a0e:	fba1 5402 	umull	r5, r4, r1, r2
 8008a12:	b93c      	cbnz	r4, 8008a24 <_calloc_r+0x18>
 8008a14:	4629      	mov	r1, r5
 8008a16:	f7ff f991 	bl	8007d3c <_malloc_r>
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	b928      	cbnz	r0, 8008a2a <_calloc_r+0x1e>
 8008a1e:	2600      	movs	r6, #0
 8008a20:	4630      	mov	r0, r6
 8008a22:	bd70      	pop	{r4, r5, r6, pc}
 8008a24:	220c      	movs	r2, #12
 8008a26:	6002      	str	r2, [r0, #0]
 8008a28:	e7f9      	b.n	8008a1e <_calloc_r+0x12>
 8008a2a:	462a      	mov	r2, r5
 8008a2c:	4621      	mov	r1, r4
 8008a2e:	f7fe fab0 	bl	8006f92 <memset>
 8008a32:	e7f5      	b.n	8008a20 <_calloc_r+0x14>

08008a34 <__ascii_mbtowc>:
 8008a34:	b082      	sub	sp, #8
 8008a36:	b901      	cbnz	r1, 8008a3a <__ascii_mbtowc+0x6>
 8008a38:	a901      	add	r1, sp, #4
 8008a3a:	b142      	cbz	r2, 8008a4e <__ascii_mbtowc+0x1a>
 8008a3c:	b14b      	cbz	r3, 8008a52 <__ascii_mbtowc+0x1e>
 8008a3e:	7813      	ldrb	r3, [r2, #0]
 8008a40:	600b      	str	r3, [r1, #0]
 8008a42:	7812      	ldrb	r2, [r2, #0]
 8008a44:	1e10      	subs	r0, r2, #0
 8008a46:	bf18      	it	ne
 8008a48:	2001      	movne	r0, #1
 8008a4a:	b002      	add	sp, #8
 8008a4c:	4770      	bx	lr
 8008a4e:	4610      	mov	r0, r2
 8008a50:	e7fb      	b.n	8008a4a <__ascii_mbtowc+0x16>
 8008a52:	f06f 0001 	mvn.w	r0, #1
 8008a56:	e7f8      	b.n	8008a4a <__ascii_mbtowc+0x16>

08008a58 <_realloc_r>:
 8008a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a5c:	4680      	mov	r8, r0
 8008a5e:	4615      	mov	r5, r2
 8008a60:	460c      	mov	r4, r1
 8008a62:	b921      	cbnz	r1, 8008a6e <_realloc_r+0x16>
 8008a64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a68:	4611      	mov	r1, r2
 8008a6a:	f7ff b967 	b.w	8007d3c <_malloc_r>
 8008a6e:	b92a      	cbnz	r2, 8008a7c <_realloc_r+0x24>
 8008a70:	f7ff f8f0 	bl	8007c54 <_free_r>
 8008a74:	2400      	movs	r4, #0
 8008a76:	4620      	mov	r0, r4
 8008a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a7c:	f000 f841 	bl	8008b02 <_malloc_usable_size_r>
 8008a80:	4285      	cmp	r5, r0
 8008a82:	4606      	mov	r6, r0
 8008a84:	d802      	bhi.n	8008a8c <_realloc_r+0x34>
 8008a86:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008a8a:	d8f4      	bhi.n	8008a76 <_realloc_r+0x1e>
 8008a8c:	4629      	mov	r1, r5
 8008a8e:	4640      	mov	r0, r8
 8008a90:	f7ff f954 	bl	8007d3c <_malloc_r>
 8008a94:	4607      	mov	r7, r0
 8008a96:	2800      	cmp	r0, #0
 8008a98:	d0ec      	beq.n	8008a74 <_realloc_r+0x1c>
 8008a9a:	42b5      	cmp	r5, r6
 8008a9c:	462a      	mov	r2, r5
 8008a9e:	4621      	mov	r1, r4
 8008aa0:	bf28      	it	cs
 8008aa2:	4632      	movcs	r2, r6
 8008aa4:	f7ff ff86 	bl	80089b4 <memcpy>
 8008aa8:	4621      	mov	r1, r4
 8008aaa:	4640      	mov	r0, r8
 8008aac:	f7ff f8d2 	bl	8007c54 <_free_r>
 8008ab0:	463c      	mov	r4, r7
 8008ab2:	e7e0      	b.n	8008a76 <_realloc_r+0x1e>

08008ab4 <__ascii_wctomb>:
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	4608      	mov	r0, r1
 8008ab8:	b141      	cbz	r1, 8008acc <__ascii_wctomb+0x18>
 8008aba:	2aff      	cmp	r2, #255	@ 0xff
 8008abc:	d904      	bls.n	8008ac8 <__ascii_wctomb+0x14>
 8008abe:	228a      	movs	r2, #138	@ 0x8a
 8008ac0:	601a      	str	r2, [r3, #0]
 8008ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac6:	4770      	bx	lr
 8008ac8:	700a      	strb	r2, [r1, #0]
 8008aca:	2001      	movs	r0, #1
 8008acc:	4770      	bx	lr
	...

08008ad0 <fiprintf>:
 8008ad0:	b40e      	push	{r1, r2, r3}
 8008ad2:	b503      	push	{r0, r1, lr}
 8008ad4:	4601      	mov	r1, r0
 8008ad6:	ab03      	add	r3, sp, #12
 8008ad8:	4805      	ldr	r0, [pc, #20]	@ (8008af0 <fiprintf+0x20>)
 8008ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ade:	6800      	ldr	r0, [r0, #0]
 8008ae0:	9301      	str	r3, [sp, #4]
 8008ae2:	f000 f83f 	bl	8008b64 <_vfiprintf_r>
 8008ae6:	b002      	add	sp, #8
 8008ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008aec:	b003      	add	sp, #12
 8008aee:	4770      	bx	lr
 8008af0:	2000001c 	.word	0x2000001c

08008af4 <abort>:
 8008af4:	b508      	push	{r3, lr}
 8008af6:	2006      	movs	r0, #6
 8008af8:	f000 fa08 	bl	8008f0c <raise>
 8008afc:	2001      	movs	r0, #1
 8008afe:	f7f9 f81d 	bl	8001b3c <_exit>

08008b02 <_malloc_usable_size_r>:
 8008b02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b06:	1f18      	subs	r0, r3, #4
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	bfbc      	itt	lt
 8008b0c:	580b      	ldrlt	r3, [r1, r0]
 8008b0e:	18c0      	addlt	r0, r0, r3
 8008b10:	4770      	bx	lr

08008b12 <__sfputc_r>:
 8008b12:	6893      	ldr	r3, [r2, #8]
 8008b14:	3b01      	subs	r3, #1
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	b410      	push	{r4}
 8008b1a:	6093      	str	r3, [r2, #8]
 8008b1c:	da08      	bge.n	8008b30 <__sfputc_r+0x1e>
 8008b1e:	6994      	ldr	r4, [r2, #24]
 8008b20:	42a3      	cmp	r3, r4
 8008b22:	db01      	blt.n	8008b28 <__sfputc_r+0x16>
 8008b24:	290a      	cmp	r1, #10
 8008b26:	d103      	bne.n	8008b30 <__sfputc_r+0x1e>
 8008b28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b2c:	f000 b932 	b.w	8008d94 <__swbuf_r>
 8008b30:	6813      	ldr	r3, [r2, #0]
 8008b32:	1c58      	adds	r0, r3, #1
 8008b34:	6010      	str	r0, [r2, #0]
 8008b36:	7019      	strb	r1, [r3, #0]
 8008b38:	4608      	mov	r0, r1
 8008b3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <__sfputs_r>:
 8008b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b42:	4606      	mov	r6, r0
 8008b44:	460f      	mov	r7, r1
 8008b46:	4614      	mov	r4, r2
 8008b48:	18d5      	adds	r5, r2, r3
 8008b4a:	42ac      	cmp	r4, r5
 8008b4c:	d101      	bne.n	8008b52 <__sfputs_r+0x12>
 8008b4e:	2000      	movs	r0, #0
 8008b50:	e007      	b.n	8008b62 <__sfputs_r+0x22>
 8008b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b56:	463a      	mov	r2, r7
 8008b58:	4630      	mov	r0, r6
 8008b5a:	f7ff ffda 	bl	8008b12 <__sfputc_r>
 8008b5e:	1c43      	adds	r3, r0, #1
 8008b60:	d1f3      	bne.n	8008b4a <__sfputs_r+0xa>
 8008b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b64 <_vfiprintf_r>:
 8008b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b68:	460d      	mov	r5, r1
 8008b6a:	b09d      	sub	sp, #116	@ 0x74
 8008b6c:	4614      	mov	r4, r2
 8008b6e:	4698      	mov	r8, r3
 8008b70:	4606      	mov	r6, r0
 8008b72:	b118      	cbz	r0, 8008b7c <_vfiprintf_r+0x18>
 8008b74:	6a03      	ldr	r3, [r0, #32]
 8008b76:	b90b      	cbnz	r3, 8008b7c <_vfiprintf_r+0x18>
 8008b78:	f7fe f972 	bl	8006e60 <__sinit>
 8008b7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b7e:	07d9      	lsls	r1, r3, #31
 8008b80:	d405      	bmi.n	8008b8e <_vfiprintf_r+0x2a>
 8008b82:	89ab      	ldrh	r3, [r5, #12]
 8008b84:	059a      	lsls	r2, r3, #22
 8008b86:	d402      	bmi.n	8008b8e <_vfiprintf_r+0x2a>
 8008b88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b8a:	f7fe fa80 	bl	800708e <__retarget_lock_acquire_recursive>
 8008b8e:	89ab      	ldrh	r3, [r5, #12]
 8008b90:	071b      	lsls	r3, r3, #28
 8008b92:	d501      	bpl.n	8008b98 <_vfiprintf_r+0x34>
 8008b94:	692b      	ldr	r3, [r5, #16]
 8008b96:	b99b      	cbnz	r3, 8008bc0 <_vfiprintf_r+0x5c>
 8008b98:	4629      	mov	r1, r5
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	f000 f938 	bl	8008e10 <__swsetup_r>
 8008ba0:	b170      	cbz	r0, 8008bc0 <_vfiprintf_r+0x5c>
 8008ba2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ba4:	07dc      	lsls	r4, r3, #31
 8008ba6:	d504      	bpl.n	8008bb2 <_vfiprintf_r+0x4e>
 8008ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bac:	b01d      	add	sp, #116	@ 0x74
 8008bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb2:	89ab      	ldrh	r3, [r5, #12]
 8008bb4:	0598      	lsls	r0, r3, #22
 8008bb6:	d4f7      	bmi.n	8008ba8 <_vfiprintf_r+0x44>
 8008bb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008bba:	f7fe fa69 	bl	8007090 <__retarget_lock_release_recursive>
 8008bbe:	e7f3      	b.n	8008ba8 <_vfiprintf_r+0x44>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bc4:	2320      	movs	r3, #32
 8008bc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008bca:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bce:	2330      	movs	r3, #48	@ 0x30
 8008bd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008d80 <_vfiprintf_r+0x21c>
 8008bd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008bd8:	f04f 0901 	mov.w	r9, #1
 8008bdc:	4623      	mov	r3, r4
 8008bde:	469a      	mov	sl, r3
 8008be0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008be4:	b10a      	cbz	r2, 8008bea <_vfiprintf_r+0x86>
 8008be6:	2a25      	cmp	r2, #37	@ 0x25
 8008be8:	d1f9      	bne.n	8008bde <_vfiprintf_r+0x7a>
 8008bea:	ebba 0b04 	subs.w	fp, sl, r4
 8008bee:	d00b      	beq.n	8008c08 <_vfiprintf_r+0xa4>
 8008bf0:	465b      	mov	r3, fp
 8008bf2:	4622      	mov	r2, r4
 8008bf4:	4629      	mov	r1, r5
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	f7ff ffa2 	bl	8008b40 <__sfputs_r>
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	f000 80a7 	beq.w	8008d50 <_vfiprintf_r+0x1ec>
 8008c02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c04:	445a      	add	r2, fp
 8008c06:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c08:	f89a 3000 	ldrb.w	r3, [sl]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f000 809f 	beq.w	8008d50 <_vfiprintf_r+0x1ec>
 8008c12:	2300      	movs	r3, #0
 8008c14:	f04f 32ff 	mov.w	r2, #4294967295
 8008c18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c1c:	f10a 0a01 	add.w	sl, sl, #1
 8008c20:	9304      	str	r3, [sp, #16]
 8008c22:	9307      	str	r3, [sp, #28]
 8008c24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c28:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c2a:	4654      	mov	r4, sl
 8008c2c:	2205      	movs	r2, #5
 8008c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c32:	4853      	ldr	r0, [pc, #332]	@ (8008d80 <_vfiprintf_r+0x21c>)
 8008c34:	f7f7 fb04 	bl	8000240 <memchr>
 8008c38:	9a04      	ldr	r2, [sp, #16]
 8008c3a:	b9d8      	cbnz	r0, 8008c74 <_vfiprintf_r+0x110>
 8008c3c:	06d1      	lsls	r1, r2, #27
 8008c3e:	bf44      	itt	mi
 8008c40:	2320      	movmi	r3, #32
 8008c42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c46:	0713      	lsls	r3, r2, #28
 8008c48:	bf44      	itt	mi
 8008c4a:	232b      	movmi	r3, #43	@ 0x2b
 8008c4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c50:	f89a 3000 	ldrb.w	r3, [sl]
 8008c54:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c56:	d015      	beq.n	8008c84 <_vfiprintf_r+0x120>
 8008c58:	9a07      	ldr	r2, [sp, #28]
 8008c5a:	4654      	mov	r4, sl
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	f04f 0c0a 	mov.w	ip, #10
 8008c62:	4621      	mov	r1, r4
 8008c64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c68:	3b30      	subs	r3, #48	@ 0x30
 8008c6a:	2b09      	cmp	r3, #9
 8008c6c:	d94b      	bls.n	8008d06 <_vfiprintf_r+0x1a2>
 8008c6e:	b1b0      	cbz	r0, 8008c9e <_vfiprintf_r+0x13a>
 8008c70:	9207      	str	r2, [sp, #28]
 8008c72:	e014      	b.n	8008c9e <_vfiprintf_r+0x13a>
 8008c74:	eba0 0308 	sub.w	r3, r0, r8
 8008c78:	fa09 f303 	lsl.w	r3, r9, r3
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	9304      	str	r3, [sp, #16]
 8008c80:	46a2      	mov	sl, r4
 8008c82:	e7d2      	b.n	8008c2a <_vfiprintf_r+0xc6>
 8008c84:	9b03      	ldr	r3, [sp, #12]
 8008c86:	1d19      	adds	r1, r3, #4
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	9103      	str	r1, [sp, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	bfbb      	ittet	lt
 8008c90:	425b      	neglt	r3, r3
 8008c92:	f042 0202 	orrlt.w	r2, r2, #2
 8008c96:	9307      	strge	r3, [sp, #28]
 8008c98:	9307      	strlt	r3, [sp, #28]
 8008c9a:	bfb8      	it	lt
 8008c9c:	9204      	strlt	r2, [sp, #16]
 8008c9e:	7823      	ldrb	r3, [r4, #0]
 8008ca0:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ca2:	d10a      	bne.n	8008cba <_vfiprintf_r+0x156>
 8008ca4:	7863      	ldrb	r3, [r4, #1]
 8008ca6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ca8:	d132      	bne.n	8008d10 <_vfiprintf_r+0x1ac>
 8008caa:	9b03      	ldr	r3, [sp, #12]
 8008cac:	1d1a      	adds	r2, r3, #4
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	9203      	str	r2, [sp, #12]
 8008cb2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008cb6:	3402      	adds	r4, #2
 8008cb8:	9305      	str	r3, [sp, #20]
 8008cba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008d90 <_vfiprintf_r+0x22c>
 8008cbe:	7821      	ldrb	r1, [r4, #0]
 8008cc0:	2203      	movs	r2, #3
 8008cc2:	4650      	mov	r0, sl
 8008cc4:	f7f7 fabc 	bl	8000240 <memchr>
 8008cc8:	b138      	cbz	r0, 8008cda <_vfiprintf_r+0x176>
 8008cca:	9b04      	ldr	r3, [sp, #16]
 8008ccc:	eba0 000a 	sub.w	r0, r0, sl
 8008cd0:	2240      	movs	r2, #64	@ 0x40
 8008cd2:	4082      	lsls	r2, r0
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	3401      	adds	r4, #1
 8008cd8:	9304      	str	r3, [sp, #16]
 8008cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cde:	4829      	ldr	r0, [pc, #164]	@ (8008d84 <_vfiprintf_r+0x220>)
 8008ce0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ce4:	2206      	movs	r2, #6
 8008ce6:	f7f7 faab 	bl	8000240 <memchr>
 8008cea:	2800      	cmp	r0, #0
 8008cec:	d03f      	beq.n	8008d6e <_vfiprintf_r+0x20a>
 8008cee:	4b26      	ldr	r3, [pc, #152]	@ (8008d88 <_vfiprintf_r+0x224>)
 8008cf0:	bb1b      	cbnz	r3, 8008d3a <_vfiprintf_r+0x1d6>
 8008cf2:	9b03      	ldr	r3, [sp, #12]
 8008cf4:	3307      	adds	r3, #7
 8008cf6:	f023 0307 	bic.w	r3, r3, #7
 8008cfa:	3308      	adds	r3, #8
 8008cfc:	9303      	str	r3, [sp, #12]
 8008cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d00:	443b      	add	r3, r7
 8008d02:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d04:	e76a      	b.n	8008bdc <_vfiprintf_r+0x78>
 8008d06:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	2001      	movs	r0, #1
 8008d0e:	e7a8      	b.n	8008c62 <_vfiprintf_r+0xfe>
 8008d10:	2300      	movs	r3, #0
 8008d12:	3401      	adds	r4, #1
 8008d14:	9305      	str	r3, [sp, #20]
 8008d16:	4619      	mov	r1, r3
 8008d18:	f04f 0c0a 	mov.w	ip, #10
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d22:	3a30      	subs	r2, #48	@ 0x30
 8008d24:	2a09      	cmp	r2, #9
 8008d26:	d903      	bls.n	8008d30 <_vfiprintf_r+0x1cc>
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d0c6      	beq.n	8008cba <_vfiprintf_r+0x156>
 8008d2c:	9105      	str	r1, [sp, #20]
 8008d2e:	e7c4      	b.n	8008cba <_vfiprintf_r+0x156>
 8008d30:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d34:	4604      	mov	r4, r0
 8008d36:	2301      	movs	r3, #1
 8008d38:	e7f0      	b.n	8008d1c <_vfiprintf_r+0x1b8>
 8008d3a:	ab03      	add	r3, sp, #12
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	462a      	mov	r2, r5
 8008d40:	4b12      	ldr	r3, [pc, #72]	@ (8008d8c <_vfiprintf_r+0x228>)
 8008d42:	a904      	add	r1, sp, #16
 8008d44:	4630      	mov	r0, r6
 8008d46:	f7fd fc57 	bl	80065f8 <_printf_float>
 8008d4a:	4607      	mov	r7, r0
 8008d4c:	1c78      	adds	r0, r7, #1
 8008d4e:	d1d6      	bne.n	8008cfe <_vfiprintf_r+0x19a>
 8008d50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d52:	07d9      	lsls	r1, r3, #31
 8008d54:	d405      	bmi.n	8008d62 <_vfiprintf_r+0x1fe>
 8008d56:	89ab      	ldrh	r3, [r5, #12]
 8008d58:	059a      	lsls	r2, r3, #22
 8008d5a:	d402      	bmi.n	8008d62 <_vfiprintf_r+0x1fe>
 8008d5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d5e:	f7fe f997 	bl	8007090 <__retarget_lock_release_recursive>
 8008d62:	89ab      	ldrh	r3, [r5, #12]
 8008d64:	065b      	lsls	r3, r3, #25
 8008d66:	f53f af1f 	bmi.w	8008ba8 <_vfiprintf_r+0x44>
 8008d6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d6c:	e71e      	b.n	8008bac <_vfiprintf_r+0x48>
 8008d6e:	ab03      	add	r3, sp, #12
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	462a      	mov	r2, r5
 8008d74:	4b05      	ldr	r3, [pc, #20]	@ (8008d8c <_vfiprintf_r+0x228>)
 8008d76:	a904      	add	r1, sp, #16
 8008d78:	4630      	mov	r0, r6
 8008d7a:	f7fd fec5 	bl	8006b08 <_printf_i>
 8008d7e:	e7e4      	b.n	8008d4a <_vfiprintf_r+0x1e6>
 8008d80:	0802eee8 	.word	0x0802eee8
 8008d84:	0802eef2 	.word	0x0802eef2
 8008d88:	080065f9 	.word	0x080065f9
 8008d8c:	08008b41 	.word	0x08008b41
 8008d90:	0802eeee 	.word	0x0802eeee

08008d94 <__swbuf_r>:
 8008d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d96:	460e      	mov	r6, r1
 8008d98:	4614      	mov	r4, r2
 8008d9a:	4605      	mov	r5, r0
 8008d9c:	b118      	cbz	r0, 8008da6 <__swbuf_r+0x12>
 8008d9e:	6a03      	ldr	r3, [r0, #32]
 8008da0:	b90b      	cbnz	r3, 8008da6 <__swbuf_r+0x12>
 8008da2:	f7fe f85d 	bl	8006e60 <__sinit>
 8008da6:	69a3      	ldr	r3, [r4, #24]
 8008da8:	60a3      	str	r3, [r4, #8]
 8008daa:	89a3      	ldrh	r3, [r4, #12]
 8008dac:	071a      	lsls	r2, r3, #28
 8008dae:	d501      	bpl.n	8008db4 <__swbuf_r+0x20>
 8008db0:	6923      	ldr	r3, [r4, #16]
 8008db2:	b943      	cbnz	r3, 8008dc6 <__swbuf_r+0x32>
 8008db4:	4621      	mov	r1, r4
 8008db6:	4628      	mov	r0, r5
 8008db8:	f000 f82a 	bl	8008e10 <__swsetup_r>
 8008dbc:	b118      	cbz	r0, 8008dc6 <__swbuf_r+0x32>
 8008dbe:	f04f 37ff 	mov.w	r7, #4294967295
 8008dc2:	4638      	mov	r0, r7
 8008dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	6922      	ldr	r2, [r4, #16]
 8008dca:	1a98      	subs	r0, r3, r2
 8008dcc:	6963      	ldr	r3, [r4, #20]
 8008dce:	b2f6      	uxtb	r6, r6
 8008dd0:	4283      	cmp	r3, r0
 8008dd2:	4637      	mov	r7, r6
 8008dd4:	dc05      	bgt.n	8008de2 <__swbuf_r+0x4e>
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	4628      	mov	r0, r5
 8008dda:	f7ff fd99 	bl	8008910 <_fflush_r>
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d1ed      	bne.n	8008dbe <__swbuf_r+0x2a>
 8008de2:	68a3      	ldr	r3, [r4, #8]
 8008de4:	3b01      	subs	r3, #1
 8008de6:	60a3      	str	r3, [r4, #8]
 8008de8:	6823      	ldr	r3, [r4, #0]
 8008dea:	1c5a      	adds	r2, r3, #1
 8008dec:	6022      	str	r2, [r4, #0]
 8008dee:	701e      	strb	r6, [r3, #0]
 8008df0:	6962      	ldr	r2, [r4, #20]
 8008df2:	1c43      	adds	r3, r0, #1
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d004      	beq.n	8008e02 <__swbuf_r+0x6e>
 8008df8:	89a3      	ldrh	r3, [r4, #12]
 8008dfa:	07db      	lsls	r3, r3, #31
 8008dfc:	d5e1      	bpl.n	8008dc2 <__swbuf_r+0x2e>
 8008dfe:	2e0a      	cmp	r6, #10
 8008e00:	d1df      	bne.n	8008dc2 <__swbuf_r+0x2e>
 8008e02:	4621      	mov	r1, r4
 8008e04:	4628      	mov	r0, r5
 8008e06:	f7ff fd83 	bl	8008910 <_fflush_r>
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	d0d9      	beq.n	8008dc2 <__swbuf_r+0x2e>
 8008e0e:	e7d6      	b.n	8008dbe <__swbuf_r+0x2a>

08008e10 <__swsetup_r>:
 8008e10:	b538      	push	{r3, r4, r5, lr}
 8008e12:	4b29      	ldr	r3, [pc, #164]	@ (8008eb8 <__swsetup_r+0xa8>)
 8008e14:	4605      	mov	r5, r0
 8008e16:	6818      	ldr	r0, [r3, #0]
 8008e18:	460c      	mov	r4, r1
 8008e1a:	b118      	cbz	r0, 8008e24 <__swsetup_r+0x14>
 8008e1c:	6a03      	ldr	r3, [r0, #32]
 8008e1e:	b90b      	cbnz	r3, 8008e24 <__swsetup_r+0x14>
 8008e20:	f7fe f81e 	bl	8006e60 <__sinit>
 8008e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e28:	0719      	lsls	r1, r3, #28
 8008e2a:	d422      	bmi.n	8008e72 <__swsetup_r+0x62>
 8008e2c:	06da      	lsls	r2, r3, #27
 8008e2e:	d407      	bmi.n	8008e40 <__swsetup_r+0x30>
 8008e30:	2209      	movs	r2, #9
 8008e32:	602a      	str	r2, [r5, #0]
 8008e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e38:	81a3      	strh	r3, [r4, #12]
 8008e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e3e:	e033      	b.n	8008ea8 <__swsetup_r+0x98>
 8008e40:	0758      	lsls	r0, r3, #29
 8008e42:	d512      	bpl.n	8008e6a <__swsetup_r+0x5a>
 8008e44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e46:	b141      	cbz	r1, 8008e5a <__swsetup_r+0x4a>
 8008e48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e4c:	4299      	cmp	r1, r3
 8008e4e:	d002      	beq.n	8008e56 <__swsetup_r+0x46>
 8008e50:	4628      	mov	r0, r5
 8008e52:	f7fe feff 	bl	8007c54 <_free_r>
 8008e56:	2300      	movs	r3, #0
 8008e58:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e5a:	89a3      	ldrh	r3, [r4, #12]
 8008e5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e60:	81a3      	strh	r3, [r4, #12]
 8008e62:	2300      	movs	r3, #0
 8008e64:	6063      	str	r3, [r4, #4]
 8008e66:	6923      	ldr	r3, [r4, #16]
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	89a3      	ldrh	r3, [r4, #12]
 8008e6c:	f043 0308 	orr.w	r3, r3, #8
 8008e70:	81a3      	strh	r3, [r4, #12]
 8008e72:	6923      	ldr	r3, [r4, #16]
 8008e74:	b94b      	cbnz	r3, 8008e8a <__swsetup_r+0x7a>
 8008e76:	89a3      	ldrh	r3, [r4, #12]
 8008e78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e80:	d003      	beq.n	8008e8a <__swsetup_r+0x7a>
 8008e82:	4621      	mov	r1, r4
 8008e84:	4628      	mov	r0, r5
 8008e86:	f000 f883 	bl	8008f90 <__smakebuf_r>
 8008e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e8e:	f013 0201 	ands.w	r2, r3, #1
 8008e92:	d00a      	beq.n	8008eaa <__swsetup_r+0x9a>
 8008e94:	2200      	movs	r2, #0
 8008e96:	60a2      	str	r2, [r4, #8]
 8008e98:	6962      	ldr	r2, [r4, #20]
 8008e9a:	4252      	negs	r2, r2
 8008e9c:	61a2      	str	r2, [r4, #24]
 8008e9e:	6922      	ldr	r2, [r4, #16]
 8008ea0:	b942      	cbnz	r2, 8008eb4 <__swsetup_r+0xa4>
 8008ea2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008ea6:	d1c5      	bne.n	8008e34 <__swsetup_r+0x24>
 8008ea8:	bd38      	pop	{r3, r4, r5, pc}
 8008eaa:	0799      	lsls	r1, r3, #30
 8008eac:	bf58      	it	pl
 8008eae:	6962      	ldrpl	r2, [r4, #20]
 8008eb0:	60a2      	str	r2, [r4, #8]
 8008eb2:	e7f4      	b.n	8008e9e <__swsetup_r+0x8e>
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	e7f7      	b.n	8008ea8 <__swsetup_r+0x98>
 8008eb8:	2000001c 	.word	0x2000001c

08008ebc <_raise_r>:
 8008ebc:	291f      	cmp	r1, #31
 8008ebe:	b538      	push	{r3, r4, r5, lr}
 8008ec0:	4605      	mov	r5, r0
 8008ec2:	460c      	mov	r4, r1
 8008ec4:	d904      	bls.n	8008ed0 <_raise_r+0x14>
 8008ec6:	2316      	movs	r3, #22
 8008ec8:	6003      	str	r3, [r0, #0]
 8008eca:	f04f 30ff 	mov.w	r0, #4294967295
 8008ece:	bd38      	pop	{r3, r4, r5, pc}
 8008ed0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008ed2:	b112      	cbz	r2, 8008eda <_raise_r+0x1e>
 8008ed4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ed8:	b94b      	cbnz	r3, 8008eee <_raise_r+0x32>
 8008eda:	4628      	mov	r0, r5
 8008edc:	f000 f830 	bl	8008f40 <_getpid_r>
 8008ee0:	4622      	mov	r2, r4
 8008ee2:	4601      	mov	r1, r0
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eea:	f000 b817 	b.w	8008f1c <_kill_r>
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d00a      	beq.n	8008f08 <_raise_r+0x4c>
 8008ef2:	1c59      	adds	r1, r3, #1
 8008ef4:	d103      	bne.n	8008efe <_raise_r+0x42>
 8008ef6:	2316      	movs	r3, #22
 8008ef8:	6003      	str	r3, [r0, #0]
 8008efa:	2001      	movs	r0, #1
 8008efc:	e7e7      	b.n	8008ece <_raise_r+0x12>
 8008efe:	2100      	movs	r1, #0
 8008f00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008f04:	4620      	mov	r0, r4
 8008f06:	4798      	blx	r3
 8008f08:	2000      	movs	r0, #0
 8008f0a:	e7e0      	b.n	8008ece <_raise_r+0x12>

08008f0c <raise>:
 8008f0c:	4b02      	ldr	r3, [pc, #8]	@ (8008f18 <raise+0xc>)
 8008f0e:	4601      	mov	r1, r0
 8008f10:	6818      	ldr	r0, [r3, #0]
 8008f12:	f7ff bfd3 	b.w	8008ebc <_raise_r>
 8008f16:	bf00      	nop
 8008f18:	2000001c 	.word	0x2000001c

08008f1c <_kill_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	4d07      	ldr	r5, [pc, #28]	@ (8008f3c <_kill_r+0x20>)
 8008f20:	2300      	movs	r3, #0
 8008f22:	4604      	mov	r4, r0
 8008f24:	4608      	mov	r0, r1
 8008f26:	4611      	mov	r1, r2
 8008f28:	602b      	str	r3, [r5, #0]
 8008f2a:	f7f8 fdf7 	bl	8001b1c <_kill>
 8008f2e:	1c43      	adds	r3, r0, #1
 8008f30:	d102      	bne.n	8008f38 <_kill_r+0x1c>
 8008f32:	682b      	ldr	r3, [r5, #0]
 8008f34:	b103      	cbz	r3, 8008f38 <_kill_r+0x1c>
 8008f36:	6023      	str	r3, [r4, #0]
 8008f38:	bd38      	pop	{r3, r4, r5, pc}
 8008f3a:	bf00      	nop
 8008f3c:	20000480 	.word	0x20000480

08008f40 <_getpid_r>:
 8008f40:	f7f8 bde4 	b.w	8001b0c <_getpid>

08008f44 <__swhatbuf_r>:
 8008f44:	b570      	push	{r4, r5, r6, lr}
 8008f46:	460c      	mov	r4, r1
 8008f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f4c:	2900      	cmp	r1, #0
 8008f4e:	b096      	sub	sp, #88	@ 0x58
 8008f50:	4615      	mov	r5, r2
 8008f52:	461e      	mov	r6, r3
 8008f54:	da0d      	bge.n	8008f72 <__swhatbuf_r+0x2e>
 8008f56:	89a3      	ldrh	r3, [r4, #12]
 8008f58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008f5c:	f04f 0100 	mov.w	r1, #0
 8008f60:	bf14      	ite	ne
 8008f62:	2340      	movne	r3, #64	@ 0x40
 8008f64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008f68:	2000      	movs	r0, #0
 8008f6a:	6031      	str	r1, [r6, #0]
 8008f6c:	602b      	str	r3, [r5, #0]
 8008f6e:	b016      	add	sp, #88	@ 0x58
 8008f70:	bd70      	pop	{r4, r5, r6, pc}
 8008f72:	466a      	mov	r2, sp
 8008f74:	f000 f848 	bl	8009008 <_fstat_r>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	dbec      	blt.n	8008f56 <__swhatbuf_r+0x12>
 8008f7c:	9901      	ldr	r1, [sp, #4]
 8008f7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008f82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f86:	4259      	negs	r1, r3
 8008f88:	4159      	adcs	r1, r3
 8008f8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f8e:	e7eb      	b.n	8008f68 <__swhatbuf_r+0x24>

08008f90 <__smakebuf_r>:
 8008f90:	898b      	ldrh	r3, [r1, #12]
 8008f92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f94:	079d      	lsls	r5, r3, #30
 8008f96:	4606      	mov	r6, r0
 8008f98:	460c      	mov	r4, r1
 8008f9a:	d507      	bpl.n	8008fac <__smakebuf_r+0x1c>
 8008f9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008fa0:	6023      	str	r3, [r4, #0]
 8008fa2:	6123      	str	r3, [r4, #16]
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	6163      	str	r3, [r4, #20]
 8008fa8:	b003      	add	sp, #12
 8008faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fac:	ab01      	add	r3, sp, #4
 8008fae:	466a      	mov	r2, sp
 8008fb0:	f7ff ffc8 	bl	8008f44 <__swhatbuf_r>
 8008fb4:	9f00      	ldr	r7, [sp, #0]
 8008fb6:	4605      	mov	r5, r0
 8008fb8:	4639      	mov	r1, r7
 8008fba:	4630      	mov	r0, r6
 8008fbc:	f7fe febe 	bl	8007d3c <_malloc_r>
 8008fc0:	b948      	cbnz	r0, 8008fd6 <__smakebuf_r+0x46>
 8008fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fc6:	059a      	lsls	r2, r3, #22
 8008fc8:	d4ee      	bmi.n	8008fa8 <__smakebuf_r+0x18>
 8008fca:	f023 0303 	bic.w	r3, r3, #3
 8008fce:	f043 0302 	orr.w	r3, r3, #2
 8008fd2:	81a3      	strh	r3, [r4, #12]
 8008fd4:	e7e2      	b.n	8008f9c <__smakebuf_r+0xc>
 8008fd6:	89a3      	ldrh	r3, [r4, #12]
 8008fd8:	6020      	str	r0, [r4, #0]
 8008fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fde:	81a3      	strh	r3, [r4, #12]
 8008fe0:	9b01      	ldr	r3, [sp, #4]
 8008fe2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008fe6:	b15b      	cbz	r3, 8009000 <__smakebuf_r+0x70>
 8008fe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fec:	4630      	mov	r0, r6
 8008fee:	f000 f81d 	bl	800902c <_isatty_r>
 8008ff2:	b128      	cbz	r0, 8009000 <__smakebuf_r+0x70>
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	f023 0303 	bic.w	r3, r3, #3
 8008ffa:	f043 0301 	orr.w	r3, r3, #1
 8008ffe:	81a3      	strh	r3, [r4, #12]
 8009000:	89a3      	ldrh	r3, [r4, #12]
 8009002:	431d      	orrs	r5, r3
 8009004:	81a5      	strh	r5, [r4, #12]
 8009006:	e7cf      	b.n	8008fa8 <__smakebuf_r+0x18>

08009008 <_fstat_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	4d07      	ldr	r5, [pc, #28]	@ (8009028 <_fstat_r+0x20>)
 800900c:	2300      	movs	r3, #0
 800900e:	4604      	mov	r4, r0
 8009010:	4608      	mov	r0, r1
 8009012:	4611      	mov	r1, r2
 8009014:	602b      	str	r3, [r5, #0]
 8009016:	f7f8 fde1 	bl	8001bdc <_fstat>
 800901a:	1c43      	adds	r3, r0, #1
 800901c:	d102      	bne.n	8009024 <_fstat_r+0x1c>
 800901e:	682b      	ldr	r3, [r5, #0]
 8009020:	b103      	cbz	r3, 8009024 <_fstat_r+0x1c>
 8009022:	6023      	str	r3, [r4, #0]
 8009024:	bd38      	pop	{r3, r4, r5, pc}
 8009026:	bf00      	nop
 8009028:	20000480 	.word	0x20000480

0800902c <_isatty_r>:
 800902c:	b538      	push	{r3, r4, r5, lr}
 800902e:	4d06      	ldr	r5, [pc, #24]	@ (8009048 <_isatty_r+0x1c>)
 8009030:	2300      	movs	r3, #0
 8009032:	4604      	mov	r4, r0
 8009034:	4608      	mov	r0, r1
 8009036:	602b      	str	r3, [r5, #0]
 8009038:	f7f8 fde0 	bl	8001bfc <_isatty>
 800903c:	1c43      	adds	r3, r0, #1
 800903e:	d102      	bne.n	8009046 <_isatty_r+0x1a>
 8009040:	682b      	ldr	r3, [r5, #0]
 8009042:	b103      	cbz	r3, 8009046 <_isatty_r+0x1a>
 8009044:	6023      	str	r3, [r4, #0]
 8009046:	bd38      	pop	{r3, r4, r5, pc}
 8009048:	20000480 	.word	0x20000480

0800904c <_init>:
 800904c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904e:	bf00      	nop
 8009050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009052:	bc08      	pop	{r3}
 8009054:	469e      	mov	lr, r3
 8009056:	4770      	bx	lr

08009058 <_fini>:
 8009058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905a:	bf00      	nop
 800905c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800905e:	bc08      	pop	{r3}
 8009060:	469e      	mov	lr, r3
 8009062:	4770      	bx	lr
