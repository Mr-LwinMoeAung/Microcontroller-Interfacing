
lab8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006874  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08006a78  08006a78  00007a78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e50  08006e50  000081dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006e50  08006e50  00007e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e58  08006e58  000081dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e58  08006e58  00007e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e5c  08006e5c  00007e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08006e60  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  200001dc  0800703c  000081dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  0800703c  00008428  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000081dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e01c  00000000  00000000  0000820a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021e5  00000000  00000000  00016226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  00018410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a7  00000000  00000000  00018f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282fe  00000000  00000000  000197ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011726  00000000  00000000  00041afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3f64  00000000  00000000  00053223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147187  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c5c  00000000  00000000  001471cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0014ae28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08006a5c 	.word	0x08006a5c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08006a5c 	.word	0x08006a5c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b17      	ldr	r3, [pc, #92]	@ (8000654 <MX_GPIO_Init+0x74>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a16      	ldr	r2, [pc, #88]	@ (8000654 <MX_GPIO_Init+0x74>)
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <MX_GPIO_Init+0x74>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060e:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <MX_GPIO_Init+0x74>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a10      	ldr	r2, [pc, #64]	@ (8000654 <MX_GPIO_Init+0x74>)
 8000614:	f043 0308 	orr.w	r3, r3, #8
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b0e      	ldr	r3, [pc, #56]	@ (8000654 <MX_GPIO_Init+0x74>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0308 	and.w	r3, r3, #8
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2101      	movs	r1, #1
 800062a:	480b      	ldr	r0, [pc, #44]	@ (8000658 <MX_GPIO_Init+0x78>)
 800062c:	f000 ffdc 	bl	80015e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000630:	2301      	movs	r3, #1
 8000632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	4619      	mov	r1, r3
 8000646:	4804      	ldr	r0, [pc, #16]	@ (8000658 <MX_GPIO_Init+0x78>)
 8000648:	f000 fe22 	bl	8001290 <HAL_GPIO_Init>

}
 800064c:	bf00      	nop
 800064e:	3720      	adds	r7, #32
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40023800 	.word	0x40023800
 8000658:	40020400 	.word	0x40020400

0800065c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000660:	4b1b      	ldr	r3, [pc, #108]	@ (80006d0 <MX_I2C1_Init+0x74>)
 8000662:	4a1c      	ldr	r2, [pc, #112]	@ (80006d4 <MX_I2C1_Init+0x78>)
 8000664:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000666:	4b1a      	ldr	r3, [pc, #104]	@ (80006d0 <MX_I2C1_Init+0x74>)
 8000668:	4a1b      	ldr	r2, [pc, #108]	@ (80006d8 <MX_I2C1_Init+0x7c>)
 800066a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800066c:	4b18      	ldr	r3, [pc, #96]	@ (80006d0 <MX_I2C1_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000672:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <MX_I2C1_Init+0x74>)
 8000674:	2201      	movs	r2, #1
 8000676:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000678:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <MX_I2C1_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800067e:	4b14      	ldr	r3, [pc, #80]	@ (80006d0 <MX_I2C1_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000684:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <MX_I2C1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800068a:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <MX_I2C1_Init+0x74>)
 800068c:	2200      	movs	r2, #0
 800068e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000690:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <MX_I2C1_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000696:	480e      	ldr	r0, [pc, #56]	@ (80006d0 <MX_I2C1_Init+0x74>)
 8000698:	f000 ffda 	bl	8001650 <HAL_I2C_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006a2:	f000 fa2b 	bl	8000afc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006a6:	2100      	movs	r1, #0
 80006a8:	4809      	ldr	r0, [pc, #36]	@ (80006d0 <MX_I2C1_Init+0x74>)
 80006aa:	f001 fd21 	bl	80020f0 <HAL_I2CEx_ConfigAnalogFilter>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006b4:	f000 fa22 	bl	8000afc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006b8:	2100      	movs	r1, #0
 80006ba:	4805      	ldr	r0, [pc, #20]	@ (80006d0 <MX_I2C1_Init+0x74>)
 80006bc:	f001 fd63 	bl	8002186 <HAL_I2CEx_ConfigDigitalFilter>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006c6:	f000 fa19 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200001f8 	.word	0x200001f8
 80006d4:	40005400 	.word	0x40005400
 80006d8:	20404768 	.word	0x20404768

080006dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b0ae      	sub	sp, #184	@ 0xb8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	2290      	movs	r2, #144	@ 0x90
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f004 f950 	bl	80049a2 <memset>
  if(i2cHandle->Instance==I2C1)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a22      	ldr	r2, [pc, #136]	@ (8000790 <HAL_I2C_MspInit+0xb4>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d13c      	bne.n	8000786 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800070c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000710:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000712:	2300      	movs	r3, #0
 8000714:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4618      	mov	r0, r3
 800071c:	f002 fa64 	bl	8002be8 <HAL_RCCEx_PeriphCLKConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000726:	f000 f9e9 	bl	8000afc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <HAL_I2C_MspInit+0xb8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <HAL_I2C_MspInit+0xb8>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <HAL_I2C_MspInit+0xb8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000742:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000746:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800074a:	2312      	movs	r3, #18
 800074c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000756:	2303      	movs	r3, #3
 8000758:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800075c:	2304      	movs	r3, #4
 800075e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000766:	4619      	mov	r1, r3
 8000768:	480b      	ldr	r0, [pc, #44]	@ (8000798 <HAL_I2C_MspInit+0xbc>)
 800076a:	f000 fd91 	bl	8001290 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <HAL_I2C_MspInit+0xb8>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000772:	4a08      	ldr	r2, [pc, #32]	@ (8000794 <HAL_I2C_MspInit+0xb8>)
 8000774:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000778:	6413      	str	r3, [r2, #64]	@ 0x40
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <HAL_I2C_MspInit+0xb8>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000786:	bf00      	nop
 8000788:	37b8      	adds	r7, #184	@ 0xb8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40005400 	.word	0x40005400
 8000794:	40023800 	.word	0x40023800
 8000798:	40020400 	.word	0x40020400

0800079c <main>:
void MX_I2C1_Init(void);
void MX_USART3_UART_Init(void);
uint16_t CRC16_2(uint8_t *, uint8_t);

int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	@ 0x50
 80007a0:	af02      	add	r7, sp, #8
    char str[50];
    uint8_t cmdBuffer[3];
    uint8_t dataBuffer[8];

    HAL_Init();
 80007a2:	f000 fb96 	bl	8000ed2 <HAL_Init>
    MPU_Config();
 80007a6:	f000 f97d 	bl	8000aa4 <MPU_Config>
    SystemClock_Config();
 80007aa:	f000 f8d1 	bl	8000950 <SystemClock_Config>
    MX_GPIO_Init();
 80007ae:	f7ff ff17 	bl	80005e0 <MX_GPIO_Init>
    MX_I2C1_Init();
 80007b2:	f7ff ff53 	bl	800065c <MX_I2C1_Init>
    MX_USART3_UART_Init();
 80007b6:	f000 fad3 	bl	8000d60 <MX_USART3_UART_Init>

    sprintf (str, "\n\rAM2320 I2C DEMO Starting .. .\n\r");
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	495d      	ldr	r1, [pc, #372]	@ (8000934 <main+0x198>)
 80007c0:	4618      	mov	r0, r3
 80007c2:	f004 f88b 	bl	80048dc <siprintf>
    HAL_UART_Transmit (&huart3, (uint8_t*) str, strlen(str), 200);
 80007c6:	f107 0310 	add.w	r3, r7, #16
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fd88 	bl	80002e0 <strlen>
 80007d0:	4603      	mov	r3, r0
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	f107 0110 	add.w	r1, r7, #16
 80007d8:	23c8      	movs	r3, #200	@ 0xc8
 80007da:	4857      	ldr	r0, [pc, #348]	@ (8000938 <main+0x19c>)
 80007dc:	f002 fe7a 	bl	80034d4 <HAL_UART_Transmit>

    cmdBuffer[0] = 0x03;
 80007e0:	2303      	movs	r3, #3
 80007e2:	733b      	strb	r3, [r7, #12]
    cmdBuffer[1] = 0x00;
 80007e4:	2300      	movs	r3, #0
 80007e6:	737b      	strb	r3, [r7, #13]
    cmdBuffer[2] = 0x04;
 80007e8:	2304      	movs	r3, #4
 80007ea:	73bb      	strb	r3, [r7, #14]

    while (1)
    {
        sprintf (str, "Temperature = %4.1f\tHumidity = %4.1f\n\r", t, h);
 80007ec:	4b53      	ldr	r3, [pc, #332]	@ (800093c <main+0x1a0>)
 80007ee:	edd3 7a00 	vldr	s15, [r3]
 80007f2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80007f6:	4b52      	ldr	r3, [pc, #328]	@ (8000940 <main+0x1a4>)
 80007f8:	edd3 7a00 	vldr	s15, [r3]
 80007fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000800:	f107 0010 	add.w	r0, r7, #16
 8000804:	ed8d 7b00 	vstr	d7, [sp]
 8000808:	ec53 2b16 	vmov	r2, r3, d6
 800080c:	494d      	ldr	r1, [pc, #308]	@ (8000944 <main+0x1a8>)
 800080e:	f004 f865 	bl	80048dc <siprintf>
        while(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET) {}
 8000812:	bf00      	nop
 8000814:	4b48      	ldr	r3, [pc, #288]	@ (8000938 <main+0x19c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800081e:	2b40      	cmp	r3, #64	@ 0x40
 8000820:	d1f8      	bne.n	8000814 <main+0x78>
        HAL_UART_Transmit (&huart3, (uint8_t*) str, strlen(str), 200);
 8000822:	f107 0310 	add.w	r3, r7, #16
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fd5a 	bl	80002e0 <strlen>
 800082c:	4603      	mov	r3, r0
 800082e:	b29a      	uxth	r2, r3
 8000830:	f107 0110 	add.w	r1, r7, #16
 8000834:	23c8      	movs	r3, #200	@ 0xc8
 8000836:	4840      	ldr	r0, [pc, #256]	@ (8000938 <main+0x19c>)
 8000838:	f002 fe4c 	bl	80034d4 <HAL_UART_Transmit>

        HAL_Delay(5000);
 800083c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000840:	f000 fba4 	bl	8000f8c <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000844:	2101      	movs	r1, #1
 8000846:	4840      	ldr	r0, [pc, #256]	@ (8000948 <main+0x1ac>)
 8000848:	f000 fee7 	bl	800161a <HAL_GPIO_TogglePin>

        HAL_I2C_Master_Transmit (&hi2c1, 0x5c << 1, cmdBuffer, 3, 200);
 800084c:	f107 020c 	add.w	r2, r7, #12
 8000850:	23c8      	movs	r3, #200	@ 0xc8
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2303      	movs	r3, #3
 8000856:	21b8      	movs	r1, #184	@ 0xb8
 8000858:	483c      	ldr	r0, [pc, #240]	@ (800094c <main+0x1b0>)
 800085a:	f000 ff95 	bl	8001788 <HAL_I2C_Master_Transmit>
        HAL_I2C_Master_Transmit (&hi2c1, 0x5c << 1, cmdBuffer, 3, 200);
 800085e:	f107 020c 	add.w	r2, r7, #12
 8000862:	23c8      	movs	r3, #200	@ 0xc8
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2303      	movs	r3, #3
 8000868:	21b8      	movs	r1, #184	@ 0xb8
 800086a:	4838      	ldr	r0, [pc, #224]	@ (800094c <main+0x1b0>)
 800086c:	f000 ff8c 	bl	8001788 <HAL_I2C_Master_Transmit>

        HAL_Delay(1);
 8000870:	2001      	movs	r0, #1
 8000872:	f000 fb8b 	bl	8000f8c <HAL_Delay>
        HAL_I2C_Master_Receive(&hi2c1, 0x5c << 1, dataBuffer, 8, 200);
 8000876:	1d3a      	adds	r2, r7, #4
 8000878:	23c8      	movs	r3, #200	@ 0xc8
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	2308      	movs	r3, #8
 800087e:	21b8      	movs	r1, #184	@ 0xb8
 8000880:	4832      	ldr	r0, [pc, #200]	@ (800094c <main+0x1b0>)
 8000882:	f001 f899 	bl	80019b8 <HAL_I2C_Master_Receive>

        uint16_t Rcrc = dataBuffer[7] << 8;
 8000886:	7afb      	ldrb	r3, [r7, #11]
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        Rcrc += dataBuffer[6];
 800088e:	7abb      	ldrb	r3, [r7, #10]
 8000890:	461a      	mov	r2, r3
 8000892:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000896:	4413      	add	r3, r2
 8000898:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        if (Rcrc == CRC16_2(dataBuffer, 6)) {
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2106      	movs	r1, #6
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 f8c3 	bl	8000a2c <CRC16_2>
 80008a6:	4603      	mov	r3, r0
 80008a8:	461a      	mov	r2, r3
 80008aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d19c      	bne.n	80007ec <main+0x50>
            uint16_t temperature = ((dataBuffer[4] & 0x7F) << 8) + dataBuffer[5];
 80008b2:	7a3b      	ldrb	r3, [r7, #8]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 80008bc:	b29b      	uxth	r3, r3
 80008be:	7a7a      	ldrb	r2, [r7, #9]
 80008c0:	4413      	add	r3, r2
 80008c2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            t = temperature / 10.0;
 80008c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80008ca:	ee07 3a90 	vmov	s15, r3
 80008ce:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80008d2:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80008d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008de:	4b17      	ldr	r3, [pc, #92]	@ (800093c <main+0x1a0>)
 80008e0:	edc3 7a00 	vstr	s15, [r3]
            t = (((dataBuffer[4] & 0x80) >> 7) == 1) ? (t * (-1)) : t;
 80008e4:	7a3b      	ldrb	r3, [r7, #8]
 80008e6:	09db      	lsrs	r3, r3, #7
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d105      	bne.n	80008fa <main+0x15e>
 80008ee:	4b13      	ldr	r3, [pc, #76]	@ (800093c <main+0x1a0>)
 80008f0:	edd3 7a00 	vldr	s15, [r3]
 80008f4:	eef1 7a67 	vneg.f32	s15, s15
 80008f8:	e002      	b.n	8000900 <main+0x164>
 80008fa:	4b10      	ldr	r3, [pc, #64]	@ (800093c <main+0x1a0>)
 80008fc:	edd3 7a00 	vldr	s15, [r3]
 8000900:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <main+0x1a0>)
 8000902:	edc3 7a00 	vstr	s15, [r3]

            uint16_t humidity = (dataBuffer[2] << 8) + dataBuffer[3];
 8000906:	79bb      	ldrb	r3, [r7, #6]
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	b29b      	uxth	r3, r3
 800090c:	79fa      	ldrb	r2, [r7, #7]
 800090e:	4413      	add	r3, r2
 8000910:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            h = humidity / 10.0;
 8000914:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000918:	ee07 3a90 	vmov	s15, r3
 800091c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000920:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8000924:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000928:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800092c:	4b04      	ldr	r3, [pc, #16]	@ (8000940 <main+0x1a4>)
 800092e:	edc3 7a00 	vstr	s15, [r3]
    {
 8000932:	e75b      	b.n	80007ec <main+0x50>
 8000934:	08006a78 	.word	0x08006a78
 8000938:	20000250 	.word	0x20000250
 800093c:	20000004 	.word	0x20000004
 8000940:	20000000 	.word	0x20000000
 8000944:	08006a9c 	.word	0x08006a9c
 8000948:	40020400 	.word	0x40020400
 800094c:	200001f8 	.word	0x200001f8

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b094      	sub	sp, #80	@ 0x50
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	2234      	movs	r2, #52	@ 0x34
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f004 f81f 	bl	80049a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000974:	4b2b      	ldr	r3, [pc, #172]	@ (8000a24 <SystemClock_Config+0xd4>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000978:	4a2a      	ldr	r2, [pc, #168]	@ (8000a24 <SystemClock_Config+0xd4>)
 800097a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800097e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000980:	4b28      	ldr	r3, [pc, #160]	@ (8000a24 <SystemClock_Config+0xd4>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000984:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800098c:	4b26      	ldr	r3, [pc, #152]	@ (8000a28 <SystemClock_Config+0xd8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a25      	ldr	r2, [pc, #148]	@ (8000a28 <SystemClock_Config+0xd8>)
 8000992:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	4b23      	ldr	r3, [pc, #140]	@ (8000a28 <SystemClock_Config+0xd8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a8:	2301      	movs	r3, #1
 80009aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ac:	2310      	movs	r3, #16
 80009ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b0:	2302      	movs	r3, #2
 80009b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b4:	2300      	movs	r3, #0
 80009b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009b8:	2308      	movs	r3, #8
 80009ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80009bc:	23d8      	movs	r3, #216	@ 0xd8
 80009be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 fc75 	bl	80022c0 <HAL_RCC_OscConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80009dc:	f000 f88e 	bl	8000afc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009e0:	f001 fc1e 	bl	8002220 <HAL_PWREx_EnableOverDrive>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009ea:	f000 f887 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ee:	230f      	movs	r3, #15
 80009f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f2:	2302      	movs	r3, #2
 80009f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a04:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	2107      	movs	r1, #7
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 ff05 	bl	800281c <HAL_RCC_ClockConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000a18:	f000 f870 	bl	8000afc <Error_Handler>
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	3750      	adds	r7, #80	@ 0x50
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40007000 	.word	0x40007000

08000a2c <CRC16_2>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
uint16_t CRC16_2 (uint8_t *ptr, uint8_t length){
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xFFFF;
 8000a38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a3c:	81fb      	strh	r3, [r7, #14]
	uint8_t s = 0x00;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	737b      	strb	r3, [r7, #13]
	while (length -- ) {
 8000a42:	e023      	b.n	8000a8c <CRC16_2+0x60>
		crc ^= *ptr++;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	607a      	str	r2, [r7, #4]
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	89fb      	ldrh	r3, [r7, #14]
 8000a50:	4053      	eors	r3, r2
 8000a52:	81fb      	strh	r3, [r7, #14]
		for(s = 0; s < 8; s++) {
 8000a54:	2300      	movs	r3, #0
 8000a56:	737b      	strb	r3, [r7, #13]
 8000a58:	e015      	b.n	8000a86 <CRC16_2+0x5a>
			if((crc & 0x01) != 0) {
 8000a5a:	89fb      	ldrh	r3, [r7, #14]
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d00a      	beq.n	8000a7a <CRC16_2+0x4e>
				crc >>= 1;
 8000a64:	89fb      	ldrh	r3, [r7, #14]
 8000a66:	085b      	lsrs	r3, r3, #1
 8000a68:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 8000a6a:	89fb      	ldrh	r3, [r7, #14]
 8000a6c:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8000a70:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8000a74:	43db      	mvns	r3, r3
 8000a76:	81fb      	strh	r3, [r7, #14]
 8000a78:	e002      	b.n	8000a80 <CRC16_2+0x54>
			}else crc >>= 1;
 8000a7a:	89fb      	ldrh	r3, [r7, #14]
 8000a7c:	085b      	lsrs	r3, r3, #1
 8000a7e:	81fb      	strh	r3, [r7, #14]
		for(s = 0; s < 8; s++) {
 8000a80:	7b7b      	ldrb	r3, [r7, #13]
 8000a82:	3301      	adds	r3, #1
 8000a84:	737b      	strb	r3, [r7, #13]
 8000a86:	7b7b      	ldrb	r3, [r7, #13]
 8000a88:	2b07      	cmp	r3, #7
 8000a8a:	d9e6      	bls.n	8000a5a <CRC16_2+0x2e>
	while (length -- ) {
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	1e5a      	subs	r2, r3, #1
 8000a90:	70fa      	strb	r2, [r7, #3]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d1d6      	bne.n	8000a44 <CRC16_2+0x18>
		}
	}
	return crc;
 8000a96:	89fb      	ldrh	r3, [r7, #14]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000aaa:	463b      	mov	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ab6:	f000 fb73 	bl	80011a0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000aba:	2301      	movs	r3, #1
 8000abc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ac6:	231f      	movs	r3, #31
 8000ac8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000aca:	2387      	movs	r3, #135	@ 0x87
 8000acc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ada:	2301      	movs	r3, #1
 8000adc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 fb91 	bl	8001210 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000aee:	2004      	movs	r0, #4
 8000af0:	f000 fb6e 	bl	80011d0 <HAL_MPU_Enable>

}
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <Error_Handler+0x8>

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	4a0e      	ldr	r2, [pc, #56]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2a:	4a08      	ldr	r2, [pc, #32]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <NMI_Handler+0x4>

08000b58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <MemManage_Handler+0x4>

08000b68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba6:	f000 f9d1 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}

08000bae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  return 1;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <_kill>:

int _kill(int pid, int sig)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bc8:	f003 ff3e 	bl	8004a48 <__errno>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2216      	movs	r2, #22
 8000bd0:	601a      	str	r2, [r3, #0]
  return -1;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <_exit>:

void _exit (int status)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000be6:	f04f 31ff 	mov.w	r1, #4294967295
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ffe7 	bl	8000bbe <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <_exit+0x12>

08000bf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	e00a      	b.n	8000c1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c06:	f3af 8000 	nop.w
 8000c0a:	4601      	mov	r1, r0
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	60ba      	str	r2, [r7, #8]
 8000c12:	b2ca      	uxtb	r2, r1
 8000c14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	dbf0      	blt.n	8000c06 <_read+0x12>
  }

  return len;
 8000c24:	687b      	ldr	r3, [r7, #4]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	e009      	b.n	8000c54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	60ba      	str	r2, [r7, #8]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	dbf1      	blt.n	8000c40 <_write+0x12>
  }
  return len;
 8000c5c:	687b      	ldr	r3, [r7, #4]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <_close>:

int _close(int file)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <_isatty>:

int _isatty(int file)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd8:	4a14      	ldr	r2, [pc, #80]	@ (8000d2c <_sbrk+0x5c>)
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <_sbrk+0x60>)
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce4:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cec:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <_sbrk+0x64>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	@ (8000d38 <_sbrk+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf2:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d207      	bcs.n	8000d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d00:	f003 fea2 	bl	8004a48 <__errno>
 8000d04:	4603      	mov	r3, r0
 8000d06:	220c      	movs	r2, #12
 8000d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	e009      	b.n	8000d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d16:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a05      	ldr	r2, [pc, #20]	@ (8000d34 <_sbrk+0x64>)
 8000d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20080000 	.word	0x20080000
 8000d30:	00000400 	.word	0x00000400
 8000d34:	2000024c 	.word	0x2000024c
 8000d38:	20000428 	.word	0x20000428

08000d3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <SystemInit+0x20>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d46:	4a05      	ldr	r2, [pc, #20]	@ (8000d5c <SystemInit+0x20>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d64:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <MX_USART3_UART_Init+0x58>)
 8000d66:	4a15      	ldr	r2, [pc, #84]	@ (8000dbc <MX_USART3_UART_Init+0x5c>)
 8000d68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <MX_USART3_UART_Init+0x58>)
 8000d6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d72:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <MX_USART3_UART_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <MX_USART3_UART_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <MX_USART3_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d84:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <MX_USART3_UART_Init+0x58>)
 8000d86:	220c      	movs	r2, #12
 8000d88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000db8 <MX_USART3_UART_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d90:	4b09      	ldr	r3, [pc, #36]	@ (8000db8 <MX_USART3_UART_Init+0x58>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d96:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <MX_USART3_UART_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <MX_USART3_UART_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000da2:	4805      	ldr	r0, [pc, #20]	@ (8000db8 <MX_USART3_UART_Init+0x58>)
 8000da4:	f002 fb48 	bl	8003438 <HAL_UART_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000dae:	f7ff fea5 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000250 	.word	0x20000250
 8000dbc:	40004800 	.word	0x40004800

08000dc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b0ae      	sub	sp, #184	@ 0xb8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2290      	movs	r2, #144	@ 0x90
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f003 fdde 	bl	80049a2 <memset>
  if(uartHandle->Instance==USART3)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a22      	ldr	r2, [pc, #136]	@ (8000e74 <HAL_UART_MspInit+0xb4>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d13c      	bne.n	8000e6a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000df0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000df4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000df6:	2300      	movs	r3, #0
 8000df8:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f001 fef2 	bl	8002be8 <HAL_RCCEx_PeriphCLKConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e0a:	f7ff fe77 	bl	8000afc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <HAL_UART_MspInit+0xb8>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e12:	4a19      	ldr	r2, [pc, #100]	@ (8000e78 <HAL_UART_MspInit+0xb8>)
 8000e14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e1a:	4b17      	ldr	r3, [pc, #92]	@ (8000e78 <HAL_UART_MspInit+0xb8>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e26:	4b14      	ldr	r3, [pc, #80]	@ (8000e78 <HAL_UART_MspInit+0xb8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	4a13      	ldr	r2, [pc, #76]	@ (8000e78 <HAL_UART_MspInit+0xb8>)
 8000e2c:	f043 0308 	orr.w	r3, r3, #8
 8000e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e32:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <HAL_UART_MspInit+0xb8>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	f003 0308 	and.w	r3, r3, #8
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e58:	2307      	movs	r3, #7
 8000e5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e5e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	@ (8000e7c <HAL_UART_MspInit+0xbc>)
 8000e66:	f000 fa13 	bl	8001290 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	37b8      	adds	r7, #184	@ 0xb8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40004800 	.word	0x40004800
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020c00 	.word	0x40020c00

08000e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e84:	f7ff ff5a 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e88:	480c      	ldr	r0, [pc, #48]	@ (8000ebc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e8a:	490d      	ldr	r1, [pc, #52]	@ (8000ec0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e90:	e002      	b.n	8000e98 <LoopCopyDataInit>

08000e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e96:	3304      	adds	r3, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e9c:	d3f9      	bcc.n	8000e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ecc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea4:	e001      	b.n	8000eaa <LoopFillZerobss>

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea8:	3204      	adds	r2, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000eae:	f003 fdd1 	bl	8004a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb2:	f7ff fc73 	bl	800079c <main>
  bx  lr    
 8000eb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eb8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000ec4:	08006e60 	.word	0x08006e60
  ldr r2, =_sbss
 8000ec8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000ecc:	20000428 	.word	0x20000428

08000ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC_IRQHandler>

08000ed2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed6:	2003      	movs	r0, #3
 8000ed8:	f000 f92e 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000edc:	200f      	movs	r0, #15
 8000ede:	f000 f805 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee2:	f7ff fe11 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f93b 	bl	8001186 <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f000 f911 	bl	800114e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	@ (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000010 	.word	0x20000010
 8000f48:	2000000c 	.word	0x2000000c

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000010 	.word	0x20000010
 8000f70:	200002d8 	.word	0x200002d8

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	@ (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	200002d8 	.word	0x200002d8

08000f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff ffee 	bl	8000f74 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa4:	d005      	beq.n	8000fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <HAL_Delay+0x44>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fb2:	bf00      	nop
 8000fb4:	f7ff ffde 	bl	8000f74 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8f7      	bhi.n	8000fb4 <HAL_Delay+0x28>
  {
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000010 	.word	0x20000010

08000fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <__NVIC_SetPriorityGrouping+0x40>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ffc:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000ffe:	4313      	orrs	r3, r2
 8001000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	@ (8001014 <__NVIC_SetPriorityGrouping+0x40>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	60d3      	str	r3, [r2, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00
 8001018:	05fa0000 	.word	0x05fa0000

0800101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	2b00      	cmp	r3, #0
 800104a:	db0a      	blt.n	8001062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	b2da      	uxtb	r2, r3
 8001050:	490c      	ldr	r1, [pc, #48]	@ (8001084 <__NVIC_SetPriority+0x4c>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	0112      	lsls	r2, r2, #4
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	440b      	add	r3, r1
 800105c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001060:	e00a      	b.n	8001078 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4908      	ldr	r1, [pc, #32]	@ (8001088 <__NVIC_SetPriority+0x50>)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	3b04      	subs	r3, #4
 8001070:	0112      	lsls	r2, r2, #4
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	440b      	add	r3, r1
 8001076:	761a      	strb	r2, [r3, #24]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000e100 	.word	0xe000e100
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	@ 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f1c3 0307 	rsb	r3, r3, #7
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	bf28      	it	cs
 80010aa:	2304      	movcs	r3, #4
 80010ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3304      	adds	r3, #4
 80010b2:	2b06      	cmp	r3, #6
 80010b4:	d902      	bls.n	80010bc <NVIC_EncodePriority+0x30>
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3b03      	subs	r3, #3
 80010ba:	e000      	b.n	80010be <NVIC_EncodePriority+0x32>
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	f04f 32ff 	mov.w	r2, #4294967295
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	401a      	ands	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d4:	f04f 31ff 	mov.w	r1, #4294967295
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa01 f303 	lsl.w	r3, r1, r3
 80010de:	43d9      	mvns	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	4313      	orrs	r3, r2
         );
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3724      	adds	r7, #36	@ 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001104:	d301      	bcc.n	800110a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001106:	2301      	movs	r3, #1
 8001108:	e00f      	b.n	800112a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110a:	4a0a      	ldr	r2, [pc, #40]	@ (8001134 <SysTick_Config+0x40>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001112:	210f      	movs	r1, #15
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f7ff ff8e 	bl	8001038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800111c:	4b05      	ldr	r3, [pc, #20]	@ (8001134 <SysTick_Config+0x40>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001122:	4b04      	ldr	r3, [pc, #16]	@ (8001134 <SysTick_Config+0x40>)
 8001124:	2207      	movs	r2, #7
 8001126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	e000e010 	.word	0xe000e010

08001138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff47 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001160:	f7ff ff5c 	bl	800101c <__NVIC_GetPriorityGrouping>
 8001164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	6978      	ldr	r0, [r7, #20]
 800116c:	f7ff ff8e 	bl	800108c <NVIC_EncodePriority>
 8001170:	4602      	mov	r2, r0
 8001172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff5d 	bl	8001038 <__NVIC_SetPriority>
}
 800117e:	bf00      	nop
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ffb0 	bl	80010f4 <SysTick_Config>
 8001194:	4603      	mov	r3, r0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80011a4:	f3bf 8f5f 	dmb	sy
}
 80011a8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80011aa:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <HAL_MPU_Disable+0x28>)
 80011ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ae:	4a06      	ldr	r2, [pc, #24]	@ (80011c8 <HAL_MPU_Disable+0x28>)
 80011b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011b4:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80011b6:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <HAL_MPU_Disable+0x2c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	605a      	str	r2, [r3, #4]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000ed00 	.word	0xe000ed00
 80011cc:	e000ed90 	.word	0xe000ed90

080011d0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80011d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001208 <HAL_MPU_Enable+0x38>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80011e2:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <HAL_MPU_Enable+0x3c>)
 80011e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e6:	4a09      	ldr	r2, [pc, #36]	@ (800120c <HAL_MPU_Enable+0x3c>)
 80011e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ec:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80011ee:	f3bf 8f4f 	dsb	sy
}
 80011f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f4:	f3bf 8f6f 	isb	sy
}
 80011f8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed90 	.word	0xe000ed90
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	785a      	ldrb	r2, [r3, #1]
 800121c:	4b1b      	ldr	r3, [pc, #108]	@ (800128c <HAL_MPU_ConfigRegion+0x7c>)
 800121e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001220:	4b1a      	ldr	r3, [pc, #104]	@ (800128c <HAL_MPU_ConfigRegion+0x7c>)
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	4a19      	ldr	r2, [pc, #100]	@ (800128c <HAL_MPU_ConfigRegion+0x7c>)
 8001226:	f023 0301 	bic.w	r3, r3, #1
 800122a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800122c:	4a17      	ldr	r2, [pc, #92]	@ (800128c <HAL_MPU_ConfigRegion+0x7c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	7b1b      	ldrb	r3, [r3, #12]
 8001238:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	7adb      	ldrb	r3, [r3, #11]
 800123e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001240:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	7a9b      	ldrb	r3, [r3, #10]
 8001246:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001248:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7b5b      	ldrb	r3, [r3, #13]
 800124e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001250:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	7b9b      	ldrb	r3, [r3, #14]
 8001256:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001258:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	7bdb      	ldrb	r3, [r3, #15]
 800125e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001260:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	7a5b      	ldrb	r3, [r3, #9]
 8001266:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001268:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	7a1b      	ldrb	r3, [r3, #8]
 800126e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001270:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	7812      	ldrb	r2, [r2, #0]
 8001276:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001278:	4a04      	ldr	r2, [pc, #16]	@ (800128c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800127a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800127c:	6113      	str	r3, [r2, #16]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000ed90 	.word	0xe000ed90

08001290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	@ 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
 80012ae:	e175      	b.n	800159c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80012b0:	2201      	movs	r2, #1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	f040 8164 	bne.w	8001596 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d005      	beq.n	80012e6 <HAL_GPIO_Init+0x56>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d130      	bne.n	8001348 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	2203      	movs	r2, #3
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	68da      	ldr	r2, [r3, #12]
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800131c:	2201      	movs	r2, #1
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	091b      	lsrs	r3, r3, #4
 8001332:	f003 0201 	and.w	r2, r3, #1
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b03      	cmp	r3, #3
 8001352:	d017      	beq.n	8001384 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	2203      	movs	r2, #3
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d123      	bne.n	80013d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	08da      	lsrs	r2, r3, #3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3208      	adds	r2, #8
 8001398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	220f      	movs	r2, #15
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	691a      	ldr	r2, [r3, #16]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	08da      	lsrs	r2, r3, #3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3208      	adds	r2, #8
 80013d2:	69b9      	ldr	r1, [r7, #24]
 80013d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	2203      	movs	r2, #3
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 0203 	and.w	r2, r3, #3
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 80be 	beq.w	8001596 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141a:	4b66      	ldr	r3, [pc, #408]	@ (80015b4 <HAL_GPIO_Init+0x324>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141e:	4a65      	ldr	r2, [pc, #404]	@ (80015b4 <HAL_GPIO_Init+0x324>)
 8001420:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001424:	6453      	str	r3, [r2, #68]	@ 0x44
 8001426:	4b63      	ldr	r3, [pc, #396]	@ (80015b4 <HAL_GPIO_Init+0x324>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001432:	4a61      	ldr	r2, [pc, #388]	@ (80015b8 <HAL_GPIO_Init+0x328>)
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	089b      	lsrs	r3, r3, #2
 8001438:	3302      	adds	r3, #2
 800143a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	220f      	movs	r2, #15
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a58      	ldr	r2, [pc, #352]	@ (80015bc <HAL_GPIO_Init+0x32c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d037      	beq.n	80014ce <HAL_GPIO_Init+0x23e>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a57      	ldr	r2, [pc, #348]	@ (80015c0 <HAL_GPIO_Init+0x330>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d031      	beq.n	80014ca <HAL_GPIO_Init+0x23a>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a56      	ldr	r2, [pc, #344]	@ (80015c4 <HAL_GPIO_Init+0x334>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d02b      	beq.n	80014c6 <HAL_GPIO_Init+0x236>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a55      	ldr	r2, [pc, #340]	@ (80015c8 <HAL_GPIO_Init+0x338>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d025      	beq.n	80014c2 <HAL_GPIO_Init+0x232>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a54      	ldr	r2, [pc, #336]	@ (80015cc <HAL_GPIO_Init+0x33c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d01f      	beq.n	80014be <HAL_GPIO_Init+0x22e>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a53      	ldr	r2, [pc, #332]	@ (80015d0 <HAL_GPIO_Init+0x340>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d019      	beq.n	80014ba <HAL_GPIO_Init+0x22a>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a52      	ldr	r2, [pc, #328]	@ (80015d4 <HAL_GPIO_Init+0x344>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d013      	beq.n	80014b6 <HAL_GPIO_Init+0x226>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a51      	ldr	r2, [pc, #324]	@ (80015d8 <HAL_GPIO_Init+0x348>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d00d      	beq.n	80014b2 <HAL_GPIO_Init+0x222>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a50      	ldr	r2, [pc, #320]	@ (80015dc <HAL_GPIO_Init+0x34c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d007      	beq.n	80014ae <HAL_GPIO_Init+0x21e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4f      	ldr	r2, [pc, #316]	@ (80015e0 <HAL_GPIO_Init+0x350>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d101      	bne.n	80014aa <HAL_GPIO_Init+0x21a>
 80014a6:	2309      	movs	r3, #9
 80014a8:	e012      	b.n	80014d0 <HAL_GPIO_Init+0x240>
 80014aa:	230a      	movs	r3, #10
 80014ac:	e010      	b.n	80014d0 <HAL_GPIO_Init+0x240>
 80014ae:	2308      	movs	r3, #8
 80014b0:	e00e      	b.n	80014d0 <HAL_GPIO_Init+0x240>
 80014b2:	2307      	movs	r3, #7
 80014b4:	e00c      	b.n	80014d0 <HAL_GPIO_Init+0x240>
 80014b6:	2306      	movs	r3, #6
 80014b8:	e00a      	b.n	80014d0 <HAL_GPIO_Init+0x240>
 80014ba:	2305      	movs	r3, #5
 80014bc:	e008      	b.n	80014d0 <HAL_GPIO_Init+0x240>
 80014be:	2304      	movs	r3, #4
 80014c0:	e006      	b.n	80014d0 <HAL_GPIO_Init+0x240>
 80014c2:	2303      	movs	r3, #3
 80014c4:	e004      	b.n	80014d0 <HAL_GPIO_Init+0x240>
 80014c6:	2302      	movs	r3, #2
 80014c8:	e002      	b.n	80014d0 <HAL_GPIO_Init+0x240>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <HAL_GPIO_Init+0x240>
 80014ce:	2300      	movs	r3, #0
 80014d0:	69fa      	ldr	r2, [r7, #28]
 80014d2:	f002 0203 	and.w	r2, r2, #3
 80014d6:	0092      	lsls	r2, r2, #2
 80014d8:	4093      	lsls	r3, r2
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80014e0:	4935      	ldr	r1, [pc, #212]	@ (80015b8 <HAL_GPIO_Init+0x328>)
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	089b      	lsrs	r3, r3, #2
 80014e6:	3302      	adds	r3, #2
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ee:	4b3d      	ldr	r3, [pc, #244]	@ (80015e4 <HAL_GPIO_Init+0x354>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001512:	4a34      	ldr	r2, [pc, #208]	@ (80015e4 <HAL_GPIO_Init+0x354>)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001518:	4b32      	ldr	r3, [pc, #200]	@ (80015e4 <HAL_GPIO_Init+0x354>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800153c:	4a29      	ldr	r2, [pc, #164]	@ (80015e4 <HAL_GPIO_Init+0x354>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001542:	4b28      	ldr	r3, [pc, #160]	@ (80015e4 <HAL_GPIO_Init+0x354>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001566:	4a1f      	ldr	r2, [pc, #124]	@ (80015e4 <HAL_GPIO_Init+0x354>)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800156c:	4b1d      	ldr	r3, [pc, #116]	@ (80015e4 <HAL_GPIO_Init+0x354>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001590:	4a14      	ldr	r2, [pc, #80]	@ (80015e4 <HAL_GPIO_Init+0x354>)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3301      	adds	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	2b0f      	cmp	r3, #15
 80015a0:	f67f ae86 	bls.w	80012b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	3724      	adds	r7, #36	@ 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40013800 	.word	0x40013800
 80015bc:	40020000 	.word	0x40020000
 80015c0:	40020400 	.word	0x40020400
 80015c4:	40020800 	.word	0x40020800
 80015c8:	40020c00 	.word	0x40020c00
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40021400 	.word	0x40021400
 80015d4:	40021800 	.word	0x40021800
 80015d8:	40021c00 	.word	0x40021c00
 80015dc:	40022000 	.word	0x40022000
 80015e0:	40022400 	.word	0x40022400
 80015e4:	40013c00 	.word	0x40013c00

080015e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	807b      	strh	r3, [r7, #2]
 80015f4:	4613      	mov	r3, r2
 80015f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015f8:	787b      	ldrb	r3, [r7, #1]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015fe:	887a      	ldrh	r2, [r7, #2]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001604:	e003      	b.n	800160e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001606:	887b      	ldrh	r3, [r7, #2]
 8001608:	041a      	lsls	r2, r3, #16
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	619a      	str	r2, [r3, #24]
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800161a:	b480      	push	{r7}
 800161c:	b085      	sub	sp, #20
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	460b      	mov	r3, r1
 8001624:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800162c:	887a      	ldrh	r2, [r7, #2]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4013      	ands	r3, r2
 8001632:	041a      	lsls	r2, r3, #16
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	43d9      	mvns	r1, r3
 8001638:	887b      	ldrh	r3, [r7, #2]
 800163a:	400b      	ands	r3, r1
 800163c:	431a      	orrs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	619a      	str	r2, [r3, #24]
}
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e08b      	b.n	800177a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d106      	bne.n	800167c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff f830 	bl	80006dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2224      	movs	r2, #36	@ 0x24
 8001680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0201 	bic.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d107      	bne.n	80016ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	e006      	b.n	80016d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80016d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d108      	bne.n	80016f2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	e007      	b.n	8001702 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001700:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6859      	ldr	r1, [r3, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b1d      	ldr	r3, [pc, #116]	@ (8001784 <HAL_I2C_Init+0x134>)
 800170e:	430b      	orrs	r3, r1
 8001710:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001720:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691a      	ldr	r2, [r3, #16]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69d9      	ldr	r1, [r3, #28]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a1a      	ldr	r2, [r3, #32]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0201 	orr.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2220      	movs	r2, #32
 8001766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	02008000 	.word	0x02008000

08001788 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af02      	add	r7, sp, #8
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	607a      	str	r2, [r7, #4]
 8001792:	461a      	mov	r2, r3
 8001794:	460b      	mov	r3, r1
 8001796:	817b      	strh	r3, [r7, #10]
 8001798:	4613      	mov	r3, r2
 800179a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b20      	cmp	r3, #32
 80017a6:	f040 80fd 	bne.w	80019a4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d101      	bne.n	80017b8 <HAL_I2C_Master_Transmit+0x30>
 80017b4:	2302      	movs	r3, #2
 80017b6:	e0f6      	b.n	80019a6 <HAL_I2C_Master_Transmit+0x21e>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017c0:	f7ff fbd8 	bl	8000f74 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2319      	movs	r3, #25
 80017cc:	2201      	movs	r2, #1
 80017ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 fa0a 	bl	8001bec <I2C_WaitOnFlagUntilTimeout>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e0e1      	b.n	80019a6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2221      	movs	r2, #33	@ 0x21
 80017e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2210      	movs	r2, #16
 80017ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	893a      	ldrh	r2, [r7, #8]
 8001802:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800180e:	b29b      	uxth	r3, r3
 8001810:	2bff      	cmp	r3, #255	@ 0xff
 8001812:	d906      	bls.n	8001822 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	22ff      	movs	r2, #255	@ 0xff
 8001818:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800181a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	e007      	b.n	8001832 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001826:	b29a      	uxth	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800182c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001830:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001836:	2b00      	cmp	r3, #0
 8001838:	d024      	beq.n	8001884 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183e:	781a      	ldrb	r2, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001854:	b29b      	uxth	r3, r3
 8001856:	3b01      	subs	r3, #1
 8001858:	b29a      	uxth	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001862:	3b01      	subs	r3, #1
 8001864:	b29a      	uxth	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800186e:	b2db      	uxtb	r3, r3
 8001870:	3301      	adds	r3, #1
 8001872:	b2da      	uxtb	r2, r3
 8001874:	8979      	ldrh	r1, [r7, #10]
 8001876:	4b4e      	ldr	r3, [pc, #312]	@ (80019b0 <HAL_I2C_Master_Transmit+0x228>)
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f000 fc05 	bl	800208c <I2C_TransferConfig>
 8001882:	e066      	b.n	8001952 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001888:	b2da      	uxtb	r2, r3
 800188a:	8979      	ldrh	r1, [r7, #10]
 800188c:	4b48      	ldr	r3, [pc, #288]	@ (80019b0 <HAL_I2C_Master_Transmit+0x228>)
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 fbfa 	bl	800208c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001898:	e05b      	b.n	8001952 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	6a39      	ldr	r1, [r7, #32]
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f000 f9fd 	bl	8001c9e <I2C_WaitOnTXISFlagUntilTimeout>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e07b      	b.n	80019a6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b2:	781a      	ldrb	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	3b01      	subs	r3, #1
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018d6:	3b01      	subs	r3, #1
 80018d8:	b29a      	uxth	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d034      	beq.n	8001952 <HAL_I2C_Master_Transmit+0x1ca>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d130      	bne.n	8001952 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	2200      	movs	r2, #0
 80018f8:	2180      	movs	r1, #128	@ 0x80
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f000 f976 	bl	8001bec <I2C_WaitOnFlagUntilTimeout>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e04d      	b.n	80019a6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800190e:	b29b      	uxth	r3, r3
 8001910:	2bff      	cmp	r3, #255	@ 0xff
 8001912:	d90e      	bls.n	8001932 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	22ff      	movs	r2, #255	@ 0xff
 8001918:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800191e:	b2da      	uxtb	r2, r3
 8001920:	8979      	ldrh	r1, [r7, #10]
 8001922:	2300      	movs	r3, #0
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 fbae 	bl	800208c <I2C_TransferConfig>
 8001930:	e00f      	b.n	8001952 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001936:	b29a      	uxth	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001940:	b2da      	uxtb	r2, r3
 8001942:	8979      	ldrh	r1, [r7, #10]
 8001944:	2300      	movs	r3, #0
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f000 fb9d 	bl	800208c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001956:	b29b      	uxth	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d19e      	bne.n	800189a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	6a39      	ldr	r1, [r7, #32]
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f000 f9e3 	bl	8001d2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e01a      	b.n	80019a6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2220      	movs	r2, #32
 8001976:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6859      	ldr	r1, [r3, #4]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <HAL_I2C_Master_Transmit+0x22c>)
 8001984:	400b      	ands	r3, r1
 8001986:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2220      	movs	r2, #32
 800198c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	e000      	b.n	80019a6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80019a4:	2302      	movs	r3, #2
  }
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	80002000 	.word	0x80002000
 80019b4:	fe00e800 	.word	0xfe00e800

080019b8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af02      	add	r7, sp, #8
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	461a      	mov	r2, r3
 80019c4:	460b      	mov	r3, r1
 80019c6:	817b      	strh	r3, [r7, #10]
 80019c8:	4613      	mov	r3, r2
 80019ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b20      	cmp	r3, #32
 80019d6:	f040 80db 	bne.w	8001b90 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_I2C_Master_Receive+0x30>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e0d4      	b.n	8001b92 <HAL_I2C_Master_Receive+0x1da>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019f0:	f7ff fac0 	bl	8000f74 <HAL_GetTick>
 80019f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2319      	movs	r3, #25
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 f8f2 	bl	8001bec <I2C_WaitOnFlagUntilTimeout>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e0bf      	b.n	8001b92 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2222      	movs	r2, #34	@ 0x22
 8001a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2210      	movs	r2, #16
 8001a1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	893a      	ldrh	r2, [r7, #8]
 8001a32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2200      	movs	r2, #0
 8001a38:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	2bff      	cmp	r3, #255	@ 0xff
 8001a42:	d90e      	bls.n	8001a62 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2201      	movs	r2, #1
 8001a48:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	8979      	ldrh	r1, [r7, #10]
 8001a52:	4b52      	ldr	r3, [pc, #328]	@ (8001b9c <HAL_I2C_Master_Receive+0x1e4>)
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f000 fb16 	bl	800208c <I2C_TransferConfig>
 8001a60:	e06d      	b.n	8001b3e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	8979      	ldrh	r1, [r7, #10]
 8001a74:	4b49      	ldr	r3, [pc, #292]	@ (8001b9c <HAL_I2C_Master_Receive+0x1e4>)
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 fb05 	bl	800208c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001a82:	e05c      	b.n	8001b3e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	6a39      	ldr	r1, [r7, #32]
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f000 f993 	bl	8001db4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e07c      	b.n	8001b92 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d034      	beq.n	8001b3e <HAL_I2C_Master_Receive+0x186>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d130      	bne.n	8001b3e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2180      	movs	r1, #128	@ 0x80
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 f880 	bl	8001bec <I2C_WaitOnFlagUntilTimeout>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e04d      	b.n	8001b92 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	2bff      	cmp	r3, #255	@ 0xff
 8001afe:	d90e      	bls.n	8001b1e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	22ff      	movs	r2, #255	@ 0xff
 8001b04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	8979      	ldrh	r1, [r7, #10]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f000 fab8 	bl	800208c <I2C_TransferConfig>
 8001b1c:	e00f      	b.n	8001b3e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	8979      	ldrh	r1, [r7, #10]
 8001b30:	2300      	movs	r3, #0
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 faa7 	bl	800208c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d19d      	bne.n	8001a84 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	6a39      	ldr	r1, [r7, #32]
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 f8ed 	bl	8001d2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e01a      	b.n	8001b92 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2220      	movs	r2, #32
 8001b62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6859      	ldr	r1, [r3, #4]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <HAL_I2C_Master_Receive+0x1e8>)
 8001b70:	400b      	ands	r3, r1
 8001b72:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2220      	movs	r2, #32
 8001b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	e000      	b.n	8001b92 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001b90:	2302      	movs	r3, #2
  }
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	80002400 	.word	0x80002400
 8001ba0:	fe00e800 	.word	0xfe00e800

08001ba4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d103      	bne.n	8001bc2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d007      	beq.n	8001be0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699a      	ldr	r2, [r3, #24]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	619a      	str	r2, [r3, #24]
  }
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bfc:	e03b      	b.n	8001c76 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	6839      	ldr	r1, [r7, #0]
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f962 	bl	8001ecc <I2C_IsErrorOccurred>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e041      	b.n	8001c96 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c18:	d02d      	beq.n	8001c76 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c1a:	f7ff f9ab 	bl	8000f74 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d302      	bcc.n	8001c30 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d122      	bne.n	8001c76 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699a      	ldr	r2, [r3, #24]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	bf0c      	ite	eq
 8001c40:	2301      	moveq	r3, #1
 8001c42:	2300      	movne	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d113      	bne.n	8001c76 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c52:	f043 0220 	orr.w	r2, r3, #32
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00f      	b.n	8001c96 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	699a      	ldr	r2, [r3, #24]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	bf0c      	ite	eq
 8001c86:	2301      	moveq	r3, #1
 8001c88:	2300      	movne	r3, #0
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d0b4      	beq.n	8001bfe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b084      	sub	sp, #16
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001caa:	e033      	b.n	8001d14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	68b9      	ldr	r1, [r7, #8]
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 f90b 	bl	8001ecc <I2C_IsErrorOccurred>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e031      	b.n	8001d24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc6:	d025      	beq.n	8001d14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cc8:	f7ff f954 	bl	8000f74 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d302      	bcc.n	8001cde <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d11a      	bne.n	8001d14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d013      	beq.n	8001d14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf0:	f043 0220 	orr.w	r2, r3, #32
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e007      	b.n	8001d24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d1c4      	bne.n	8001cac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d38:	e02f      	b.n	8001d9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 f8c4 	bl	8001ecc <I2C_IsErrorOccurred>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e02d      	b.n	8001daa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d4e:	f7ff f911 	bl	8000f74 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d302      	bcc.n	8001d64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d11a      	bne.n	8001d9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	2b20      	cmp	r3, #32
 8001d70:	d013      	beq.n	8001d9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	f043 0220 	orr.w	r2, r3, #32
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2220      	movs	r2, #32
 8001d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e007      	b.n	8001daa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f003 0320 	and.w	r3, r3, #32
 8001da4:	2b20      	cmp	r3, #32
 8001da6:	d1c8      	bne.n	8001d3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001dc4:	e071      	b.n	8001eaa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 f87e 	bl	8001ecc <I2C_IsErrorOccurred>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f003 0320 	and.w	r3, r3, #32
 8001de4:	2b20      	cmp	r3, #32
 8001de6:	d13b      	bne.n	8001e60 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d138      	bne.n	8001e60 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d105      	bne.n	8001e08 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b10      	cmp	r3, #16
 8001e14:	d121      	bne.n	8001e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2210      	movs	r2, #16
 8001e1c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2204      	movs	r2, #4
 8001e22:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6859      	ldr	r1, [r3, #4]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	4b24      	ldr	r3, [pc, #144]	@ (8001ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8001e38:	400b      	ands	r3, r1
 8001e3a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	75fb      	strb	r3, [r7, #23]
 8001e58:	e002      	b.n	8001e60 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001e60:	f7ff f888 	bl	8000f74 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d302      	bcc.n	8001e76 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d119      	bne.n	8001eaa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8001e76:	7dfb      	ldrb	r3, [r7, #23]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d116      	bne.n	8001eaa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d00f      	beq.n	8001eaa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8e:	f043 0220 	orr.w	r2, r3, #32
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2220      	movs	r2, #32
 8001e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d002      	beq.n	8001ebe <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8001eb8:	7dfb      	ldrb	r3, [r7, #23]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d083      	beq.n	8001dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8001ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	fe00e800 	.word	0xfe00e800

08001ecc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	@ 0x28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d068      	beq.n	8001fca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2210      	movs	r2, #16
 8001efe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f00:	e049      	b.n	8001f96 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f08:	d045      	beq.n	8001f96 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f0a:	f7ff f833 	bl	8000f74 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d302      	bcc.n	8001f20 <I2C_IsErrorOccurred+0x54>
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d13a      	bne.n	8001f96 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f42:	d121      	bne.n	8001f88 <I2C_IsErrorOccurred+0xbc>
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f4a:	d01d      	beq.n	8001f88 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001f4c:	7cfb      	ldrb	r3, [r7, #19]
 8001f4e:	2b20      	cmp	r3, #32
 8001f50:	d01a      	beq.n	8001f88 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f62:	f7ff f807 	bl	8000f74 <HAL_GetTick>
 8001f66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f68:	e00e      	b.n	8001f88 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f6a:	f7ff f803 	bl	8000f74 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b19      	cmp	r3, #25
 8001f76:	d907      	bls.n	8001f88 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	f043 0320 	orr.w	r3, r3, #32
 8001f7e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001f86:	e006      	b.n	8001f96 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	f003 0320 	and.w	r3, r3, #32
 8001f92:	2b20      	cmp	r3, #32
 8001f94:	d1e9      	bne.n	8001f6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b20      	cmp	r3, #32
 8001fa2:	d003      	beq.n	8001fac <I2C_IsErrorOccurred+0xe0>
 8001fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0aa      	beq.n	8001f02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001fac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d103      	bne.n	8001fbc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	f043 0304 	orr.w	r3, r3, #4
 8001fc2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00b      	beq.n	8001ff4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	f043 0308 	orr.w	r3, r3, #8
 8002004:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800200e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00b      	beq.n	8002038 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	f043 0302 	orr.w	r3, r3, #2
 8002026:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002030:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002038:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800203c:	2b00      	cmp	r3, #0
 800203e:	d01c      	beq.n	800207a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f7ff fdaf 	bl	8001ba4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6859      	ldr	r1, [r3, #4]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b0d      	ldr	r3, [pc, #52]	@ (8002088 <I2C_IsErrorOccurred+0x1bc>)
 8002052:	400b      	ands	r3, r1
 8002054:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	431a      	orrs	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2220      	movs	r2, #32
 8002066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800207a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800207e:	4618      	mov	r0, r3
 8002080:	3728      	adds	r7, #40	@ 0x28
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	fe00e800 	.word	0xfe00e800

0800208c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800208c:	b480      	push	{r7}
 800208e:	b087      	sub	sp, #28
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	607b      	str	r3, [r7, #4]
 8002096:	460b      	mov	r3, r1
 8002098:	817b      	strh	r3, [r7, #10]
 800209a:	4613      	mov	r3, r2
 800209c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800209e:	897b      	ldrh	r3, [r7, #10]
 80020a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020a4:	7a7b      	ldrb	r3, [r7, #9]
 80020a6:	041b      	lsls	r3, r3, #16
 80020a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	0d5b      	lsrs	r3, r3, #21
 80020c6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80020ca:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <I2C_TransferConfig+0x60>)
 80020cc:	430b      	orrs	r3, r1
 80020ce:	43db      	mvns	r3, r3
 80020d0:	ea02 0103 	and.w	r1, r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80020de:	bf00      	nop
 80020e0:	371c      	adds	r7, #28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	03ff63ff 	.word	0x03ff63ff

080020f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b20      	cmp	r3, #32
 8002104:	d138      	bne.n	8002178 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002110:	2302      	movs	r3, #2
 8002112:	e032      	b.n	800217a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2224      	movs	r2, #36	@ 0x24
 8002120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002142:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6819      	ldr	r1, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2220      	movs	r2, #32
 8002168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	e000      	b.n	800217a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002178:	2302      	movs	r3, #2
  }
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002186:	b480      	push	{r7}
 8002188:	b085      	sub	sp, #20
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b20      	cmp	r3, #32
 800219a:	d139      	bne.n	8002210 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e033      	b.n	8002212 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2224      	movs	r2, #36	@ 0x24
 80021b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0201 	bic.w	r2, r2, #1
 80021c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80021d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0201 	orr.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	e000      	b.n	8002212 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002210:	2302      	movs	r3, #2
  }
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800222a:	4b23      	ldr	r3, [pc, #140]	@ (80022b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	4a22      	ldr	r2, [pc, #136]	@ (80022b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002234:	6413      	str	r3, [r2, #64]	@ 0x40
 8002236:	4b20      	ldr	r3, [pc, #128]	@ (80022b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002242:	4b1e      	ldr	r3, [pc, #120]	@ (80022bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a1d      	ldr	r2, [pc, #116]	@ (80022bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002248:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800224c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800224e:	f7fe fe91 	bl	8000f74 <HAL_GetTick>
 8002252:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002254:	e009      	b.n	800226a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002256:	f7fe fe8d 	bl	8000f74 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002264:	d901      	bls.n	800226a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e022      	b.n	80022b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800226a:	4b14      	ldr	r3, [pc, #80]	@ (80022bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002272:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002276:	d1ee      	bne.n	8002256 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002278:	4b10      	ldr	r3, [pc, #64]	@ (80022bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0f      	ldr	r2, [pc, #60]	@ (80022bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800227e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002282:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002284:	f7fe fe76 	bl	8000f74 <HAL_GetTick>
 8002288:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800228a:	e009      	b.n	80022a0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800228c:	f7fe fe72 	bl	8000f74 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800229a:	d901      	bls.n	80022a0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e007      	b.n	80022b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022a0:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_PWREx_EnableOverDrive+0x9c>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80022ac:	d1ee      	bne.n	800228c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40007000 	.word	0x40007000

080022c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80022c8:	2300      	movs	r3, #0
 80022ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e29b      	b.n	800280e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 8087 	beq.w	80023f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022e4:	4b96      	ldr	r3, [pc, #600]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 030c 	and.w	r3, r3, #12
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d00c      	beq.n	800230a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f0:	4b93      	ldr	r3, [pc, #588]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 030c 	and.w	r3, r3, #12
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d112      	bne.n	8002322 <HAL_RCC_OscConfig+0x62>
 80022fc:	4b90      	ldr	r3, [pc, #576]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002304:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002308:	d10b      	bne.n	8002322 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230a:	4b8d      	ldr	r3, [pc, #564]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d06c      	beq.n	80023f0 <HAL_RCC_OscConfig+0x130>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d168      	bne.n	80023f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e275      	b.n	800280e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800232a:	d106      	bne.n	800233a <HAL_RCC_OscConfig+0x7a>
 800232c:	4b84      	ldr	r3, [pc, #528]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a83      	ldr	r2, [pc, #524]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 8002332:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	e02e      	b.n	8002398 <HAL_RCC_OscConfig+0xd8>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0x9c>
 8002342:	4b7f      	ldr	r3, [pc, #508]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a7e      	ldr	r2, [pc, #504]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 8002348:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	4b7c      	ldr	r3, [pc, #496]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a7b      	ldr	r2, [pc, #492]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 8002354:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e01d      	b.n	8002398 <HAL_RCC_OscConfig+0xd8>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0xc0>
 8002366:	4b76      	ldr	r3, [pc, #472]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a75      	ldr	r2, [pc, #468]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 800236c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b73      	ldr	r3, [pc, #460]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a72      	ldr	r2, [pc, #456]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e00b      	b.n	8002398 <HAL_RCC_OscConfig+0xd8>
 8002380:	4b6f      	ldr	r3, [pc, #444]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a6e      	ldr	r2, [pc, #440]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 8002386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b6c      	ldr	r3, [pc, #432]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a6b      	ldr	r2, [pc, #428]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 8002392:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d013      	beq.n	80023c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe fde8 	bl	8000f74 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a8:	f7fe fde4 	bl	8000f74 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	@ 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e229      	b.n	800280e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	4b61      	ldr	r3, [pc, #388]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0xe8>
 80023c6:	e014      	b.n	80023f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7fe fdd4 	bl	8000f74 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d0:	f7fe fdd0 	bl	8000f74 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	@ 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e215      	b.n	800280e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	4b57      	ldr	r3, [pc, #348]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x110>
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d069      	beq.n	80024d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023fe:	4b50      	ldr	r3, [pc, #320]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240a:	4b4d      	ldr	r3, [pc, #308]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b08      	cmp	r3, #8
 8002414:	d11c      	bne.n	8002450 <HAL_RCC_OscConfig+0x190>
 8002416:	4b4a      	ldr	r3, [pc, #296]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d116      	bne.n	8002450 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002422:	4b47      	ldr	r3, [pc, #284]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_RCC_OscConfig+0x17a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d001      	beq.n	800243a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e1e9      	b.n	800280e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243a:	4b41      	ldr	r3, [pc, #260]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	493d      	ldr	r1, [pc, #244]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244e:	e040      	b.n	80024d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d023      	beq.n	80024a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002458:	4b39      	ldr	r3, [pc, #228]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a38      	ldr	r2, [pc, #224]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe fd86 	bl	8000f74 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246c:	f7fe fd82 	bl	8000f74 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e1c7      	b.n	800280e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247e:	4b30      	ldr	r3, [pc, #192]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b2d      	ldr	r3, [pc, #180]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4929      	ldr	r1, [pc, #164]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
 800249e:	e018      	b.n	80024d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a0:	4b27      	ldr	r3, [pc, #156]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a26      	ldr	r2, [pc, #152]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 80024a6:	f023 0301 	bic.w	r3, r3, #1
 80024aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7fe fd62 	bl	8000f74 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b4:	f7fe fd5e 	bl	8000f74 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e1a3      	b.n	800280e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d038      	beq.n	8002550 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d019      	beq.n	800251a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e6:	4b16      	ldr	r3, [pc, #88]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 80024e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ea:	4a15      	ldr	r2, [pc, #84]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f2:	f7fe fd3f 	bl	8000f74 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024fa:	f7fe fd3b 	bl	8000f74 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e180      	b.n	800280e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250c:	4b0c      	ldr	r3, [pc, #48]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 800250e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCC_OscConfig+0x23a>
 8002518:	e01a      	b.n	8002550 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800251a:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 800251c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800251e:	4a08      	ldr	r2, [pc, #32]	@ (8002540 <HAL_RCC_OscConfig+0x280>)
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002526:	f7fe fd25 	bl	8000f74 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252c:	e00a      	b.n	8002544 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800252e:	f7fe fd21 	bl	8000f74 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d903      	bls.n	8002544 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e166      	b.n	800280e <HAL_RCC_OscConfig+0x54e>
 8002540:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002544:	4b92      	ldr	r3, [pc, #584]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 8002546:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1ee      	bne.n	800252e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80a4 	beq.w	80026a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800255e:	4b8c      	ldr	r3, [pc, #560]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10d      	bne.n	8002586 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800256a:	4b89      	ldr	r3, [pc, #548]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	4a88      	ldr	r2, [pc, #544]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 8002570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002574:	6413      	str	r3, [r2, #64]	@ 0x40
 8002576:	4b86      	ldr	r3, [pc, #536]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002582:	2301      	movs	r3, #1
 8002584:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002586:	4b83      	ldr	r3, [pc, #524]	@ (8002794 <HAL_RCC_OscConfig+0x4d4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258e:	2b00      	cmp	r3, #0
 8002590:	d118      	bne.n	80025c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002592:	4b80      	ldr	r3, [pc, #512]	@ (8002794 <HAL_RCC_OscConfig+0x4d4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a7f      	ldr	r2, [pc, #508]	@ (8002794 <HAL_RCC_OscConfig+0x4d4>)
 8002598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800259c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259e:	f7fe fce9 	bl	8000f74 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a6:	f7fe fce5 	bl	8000f74 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b64      	cmp	r3, #100	@ 0x64
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e12a      	b.n	800280e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b8:	4b76      	ldr	r3, [pc, #472]	@ (8002794 <HAL_RCC_OscConfig+0x4d4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0f0      	beq.n	80025a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d106      	bne.n	80025da <HAL_RCC_OscConfig+0x31a>
 80025cc:	4b70      	ldr	r3, [pc, #448]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 80025ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d0:	4a6f      	ldr	r2, [pc, #444]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d8:	e02d      	b.n	8002636 <HAL_RCC_OscConfig+0x376>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10c      	bne.n	80025fc <HAL_RCC_OscConfig+0x33c>
 80025e2:	4b6b      	ldr	r3, [pc, #428]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e6:	4a6a      	ldr	r2, [pc, #424]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 80025e8:	f023 0301 	bic.w	r3, r3, #1
 80025ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ee:	4b68      	ldr	r3, [pc, #416]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f2:	4a67      	ldr	r2, [pc, #412]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 80025f4:	f023 0304 	bic.w	r3, r3, #4
 80025f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80025fa:	e01c      	b.n	8002636 <HAL_RCC_OscConfig+0x376>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2b05      	cmp	r3, #5
 8002602:	d10c      	bne.n	800261e <HAL_RCC_OscConfig+0x35e>
 8002604:	4b62      	ldr	r3, [pc, #392]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002608:	4a61      	ldr	r2, [pc, #388]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 800260a:	f043 0304 	orr.w	r3, r3, #4
 800260e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002610:	4b5f      	ldr	r3, [pc, #380]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 8002612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002614:	4a5e      	ldr	r2, [pc, #376]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	6713      	str	r3, [r2, #112]	@ 0x70
 800261c:	e00b      	b.n	8002636 <HAL_RCC_OscConfig+0x376>
 800261e:	4b5c      	ldr	r3, [pc, #368]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 8002620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002622:	4a5b      	ldr	r2, [pc, #364]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	6713      	str	r3, [r2, #112]	@ 0x70
 800262a:	4b59      	ldr	r3, [pc, #356]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262e:	4a58      	ldr	r2, [pc, #352]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d015      	beq.n	800266a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263e:	f7fe fc99 	bl	8000f74 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002644:	e00a      	b.n	800265c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002646:	f7fe fc95 	bl	8000f74 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002654:	4293      	cmp	r3, r2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e0d8      	b.n	800280e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265c:	4b4c      	ldr	r3, [pc, #304]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 800265e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0ee      	beq.n	8002646 <HAL_RCC_OscConfig+0x386>
 8002668:	e014      	b.n	8002694 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe fc83 	bl	8000f74 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fc7f 	bl	8000f74 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e0c2      	b.n	800280e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002688:	4b41      	ldr	r3, [pc, #260]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1ee      	bne.n	8002672 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002694:	7dfb      	ldrb	r3, [r7, #23]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d105      	bne.n	80026a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800269a:	4b3d      	ldr	r3, [pc, #244]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	4a3c      	ldr	r2, [pc, #240]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 80026a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026a4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 80ae 	beq.w	800280c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026b0:	4b37      	ldr	r3, [pc, #220]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 030c 	and.w	r3, r3, #12
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d06d      	beq.n	8002798 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d14b      	bne.n	800275c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c4:	4b32      	ldr	r3, [pc, #200]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a31      	ldr	r2, [pc, #196]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 80026ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d0:	f7fe fc50 	bl	8000f74 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d8:	f7fe fc4c 	bl	8000f74 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e091      	b.n	800280e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ea:	4b29      	ldr	r3, [pc, #164]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69da      	ldr	r2, [r3, #28]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002704:	019b      	lsls	r3, r3, #6
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270c:	085b      	lsrs	r3, r3, #1
 800270e:	3b01      	subs	r3, #1
 8002710:	041b      	lsls	r3, r3, #16
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002718:	061b      	lsls	r3, r3, #24
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002720:	071b      	lsls	r3, r3, #28
 8002722:	491b      	ldr	r1, [pc, #108]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 8002724:	4313      	orrs	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002728:	4b19      	ldr	r3, [pc, #100]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a18      	ldr	r2, [pc, #96]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 800272e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002734:	f7fe fc1e 	bl	8000f74 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273c:	f7fe fc1a 	bl	8000f74 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e05f      	b.n	800280e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274e:	4b10      	ldr	r3, [pc, #64]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x47c>
 800275a:	e057      	b.n	800280c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275c:	4b0c      	ldr	r3, [pc, #48]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a0b      	ldr	r2, [pc, #44]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 8002762:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7fe fc04 	bl	8000f74 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002770:	f7fe fc00 	bl	8000f74 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e045      	b.n	800280e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002782:	4b03      	ldr	r3, [pc, #12]	@ (8002790 <HAL_RCC_OscConfig+0x4d0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x4b0>
 800278e:	e03d      	b.n	800280c <HAL_RCC_OscConfig+0x54c>
 8002790:	40023800 	.word	0x40023800
 8002794:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002798:	4b1f      	ldr	r3, [pc, #124]	@ (8002818 <HAL_RCC_OscConfig+0x558>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d030      	beq.n	8002808 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d129      	bne.n	8002808 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d122      	bne.n	8002808 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027c8:	4013      	ands	r3, r2
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d119      	bne.n	8002808 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027de:	085b      	lsrs	r3, r3, #1
 80027e0:	3b01      	subs	r3, #1
 80027e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d10f      	bne.n	8002808 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d107      	bne.n	8002808 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800

0800281c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e0d0      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002834:	4b6a      	ldr	r3, [pc, #424]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 030f 	and.w	r3, r3, #15
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d910      	bls.n	8002864 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	4b67      	ldr	r3, [pc, #412]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 020f 	bic.w	r2, r3, #15
 800284a:	4965      	ldr	r1, [pc, #404]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b63      	ldr	r3, [pc, #396]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0b8      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800287c:	4b59      	ldr	r3, [pc, #356]	@ (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4a58      	ldr	r2, [pc, #352]	@ (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002882:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002886:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002894:	4b53      	ldr	r3, [pc, #332]	@ (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a52      	ldr	r2, [pc, #328]	@ (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 800289a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800289e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a0:	4b50      	ldr	r3, [pc, #320]	@ (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	494d      	ldr	r1, [pc, #308]	@ (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d040      	beq.n	8002940 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	4b47      	ldr	r3, [pc, #284]	@ (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d115      	bne.n	80028fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e07f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d107      	bne.n	80028ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028de:	4b41      	ldr	r3, [pc, #260]	@ (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d109      	bne.n	80028fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e073      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ee:	4b3d      	ldr	r3, [pc, #244]	@ (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e06b      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fe:	4b39      	ldr	r3, [pc, #228]	@ (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f023 0203 	bic.w	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4936      	ldr	r1, [pc, #216]	@ (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 800290c:	4313      	orrs	r3, r2
 800290e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002910:	f7fe fb30 	bl	8000f74 <HAL_GetTick>
 8002914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002916:	e00a      	b.n	800292e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002918:	f7fe fb2c 	bl	8000f74 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002926:	4293      	cmp	r3, r2
 8002928:	d901      	bls.n	800292e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e053      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292e:	4b2d      	ldr	r3, [pc, #180]	@ (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 020c 	and.w	r2, r3, #12
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	429a      	cmp	r2, r3
 800293e:	d1eb      	bne.n	8002918 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002940:	4b27      	ldr	r3, [pc, #156]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 030f 	and.w	r3, r3, #15
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d210      	bcs.n	8002970 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294e:	4b24      	ldr	r3, [pc, #144]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 020f 	bic.w	r2, r3, #15
 8002956:	4922      	ldr	r1, [pc, #136]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	4b20      	ldr	r3, [pc, #128]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e032      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800297c:	4b19      	ldr	r3, [pc, #100]	@ (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4916      	ldr	r1, [pc, #88]	@ (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800299a:	4b12      	ldr	r3, [pc, #72]	@ (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	490e      	ldr	r1, [pc, #56]	@ (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ae:	f000 f821 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 80029b2:	4602      	mov	r2, r0
 80029b4:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	490a      	ldr	r1, [pc, #40]	@ (80029e8 <HAL_RCC_ClockConfig+0x1cc>)
 80029c0:	5ccb      	ldrb	r3, [r1, r3]
 80029c2:	fa22 f303 	lsr.w	r3, r2, r3
 80029c6:	4a09      	ldr	r2, [pc, #36]	@ (80029ec <HAL_RCC_ClockConfig+0x1d0>)
 80029c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ca:	4b09      	ldr	r3, [pc, #36]	@ (80029f0 <HAL_RCC_ClockConfig+0x1d4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe fa8c 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40023c00 	.word	0x40023c00
 80029e4:	40023800 	.word	0x40023800
 80029e8:	08006ac4 	.word	0x08006ac4
 80029ec:	20000008 	.word	0x20000008
 80029f0:	2000000c 	.word	0x2000000c

080029f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f8:	b090      	sub	sp, #64	@ 0x40
 80029fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a00:	2300      	movs	r3, #0
 8002a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a04:	2300      	movs	r3, #0
 8002a06:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a0c:	4b59      	ldr	r3, [pc, #356]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d00d      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0x40>
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	f200 80a1 	bhi.w	8002b60 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0x34>
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d003      	beq.n	8002a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a26:	e09b      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a28:	4b53      	ldr	r3, [pc, #332]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a2c:	e09b      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a2e:	4b53      	ldr	r3, [pc, #332]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a32:	e098      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a34:	4b4f      	ldr	r3, [pc, #316]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a3c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a3e:	4b4d      	ldr	r3, [pc, #308]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d028      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	099b      	lsrs	r3, r3, #6
 8002a50:	2200      	movs	r2, #0
 8002a52:	623b      	str	r3, [r7, #32]
 8002a54:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4b47      	ldr	r3, [pc, #284]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a60:	fb03 f201 	mul.w	r2, r3, r1
 8002a64:	2300      	movs	r3, #0
 8002a66:	fb00 f303 	mul.w	r3, r0, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	4a43      	ldr	r2, [pc, #268]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a6e:	fba0 1202 	umull	r1, r2, r0, r2
 8002a72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a74:	460a      	mov	r2, r1
 8002a76:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002a78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a7a:	4413      	add	r3, r2
 8002a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a80:	2200      	movs	r2, #0
 8002a82:	61bb      	str	r3, [r7, #24]
 8002a84:	61fa      	str	r2, [r7, #28]
 8002a86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a8e:	f7fd fc2f 	bl	80002f0 <__aeabi_uldivmod>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4613      	mov	r3, r2
 8002a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a9a:	e053      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a9c:	4b35      	ldr	r3, [pc, #212]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	099b      	lsrs	r3, r3, #6
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	617a      	str	r2, [r7, #20]
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002aae:	f04f 0b00 	mov.w	fp, #0
 8002ab2:	4652      	mov	r2, sl
 8002ab4:	465b      	mov	r3, fp
 8002ab6:	f04f 0000 	mov.w	r0, #0
 8002aba:	f04f 0100 	mov.w	r1, #0
 8002abe:	0159      	lsls	r1, r3, #5
 8002ac0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ac4:	0150      	lsls	r0, r2, #5
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	ebb2 080a 	subs.w	r8, r2, sl
 8002ace:	eb63 090b 	sbc.w	r9, r3, fp
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ade:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ae2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ae6:	ebb2 0408 	subs.w	r4, r2, r8
 8002aea:	eb63 0509 	sbc.w	r5, r3, r9
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	00eb      	lsls	r3, r5, #3
 8002af8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002afc:	00e2      	lsls	r2, r4, #3
 8002afe:	4614      	mov	r4, r2
 8002b00:	461d      	mov	r5, r3
 8002b02:	eb14 030a 	adds.w	r3, r4, sl
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	eb45 030b 	adc.w	r3, r5, fp
 8002b0c:	607b      	str	r3, [r7, #4]
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	f04f 0300 	mov.w	r3, #0
 8002b16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	028b      	lsls	r3, r1, #10
 8002b1e:	4621      	mov	r1, r4
 8002b20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b24:	4621      	mov	r1, r4
 8002b26:	028a      	lsls	r2, r1, #10
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b2e:	2200      	movs	r2, #0
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	60fa      	str	r2, [r7, #12]
 8002b34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b38:	f7fd fbda 	bl	80002f0 <__aeabi_uldivmod>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4613      	mov	r3, r2
 8002b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b44:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	0c1b      	lsrs	r3, r3, #16
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002b54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b5e:	e002      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b60:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b62:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3740      	adds	r7, #64	@ 0x40
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
 8002b78:	00f42400 	.word	0x00f42400
 8002b7c:	017d7840 	.word	0x017d7840

08002b80 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b84:	4b03      	ldr	r3, [pc, #12]	@ (8002b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b86:	681b      	ldr	r3, [r3, #0]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20000008 	.word	0x20000008

08002b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b9c:	f7ff fff0 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	0a9b      	lsrs	r3, r3, #10
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	4903      	ldr	r1, [pc, #12]	@ (8002bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bae:	5ccb      	ldrb	r3, [r1, r3]
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	08006ad4 	.word	0x08006ad4

08002bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bc4:	f7ff ffdc 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	4b05      	ldr	r3, [pc, #20]	@ (8002be0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	0b5b      	lsrs	r3, r3, #13
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	4903      	ldr	r1, [pc, #12]	@ (8002be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bd6:	5ccb      	ldrb	r3, [r1, r3]
 8002bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40023800 	.word	0x40023800
 8002be4:	08006ad4 	.word	0x08006ad4

08002be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d012      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c10:	4b69      	ldr	r3, [pc, #420]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a68      	ldr	r2, [pc, #416]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c16:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002c1a:	6093      	str	r3, [r2, #8]
 8002c1c:	4b66      	ldr	r3, [pc, #408]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c24:	4964      	ldr	r1, [pc, #400]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c32:	2301      	movs	r3, #1
 8002c34:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d017      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c42:	4b5d      	ldr	r3, [pc, #372]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c48:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c50:	4959      	ldr	r1, [pc, #356]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c60:	d101      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c62:	2301      	movs	r3, #1
 8002c64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d017      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c7e:	4b4e      	ldr	r3, [pc, #312]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c84:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	494a      	ldr	r1, [pc, #296]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002caa:	2301      	movs	r3, #1
 8002cac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 808b 	beq.w	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd0:	4a39      	ldr	r2, [pc, #228]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cd8:	4b37      	ldr	r3, [pc, #220]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ce4:	4b35      	ldr	r3, [pc, #212]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a34      	ldr	r2, [pc, #208]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf0:	f7fe f940 	bl	8000f74 <HAL_GetTick>
 8002cf4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf8:	f7fe f93c 	bl	8000f74 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	@ 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e38f      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d0a:	4b2c      	ldr	r3, [pc, #176]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d16:	4b28      	ldr	r3, [pc, #160]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d1e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d035      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d02e      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d34:	4b20      	ldr	r3, [pc, #128]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d3c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d42:	4a1d      	ldr	r2, [pc, #116]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d48:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4e:	4a1a      	ldr	r2, [pc, #104]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d54:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d56:	4a18      	ldr	r2, [pc, #96]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d5c:	4b16      	ldr	r3, [pc, #88]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d114      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fe f904 	bl	8000f74 <HAL_GetTick>
 8002d6c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6e:	e00a      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d70:	f7fe f900 	bl	8000f74 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e351      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d86:	4b0c      	ldr	r3, [pc, #48]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0ee      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d9e:	d111      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002da0:	4b05      	ldr	r3, [pc, #20]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002dac:	4b04      	ldr	r3, [pc, #16]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002dae:	400b      	ands	r3, r1
 8002db0:	4901      	ldr	r1, [pc, #4]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
 8002db6:	e00b      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40007000 	.word	0x40007000
 8002dc0:	0ffffcff 	.word	0x0ffffcff
 8002dc4:	4bac      	ldr	r3, [pc, #688]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4aab      	ldr	r2, [pc, #684]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dca:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002dce:	6093      	str	r3, [r2, #8]
 8002dd0:	4ba9      	ldr	r3, [pc, #676]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ddc:	49a6      	ldr	r1, [pc, #664]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d010      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002dee:	4ba2      	ldr	r3, [pc, #648]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002df4:	4aa0      	ldr	r2, [pc, #640]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dfa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002dfe:	4b9e      	ldr	r3, [pc, #632]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e00:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e08:	499b      	ldr	r1, [pc, #620]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e1c:	4b96      	ldr	r3, [pc, #600]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e22:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e2a:	4993      	ldr	r1, [pc, #588]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e3e:	4b8e      	ldr	r3, [pc, #568]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e44:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e4c:	498a      	ldr	r1, [pc, #552]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e60:	4b85      	ldr	r3, [pc, #532]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e6e:	4982      	ldr	r1, [pc, #520]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e82:	4b7d      	ldr	r3, [pc, #500]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e88:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e90:	4979      	ldr	r1, [pc, #484]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ea4:	4b74      	ldr	r3, [pc, #464]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eaa:	f023 0203 	bic.w	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb2:	4971      	ldr	r1, [pc, #452]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ec6:	4b6c      	ldr	r3, [pc, #432]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ecc:	f023 020c 	bic.w	r2, r3, #12
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed4:	4968      	ldr	r1, [pc, #416]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ee8:	4b63      	ldr	r3, [pc, #396]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eee:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef6:	4960      	ldr	r1, [pc, #384]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f0a:	4b5b      	ldr	r3, [pc, #364]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f10:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f18:	4957      	ldr	r1, [pc, #348]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f2c:	4b52      	ldr	r3, [pc, #328]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f32:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3a:	494f      	ldr	r1, [pc, #316]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f54:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5c:	4946      	ldr	r1, [pc, #280]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f70:	4b41      	ldr	r3, [pc, #260]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f76:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7e:	493e      	ldr	r1, [pc, #248]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f92:	4b39      	ldr	r3, [pc, #228]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f98:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fa0:	4935      	ldr	r1, [pc, #212]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fb4:	4b30      	ldr	r3, [pc, #192]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fba:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fc2:	492d      	ldr	r1, [pc, #180]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d011      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002fd6:	4b28      	ldr	r3, [pc, #160]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fdc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fe4:	4924      	ldr	r1, [pc, #144]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ff0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003006:	2301      	movs	r3, #1
 8003008:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003016:	4b18      	ldr	r3, [pc, #96]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800301c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003024:	4914      	ldr	r1, [pc, #80]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00b      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003038:	4b0f      	ldr	r3, [pc, #60]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800303e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003048:	490b      	ldr	r1, [pc, #44]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00f      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800305c:	4b06      	ldr	r3, [pc, #24]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003062:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800306c:	4902      	ldr	r1, [pc, #8]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003074:	e002      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00b      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003088:	4b8a      	ldr	r3, [pc, #552]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800308a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800308e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003098:	4986      	ldr	r1, [pc, #536]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00b      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80030ac:	4b81      	ldr	r3, [pc, #516]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030b2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030bc:	497d      	ldr	r1, [pc, #500]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d006      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 80d6 	beq.w	8003284 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030d8:	4b76      	ldr	r3, [pc, #472]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a75      	ldr	r2, [pc, #468]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80030e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e4:	f7fd ff46 	bl	8000f74 <HAL_GetTick>
 80030e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030ec:	f7fd ff42 	bl	8000f74 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b64      	cmp	r3, #100	@ 0x64
 80030f8:	d901      	bls.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e195      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030fe:	4b6d      	ldr	r3, [pc, #436]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d021      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800311a:	2b00      	cmp	r3, #0
 800311c:	d11d      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800311e:	4b65      	ldr	r3, [pc, #404]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003120:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003124:	0c1b      	lsrs	r3, r3, #16
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800312c:	4b61      	ldr	r3, [pc, #388]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800312e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003132:	0e1b      	lsrs	r3, r3, #24
 8003134:	f003 030f 	and.w	r3, r3, #15
 8003138:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	019a      	lsls	r2, r3, #6
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	041b      	lsls	r3, r3, #16
 8003144:	431a      	orrs	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	061b      	lsls	r3, r3, #24
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	071b      	lsls	r3, r3, #28
 8003152:	4958      	ldr	r1, [pc, #352]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d004      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800316a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800316e:	d00a      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003178:	2b00      	cmp	r3, #0
 800317a:	d02e      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003180:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003184:	d129      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003186:	4b4b      	ldr	r3, [pc, #300]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003188:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800318c:	0c1b      	lsrs	r3, r3, #16
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003194:	4b47      	ldr	r3, [pc, #284]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003196:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800319a:	0f1b      	lsrs	r3, r3, #28
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	019a      	lsls	r2, r3, #6
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	041b      	lsls	r3, r3, #16
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	061b      	lsls	r3, r3, #24
 80031b4:	431a      	orrs	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	071b      	lsls	r3, r3, #28
 80031ba:	493e      	ldr	r1, [pc, #248]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031c2:	4b3c      	ldr	r3, [pc, #240]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031c8:	f023 021f 	bic.w	r2, r3, #31
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d0:	3b01      	subs	r3, #1
 80031d2:	4938      	ldr	r1, [pc, #224]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d01d      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031e6:	4b33      	ldr	r3, [pc, #204]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031ec:	0e1b      	lsrs	r3, r3, #24
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031f4:	4b2f      	ldr	r3, [pc, #188]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031fa:	0f1b      	lsrs	r3, r3, #28
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	019a      	lsls	r2, r3, #6
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	041b      	lsls	r3, r3, #16
 800320e:	431a      	orrs	r2, r3
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	061b      	lsls	r3, r3, #24
 8003214:	431a      	orrs	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	071b      	lsls	r3, r3, #28
 800321a:	4926      	ldr	r1, [pc, #152]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d011      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	019a      	lsls	r2, r3, #6
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	041b      	lsls	r3, r3, #16
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	061b      	lsls	r3, r3, #24
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	071b      	lsls	r3, r3, #28
 800324a:	491a      	ldr	r1, [pc, #104]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003252:	4b18      	ldr	r3, [pc, #96]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a17      	ldr	r2, [pc, #92]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003258:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800325c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800325e:	f7fd fe89 	bl	8000f74 <HAL_GetTick>
 8003262:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003264:	e008      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003266:	f7fd fe85 	bl	8000f74 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b64      	cmp	r3, #100	@ 0x64
 8003272:	d901      	bls.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e0d8      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003278:	4b0e      	ldr	r3, [pc, #56]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0f0      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	2b01      	cmp	r3, #1
 8003288:	f040 80ce 	bne.w	8003428 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800328c:	4b09      	ldr	r3, [pc, #36]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a08      	ldr	r2, [pc, #32]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003292:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003298:	f7fd fe6c 	bl	8000f74 <HAL_GetTick>
 800329c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800329e:	e00b      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032a0:	f7fd fe68 	bl	8000f74 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	@ 0x64
 80032ac:	d904      	bls.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e0bb      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80032b2:	bf00      	nop
 80032b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032b8:	4b5e      	ldr	r3, [pc, #376]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032c4:	d0ec      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d009      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d02e      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d12a      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032ee:	4b51      	ldr	r3, [pc, #324]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f4:	0c1b      	lsrs	r3, r3, #16
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032fc:	4b4d      	ldr	r3, [pc, #308]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003302:	0f1b      	lsrs	r3, r3, #28
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	019a      	lsls	r2, r3, #6
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	041b      	lsls	r3, r3, #16
 8003314:	431a      	orrs	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	061b      	lsls	r3, r3, #24
 800331c:	431a      	orrs	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	071b      	lsls	r3, r3, #28
 8003322:	4944      	ldr	r1, [pc, #272]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800332a:	4b42      	ldr	r3, [pc, #264]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800332c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003330:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003338:	3b01      	subs	r3, #1
 800333a:	021b      	lsls	r3, r3, #8
 800333c:	493d      	ldr	r1, [pc, #244]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d022      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003354:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003358:	d11d      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800335a:	4b36      	ldr	r3, [pc, #216]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003360:	0e1b      	lsrs	r3, r3, #24
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003368:	4b32      	ldr	r3, [pc, #200]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800336e:	0f1b      	lsrs	r3, r3, #28
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	019a      	lsls	r2, r3, #6
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	041b      	lsls	r3, r3, #16
 8003382:	431a      	orrs	r2, r3
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	061b      	lsls	r3, r3, #24
 8003388:	431a      	orrs	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	071b      	lsls	r3, r3, #28
 800338e:	4929      	ldr	r1, [pc, #164]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d028      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033a2:	4b24      	ldr	r3, [pc, #144]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a8:	0e1b      	lsrs	r3, r3, #24
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033b0:	4b20      	ldr	r3, [pc, #128]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b6:	0c1b      	lsrs	r3, r3, #16
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	019a      	lsls	r2, r3, #6
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	041b      	lsls	r3, r3, #16
 80033c8:	431a      	orrs	r2, r3
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	061b      	lsls	r3, r3, #24
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	071b      	lsls	r3, r3, #28
 80033d6:	4917      	ldr	r1, [pc, #92]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80033de:	4b15      	ldr	r3, [pc, #84]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ec:	4911      	ldr	r1, [pc, #68]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80033f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a0e      	ldr	r2, [pc, #56]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003400:	f7fd fdb8 	bl	8000f74 <HAL_GetTick>
 8003404:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003406:	e008      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003408:	f7fd fdb4 	bl	8000f74 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	@ 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e007      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800341a:	4b06      	ldr	r3, [pc, #24]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003422:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003426:	d1ef      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3720      	adds	r7, #32
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40023800 	.word	0x40023800

08003438 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e040      	b.n	80034cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800344e:	2b00      	cmp	r3, #0
 8003450:	d106      	bne.n	8003460 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7fd fcb0 	bl	8000dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2224      	movs	r2, #36	@ 0x24
 8003464:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0201 	bic.w	r2, r2, #1
 8003474:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fb16 	bl	8003ab0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f8af 	bl	80035e8 <UART_SetConfig>
 800348a:	4603      	mov	r3, r0
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e01b      	b.n	80034cc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fb95 	bl	8003bf4 <UART_CheckIdleState>
 80034ca:	4603      	mov	r3, r0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08a      	sub	sp, #40	@ 0x28
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	d177      	bne.n	80035dc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <HAL_UART_Transmit+0x24>
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e070      	b.n	80035de <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2221      	movs	r2, #33	@ 0x21
 8003508:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800350a:	f7fd fd33 	bl	8000f74 <HAL_GetTick>
 800350e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	88fa      	ldrh	r2, [r7, #6]
 8003514:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	88fa      	ldrh	r2, [r7, #6]
 800351c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003528:	d108      	bne.n	800353c <HAL_UART_Transmit+0x68>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d104      	bne.n	800353c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	61bb      	str	r3, [r7, #24]
 800353a:	e003      	b.n	8003544 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003540:	2300      	movs	r3, #0
 8003542:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003544:	e02f      	b.n	80035a6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2200      	movs	r2, #0
 800354e:	2180      	movs	r1, #128	@ 0x80
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 fbf7 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d004      	beq.n	8003566 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e03b      	b.n	80035de <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10b      	bne.n	8003584 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800357a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	3302      	adds	r3, #2
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	e007      	b.n	8003594 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	781a      	ldrb	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3301      	adds	r3, #1
 8003592:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800359a:	b29b      	uxth	r3, r3
 800359c:	3b01      	subs	r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1c9      	bne.n	8003546 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2200      	movs	r2, #0
 80035ba:	2140      	movs	r1, #64	@ 0x40
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 fbc1 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d004      	beq.n	80035d2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e005      	b.n	80035de <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2220      	movs	r2, #32
 80035d6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	e000      	b.n	80035de <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80035dc:	2302      	movs	r3, #2
  }
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3720      	adds	r7, #32
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	4ba6      	ldr	r3, [pc, #664]	@ (80038ac <UART_SetConfig+0x2c4>)
 8003614:	4013      	ands	r3, r2
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6812      	ldr	r2, [r2, #0]
 800361a:	6979      	ldr	r1, [r7, #20]
 800361c:	430b      	orrs	r3, r1
 800361e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	4313      	orrs	r3, r2
 8003644:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	430a      	orrs	r2, r1
 8003658:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a94      	ldr	r2, [pc, #592]	@ (80038b0 <UART_SetConfig+0x2c8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d120      	bne.n	80036a6 <UART_SetConfig+0xbe>
 8003664:	4b93      	ldr	r3, [pc, #588]	@ (80038b4 <UART_SetConfig+0x2cc>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	2b03      	cmp	r3, #3
 8003670:	d816      	bhi.n	80036a0 <UART_SetConfig+0xb8>
 8003672:	a201      	add	r2, pc, #4	@ (adr r2, 8003678 <UART_SetConfig+0x90>)
 8003674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003678:	08003689 	.word	0x08003689
 800367c:	08003695 	.word	0x08003695
 8003680:	0800368f 	.word	0x0800368f
 8003684:	0800369b 	.word	0x0800369b
 8003688:	2301      	movs	r3, #1
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	e150      	b.n	8003930 <UART_SetConfig+0x348>
 800368e:	2302      	movs	r3, #2
 8003690:	77fb      	strb	r3, [r7, #31]
 8003692:	e14d      	b.n	8003930 <UART_SetConfig+0x348>
 8003694:	2304      	movs	r3, #4
 8003696:	77fb      	strb	r3, [r7, #31]
 8003698:	e14a      	b.n	8003930 <UART_SetConfig+0x348>
 800369a:	2308      	movs	r3, #8
 800369c:	77fb      	strb	r3, [r7, #31]
 800369e:	e147      	b.n	8003930 <UART_SetConfig+0x348>
 80036a0:	2310      	movs	r3, #16
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e144      	b.n	8003930 <UART_SetConfig+0x348>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a83      	ldr	r2, [pc, #524]	@ (80038b8 <UART_SetConfig+0x2d0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d132      	bne.n	8003716 <UART_SetConfig+0x12e>
 80036b0:	4b80      	ldr	r3, [pc, #512]	@ (80038b4 <UART_SetConfig+0x2cc>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b6:	f003 030c 	and.w	r3, r3, #12
 80036ba:	2b0c      	cmp	r3, #12
 80036bc:	d828      	bhi.n	8003710 <UART_SetConfig+0x128>
 80036be:	a201      	add	r2, pc, #4	@ (adr r2, 80036c4 <UART_SetConfig+0xdc>)
 80036c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c4:	080036f9 	.word	0x080036f9
 80036c8:	08003711 	.word	0x08003711
 80036cc:	08003711 	.word	0x08003711
 80036d0:	08003711 	.word	0x08003711
 80036d4:	08003705 	.word	0x08003705
 80036d8:	08003711 	.word	0x08003711
 80036dc:	08003711 	.word	0x08003711
 80036e0:	08003711 	.word	0x08003711
 80036e4:	080036ff 	.word	0x080036ff
 80036e8:	08003711 	.word	0x08003711
 80036ec:	08003711 	.word	0x08003711
 80036f0:	08003711 	.word	0x08003711
 80036f4:	0800370b 	.word	0x0800370b
 80036f8:	2300      	movs	r3, #0
 80036fa:	77fb      	strb	r3, [r7, #31]
 80036fc:	e118      	b.n	8003930 <UART_SetConfig+0x348>
 80036fe:	2302      	movs	r3, #2
 8003700:	77fb      	strb	r3, [r7, #31]
 8003702:	e115      	b.n	8003930 <UART_SetConfig+0x348>
 8003704:	2304      	movs	r3, #4
 8003706:	77fb      	strb	r3, [r7, #31]
 8003708:	e112      	b.n	8003930 <UART_SetConfig+0x348>
 800370a:	2308      	movs	r3, #8
 800370c:	77fb      	strb	r3, [r7, #31]
 800370e:	e10f      	b.n	8003930 <UART_SetConfig+0x348>
 8003710:	2310      	movs	r3, #16
 8003712:	77fb      	strb	r3, [r7, #31]
 8003714:	e10c      	b.n	8003930 <UART_SetConfig+0x348>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a68      	ldr	r2, [pc, #416]	@ (80038bc <UART_SetConfig+0x2d4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d120      	bne.n	8003762 <UART_SetConfig+0x17a>
 8003720:	4b64      	ldr	r3, [pc, #400]	@ (80038b4 <UART_SetConfig+0x2cc>)
 8003722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003726:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800372a:	2b30      	cmp	r3, #48	@ 0x30
 800372c:	d013      	beq.n	8003756 <UART_SetConfig+0x16e>
 800372e:	2b30      	cmp	r3, #48	@ 0x30
 8003730:	d814      	bhi.n	800375c <UART_SetConfig+0x174>
 8003732:	2b20      	cmp	r3, #32
 8003734:	d009      	beq.n	800374a <UART_SetConfig+0x162>
 8003736:	2b20      	cmp	r3, #32
 8003738:	d810      	bhi.n	800375c <UART_SetConfig+0x174>
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <UART_SetConfig+0x15c>
 800373e:	2b10      	cmp	r3, #16
 8003740:	d006      	beq.n	8003750 <UART_SetConfig+0x168>
 8003742:	e00b      	b.n	800375c <UART_SetConfig+0x174>
 8003744:	2300      	movs	r3, #0
 8003746:	77fb      	strb	r3, [r7, #31]
 8003748:	e0f2      	b.n	8003930 <UART_SetConfig+0x348>
 800374a:	2302      	movs	r3, #2
 800374c:	77fb      	strb	r3, [r7, #31]
 800374e:	e0ef      	b.n	8003930 <UART_SetConfig+0x348>
 8003750:	2304      	movs	r3, #4
 8003752:	77fb      	strb	r3, [r7, #31]
 8003754:	e0ec      	b.n	8003930 <UART_SetConfig+0x348>
 8003756:	2308      	movs	r3, #8
 8003758:	77fb      	strb	r3, [r7, #31]
 800375a:	e0e9      	b.n	8003930 <UART_SetConfig+0x348>
 800375c:	2310      	movs	r3, #16
 800375e:	77fb      	strb	r3, [r7, #31]
 8003760:	e0e6      	b.n	8003930 <UART_SetConfig+0x348>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a56      	ldr	r2, [pc, #344]	@ (80038c0 <UART_SetConfig+0x2d8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d120      	bne.n	80037ae <UART_SetConfig+0x1c6>
 800376c:	4b51      	ldr	r3, [pc, #324]	@ (80038b4 <UART_SetConfig+0x2cc>)
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003772:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003776:	2bc0      	cmp	r3, #192	@ 0xc0
 8003778:	d013      	beq.n	80037a2 <UART_SetConfig+0x1ba>
 800377a:	2bc0      	cmp	r3, #192	@ 0xc0
 800377c:	d814      	bhi.n	80037a8 <UART_SetConfig+0x1c0>
 800377e:	2b80      	cmp	r3, #128	@ 0x80
 8003780:	d009      	beq.n	8003796 <UART_SetConfig+0x1ae>
 8003782:	2b80      	cmp	r3, #128	@ 0x80
 8003784:	d810      	bhi.n	80037a8 <UART_SetConfig+0x1c0>
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <UART_SetConfig+0x1a8>
 800378a:	2b40      	cmp	r3, #64	@ 0x40
 800378c:	d006      	beq.n	800379c <UART_SetConfig+0x1b4>
 800378e:	e00b      	b.n	80037a8 <UART_SetConfig+0x1c0>
 8003790:	2300      	movs	r3, #0
 8003792:	77fb      	strb	r3, [r7, #31]
 8003794:	e0cc      	b.n	8003930 <UART_SetConfig+0x348>
 8003796:	2302      	movs	r3, #2
 8003798:	77fb      	strb	r3, [r7, #31]
 800379a:	e0c9      	b.n	8003930 <UART_SetConfig+0x348>
 800379c:	2304      	movs	r3, #4
 800379e:	77fb      	strb	r3, [r7, #31]
 80037a0:	e0c6      	b.n	8003930 <UART_SetConfig+0x348>
 80037a2:	2308      	movs	r3, #8
 80037a4:	77fb      	strb	r3, [r7, #31]
 80037a6:	e0c3      	b.n	8003930 <UART_SetConfig+0x348>
 80037a8:	2310      	movs	r3, #16
 80037aa:	77fb      	strb	r3, [r7, #31]
 80037ac:	e0c0      	b.n	8003930 <UART_SetConfig+0x348>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a44      	ldr	r2, [pc, #272]	@ (80038c4 <UART_SetConfig+0x2dc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d125      	bne.n	8003804 <UART_SetConfig+0x21c>
 80037b8:	4b3e      	ldr	r3, [pc, #248]	@ (80038b4 <UART_SetConfig+0x2cc>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037c6:	d017      	beq.n	80037f8 <UART_SetConfig+0x210>
 80037c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037cc:	d817      	bhi.n	80037fe <UART_SetConfig+0x216>
 80037ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037d2:	d00b      	beq.n	80037ec <UART_SetConfig+0x204>
 80037d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037d8:	d811      	bhi.n	80037fe <UART_SetConfig+0x216>
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <UART_SetConfig+0x1fe>
 80037de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037e2:	d006      	beq.n	80037f2 <UART_SetConfig+0x20a>
 80037e4:	e00b      	b.n	80037fe <UART_SetConfig+0x216>
 80037e6:	2300      	movs	r3, #0
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	e0a1      	b.n	8003930 <UART_SetConfig+0x348>
 80037ec:	2302      	movs	r3, #2
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e09e      	b.n	8003930 <UART_SetConfig+0x348>
 80037f2:	2304      	movs	r3, #4
 80037f4:	77fb      	strb	r3, [r7, #31]
 80037f6:	e09b      	b.n	8003930 <UART_SetConfig+0x348>
 80037f8:	2308      	movs	r3, #8
 80037fa:	77fb      	strb	r3, [r7, #31]
 80037fc:	e098      	b.n	8003930 <UART_SetConfig+0x348>
 80037fe:	2310      	movs	r3, #16
 8003800:	77fb      	strb	r3, [r7, #31]
 8003802:	e095      	b.n	8003930 <UART_SetConfig+0x348>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a2f      	ldr	r2, [pc, #188]	@ (80038c8 <UART_SetConfig+0x2e0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d125      	bne.n	800385a <UART_SetConfig+0x272>
 800380e:	4b29      	ldr	r3, [pc, #164]	@ (80038b4 <UART_SetConfig+0x2cc>)
 8003810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003814:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003818:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800381c:	d017      	beq.n	800384e <UART_SetConfig+0x266>
 800381e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003822:	d817      	bhi.n	8003854 <UART_SetConfig+0x26c>
 8003824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003828:	d00b      	beq.n	8003842 <UART_SetConfig+0x25a>
 800382a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800382e:	d811      	bhi.n	8003854 <UART_SetConfig+0x26c>
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <UART_SetConfig+0x254>
 8003834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003838:	d006      	beq.n	8003848 <UART_SetConfig+0x260>
 800383a:	e00b      	b.n	8003854 <UART_SetConfig+0x26c>
 800383c:	2301      	movs	r3, #1
 800383e:	77fb      	strb	r3, [r7, #31]
 8003840:	e076      	b.n	8003930 <UART_SetConfig+0x348>
 8003842:	2302      	movs	r3, #2
 8003844:	77fb      	strb	r3, [r7, #31]
 8003846:	e073      	b.n	8003930 <UART_SetConfig+0x348>
 8003848:	2304      	movs	r3, #4
 800384a:	77fb      	strb	r3, [r7, #31]
 800384c:	e070      	b.n	8003930 <UART_SetConfig+0x348>
 800384e:	2308      	movs	r3, #8
 8003850:	77fb      	strb	r3, [r7, #31]
 8003852:	e06d      	b.n	8003930 <UART_SetConfig+0x348>
 8003854:	2310      	movs	r3, #16
 8003856:	77fb      	strb	r3, [r7, #31]
 8003858:	e06a      	b.n	8003930 <UART_SetConfig+0x348>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a1b      	ldr	r2, [pc, #108]	@ (80038cc <UART_SetConfig+0x2e4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d138      	bne.n	80038d6 <UART_SetConfig+0x2ee>
 8003864:	4b13      	ldr	r3, [pc, #76]	@ (80038b4 <UART_SetConfig+0x2cc>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800386e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003872:	d017      	beq.n	80038a4 <UART_SetConfig+0x2bc>
 8003874:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003878:	d82a      	bhi.n	80038d0 <UART_SetConfig+0x2e8>
 800387a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800387e:	d00b      	beq.n	8003898 <UART_SetConfig+0x2b0>
 8003880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003884:	d824      	bhi.n	80038d0 <UART_SetConfig+0x2e8>
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <UART_SetConfig+0x2aa>
 800388a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800388e:	d006      	beq.n	800389e <UART_SetConfig+0x2b6>
 8003890:	e01e      	b.n	80038d0 <UART_SetConfig+0x2e8>
 8003892:	2300      	movs	r3, #0
 8003894:	77fb      	strb	r3, [r7, #31]
 8003896:	e04b      	b.n	8003930 <UART_SetConfig+0x348>
 8003898:	2302      	movs	r3, #2
 800389a:	77fb      	strb	r3, [r7, #31]
 800389c:	e048      	b.n	8003930 <UART_SetConfig+0x348>
 800389e:	2304      	movs	r3, #4
 80038a0:	77fb      	strb	r3, [r7, #31]
 80038a2:	e045      	b.n	8003930 <UART_SetConfig+0x348>
 80038a4:	2308      	movs	r3, #8
 80038a6:	77fb      	strb	r3, [r7, #31]
 80038a8:	e042      	b.n	8003930 <UART_SetConfig+0x348>
 80038aa:	bf00      	nop
 80038ac:	efff69f3 	.word	0xefff69f3
 80038b0:	40011000 	.word	0x40011000
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40004400 	.word	0x40004400
 80038bc:	40004800 	.word	0x40004800
 80038c0:	40004c00 	.word	0x40004c00
 80038c4:	40005000 	.word	0x40005000
 80038c8:	40011400 	.word	0x40011400
 80038cc:	40007800 	.word	0x40007800
 80038d0:	2310      	movs	r3, #16
 80038d2:	77fb      	strb	r3, [r7, #31]
 80038d4:	e02c      	b.n	8003930 <UART_SetConfig+0x348>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a72      	ldr	r2, [pc, #456]	@ (8003aa4 <UART_SetConfig+0x4bc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d125      	bne.n	800392c <UART_SetConfig+0x344>
 80038e0:	4b71      	ldr	r3, [pc, #452]	@ (8003aa8 <UART_SetConfig+0x4c0>)
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80038ea:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80038ee:	d017      	beq.n	8003920 <UART_SetConfig+0x338>
 80038f0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80038f4:	d817      	bhi.n	8003926 <UART_SetConfig+0x33e>
 80038f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038fa:	d00b      	beq.n	8003914 <UART_SetConfig+0x32c>
 80038fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003900:	d811      	bhi.n	8003926 <UART_SetConfig+0x33e>
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <UART_SetConfig+0x326>
 8003906:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800390a:	d006      	beq.n	800391a <UART_SetConfig+0x332>
 800390c:	e00b      	b.n	8003926 <UART_SetConfig+0x33e>
 800390e:	2300      	movs	r3, #0
 8003910:	77fb      	strb	r3, [r7, #31]
 8003912:	e00d      	b.n	8003930 <UART_SetConfig+0x348>
 8003914:	2302      	movs	r3, #2
 8003916:	77fb      	strb	r3, [r7, #31]
 8003918:	e00a      	b.n	8003930 <UART_SetConfig+0x348>
 800391a:	2304      	movs	r3, #4
 800391c:	77fb      	strb	r3, [r7, #31]
 800391e:	e007      	b.n	8003930 <UART_SetConfig+0x348>
 8003920:	2308      	movs	r3, #8
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e004      	b.n	8003930 <UART_SetConfig+0x348>
 8003926:	2310      	movs	r3, #16
 8003928:	77fb      	strb	r3, [r7, #31]
 800392a:	e001      	b.n	8003930 <UART_SetConfig+0x348>
 800392c:	2310      	movs	r3, #16
 800392e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003938:	d15b      	bne.n	80039f2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800393a:	7ffb      	ldrb	r3, [r7, #31]
 800393c:	2b08      	cmp	r3, #8
 800393e:	d828      	bhi.n	8003992 <UART_SetConfig+0x3aa>
 8003940:	a201      	add	r2, pc, #4	@ (adr r2, 8003948 <UART_SetConfig+0x360>)
 8003942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003946:	bf00      	nop
 8003948:	0800396d 	.word	0x0800396d
 800394c:	08003975 	.word	0x08003975
 8003950:	0800397d 	.word	0x0800397d
 8003954:	08003993 	.word	0x08003993
 8003958:	08003983 	.word	0x08003983
 800395c:	08003993 	.word	0x08003993
 8003960:	08003993 	.word	0x08003993
 8003964:	08003993 	.word	0x08003993
 8003968:	0800398b 	.word	0x0800398b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800396c:	f7ff f914 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 8003970:	61b8      	str	r0, [r7, #24]
        break;
 8003972:	e013      	b.n	800399c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003974:	f7ff f924 	bl	8002bc0 <HAL_RCC_GetPCLK2Freq>
 8003978:	61b8      	str	r0, [r7, #24]
        break;
 800397a:	e00f      	b.n	800399c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800397c:	4b4b      	ldr	r3, [pc, #300]	@ (8003aac <UART_SetConfig+0x4c4>)
 800397e:	61bb      	str	r3, [r7, #24]
        break;
 8003980:	e00c      	b.n	800399c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003982:	f7ff f837 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 8003986:	61b8      	str	r0, [r7, #24]
        break;
 8003988:	e008      	b.n	800399c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800398a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800398e:	61bb      	str	r3, [r7, #24]
        break;
 8003990:	e004      	b.n	800399c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	77bb      	strb	r3, [r7, #30]
        break;
 800399a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d074      	beq.n	8003a8c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	005a      	lsls	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	085b      	lsrs	r3, r3, #1
 80039ac:	441a      	add	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	2b0f      	cmp	r3, #15
 80039bc:	d916      	bls.n	80039ec <UART_SetConfig+0x404>
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039c4:	d212      	bcs.n	80039ec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	f023 030f 	bic.w	r3, r3, #15
 80039ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	085b      	lsrs	r3, r3, #1
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	b29a      	uxth	r2, r3
 80039dc:	89fb      	ldrh	r3, [r7, #14]
 80039de:	4313      	orrs	r3, r2
 80039e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	89fa      	ldrh	r2, [r7, #14]
 80039e8:	60da      	str	r2, [r3, #12]
 80039ea:	e04f      	b.n	8003a8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	77bb      	strb	r3, [r7, #30]
 80039f0:	e04c      	b.n	8003a8c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039f2:	7ffb      	ldrb	r3, [r7, #31]
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d828      	bhi.n	8003a4a <UART_SetConfig+0x462>
 80039f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003a00 <UART_SetConfig+0x418>)
 80039fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fe:	bf00      	nop
 8003a00:	08003a25 	.word	0x08003a25
 8003a04:	08003a2d 	.word	0x08003a2d
 8003a08:	08003a35 	.word	0x08003a35
 8003a0c:	08003a4b 	.word	0x08003a4b
 8003a10:	08003a3b 	.word	0x08003a3b
 8003a14:	08003a4b 	.word	0x08003a4b
 8003a18:	08003a4b 	.word	0x08003a4b
 8003a1c:	08003a4b 	.word	0x08003a4b
 8003a20:	08003a43 	.word	0x08003a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a24:	f7ff f8b8 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 8003a28:	61b8      	str	r0, [r7, #24]
        break;
 8003a2a:	e013      	b.n	8003a54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a2c:	f7ff f8c8 	bl	8002bc0 <HAL_RCC_GetPCLK2Freq>
 8003a30:	61b8      	str	r0, [r7, #24]
        break;
 8003a32:	e00f      	b.n	8003a54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a34:	4b1d      	ldr	r3, [pc, #116]	@ (8003aac <UART_SetConfig+0x4c4>)
 8003a36:	61bb      	str	r3, [r7, #24]
        break;
 8003a38:	e00c      	b.n	8003a54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a3a:	f7fe ffdb 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 8003a3e:	61b8      	str	r0, [r7, #24]
        break;
 8003a40:	e008      	b.n	8003a54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a46:	61bb      	str	r3, [r7, #24]
        break;
 8003a48:	e004      	b.n	8003a54 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	77bb      	strb	r3, [r7, #30]
        break;
 8003a52:	bf00      	nop
    }

    if (pclk != 0U)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d018      	beq.n	8003a8c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	085a      	lsrs	r2, r3, #1
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	441a      	add	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	2b0f      	cmp	r3, #15
 8003a72:	d909      	bls.n	8003a88 <UART_SetConfig+0x4a0>
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a7a:	d205      	bcs.n	8003a88 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60da      	str	r2, [r3, #12]
 8003a86:	e001      	b.n	8003a8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a98:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3720      	adds	r7, #32
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40007c00 	.word	0x40007c00
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	00f42400 	.word	0x00f42400

08003ab0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d01a      	beq.n	8003bc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bae:	d10a      	bne.n	8003bc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	605a      	str	r2, [r3, #4]
  }
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b098      	sub	sp, #96	@ 0x60
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c04:	f7fd f9b6 	bl	8000f74 <HAL_GetTick>
 8003c08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d12e      	bne.n	8003c76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c20:	2200      	movs	r2, #0
 8003c22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f88c 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d021      	beq.n	8003c76 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c46:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c52:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c58:	e841 2300 	strex	r3, r2, [r1]
 8003c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e6      	bne.n	8003c32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e062      	b.n	8003d3c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d149      	bne.n	8003d18 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f856 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d03c      	beq.n	8003d18 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	623b      	str	r3, [r7, #32]
   return(result);
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cc4:	e841 2300 	strex	r3, r2, [r1]
 8003cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e6      	bne.n	8003c9e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	e853 3f00 	ldrex	r3, [r3]
 8003cde:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3308      	adds	r3, #8
 8003cee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cf0:	61fa      	str	r2, [r7, #28]
 8003cf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	69b9      	ldr	r1, [r7, #24]
 8003cf6:	69fa      	ldr	r2, [r7, #28]
 8003cf8:	e841 2300 	strex	r3, r2, [r1]
 8003cfc:	617b      	str	r3, [r7, #20]
   return(result);
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e5      	bne.n	8003cd0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e011      	b.n	8003d3c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3758      	adds	r7, #88	@ 0x58
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	4613      	mov	r3, r2
 8003d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d54:	e04f      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5c:	d04b      	beq.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5e:	f7fd f909 	bl	8000f74 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d302      	bcc.n	8003d74 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e04e      	b.n	8003e16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d037      	beq.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b80      	cmp	r3, #128	@ 0x80
 8003d8a:	d034      	beq.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b40      	cmp	r3, #64	@ 0x40
 8003d90:	d031      	beq.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d110      	bne.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2208      	movs	r2, #8
 8003da6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f838 	bl	8003e1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2208      	movs	r2, #8
 8003db2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e029      	b.n	8003e16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dd0:	d111      	bne.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f81e 	bl	8003e1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e00f      	b.n	8003e16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69da      	ldr	r2, [r3, #28]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	bf0c      	ite	eq
 8003e06:	2301      	moveq	r3, #1
 8003e08:	2300      	movne	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d0a0      	beq.n	8003d56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b095      	sub	sp, #84	@ 0x54
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e2e:	e853 3f00 	ldrex	r3, [r3]
 8003e32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	461a      	mov	r2, r3
 8003e42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e44:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e46:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e4c:	e841 2300 	strex	r3, r2, [r1]
 8003e50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1e6      	bne.n	8003e26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	e853 3f00 	ldrex	r3, [r3]
 8003e66:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f023 0301 	bic.w	r3, r3, #1
 8003e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3308      	adds	r3, #8
 8003e76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e80:	e841 2300 	strex	r3, r2, [r1]
 8003e84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1e5      	bne.n	8003e58 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d118      	bne.n	8003ec6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f023 0310 	bic.w	r3, r3, #16
 8003ea8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eb2:	61bb      	str	r3, [r7, #24]
 8003eb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb6:	6979      	ldr	r1, [r7, #20]
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e6      	bne.n	8003e94 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003eda:	bf00      	nop
 8003edc:	3754      	adds	r7, #84	@ 0x54
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <__cvt>:
 8003ee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee8:	ed2d 8b02 	vpush	{d8}
 8003eec:	eeb0 8b40 	vmov.f64	d8, d0
 8003ef0:	b085      	sub	sp, #20
 8003ef2:	4617      	mov	r7, r2
 8003ef4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8003ef6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ef8:	ee18 2a90 	vmov	r2, s17
 8003efc:	f025 0520 	bic.w	r5, r5, #32
 8003f00:	2a00      	cmp	r2, #0
 8003f02:	bfb6      	itet	lt
 8003f04:	222d      	movlt	r2, #45	@ 0x2d
 8003f06:	2200      	movge	r2, #0
 8003f08:	eeb1 8b40 	vneglt.f64	d8, d0
 8003f0c:	2d46      	cmp	r5, #70	@ 0x46
 8003f0e:	460c      	mov	r4, r1
 8003f10:	701a      	strb	r2, [r3, #0]
 8003f12:	d004      	beq.n	8003f1e <__cvt+0x38>
 8003f14:	2d45      	cmp	r5, #69	@ 0x45
 8003f16:	d100      	bne.n	8003f1a <__cvt+0x34>
 8003f18:	3401      	adds	r4, #1
 8003f1a:	2102      	movs	r1, #2
 8003f1c:	e000      	b.n	8003f20 <__cvt+0x3a>
 8003f1e:	2103      	movs	r1, #3
 8003f20:	ab03      	add	r3, sp, #12
 8003f22:	9301      	str	r3, [sp, #4]
 8003f24:	ab02      	add	r3, sp, #8
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	4622      	mov	r2, r4
 8003f2a:	4633      	mov	r3, r6
 8003f2c:	eeb0 0b48 	vmov.f64	d0, d8
 8003f30:	f000 fe42 	bl	8004bb8 <_dtoa_r>
 8003f34:	2d47      	cmp	r5, #71	@ 0x47
 8003f36:	d114      	bne.n	8003f62 <__cvt+0x7c>
 8003f38:	07fb      	lsls	r3, r7, #31
 8003f3a:	d50a      	bpl.n	8003f52 <__cvt+0x6c>
 8003f3c:	1902      	adds	r2, r0, r4
 8003f3e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f46:	bf08      	it	eq
 8003f48:	9203      	streq	r2, [sp, #12]
 8003f4a:	2130      	movs	r1, #48	@ 0x30
 8003f4c:	9b03      	ldr	r3, [sp, #12]
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d319      	bcc.n	8003f86 <__cvt+0xa0>
 8003f52:	9b03      	ldr	r3, [sp, #12]
 8003f54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003f56:	1a1b      	subs	r3, r3, r0
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	b005      	add	sp, #20
 8003f5c:	ecbd 8b02 	vpop	{d8}
 8003f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f62:	2d46      	cmp	r5, #70	@ 0x46
 8003f64:	eb00 0204 	add.w	r2, r0, r4
 8003f68:	d1e9      	bne.n	8003f3e <__cvt+0x58>
 8003f6a:	7803      	ldrb	r3, [r0, #0]
 8003f6c:	2b30      	cmp	r3, #48	@ 0x30
 8003f6e:	d107      	bne.n	8003f80 <__cvt+0x9a>
 8003f70:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f78:	bf1c      	itt	ne
 8003f7a:	f1c4 0401 	rsbne	r4, r4, #1
 8003f7e:	6034      	strne	r4, [r6, #0]
 8003f80:	6833      	ldr	r3, [r6, #0]
 8003f82:	441a      	add	r2, r3
 8003f84:	e7db      	b.n	8003f3e <__cvt+0x58>
 8003f86:	1c5c      	adds	r4, r3, #1
 8003f88:	9403      	str	r4, [sp, #12]
 8003f8a:	7019      	strb	r1, [r3, #0]
 8003f8c:	e7de      	b.n	8003f4c <__cvt+0x66>

08003f8e <__exponent>:
 8003f8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f90:	2900      	cmp	r1, #0
 8003f92:	bfba      	itte	lt
 8003f94:	4249      	neglt	r1, r1
 8003f96:	232d      	movlt	r3, #45	@ 0x2d
 8003f98:	232b      	movge	r3, #43	@ 0x2b
 8003f9a:	2909      	cmp	r1, #9
 8003f9c:	7002      	strb	r2, [r0, #0]
 8003f9e:	7043      	strb	r3, [r0, #1]
 8003fa0:	dd29      	ble.n	8003ff6 <__exponent+0x68>
 8003fa2:	f10d 0307 	add.w	r3, sp, #7
 8003fa6:	461d      	mov	r5, r3
 8003fa8:	270a      	movs	r7, #10
 8003faa:	461a      	mov	r2, r3
 8003fac:	fbb1 f6f7 	udiv	r6, r1, r7
 8003fb0:	fb07 1416 	mls	r4, r7, r6, r1
 8003fb4:	3430      	adds	r4, #48	@ 0x30
 8003fb6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003fba:	460c      	mov	r4, r1
 8003fbc:	2c63      	cmp	r4, #99	@ 0x63
 8003fbe:	f103 33ff 	add.w	r3, r3, #4294967295
 8003fc2:	4631      	mov	r1, r6
 8003fc4:	dcf1      	bgt.n	8003faa <__exponent+0x1c>
 8003fc6:	3130      	adds	r1, #48	@ 0x30
 8003fc8:	1e94      	subs	r4, r2, #2
 8003fca:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003fce:	1c41      	adds	r1, r0, #1
 8003fd0:	4623      	mov	r3, r4
 8003fd2:	42ab      	cmp	r3, r5
 8003fd4:	d30a      	bcc.n	8003fec <__exponent+0x5e>
 8003fd6:	f10d 0309 	add.w	r3, sp, #9
 8003fda:	1a9b      	subs	r3, r3, r2
 8003fdc:	42ac      	cmp	r4, r5
 8003fde:	bf88      	it	hi
 8003fe0:	2300      	movhi	r3, #0
 8003fe2:	3302      	adds	r3, #2
 8003fe4:	4403      	add	r3, r0
 8003fe6:	1a18      	subs	r0, r3, r0
 8003fe8:	b003      	add	sp, #12
 8003fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fec:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003ff0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003ff4:	e7ed      	b.n	8003fd2 <__exponent+0x44>
 8003ff6:	2330      	movs	r3, #48	@ 0x30
 8003ff8:	3130      	adds	r1, #48	@ 0x30
 8003ffa:	7083      	strb	r3, [r0, #2]
 8003ffc:	70c1      	strb	r1, [r0, #3]
 8003ffe:	1d03      	adds	r3, r0, #4
 8004000:	e7f1      	b.n	8003fe6 <__exponent+0x58>
 8004002:	0000      	movs	r0, r0
 8004004:	0000      	movs	r0, r0
	...

08004008 <_printf_float>:
 8004008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800400c:	b08d      	sub	sp, #52	@ 0x34
 800400e:	460c      	mov	r4, r1
 8004010:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004014:	4616      	mov	r6, r2
 8004016:	461f      	mov	r7, r3
 8004018:	4605      	mov	r5, r0
 800401a:	f000 fccb 	bl	80049b4 <_localeconv_r>
 800401e:	f8d0 b000 	ldr.w	fp, [r0]
 8004022:	4658      	mov	r0, fp
 8004024:	f7fc f95c 	bl	80002e0 <strlen>
 8004028:	2300      	movs	r3, #0
 800402a:	930a      	str	r3, [sp, #40]	@ 0x28
 800402c:	f8d8 3000 	ldr.w	r3, [r8]
 8004030:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004034:	6822      	ldr	r2, [r4, #0]
 8004036:	9005      	str	r0, [sp, #20]
 8004038:	3307      	adds	r3, #7
 800403a:	f023 0307 	bic.w	r3, r3, #7
 800403e:	f103 0108 	add.w	r1, r3, #8
 8004042:	f8c8 1000 	str.w	r1, [r8]
 8004046:	ed93 0b00 	vldr	d0, [r3]
 800404a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80042a8 <_printf_float+0x2a0>
 800404e:	eeb0 7bc0 	vabs.f64	d7, d0
 8004052:	eeb4 7b46 	vcmp.f64	d7, d6
 8004056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800405a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800405e:	dd24      	ble.n	80040aa <_printf_float+0xa2>
 8004060:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004068:	d502      	bpl.n	8004070 <_printf_float+0x68>
 800406a:	232d      	movs	r3, #45	@ 0x2d
 800406c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004070:	498f      	ldr	r1, [pc, #572]	@ (80042b0 <_printf_float+0x2a8>)
 8004072:	4b90      	ldr	r3, [pc, #576]	@ (80042b4 <_printf_float+0x2ac>)
 8004074:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8004078:	bf94      	ite	ls
 800407a:	4688      	movls	r8, r1
 800407c:	4698      	movhi	r8, r3
 800407e:	f022 0204 	bic.w	r2, r2, #4
 8004082:	2303      	movs	r3, #3
 8004084:	6123      	str	r3, [r4, #16]
 8004086:	6022      	str	r2, [r4, #0]
 8004088:	f04f 0a00 	mov.w	sl, #0
 800408c:	9700      	str	r7, [sp, #0]
 800408e:	4633      	mov	r3, r6
 8004090:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004092:	4621      	mov	r1, r4
 8004094:	4628      	mov	r0, r5
 8004096:	f000 f9d1 	bl	800443c <_printf_common>
 800409a:	3001      	adds	r0, #1
 800409c:	f040 8089 	bne.w	80041b2 <_printf_float+0x1aa>
 80040a0:	f04f 30ff 	mov.w	r0, #4294967295
 80040a4:	b00d      	add	sp, #52	@ 0x34
 80040a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040aa:	eeb4 0b40 	vcmp.f64	d0, d0
 80040ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b2:	d709      	bvc.n	80040c8 <_printf_float+0xc0>
 80040b4:	ee10 3a90 	vmov	r3, s1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	bfbc      	itt	lt
 80040bc:	232d      	movlt	r3, #45	@ 0x2d
 80040be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80040c2:	497d      	ldr	r1, [pc, #500]	@ (80042b8 <_printf_float+0x2b0>)
 80040c4:	4b7d      	ldr	r3, [pc, #500]	@ (80042bc <_printf_float+0x2b4>)
 80040c6:	e7d5      	b.n	8004074 <_printf_float+0x6c>
 80040c8:	6863      	ldr	r3, [r4, #4]
 80040ca:	1c59      	adds	r1, r3, #1
 80040cc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80040d0:	d139      	bne.n	8004146 <_printf_float+0x13e>
 80040d2:	2306      	movs	r3, #6
 80040d4:	6063      	str	r3, [r4, #4]
 80040d6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040da:	2300      	movs	r3, #0
 80040dc:	6022      	str	r2, [r4, #0]
 80040de:	9303      	str	r3, [sp, #12]
 80040e0:	ab0a      	add	r3, sp, #40	@ 0x28
 80040e2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80040e6:	ab09      	add	r3, sp, #36	@ 0x24
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	6861      	ldr	r1, [r4, #4]
 80040ec:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80040f0:	4628      	mov	r0, r5
 80040f2:	f7ff fef8 	bl	8003ee6 <__cvt>
 80040f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80040fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80040fc:	4680      	mov	r8, r0
 80040fe:	d129      	bne.n	8004154 <_printf_float+0x14c>
 8004100:	1cc8      	adds	r0, r1, #3
 8004102:	db02      	blt.n	800410a <_printf_float+0x102>
 8004104:	6863      	ldr	r3, [r4, #4]
 8004106:	4299      	cmp	r1, r3
 8004108:	dd41      	ble.n	800418e <_printf_float+0x186>
 800410a:	f1a9 0902 	sub.w	r9, r9, #2
 800410e:	fa5f f989 	uxtb.w	r9, r9
 8004112:	3901      	subs	r1, #1
 8004114:	464a      	mov	r2, r9
 8004116:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800411a:	9109      	str	r1, [sp, #36]	@ 0x24
 800411c:	f7ff ff37 	bl	8003f8e <__exponent>
 8004120:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004122:	1813      	adds	r3, r2, r0
 8004124:	2a01      	cmp	r2, #1
 8004126:	4682      	mov	sl, r0
 8004128:	6123      	str	r3, [r4, #16]
 800412a:	dc02      	bgt.n	8004132 <_printf_float+0x12a>
 800412c:	6822      	ldr	r2, [r4, #0]
 800412e:	07d2      	lsls	r2, r2, #31
 8004130:	d501      	bpl.n	8004136 <_printf_float+0x12e>
 8004132:	3301      	adds	r3, #1
 8004134:	6123      	str	r3, [r4, #16]
 8004136:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0a6      	beq.n	800408c <_printf_float+0x84>
 800413e:	232d      	movs	r3, #45	@ 0x2d
 8004140:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004144:	e7a2      	b.n	800408c <_printf_float+0x84>
 8004146:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800414a:	d1c4      	bne.n	80040d6 <_printf_float+0xce>
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1c2      	bne.n	80040d6 <_printf_float+0xce>
 8004150:	2301      	movs	r3, #1
 8004152:	e7bf      	b.n	80040d4 <_printf_float+0xcc>
 8004154:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004158:	d9db      	bls.n	8004112 <_printf_float+0x10a>
 800415a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800415e:	d118      	bne.n	8004192 <_printf_float+0x18a>
 8004160:	2900      	cmp	r1, #0
 8004162:	6863      	ldr	r3, [r4, #4]
 8004164:	dd0b      	ble.n	800417e <_printf_float+0x176>
 8004166:	6121      	str	r1, [r4, #16]
 8004168:	b913      	cbnz	r3, 8004170 <_printf_float+0x168>
 800416a:	6822      	ldr	r2, [r4, #0]
 800416c:	07d0      	lsls	r0, r2, #31
 800416e:	d502      	bpl.n	8004176 <_printf_float+0x16e>
 8004170:	3301      	adds	r3, #1
 8004172:	440b      	add	r3, r1
 8004174:	6123      	str	r3, [r4, #16]
 8004176:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004178:	f04f 0a00 	mov.w	sl, #0
 800417c:	e7db      	b.n	8004136 <_printf_float+0x12e>
 800417e:	b913      	cbnz	r3, 8004186 <_printf_float+0x17e>
 8004180:	6822      	ldr	r2, [r4, #0]
 8004182:	07d2      	lsls	r2, r2, #31
 8004184:	d501      	bpl.n	800418a <_printf_float+0x182>
 8004186:	3302      	adds	r3, #2
 8004188:	e7f4      	b.n	8004174 <_printf_float+0x16c>
 800418a:	2301      	movs	r3, #1
 800418c:	e7f2      	b.n	8004174 <_printf_float+0x16c>
 800418e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8004192:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004194:	4299      	cmp	r1, r3
 8004196:	db05      	blt.n	80041a4 <_printf_float+0x19c>
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	6121      	str	r1, [r4, #16]
 800419c:	07d8      	lsls	r0, r3, #31
 800419e:	d5ea      	bpl.n	8004176 <_printf_float+0x16e>
 80041a0:	1c4b      	adds	r3, r1, #1
 80041a2:	e7e7      	b.n	8004174 <_printf_float+0x16c>
 80041a4:	2900      	cmp	r1, #0
 80041a6:	bfd4      	ite	le
 80041a8:	f1c1 0202 	rsble	r2, r1, #2
 80041ac:	2201      	movgt	r2, #1
 80041ae:	4413      	add	r3, r2
 80041b0:	e7e0      	b.n	8004174 <_printf_float+0x16c>
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	055a      	lsls	r2, r3, #21
 80041b6:	d407      	bmi.n	80041c8 <_printf_float+0x1c0>
 80041b8:	6923      	ldr	r3, [r4, #16]
 80041ba:	4642      	mov	r2, r8
 80041bc:	4631      	mov	r1, r6
 80041be:	4628      	mov	r0, r5
 80041c0:	47b8      	blx	r7
 80041c2:	3001      	adds	r0, #1
 80041c4:	d12a      	bne.n	800421c <_printf_float+0x214>
 80041c6:	e76b      	b.n	80040a0 <_printf_float+0x98>
 80041c8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80041cc:	f240 80e0 	bls.w	8004390 <_printf_float+0x388>
 80041d0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80041d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80041d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041dc:	d133      	bne.n	8004246 <_printf_float+0x23e>
 80041de:	4a38      	ldr	r2, [pc, #224]	@ (80042c0 <_printf_float+0x2b8>)
 80041e0:	2301      	movs	r3, #1
 80041e2:	4631      	mov	r1, r6
 80041e4:	4628      	mov	r0, r5
 80041e6:	47b8      	blx	r7
 80041e8:	3001      	adds	r0, #1
 80041ea:	f43f af59 	beq.w	80040a0 <_printf_float+0x98>
 80041ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80041f2:	4543      	cmp	r3, r8
 80041f4:	db02      	blt.n	80041fc <_printf_float+0x1f4>
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	07d8      	lsls	r0, r3, #31
 80041fa:	d50f      	bpl.n	800421c <_printf_float+0x214>
 80041fc:	9b05      	ldr	r3, [sp, #20]
 80041fe:	465a      	mov	r2, fp
 8004200:	4631      	mov	r1, r6
 8004202:	4628      	mov	r0, r5
 8004204:	47b8      	blx	r7
 8004206:	3001      	adds	r0, #1
 8004208:	f43f af4a 	beq.w	80040a0 <_printf_float+0x98>
 800420c:	f04f 0900 	mov.w	r9, #0
 8004210:	f108 38ff 	add.w	r8, r8, #4294967295
 8004214:	f104 0a1a 	add.w	sl, r4, #26
 8004218:	45c8      	cmp	r8, r9
 800421a:	dc09      	bgt.n	8004230 <_printf_float+0x228>
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	079b      	lsls	r3, r3, #30
 8004220:	f100 8107 	bmi.w	8004432 <_printf_float+0x42a>
 8004224:	68e0      	ldr	r0, [r4, #12]
 8004226:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004228:	4298      	cmp	r0, r3
 800422a:	bfb8      	it	lt
 800422c:	4618      	movlt	r0, r3
 800422e:	e739      	b.n	80040a4 <_printf_float+0x9c>
 8004230:	2301      	movs	r3, #1
 8004232:	4652      	mov	r2, sl
 8004234:	4631      	mov	r1, r6
 8004236:	4628      	mov	r0, r5
 8004238:	47b8      	blx	r7
 800423a:	3001      	adds	r0, #1
 800423c:	f43f af30 	beq.w	80040a0 <_printf_float+0x98>
 8004240:	f109 0901 	add.w	r9, r9, #1
 8004244:	e7e8      	b.n	8004218 <_printf_float+0x210>
 8004246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004248:	2b00      	cmp	r3, #0
 800424a:	dc3b      	bgt.n	80042c4 <_printf_float+0x2bc>
 800424c:	4a1c      	ldr	r2, [pc, #112]	@ (80042c0 <_printf_float+0x2b8>)
 800424e:	2301      	movs	r3, #1
 8004250:	4631      	mov	r1, r6
 8004252:	4628      	mov	r0, r5
 8004254:	47b8      	blx	r7
 8004256:	3001      	adds	r0, #1
 8004258:	f43f af22 	beq.w	80040a0 <_printf_float+0x98>
 800425c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004260:	ea59 0303 	orrs.w	r3, r9, r3
 8004264:	d102      	bne.n	800426c <_printf_float+0x264>
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	07d9      	lsls	r1, r3, #31
 800426a:	d5d7      	bpl.n	800421c <_printf_float+0x214>
 800426c:	9b05      	ldr	r3, [sp, #20]
 800426e:	465a      	mov	r2, fp
 8004270:	4631      	mov	r1, r6
 8004272:	4628      	mov	r0, r5
 8004274:	47b8      	blx	r7
 8004276:	3001      	adds	r0, #1
 8004278:	f43f af12 	beq.w	80040a0 <_printf_float+0x98>
 800427c:	f04f 0a00 	mov.w	sl, #0
 8004280:	f104 0b1a 	add.w	fp, r4, #26
 8004284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004286:	425b      	negs	r3, r3
 8004288:	4553      	cmp	r3, sl
 800428a:	dc01      	bgt.n	8004290 <_printf_float+0x288>
 800428c:	464b      	mov	r3, r9
 800428e:	e794      	b.n	80041ba <_printf_float+0x1b2>
 8004290:	2301      	movs	r3, #1
 8004292:	465a      	mov	r2, fp
 8004294:	4631      	mov	r1, r6
 8004296:	4628      	mov	r0, r5
 8004298:	47b8      	blx	r7
 800429a:	3001      	adds	r0, #1
 800429c:	f43f af00 	beq.w	80040a0 <_printf_float+0x98>
 80042a0:	f10a 0a01 	add.w	sl, sl, #1
 80042a4:	e7ee      	b.n	8004284 <_printf_float+0x27c>
 80042a6:	bf00      	nop
 80042a8:	ffffffff 	.word	0xffffffff
 80042ac:	7fefffff 	.word	0x7fefffff
 80042b0:	08006adc 	.word	0x08006adc
 80042b4:	08006ae0 	.word	0x08006ae0
 80042b8:	08006ae4 	.word	0x08006ae4
 80042bc:	08006ae8 	.word	0x08006ae8
 80042c0:	08006aec 	.word	0x08006aec
 80042c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80042c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80042ca:	4553      	cmp	r3, sl
 80042cc:	bfa8      	it	ge
 80042ce:	4653      	movge	r3, sl
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	4699      	mov	r9, r3
 80042d4:	dc37      	bgt.n	8004346 <_printf_float+0x33e>
 80042d6:	2300      	movs	r3, #0
 80042d8:	9307      	str	r3, [sp, #28]
 80042da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042de:	f104 021a 	add.w	r2, r4, #26
 80042e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80042e4:	9907      	ldr	r1, [sp, #28]
 80042e6:	9306      	str	r3, [sp, #24]
 80042e8:	eba3 0309 	sub.w	r3, r3, r9
 80042ec:	428b      	cmp	r3, r1
 80042ee:	dc31      	bgt.n	8004354 <_printf_float+0x34c>
 80042f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042f2:	459a      	cmp	sl, r3
 80042f4:	dc3b      	bgt.n	800436e <_printf_float+0x366>
 80042f6:	6823      	ldr	r3, [r4, #0]
 80042f8:	07da      	lsls	r2, r3, #31
 80042fa:	d438      	bmi.n	800436e <_printf_float+0x366>
 80042fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042fe:	ebaa 0903 	sub.w	r9, sl, r3
 8004302:	9b06      	ldr	r3, [sp, #24]
 8004304:	ebaa 0303 	sub.w	r3, sl, r3
 8004308:	4599      	cmp	r9, r3
 800430a:	bfa8      	it	ge
 800430c:	4699      	movge	r9, r3
 800430e:	f1b9 0f00 	cmp.w	r9, #0
 8004312:	dc34      	bgt.n	800437e <_printf_float+0x376>
 8004314:	f04f 0800 	mov.w	r8, #0
 8004318:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800431c:	f104 0b1a 	add.w	fp, r4, #26
 8004320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004322:	ebaa 0303 	sub.w	r3, sl, r3
 8004326:	eba3 0309 	sub.w	r3, r3, r9
 800432a:	4543      	cmp	r3, r8
 800432c:	f77f af76 	ble.w	800421c <_printf_float+0x214>
 8004330:	2301      	movs	r3, #1
 8004332:	465a      	mov	r2, fp
 8004334:	4631      	mov	r1, r6
 8004336:	4628      	mov	r0, r5
 8004338:	47b8      	blx	r7
 800433a:	3001      	adds	r0, #1
 800433c:	f43f aeb0 	beq.w	80040a0 <_printf_float+0x98>
 8004340:	f108 0801 	add.w	r8, r8, #1
 8004344:	e7ec      	b.n	8004320 <_printf_float+0x318>
 8004346:	4642      	mov	r2, r8
 8004348:	4631      	mov	r1, r6
 800434a:	4628      	mov	r0, r5
 800434c:	47b8      	blx	r7
 800434e:	3001      	adds	r0, #1
 8004350:	d1c1      	bne.n	80042d6 <_printf_float+0x2ce>
 8004352:	e6a5      	b.n	80040a0 <_printf_float+0x98>
 8004354:	2301      	movs	r3, #1
 8004356:	4631      	mov	r1, r6
 8004358:	4628      	mov	r0, r5
 800435a:	9206      	str	r2, [sp, #24]
 800435c:	47b8      	blx	r7
 800435e:	3001      	adds	r0, #1
 8004360:	f43f ae9e 	beq.w	80040a0 <_printf_float+0x98>
 8004364:	9b07      	ldr	r3, [sp, #28]
 8004366:	9a06      	ldr	r2, [sp, #24]
 8004368:	3301      	adds	r3, #1
 800436a:	9307      	str	r3, [sp, #28]
 800436c:	e7b9      	b.n	80042e2 <_printf_float+0x2da>
 800436e:	9b05      	ldr	r3, [sp, #20]
 8004370:	465a      	mov	r2, fp
 8004372:	4631      	mov	r1, r6
 8004374:	4628      	mov	r0, r5
 8004376:	47b8      	blx	r7
 8004378:	3001      	adds	r0, #1
 800437a:	d1bf      	bne.n	80042fc <_printf_float+0x2f4>
 800437c:	e690      	b.n	80040a0 <_printf_float+0x98>
 800437e:	9a06      	ldr	r2, [sp, #24]
 8004380:	464b      	mov	r3, r9
 8004382:	4442      	add	r2, r8
 8004384:	4631      	mov	r1, r6
 8004386:	4628      	mov	r0, r5
 8004388:	47b8      	blx	r7
 800438a:	3001      	adds	r0, #1
 800438c:	d1c2      	bne.n	8004314 <_printf_float+0x30c>
 800438e:	e687      	b.n	80040a0 <_printf_float+0x98>
 8004390:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8004394:	f1b9 0f01 	cmp.w	r9, #1
 8004398:	dc01      	bgt.n	800439e <_printf_float+0x396>
 800439a:	07db      	lsls	r3, r3, #31
 800439c:	d536      	bpl.n	800440c <_printf_float+0x404>
 800439e:	2301      	movs	r3, #1
 80043a0:	4642      	mov	r2, r8
 80043a2:	4631      	mov	r1, r6
 80043a4:	4628      	mov	r0, r5
 80043a6:	47b8      	blx	r7
 80043a8:	3001      	adds	r0, #1
 80043aa:	f43f ae79 	beq.w	80040a0 <_printf_float+0x98>
 80043ae:	9b05      	ldr	r3, [sp, #20]
 80043b0:	465a      	mov	r2, fp
 80043b2:	4631      	mov	r1, r6
 80043b4:	4628      	mov	r0, r5
 80043b6:	47b8      	blx	r7
 80043b8:	3001      	adds	r0, #1
 80043ba:	f43f ae71 	beq.w	80040a0 <_printf_float+0x98>
 80043be:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80043c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80043c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ca:	f109 39ff 	add.w	r9, r9, #4294967295
 80043ce:	d018      	beq.n	8004402 <_printf_float+0x3fa>
 80043d0:	464b      	mov	r3, r9
 80043d2:	f108 0201 	add.w	r2, r8, #1
 80043d6:	4631      	mov	r1, r6
 80043d8:	4628      	mov	r0, r5
 80043da:	47b8      	blx	r7
 80043dc:	3001      	adds	r0, #1
 80043de:	d10c      	bne.n	80043fa <_printf_float+0x3f2>
 80043e0:	e65e      	b.n	80040a0 <_printf_float+0x98>
 80043e2:	2301      	movs	r3, #1
 80043e4:	465a      	mov	r2, fp
 80043e6:	4631      	mov	r1, r6
 80043e8:	4628      	mov	r0, r5
 80043ea:	47b8      	blx	r7
 80043ec:	3001      	adds	r0, #1
 80043ee:	f43f ae57 	beq.w	80040a0 <_printf_float+0x98>
 80043f2:	f108 0801 	add.w	r8, r8, #1
 80043f6:	45c8      	cmp	r8, r9
 80043f8:	dbf3      	blt.n	80043e2 <_printf_float+0x3da>
 80043fa:	4653      	mov	r3, sl
 80043fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004400:	e6dc      	b.n	80041bc <_printf_float+0x1b4>
 8004402:	f04f 0800 	mov.w	r8, #0
 8004406:	f104 0b1a 	add.w	fp, r4, #26
 800440a:	e7f4      	b.n	80043f6 <_printf_float+0x3ee>
 800440c:	2301      	movs	r3, #1
 800440e:	4642      	mov	r2, r8
 8004410:	e7e1      	b.n	80043d6 <_printf_float+0x3ce>
 8004412:	2301      	movs	r3, #1
 8004414:	464a      	mov	r2, r9
 8004416:	4631      	mov	r1, r6
 8004418:	4628      	mov	r0, r5
 800441a:	47b8      	blx	r7
 800441c:	3001      	adds	r0, #1
 800441e:	f43f ae3f 	beq.w	80040a0 <_printf_float+0x98>
 8004422:	f108 0801 	add.w	r8, r8, #1
 8004426:	68e3      	ldr	r3, [r4, #12]
 8004428:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800442a:	1a5b      	subs	r3, r3, r1
 800442c:	4543      	cmp	r3, r8
 800442e:	dcf0      	bgt.n	8004412 <_printf_float+0x40a>
 8004430:	e6f8      	b.n	8004224 <_printf_float+0x21c>
 8004432:	f04f 0800 	mov.w	r8, #0
 8004436:	f104 0919 	add.w	r9, r4, #25
 800443a:	e7f4      	b.n	8004426 <_printf_float+0x41e>

0800443c <_printf_common>:
 800443c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004440:	4616      	mov	r6, r2
 8004442:	4698      	mov	r8, r3
 8004444:	688a      	ldr	r2, [r1, #8]
 8004446:	690b      	ldr	r3, [r1, #16]
 8004448:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800444c:	4293      	cmp	r3, r2
 800444e:	bfb8      	it	lt
 8004450:	4613      	movlt	r3, r2
 8004452:	6033      	str	r3, [r6, #0]
 8004454:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004458:	4607      	mov	r7, r0
 800445a:	460c      	mov	r4, r1
 800445c:	b10a      	cbz	r2, 8004462 <_printf_common+0x26>
 800445e:	3301      	adds	r3, #1
 8004460:	6033      	str	r3, [r6, #0]
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	0699      	lsls	r1, r3, #26
 8004466:	bf42      	ittt	mi
 8004468:	6833      	ldrmi	r3, [r6, #0]
 800446a:	3302      	addmi	r3, #2
 800446c:	6033      	strmi	r3, [r6, #0]
 800446e:	6825      	ldr	r5, [r4, #0]
 8004470:	f015 0506 	ands.w	r5, r5, #6
 8004474:	d106      	bne.n	8004484 <_printf_common+0x48>
 8004476:	f104 0a19 	add.w	sl, r4, #25
 800447a:	68e3      	ldr	r3, [r4, #12]
 800447c:	6832      	ldr	r2, [r6, #0]
 800447e:	1a9b      	subs	r3, r3, r2
 8004480:	42ab      	cmp	r3, r5
 8004482:	dc26      	bgt.n	80044d2 <_printf_common+0x96>
 8004484:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004488:	6822      	ldr	r2, [r4, #0]
 800448a:	3b00      	subs	r3, #0
 800448c:	bf18      	it	ne
 800448e:	2301      	movne	r3, #1
 8004490:	0692      	lsls	r2, r2, #26
 8004492:	d42b      	bmi.n	80044ec <_printf_common+0xb0>
 8004494:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004498:	4641      	mov	r1, r8
 800449a:	4638      	mov	r0, r7
 800449c:	47c8      	blx	r9
 800449e:	3001      	adds	r0, #1
 80044a0:	d01e      	beq.n	80044e0 <_printf_common+0xa4>
 80044a2:	6823      	ldr	r3, [r4, #0]
 80044a4:	6922      	ldr	r2, [r4, #16]
 80044a6:	f003 0306 	and.w	r3, r3, #6
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	bf02      	ittt	eq
 80044ae:	68e5      	ldreq	r5, [r4, #12]
 80044b0:	6833      	ldreq	r3, [r6, #0]
 80044b2:	1aed      	subeq	r5, r5, r3
 80044b4:	68a3      	ldr	r3, [r4, #8]
 80044b6:	bf0c      	ite	eq
 80044b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044bc:	2500      	movne	r5, #0
 80044be:	4293      	cmp	r3, r2
 80044c0:	bfc4      	itt	gt
 80044c2:	1a9b      	subgt	r3, r3, r2
 80044c4:	18ed      	addgt	r5, r5, r3
 80044c6:	2600      	movs	r6, #0
 80044c8:	341a      	adds	r4, #26
 80044ca:	42b5      	cmp	r5, r6
 80044cc:	d11a      	bne.n	8004504 <_printf_common+0xc8>
 80044ce:	2000      	movs	r0, #0
 80044d0:	e008      	b.n	80044e4 <_printf_common+0xa8>
 80044d2:	2301      	movs	r3, #1
 80044d4:	4652      	mov	r2, sl
 80044d6:	4641      	mov	r1, r8
 80044d8:	4638      	mov	r0, r7
 80044da:	47c8      	blx	r9
 80044dc:	3001      	adds	r0, #1
 80044de:	d103      	bne.n	80044e8 <_printf_common+0xac>
 80044e0:	f04f 30ff 	mov.w	r0, #4294967295
 80044e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e8:	3501      	adds	r5, #1
 80044ea:	e7c6      	b.n	800447a <_printf_common+0x3e>
 80044ec:	18e1      	adds	r1, r4, r3
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	2030      	movs	r0, #48	@ 0x30
 80044f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80044f6:	4422      	add	r2, r4
 80044f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80044fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004500:	3302      	adds	r3, #2
 8004502:	e7c7      	b.n	8004494 <_printf_common+0x58>
 8004504:	2301      	movs	r3, #1
 8004506:	4622      	mov	r2, r4
 8004508:	4641      	mov	r1, r8
 800450a:	4638      	mov	r0, r7
 800450c:	47c8      	blx	r9
 800450e:	3001      	adds	r0, #1
 8004510:	d0e6      	beq.n	80044e0 <_printf_common+0xa4>
 8004512:	3601      	adds	r6, #1
 8004514:	e7d9      	b.n	80044ca <_printf_common+0x8e>
	...

08004518 <_printf_i>:
 8004518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800451c:	7e0f      	ldrb	r7, [r1, #24]
 800451e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004520:	2f78      	cmp	r7, #120	@ 0x78
 8004522:	4691      	mov	r9, r2
 8004524:	4680      	mov	r8, r0
 8004526:	460c      	mov	r4, r1
 8004528:	469a      	mov	sl, r3
 800452a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800452e:	d807      	bhi.n	8004540 <_printf_i+0x28>
 8004530:	2f62      	cmp	r7, #98	@ 0x62
 8004532:	d80a      	bhi.n	800454a <_printf_i+0x32>
 8004534:	2f00      	cmp	r7, #0
 8004536:	f000 80d2 	beq.w	80046de <_printf_i+0x1c6>
 800453a:	2f58      	cmp	r7, #88	@ 0x58
 800453c:	f000 80b9 	beq.w	80046b2 <_printf_i+0x19a>
 8004540:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004544:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004548:	e03a      	b.n	80045c0 <_printf_i+0xa8>
 800454a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800454e:	2b15      	cmp	r3, #21
 8004550:	d8f6      	bhi.n	8004540 <_printf_i+0x28>
 8004552:	a101      	add	r1, pc, #4	@ (adr r1, 8004558 <_printf_i+0x40>)
 8004554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004558:	080045b1 	.word	0x080045b1
 800455c:	080045c5 	.word	0x080045c5
 8004560:	08004541 	.word	0x08004541
 8004564:	08004541 	.word	0x08004541
 8004568:	08004541 	.word	0x08004541
 800456c:	08004541 	.word	0x08004541
 8004570:	080045c5 	.word	0x080045c5
 8004574:	08004541 	.word	0x08004541
 8004578:	08004541 	.word	0x08004541
 800457c:	08004541 	.word	0x08004541
 8004580:	08004541 	.word	0x08004541
 8004584:	080046c5 	.word	0x080046c5
 8004588:	080045ef 	.word	0x080045ef
 800458c:	0800467f 	.word	0x0800467f
 8004590:	08004541 	.word	0x08004541
 8004594:	08004541 	.word	0x08004541
 8004598:	080046e7 	.word	0x080046e7
 800459c:	08004541 	.word	0x08004541
 80045a0:	080045ef 	.word	0x080045ef
 80045a4:	08004541 	.word	0x08004541
 80045a8:	08004541 	.word	0x08004541
 80045ac:	08004687 	.word	0x08004687
 80045b0:	6833      	ldr	r3, [r6, #0]
 80045b2:	1d1a      	adds	r2, r3, #4
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6032      	str	r2, [r6, #0]
 80045b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045c0:	2301      	movs	r3, #1
 80045c2:	e09d      	b.n	8004700 <_printf_i+0x1e8>
 80045c4:	6833      	ldr	r3, [r6, #0]
 80045c6:	6820      	ldr	r0, [r4, #0]
 80045c8:	1d19      	adds	r1, r3, #4
 80045ca:	6031      	str	r1, [r6, #0]
 80045cc:	0606      	lsls	r6, r0, #24
 80045ce:	d501      	bpl.n	80045d4 <_printf_i+0xbc>
 80045d0:	681d      	ldr	r5, [r3, #0]
 80045d2:	e003      	b.n	80045dc <_printf_i+0xc4>
 80045d4:	0645      	lsls	r5, r0, #25
 80045d6:	d5fb      	bpl.n	80045d0 <_printf_i+0xb8>
 80045d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80045dc:	2d00      	cmp	r5, #0
 80045de:	da03      	bge.n	80045e8 <_printf_i+0xd0>
 80045e0:	232d      	movs	r3, #45	@ 0x2d
 80045e2:	426d      	negs	r5, r5
 80045e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045e8:	4859      	ldr	r0, [pc, #356]	@ (8004750 <_printf_i+0x238>)
 80045ea:	230a      	movs	r3, #10
 80045ec:	e011      	b.n	8004612 <_printf_i+0xfa>
 80045ee:	6821      	ldr	r1, [r4, #0]
 80045f0:	6833      	ldr	r3, [r6, #0]
 80045f2:	0608      	lsls	r0, r1, #24
 80045f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80045f8:	d402      	bmi.n	8004600 <_printf_i+0xe8>
 80045fa:	0649      	lsls	r1, r1, #25
 80045fc:	bf48      	it	mi
 80045fe:	b2ad      	uxthmi	r5, r5
 8004600:	2f6f      	cmp	r7, #111	@ 0x6f
 8004602:	4853      	ldr	r0, [pc, #332]	@ (8004750 <_printf_i+0x238>)
 8004604:	6033      	str	r3, [r6, #0]
 8004606:	bf14      	ite	ne
 8004608:	230a      	movne	r3, #10
 800460a:	2308      	moveq	r3, #8
 800460c:	2100      	movs	r1, #0
 800460e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004612:	6866      	ldr	r6, [r4, #4]
 8004614:	60a6      	str	r6, [r4, #8]
 8004616:	2e00      	cmp	r6, #0
 8004618:	bfa2      	ittt	ge
 800461a:	6821      	ldrge	r1, [r4, #0]
 800461c:	f021 0104 	bicge.w	r1, r1, #4
 8004620:	6021      	strge	r1, [r4, #0]
 8004622:	b90d      	cbnz	r5, 8004628 <_printf_i+0x110>
 8004624:	2e00      	cmp	r6, #0
 8004626:	d04b      	beq.n	80046c0 <_printf_i+0x1a8>
 8004628:	4616      	mov	r6, r2
 800462a:	fbb5 f1f3 	udiv	r1, r5, r3
 800462e:	fb03 5711 	mls	r7, r3, r1, r5
 8004632:	5dc7      	ldrb	r7, [r0, r7]
 8004634:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004638:	462f      	mov	r7, r5
 800463a:	42bb      	cmp	r3, r7
 800463c:	460d      	mov	r5, r1
 800463e:	d9f4      	bls.n	800462a <_printf_i+0x112>
 8004640:	2b08      	cmp	r3, #8
 8004642:	d10b      	bne.n	800465c <_printf_i+0x144>
 8004644:	6823      	ldr	r3, [r4, #0]
 8004646:	07df      	lsls	r7, r3, #31
 8004648:	d508      	bpl.n	800465c <_printf_i+0x144>
 800464a:	6923      	ldr	r3, [r4, #16]
 800464c:	6861      	ldr	r1, [r4, #4]
 800464e:	4299      	cmp	r1, r3
 8004650:	bfde      	ittt	le
 8004652:	2330      	movle	r3, #48	@ 0x30
 8004654:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004658:	f106 36ff 	addle.w	r6, r6, #4294967295
 800465c:	1b92      	subs	r2, r2, r6
 800465e:	6122      	str	r2, [r4, #16]
 8004660:	f8cd a000 	str.w	sl, [sp]
 8004664:	464b      	mov	r3, r9
 8004666:	aa03      	add	r2, sp, #12
 8004668:	4621      	mov	r1, r4
 800466a:	4640      	mov	r0, r8
 800466c:	f7ff fee6 	bl	800443c <_printf_common>
 8004670:	3001      	adds	r0, #1
 8004672:	d14a      	bne.n	800470a <_printf_i+0x1f2>
 8004674:	f04f 30ff 	mov.w	r0, #4294967295
 8004678:	b004      	add	sp, #16
 800467a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	f043 0320 	orr.w	r3, r3, #32
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	4833      	ldr	r0, [pc, #204]	@ (8004754 <_printf_i+0x23c>)
 8004688:	2778      	movs	r7, #120	@ 0x78
 800468a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	6831      	ldr	r1, [r6, #0]
 8004692:	061f      	lsls	r7, r3, #24
 8004694:	f851 5b04 	ldr.w	r5, [r1], #4
 8004698:	d402      	bmi.n	80046a0 <_printf_i+0x188>
 800469a:	065f      	lsls	r7, r3, #25
 800469c:	bf48      	it	mi
 800469e:	b2ad      	uxthmi	r5, r5
 80046a0:	6031      	str	r1, [r6, #0]
 80046a2:	07d9      	lsls	r1, r3, #31
 80046a4:	bf44      	itt	mi
 80046a6:	f043 0320 	orrmi.w	r3, r3, #32
 80046aa:	6023      	strmi	r3, [r4, #0]
 80046ac:	b11d      	cbz	r5, 80046b6 <_printf_i+0x19e>
 80046ae:	2310      	movs	r3, #16
 80046b0:	e7ac      	b.n	800460c <_printf_i+0xf4>
 80046b2:	4827      	ldr	r0, [pc, #156]	@ (8004750 <_printf_i+0x238>)
 80046b4:	e7e9      	b.n	800468a <_printf_i+0x172>
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	f023 0320 	bic.w	r3, r3, #32
 80046bc:	6023      	str	r3, [r4, #0]
 80046be:	e7f6      	b.n	80046ae <_printf_i+0x196>
 80046c0:	4616      	mov	r6, r2
 80046c2:	e7bd      	b.n	8004640 <_printf_i+0x128>
 80046c4:	6833      	ldr	r3, [r6, #0]
 80046c6:	6825      	ldr	r5, [r4, #0]
 80046c8:	6961      	ldr	r1, [r4, #20]
 80046ca:	1d18      	adds	r0, r3, #4
 80046cc:	6030      	str	r0, [r6, #0]
 80046ce:	062e      	lsls	r6, r5, #24
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	d501      	bpl.n	80046d8 <_printf_i+0x1c0>
 80046d4:	6019      	str	r1, [r3, #0]
 80046d6:	e002      	b.n	80046de <_printf_i+0x1c6>
 80046d8:	0668      	lsls	r0, r5, #25
 80046da:	d5fb      	bpl.n	80046d4 <_printf_i+0x1bc>
 80046dc:	8019      	strh	r1, [r3, #0]
 80046de:	2300      	movs	r3, #0
 80046e0:	6123      	str	r3, [r4, #16]
 80046e2:	4616      	mov	r6, r2
 80046e4:	e7bc      	b.n	8004660 <_printf_i+0x148>
 80046e6:	6833      	ldr	r3, [r6, #0]
 80046e8:	1d1a      	adds	r2, r3, #4
 80046ea:	6032      	str	r2, [r6, #0]
 80046ec:	681e      	ldr	r6, [r3, #0]
 80046ee:	6862      	ldr	r2, [r4, #4]
 80046f0:	2100      	movs	r1, #0
 80046f2:	4630      	mov	r0, r6
 80046f4:	f7fb fda4 	bl	8000240 <memchr>
 80046f8:	b108      	cbz	r0, 80046fe <_printf_i+0x1e6>
 80046fa:	1b80      	subs	r0, r0, r6
 80046fc:	6060      	str	r0, [r4, #4]
 80046fe:	6863      	ldr	r3, [r4, #4]
 8004700:	6123      	str	r3, [r4, #16]
 8004702:	2300      	movs	r3, #0
 8004704:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004708:	e7aa      	b.n	8004660 <_printf_i+0x148>
 800470a:	6923      	ldr	r3, [r4, #16]
 800470c:	4632      	mov	r2, r6
 800470e:	4649      	mov	r1, r9
 8004710:	4640      	mov	r0, r8
 8004712:	47d0      	blx	sl
 8004714:	3001      	adds	r0, #1
 8004716:	d0ad      	beq.n	8004674 <_printf_i+0x15c>
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	079b      	lsls	r3, r3, #30
 800471c:	d413      	bmi.n	8004746 <_printf_i+0x22e>
 800471e:	68e0      	ldr	r0, [r4, #12]
 8004720:	9b03      	ldr	r3, [sp, #12]
 8004722:	4298      	cmp	r0, r3
 8004724:	bfb8      	it	lt
 8004726:	4618      	movlt	r0, r3
 8004728:	e7a6      	b.n	8004678 <_printf_i+0x160>
 800472a:	2301      	movs	r3, #1
 800472c:	4632      	mov	r2, r6
 800472e:	4649      	mov	r1, r9
 8004730:	4640      	mov	r0, r8
 8004732:	47d0      	blx	sl
 8004734:	3001      	adds	r0, #1
 8004736:	d09d      	beq.n	8004674 <_printf_i+0x15c>
 8004738:	3501      	adds	r5, #1
 800473a:	68e3      	ldr	r3, [r4, #12]
 800473c:	9903      	ldr	r1, [sp, #12]
 800473e:	1a5b      	subs	r3, r3, r1
 8004740:	42ab      	cmp	r3, r5
 8004742:	dcf2      	bgt.n	800472a <_printf_i+0x212>
 8004744:	e7eb      	b.n	800471e <_printf_i+0x206>
 8004746:	2500      	movs	r5, #0
 8004748:	f104 0619 	add.w	r6, r4, #25
 800474c:	e7f5      	b.n	800473a <_printf_i+0x222>
 800474e:	bf00      	nop
 8004750:	08006aee 	.word	0x08006aee
 8004754:	08006aff 	.word	0x08006aff

08004758 <std>:
 8004758:	2300      	movs	r3, #0
 800475a:	b510      	push	{r4, lr}
 800475c:	4604      	mov	r4, r0
 800475e:	e9c0 3300 	strd	r3, r3, [r0]
 8004762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004766:	6083      	str	r3, [r0, #8]
 8004768:	8181      	strh	r1, [r0, #12]
 800476a:	6643      	str	r3, [r0, #100]	@ 0x64
 800476c:	81c2      	strh	r2, [r0, #14]
 800476e:	6183      	str	r3, [r0, #24]
 8004770:	4619      	mov	r1, r3
 8004772:	2208      	movs	r2, #8
 8004774:	305c      	adds	r0, #92	@ 0x5c
 8004776:	f000 f914 	bl	80049a2 <memset>
 800477a:	4b0d      	ldr	r3, [pc, #52]	@ (80047b0 <std+0x58>)
 800477c:	6263      	str	r3, [r4, #36]	@ 0x24
 800477e:	4b0d      	ldr	r3, [pc, #52]	@ (80047b4 <std+0x5c>)
 8004780:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004782:	4b0d      	ldr	r3, [pc, #52]	@ (80047b8 <std+0x60>)
 8004784:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004786:	4b0d      	ldr	r3, [pc, #52]	@ (80047bc <std+0x64>)
 8004788:	6323      	str	r3, [r4, #48]	@ 0x30
 800478a:	4b0d      	ldr	r3, [pc, #52]	@ (80047c0 <std+0x68>)
 800478c:	6224      	str	r4, [r4, #32]
 800478e:	429c      	cmp	r4, r3
 8004790:	d006      	beq.n	80047a0 <std+0x48>
 8004792:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004796:	4294      	cmp	r4, r2
 8004798:	d002      	beq.n	80047a0 <std+0x48>
 800479a:	33d0      	adds	r3, #208	@ 0xd0
 800479c:	429c      	cmp	r4, r3
 800479e:	d105      	bne.n	80047ac <std+0x54>
 80047a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80047a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047a8:	f000 b978 	b.w	8004a9c <__retarget_lock_init_recursive>
 80047ac:	bd10      	pop	{r4, pc}
 80047ae:	bf00      	nop
 80047b0:	0800491d 	.word	0x0800491d
 80047b4:	0800493f 	.word	0x0800493f
 80047b8:	08004977 	.word	0x08004977
 80047bc:	0800499b 	.word	0x0800499b
 80047c0:	200002dc 	.word	0x200002dc

080047c4 <stdio_exit_handler>:
 80047c4:	4a02      	ldr	r2, [pc, #8]	@ (80047d0 <stdio_exit_handler+0xc>)
 80047c6:	4903      	ldr	r1, [pc, #12]	@ (80047d4 <stdio_exit_handler+0x10>)
 80047c8:	4803      	ldr	r0, [pc, #12]	@ (80047d8 <stdio_exit_handler+0x14>)
 80047ca:	f000 b869 	b.w	80048a0 <_fwalk_sglue>
 80047ce:	bf00      	nop
 80047d0:	20000014 	.word	0x20000014
 80047d4:	08006321 	.word	0x08006321
 80047d8:	20000024 	.word	0x20000024

080047dc <cleanup_stdio>:
 80047dc:	6841      	ldr	r1, [r0, #4]
 80047de:	4b0c      	ldr	r3, [pc, #48]	@ (8004810 <cleanup_stdio+0x34>)
 80047e0:	4299      	cmp	r1, r3
 80047e2:	b510      	push	{r4, lr}
 80047e4:	4604      	mov	r4, r0
 80047e6:	d001      	beq.n	80047ec <cleanup_stdio+0x10>
 80047e8:	f001 fd9a 	bl	8006320 <_fflush_r>
 80047ec:	68a1      	ldr	r1, [r4, #8]
 80047ee:	4b09      	ldr	r3, [pc, #36]	@ (8004814 <cleanup_stdio+0x38>)
 80047f0:	4299      	cmp	r1, r3
 80047f2:	d002      	beq.n	80047fa <cleanup_stdio+0x1e>
 80047f4:	4620      	mov	r0, r4
 80047f6:	f001 fd93 	bl	8006320 <_fflush_r>
 80047fa:	68e1      	ldr	r1, [r4, #12]
 80047fc:	4b06      	ldr	r3, [pc, #24]	@ (8004818 <cleanup_stdio+0x3c>)
 80047fe:	4299      	cmp	r1, r3
 8004800:	d004      	beq.n	800480c <cleanup_stdio+0x30>
 8004802:	4620      	mov	r0, r4
 8004804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004808:	f001 bd8a 	b.w	8006320 <_fflush_r>
 800480c:	bd10      	pop	{r4, pc}
 800480e:	bf00      	nop
 8004810:	200002dc 	.word	0x200002dc
 8004814:	20000344 	.word	0x20000344
 8004818:	200003ac 	.word	0x200003ac

0800481c <global_stdio_init.part.0>:
 800481c:	b510      	push	{r4, lr}
 800481e:	4b0b      	ldr	r3, [pc, #44]	@ (800484c <global_stdio_init.part.0+0x30>)
 8004820:	4c0b      	ldr	r4, [pc, #44]	@ (8004850 <global_stdio_init.part.0+0x34>)
 8004822:	4a0c      	ldr	r2, [pc, #48]	@ (8004854 <global_stdio_init.part.0+0x38>)
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	4620      	mov	r0, r4
 8004828:	2200      	movs	r2, #0
 800482a:	2104      	movs	r1, #4
 800482c:	f7ff ff94 	bl	8004758 <std>
 8004830:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004834:	2201      	movs	r2, #1
 8004836:	2109      	movs	r1, #9
 8004838:	f7ff ff8e 	bl	8004758 <std>
 800483c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004840:	2202      	movs	r2, #2
 8004842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004846:	2112      	movs	r1, #18
 8004848:	f7ff bf86 	b.w	8004758 <std>
 800484c:	20000414 	.word	0x20000414
 8004850:	200002dc 	.word	0x200002dc
 8004854:	080047c5 	.word	0x080047c5

08004858 <__sfp_lock_acquire>:
 8004858:	4801      	ldr	r0, [pc, #4]	@ (8004860 <__sfp_lock_acquire+0x8>)
 800485a:	f000 b920 	b.w	8004a9e <__retarget_lock_acquire_recursive>
 800485e:	bf00      	nop
 8004860:	2000041d 	.word	0x2000041d

08004864 <__sfp_lock_release>:
 8004864:	4801      	ldr	r0, [pc, #4]	@ (800486c <__sfp_lock_release+0x8>)
 8004866:	f000 b91b 	b.w	8004aa0 <__retarget_lock_release_recursive>
 800486a:	bf00      	nop
 800486c:	2000041d 	.word	0x2000041d

08004870 <__sinit>:
 8004870:	b510      	push	{r4, lr}
 8004872:	4604      	mov	r4, r0
 8004874:	f7ff fff0 	bl	8004858 <__sfp_lock_acquire>
 8004878:	6a23      	ldr	r3, [r4, #32]
 800487a:	b11b      	cbz	r3, 8004884 <__sinit+0x14>
 800487c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004880:	f7ff bff0 	b.w	8004864 <__sfp_lock_release>
 8004884:	4b04      	ldr	r3, [pc, #16]	@ (8004898 <__sinit+0x28>)
 8004886:	6223      	str	r3, [r4, #32]
 8004888:	4b04      	ldr	r3, [pc, #16]	@ (800489c <__sinit+0x2c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1f5      	bne.n	800487c <__sinit+0xc>
 8004890:	f7ff ffc4 	bl	800481c <global_stdio_init.part.0>
 8004894:	e7f2      	b.n	800487c <__sinit+0xc>
 8004896:	bf00      	nop
 8004898:	080047dd 	.word	0x080047dd
 800489c:	20000414 	.word	0x20000414

080048a0 <_fwalk_sglue>:
 80048a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048a4:	4607      	mov	r7, r0
 80048a6:	4688      	mov	r8, r1
 80048a8:	4614      	mov	r4, r2
 80048aa:	2600      	movs	r6, #0
 80048ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048b0:	f1b9 0901 	subs.w	r9, r9, #1
 80048b4:	d505      	bpl.n	80048c2 <_fwalk_sglue+0x22>
 80048b6:	6824      	ldr	r4, [r4, #0]
 80048b8:	2c00      	cmp	r4, #0
 80048ba:	d1f7      	bne.n	80048ac <_fwalk_sglue+0xc>
 80048bc:	4630      	mov	r0, r6
 80048be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048c2:	89ab      	ldrh	r3, [r5, #12]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d907      	bls.n	80048d8 <_fwalk_sglue+0x38>
 80048c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048cc:	3301      	adds	r3, #1
 80048ce:	d003      	beq.n	80048d8 <_fwalk_sglue+0x38>
 80048d0:	4629      	mov	r1, r5
 80048d2:	4638      	mov	r0, r7
 80048d4:	47c0      	blx	r8
 80048d6:	4306      	orrs	r6, r0
 80048d8:	3568      	adds	r5, #104	@ 0x68
 80048da:	e7e9      	b.n	80048b0 <_fwalk_sglue+0x10>

080048dc <siprintf>:
 80048dc:	b40e      	push	{r1, r2, r3}
 80048de:	b500      	push	{lr}
 80048e0:	b09c      	sub	sp, #112	@ 0x70
 80048e2:	ab1d      	add	r3, sp, #116	@ 0x74
 80048e4:	9002      	str	r0, [sp, #8]
 80048e6:	9006      	str	r0, [sp, #24]
 80048e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80048ec:	4809      	ldr	r0, [pc, #36]	@ (8004914 <siprintf+0x38>)
 80048ee:	9107      	str	r1, [sp, #28]
 80048f0:	9104      	str	r1, [sp, #16]
 80048f2:	4909      	ldr	r1, [pc, #36]	@ (8004918 <siprintf+0x3c>)
 80048f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80048f8:	9105      	str	r1, [sp, #20]
 80048fa:	6800      	ldr	r0, [r0, #0]
 80048fc:	9301      	str	r3, [sp, #4]
 80048fe:	a902      	add	r1, sp, #8
 8004900:	f001 fb8e 	bl	8006020 <_svfiprintf_r>
 8004904:	9b02      	ldr	r3, [sp, #8]
 8004906:	2200      	movs	r2, #0
 8004908:	701a      	strb	r2, [r3, #0]
 800490a:	b01c      	add	sp, #112	@ 0x70
 800490c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004910:	b003      	add	sp, #12
 8004912:	4770      	bx	lr
 8004914:	20000020 	.word	0x20000020
 8004918:	ffff0208 	.word	0xffff0208

0800491c <__sread>:
 800491c:	b510      	push	{r4, lr}
 800491e:	460c      	mov	r4, r1
 8004920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004924:	f000 f86c 	bl	8004a00 <_read_r>
 8004928:	2800      	cmp	r0, #0
 800492a:	bfab      	itete	ge
 800492c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800492e:	89a3      	ldrhlt	r3, [r4, #12]
 8004930:	181b      	addge	r3, r3, r0
 8004932:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004936:	bfac      	ite	ge
 8004938:	6563      	strge	r3, [r4, #84]	@ 0x54
 800493a:	81a3      	strhlt	r3, [r4, #12]
 800493c:	bd10      	pop	{r4, pc}

0800493e <__swrite>:
 800493e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004942:	461f      	mov	r7, r3
 8004944:	898b      	ldrh	r3, [r1, #12]
 8004946:	05db      	lsls	r3, r3, #23
 8004948:	4605      	mov	r5, r0
 800494a:	460c      	mov	r4, r1
 800494c:	4616      	mov	r6, r2
 800494e:	d505      	bpl.n	800495c <__swrite+0x1e>
 8004950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004954:	2302      	movs	r3, #2
 8004956:	2200      	movs	r2, #0
 8004958:	f000 f840 	bl	80049dc <_lseek_r>
 800495c:	89a3      	ldrh	r3, [r4, #12]
 800495e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004962:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004966:	81a3      	strh	r3, [r4, #12]
 8004968:	4632      	mov	r2, r6
 800496a:	463b      	mov	r3, r7
 800496c:	4628      	mov	r0, r5
 800496e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004972:	f000 b857 	b.w	8004a24 <_write_r>

08004976 <__sseek>:
 8004976:	b510      	push	{r4, lr}
 8004978:	460c      	mov	r4, r1
 800497a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800497e:	f000 f82d 	bl	80049dc <_lseek_r>
 8004982:	1c43      	adds	r3, r0, #1
 8004984:	89a3      	ldrh	r3, [r4, #12]
 8004986:	bf15      	itete	ne
 8004988:	6560      	strne	r0, [r4, #84]	@ 0x54
 800498a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800498e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004992:	81a3      	strheq	r3, [r4, #12]
 8004994:	bf18      	it	ne
 8004996:	81a3      	strhne	r3, [r4, #12]
 8004998:	bd10      	pop	{r4, pc}

0800499a <__sclose>:
 800499a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800499e:	f000 b80d 	b.w	80049bc <_close_r>

080049a2 <memset>:
 80049a2:	4402      	add	r2, r0
 80049a4:	4603      	mov	r3, r0
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d100      	bne.n	80049ac <memset+0xa>
 80049aa:	4770      	bx	lr
 80049ac:	f803 1b01 	strb.w	r1, [r3], #1
 80049b0:	e7f9      	b.n	80049a6 <memset+0x4>
	...

080049b4 <_localeconv_r>:
 80049b4:	4800      	ldr	r0, [pc, #0]	@ (80049b8 <_localeconv_r+0x4>)
 80049b6:	4770      	bx	lr
 80049b8:	20000160 	.word	0x20000160

080049bc <_close_r>:
 80049bc:	b538      	push	{r3, r4, r5, lr}
 80049be:	4d06      	ldr	r5, [pc, #24]	@ (80049d8 <_close_r+0x1c>)
 80049c0:	2300      	movs	r3, #0
 80049c2:	4604      	mov	r4, r0
 80049c4:	4608      	mov	r0, r1
 80049c6:	602b      	str	r3, [r5, #0]
 80049c8:	f7fc f94d 	bl	8000c66 <_close>
 80049cc:	1c43      	adds	r3, r0, #1
 80049ce:	d102      	bne.n	80049d6 <_close_r+0x1a>
 80049d0:	682b      	ldr	r3, [r5, #0]
 80049d2:	b103      	cbz	r3, 80049d6 <_close_r+0x1a>
 80049d4:	6023      	str	r3, [r4, #0]
 80049d6:	bd38      	pop	{r3, r4, r5, pc}
 80049d8:	20000418 	.word	0x20000418

080049dc <_lseek_r>:
 80049dc:	b538      	push	{r3, r4, r5, lr}
 80049de:	4d07      	ldr	r5, [pc, #28]	@ (80049fc <_lseek_r+0x20>)
 80049e0:	4604      	mov	r4, r0
 80049e2:	4608      	mov	r0, r1
 80049e4:	4611      	mov	r1, r2
 80049e6:	2200      	movs	r2, #0
 80049e8:	602a      	str	r2, [r5, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	f7fc f962 	bl	8000cb4 <_lseek>
 80049f0:	1c43      	adds	r3, r0, #1
 80049f2:	d102      	bne.n	80049fa <_lseek_r+0x1e>
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	b103      	cbz	r3, 80049fa <_lseek_r+0x1e>
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	bd38      	pop	{r3, r4, r5, pc}
 80049fc:	20000418 	.word	0x20000418

08004a00 <_read_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	4d07      	ldr	r5, [pc, #28]	@ (8004a20 <_read_r+0x20>)
 8004a04:	4604      	mov	r4, r0
 8004a06:	4608      	mov	r0, r1
 8004a08:	4611      	mov	r1, r2
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	602a      	str	r2, [r5, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f7fc f8f0 	bl	8000bf4 <_read>
 8004a14:	1c43      	adds	r3, r0, #1
 8004a16:	d102      	bne.n	8004a1e <_read_r+0x1e>
 8004a18:	682b      	ldr	r3, [r5, #0]
 8004a1a:	b103      	cbz	r3, 8004a1e <_read_r+0x1e>
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	bd38      	pop	{r3, r4, r5, pc}
 8004a20:	20000418 	.word	0x20000418

08004a24 <_write_r>:
 8004a24:	b538      	push	{r3, r4, r5, lr}
 8004a26:	4d07      	ldr	r5, [pc, #28]	@ (8004a44 <_write_r+0x20>)
 8004a28:	4604      	mov	r4, r0
 8004a2a:	4608      	mov	r0, r1
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	2200      	movs	r2, #0
 8004a30:	602a      	str	r2, [r5, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	f7fc f8fb 	bl	8000c2e <_write>
 8004a38:	1c43      	adds	r3, r0, #1
 8004a3a:	d102      	bne.n	8004a42 <_write_r+0x1e>
 8004a3c:	682b      	ldr	r3, [r5, #0]
 8004a3e:	b103      	cbz	r3, 8004a42 <_write_r+0x1e>
 8004a40:	6023      	str	r3, [r4, #0]
 8004a42:	bd38      	pop	{r3, r4, r5, pc}
 8004a44:	20000418 	.word	0x20000418

08004a48 <__errno>:
 8004a48:	4b01      	ldr	r3, [pc, #4]	@ (8004a50 <__errno+0x8>)
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20000020 	.word	0x20000020

08004a54 <__libc_init_array>:
 8004a54:	b570      	push	{r4, r5, r6, lr}
 8004a56:	4d0d      	ldr	r5, [pc, #52]	@ (8004a8c <__libc_init_array+0x38>)
 8004a58:	4c0d      	ldr	r4, [pc, #52]	@ (8004a90 <__libc_init_array+0x3c>)
 8004a5a:	1b64      	subs	r4, r4, r5
 8004a5c:	10a4      	asrs	r4, r4, #2
 8004a5e:	2600      	movs	r6, #0
 8004a60:	42a6      	cmp	r6, r4
 8004a62:	d109      	bne.n	8004a78 <__libc_init_array+0x24>
 8004a64:	4d0b      	ldr	r5, [pc, #44]	@ (8004a94 <__libc_init_array+0x40>)
 8004a66:	4c0c      	ldr	r4, [pc, #48]	@ (8004a98 <__libc_init_array+0x44>)
 8004a68:	f001 fff8 	bl	8006a5c <_init>
 8004a6c:	1b64      	subs	r4, r4, r5
 8004a6e:	10a4      	asrs	r4, r4, #2
 8004a70:	2600      	movs	r6, #0
 8004a72:	42a6      	cmp	r6, r4
 8004a74:	d105      	bne.n	8004a82 <__libc_init_array+0x2e>
 8004a76:	bd70      	pop	{r4, r5, r6, pc}
 8004a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a7c:	4798      	blx	r3
 8004a7e:	3601      	adds	r6, #1
 8004a80:	e7ee      	b.n	8004a60 <__libc_init_array+0xc>
 8004a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a86:	4798      	blx	r3
 8004a88:	3601      	adds	r6, #1
 8004a8a:	e7f2      	b.n	8004a72 <__libc_init_array+0x1e>
 8004a8c:	08006e58 	.word	0x08006e58
 8004a90:	08006e58 	.word	0x08006e58
 8004a94:	08006e58 	.word	0x08006e58
 8004a98:	08006e5c 	.word	0x08006e5c

08004a9c <__retarget_lock_init_recursive>:
 8004a9c:	4770      	bx	lr

08004a9e <__retarget_lock_acquire_recursive>:
 8004a9e:	4770      	bx	lr

08004aa0 <__retarget_lock_release_recursive>:
 8004aa0:	4770      	bx	lr

08004aa2 <quorem>:
 8004aa2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa6:	6903      	ldr	r3, [r0, #16]
 8004aa8:	690c      	ldr	r4, [r1, #16]
 8004aaa:	42a3      	cmp	r3, r4
 8004aac:	4607      	mov	r7, r0
 8004aae:	db7e      	blt.n	8004bae <quorem+0x10c>
 8004ab0:	3c01      	subs	r4, #1
 8004ab2:	f101 0814 	add.w	r8, r1, #20
 8004ab6:	00a3      	lsls	r3, r4, #2
 8004ab8:	f100 0514 	add.w	r5, r0, #20
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ac2:	9301      	str	r3, [sp, #4]
 8004ac4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ac8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004acc:	3301      	adds	r3, #1
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ad4:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ad8:	d32e      	bcc.n	8004b38 <quorem+0x96>
 8004ada:	f04f 0a00 	mov.w	sl, #0
 8004ade:	46c4      	mov	ip, r8
 8004ae0:	46ae      	mov	lr, r5
 8004ae2:	46d3      	mov	fp, sl
 8004ae4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004ae8:	b298      	uxth	r0, r3
 8004aea:	fb06 a000 	mla	r0, r6, r0, sl
 8004aee:	0c02      	lsrs	r2, r0, #16
 8004af0:	0c1b      	lsrs	r3, r3, #16
 8004af2:	fb06 2303 	mla	r3, r6, r3, r2
 8004af6:	f8de 2000 	ldr.w	r2, [lr]
 8004afa:	b280      	uxth	r0, r0
 8004afc:	b292      	uxth	r2, r2
 8004afe:	1a12      	subs	r2, r2, r0
 8004b00:	445a      	add	r2, fp
 8004b02:	f8de 0000 	ldr.w	r0, [lr]
 8004b06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004b10:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004b14:	b292      	uxth	r2, r2
 8004b16:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004b1a:	45e1      	cmp	r9, ip
 8004b1c:	f84e 2b04 	str.w	r2, [lr], #4
 8004b20:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004b24:	d2de      	bcs.n	8004ae4 <quorem+0x42>
 8004b26:	9b00      	ldr	r3, [sp, #0]
 8004b28:	58eb      	ldr	r3, [r5, r3]
 8004b2a:	b92b      	cbnz	r3, 8004b38 <quorem+0x96>
 8004b2c:	9b01      	ldr	r3, [sp, #4]
 8004b2e:	3b04      	subs	r3, #4
 8004b30:	429d      	cmp	r5, r3
 8004b32:	461a      	mov	r2, r3
 8004b34:	d32f      	bcc.n	8004b96 <quorem+0xf4>
 8004b36:	613c      	str	r4, [r7, #16]
 8004b38:	4638      	mov	r0, r7
 8004b3a:	f001 f90d 	bl	8005d58 <__mcmp>
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	db25      	blt.n	8004b8e <quorem+0xec>
 8004b42:	4629      	mov	r1, r5
 8004b44:	2000      	movs	r0, #0
 8004b46:	f858 2b04 	ldr.w	r2, [r8], #4
 8004b4a:	f8d1 c000 	ldr.w	ip, [r1]
 8004b4e:	fa1f fe82 	uxth.w	lr, r2
 8004b52:	fa1f f38c 	uxth.w	r3, ip
 8004b56:	eba3 030e 	sub.w	r3, r3, lr
 8004b5a:	4403      	add	r3, r0
 8004b5c:	0c12      	lsrs	r2, r2, #16
 8004b5e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004b62:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b6c:	45c1      	cmp	r9, r8
 8004b6e:	f841 3b04 	str.w	r3, [r1], #4
 8004b72:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004b76:	d2e6      	bcs.n	8004b46 <quorem+0xa4>
 8004b78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b80:	b922      	cbnz	r2, 8004b8c <quorem+0xea>
 8004b82:	3b04      	subs	r3, #4
 8004b84:	429d      	cmp	r5, r3
 8004b86:	461a      	mov	r2, r3
 8004b88:	d30b      	bcc.n	8004ba2 <quorem+0x100>
 8004b8a:	613c      	str	r4, [r7, #16]
 8004b8c:	3601      	adds	r6, #1
 8004b8e:	4630      	mov	r0, r6
 8004b90:	b003      	add	sp, #12
 8004b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b96:	6812      	ldr	r2, [r2, #0]
 8004b98:	3b04      	subs	r3, #4
 8004b9a:	2a00      	cmp	r2, #0
 8004b9c:	d1cb      	bne.n	8004b36 <quorem+0x94>
 8004b9e:	3c01      	subs	r4, #1
 8004ba0:	e7c6      	b.n	8004b30 <quorem+0x8e>
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	3b04      	subs	r3, #4
 8004ba6:	2a00      	cmp	r2, #0
 8004ba8:	d1ef      	bne.n	8004b8a <quorem+0xe8>
 8004baa:	3c01      	subs	r4, #1
 8004bac:	e7ea      	b.n	8004b84 <quorem+0xe2>
 8004bae:	2000      	movs	r0, #0
 8004bb0:	e7ee      	b.n	8004b90 <quorem+0xee>
 8004bb2:	0000      	movs	r0, r0
 8004bb4:	0000      	movs	r0, r0
	...

08004bb8 <_dtoa_r>:
 8004bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bbc:	ed2d 8b02 	vpush	{d8}
 8004bc0:	69c7      	ldr	r7, [r0, #28]
 8004bc2:	b091      	sub	sp, #68	@ 0x44
 8004bc4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004bc8:	ec55 4b10 	vmov	r4, r5, d0
 8004bcc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8004bce:	9107      	str	r1, [sp, #28]
 8004bd0:	4681      	mov	r9, r0
 8004bd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bd4:	930d      	str	r3, [sp, #52]	@ 0x34
 8004bd6:	b97f      	cbnz	r7, 8004bf8 <_dtoa_r+0x40>
 8004bd8:	2010      	movs	r0, #16
 8004bda:	f000 fd8d 	bl	80056f8 <malloc>
 8004bde:	4602      	mov	r2, r0
 8004be0:	f8c9 001c 	str.w	r0, [r9, #28]
 8004be4:	b920      	cbnz	r0, 8004bf0 <_dtoa_r+0x38>
 8004be6:	4ba0      	ldr	r3, [pc, #640]	@ (8004e68 <_dtoa_r+0x2b0>)
 8004be8:	21ef      	movs	r1, #239	@ 0xef
 8004bea:	48a0      	ldr	r0, [pc, #640]	@ (8004e6c <_dtoa_r+0x2b4>)
 8004bec:	f001 fbf8 	bl	80063e0 <__assert_func>
 8004bf0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004bf4:	6007      	str	r7, [r0, #0]
 8004bf6:	60c7      	str	r7, [r0, #12]
 8004bf8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004bfc:	6819      	ldr	r1, [r3, #0]
 8004bfe:	b159      	cbz	r1, 8004c18 <_dtoa_r+0x60>
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	604a      	str	r2, [r1, #4]
 8004c04:	2301      	movs	r3, #1
 8004c06:	4093      	lsls	r3, r2
 8004c08:	608b      	str	r3, [r1, #8]
 8004c0a:	4648      	mov	r0, r9
 8004c0c:	f000 fe6a 	bl	80058e4 <_Bfree>
 8004c10:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	1e2b      	subs	r3, r5, #0
 8004c1a:	bfbb      	ittet	lt
 8004c1c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004c20:	9303      	strlt	r3, [sp, #12]
 8004c22:	2300      	movge	r3, #0
 8004c24:	2201      	movlt	r2, #1
 8004c26:	bfac      	ite	ge
 8004c28:	6033      	strge	r3, [r6, #0]
 8004c2a:	6032      	strlt	r2, [r6, #0]
 8004c2c:	4b90      	ldr	r3, [pc, #576]	@ (8004e70 <_dtoa_r+0x2b8>)
 8004c2e:	9e03      	ldr	r6, [sp, #12]
 8004c30:	43b3      	bics	r3, r6
 8004c32:	d110      	bne.n	8004c56 <_dtoa_r+0x9e>
 8004c34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004c36:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004c3a:	6013      	str	r3, [r2, #0]
 8004c3c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8004c40:	4323      	orrs	r3, r4
 8004c42:	f000 84de 	beq.w	8005602 <_dtoa_r+0xa4a>
 8004c46:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004c48:	4f8a      	ldr	r7, [pc, #552]	@ (8004e74 <_dtoa_r+0x2bc>)
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 84e0 	beq.w	8005610 <_dtoa_r+0xa58>
 8004c50:	1cfb      	adds	r3, r7, #3
 8004c52:	f000 bcdb 	b.w	800560c <_dtoa_r+0xa54>
 8004c56:	ed9d 8b02 	vldr	d8, [sp, #8]
 8004c5a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c62:	d10a      	bne.n	8004c7a <_dtoa_r+0xc2>
 8004c64:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004c66:	2301      	movs	r3, #1
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004c6c:	b113      	cbz	r3, 8004c74 <_dtoa_r+0xbc>
 8004c6e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8004c70:	4b81      	ldr	r3, [pc, #516]	@ (8004e78 <_dtoa_r+0x2c0>)
 8004c72:	6013      	str	r3, [r2, #0]
 8004c74:	4f81      	ldr	r7, [pc, #516]	@ (8004e7c <_dtoa_r+0x2c4>)
 8004c76:	f000 bccb 	b.w	8005610 <_dtoa_r+0xa58>
 8004c7a:	aa0e      	add	r2, sp, #56	@ 0x38
 8004c7c:	a90f      	add	r1, sp, #60	@ 0x3c
 8004c7e:	4648      	mov	r0, r9
 8004c80:	eeb0 0b48 	vmov.f64	d0, d8
 8004c84:	f001 f918 	bl	8005eb8 <__d2b>
 8004c88:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8004c8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c8e:	9001      	str	r0, [sp, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d045      	beq.n	8004d20 <_dtoa_r+0x168>
 8004c94:	eeb0 7b48 	vmov.f64	d7, d8
 8004c98:	ee18 1a90 	vmov	r1, s17
 8004c9c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004ca0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8004ca4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8004ca8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8004cac:	2500      	movs	r5, #0
 8004cae:	ee07 1a90 	vmov	s15, r1
 8004cb2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8004cb6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8004e50 <_dtoa_r+0x298>
 8004cba:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004cbe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8004e58 <_dtoa_r+0x2a0>
 8004cc2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8004cc6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8004e60 <_dtoa_r+0x2a8>
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8004cd2:	eeb0 7b46 	vmov.f64	d7, d6
 8004cd6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8004cda:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8004cde:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce6:	ee16 8a90 	vmov	r8, s13
 8004cea:	d508      	bpl.n	8004cfe <_dtoa_r+0x146>
 8004cec:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004cf0:	eeb4 6b47 	vcmp.f64	d6, d7
 8004cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf8:	bf18      	it	ne
 8004cfa:	f108 38ff 	addne.w	r8, r8, #4294967295
 8004cfe:	f1b8 0f16 	cmp.w	r8, #22
 8004d02:	d82b      	bhi.n	8004d5c <_dtoa_r+0x1a4>
 8004d04:	495e      	ldr	r1, [pc, #376]	@ (8004e80 <_dtoa_r+0x2c8>)
 8004d06:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8004d0a:	ed91 7b00 	vldr	d7, [r1]
 8004d0e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8004d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d16:	d501      	bpl.n	8004d1c <_dtoa_r+0x164>
 8004d18:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	e01e      	b.n	8004d5e <_dtoa_r+0x1a6>
 8004d20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d22:	4413      	add	r3, r2
 8004d24:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8004d28:	2920      	cmp	r1, #32
 8004d2a:	bfc1      	itttt	gt
 8004d2c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8004d30:	408e      	lslgt	r6, r1
 8004d32:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8004d36:	fa24 f101 	lsrgt.w	r1, r4, r1
 8004d3a:	bfd6      	itet	le
 8004d3c:	f1c1 0120 	rsble	r1, r1, #32
 8004d40:	4331      	orrgt	r1, r6
 8004d42:	fa04 f101 	lslle.w	r1, r4, r1
 8004d46:	ee07 1a90 	vmov	s15, r1
 8004d4a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	ee17 1a90 	vmov	r1, s15
 8004d54:	2501      	movs	r5, #1
 8004d56:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8004d5a:	e7a8      	b.n	8004cae <_dtoa_r+0xf6>
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	1ad2      	subs	r2, r2, r3
 8004d60:	1e53      	subs	r3, r2, #1
 8004d62:	9306      	str	r3, [sp, #24]
 8004d64:	bf45      	ittet	mi
 8004d66:	f1c2 0301 	rsbmi	r3, r2, #1
 8004d6a:	9305      	strmi	r3, [sp, #20]
 8004d6c:	2300      	movpl	r3, #0
 8004d6e:	2300      	movmi	r3, #0
 8004d70:	bf4c      	ite	mi
 8004d72:	9306      	strmi	r3, [sp, #24]
 8004d74:	9305      	strpl	r3, [sp, #20]
 8004d76:	f1b8 0f00 	cmp.w	r8, #0
 8004d7a:	910c      	str	r1, [sp, #48]	@ 0x30
 8004d7c:	db18      	blt.n	8004db0 <_dtoa_r+0x1f8>
 8004d7e:	9b06      	ldr	r3, [sp, #24]
 8004d80:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004d84:	4443      	add	r3, r8
 8004d86:	9306      	str	r3, [sp, #24]
 8004d88:	2300      	movs	r3, #0
 8004d8a:	9a07      	ldr	r2, [sp, #28]
 8004d8c:	2a09      	cmp	r2, #9
 8004d8e:	d849      	bhi.n	8004e24 <_dtoa_r+0x26c>
 8004d90:	2a05      	cmp	r2, #5
 8004d92:	bfc4      	itt	gt
 8004d94:	3a04      	subgt	r2, #4
 8004d96:	9207      	strgt	r2, [sp, #28]
 8004d98:	9a07      	ldr	r2, [sp, #28]
 8004d9a:	f1a2 0202 	sub.w	r2, r2, #2
 8004d9e:	bfcc      	ite	gt
 8004da0:	2400      	movgt	r4, #0
 8004da2:	2401      	movle	r4, #1
 8004da4:	2a03      	cmp	r2, #3
 8004da6:	d848      	bhi.n	8004e3a <_dtoa_r+0x282>
 8004da8:	e8df f002 	tbb	[pc, r2]
 8004dac:	3a2c2e0b 	.word	0x3a2c2e0b
 8004db0:	9b05      	ldr	r3, [sp, #20]
 8004db2:	2200      	movs	r2, #0
 8004db4:	eba3 0308 	sub.w	r3, r3, r8
 8004db8:	9305      	str	r3, [sp, #20]
 8004dba:	920a      	str	r2, [sp, #40]	@ 0x28
 8004dbc:	f1c8 0300 	rsb	r3, r8, #0
 8004dc0:	e7e3      	b.n	8004d8a <_dtoa_r+0x1d2>
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	9208      	str	r2, [sp, #32]
 8004dc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004dc8:	2a00      	cmp	r2, #0
 8004dca:	dc39      	bgt.n	8004e40 <_dtoa_r+0x288>
 8004dcc:	f04f 0b01 	mov.w	fp, #1
 8004dd0:	46da      	mov	sl, fp
 8004dd2:	465a      	mov	r2, fp
 8004dd4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8004dd8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8004ddc:	2100      	movs	r1, #0
 8004dde:	2004      	movs	r0, #4
 8004de0:	f100 0614 	add.w	r6, r0, #20
 8004de4:	4296      	cmp	r6, r2
 8004de6:	d930      	bls.n	8004e4a <_dtoa_r+0x292>
 8004de8:	6079      	str	r1, [r7, #4]
 8004dea:	4648      	mov	r0, r9
 8004dec:	9304      	str	r3, [sp, #16]
 8004dee:	f000 fd39 	bl	8005864 <_Balloc>
 8004df2:	9b04      	ldr	r3, [sp, #16]
 8004df4:	4607      	mov	r7, r0
 8004df6:	2800      	cmp	r0, #0
 8004df8:	d146      	bne.n	8004e88 <_dtoa_r+0x2d0>
 8004dfa:	4b22      	ldr	r3, [pc, #136]	@ (8004e84 <_dtoa_r+0x2cc>)
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	f240 11af 	movw	r1, #431	@ 0x1af
 8004e02:	e6f2      	b.n	8004bea <_dtoa_r+0x32>
 8004e04:	2201      	movs	r2, #1
 8004e06:	e7dd      	b.n	8004dc4 <_dtoa_r+0x20c>
 8004e08:	2200      	movs	r2, #0
 8004e0a:	9208      	str	r2, [sp, #32]
 8004e0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e0e:	eb08 0b02 	add.w	fp, r8, r2
 8004e12:	f10b 0a01 	add.w	sl, fp, #1
 8004e16:	4652      	mov	r2, sl
 8004e18:	2a01      	cmp	r2, #1
 8004e1a:	bfb8      	it	lt
 8004e1c:	2201      	movlt	r2, #1
 8004e1e:	e7db      	b.n	8004dd8 <_dtoa_r+0x220>
 8004e20:	2201      	movs	r2, #1
 8004e22:	e7f2      	b.n	8004e0a <_dtoa_r+0x252>
 8004e24:	2401      	movs	r4, #1
 8004e26:	2200      	movs	r2, #0
 8004e28:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8004e2c:	f04f 3bff 	mov.w	fp, #4294967295
 8004e30:	2100      	movs	r1, #0
 8004e32:	46da      	mov	sl, fp
 8004e34:	2212      	movs	r2, #18
 8004e36:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e38:	e7ce      	b.n	8004dd8 <_dtoa_r+0x220>
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	9208      	str	r2, [sp, #32]
 8004e3e:	e7f5      	b.n	8004e2c <_dtoa_r+0x274>
 8004e40:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8004e44:	46da      	mov	sl, fp
 8004e46:	465a      	mov	r2, fp
 8004e48:	e7c6      	b.n	8004dd8 <_dtoa_r+0x220>
 8004e4a:	3101      	adds	r1, #1
 8004e4c:	0040      	lsls	r0, r0, #1
 8004e4e:	e7c7      	b.n	8004de0 <_dtoa_r+0x228>
 8004e50:	636f4361 	.word	0x636f4361
 8004e54:	3fd287a7 	.word	0x3fd287a7
 8004e58:	8b60c8b3 	.word	0x8b60c8b3
 8004e5c:	3fc68a28 	.word	0x3fc68a28
 8004e60:	509f79fb 	.word	0x509f79fb
 8004e64:	3fd34413 	.word	0x3fd34413
 8004e68:	08006b1d 	.word	0x08006b1d
 8004e6c:	08006b34 	.word	0x08006b34
 8004e70:	7ff00000 	.word	0x7ff00000
 8004e74:	08006b19 	.word	0x08006b19
 8004e78:	08006aed 	.word	0x08006aed
 8004e7c:	08006aec 	.word	0x08006aec
 8004e80:	08006c30 	.word	0x08006c30
 8004e84:	08006b8c 	.word	0x08006b8c
 8004e88:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8004e8c:	f1ba 0f0e 	cmp.w	sl, #14
 8004e90:	6010      	str	r0, [r2, #0]
 8004e92:	d86f      	bhi.n	8004f74 <_dtoa_r+0x3bc>
 8004e94:	2c00      	cmp	r4, #0
 8004e96:	d06d      	beq.n	8004f74 <_dtoa_r+0x3bc>
 8004e98:	f1b8 0f00 	cmp.w	r8, #0
 8004e9c:	f340 80c2 	ble.w	8005024 <_dtoa_r+0x46c>
 8004ea0:	4aca      	ldr	r2, [pc, #808]	@ (80051cc <_dtoa_r+0x614>)
 8004ea2:	f008 010f 	and.w	r1, r8, #15
 8004ea6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004eaa:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8004eae:	ed92 7b00 	vldr	d7, [r2]
 8004eb2:	ea4f 1128 	mov.w	r1, r8, asr #4
 8004eb6:	f000 80a9 	beq.w	800500c <_dtoa_r+0x454>
 8004eba:	4ac5      	ldr	r2, [pc, #788]	@ (80051d0 <_dtoa_r+0x618>)
 8004ebc:	ed92 6b08 	vldr	d6, [r2, #32]
 8004ec0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8004ec4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004ec8:	f001 010f 	and.w	r1, r1, #15
 8004ecc:	2203      	movs	r2, #3
 8004ece:	48c0      	ldr	r0, [pc, #768]	@ (80051d0 <_dtoa_r+0x618>)
 8004ed0:	2900      	cmp	r1, #0
 8004ed2:	f040 809d 	bne.w	8005010 <_dtoa_r+0x458>
 8004ed6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004eda:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004ede:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004ee2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004ee4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004ee8:	2900      	cmp	r1, #0
 8004eea:	f000 80c1 	beq.w	8005070 <_dtoa_r+0x4b8>
 8004eee:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8004ef2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004efa:	f140 80b9 	bpl.w	8005070 <_dtoa_r+0x4b8>
 8004efe:	f1ba 0f00 	cmp.w	sl, #0
 8004f02:	f000 80b5 	beq.w	8005070 <_dtoa_r+0x4b8>
 8004f06:	f1bb 0f00 	cmp.w	fp, #0
 8004f0a:	dd31      	ble.n	8004f70 <_dtoa_r+0x3b8>
 8004f0c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8004f10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004f14:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004f18:	f108 31ff 	add.w	r1, r8, #4294967295
 8004f1c:	9104      	str	r1, [sp, #16]
 8004f1e:	3201      	adds	r2, #1
 8004f20:	465c      	mov	r4, fp
 8004f22:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004f26:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8004f2a:	ee07 2a90 	vmov	s15, r2
 8004f2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004f32:	eea7 5b06 	vfma.f64	d5, d7, d6
 8004f36:	ee15 2a90 	vmov	r2, s11
 8004f3a:	ec51 0b15 	vmov	r0, r1, d5
 8004f3e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8004f42:	2c00      	cmp	r4, #0
 8004f44:	f040 8098 	bne.w	8005078 <_dtoa_r+0x4c0>
 8004f48:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8004f4c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004f50:	ec41 0b17 	vmov	d7, r0, r1
 8004f54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5c:	f300 8261 	bgt.w	8005422 <_dtoa_r+0x86a>
 8004f60:	eeb1 7b47 	vneg.f64	d7, d7
 8004f64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6c:	f100 80f5 	bmi.w	800515a <_dtoa_r+0x5a2>
 8004f70:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004f74:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8004f76:	2a00      	cmp	r2, #0
 8004f78:	f2c0 812c 	blt.w	80051d4 <_dtoa_r+0x61c>
 8004f7c:	f1b8 0f0e 	cmp.w	r8, #14
 8004f80:	f300 8128 	bgt.w	80051d4 <_dtoa_r+0x61c>
 8004f84:	4b91      	ldr	r3, [pc, #580]	@ (80051cc <_dtoa_r+0x614>)
 8004f86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004f8a:	ed93 6b00 	vldr	d6, [r3]
 8004f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	da03      	bge.n	8004f9c <_dtoa_r+0x3e4>
 8004f94:	f1ba 0f00 	cmp.w	sl, #0
 8004f98:	f340 80d2 	ble.w	8005140 <_dtoa_r+0x588>
 8004f9c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8004fa0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004fa4:	463e      	mov	r6, r7
 8004fa6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8004faa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8004fae:	ee15 3a10 	vmov	r3, s10
 8004fb2:	3330      	adds	r3, #48	@ 0x30
 8004fb4:	f806 3b01 	strb.w	r3, [r6], #1
 8004fb8:	1bf3      	subs	r3, r6, r7
 8004fba:	459a      	cmp	sl, r3
 8004fbc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8004fc0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8004fc4:	f040 80f8 	bne.w	80051b8 <_dtoa_r+0x600>
 8004fc8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004fcc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd4:	f300 80dd 	bgt.w	8005192 <_dtoa_r+0x5da>
 8004fd8:	eeb4 7b46 	vcmp.f64	d7, d6
 8004fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe0:	d104      	bne.n	8004fec <_dtoa_r+0x434>
 8004fe2:	ee15 3a10 	vmov	r3, s10
 8004fe6:	07db      	lsls	r3, r3, #31
 8004fe8:	f100 80d3 	bmi.w	8005192 <_dtoa_r+0x5da>
 8004fec:	9901      	ldr	r1, [sp, #4]
 8004fee:	4648      	mov	r0, r9
 8004ff0:	f000 fc78 	bl	80058e4 <_Bfree>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004ff8:	7033      	strb	r3, [r6, #0]
 8004ffa:	f108 0301 	add.w	r3, r8, #1
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 8304 	beq.w	8005610 <_dtoa_r+0xa58>
 8005008:	601e      	str	r6, [r3, #0]
 800500a:	e301      	b.n	8005610 <_dtoa_r+0xa58>
 800500c:	2202      	movs	r2, #2
 800500e:	e75e      	b.n	8004ece <_dtoa_r+0x316>
 8005010:	07cc      	lsls	r4, r1, #31
 8005012:	d504      	bpl.n	800501e <_dtoa_r+0x466>
 8005014:	ed90 6b00 	vldr	d6, [r0]
 8005018:	3201      	adds	r2, #1
 800501a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800501e:	1049      	asrs	r1, r1, #1
 8005020:	3008      	adds	r0, #8
 8005022:	e755      	b.n	8004ed0 <_dtoa_r+0x318>
 8005024:	d022      	beq.n	800506c <_dtoa_r+0x4b4>
 8005026:	f1c8 0100 	rsb	r1, r8, #0
 800502a:	4a68      	ldr	r2, [pc, #416]	@ (80051cc <_dtoa_r+0x614>)
 800502c:	f001 000f 	and.w	r0, r1, #15
 8005030:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005034:	ed92 7b00 	vldr	d7, [r2]
 8005038:	ee28 7b07 	vmul.f64	d7, d8, d7
 800503c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005040:	4863      	ldr	r0, [pc, #396]	@ (80051d0 <_dtoa_r+0x618>)
 8005042:	1109      	asrs	r1, r1, #4
 8005044:	2400      	movs	r4, #0
 8005046:	2202      	movs	r2, #2
 8005048:	b929      	cbnz	r1, 8005056 <_dtoa_r+0x49e>
 800504a:	2c00      	cmp	r4, #0
 800504c:	f43f af49 	beq.w	8004ee2 <_dtoa_r+0x32a>
 8005050:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005054:	e745      	b.n	8004ee2 <_dtoa_r+0x32a>
 8005056:	07ce      	lsls	r6, r1, #31
 8005058:	d505      	bpl.n	8005066 <_dtoa_r+0x4ae>
 800505a:	ed90 6b00 	vldr	d6, [r0]
 800505e:	3201      	adds	r2, #1
 8005060:	2401      	movs	r4, #1
 8005062:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005066:	1049      	asrs	r1, r1, #1
 8005068:	3008      	adds	r0, #8
 800506a:	e7ed      	b.n	8005048 <_dtoa_r+0x490>
 800506c:	2202      	movs	r2, #2
 800506e:	e738      	b.n	8004ee2 <_dtoa_r+0x32a>
 8005070:	f8cd 8010 	str.w	r8, [sp, #16]
 8005074:	4654      	mov	r4, sl
 8005076:	e754      	b.n	8004f22 <_dtoa_r+0x36a>
 8005078:	4a54      	ldr	r2, [pc, #336]	@ (80051cc <_dtoa_r+0x614>)
 800507a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800507e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005082:	9a08      	ldr	r2, [sp, #32]
 8005084:	ec41 0b17 	vmov	d7, r0, r1
 8005088:	443c      	add	r4, r7
 800508a:	b34a      	cbz	r2, 80050e0 <_dtoa_r+0x528>
 800508c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8005090:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8005094:	463e      	mov	r6, r7
 8005096:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800509a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800509e:	ee35 7b47 	vsub.f64	d7, d5, d7
 80050a2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80050a6:	ee14 2a90 	vmov	r2, s9
 80050aa:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80050ae:	3230      	adds	r2, #48	@ 0x30
 80050b0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80050b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80050b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050bc:	f806 2b01 	strb.w	r2, [r6], #1
 80050c0:	d438      	bmi.n	8005134 <_dtoa_r+0x57c>
 80050c2:	ee32 5b46 	vsub.f64	d5, d2, d6
 80050c6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80050ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ce:	d462      	bmi.n	8005196 <_dtoa_r+0x5de>
 80050d0:	42a6      	cmp	r6, r4
 80050d2:	f43f af4d 	beq.w	8004f70 <_dtoa_r+0x3b8>
 80050d6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80050da:	ee26 6b03 	vmul.f64	d6, d6, d3
 80050de:	e7e0      	b.n	80050a2 <_dtoa_r+0x4ea>
 80050e0:	4621      	mov	r1, r4
 80050e2:	463e      	mov	r6, r7
 80050e4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80050e8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80050ec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80050f0:	ee14 2a90 	vmov	r2, s9
 80050f4:	3230      	adds	r2, #48	@ 0x30
 80050f6:	f806 2b01 	strb.w	r2, [r6], #1
 80050fa:	42a6      	cmp	r6, r4
 80050fc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005100:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005104:	d119      	bne.n	800513a <_dtoa_r+0x582>
 8005106:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800510a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800510e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005116:	dc3e      	bgt.n	8005196 <_dtoa_r+0x5de>
 8005118:	ee35 5b47 	vsub.f64	d5, d5, d7
 800511c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005124:	f57f af24 	bpl.w	8004f70 <_dtoa_r+0x3b8>
 8005128:	460e      	mov	r6, r1
 800512a:	3901      	subs	r1, #1
 800512c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005130:	2b30      	cmp	r3, #48	@ 0x30
 8005132:	d0f9      	beq.n	8005128 <_dtoa_r+0x570>
 8005134:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005138:	e758      	b.n	8004fec <_dtoa_r+0x434>
 800513a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800513e:	e7d5      	b.n	80050ec <_dtoa_r+0x534>
 8005140:	d10b      	bne.n	800515a <_dtoa_r+0x5a2>
 8005142:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005146:	ee26 6b07 	vmul.f64	d6, d6, d7
 800514a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800514e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005156:	f2c0 8161 	blt.w	800541c <_dtoa_r+0x864>
 800515a:	2400      	movs	r4, #0
 800515c:	4625      	mov	r5, r4
 800515e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005160:	43db      	mvns	r3, r3
 8005162:	9304      	str	r3, [sp, #16]
 8005164:	463e      	mov	r6, r7
 8005166:	f04f 0800 	mov.w	r8, #0
 800516a:	4621      	mov	r1, r4
 800516c:	4648      	mov	r0, r9
 800516e:	f000 fbb9 	bl	80058e4 <_Bfree>
 8005172:	2d00      	cmp	r5, #0
 8005174:	d0de      	beq.n	8005134 <_dtoa_r+0x57c>
 8005176:	f1b8 0f00 	cmp.w	r8, #0
 800517a:	d005      	beq.n	8005188 <_dtoa_r+0x5d0>
 800517c:	45a8      	cmp	r8, r5
 800517e:	d003      	beq.n	8005188 <_dtoa_r+0x5d0>
 8005180:	4641      	mov	r1, r8
 8005182:	4648      	mov	r0, r9
 8005184:	f000 fbae 	bl	80058e4 <_Bfree>
 8005188:	4629      	mov	r1, r5
 800518a:	4648      	mov	r0, r9
 800518c:	f000 fbaa 	bl	80058e4 <_Bfree>
 8005190:	e7d0      	b.n	8005134 <_dtoa_r+0x57c>
 8005192:	f8cd 8010 	str.w	r8, [sp, #16]
 8005196:	4633      	mov	r3, r6
 8005198:	461e      	mov	r6, r3
 800519a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800519e:	2a39      	cmp	r2, #57	@ 0x39
 80051a0:	d106      	bne.n	80051b0 <_dtoa_r+0x5f8>
 80051a2:	429f      	cmp	r7, r3
 80051a4:	d1f8      	bne.n	8005198 <_dtoa_r+0x5e0>
 80051a6:	9a04      	ldr	r2, [sp, #16]
 80051a8:	3201      	adds	r2, #1
 80051aa:	9204      	str	r2, [sp, #16]
 80051ac:	2230      	movs	r2, #48	@ 0x30
 80051ae:	703a      	strb	r2, [r7, #0]
 80051b0:	781a      	ldrb	r2, [r3, #0]
 80051b2:	3201      	adds	r2, #1
 80051b4:	701a      	strb	r2, [r3, #0]
 80051b6:	e7bd      	b.n	8005134 <_dtoa_r+0x57c>
 80051b8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80051bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80051c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c4:	f47f aeef 	bne.w	8004fa6 <_dtoa_r+0x3ee>
 80051c8:	e710      	b.n	8004fec <_dtoa_r+0x434>
 80051ca:	bf00      	nop
 80051cc:	08006c30 	.word	0x08006c30
 80051d0:	08006c08 	.word	0x08006c08
 80051d4:	9908      	ldr	r1, [sp, #32]
 80051d6:	2900      	cmp	r1, #0
 80051d8:	f000 80e3 	beq.w	80053a2 <_dtoa_r+0x7ea>
 80051dc:	9907      	ldr	r1, [sp, #28]
 80051de:	2901      	cmp	r1, #1
 80051e0:	f300 80c8 	bgt.w	8005374 <_dtoa_r+0x7bc>
 80051e4:	2d00      	cmp	r5, #0
 80051e6:	f000 80c1 	beq.w	800536c <_dtoa_r+0x7b4>
 80051ea:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80051ee:	9e05      	ldr	r6, [sp, #20]
 80051f0:	461c      	mov	r4, r3
 80051f2:	9304      	str	r3, [sp, #16]
 80051f4:	9b05      	ldr	r3, [sp, #20]
 80051f6:	4413      	add	r3, r2
 80051f8:	9305      	str	r3, [sp, #20]
 80051fa:	9b06      	ldr	r3, [sp, #24]
 80051fc:	2101      	movs	r1, #1
 80051fe:	4413      	add	r3, r2
 8005200:	4648      	mov	r0, r9
 8005202:	9306      	str	r3, [sp, #24]
 8005204:	f000 fc22 	bl	8005a4c <__i2b>
 8005208:	9b04      	ldr	r3, [sp, #16]
 800520a:	4605      	mov	r5, r0
 800520c:	b166      	cbz	r6, 8005228 <_dtoa_r+0x670>
 800520e:	9a06      	ldr	r2, [sp, #24]
 8005210:	2a00      	cmp	r2, #0
 8005212:	dd09      	ble.n	8005228 <_dtoa_r+0x670>
 8005214:	42b2      	cmp	r2, r6
 8005216:	9905      	ldr	r1, [sp, #20]
 8005218:	bfa8      	it	ge
 800521a:	4632      	movge	r2, r6
 800521c:	1a89      	subs	r1, r1, r2
 800521e:	9105      	str	r1, [sp, #20]
 8005220:	9906      	ldr	r1, [sp, #24]
 8005222:	1ab6      	subs	r6, r6, r2
 8005224:	1a8a      	subs	r2, r1, r2
 8005226:	9206      	str	r2, [sp, #24]
 8005228:	b1fb      	cbz	r3, 800526a <_dtoa_r+0x6b2>
 800522a:	9a08      	ldr	r2, [sp, #32]
 800522c:	2a00      	cmp	r2, #0
 800522e:	f000 80bc 	beq.w	80053aa <_dtoa_r+0x7f2>
 8005232:	b19c      	cbz	r4, 800525c <_dtoa_r+0x6a4>
 8005234:	4629      	mov	r1, r5
 8005236:	4622      	mov	r2, r4
 8005238:	4648      	mov	r0, r9
 800523a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800523c:	f000 fcc6 	bl	8005bcc <__pow5mult>
 8005240:	9a01      	ldr	r2, [sp, #4]
 8005242:	4601      	mov	r1, r0
 8005244:	4605      	mov	r5, r0
 8005246:	4648      	mov	r0, r9
 8005248:	f000 fc16 	bl	8005a78 <__multiply>
 800524c:	9901      	ldr	r1, [sp, #4]
 800524e:	9004      	str	r0, [sp, #16]
 8005250:	4648      	mov	r0, r9
 8005252:	f000 fb47 	bl	80058e4 <_Bfree>
 8005256:	9a04      	ldr	r2, [sp, #16]
 8005258:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800525a:	9201      	str	r2, [sp, #4]
 800525c:	1b1a      	subs	r2, r3, r4
 800525e:	d004      	beq.n	800526a <_dtoa_r+0x6b2>
 8005260:	9901      	ldr	r1, [sp, #4]
 8005262:	4648      	mov	r0, r9
 8005264:	f000 fcb2 	bl	8005bcc <__pow5mult>
 8005268:	9001      	str	r0, [sp, #4]
 800526a:	2101      	movs	r1, #1
 800526c:	4648      	mov	r0, r9
 800526e:	f000 fbed 	bl	8005a4c <__i2b>
 8005272:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005274:	4604      	mov	r4, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 81d0 	beq.w	800561c <_dtoa_r+0xa64>
 800527c:	461a      	mov	r2, r3
 800527e:	4601      	mov	r1, r0
 8005280:	4648      	mov	r0, r9
 8005282:	f000 fca3 	bl	8005bcc <__pow5mult>
 8005286:	9b07      	ldr	r3, [sp, #28]
 8005288:	2b01      	cmp	r3, #1
 800528a:	4604      	mov	r4, r0
 800528c:	f300 8095 	bgt.w	80053ba <_dtoa_r+0x802>
 8005290:	9b02      	ldr	r3, [sp, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	f040 808b 	bne.w	80053ae <_dtoa_r+0x7f6>
 8005298:	9b03      	ldr	r3, [sp, #12]
 800529a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800529e:	2a00      	cmp	r2, #0
 80052a0:	f040 8087 	bne.w	80053b2 <_dtoa_r+0x7fa>
 80052a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80052a8:	0d12      	lsrs	r2, r2, #20
 80052aa:	0512      	lsls	r2, r2, #20
 80052ac:	2a00      	cmp	r2, #0
 80052ae:	f000 8082 	beq.w	80053b6 <_dtoa_r+0x7fe>
 80052b2:	9b05      	ldr	r3, [sp, #20]
 80052b4:	3301      	adds	r3, #1
 80052b6:	9305      	str	r3, [sp, #20]
 80052b8:	9b06      	ldr	r3, [sp, #24]
 80052ba:	3301      	adds	r3, #1
 80052bc:	9306      	str	r3, [sp, #24]
 80052be:	2301      	movs	r3, #1
 80052c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 81af 	beq.w	8005628 <_dtoa_r+0xa70>
 80052ca:	6922      	ldr	r2, [r4, #16]
 80052cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80052d0:	6910      	ldr	r0, [r2, #16]
 80052d2:	f000 fb6f 	bl	80059b4 <__hi0bits>
 80052d6:	f1c0 0020 	rsb	r0, r0, #32
 80052da:	9b06      	ldr	r3, [sp, #24]
 80052dc:	4418      	add	r0, r3
 80052de:	f010 001f 	ands.w	r0, r0, #31
 80052e2:	d076      	beq.n	80053d2 <_dtoa_r+0x81a>
 80052e4:	f1c0 0220 	rsb	r2, r0, #32
 80052e8:	2a04      	cmp	r2, #4
 80052ea:	dd69      	ble.n	80053c0 <_dtoa_r+0x808>
 80052ec:	9b05      	ldr	r3, [sp, #20]
 80052ee:	f1c0 001c 	rsb	r0, r0, #28
 80052f2:	4403      	add	r3, r0
 80052f4:	9305      	str	r3, [sp, #20]
 80052f6:	9b06      	ldr	r3, [sp, #24]
 80052f8:	4406      	add	r6, r0
 80052fa:	4403      	add	r3, r0
 80052fc:	9306      	str	r3, [sp, #24]
 80052fe:	9b05      	ldr	r3, [sp, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	dd05      	ble.n	8005310 <_dtoa_r+0x758>
 8005304:	9901      	ldr	r1, [sp, #4]
 8005306:	461a      	mov	r2, r3
 8005308:	4648      	mov	r0, r9
 800530a:	f000 fcb9 	bl	8005c80 <__lshift>
 800530e:	9001      	str	r0, [sp, #4]
 8005310:	9b06      	ldr	r3, [sp, #24]
 8005312:	2b00      	cmp	r3, #0
 8005314:	dd05      	ble.n	8005322 <_dtoa_r+0x76a>
 8005316:	4621      	mov	r1, r4
 8005318:	461a      	mov	r2, r3
 800531a:	4648      	mov	r0, r9
 800531c:	f000 fcb0 	bl	8005c80 <__lshift>
 8005320:	4604      	mov	r4, r0
 8005322:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005324:	2b00      	cmp	r3, #0
 8005326:	d056      	beq.n	80053d6 <_dtoa_r+0x81e>
 8005328:	9801      	ldr	r0, [sp, #4]
 800532a:	4621      	mov	r1, r4
 800532c:	f000 fd14 	bl	8005d58 <__mcmp>
 8005330:	2800      	cmp	r0, #0
 8005332:	da50      	bge.n	80053d6 <_dtoa_r+0x81e>
 8005334:	f108 33ff 	add.w	r3, r8, #4294967295
 8005338:	9304      	str	r3, [sp, #16]
 800533a:	9901      	ldr	r1, [sp, #4]
 800533c:	2300      	movs	r3, #0
 800533e:	220a      	movs	r2, #10
 8005340:	4648      	mov	r0, r9
 8005342:	f000 faf1 	bl	8005928 <__multadd>
 8005346:	9b08      	ldr	r3, [sp, #32]
 8005348:	9001      	str	r0, [sp, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 816e 	beq.w	800562c <_dtoa_r+0xa74>
 8005350:	4629      	mov	r1, r5
 8005352:	2300      	movs	r3, #0
 8005354:	220a      	movs	r2, #10
 8005356:	4648      	mov	r0, r9
 8005358:	f000 fae6 	bl	8005928 <__multadd>
 800535c:	f1bb 0f00 	cmp.w	fp, #0
 8005360:	4605      	mov	r5, r0
 8005362:	dc64      	bgt.n	800542e <_dtoa_r+0x876>
 8005364:	9b07      	ldr	r3, [sp, #28]
 8005366:	2b02      	cmp	r3, #2
 8005368:	dc3e      	bgt.n	80053e8 <_dtoa_r+0x830>
 800536a:	e060      	b.n	800542e <_dtoa_r+0x876>
 800536c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800536e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005372:	e73c      	b.n	80051ee <_dtoa_r+0x636>
 8005374:	f10a 34ff 	add.w	r4, sl, #4294967295
 8005378:	42a3      	cmp	r3, r4
 800537a:	bfbf      	itttt	lt
 800537c:	1ae2      	sublt	r2, r4, r3
 800537e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005380:	189b      	addlt	r3, r3, r2
 8005382:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8005384:	bfae      	itee	ge
 8005386:	1b1c      	subge	r4, r3, r4
 8005388:	4623      	movlt	r3, r4
 800538a:	2400      	movlt	r4, #0
 800538c:	f1ba 0f00 	cmp.w	sl, #0
 8005390:	bfb5      	itete	lt
 8005392:	9a05      	ldrlt	r2, [sp, #20]
 8005394:	9e05      	ldrge	r6, [sp, #20]
 8005396:	eba2 060a 	sublt.w	r6, r2, sl
 800539a:	4652      	movge	r2, sl
 800539c:	bfb8      	it	lt
 800539e:	2200      	movlt	r2, #0
 80053a0:	e727      	b.n	80051f2 <_dtoa_r+0x63a>
 80053a2:	9e05      	ldr	r6, [sp, #20]
 80053a4:	9d08      	ldr	r5, [sp, #32]
 80053a6:	461c      	mov	r4, r3
 80053a8:	e730      	b.n	800520c <_dtoa_r+0x654>
 80053aa:	461a      	mov	r2, r3
 80053ac:	e758      	b.n	8005260 <_dtoa_r+0x6a8>
 80053ae:	2300      	movs	r3, #0
 80053b0:	e786      	b.n	80052c0 <_dtoa_r+0x708>
 80053b2:	9b02      	ldr	r3, [sp, #8]
 80053b4:	e784      	b.n	80052c0 <_dtoa_r+0x708>
 80053b6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80053b8:	e783      	b.n	80052c2 <_dtoa_r+0x70a>
 80053ba:	2300      	movs	r3, #0
 80053bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053be:	e784      	b.n	80052ca <_dtoa_r+0x712>
 80053c0:	d09d      	beq.n	80052fe <_dtoa_r+0x746>
 80053c2:	9b05      	ldr	r3, [sp, #20]
 80053c4:	321c      	adds	r2, #28
 80053c6:	4413      	add	r3, r2
 80053c8:	9305      	str	r3, [sp, #20]
 80053ca:	9b06      	ldr	r3, [sp, #24]
 80053cc:	4416      	add	r6, r2
 80053ce:	4413      	add	r3, r2
 80053d0:	e794      	b.n	80052fc <_dtoa_r+0x744>
 80053d2:	4602      	mov	r2, r0
 80053d4:	e7f5      	b.n	80053c2 <_dtoa_r+0x80a>
 80053d6:	f1ba 0f00 	cmp.w	sl, #0
 80053da:	f8cd 8010 	str.w	r8, [sp, #16]
 80053de:	46d3      	mov	fp, sl
 80053e0:	dc21      	bgt.n	8005426 <_dtoa_r+0x86e>
 80053e2:	9b07      	ldr	r3, [sp, #28]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	dd1e      	ble.n	8005426 <_dtoa_r+0x86e>
 80053e8:	f1bb 0f00 	cmp.w	fp, #0
 80053ec:	f47f aeb7 	bne.w	800515e <_dtoa_r+0x5a6>
 80053f0:	4621      	mov	r1, r4
 80053f2:	465b      	mov	r3, fp
 80053f4:	2205      	movs	r2, #5
 80053f6:	4648      	mov	r0, r9
 80053f8:	f000 fa96 	bl	8005928 <__multadd>
 80053fc:	4601      	mov	r1, r0
 80053fe:	4604      	mov	r4, r0
 8005400:	9801      	ldr	r0, [sp, #4]
 8005402:	f000 fca9 	bl	8005d58 <__mcmp>
 8005406:	2800      	cmp	r0, #0
 8005408:	f77f aea9 	ble.w	800515e <_dtoa_r+0x5a6>
 800540c:	463e      	mov	r6, r7
 800540e:	2331      	movs	r3, #49	@ 0x31
 8005410:	f806 3b01 	strb.w	r3, [r6], #1
 8005414:	9b04      	ldr	r3, [sp, #16]
 8005416:	3301      	adds	r3, #1
 8005418:	9304      	str	r3, [sp, #16]
 800541a:	e6a4      	b.n	8005166 <_dtoa_r+0x5ae>
 800541c:	f8cd 8010 	str.w	r8, [sp, #16]
 8005420:	4654      	mov	r4, sl
 8005422:	4625      	mov	r5, r4
 8005424:	e7f2      	b.n	800540c <_dtoa_r+0x854>
 8005426:	9b08      	ldr	r3, [sp, #32]
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 8103 	beq.w	8005634 <_dtoa_r+0xa7c>
 800542e:	2e00      	cmp	r6, #0
 8005430:	dd05      	ble.n	800543e <_dtoa_r+0x886>
 8005432:	4629      	mov	r1, r5
 8005434:	4632      	mov	r2, r6
 8005436:	4648      	mov	r0, r9
 8005438:	f000 fc22 	bl	8005c80 <__lshift>
 800543c:	4605      	mov	r5, r0
 800543e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005440:	2b00      	cmp	r3, #0
 8005442:	d058      	beq.n	80054f6 <_dtoa_r+0x93e>
 8005444:	6869      	ldr	r1, [r5, #4]
 8005446:	4648      	mov	r0, r9
 8005448:	f000 fa0c 	bl	8005864 <_Balloc>
 800544c:	4606      	mov	r6, r0
 800544e:	b928      	cbnz	r0, 800545c <_dtoa_r+0x8a4>
 8005450:	4b82      	ldr	r3, [pc, #520]	@ (800565c <_dtoa_r+0xaa4>)
 8005452:	4602      	mov	r2, r0
 8005454:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005458:	f7ff bbc7 	b.w	8004bea <_dtoa_r+0x32>
 800545c:	692a      	ldr	r2, [r5, #16]
 800545e:	3202      	adds	r2, #2
 8005460:	0092      	lsls	r2, r2, #2
 8005462:	f105 010c 	add.w	r1, r5, #12
 8005466:	300c      	adds	r0, #12
 8005468:	f000 ffac 	bl	80063c4 <memcpy>
 800546c:	2201      	movs	r2, #1
 800546e:	4631      	mov	r1, r6
 8005470:	4648      	mov	r0, r9
 8005472:	f000 fc05 	bl	8005c80 <__lshift>
 8005476:	1c7b      	adds	r3, r7, #1
 8005478:	9305      	str	r3, [sp, #20]
 800547a:	eb07 030b 	add.w	r3, r7, fp
 800547e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005480:	9b02      	ldr	r3, [sp, #8]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	46a8      	mov	r8, r5
 8005488:	9308      	str	r3, [sp, #32]
 800548a:	4605      	mov	r5, r0
 800548c:	9b05      	ldr	r3, [sp, #20]
 800548e:	9801      	ldr	r0, [sp, #4]
 8005490:	4621      	mov	r1, r4
 8005492:	f103 3bff 	add.w	fp, r3, #4294967295
 8005496:	f7ff fb04 	bl	8004aa2 <quorem>
 800549a:	4641      	mov	r1, r8
 800549c:	9002      	str	r0, [sp, #8]
 800549e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80054a2:	9801      	ldr	r0, [sp, #4]
 80054a4:	f000 fc58 	bl	8005d58 <__mcmp>
 80054a8:	462a      	mov	r2, r5
 80054aa:	9006      	str	r0, [sp, #24]
 80054ac:	4621      	mov	r1, r4
 80054ae:	4648      	mov	r0, r9
 80054b0:	f000 fc6e 	bl	8005d90 <__mdiff>
 80054b4:	68c2      	ldr	r2, [r0, #12]
 80054b6:	4606      	mov	r6, r0
 80054b8:	b9fa      	cbnz	r2, 80054fa <_dtoa_r+0x942>
 80054ba:	4601      	mov	r1, r0
 80054bc:	9801      	ldr	r0, [sp, #4]
 80054be:	f000 fc4b 	bl	8005d58 <__mcmp>
 80054c2:	4602      	mov	r2, r0
 80054c4:	4631      	mov	r1, r6
 80054c6:	4648      	mov	r0, r9
 80054c8:	920a      	str	r2, [sp, #40]	@ 0x28
 80054ca:	f000 fa0b 	bl	80058e4 <_Bfree>
 80054ce:	9b07      	ldr	r3, [sp, #28]
 80054d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80054d2:	9e05      	ldr	r6, [sp, #20]
 80054d4:	ea43 0102 	orr.w	r1, r3, r2
 80054d8:	9b08      	ldr	r3, [sp, #32]
 80054da:	4319      	orrs	r1, r3
 80054dc:	d10f      	bne.n	80054fe <_dtoa_r+0x946>
 80054de:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80054e2:	d028      	beq.n	8005536 <_dtoa_r+0x97e>
 80054e4:	9b06      	ldr	r3, [sp, #24]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	dd02      	ble.n	80054f0 <_dtoa_r+0x938>
 80054ea:	9b02      	ldr	r3, [sp, #8]
 80054ec:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80054f0:	f88b a000 	strb.w	sl, [fp]
 80054f4:	e639      	b.n	800516a <_dtoa_r+0x5b2>
 80054f6:	4628      	mov	r0, r5
 80054f8:	e7bd      	b.n	8005476 <_dtoa_r+0x8be>
 80054fa:	2201      	movs	r2, #1
 80054fc:	e7e2      	b.n	80054c4 <_dtoa_r+0x90c>
 80054fe:	9b06      	ldr	r3, [sp, #24]
 8005500:	2b00      	cmp	r3, #0
 8005502:	db04      	blt.n	800550e <_dtoa_r+0x956>
 8005504:	9907      	ldr	r1, [sp, #28]
 8005506:	430b      	orrs	r3, r1
 8005508:	9908      	ldr	r1, [sp, #32]
 800550a:	430b      	orrs	r3, r1
 800550c:	d120      	bne.n	8005550 <_dtoa_r+0x998>
 800550e:	2a00      	cmp	r2, #0
 8005510:	ddee      	ble.n	80054f0 <_dtoa_r+0x938>
 8005512:	9901      	ldr	r1, [sp, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	4648      	mov	r0, r9
 8005518:	f000 fbb2 	bl	8005c80 <__lshift>
 800551c:	4621      	mov	r1, r4
 800551e:	9001      	str	r0, [sp, #4]
 8005520:	f000 fc1a 	bl	8005d58 <__mcmp>
 8005524:	2800      	cmp	r0, #0
 8005526:	dc03      	bgt.n	8005530 <_dtoa_r+0x978>
 8005528:	d1e2      	bne.n	80054f0 <_dtoa_r+0x938>
 800552a:	f01a 0f01 	tst.w	sl, #1
 800552e:	d0df      	beq.n	80054f0 <_dtoa_r+0x938>
 8005530:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005534:	d1d9      	bne.n	80054ea <_dtoa_r+0x932>
 8005536:	2339      	movs	r3, #57	@ 0x39
 8005538:	f88b 3000 	strb.w	r3, [fp]
 800553c:	4633      	mov	r3, r6
 800553e:	461e      	mov	r6, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005546:	2a39      	cmp	r2, #57	@ 0x39
 8005548:	d053      	beq.n	80055f2 <_dtoa_r+0xa3a>
 800554a:	3201      	adds	r2, #1
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	e60c      	b.n	800516a <_dtoa_r+0x5b2>
 8005550:	2a00      	cmp	r2, #0
 8005552:	dd07      	ble.n	8005564 <_dtoa_r+0x9ac>
 8005554:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005558:	d0ed      	beq.n	8005536 <_dtoa_r+0x97e>
 800555a:	f10a 0301 	add.w	r3, sl, #1
 800555e:	f88b 3000 	strb.w	r3, [fp]
 8005562:	e602      	b.n	800516a <_dtoa_r+0x5b2>
 8005564:	9b05      	ldr	r3, [sp, #20]
 8005566:	9a05      	ldr	r2, [sp, #20]
 8005568:	f803 ac01 	strb.w	sl, [r3, #-1]
 800556c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800556e:	4293      	cmp	r3, r2
 8005570:	d029      	beq.n	80055c6 <_dtoa_r+0xa0e>
 8005572:	9901      	ldr	r1, [sp, #4]
 8005574:	2300      	movs	r3, #0
 8005576:	220a      	movs	r2, #10
 8005578:	4648      	mov	r0, r9
 800557a:	f000 f9d5 	bl	8005928 <__multadd>
 800557e:	45a8      	cmp	r8, r5
 8005580:	9001      	str	r0, [sp, #4]
 8005582:	f04f 0300 	mov.w	r3, #0
 8005586:	f04f 020a 	mov.w	r2, #10
 800558a:	4641      	mov	r1, r8
 800558c:	4648      	mov	r0, r9
 800558e:	d107      	bne.n	80055a0 <_dtoa_r+0x9e8>
 8005590:	f000 f9ca 	bl	8005928 <__multadd>
 8005594:	4680      	mov	r8, r0
 8005596:	4605      	mov	r5, r0
 8005598:	9b05      	ldr	r3, [sp, #20]
 800559a:	3301      	adds	r3, #1
 800559c:	9305      	str	r3, [sp, #20]
 800559e:	e775      	b.n	800548c <_dtoa_r+0x8d4>
 80055a0:	f000 f9c2 	bl	8005928 <__multadd>
 80055a4:	4629      	mov	r1, r5
 80055a6:	4680      	mov	r8, r0
 80055a8:	2300      	movs	r3, #0
 80055aa:	220a      	movs	r2, #10
 80055ac:	4648      	mov	r0, r9
 80055ae:	f000 f9bb 	bl	8005928 <__multadd>
 80055b2:	4605      	mov	r5, r0
 80055b4:	e7f0      	b.n	8005598 <_dtoa_r+0x9e0>
 80055b6:	f1bb 0f00 	cmp.w	fp, #0
 80055ba:	bfcc      	ite	gt
 80055bc:	465e      	movgt	r6, fp
 80055be:	2601      	movle	r6, #1
 80055c0:	443e      	add	r6, r7
 80055c2:	f04f 0800 	mov.w	r8, #0
 80055c6:	9901      	ldr	r1, [sp, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	4648      	mov	r0, r9
 80055cc:	f000 fb58 	bl	8005c80 <__lshift>
 80055d0:	4621      	mov	r1, r4
 80055d2:	9001      	str	r0, [sp, #4]
 80055d4:	f000 fbc0 	bl	8005d58 <__mcmp>
 80055d8:	2800      	cmp	r0, #0
 80055da:	dcaf      	bgt.n	800553c <_dtoa_r+0x984>
 80055dc:	d102      	bne.n	80055e4 <_dtoa_r+0xa2c>
 80055de:	f01a 0f01 	tst.w	sl, #1
 80055e2:	d1ab      	bne.n	800553c <_dtoa_r+0x984>
 80055e4:	4633      	mov	r3, r6
 80055e6:	461e      	mov	r6, r3
 80055e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055ec:	2a30      	cmp	r2, #48	@ 0x30
 80055ee:	d0fa      	beq.n	80055e6 <_dtoa_r+0xa2e>
 80055f0:	e5bb      	b.n	800516a <_dtoa_r+0x5b2>
 80055f2:	429f      	cmp	r7, r3
 80055f4:	d1a3      	bne.n	800553e <_dtoa_r+0x986>
 80055f6:	9b04      	ldr	r3, [sp, #16]
 80055f8:	3301      	adds	r3, #1
 80055fa:	9304      	str	r3, [sp, #16]
 80055fc:	2331      	movs	r3, #49	@ 0x31
 80055fe:	703b      	strb	r3, [r7, #0]
 8005600:	e5b3      	b.n	800516a <_dtoa_r+0x5b2>
 8005602:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005604:	4f16      	ldr	r7, [pc, #88]	@ (8005660 <_dtoa_r+0xaa8>)
 8005606:	b11b      	cbz	r3, 8005610 <_dtoa_r+0xa58>
 8005608:	f107 0308 	add.w	r3, r7, #8
 800560c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800560e:	6013      	str	r3, [r2, #0]
 8005610:	4638      	mov	r0, r7
 8005612:	b011      	add	sp, #68	@ 0x44
 8005614:	ecbd 8b02 	vpop	{d8}
 8005618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800561c:	9b07      	ldr	r3, [sp, #28]
 800561e:	2b01      	cmp	r3, #1
 8005620:	f77f ae36 	ble.w	8005290 <_dtoa_r+0x6d8>
 8005624:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005626:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005628:	2001      	movs	r0, #1
 800562a:	e656      	b.n	80052da <_dtoa_r+0x722>
 800562c:	f1bb 0f00 	cmp.w	fp, #0
 8005630:	f77f aed7 	ble.w	80053e2 <_dtoa_r+0x82a>
 8005634:	463e      	mov	r6, r7
 8005636:	9801      	ldr	r0, [sp, #4]
 8005638:	4621      	mov	r1, r4
 800563a:	f7ff fa32 	bl	8004aa2 <quorem>
 800563e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8005642:	f806 ab01 	strb.w	sl, [r6], #1
 8005646:	1bf2      	subs	r2, r6, r7
 8005648:	4593      	cmp	fp, r2
 800564a:	ddb4      	ble.n	80055b6 <_dtoa_r+0x9fe>
 800564c:	9901      	ldr	r1, [sp, #4]
 800564e:	2300      	movs	r3, #0
 8005650:	220a      	movs	r2, #10
 8005652:	4648      	mov	r0, r9
 8005654:	f000 f968 	bl	8005928 <__multadd>
 8005658:	9001      	str	r0, [sp, #4]
 800565a:	e7ec      	b.n	8005636 <_dtoa_r+0xa7e>
 800565c:	08006b8c 	.word	0x08006b8c
 8005660:	08006b10 	.word	0x08006b10

08005664 <_free_r>:
 8005664:	b538      	push	{r3, r4, r5, lr}
 8005666:	4605      	mov	r5, r0
 8005668:	2900      	cmp	r1, #0
 800566a:	d041      	beq.n	80056f0 <_free_r+0x8c>
 800566c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005670:	1f0c      	subs	r4, r1, #4
 8005672:	2b00      	cmp	r3, #0
 8005674:	bfb8      	it	lt
 8005676:	18e4      	addlt	r4, r4, r3
 8005678:	f000 f8e8 	bl	800584c <__malloc_lock>
 800567c:	4a1d      	ldr	r2, [pc, #116]	@ (80056f4 <_free_r+0x90>)
 800567e:	6813      	ldr	r3, [r2, #0]
 8005680:	b933      	cbnz	r3, 8005690 <_free_r+0x2c>
 8005682:	6063      	str	r3, [r4, #4]
 8005684:	6014      	str	r4, [r2, #0]
 8005686:	4628      	mov	r0, r5
 8005688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800568c:	f000 b8e4 	b.w	8005858 <__malloc_unlock>
 8005690:	42a3      	cmp	r3, r4
 8005692:	d908      	bls.n	80056a6 <_free_r+0x42>
 8005694:	6820      	ldr	r0, [r4, #0]
 8005696:	1821      	adds	r1, r4, r0
 8005698:	428b      	cmp	r3, r1
 800569a:	bf01      	itttt	eq
 800569c:	6819      	ldreq	r1, [r3, #0]
 800569e:	685b      	ldreq	r3, [r3, #4]
 80056a0:	1809      	addeq	r1, r1, r0
 80056a2:	6021      	streq	r1, [r4, #0]
 80056a4:	e7ed      	b.n	8005682 <_free_r+0x1e>
 80056a6:	461a      	mov	r2, r3
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	b10b      	cbz	r3, 80056b0 <_free_r+0x4c>
 80056ac:	42a3      	cmp	r3, r4
 80056ae:	d9fa      	bls.n	80056a6 <_free_r+0x42>
 80056b0:	6811      	ldr	r1, [r2, #0]
 80056b2:	1850      	adds	r0, r2, r1
 80056b4:	42a0      	cmp	r0, r4
 80056b6:	d10b      	bne.n	80056d0 <_free_r+0x6c>
 80056b8:	6820      	ldr	r0, [r4, #0]
 80056ba:	4401      	add	r1, r0
 80056bc:	1850      	adds	r0, r2, r1
 80056be:	4283      	cmp	r3, r0
 80056c0:	6011      	str	r1, [r2, #0]
 80056c2:	d1e0      	bne.n	8005686 <_free_r+0x22>
 80056c4:	6818      	ldr	r0, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	6053      	str	r3, [r2, #4]
 80056ca:	4408      	add	r0, r1
 80056cc:	6010      	str	r0, [r2, #0]
 80056ce:	e7da      	b.n	8005686 <_free_r+0x22>
 80056d0:	d902      	bls.n	80056d8 <_free_r+0x74>
 80056d2:	230c      	movs	r3, #12
 80056d4:	602b      	str	r3, [r5, #0]
 80056d6:	e7d6      	b.n	8005686 <_free_r+0x22>
 80056d8:	6820      	ldr	r0, [r4, #0]
 80056da:	1821      	adds	r1, r4, r0
 80056dc:	428b      	cmp	r3, r1
 80056de:	bf04      	itt	eq
 80056e0:	6819      	ldreq	r1, [r3, #0]
 80056e2:	685b      	ldreq	r3, [r3, #4]
 80056e4:	6063      	str	r3, [r4, #4]
 80056e6:	bf04      	itt	eq
 80056e8:	1809      	addeq	r1, r1, r0
 80056ea:	6021      	streq	r1, [r4, #0]
 80056ec:	6054      	str	r4, [r2, #4]
 80056ee:	e7ca      	b.n	8005686 <_free_r+0x22>
 80056f0:	bd38      	pop	{r3, r4, r5, pc}
 80056f2:	bf00      	nop
 80056f4:	20000424 	.word	0x20000424

080056f8 <malloc>:
 80056f8:	4b02      	ldr	r3, [pc, #8]	@ (8005704 <malloc+0xc>)
 80056fa:	4601      	mov	r1, r0
 80056fc:	6818      	ldr	r0, [r3, #0]
 80056fe:	f000 b825 	b.w	800574c <_malloc_r>
 8005702:	bf00      	nop
 8005704:	20000020 	.word	0x20000020

08005708 <sbrk_aligned>:
 8005708:	b570      	push	{r4, r5, r6, lr}
 800570a:	4e0f      	ldr	r6, [pc, #60]	@ (8005748 <sbrk_aligned+0x40>)
 800570c:	460c      	mov	r4, r1
 800570e:	6831      	ldr	r1, [r6, #0]
 8005710:	4605      	mov	r5, r0
 8005712:	b911      	cbnz	r1, 800571a <sbrk_aligned+0x12>
 8005714:	f000 fe46 	bl	80063a4 <_sbrk_r>
 8005718:	6030      	str	r0, [r6, #0]
 800571a:	4621      	mov	r1, r4
 800571c:	4628      	mov	r0, r5
 800571e:	f000 fe41 	bl	80063a4 <_sbrk_r>
 8005722:	1c43      	adds	r3, r0, #1
 8005724:	d103      	bne.n	800572e <sbrk_aligned+0x26>
 8005726:	f04f 34ff 	mov.w	r4, #4294967295
 800572a:	4620      	mov	r0, r4
 800572c:	bd70      	pop	{r4, r5, r6, pc}
 800572e:	1cc4      	adds	r4, r0, #3
 8005730:	f024 0403 	bic.w	r4, r4, #3
 8005734:	42a0      	cmp	r0, r4
 8005736:	d0f8      	beq.n	800572a <sbrk_aligned+0x22>
 8005738:	1a21      	subs	r1, r4, r0
 800573a:	4628      	mov	r0, r5
 800573c:	f000 fe32 	bl	80063a4 <_sbrk_r>
 8005740:	3001      	adds	r0, #1
 8005742:	d1f2      	bne.n	800572a <sbrk_aligned+0x22>
 8005744:	e7ef      	b.n	8005726 <sbrk_aligned+0x1e>
 8005746:	bf00      	nop
 8005748:	20000420 	.word	0x20000420

0800574c <_malloc_r>:
 800574c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005750:	1ccd      	adds	r5, r1, #3
 8005752:	f025 0503 	bic.w	r5, r5, #3
 8005756:	3508      	adds	r5, #8
 8005758:	2d0c      	cmp	r5, #12
 800575a:	bf38      	it	cc
 800575c:	250c      	movcc	r5, #12
 800575e:	2d00      	cmp	r5, #0
 8005760:	4606      	mov	r6, r0
 8005762:	db01      	blt.n	8005768 <_malloc_r+0x1c>
 8005764:	42a9      	cmp	r1, r5
 8005766:	d904      	bls.n	8005772 <_malloc_r+0x26>
 8005768:	230c      	movs	r3, #12
 800576a:	6033      	str	r3, [r6, #0]
 800576c:	2000      	movs	r0, #0
 800576e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005772:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005848 <_malloc_r+0xfc>
 8005776:	f000 f869 	bl	800584c <__malloc_lock>
 800577a:	f8d8 3000 	ldr.w	r3, [r8]
 800577e:	461c      	mov	r4, r3
 8005780:	bb44      	cbnz	r4, 80057d4 <_malloc_r+0x88>
 8005782:	4629      	mov	r1, r5
 8005784:	4630      	mov	r0, r6
 8005786:	f7ff ffbf 	bl	8005708 <sbrk_aligned>
 800578a:	1c43      	adds	r3, r0, #1
 800578c:	4604      	mov	r4, r0
 800578e:	d158      	bne.n	8005842 <_malloc_r+0xf6>
 8005790:	f8d8 4000 	ldr.w	r4, [r8]
 8005794:	4627      	mov	r7, r4
 8005796:	2f00      	cmp	r7, #0
 8005798:	d143      	bne.n	8005822 <_malloc_r+0xd6>
 800579a:	2c00      	cmp	r4, #0
 800579c:	d04b      	beq.n	8005836 <_malloc_r+0xea>
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	4639      	mov	r1, r7
 80057a2:	4630      	mov	r0, r6
 80057a4:	eb04 0903 	add.w	r9, r4, r3
 80057a8:	f000 fdfc 	bl	80063a4 <_sbrk_r>
 80057ac:	4581      	cmp	r9, r0
 80057ae:	d142      	bne.n	8005836 <_malloc_r+0xea>
 80057b0:	6821      	ldr	r1, [r4, #0]
 80057b2:	1a6d      	subs	r5, r5, r1
 80057b4:	4629      	mov	r1, r5
 80057b6:	4630      	mov	r0, r6
 80057b8:	f7ff ffa6 	bl	8005708 <sbrk_aligned>
 80057bc:	3001      	adds	r0, #1
 80057be:	d03a      	beq.n	8005836 <_malloc_r+0xea>
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	442b      	add	r3, r5
 80057c4:	6023      	str	r3, [r4, #0]
 80057c6:	f8d8 3000 	ldr.w	r3, [r8]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	bb62      	cbnz	r2, 8005828 <_malloc_r+0xdc>
 80057ce:	f8c8 7000 	str.w	r7, [r8]
 80057d2:	e00f      	b.n	80057f4 <_malloc_r+0xa8>
 80057d4:	6822      	ldr	r2, [r4, #0]
 80057d6:	1b52      	subs	r2, r2, r5
 80057d8:	d420      	bmi.n	800581c <_malloc_r+0xd0>
 80057da:	2a0b      	cmp	r2, #11
 80057dc:	d917      	bls.n	800580e <_malloc_r+0xc2>
 80057de:	1961      	adds	r1, r4, r5
 80057e0:	42a3      	cmp	r3, r4
 80057e2:	6025      	str	r5, [r4, #0]
 80057e4:	bf18      	it	ne
 80057e6:	6059      	strne	r1, [r3, #4]
 80057e8:	6863      	ldr	r3, [r4, #4]
 80057ea:	bf08      	it	eq
 80057ec:	f8c8 1000 	streq.w	r1, [r8]
 80057f0:	5162      	str	r2, [r4, r5]
 80057f2:	604b      	str	r3, [r1, #4]
 80057f4:	4630      	mov	r0, r6
 80057f6:	f000 f82f 	bl	8005858 <__malloc_unlock>
 80057fa:	f104 000b 	add.w	r0, r4, #11
 80057fe:	1d23      	adds	r3, r4, #4
 8005800:	f020 0007 	bic.w	r0, r0, #7
 8005804:	1ac2      	subs	r2, r0, r3
 8005806:	bf1c      	itt	ne
 8005808:	1a1b      	subne	r3, r3, r0
 800580a:	50a3      	strne	r3, [r4, r2]
 800580c:	e7af      	b.n	800576e <_malloc_r+0x22>
 800580e:	6862      	ldr	r2, [r4, #4]
 8005810:	42a3      	cmp	r3, r4
 8005812:	bf0c      	ite	eq
 8005814:	f8c8 2000 	streq.w	r2, [r8]
 8005818:	605a      	strne	r2, [r3, #4]
 800581a:	e7eb      	b.n	80057f4 <_malloc_r+0xa8>
 800581c:	4623      	mov	r3, r4
 800581e:	6864      	ldr	r4, [r4, #4]
 8005820:	e7ae      	b.n	8005780 <_malloc_r+0x34>
 8005822:	463c      	mov	r4, r7
 8005824:	687f      	ldr	r7, [r7, #4]
 8005826:	e7b6      	b.n	8005796 <_malloc_r+0x4a>
 8005828:	461a      	mov	r2, r3
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	42a3      	cmp	r3, r4
 800582e:	d1fb      	bne.n	8005828 <_malloc_r+0xdc>
 8005830:	2300      	movs	r3, #0
 8005832:	6053      	str	r3, [r2, #4]
 8005834:	e7de      	b.n	80057f4 <_malloc_r+0xa8>
 8005836:	230c      	movs	r3, #12
 8005838:	6033      	str	r3, [r6, #0]
 800583a:	4630      	mov	r0, r6
 800583c:	f000 f80c 	bl	8005858 <__malloc_unlock>
 8005840:	e794      	b.n	800576c <_malloc_r+0x20>
 8005842:	6005      	str	r5, [r0, #0]
 8005844:	e7d6      	b.n	80057f4 <_malloc_r+0xa8>
 8005846:	bf00      	nop
 8005848:	20000424 	.word	0x20000424

0800584c <__malloc_lock>:
 800584c:	4801      	ldr	r0, [pc, #4]	@ (8005854 <__malloc_lock+0x8>)
 800584e:	f7ff b926 	b.w	8004a9e <__retarget_lock_acquire_recursive>
 8005852:	bf00      	nop
 8005854:	2000041c 	.word	0x2000041c

08005858 <__malloc_unlock>:
 8005858:	4801      	ldr	r0, [pc, #4]	@ (8005860 <__malloc_unlock+0x8>)
 800585a:	f7ff b921 	b.w	8004aa0 <__retarget_lock_release_recursive>
 800585e:	bf00      	nop
 8005860:	2000041c 	.word	0x2000041c

08005864 <_Balloc>:
 8005864:	b570      	push	{r4, r5, r6, lr}
 8005866:	69c6      	ldr	r6, [r0, #28]
 8005868:	4604      	mov	r4, r0
 800586a:	460d      	mov	r5, r1
 800586c:	b976      	cbnz	r6, 800588c <_Balloc+0x28>
 800586e:	2010      	movs	r0, #16
 8005870:	f7ff ff42 	bl	80056f8 <malloc>
 8005874:	4602      	mov	r2, r0
 8005876:	61e0      	str	r0, [r4, #28]
 8005878:	b920      	cbnz	r0, 8005884 <_Balloc+0x20>
 800587a:	4b18      	ldr	r3, [pc, #96]	@ (80058dc <_Balloc+0x78>)
 800587c:	4818      	ldr	r0, [pc, #96]	@ (80058e0 <_Balloc+0x7c>)
 800587e:	216b      	movs	r1, #107	@ 0x6b
 8005880:	f000 fdae 	bl	80063e0 <__assert_func>
 8005884:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005888:	6006      	str	r6, [r0, #0]
 800588a:	60c6      	str	r6, [r0, #12]
 800588c:	69e6      	ldr	r6, [r4, #28]
 800588e:	68f3      	ldr	r3, [r6, #12]
 8005890:	b183      	cbz	r3, 80058b4 <_Balloc+0x50>
 8005892:	69e3      	ldr	r3, [r4, #28]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800589a:	b9b8      	cbnz	r0, 80058cc <_Balloc+0x68>
 800589c:	2101      	movs	r1, #1
 800589e:	fa01 f605 	lsl.w	r6, r1, r5
 80058a2:	1d72      	adds	r2, r6, #5
 80058a4:	0092      	lsls	r2, r2, #2
 80058a6:	4620      	mov	r0, r4
 80058a8:	f000 fdb8 	bl	800641c <_calloc_r>
 80058ac:	b160      	cbz	r0, 80058c8 <_Balloc+0x64>
 80058ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058b2:	e00e      	b.n	80058d2 <_Balloc+0x6e>
 80058b4:	2221      	movs	r2, #33	@ 0x21
 80058b6:	2104      	movs	r1, #4
 80058b8:	4620      	mov	r0, r4
 80058ba:	f000 fdaf 	bl	800641c <_calloc_r>
 80058be:	69e3      	ldr	r3, [r4, #28]
 80058c0:	60f0      	str	r0, [r6, #12]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e4      	bne.n	8005892 <_Balloc+0x2e>
 80058c8:	2000      	movs	r0, #0
 80058ca:	bd70      	pop	{r4, r5, r6, pc}
 80058cc:	6802      	ldr	r2, [r0, #0]
 80058ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80058d2:	2300      	movs	r3, #0
 80058d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80058d8:	e7f7      	b.n	80058ca <_Balloc+0x66>
 80058da:	bf00      	nop
 80058dc:	08006b1d 	.word	0x08006b1d
 80058e0:	08006b9d 	.word	0x08006b9d

080058e4 <_Bfree>:
 80058e4:	b570      	push	{r4, r5, r6, lr}
 80058e6:	69c6      	ldr	r6, [r0, #28]
 80058e8:	4605      	mov	r5, r0
 80058ea:	460c      	mov	r4, r1
 80058ec:	b976      	cbnz	r6, 800590c <_Bfree+0x28>
 80058ee:	2010      	movs	r0, #16
 80058f0:	f7ff ff02 	bl	80056f8 <malloc>
 80058f4:	4602      	mov	r2, r0
 80058f6:	61e8      	str	r0, [r5, #28]
 80058f8:	b920      	cbnz	r0, 8005904 <_Bfree+0x20>
 80058fa:	4b09      	ldr	r3, [pc, #36]	@ (8005920 <_Bfree+0x3c>)
 80058fc:	4809      	ldr	r0, [pc, #36]	@ (8005924 <_Bfree+0x40>)
 80058fe:	218f      	movs	r1, #143	@ 0x8f
 8005900:	f000 fd6e 	bl	80063e0 <__assert_func>
 8005904:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005908:	6006      	str	r6, [r0, #0]
 800590a:	60c6      	str	r6, [r0, #12]
 800590c:	b13c      	cbz	r4, 800591e <_Bfree+0x3a>
 800590e:	69eb      	ldr	r3, [r5, #28]
 8005910:	6862      	ldr	r2, [r4, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005918:	6021      	str	r1, [r4, #0]
 800591a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800591e:	bd70      	pop	{r4, r5, r6, pc}
 8005920:	08006b1d 	.word	0x08006b1d
 8005924:	08006b9d 	.word	0x08006b9d

08005928 <__multadd>:
 8005928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800592c:	690d      	ldr	r5, [r1, #16]
 800592e:	4607      	mov	r7, r0
 8005930:	460c      	mov	r4, r1
 8005932:	461e      	mov	r6, r3
 8005934:	f101 0c14 	add.w	ip, r1, #20
 8005938:	2000      	movs	r0, #0
 800593a:	f8dc 3000 	ldr.w	r3, [ip]
 800593e:	b299      	uxth	r1, r3
 8005940:	fb02 6101 	mla	r1, r2, r1, r6
 8005944:	0c1e      	lsrs	r6, r3, #16
 8005946:	0c0b      	lsrs	r3, r1, #16
 8005948:	fb02 3306 	mla	r3, r2, r6, r3
 800594c:	b289      	uxth	r1, r1
 800594e:	3001      	adds	r0, #1
 8005950:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005954:	4285      	cmp	r5, r0
 8005956:	f84c 1b04 	str.w	r1, [ip], #4
 800595a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800595e:	dcec      	bgt.n	800593a <__multadd+0x12>
 8005960:	b30e      	cbz	r6, 80059a6 <__multadd+0x7e>
 8005962:	68a3      	ldr	r3, [r4, #8]
 8005964:	42ab      	cmp	r3, r5
 8005966:	dc19      	bgt.n	800599c <__multadd+0x74>
 8005968:	6861      	ldr	r1, [r4, #4]
 800596a:	4638      	mov	r0, r7
 800596c:	3101      	adds	r1, #1
 800596e:	f7ff ff79 	bl	8005864 <_Balloc>
 8005972:	4680      	mov	r8, r0
 8005974:	b928      	cbnz	r0, 8005982 <__multadd+0x5a>
 8005976:	4602      	mov	r2, r0
 8005978:	4b0c      	ldr	r3, [pc, #48]	@ (80059ac <__multadd+0x84>)
 800597a:	480d      	ldr	r0, [pc, #52]	@ (80059b0 <__multadd+0x88>)
 800597c:	21ba      	movs	r1, #186	@ 0xba
 800597e:	f000 fd2f 	bl	80063e0 <__assert_func>
 8005982:	6922      	ldr	r2, [r4, #16]
 8005984:	3202      	adds	r2, #2
 8005986:	f104 010c 	add.w	r1, r4, #12
 800598a:	0092      	lsls	r2, r2, #2
 800598c:	300c      	adds	r0, #12
 800598e:	f000 fd19 	bl	80063c4 <memcpy>
 8005992:	4621      	mov	r1, r4
 8005994:	4638      	mov	r0, r7
 8005996:	f7ff ffa5 	bl	80058e4 <_Bfree>
 800599a:	4644      	mov	r4, r8
 800599c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059a0:	3501      	adds	r5, #1
 80059a2:	615e      	str	r6, [r3, #20]
 80059a4:	6125      	str	r5, [r4, #16]
 80059a6:	4620      	mov	r0, r4
 80059a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059ac:	08006b8c 	.word	0x08006b8c
 80059b0:	08006b9d 	.word	0x08006b9d

080059b4 <__hi0bits>:
 80059b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80059b8:	4603      	mov	r3, r0
 80059ba:	bf36      	itet	cc
 80059bc:	0403      	lslcc	r3, r0, #16
 80059be:	2000      	movcs	r0, #0
 80059c0:	2010      	movcc	r0, #16
 80059c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059c6:	bf3c      	itt	cc
 80059c8:	021b      	lslcc	r3, r3, #8
 80059ca:	3008      	addcc	r0, #8
 80059cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059d0:	bf3c      	itt	cc
 80059d2:	011b      	lslcc	r3, r3, #4
 80059d4:	3004      	addcc	r0, #4
 80059d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059da:	bf3c      	itt	cc
 80059dc:	009b      	lslcc	r3, r3, #2
 80059de:	3002      	addcc	r0, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	db05      	blt.n	80059f0 <__hi0bits+0x3c>
 80059e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80059e8:	f100 0001 	add.w	r0, r0, #1
 80059ec:	bf08      	it	eq
 80059ee:	2020      	moveq	r0, #32
 80059f0:	4770      	bx	lr

080059f2 <__lo0bits>:
 80059f2:	6803      	ldr	r3, [r0, #0]
 80059f4:	4602      	mov	r2, r0
 80059f6:	f013 0007 	ands.w	r0, r3, #7
 80059fa:	d00b      	beq.n	8005a14 <__lo0bits+0x22>
 80059fc:	07d9      	lsls	r1, r3, #31
 80059fe:	d421      	bmi.n	8005a44 <__lo0bits+0x52>
 8005a00:	0798      	lsls	r0, r3, #30
 8005a02:	bf49      	itett	mi
 8005a04:	085b      	lsrmi	r3, r3, #1
 8005a06:	089b      	lsrpl	r3, r3, #2
 8005a08:	2001      	movmi	r0, #1
 8005a0a:	6013      	strmi	r3, [r2, #0]
 8005a0c:	bf5c      	itt	pl
 8005a0e:	6013      	strpl	r3, [r2, #0]
 8005a10:	2002      	movpl	r0, #2
 8005a12:	4770      	bx	lr
 8005a14:	b299      	uxth	r1, r3
 8005a16:	b909      	cbnz	r1, 8005a1c <__lo0bits+0x2a>
 8005a18:	0c1b      	lsrs	r3, r3, #16
 8005a1a:	2010      	movs	r0, #16
 8005a1c:	b2d9      	uxtb	r1, r3
 8005a1e:	b909      	cbnz	r1, 8005a24 <__lo0bits+0x32>
 8005a20:	3008      	adds	r0, #8
 8005a22:	0a1b      	lsrs	r3, r3, #8
 8005a24:	0719      	lsls	r1, r3, #28
 8005a26:	bf04      	itt	eq
 8005a28:	091b      	lsreq	r3, r3, #4
 8005a2a:	3004      	addeq	r0, #4
 8005a2c:	0799      	lsls	r1, r3, #30
 8005a2e:	bf04      	itt	eq
 8005a30:	089b      	lsreq	r3, r3, #2
 8005a32:	3002      	addeq	r0, #2
 8005a34:	07d9      	lsls	r1, r3, #31
 8005a36:	d403      	bmi.n	8005a40 <__lo0bits+0x4e>
 8005a38:	085b      	lsrs	r3, r3, #1
 8005a3a:	f100 0001 	add.w	r0, r0, #1
 8005a3e:	d003      	beq.n	8005a48 <__lo0bits+0x56>
 8005a40:	6013      	str	r3, [r2, #0]
 8005a42:	4770      	bx	lr
 8005a44:	2000      	movs	r0, #0
 8005a46:	4770      	bx	lr
 8005a48:	2020      	movs	r0, #32
 8005a4a:	4770      	bx	lr

08005a4c <__i2b>:
 8005a4c:	b510      	push	{r4, lr}
 8005a4e:	460c      	mov	r4, r1
 8005a50:	2101      	movs	r1, #1
 8005a52:	f7ff ff07 	bl	8005864 <_Balloc>
 8005a56:	4602      	mov	r2, r0
 8005a58:	b928      	cbnz	r0, 8005a66 <__i2b+0x1a>
 8005a5a:	4b05      	ldr	r3, [pc, #20]	@ (8005a70 <__i2b+0x24>)
 8005a5c:	4805      	ldr	r0, [pc, #20]	@ (8005a74 <__i2b+0x28>)
 8005a5e:	f240 1145 	movw	r1, #325	@ 0x145
 8005a62:	f000 fcbd 	bl	80063e0 <__assert_func>
 8005a66:	2301      	movs	r3, #1
 8005a68:	6144      	str	r4, [r0, #20]
 8005a6a:	6103      	str	r3, [r0, #16]
 8005a6c:	bd10      	pop	{r4, pc}
 8005a6e:	bf00      	nop
 8005a70:	08006b8c 	.word	0x08006b8c
 8005a74:	08006b9d 	.word	0x08006b9d

08005a78 <__multiply>:
 8005a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7c:	4614      	mov	r4, r2
 8005a7e:	690a      	ldr	r2, [r1, #16]
 8005a80:	6923      	ldr	r3, [r4, #16]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	bfa8      	it	ge
 8005a86:	4623      	movge	r3, r4
 8005a88:	460f      	mov	r7, r1
 8005a8a:	bfa4      	itt	ge
 8005a8c:	460c      	movge	r4, r1
 8005a8e:	461f      	movge	r7, r3
 8005a90:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005a94:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005a98:	68a3      	ldr	r3, [r4, #8]
 8005a9a:	6861      	ldr	r1, [r4, #4]
 8005a9c:	eb0a 0609 	add.w	r6, sl, r9
 8005aa0:	42b3      	cmp	r3, r6
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	bfb8      	it	lt
 8005aa6:	3101      	addlt	r1, #1
 8005aa8:	f7ff fedc 	bl	8005864 <_Balloc>
 8005aac:	b930      	cbnz	r0, 8005abc <__multiply+0x44>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	4b44      	ldr	r3, [pc, #272]	@ (8005bc4 <__multiply+0x14c>)
 8005ab2:	4845      	ldr	r0, [pc, #276]	@ (8005bc8 <__multiply+0x150>)
 8005ab4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005ab8:	f000 fc92 	bl	80063e0 <__assert_func>
 8005abc:	f100 0514 	add.w	r5, r0, #20
 8005ac0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ac4:	462b      	mov	r3, r5
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	4543      	cmp	r3, r8
 8005aca:	d321      	bcc.n	8005b10 <__multiply+0x98>
 8005acc:	f107 0114 	add.w	r1, r7, #20
 8005ad0:	f104 0214 	add.w	r2, r4, #20
 8005ad4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005ad8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005adc:	9302      	str	r3, [sp, #8]
 8005ade:	1b13      	subs	r3, r2, r4
 8005ae0:	3b15      	subs	r3, #21
 8005ae2:	f023 0303 	bic.w	r3, r3, #3
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	f104 0715 	add.w	r7, r4, #21
 8005aec:	42ba      	cmp	r2, r7
 8005aee:	bf38      	it	cc
 8005af0:	2304      	movcc	r3, #4
 8005af2:	9301      	str	r3, [sp, #4]
 8005af4:	9b02      	ldr	r3, [sp, #8]
 8005af6:	9103      	str	r1, [sp, #12]
 8005af8:	428b      	cmp	r3, r1
 8005afa:	d80c      	bhi.n	8005b16 <__multiply+0x9e>
 8005afc:	2e00      	cmp	r6, #0
 8005afe:	dd03      	ble.n	8005b08 <__multiply+0x90>
 8005b00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d05b      	beq.n	8005bc0 <__multiply+0x148>
 8005b08:	6106      	str	r6, [r0, #16]
 8005b0a:	b005      	add	sp, #20
 8005b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b10:	f843 2b04 	str.w	r2, [r3], #4
 8005b14:	e7d8      	b.n	8005ac8 <__multiply+0x50>
 8005b16:	f8b1 a000 	ldrh.w	sl, [r1]
 8005b1a:	f1ba 0f00 	cmp.w	sl, #0
 8005b1e:	d024      	beq.n	8005b6a <__multiply+0xf2>
 8005b20:	f104 0e14 	add.w	lr, r4, #20
 8005b24:	46a9      	mov	r9, r5
 8005b26:	f04f 0c00 	mov.w	ip, #0
 8005b2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005b2e:	f8d9 3000 	ldr.w	r3, [r9]
 8005b32:	fa1f fb87 	uxth.w	fp, r7
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	fb0a 330b 	mla	r3, sl, fp, r3
 8005b3c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005b40:	f8d9 7000 	ldr.w	r7, [r9]
 8005b44:	4463      	add	r3, ip
 8005b46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005b4a:	fb0a c70b 	mla	r7, sl, fp, ip
 8005b4e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005b58:	4572      	cmp	r2, lr
 8005b5a:	f849 3b04 	str.w	r3, [r9], #4
 8005b5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005b62:	d8e2      	bhi.n	8005b2a <__multiply+0xb2>
 8005b64:	9b01      	ldr	r3, [sp, #4]
 8005b66:	f845 c003 	str.w	ip, [r5, r3]
 8005b6a:	9b03      	ldr	r3, [sp, #12]
 8005b6c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005b70:	3104      	adds	r1, #4
 8005b72:	f1b9 0f00 	cmp.w	r9, #0
 8005b76:	d021      	beq.n	8005bbc <__multiply+0x144>
 8005b78:	682b      	ldr	r3, [r5, #0]
 8005b7a:	f104 0c14 	add.w	ip, r4, #20
 8005b7e:	46ae      	mov	lr, r5
 8005b80:	f04f 0a00 	mov.w	sl, #0
 8005b84:	f8bc b000 	ldrh.w	fp, [ip]
 8005b88:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005b8c:	fb09 770b 	mla	r7, r9, fp, r7
 8005b90:	4457      	add	r7, sl
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005b98:	f84e 3b04 	str.w	r3, [lr], #4
 8005b9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005ba0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ba4:	f8be 3000 	ldrh.w	r3, [lr]
 8005ba8:	fb09 330a 	mla	r3, r9, sl, r3
 8005bac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005bb0:	4562      	cmp	r2, ip
 8005bb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005bb6:	d8e5      	bhi.n	8005b84 <__multiply+0x10c>
 8005bb8:	9f01      	ldr	r7, [sp, #4]
 8005bba:	51eb      	str	r3, [r5, r7]
 8005bbc:	3504      	adds	r5, #4
 8005bbe:	e799      	b.n	8005af4 <__multiply+0x7c>
 8005bc0:	3e01      	subs	r6, #1
 8005bc2:	e79b      	b.n	8005afc <__multiply+0x84>
 8005bc4:	08006b8c 	.word	0x08006b8c
 8005bc8:	08006b9d 	.word	0x08006b9d

08005bcc <__pow5mult>:
 8005bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bd0:	4615      	mov	r5, r2
 8005bd2:	f012 0203 	ands.w	r2, r2, #3
 8005bd6:	4607      	mov	r7, r0
 8005bd8:	460e      	mov	r6, r1
 8005bda:	d007      	beq.n	8005bec <__pow5mult+0x20>
 8005bdc:	4c25      	ldr	r4, [pc, #148]	@ (8005c74 <__pow5mult+0xa8>)
 8005bde:	3a01      	subs	r2, #1
 8005be0:	2300      	movs	r3, #0
 8005be2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005be6:	f7ff fe9f 	bl	8005928 <__multadd>
 8005bea:	4606      	mov	r6, r0
 8005bec:	10ad      	asrs	r5, r5, #2
 8005bee:	d03d      	beq.n	8005c6c <__pow5mult+0xa0>
 8005bf0:	69fc      	ldr	r4, [r7, #28]
 8005bf2:	b97c      	cbnz	r4, 8005c14 <__pow5mult+0x48>
 8005bf4:	2010      	movs	r0, #16
 8005bf6:	f7ff fd7f 	bl	80056f8 <malloc>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	61f8      	str	r0, [r7, #28]
 8005bfe:	b928      	cbnz	r0, 8005c0c <__pow5mult+0x40>
 8005c00:	4b1d      	ldr	r3, [pc, #116]	@ (8005c78 <__pow5mult+0xac>)
 8005c02:	481e      	ldr	r0, [pc, #120]	@ (8005c7c <__pow5mult+0xb0>)
 8005c04:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005c08:	f000 fbea 	bl	80063e0 <__assert_func>
 8005c0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c10:	6004      	str	r4, [r0, #0]
 8005c12:	60c4      	str	r4, [r0, #12]
 8005c14:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005c18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c1c:	b94c      	cbnz	r4, 8005c32 <__pow5mult+0x66>
 8005c1e:	f240 2171 	movw	r1, #625	@ 0x271
 8005c22:	4638      	mov	r0, r7
 8005c24:	f7ff ff12 	bl	8005a4c <__i2b>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c2e:	4604      	mov	r4, r0
 8005c30:	6003      	str	r3, [r0, #0]
 8005c32:	f04f 0900 	mov.w	r9, #0
 8005c36:	07eb      	lsls	r3, r5, #31
 8005c38:	d50a      	bpl.n	8005c50 <__pow5mult+0x84>
 8005c3a:	4631      	mov	r1, r6
 8005c3c:	4622      	mov	r2, r4
 8005c3e:	4638      	mov	r0, r7
 8005c40:	f7ff ff1a 	bl	8005a78 <__multiply>
 8005c44:	4631      	mov	r1, r6
 8005c46:	4680      	mov	r8, r0
 8005c48:	4638      	mov	r0, r7
 8005c4a:	f7ff fe4b 	bl	80058e4 <_Bfree>
 8005c4e:	4646      	mov	r6, r8
 8005c50:	106d      	asrs	r5, r5, #1
 8005c52:	d00b      	beq.n	8005c6c <__pow5mult+0xa0>
 8005c54:	6820      	ldr	r0, [r4, #0]
 8005c56:	b938      	cbnz	r0, 8005c68 <__pow5mult+0x9c>
 8005c58:	4622      	mov	r2, r4
 8005c5a:	4621      	mov	r1, r4
 8005c5c:	4638      	mov	r0, r7
 8005c5e:	f7ff ff0b 	bl	8005a78 <__multiply>
 8005c62:	6020      	str	r0, [r4, #0]
 8005c64:	f8c0 9000 	str.w	r9, [r0]
 8005c68:	4604      	mov	r4, r0
 8005c6a:	e7e4      	b.n	8005c36 <__pow5mult+0x6a>
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c72:	bf00      	nop
 8005c74:	08006bf8 	.word	0x08006bf8
 8005c78:	08006b1d 	.word	0x08006b1d
 8005c7c:	08006b9d 	.word	0x08006b9d

08005c80 <__lshift>:
 8005c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c84:	460c      	mov	r4, r1
 8005c86:	6849      	ldr	r1, [r1, #4]
 8005c88:	6923      	ldr	r3, [r4, #16]
 8005c8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c8e:	68a3      	ldr	r3, [r4, #8]
 8005c90:	4607      	mov	r7, r0
 8005c92:	4691      	mov	r9, r2
 8005c94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c98:	f108 0601 	add.w	r6, r8, #1
 8005c9c:	42b3      	cmp	r3, r6
 8005c9e:	db0b      	blt.n	8005cb8 <__lshift+0x38>
 8005ca0:	4638      	mov	r0, r7
 8005ca2:	f7ff fddf 	bl	8005864 <_Balloc>
 8005ca6:	4605      	mov	r5, r0
 8005ca8:	b948      	cbnz	r0, 8005cbe <__lshift+0x3e>
 8005caa:	4602      	mov	r2, r0
 8005cac:	4b28      	ldr	r3, [pc, #160]	@ (8005d50 <__lshift+0xd0>)
 8005cae:	4829      	ldr	r0, [pc, #164]	@ (8005d54 <__lshift+0xd4>)
 8005cb0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005cb4:	f000 fb94 	bl	80063e0 <__assert_func>
 8005cb8:	3101      	adds	r1, #1
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	e7ee      	b.n	8005c9c <__lshift+0x1c>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f100 0114 	add.w	r1, r0, #20
 8005cc4:	f100 0210 	add.w	r2, r0, #16
 8005cc8:	4618      	mov	r0, r3
 8005cca:	4553      	cmp	r3, sl
 8005ccc:	db33      	blt.n	8005d36 <__lshift+0xb6>
 8005cce:	6920      	ldr	r0, [r4, #16]
 8005cd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005cd4:	f104 0314 	add.w	r3, r4, #20
 8005cd8:	f019 091f 	ands.w	r9, r9, #31
 8005cdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ce0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005ce4:	d02b      	beq.n	8005d3e <__lshift+0xbe>
 8005ce6:	f1c9 0e20 	rsb	lr, r9, #32
 8005cea:	468a      	mov	sl, r1
 8005cec:	2200      	movs	r2, #0
 8005cee:	6818      	ldr	r0, [r3, #0]
 8005cf0:	fa00 f009 	lsl.w	r0, r0, r9
 8005cf4:	4310      	orrs	r0, r2
 8005cf6:	f84a 0b04 	str.w	r0, [sl], #4
 8005cfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cfe:	459c      	cmp	ip, r3
 8005d00:	fa22 f20e 	lsr.w	r2, r2, lr
 8005d04:	d8f3      	bhi.n	8005cee <__lshift+0x6e>
 8005d06:	ebac 0304 	sub.w	r3, ip, r4
 8005d0a:	3b15      	subs	r3, #21
 8005d0c:	f023 0303 	bic.w	r3, r3, #3
 8005d10:	3304      	adds	r3, #4
 8005d12:	f104 0015 	add.w	r0, r4, #21
 8005d16:	4584      	cmp	ip, r0
 8005d18:	bf38      	it	cc
 8005d1a:	2304      	movcc	r3, #4
 8005d1c:	50ca      	str	r2, [r1, r3]
 8005d1e:	b10a      	cbz	r2, 8005d24 <__lshift+0xa4>
 8005d20:	f108 0602 	add.w	r6, r8, #2
 8005d24:	3e01      	subs	r6, #1
 8005d26:	4638      	mov	r0, r7
 8005d28:	612e      	str	r6, [r5, #16]
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	f7ff fdda 	bl	80058e4 <_Bfree>
 8005d30:	4628      	mov	r0, r5
 8005d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d36:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	e7c5      	b.n	8005cca <__lshift+0x4a>
 8005d3e:	3904      	subs	r1, #4
 8005d40:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d44:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d48:	459c      	cmp	ip, r3
 8005d4a:	d8f9      	bhi.n	8005d40 <__lshift+0xc0>
 8005d4c:	e7ea      	b.n	8005d24 <__lshift+0xa4>
 8005d4e:	bf00      	nop
 8005d50:	08006b8c 	.word	0x08006b8c
 8005d54:	08006b9d 	.word	0x08006b9d

08005d58 <__mcmp>:
 8005d58:	690a      	ldr	r2, [r1, #16]
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	6900      	ldr	r0, [r0, #16]
 8005d5e:	1a80      	subs	r0, r0, r2
 8005d60:	b530      	push	{r4, r5, lr}
 8005d62:	d10e      	bne.n	8005d82 <__mcmp+0x2a>
 8005d64:	3314      	adds	r3, #20
 8005d66:	3114      	adds	r1, #20
 8005d68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005d6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005d70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d78:	4295      	cmp	r5, r2
 8005d7a:	d003      	beq.n	8005d84 <__mcmp+0x2c>
 8005d7c:	d205      	bcs.n	8005d8a <__mcmp+0x32>
 8005d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d82:	bd30      	pop	{r4, r5, pc}
 8005d84:	42a3      	cmp	r3, r4
 8005d86:	d3f3      	bcc.n	8005d70 <__mcmp+0x18>
 8005d88:	e7fb      	b.n	8005d82 <__mcmp+0x2a>
 8005d8a:	2001      	movs	r0, #1
 8005d8c:	e7f9      	b.n	8005d82 <__mcmp+0x2a>
	...

08005d90 <__mdiff>:
 8005d90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d94:	4689      	mov	r9, r1
 8005d96:	4606      	mov	r6, r0
 8005d98:	4611      	mov	r1, r2
 8005d9a:	4648      	mov	r0, r9
 8005d9c:	4614      	mov	r4, r2
 8005d9e:	f7ff ffdb 	bl	8005d58 <__mcmp>
 8005da2:	1e05      	subs	r5, r0, #0
 8005da4:	d112      	bne.n	8005dcc <__mdiff+0x3c>
 8005da6:	4629      	mov	r1, r5
 8005da8:	4630      	mov	r0, r6
 8005daa:	f7ff fd5b 	bl	8005864 <_Balloc>
 8005dae:	4602      	mov	r2, r0
 8005db0:	b928      	cbnz	r0, 8005dbe <__mdiff+0x2e>
 8005db2:	4b3f      	ldr	r3, [pc, #252]	@ (8005eb0 <__mdiff+0x120>)
 8005db4:	f240 2137 	movw	r1, #567	@ 0x237
 8005db8:	483e      	ldr	r0, [pc, #248]	@ (8005eb4 <__mdiff+0x124>)
 8005dba:	f000 fb11 	bl	80063e0 <__assert_func>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	b003      	add	sp, #12
 8005dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dcc:	bfbc      	itt	lt
 8005dce:	464b      	movlt	r3, r9
 8005dd0:	46a1      	movlt	r9, r4
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005dd8:	bfba      	itte	lt
 8005dda:	461c      	movlt	r4, r3
 8005ddc:	2501      	movlt	r5, #1
 8005dde:	2500      	movge	r5, #0
 8005de0:	f7ff fd40 	bl	8005864 <_Balloc>
 8005de4:	4602      	mov	r2, r0
 8005de6:	b918      	cbnz	r0, 8005df0 <__mdiff+0x60>
 8005de8:	4b31      	ldr	r3, [pc, #196]	@ (8005eb0 <__mdiff+0x120>)
 8005dea:	f240 2145 	movw	r1, #581	@ 0x245
 8005dee:	e7e3      	b.n	8005db8 <__mdiff+0x28>
 8005df0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005df4:	6926      	ldr	r6, [r4, #16]
 8005df6:	60c5      	str	r5, [r0, #12]
 8005df8:	f109 0310 	add.w	r3, r9, #16
 8005dfc:	f109 0514 	add.w	r5, r9, #20
 8005e00:	f104 0e14 	add.w	lr, r4, #20
 8005e04:	f100 0b14 	add.w	fp, r0, #20
 8005e08:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005e0c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005e10:	9301      	str	r3, [sp, #4]
 8005e12:	46d9      	mov	r9, fp
 8005e14:	f04f 0c00 	mov.w	ip, #0
 8005e18:	9b01      	ldr	r3, [sp, #4]
 8005e1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005e1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005e22:	9301      	str	r3, [sp, #4]
 8005e24:	fa1f f38a 	uxth.w	r3, sl
 8005e28:	4619      	mov	r1, r3
 8005e2a:	b283      	uxth	r3, r0
 8005e2c:	1acb      	subs	r3, r1, r3
 8005e2e:	0c00      	lsrs	r0, r0, #16
 8005e30:	4463      	add	r3, ip
 8005e32:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005e36:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005e40:	4576      	cmp	r6, lr
 8005e42:	f849 3b04 	str.w	r3, [r9], #4
 8005e46:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005e4a:	d8e5      	bhi.n	8005e18 <__mdiff+0x88>
 8005e4c:	1b33      	subs	r3, r6, r4
 8005e4e:	3b15      	subs	r3, #21
 8005e50:	f023 0303 	bic.w	r3, r3, #3
 8005e54:	3415      	adds	r4, #21
 8005e56:	3304      	adds	r3, #4
 8005e58:	42a6      	cmp	r6, r4
 8005e5a:	bf38      	it	cc
 8005e5c:	2304      	movcc	r3, #4
 8005e5e:	441d      	add	r5, r3
 8005e60:	445b      	add	r3, fp
 8005e62:	461e      	mov	r6, r3
 8005e64:	462c      	mov	r4, r5
 8005e66:	4544      	cmp	r4, r8
 8005e68:	d30e      	bcc.n	8005e88 <__mdiff+0xf8>
 8005e6a:	f108 0103 	add.w	r1, r8, #3
 8005e6e:	1b49      	subs	r1, r1, r5
 8005e70:	f021 0103 	bic.w	r1, r1, #3
 8005e74:	3d03      	subs	r5, #3
 8005e76:	45a8      	cmp	r8, r5
 8005e78:	bf38      	it	cc
 8005e7a:	2100      	movcc	r1, #0
 8005e7c:	440b      	add	r3, r1
 8005e7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005e82:	b191      	cbz	r1, 8005eaa <__mdiff+0x11a>
 8005e84:	6117      	str	r7, [r2, #16]
 8005e86:	e79d      	b.n	8005dc4 <__mdiff+0x34>
 8005e88:	f854 1b04 	ldr.w	r1, [r4], #4
 8005e8c:	46e6      	mov	lr, ip
 8005e8e:	0c08      	lsrs	r0, r1, #16
 8005e90:	fa1c fc81 	uxtah	ip, ip, r1
 8005e94:	4471      	add	r1, lr
 8005e96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005e9a:	b289      	uxth	r1, r1
 8005e9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005ea0:	f846 1b04 	str.w	r1, [r6], #4
 8005ea4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005ea8:	e7dd      	b.n	8005e66 <__mdiff+0xd6>
 8005eaa:	3f01      	subs	r7, #1
 8005eac:	e7e7      	b.n	8005e7e <__mdiff+0xee>
 8005eae:	bf00      	nop
 8005eb0:	08006b8c 	.word	0x08006b8c
 8005eb4:	08006b9d 	.word	0x08006b9d

08005eb8 <__d2b>:
 8005eb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ebc:	460f      	mov	r7, r1
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	ec59 8b10 	vmov	r8, r9, d0
 8005ec4:	4616      	mov	r6, r2
 8005ec6:	f7ff fccd 	bl	8005864 <_Balloc>
 8005eca:	4604      	mov	r4, r0
 8005ecc:	b930      	cbnz	r0, 8005edc <__d2b+0x24>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	4b23      	ldr	r3, [pc, #140]	@ (8005f60 <__d2b+0xa8>)
 8005ed2:	4824      	ldr	r0, [pc, #144]	@ (8005f64 <__d2b+0xac>)
 8005ed4:	f240 310f 	movw	r1, #783	@ 0x30f
 8005ed8:	f000 fa82 	bl	80063e0 <__assert_func>
 8005edc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005ee0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ee4:	b10d      	cbz	r5, 8005eea <__d2b+0x32>
 8005ee6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eea:	9301      	str	r3, [sp, #4]
 8005eec:	f1b8 0300 	subs.w	r3, r8, #0
 8005ef0:	d023      	beq.n	8005f3a <__d2b+0x82>
 8005ef2:	4668      	mov	r0, sp
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	f7ff fd7c 	bl	80059f2 <__lo0bits>
 8005efa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005efe:	b1d0      	cbz	r0, 8005f36 <__d2b+0x7e>
 8005f00:	f1c0 0320 	rsb	r3, r0, #32
 8005f04:	fa02 f303 	lsl.w	r3, r2, r3
 8005f08:	430b      	orrs	r3, r1
 8005f0a:	40c2      	lsrs	r2, r0
 8005f0c:	6163      	str	r3, [r4, #20]
 8005f0e:	9201      	str	r2, [sp, #4]
 8005f10:	9b01      	ldr	r3, [sp, #4]
 8005f12:	61a3      	str	r3, [r4, #24]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bf0c      	ite	eq
 8005f18:	2201      	moveq	r2, #1
 8005f1a:	2202      	movne	r2, #2
 8005f1c:	6122      	str	r2, [r4, #16]
 8005f1e:	b1a5      	cbz	r5, 8005f4a <__d2b+0x92>
 8005f20:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005f24:	4405      	add	r5, r0
 8005f26:	603d      	str	r5, [r7, #0]
 8005f28:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005f2c:	6030      	str	r0, [r6, #0]
 8005f2e:	4620      	mov	r0, r4
 8005f30:	b003      	add	sp, #12
 8005f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f36:	6161      	str	r1, [r4, #20]
 8005f38:	e7ea      	b.n	8005f10 <__d2b+0x58>
 8005f3a:	a801      	add	r0, sp, #4
 8005f3c:	f7ff fd59 	bl	80059f2 <__lo0bits>
 8005f40:	9b01      	ldr	r3, [sp, #4]
 8005f42:	6163      	str	r3, [r4, #20]
 8005f44:	3020      	adds	r0, #32
 8005f46:	2201      	movs	r2, #1
 8005f48:	e7e8      	b.n	8005f1c <__d2b+0x64>
 8005f4a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005f52:	6038      	str	r0, [r7, #0]
 8005f54:	6918      	ldr	r0, [r3, #16]
 8005f56:	f7ff fd2d 	bl	80059b4 <__hi0bits>
 8005f5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f5e:	e7e5      	b.n	8005f2c <__d2b+0x74>
 8005f60:	08006b8c 	.word	0x08006b8c
 8005f64:	08006b9d 	.word	0x08006b9d

08005f68 <__ssputs_r>:
 8005f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f6c:	688e      	ldr	r6, [r1, #8]
 8005f6e:	461f      	mov	r7, r3
 8005f70:	42be      	cmp	r6, r7
 8005f72:	680b      	ldr	r3, [r1, #0]
 8005f74:	4682      	mov	sl, r0
 8005f76:	460c      	mov	r4, r1
 8005f78:	4690      	mov	r8, r2
 8005f7a:	d82d      	bhi.n	8005fd8 <__ssputs_r+0x70>
 8005f7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005f84:	d026      	beq.n	8005fd4 <__ssputs_r+0x6c>
 8005f86:	6965      	ldr	r5, [r4, #20]
 8005f88:	6909      	ldr	r1, [r1, #16]
 8005f8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f8e:	eba3 0901 	sub.w	r9, r3, r1
 8005f92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f96:	1c7b      	adds	r3, r7, #1
 8005f98:	444b      	add	r3, r9
 8005f9a:	106d      	asrs	r5, r5, #1
 8005f9c:	429d      	cmp	r5, r3
 8005f9e:	bf38      	it	cc
 8005fa0:	461d      	movcc	r5, r3
 8005fa2:	0553      	lsls	r3, r2, #21
 8005fa4:	d527      	bpl.n	8005ff6 <__ssputs_r+0x8e>
 8005fa6:	4629      	mov	r1, r5
 8005fa8:	f7ff fbd0 	bl	800574c <_malloc_r>
 8005fac:	4606      	mov	r6, r0
 8005fae:	b360      	cbz	r0, 800600a <__ssputs_r+0xa2>
 8005fb0:	6921      	ldr	r1, [r4, #16]
 8005fb2:	464a      	mov	r2, r9
 8005fb4:	f000 fa06 	bl	80063c4 <memcpy>
 8005fb8:	89a3      	ldrh	r3, [r4, #12]
 8005fba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fc2:	81a3      	strh	r3, [r4, #12]
 8005fc4:	6126      	str	r6, [r4, #16]
 8005fc6:	6165      	str	r5, [r4, #20]
 8005fc8:	444e      	add	r6, r9
 8005fca:	eba5 0509 	sub.w	r5, r5, r9
 8005fce:	6026      	str	r6, [r4, #0]
 8005fd0:	60a5      	str	r5, [r4, #8]
 8005fd2:	463e      	mov	r6, r7
 8005fd4:	42be      	cmp	r6, r7
 8005fd6:	d900      	bls.n	8005fda <__ssputs_r+0x72>
 8005fd8:	463e      	mov	r6, r7
 8005fda:	6820      	ldr	r0, [r4, #0]
 8005fdc:	4632      	mov	r2, r6
 8005fde:	4641      	mov	r1, r8
 8005fe0:	f000 f9c6 	bl	8006370 <memmove>
 8005fe4:	68a3      	ldr	r3, [r4, #8]
 8005fe6:	1b9b      	subs	r3, r3, r6
 8005fe8:	60a3      	str	r3, [r4, #8]
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	4433      	add	r3, r6
 8005fee:	6023      	str	r3, [r4, #0]
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff6:	462a      	mov	r2, r5
 8005ff8:	f000 fa36 	bl	8006468 <_realloc_r>
 8005ffc:	4606      	mov	r6, r0
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d1e0      	bne.n	8005fc4 <__ssputs_r+0x5c>
 8006002:	6921      	ldr	r1, [r4, #16]
 8006004:	4650      	mov	r0, sl
 8006006:	f7ff fb2d 	bl	8005664 <_free_r>
 800600a:	230c      	movs	r3, #12
 800600c:	f8ca 3000 	str.w	r3, [sl]
 8006010:	89a3      	ldrh	r3, [r4, #12]
 8006012:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006016:	81a3      	strh	r3, [r4, #12]
 8006018:	f04f 30ff 	mov.w	r0, #4294967295
 800601c:	e7e9      	b.n	8005ff2 <__ssputs_r+0x8a>
	...

08006020 <_svfiprintf_r>:
 8006020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006024:	4698      	mov	r8, r3
 8006026:	898b      	ldrh	r3, [r1, #12]
 8006028:	061b      	lsls	r3, r3, #24
 800602a:	b09d      	sub	sp, #116	@ 0x74
 800602c:	4607      	mov	r7, r0
 800602e:	460d      	mov	r5, r1
 8006030:	4614      	mov	r4, r2
 8006032:	d510      	bpl.n	8006056 <_svfiprintf_r+0x36>
 8006034:	690b      	ldr	r3, [r1, #16]
 8006036:	b973      	cbnz	r3, 8006056 <_svfiprintf_r+0x36>
 8006038:	2140      	movs	r1, #64	@ 0x40
 800603a:	f7ff fb87 	bl	800574c <_malloc_r>
 800603e:	6028      	str	r0, [r5, #0]
 8006040:	6128      	str	r0, [r5, #16]
 8006042:	b930      	cbnz	r0, 8006052 <_svfiprintf_r+0x32>
 8006044:	230c      	movs	r3, #12
 8006046:	603b      	str	r3, [r7, #0]
 8006048:	f04f 30ff 	mov.w	r0, #4294967295
 800604c:	b01d      	add	sp, #116	@ 0x74
 800604e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006052:	2340      	movs	r3, #64	@ 0x40
 8006054:	616b      	str	r3, [r5, #20]
 8006056:	2300      	movs	r3, #0
 8006058:	9309      	str	r3, [sp, #36]	@ 0x24
 800605a:	2320      	movs	r3, #32
 800605c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006060:	f8cd 800c 	str.w	r8, [sp, #12]
 8006064:	2330      	movs	r3, #48	@ 0x30
 8006066:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006204 <_svfiprintf_r+0x1e4>
 800606a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800606e:	f04f 0901 	mov.w	r9, #1
 8006072:	4623      	mov	r3, r4
 8006074:	469a      	mov	sl, r3
 8006076:	f813 2b01 	ldrb.w	r2, [r3], #1
 800607a:	b10a      	cbz	r2, 8006080 <_svfiprintf_r+0x60>
 800607c:	2a25      	cmp	r2, #37	@ 0x25
 800607e:	d1f9      	bne.n	8006074 <_svfiprintf_r+0x54>
 8006080:	ebba 0b04 	subs.w	fp, sl, r4
 8006084:	d00b      	beq.n	800609e <_svfiprintf_r+0x7e>
 8006086:	465b      	mov	r3, fp
 8006088:	4622      	mov	r2, r4
 800608a:	4629      	mov	r1, r5
 800608c:	4638      	mov	r0, r7
 800608e:	f7ff ff6b 	bl	8005f68 <__ssputs_r>
 8006092:	3001      	adds	r0, #1
 8006094:	f000 80a7 	beq.w	80061e6 <_svfiprintf_r+0x1c6>
 8006098:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800609a:	445a      	add	r2, fp
 800609c:	9209      	str	r2, [sp, #36]	@ 0x24
 800609e:	f89a 3000 	ldrb.w	r3, [sl]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 809f 	beq.w	80061e6 <_svfiprintf_r+0x1c6>
 80060a8:	2300      	movs	r3, #0
 80060aa:	f04f 32ff 	mov.w	r2, #4294967295
 80060ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060b2:	f10a 0a01 	add.w	sl, sl, #1
 80060b6:	9304      	str	r3, [sp, #16]
 80060b8:	9307      	str	r3, [sp, #28]
 80060ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80060be:	931a      	str	r3, [sp, #104]	@ 0x68
 80060c0:	4654      	mov	r4, sl
 80060c2:	2205      	movs	r2, #5
 80060c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060c8:	484e      	ldr	r0, [pc, #312]	@ (8006204 <_svfiprintf_r+0x1e4>)
 80060ca:	f7fa f8b9 	bl	8000240 <memchr>
 80060ce:	9a04      	ldr	r2, [sp, #16]
 80060d0:	b9d8      	cbnz	r0, 800610a <_svfiprintf_r+0xea>
 80060d2:	06d0      	lsls	r0, r2, #27
 80060d4:	bf44      	itt	mi
 80060d6:	2320      	movmi	r3, #32
 80060d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060dc:	0711      	lsls	r1, r2, #28
 80060de:	bf44      	itt	mi
 80060e0:	232b      	movmi	r3, #43	@ 0x2b
 80060e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060e6:	f89a 3000 	ldrb.w	r3, [sl]
 80060ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80060ec:	d015      	beq.n	800611a <_svfiprintf_r+0xfa>
 80060ee:	9a07      	ldr	r2, [sp, #28]
 80060f0:	4654      	mov	r4, sl
 80060f2:	2000      	movs	r0, #0
 80060f4:	f04f 0c0a 	mov.w	ip, #10
 80060f8:	4621      	mov	r1, r4
 80060fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060fe:	3b30      	subs	r3, #48	@ 0x30
 8006100:	2b09      	cmp	r3, #9
 8006102:	d94b      	bls.n	800619c <_svfiprintf_r+0x17c>
 8006104:	b1b0      	cbz	r0, 8006134 <_svfiprintf_r+0x114>
 8006106:	9207      	str	r2, [sp, #28]
 8006108:	e014      	b.n	8006134 <_svfiprintf_r+0x114>
 800610a:	eba0 0308 	sub.w	r3, r0, r8
 800610e:	fa09 f303 	lsl.w	r3, r9, r3
 8006112:	4313      	orrs	r3, r2
 8006114:	9304      	str	r3, [sp, #16]
 8006116:	46a2      	mov	sl, r4
 8006118:	e7d2      	b.n	80060c0 <_svfiprintf_r+0xa0>
 800611a:	9b03      	ldr	r3, [sp, #12]
 800611c:	1d19      	adds	r1, r3, #4
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	9103      	str	r1, [sp, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	bfbb      	ittet	lt
 8006126:	425b      	neglt	r3, r3
 8006128:	f042 0202 	orrlt.w	r2, r2, #2
 800612c:	9307      	strge	r3, [sp, #28]
 800612e:	9307      	strlt	r3, [sp, #28]
 8006130:	bfb8      	it	lt
 8006132:	9204      	strlt	r2, [sp, #16]
 8006134:	7823      	ldrb	r3, [r4, #0]
 8006136:	2b2e      	cmp	r3, #46	@ 0x2e
 8006138:	d10a      	bne.n	8006150 <_svfiprintf_r+0x130>
 800613a:	7863      	ldrb	r3, [r4, #1]
 800613c:	2b2a      	cmp	r3, #42	@ 0x2a
 800613e:	d132      	bne.n	80061a6 <_svfiprintf_r+0x186>
 8006140:	9b03      	ldr	r3, [sp, #12]
 8006142:	1d1a      	adds	r2, r3, #4
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	9203      	str	r2, [sp, #12]
 8006148:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800614c:	3402      	adds	r4, #2
 800614e:	9305      	str	r3, [sp, #20]
 8006150:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006214 <_svfiprintf_r+0x1f4>
 8006154:	7821      	ldrb	r1, [r4, #0]
 8006156:	2203      	movs	r2, #3
 8006158:	4650      	mov	r0, sl
 800615a:	f7fa f871 	bl	8000240 <memchr>
 800615e:	b138      	cbz	r0, 8006170 <_svfiprintf_r+0x150>
 8006160:	9b04      	ldr	r3, [sp, #16]
 8006162:	eba0 000a 	sub.w	r0, r0, sl
 8006166:	2240      	movs	r2, #64	@ 0x40
 8006168:	4082      	lsls	r2, r0
 800616a:	4313      	orrs	r3, r2
 800616c:	3401      	adds	r4, #1
 800616e:	9304      	str	r3, [sp, #16]
 8006170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006174:	4824      	ldr	r0, [pc, #144]	@ (8006208 <_svfiprintf_r+0x1e8>)
 8006176:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800617a:	2206      	movs	r2, #6
 800617c:	f7fa f860 	bl	8000240 <memchr>
 8006180:	2800      	cmp	r0, #0
 8006182:	d036      	beq.n	80061f2 <_svfiprintf_r+0x1d2>
 8006184:	4b21      	ldr	r3, [pc, #132]	@ (800620c <_svfiprintf_r+0x1ec>)
 8006186:	bb1b      	cbnz	r3, 80061d0 <_svfiprintf_r+0x1b0>
 8006188:	9b03      	ldr	r3, [sp, #12]
 800618a:	3307      	adds	r3, #7
 800618c:	f023 0307 	bic.w	r3, r3, #7
 8006190:	3308      	adds	r3, #8
 8006192:	9303      	str	r3, [sp, #12]
 8006194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006196:	4433      	add	r3, r6
 8006198:	9309      	str	r3, [sp, #36]	@ 0x24
 800619a:	e76a      	b.n	8006072 <_svfiprintf_r+0x52>
 800619c:	fb0c 3202 	mla	r2, ip, r2, r3
 80061a0:	460c      	mov	r4, r1
 80061a2:	2001      	movs	r0, #1
 80061a4:	e7a8      	b.n	80060f8 <_svfiprintf_r+0xd8>
 80061a6:	2300      	movs	r3, #0
 80061a8:	3401      	adds	r4, #1
 80061aa:	9305      	str	r3, [sp, #20]
 80061ac:	4619      	mov	r1, r3
 80061ae:	f04f 0c0a 	mov.w	ip, #10
 80061b2:	4620      	mov	r0, r4
 80061b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061b8:	3a30      	subs	r2, #48	@ 0x30
 80061ba:	2a09      	cmp	r2, #9
 80061bc:	d903      	bls.n	80061c6 <_svfiprintf_r+0x1a6>
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d0c6      	beq.n	8006150 <_svfiprintf_r+0x130>
 80061c2:	9105      	str	r1, [sp, #20]
 80061c4:	e7c4      	b.n	8006150 <_svfiprintf_r+0x130>
 80061c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80061ca:	4604      	mov	r4, r0
 80061cc:	2301      	movs	r3, #1
 80061ce:	e7f0      	b.n	80061b2 <_svfiprintf_r+0x192>
 80061d0:	ab03      	add	r3, sp, #12
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	462a      	mov	r2, r5
 80061d6:	4b0e      	ldr	r3, [pc, #56]	@ (8006210 <_svfiprintf_r+0x1f0>)
 80061d8:	a904      	add	r1, sp, #16
 80061da:	4638      	mov	r0, r7
 80061dc:	f7fd ff14 	bl	8004008 <_printf_float>
 80061e0:	1c42      	adds	r2, r0, #1
 80061e2:	4606      	mov	r6, r0
 80061e4:	d1d6      	bne.n	8006194 <_svfiprintf_r+0x174>
 80061e6:	89ab      	ldrh	r3, [r5, #12]
 80061e8:	065b      	lsls	r3, r3, #25
 80061ea:	f53f af2d 	bmi.w	8006048 <_svfiprintf_r+0x28>
 80061ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061f0:	e72c      	b.n	800604c <_svfiprintf_r+0x2c>
 80061f2:	ab03      	add	r3, sp, #12
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	462a      	mov	r2, r5
 80061f8:	4b05      	ldr	r3, [pc, #20]	@ (8006210 <_svfiprintf_r+0x1f0>)
 80061fa:	a904      	add	r1, sp, #16
 80061fc:	4638      	mov	r0, r7
 80061fe:	f7fe f98b 	bl	8004518 <_printf_i>
 8006202:	e7ed      	b.n	80061e0 <_svfiprintf_r+0x1c0>
 8006204:	08006cf8 	.word	0x08006cf8
 8006208:	08006d02 	.word	0x08006d02
 800620c:	08004009 	.word	0x08004009
 8006210:	08005f69 	.word	0x08005f69
 8006214:	08006cfe 	.word	0x08006cfe

08006218 <__sflush_r>:
 8006218:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800621c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006220:	0716      	lsls	r6, r2, #28
 8006222:	4605      	mov	r5, r0
 8006224:	460c      	mov	r4, r1
 8006226:	d454      	bmi.n	80062d2 <__sflush_r+0xba>
 8006228:	684b      	ldr	r3, [r1, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	dc02      	bgt.n	8006234 <__sflush_r+0x1c>
 800622e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006230:	2b00      	cmp	r3, #0
 8006232:	dd48      	ble.n	80062c6 <__sflush_r+0xae>
 8006234:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006236:	2e00      	cmp	r6, #0
 8006238:	d045      	beq.n	80062c6 <__sflush_r+0xae>
 800623a:	2300      	movs	r3, #0
 800623c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006240:	682f      	ldr	r7, [r5, #0]
 8006242:	6a21      	ldr	r1, [r4, #32]
 8006244:	602b      	str	r3, [r5, #0]
 8006246:	d030      	beq.n	80062aa <__sflush_r+0x92>
 8006248:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800624a:	89a3      	ldrh	r3, [r4, #12]
 800624c:	0759      	lsls	r1, r3, #29
 800624e:	d505      	bpl.n	800625c <__sflush_r+0x44>
 8006250:	6863      	ldr	r3, [r4, #4]
 8006252:	1ad2      	subs	r2, r2, r3
 8006254:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006256:	b10b      	cbz	r3, 800625c <__sflush_r+0x44>
 8006258:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800625a:	1ad2      	subs	r2, r2, r3
 800625c:	2300      	movs	r3, #0
 800625e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006260:	6a21      	ldr	r1, [r4, #32]
 8006262:	4628      	mov	r0, r5
 8006264:	47b0      	blx	r6
 8006266:	1c43      	adds	r3, r0, #1
 8006268:	89a3      	ldrh	r3, [r4, #12]
 800626a:	d106      	bne.n	800627a <__sflush_r+0x62>
 800626c:	6829      	ldr	r1, [r5, #0]
 800626e:	291d      	cmp	r1, #29
 8006270:	d82b      	bhi.n	80062ca <__sflush_r+0xb2>
 8006272:	4a2a      	ldr	r2, [pc, #168]	@ (800631c <__sflush_r+0x104>)
 8006274:	410a      	asrs	r2, r1
 8006276:	07d6      	lsls	r6, r2, #31
 8006278:	d427      	bmi.n	80062ca <__sflush_r+0xb2>
 800627a:	2200      	movs	r2, #0
 800627c:	6062      	str	r2, [r4, #4]
 800627e:	04d9      	lsls	r1, r3, #19
 8006280:	6922      	ldr	r2, [r4, #16]
 8006282:	6022      	str	r2, [r4, #0]
 8006284:	d504      	bpl.n	8006290 <__sflush_r+0x78>
 8006286:	1c42      	adds	r2, r0, #1
 8006288:	d101      	bne.n	800628e <__sflush_r+0x76>
 800628a:	682b      	ldr	r3, [r5, #0]
 800628c:	b903      	cbnz	r3, 8006290 <__sflush_r+0x78>
 800628e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006290:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006292:	602f      	str	r7, [r5, #0]
 8006294:	b1b9      	cbz	r1, 80062c6 <__sflush_r+0xae>
 8006296:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800629a:	4299      	cmp	r1, r3
 800629c:	d002      	beq.n	80062a4 <__sflush_r+0x8c>
 800629e:	4628      	mov	r0, r5
 80062a0:	f7ff f9e0 	bl	8005664 <_free_r>
 80062a4:	2300      	movs	r3, #0
 80062a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80062a8:	e00d      	b.n	80062c6 <__sflush_r+0xae>
 80062aa:	2301      	movs	r3, #1
 80062ac:	4628      	mov	r0, r5
 80062ae:	47b0      	blx	r6
 80062b0:	4602      	mov	r2, r0
 80062b2:	1c50      	adds	r0, r2, #1
 80062b4:	d1c9      	bne.n	800624a <__sflush_r+0x32>
 80062b6:	682b      	ldr	r3, [r5, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d0c6      	beq.n	800624a <__sflush_r+0x32>
 80062bc:	2b1d      	cmp	r3, #29
 80062be:	d001      	beq.n	80062c4 <__sflush_r+0xac>
 80062c0:	2b16      	cmp	r3, #22
 80062c2:	d11e      	bne.n	8006302 <__sflush_r+0xea>
 80062c4:	602f      	str	r7, [r5, #0]
 80062c6:	2000      	movs	r0, #0
 80062c8:	e022      	b.n	8006310 <__sflush_r+0xf8>
 80062ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062ce:	b21b      	sxth	r3, r3
 80062d0:	e01b      	b.n	800630a <__sflush_r+0xf2>
 80062d2:	690f      	ldr	r7, [r1, #16]
 80062d4:	2f00      	cmp	r7, #0
 80062d6:	d0f6      	beq.n	80062c6 <__sflush_r+0xae>
 80062d8:	0793      	lsls	r3, r2, #30
 80062da:	680e      	ldr	r6, [r1, #0]
 80062dc:	bf08      	it	eq
 80062de:	694b      	ldreq	r3, [r1, #20]
 80062e0:	600f      	str	r7, [r1, #0]
 80062e2:	bf18      	it	ne
 80062e4:	2300      	movne	r3, #0
 80062e6:	eba6 0807 	sub.w	r8, r6, r7
 80062ea:	608b      	str	r3, [r1, #8]
 80062ec:	f1b8 0f00 	cmp.w	r8, #0
 80062f0:	dde9      	ble.n	80062c6 <__sflush_r+0xae>
 80062f2:	6a21      	ldr	r1, [r4, #32]
 80062f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80062f6:	4643      	mov	r3, r8
 80062f8:	463a      	mov	r2, r7
 80062fa:	4628      	mov	r0, r5
 80062fc:	47b0      	blx	r6
 80062fe:	2800      	cmp	r0, #0
 8006300:	dc08      	bgt.n	8006314 <__sflush_r+0xfc>
 8006302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800630a:	81a3      	strh	r3, [r4, #12]
 800630c:	f04f 30ff 	mov.w	r0, #4294967295
 8006310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006314:	4407      	add	r7, r0
 8006316:	eba8 0800 	sub.w	r8, r8, r0
 800631a:	e7e7      	b.n	80062ec <__sflush_r+0xd4>
 800631c:	dfbffffe 	.word	0xdfbffffe

08006320 <_fflush_r>:
 8006320:	b538      	push	{r3, r4, r5, lr}
 8006322:	690b      	ldr	r3, [r1, #16]
 8006324:	4605      	mov	r5, r0
 8006326:	460c      	mov	r4, r1
 8006328:	b913      	cbnz	r3, 8006330 <_fflush_r+0x10>
 800632a:	2500      	movs	r5, #0
 800632c:	4628      	mov	r0, r5
 800632e:	bd38      	pop	{r3, r4, r5, pc}
 8006330:	b118      	cbz	r0, 800633a <_fflush_r+0x1a>
 8006332:	6a03      	ldr	r3, [r0, #32]
 8006334:	b90b      	cbnz	r3, 800633a <_fflush_r+0x1a>
 8006336:	f7fe fa9b 	bl	8004870 <__sinit>
 800633a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0f3      	beq.n	800632a <_fflush_r+0xa>
 8006342:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006344:	07d0      	lsls	r0, r2, #31
 8006346:	d404      	bmi.n	8006352 <_fflush_r+0x32>
 8006348:	0599      	lsls	r1, r3, #22
 800634a:	d402      	bmi.n	8006352 <_fflush_r+0x32>
 800634c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800634e:	f7fe fba6 	bl	8004a9e <__retarget_lock_acquire_recursive>
 8006352:	4628      	mov	r0, r5
 8006354:	4621      	mov	r1, r4
 8006356:	f7ff ff5f 	bl	8006218 <__sflush_r>
 800635a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800635c:	07da      	lsls	r2, r3, #31
 800635e:	4605      	mov	r5, r0
 8006360:	d4e4      	bmi.n	800632c <_fflush_r+0xc>
 8006362:	89a3      	ldrh	r3, [r4, #12]
 8006364:	059b      	lsls	r3, r3, #22
 8006366:	d4e1      	bmi.n	800632c <_fflush_r+0xc>
 8006368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800636a:	f7fe fb99 	bl	8004aa0 <__retarget_lock_release_recursive>
 800636e:	e7dd      	b.n	800632c <_fflush_r+0xc>

08006370 <memmove>:
 8006370:	4288      	cmp	r0, r1
 8006372:	b510      	push	{r4, lr}
 8006374:	eb01 0402 	add.w	r4, r1, r2
 8006378:	d902      	bls.n	8006380 <memmove+0x10>
 800637a:	4284      	cmp	r4, r0
 800637c:	4623      	mov	r3, r4
 800637e:	d807      	bhi.n	8006390 <memmove+0x20>
 8006380:	1e43      	subs	r3, r0, #1
 8006382:	42a1      	cmp	r1, r4
 8006384:	d008      	beq.n	8006398 <memmove+0x28>
 8006386:	f811 2b01 	ldrb.w	r2, [r1], #1
 800638a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800638e:	e7f8      	b.n	8006382 <memmove+0x12>
 8006390:	4402      	add	r2, r0
 8006392:	4601      	mov	r1, r0
 8006394:	428a      	cmp	r2, r1
 8006396:	d100      	bne.n	800639a <memmove+0x2a>
 8006398:	bd10      	pop	{r4, pc}
 800639a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800639e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063a2:	e7f7      	b.n	8006394 <memmove+0x24>

080063a4 <_sbrk_r>:
 80063a4:	b538      	push	{r3, r4, r5, lr}
 80063a6:	4d06      	ldr	r5, [pc, #24]	@ (80063c0 <_sbrk_r+0x1c>)
 80063a8:	2300      	movs	r3, #0
 80063aa:	4604      	mov	r4, r0
 80063ac:	4608      	mov	r0, r1
 80063ae:	602b      	str	r3, [r5, #0]
 80063b0:	f7fa fc8e 	bl	8000cd0 <_sbrk>
 80063b4:	1c43      	adds	r3, r0, #1
 80063b6:	d102      	bne.n	80063be <_sbrk_r+0x1a>
 80063b8:	682b      	ldr	r3, [r5, #0]
 80063ba:	b103      	cbz	r3, 80063be <_sbrk_r+0x1a>
 80063bc:	6023      	str	r3, [r4, #0]
 80063be:	bd38      	pop	{r3, r4, r5, pc}
 80063c0:	20000418 	.word	0x20000418

080063c4 <memcpy>:
 80063c4:	440a      	add	r2, r1
 80063c6:	4291      	cmp	r1, r2
 80063c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063cc:	d100      	bne.n	80063d0 <memcpy+0xc>
 80063ce:	4770      	bx	lr
 80063d0:	b510      	push	{r4, lr}
 80063d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063da:	4291      	cmp	r1, r2
 80063dc:	d1f9      	bne.n	80063d2 <memcpy+0xe>
 80063de:	bd10      	pop	{r4, pc}

080063e0 <__assert_func>:
 80063e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063e2:	4614      	mov	r4, r2
 80063e4:	461a      	mov	r2, r3
 80063e6:	4b09      	ldr	r3, [pc, #36]	@ (800640c <__assert_func+0x2c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4605      	mov	r5, r0
 80063ec:	68d8      	ldr	r0, [r3, #12]
 80063ee:	b954      	cbnz	r4, 8006406 <__assert_func+0x26>
 80063f0:	4b07      	ldr	r3, [pc, #28]	@ (8006410 <__assert_func+0x30>)
 80063f2:	461c      	mov	r4, r3
 80063f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80063f8:	9100      	str	r1, [sp, #0]
 80063fa:	462b      	mov	r3, r5
 80063fc:	4905      	ldr	r1, [pc, #20]	@ (8006414 <__assert_func+0x34>)
 80063fe:	f000 f86f 	bl	80064e0 <fiprintf>
 8006402:	f000 f87f 	bl	8006504 <abort>
 8006406:	4b04      	ldr	r3, [pc, #16]	@ (8006418 <__assert_func+0x38>)
 8006408:	e7f4      	b.n	80063f4 <__assert_func+0x14>
 800640a:	bf00      	nop
 800640c:	20000020 	.word	0x20000020
 8006410:	08006d4e 	.word	0x08006d4e
 8006414:	08006d20 	.word	0x08006d20
 8006418:	08006d13 	.word	0x08006d13

0800641c <_calloc_r>:
 800641c:	b570      	push	{r4, r5, r6, lr}
 800641e:	fba1 5402 	umull	r5, r4, r1, r2
 8006422:	b93c      	cbnz	r4, 8006434 <_calloc_r+0x18>
 8006424:	4629      	mov	r1, r5
 8006426:	f7ff f991 	bl	800574c <_malloc_r>
 800642a:	4606      	mov	r6, r0
 800642c:	b928      	cbnz	r0, 800643a <_calloc_r+0x1e>
 800642e:	2600      	movs	r6, #0
 8006430:	4630      	mov	r0, r6
 8006432:	bd70      	pop	{r4, r5, r6, pc}
 8006434:	220c      	movs	r2, #12
 8006436:	6002      	str	r2, [r0, #0]
 8006438:	e7f9      	b.n	800642e <_calloc_r+0x12>
 800643a:	462a      	mov	r2, r5
 800643c:	4621      	mov	r1, r4
 800643e:	f7fe fab0 	bl	80049a2 <memset>
 8006442:	e7f5      	b.n	8006430 <_calloc_r+0x14>

08006444 <__ascii_mbtowc>:
 8006444:	b082      	sub	sp, #8
 8006446:	b901      	cbnz	r1, 800644a <__ascii_mbtowc+0x6>
 8006448:	a901      	add	r1, sp, #4
 800644a:	b142      	cbz	r2, 800645e <__ascii_mbtowc+0x1a>
 800644c:	b14b      	cbz	r3, 8006462 <__ascii_mbtowc+0x1e>
 800644e:	7813      	ldrb	r3, [r2, #0]
 8006450:	600b      	str	r3, [r1, #0]
 8006452:	7812      	ldrb	r2, [r2, #0]
 8006454:	1e10      	subs	r0, r2, #0
 8006456:	bf18      	it	ne
 8006458:	2001      	movne	r0, #1
 800645a:	b002      	add	sp, #8
 800645c:	4770      	bx	lr
 800645e:	4610      	mov	r0, r2
 8006460:	e7fb      	b.n	800645a <__ascii_mbtowc+0x16>
 8006462:	f06f 0001 	mvn.w	r0, #1
 8006466:	e7f8      	b.n	800645a <__ascii_mbtowc+0x16>

08006468 <_realloc_r>:
 8006468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800646c:	4680      	mov	r8, r0
 800646e:	4615      	mov	r5, r2
 8006470:	460c      	mov	r4, r1
 8006472:	b921      	cbnz	r1, 800647e <_realloc_r+0x16>
 8006474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006478:	4611      	mov	r1, r2
 800647a:	f7ff b967 	b.w	800574c <_malloc_r>
 800647e:	b92a      	cbnz	r2, 800648c <_realloc_r+0x24>
 8006480:	f7ff f8f0 	bl	8005664 <_free_r>
 8006484:	2400      	movs	r4, #0
 8006486:	4620      	mov	r0, r4
 8006488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800648c:	f000 f841 	bl	8006512 <_malloc_usable_size_r>
 8006490:	4285      	cmp	r5, r0
 8006492:	4606      	mov	r6, r0
 8006494:	d802      	bhi.n	800649c <_realloc_r+0x34>
 8006496:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800649a:	d8f4      	bhi.n	8006486 <_realloc_r+0x1e>
 800649c:	4629      	mov	r1, r5
 800649e:	4640      	mov	r0, r8
 80064a0:	f7ff f954 	bl	800574c <_malloc_r>
 80064a4:	4607      	mov	r7, r0
 80064a6:	2800      	cmp	r0, #0
 80064a8:	d0ec      	beq.n	8006484 <_realloc_r+0x1c>
 80064aa:	42b5      	cmp	r5, r6
 80064ac:	462a      	mov	r2, r5
 80064ae:	4621      	mov	r1, r4
 80064b0:	bf28      	it	cs
 80064b2:	4632      	movcs	r2, r6
 80064b4:	f7ff ff86 	bl	80063c4 <memcpy>
 80064b8:	4621      	mov	r1, r4
 80064ba:	4640      	mov	r0, r8
 80064bc:	f7ff f8d2 	bl	8005664 <_free_r>
 80064c0:	463c      	mov	r4, r7
 80064c2:	e7e0      	b.n	8006486 <_realloc_r+0x1e>

080064c4 <__ascii_wctomb>:
 80064c4:	4603      	mov	r3, r0
 80064c6:	4608      	mov	r0, r1
 80064c8:	b141      	cbz	r1, 80064dc <__ascii_wctomb+0x18>
 80064ca:	2aff      	cmp	r2, #255	@ 0xff
 80064cc:	d904      	bls.n	80064d8 <__ascii_wctomb+0x14>
 80064ce:	228a      	movs	r2, #138	@ 0x8a
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	f04f 30ff 	mov.w	r0, #4294967295
 80064d6:	4770      	bx	lr
 80064d8:	700a      	strb	r2, [r1, #0]
 80064da:	2001      	movs	r0, #1
 80064dc:	4770      	bx	lr
	...

080064e0 <fiprintf>:
 80064e0:	b40e      	push	{r1, r2, r3}
 80064e2:	b503      	push	{r0, r1, lr}
 80064e4:	4601      	mov	r1, r0
 80064e6:	ab03      	add	r3, sp, #12
 80064e8:	4805      	ldr	r0, [pc, #20]	@ (8006500 <fiprintf+0x20>)
 80064ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80064ee:	6800      	ldr	r0, [r0, #0]
 80064f0:	9301      	str	r3, [sp, #4]
 80064f2:	f000 f83f 	bl	8006574 <_vfiprintf_r>
 80064f6:	b002      	add	sp, #8
 80064f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064fc:	b003      	add	sp, #12
 80064fe:	4770      	bx	lr
 8006500:	20000020 	.word	0x20000020

08006504 <abort>:
 8006504:	b508      	push	{r3, lr}
 8006506:	2006      	movs	r0, #6
 8006508:	f000 fa08 	bl	800691c <raise>
 800650c:	2001      	movs	r0, #1
 800650e:	f7fa fb66 	bl	8000bde <_exit>

08006512 <_malloc_usable_size_r>:
 8006512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006516:	1f18      	subs	r0, r3, #4
 8006518:	2b00      	cmp	r3, #0
 800651a:	bfbc      	itt	lt
 800651c:	580b      	ldrlt	r3, [r1, r0]
 800651e:	18c0      	addlt	r0, r0, r3
 8006520:	4770      	bx	lr

08006522 <__sfputc_r>:
 8006522:	6893      	ldr	r3, [r2, #8]
 8006524:	3b01      	subs	r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	b410      	push	{r4}
 800652a:	6093      	str	r3, [r2, #8]
 800652c:	da08      	bge.n	8006540 <__sfputc_r+0x1e>
 800652e:	6994      	ldr	r4, [r2, #24]
 8006530:	42a3      	cmp	r3, r4
 8006532:	db01      	blt.n	8006538 <__sfputc_r+0x16>
 8006534:	290a      	cmp	r1, #10
 8006536:	d103      	bne.n	8006540 <__sfputc_r+0x1e>
 8006538:	f85d 4b04 	ldr.w	r4, [sp], #4
 800653c:	f000 b932 	b.w	80067a4 <__swbuf_r>
 8006540:	6813      	ldr	r3, [r2, #0]
 8006542:	1c58      	adds	r0, r3, #1
 8006544:	6010      	str	r0, [r2, #0]
 8006546:	7019      	strb	r1, [r3, #0]
 8006548:	4608      	mov	r0, r1
 800654a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800654e:	4770      	bx	lr

08006550 <__sfputs_r>:
 8006550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006552:	4606      	mov	r6, r0
 8006554:	460f      	mov	r7, r1
 8006556:	4614      	mov	r4, r2
 8006558:	18d5      	adds	r5, r2, r3
 800655a:	42ac      	cmp	r4, r5
 800655c:	d101      	bne.n	8006562 <__sfputs_r+0x12>
 800655e:	2000      	movs	r0, #0
 8006560:	e007      	b.n	8006572 <__sfputs_r+0x22>
 8006562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006566:	463a      	mov	r2, r7
 8006568:	4630      	mov	r0, r6
 800656a:	f7ff ffda 	bl	8006522 <__sfputc_r>
 800656e:	1c43      	adds	r3, r0, #1
 8006570:	d1f3      	bne.n	800655a <__sfputs_r+0xa>
 8006572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006574 <_vfiprintf_r>:
 8006574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006578:	460d      	mov	r5, r1
 800657a:	b09d      	sub	sp, #116	@ 0x74
 800657c:	4614      	mov	r4, r2
 800657e:	4698      	mov	r8, r3
 8006580:	4606      	mov	r6, r0
 8006582:	b118      	cbz	r0, 800658c <_vfiprintf_r+0x18>
 8006584:	6a03      	ldr	r3, [r0, #32]
 8006586:	b90b      	cbnz	r3, 800658c <_vfiprintf_r+0x18>
 8006588:	f7fe f972 	bl	8004870 <__sinit>
 800658c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800658e:	07d9      	lsls	r1, r3, #31
 8006590:	d405      	bmi.n	800659e <_vfiprintf_r+0x2a>
 8006592:	89ab      	ldrh	r3, [r5, #12]
 8006594:	059a      	lsls	r2, r3, #22
 8006596:	d402      	bmi.n	800659e <_vfiprintf_r+0x2a>
 8006598:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800659a:	f7fe fa80 	bl	8004a9e <__retarget_lock_acquire_recursive>
 800659e:	89ab      	ldrh	r3, [r5, #12]
 80065a0:	071b      	lsls	r3, r3, #28
 80065a2:	d501      	bpl.n	80065a8 <_vfiprintf_r+0x34>
 80065a4:	692b      	ldr	r3, [r5, #16]
 80065a6:	b99b      	cbnz	r3, 80065d0 <_vfiprintf_r+0x5c>
 80065a8:	4629      	mov	r1, r5
 80065aa:	4630      	mov	r0, r6
 80065ac:	f000 f938 	bl	8006820 <__swsetup_r>
 80065b0:	b170      	cbz	r0, 80065d0 <_vfiprintf_r+0x5c>
 80065b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065b4:	07dc      	lsls	r4, r3, #31
 80065b6:	d504      	bpl.n	80065c2 <_vfiprintf_r+0x4e>
 80065b8:	f04f 30ff 	mov.w	r0, #4294967295
 80065bc:	b01d      	add	sp, #116	@ 0x74
 80065be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c2:	89ab      	ldrh	r3, [r5, #12]
 80065c4:	0598      	lsls	r0, r3, #22
 80065c6:	d4f7      	bmi.n	80065b8 <_vfiprintf_r+0x44>
 80065c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065ca:	f7fe fa69 	bl	8004aa0 <__retarget_lock_release_recursive>
 80065ce:	e7f3      	b.n	80065b8 <_vfiprintf_r+0x44>
 80065d0:	2300      	movs	r3, #0
 80065d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80065d4:	2320      	movs	r3, #32
 80065d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80065da:	f8cd 800c 	str.w	r8, [sp, #12]
 80065de:	2330      	movs	r3, #48	@ 0x30
 80065e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006790 <_vfiprintf_r+0x21c>
 80065e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80065e8:	f04f 0901 	mov.w	r9, #1
 80065ec:	4623      	mov	r3, r4
 80065ee:	469a      	mov	sl, r3
 80065f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065f4:	b10a      	cbz	r2, 80065fa <_vfiprintf_r+0x86>
 80065f6:	2a25      	cmp	r2, #37	@ 0x25
 80065f8:	d1f9      	bne.n	80065ee <_vfiprintf_r+0x7a>
 80065fa:	ebba 0b04 	subs.w	fp, sl, r4
 80065fe:	d00b      	beq.n	8006618 <_vfiprintf_r+0xa4>
 8006600:	465b      	mov	r3, fp
 8006602:	4622      	mov	r2, r4
 8006604:	4629      	mov	r1, r5
 8006606:	4630      	mov	r0, r6
 8006608:	f7ff ffa2 	bl	8006550 <__sfputs_r>
 800660c:	3001      	adds	r0, #1
 800660e:	f000 80a7 	beq.w	8006760 <_vfiprintf_r+0x1ec>
 8006612:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006614:	445a      	add	r2, fp
 8006616:	9209      	str	r2, [sp, #36]	@ 0x24
 8006618:	f89a 3000 	ldrb.w	r3, [sl]
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 809f 	beq.w	8006760 <_vfiprintf_r+0x1ec>
 8006622:	2300      	movs	r3, #0
 8006624:	f04f 32ff 	mov.w	r2, #4294967295
 8006628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800662c:	f10a 0a01 	add.w	sl, sl, #1
 8006630:	9304      	str	r3, [sp, #16]
 8006632:	9307      	str	r3, [sp, #28]
 8006634:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006638:	931a      	str	r3, [sp, #104]	@ 0x68
 800663a:	4654      	mov	r4, sl
 800663c:	2205      	movs	r2, #5
 800663e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006642:	4853      	ldr	r0, [pc, #332]	@ (8006790 <_vfiprintf_r+0x21c>)
 8006644:	f7f9 fdfc 	bl	8000240 <memchr>
 8006648:	9a04      	ldr	r2, [sp, #16]
 800664a:	b9d8      	cbnz	r0, 8006684 <_vfiprintf_r+0x110>
 800664c:	06d1      	lsls	r1, r2, #27
 800664e:	bf44      	itt	mi
 8006650:	2320      	movmi	r3, #32
 8006652:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006656:	0713      	lsls	r3, r2, #28
 8006658:	bf44      	itt	mi
 800665a:	232b      	movmi	r3, #43	@ 0x2b
 800665c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006660:	f89a 3000 	ldrb.w	r3, [sl]
 8006664:	2b2a      	cmp	r3, #42	@ 0x2a
 8006666:	d015      	beq.n	8006694 <_vfiprintf_r+0x120>
 8006668:	9a07      	ldr	r2, [sp, #28]
 800666a:	4654      	mov	r4, sl
 800666c:	2000      	movs	r0, #0
 800666e:	f04f 0c0a 	mov.w	ip, #10
 8006672:	4621      	mov	r1, r4
 8006674:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006678:	3b30      	subs	r3, #48	@ 0x30
 800667a:	2b09      	cmp	r3, #9
 800667c:	d94b      	bls.n	8006716 <_vfiprintf_r+0x1a2>
 800667e:	b1b0      	cbz	r0, 80066ae <_vfiprintf_r+0x13a>
 8006680:	9207      	str	r2, [sp, #28]
 8006682:	e014      	b.n	80066ae <_vfiprintf_r+0x13a>
 8006684:	eba0 0308 	sub.w	r3, r0, r8
 8006688:	fa09 f303 	lsl.w	r3, r9, r3
 800668c:	4313      	orrs	r3, r2
 800668e:	9304      	str	r3, [sp, #16]
 8006690:	46a2      	mov	sl, r4
 8006692:	e7d2      	b.n	800663a <_vfiprintf_r+0xc6>
 8006694:	9b03      	ldr	r3, [sp, #12]
 8006696:	1d19      	adds	r1, r3, #4
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	9103      	str	r1, [sp, #12]
 800669c:	2b00      	cmp	r3, #0
 800669e:	bfbb      	ittet	lt
 80066a0:	425b      	neglt	r3, r3
 80066a2:	f042 0202 	orrlt.w	r2, r2, #2
 80066a6:	9307      	strge	r3, [sp, #28]
 80066a8:	9307      	strlt	r3, [sp, #28]
 80066aa:	bfb8      	it	lt
 80066ac:	9204      	strlt	r2, [sp, #16]
 80066ae:	7823      	ldrb	r3, [r4, #0]
 80066b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80066b2:	d10a      	bne.n	80066ca <_vfiprintf_r+0x156>
 80066b4:	7863      	ldrb	r3, [r4, #1]
 80066b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80066b8:	d132      	bne.n	8006720 <_vfiprintf_r+0x1ac>
 80066ba:	9b03      	ldr	r3, [sp, #12]
 80066bc:	1d1a      	adds	r2, r3, #4
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	9203      	str	r2, [sp, #12]
 80066c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80066c6:	3402      	adds	r4, #2
 80066c8:	9305      	str	r3, [sp, #20]
 80066ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80067a0 <_vfiprintf_r+0x22c>
 80066ce:	7821      	ldrb	r1, [r4, #0]
 80066d0:	2203      	movs	r2, #3
 80066d2:	4650      	mov	r0, sl
 80066d4:	f7f9 fdb4 	bl	8000240 <memchr>
 80066d8:	b138      	cbz	r0, 80066ea <_vfiprintf_r+0x176>
 80066da:	9b04      	ldr	r3, [sp, #16]
 80066dc:	eba0 000a 	sub.w	r0, r0, sl
 80066e0:	2240      	movs	r2, #64	@ 0x40
 80066e2:	4082      	lsls	r2, r0
 80066e4:	4313      	orrs	r3, r2
 80066e6:	3401      	adds	r4, #1
 80066e8:	9304      	str	r3, [sp, #16]
 80066ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ee:	4829      	ldr	r0, [pc, #164]	@ (8006794 <_vfiprintf_r+0x220>)
 80066f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80066f4:	2206      	movs	r2, #6
 80066f6:	f7f9 fda3 	bl	8000240 <memchr>
 80066fa:	2800      	cmp	r0, #0
 80066fc:	d03f      	beq.n	800677e <_vfiprintf_r+0x20a>
 80066fe:	4b26      	ldr	r3, [pc, #152]	@ (8006798 <_vfiprintf_r+0x224>)
 8006700:	bb1b      	cbnz	r3, 800674a <_vfiprintf_r+0x1d6>
 8006702:	9b03      	ldr	r3, [sp, #12]
 8006704:	3307      	adds	r3, #7
 8006706:	f023 0307 	bic.w	r3, r3, #7
 800670a:	3308      	adds	r3, #8
 800670c:	9303      	str	r3, [sp, #12]
 800670e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006710:	443b      	add	r3, r7
 8006712:	9309      	str	r3, [sp, #36]	@ 0x24
 8006714:	e76a      	b.n	80065ec <_vfiprintf_r+0x78>
 8006716:	fb0c 3202 	mla	r2, ip, r2, r3
 800671a:	460c      	mov	r4, r1
 800671c:	2001      	movs	r0, #1
 800671e:	e7a8      	b.n	8006672 <_vfiprintf_r+0xfe>
 8006720:	2300      	movs	r3, #0
 8006722:	3401      	adds	r4, #1
 8006724:	9305      	str	r3, [sp, #20]
 8006726:	4619      	mov	r1, r3
 8006728:	f04f 0c0a 	mov.w	ip, #10
 800672c:	4620      	mov	r0, r4
 800672e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006732:	3a30      	subs	r2, #48	@ 0x30
 8006734:	2a09      	cmp	r2, #9
 8006736:	d903      	bls.n	8006740 <_vfiprintf_r+0x1cc>
 8006738:	2b00      	cmp	r3, #0
 800673a:	d0c6      	beq.n	80066ca <_vfiprintf_r+0x156>
 800673c:	9105      	str	r1, [sp, #20]
 800673e:	e7c4      	b.n	80066ca <_vfiprintf_r+0x156>
 8006740:	fb0c 2101 	mla	r1, ip, r1, r2
 8006744:	4604      	mov	r4, r0
 8006746:	2301      	movs	r3, #1
 8006748:	e7f0      	b.n	800672c <_vfiprintf_r+0x1b8>
 800674a:	ab03      	add	r3, sp, #12
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	462a      	mov	r2, r5
 8006750:	4b12      	ldr	r3, [pc, #72]	@ (800679c <_vfiprintf_r+0x228>)
 8006752:	a904      	add	r1, sp, #16
 8006754:	4630      	mov	r0, r6
 8006756:	f7fd fc57 	bl	8004008 <_printf_float>
 800675a:	4607      	mov	r7, r0
 800675c:	1c78      	adds	r0, r7, #1
 800675e:	d1d6      	bne.n	800670e <_vfiprintf_r+0x19a>
 8006760:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006762:	07d9      	lsls	r1, r3, #31
 8006764:	d405      	bmi.n	8006772 <_vfiprintf_r+0x1fe>
 8006766:	89ab      	ldrh	r3, [r5, #12]
 8006768:	059a      	lsls	r2, r3, #22
 800676a:	d402      	bmi.n	8006772 <_vfiprintf_r+0x1fe>
 800676c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800676e:	f7fe f997 	bl	8004aa0 <__retarget_lock_release_recursive>
 8006772:	89ab      	ldrh	r3, [r5, #12]
 8006774:	065b      	lsls	r3, r3, #25
 8006776:	f53f af1f 	bmi.w	80065b8 <_vfiprintf_r+0x44>
 800677a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800677c:	e71e      	b.n	80065bc <_vfiprintf_r+0x48>
 800677e:	ab03      	add	r3, sp, #12
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	462a      	mov	r2, r5
 8006784:	4b05      	ldr	r3, [pc, #20]	@ (800679c <_vfiprintf_r+0x228>)
 8006786:	a904      	add	r1, sp, #16
 8006788:	4630      	mov	r0, r6
 800678a:	f7fd fec5 	bl	8004518 <_printf_i>
 800678e:	e7e4      	b.n	800675a <_vfiprintf_r+0x1e6>
 8006790:	08006cf8 	.word	0x08006cf8
 8006794:	08006d02 	.word	0x08006d02
 8006798:	08004009 	.word	0x08004009
 800679c:	08006551 	.word	0x08006551
 80067a0:	08006cfe 	.word	0x08006cfe

080067a4 <__swbuf_r>:
 80067a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a6:	460e      	mov	r6, r1
 80067a8:	4614      	mov	r4, r2
 80067aa:	4605      	mov	r5, r0
 80067ac:	b118      	cbz	r0, 80067b6 <__swbuf_r+0x12>
 80067ae:	6a03      	ldr	r3, [r0, #32]
 80067b0:	b90b      	cbnz	r3, 80067b6 <__swbuf_r+0x12>
 80067b2:	f7fe f85d 	bl	8004870 <__sinit>
 80067b6:	69a3      	ldr	r3, [r4, #24]
 80067b8:	60a3      	str	r3, [r4, #8]
 80067ba:	89a3      	ldrh	r3, [r4, #12]
 80067bc:	071a      	lsls	r2, r3, #28
 80067be:	d501      	bpl.n	80067c4 <__swbuf_r+0x20>
 80067c0:	6923      	ldr	r3, [r4, #16]
 80067c2:	b943      	cbnz	r3, 80067d6 <__swbuf_r+0x32>
 80067c4:	4621      	mov	r1, r4
 80067c6:	4628      	mov	r0, r5
 80067c8:	f000 f82a 	bl	8006820 <__swsetup_r>
 80067cc:	b118      	cbz	r0, 80067d6 <__swbuf_r+0x32>
 80067ce:	f04f 37ff 	mov.w	r7, #4294967295
 80067d2:	4638      	mov	r0, r7
 80067d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067d6:	6823      	ldr	r3, [r4, #0]
 80067d8:	6922      	ldr	r2, [r4, #16]
 80067da:	1a98      	subs	r0, r3, r2
 80067dc:	6963      	ldr	r3, [r4, #20]
 80067de:	b2f6      	uxtb	r6, r6
 80067e0:	4283      	cmp	r3, r0
 80067e2:	4637      	mov	r7, r6
 80067e4:	dc05      	bgt.n	80067f2 <__swbuf_r+0x4e>
 80067e6:	4621      	mov	r1, r4
 80067e8:	4628      	mov	r0, r5
 80067ea:	f7ff fd99 	bl	8006320 <_fflush_r>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d1ed      	bne.n	80067ce <__swbuf_r+0x2a>
 80067f2:	68a3      	ldr	r3, [r4, #8]
 80067f4:	3b01      	subs	r3, #1
 80067f6:	60a3      	str	r3, [r4, #8]
 80067f8:	6823      	ldr	r3, [r4, #0]
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	6022      	str	r2, [r4, #0]
 80067fe:	701e      	strb	r6, [r3, #0]
 8006800:	6962      	ldr	r2, [r4, #20]
 8006802:	1c43      	adds	r3, r0, #1
 8006804:	429a      	cmp	r2, r3
 8006806:	d004      	beq.n	8006812 <__swbuf_r+0x6e>
 8006808:	89a3      	ldrh	r3, [r4, #12]
 800680a:	07db      	lsls	r3, r3, #31
 800680c:	d5e1      	bpl.n	80067d2 <__swbuf_r+0x2e>
 800680e:	2e0a      	cmp	r6, #10
 8006810:	d1df      	bne.n	80067d2 <__swbuf_r+0x2e>
 8006812:	4621      	mov	r1, r4
 8006814:	4628      	mov	r0, r5
 8006816:	f7ff fd83 	bl	8006320 <_fflush_r>
 800681a:	2800      	cmp	r0, #0
 800681c:	d0d9      	beq.n	80067d2 <__swbuf_r+0x2e>
 800681e:	e7d6      	b.n	80067ce <__swbuf_r+0x2a>

08006820 <__swsetup_r>:
 8006820:	b538      	push	{r3, r4, r5, lr}
 8006822:	4b29      	ldr	r3, [pc, #164]	@ (80068c8 <__swsetup_r+0xa8>)
 8006824:	4605      	mov	r5, r0
 8006826:	6818      	ldr	r0, [r3, #0]
 8006828:	460c      	mov	r4, r1
 800682a:	b118      	cbz	r0, 8006834 <__swsetup_r+0x14>
 800682c:	6a03      	ldr	r3, [r0, #32]
 800682e:	b90b      	cbnz	r3, 8006834 <__swsetup_r+0x14>
 8006830:	f7fe f81e 	bl	8004870 <__sinit>
 8006834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006838:	0719      	lsls	r1, r3, #28
 800683a:	d422      	bmi.n	8006882 <__swsetup_r+0x62>
 800683c:	06da      	lsls	r2, r3, #27
 800683e:	d407      	bmi.n	8006850 <__swsetup_r+0x30>
 8006840:	2209      	movs	r2, #9
 8006842:	602a      	str	r2, [r5, #0]
 8006844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006848:	81a3      	strh	r3, [r4, #12]
 800684a:	f04f 30ff 	mov.w	r0, #4294967295
 800684e:	e033      	b.n	80068b8 <__swsetup_r+0x98>
 8006850:	0758      	lsls	r0, r3, #29
 8006852:	d512      	bpl.n	800687a <__swsetup_r+0x5a>
 8006854:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006856:	b141      	cbz	r1, 800686a <__swsetup_r+0x4a>
 8006858:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800685c:	4299      	cmp	r1, r3
 800685e:	d002      	beq.n	8006866 <__swsetup_r+0x46>
 8006860:	4628      	mov	r0, r5
 8006862:	f7fe feff 	bl	8005664 <_free_r>
 8006866:	2300      	movs	r3, #0
 8006868:	6363      	str	r3, [r4, #52]	@ 0x34
 800686a:	89a3      	ldrh	r3, [r4, #12]
 800686c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006870:	81a3      	strh	r3, [r4, #12]
 8006872:	2300      	movs	r3, #0
 8006874:	6063      	str	r3, [r4, #4]
 8006876:	6923      	ldr	r3, [r4, #16]
 8006878:	6023      	str	r3, [r4, #0]
 800687a:	89a3      	ldrh	r3, [r4, #12]
 800687c:	f043 0308 	orr.w	r3, r3, #8
 8006880:	81a3      	strh	r3, [r4, #12]
 8006882:	6923      	ldr	r3, [r4, #16]
 8006884:	b94b      	cbnz	r3, 800689a <__swsetup_r+0x7a>
 8006886:	89a3      	ldrh	r3, [r4, #12]
 8006888:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800688c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006890:	d003      	beq.n	800689a <__swsetup_r+0x7a>
 8006892:	4621      	mov	r1, r4
 8006894:	4628      	mov	r0, r5
 8006896:	f000 f883 	bl	80069a0 <__smakebuf_r>
 800689a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800689e:	f013 0201 	ands.w	r2, r3, #1
 80068a2:	d00a      	beq.n	80068ba <__swsetup_r+0x9a>
 80068a4:	2200      	movs	r2, #0
 80068a6:	60a2      	str	r2, [r4, #8]
 80068a8:	6962      	ldr	r2, [r4, #20]
 80068aa:	4252      	negs	r2, r2
 80068ac:	61a2      	str	r2, [r4, #24]
 80068ae:	6922      	ldr	r2, [r4, #16]
 80068b0:	b942      	cbnz	r2, 80068c4 <__swsetup_r+0xa4>
 80068b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80068b6:	d1c5      	bne.n	8006844 <__swsetup_r+0x24>
 80068b8:	bd38      	pop	{r3, r4, r5, pc}
 80068ba:	0799      	lsls	r1, r3, #30
 80068bc:	bf58      	it	pl
 80068be:	6962      	ldrpl	r2, [r4, #20]
 80068c0:	60a2      	str	r2, [r4, #8]
 80068c2:	e7f4      	b.n	80068ae <__swsetup_r+0x8e>
 80068c4:	2000      	movs	r0, #0
 80068c6:	e7f7      	b.n	80068b8 <__swsetup_r+0x98>
 80068c8:	20000020 	.word	0x20000020

080068cc <_raise_r>:
 80068cc:	291f      	cmp	r1, #31
 80068ce:	b538      	push	{r3, r4, r5, lr}
 80068d0:	4605      	mov	r5, r0
 80068d2:	460c      	mov	r4, r1
 80068d4:	d904      	bls.n	80068e0 <_raise_r+0x14>
 80068d6:	2316      	movs	r3, #22
 80068d8:	6003      	str	r3, [r0, #0]
 80068da:	f04f 30ff 	mov.w	r0, #4294967295
 80068de:	bd38      	pop	{r3, r4, r5, pc}
 80068e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80068e2:	b112      	cbz	r2, 80068ea <_raise_r+0x1e>
 80068e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068e8:	b94b      	cbnz	r3, 80068fe <_raise_r+0x32>
 80068ea:	4628      	mov	r0, r5
 80068ec:	f000 f830 	bl	8006950 <_getpid_r>
 80068f0:	4622      	mov	r2, r4
 80068f2:	4601      	mov	r1, r0
 80068f4:	4628      	mov	r0, r5
 80068f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068fa:	f000 b817 	b.w	800692c <_kill_r>
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d00a      	beq.n	8006918 <_raise_r+0x4c>
 8006902:	1c59      	adds	r1, r3, #1
 8006904:	d103      	bne.n	800690e <_raise_r+0x42>
 8006906:	2316      	movs	r3, #22
 8006908:	6003      	str	r3, [r0, #0]
 800690a:	2001      	movs	r0, #1
 800690c:	e7e7      	b.n	80068de <_raise_r+0x12>
 800690e:	2100      	movs	r1, #0
 8006910:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006914:	4620      	mov	r0, r4
 8006916:	4798      	blx	r3
 8006918:	2000      	movs	r0, #0
 800691a:	e7e0      	b.n	80068de <_raise_r+0x12>

0800691c <raise>:
 800691c:	4b02      	ldr	r3, [pc, #8]	@ (8006928 <raise+0xc>)
 800691e:	4601      	mov	r1, r0
 8006920:	6818      	ldr	r0, [r3, #0]
 8006922:	f7ff bfd3 	b.w	80068cc <_raise_r>
 8006926:	bf00      	nop
 8006928:	20000020 	.word	0x20000020

0800692c <_kill_r>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	4d07      	ldr	r5, [pc, #28]	@ (800694c <_kill_r+0x20>)
 8006930:	2300      	movs	r3, #0
 8006932:	4604      	mov	r4, r0
 8006934:	4608      	mov	r0, r1
 8006936:	4611      	mov	r1, r2
 8006938:	602b      	str	r3, [r5, #0]
 800693a:	f7fa f940 	bl	8000bbe <_kill>
 800693e:	1c43      	adds	r3, r0, #1
 8006940:	d102      	bne.n	8006948 <_kill_r+0x1c>
 8006942:	682b      	ldr	r3, [r5, #0]
 8006944:	b103      	cbz	r3, 8006948 <_kill_r+0x1c>
 8006946:	6023      	str	r3, [r4, #0]
 8006948:	bd38      	pop	{r3, r4, r5, pc}
 800694a:	bf00      	nop
 800694c:	20000418 	.word	0x20000418

08006950 <_getpid_r>:
 8006950:	f7fa b92d 	b.w	8000bae <_getpid>

08006954 <__swhatbuf_r>:
 8006954:	b570      	push	{r4, r5, r6, lr}
 8006956:	460c      	mov	r4, r1
 8006958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800695c:	2900      	cmp	r1, #0
 800695e:	b096      	sub	sp, #88	@ 0x58
 8006960:	4615      	mov	r5, r2
 8006962:	461e      	mov	r6, r3
 8006964:	da0d      	bge.n	8006982 <__swhatbuf_r+0x2e>
 8006966:	89a3      	ldrh	r3, [r4, #12]
 8006968:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800696c:	f04f 0100 	mov.w	r1, #0
 8006970:	bf14      	ite	ne
 8006972:	2340      	movne	r3, #64	@ 0x40
 8006974:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006978:	2000      	movs	r0, #0
 800697a:	6031      	str	r1, [r6, #0]
 800697c:	602b      	str	r3, [r5, #0]
 800697e:	b016      	add	sp, #88	@ 0x58
 8006980:	bd70      	pop	{r4, r5, r6, pc}
 8006982:	466a      	mov	r2, sp
 8006984:	f000 f848 	bl	8006a18 <_fstat_r>
 8006988:	2800      	cmp	r0, #0
 800698a:	dbec      	blt.n	8006966 <__swhatbuf_r+0x12>
 800698c:	9901      	ldr	r1, [sp, #4]
 800698e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006992:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006996:	4259      	negs	r1, r3
 8006998:	4159      	adcs	r1, r3
 800699a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800699e:	e7eb      	b.n	8006978 <__swhatbuf_r+0x24>

080069a0 <__smakebuf_r>:
 80069a0:	898b      	ldrh	r3, [r1, #12]
 80069a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069a4:	079d      	lsls	r5, r3, #30
 80069a6:	4606      	mov	r6, r0
 80069a8:	460c      	mov	r4, r1
 80069aa:	d507      	bpl.n	80069bc <__smakebuf_r+0x1c>
 80069ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	6123      	str	r3, [r4, #16]
 80069b4:	2301      	movs	r3, #1
 80069b6:	6163      	str	r3, [r4, #20]
 80069b8:	b003      	add	sp, #12
 80069ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069bc:	ab01      	add	r3, sp, #4
 80069be:	466a      	mov	r2, sp
 80069c0:	f7ff ffc8 	bl	8006954 <__swhatbuf_r>
 80069c4:	9f00      	ldr	r7, [sp, #0]
 80069c6:	4605      	mov	r5, r0
 80069c8:	4639      	mov	r1, r7
 80069ca:	4630      	mov	r0, r6
 80069cc:	f7fe febe 	bl	800574c <_malloc_r>
 80069d0:	b948      	cbnz	r0, 80069e6 <__smakebuf_r+0x46>
 80069d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069d6:	059a      	lsls	r2, r3, #22
 80069d8:	d4ee      	bmi.n	80069b8 <__smakebuf_r+0x18>
 80069da:	f023 0303 	bic.w	r3, r3, #3
 80069de:	f043 0302 	orr.w	r3, r3, #2
 80069e2:	81a3      	strh	r3, [r4, #12]
 80069e4:	e7e2      	b.n	80069ac <__smakebuf_r+0xc>
 80069e6:	89a3      	ldrh	r3, [r4, #12]
 80069e8:	6020      	str	r0, [r4, #0]
 80069ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ee:	81a3      	strh	r3, [r4, #12]
 80069f0:	9b01      	ldr	r3, [sp, #4]
 80069f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80069f6:	b15b      	cbz	r3, 8006a10 <__smakebuf_r+0x70>
 80069f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069fc:	4630      	mov	r0, r6
 80069fe:	f000 f81d 	bl	8006a3c <_isatty_r>
 8006a02:	b128      	cbz	r0, 8006a10 <__smakebuf_r+0x70>
 8006a04:	89a3      	ldrh	r3, [r4, #12]
 8006a06:	f023 0303 	bic.w	r3, r3, #3
 8006a0a:	f043 0301 	orr.w	r3, r3, #1
 8006a0e:	81a3      	strh	r3, [r4, #12]
 8006a10:	89a3      	ldrh	r3, [r4, #12]
 8006a12:	431d      	orrs	r5, r3
 8006a14:	81a5      	strh	r5, [r4, #12]
 8006a16:	e7cf      	b.n	80069b8 <__smakebuf_r+0x18>

08006a18 <_fstat_r>:
 8006a18:	b538      	push	{r3, r4, r5, lr}
 8006a1a:	4d07      	ldr	r5, [pc, #28]	@ (8006a38 <_fstat_r+0x20>)
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	4604      	mov	r4, r0
 8006a20:	4608      	mov	r0, r1
 8006a22:	4611      	mov	r1, r2
 8006a24:	602b      	str	r3, [r5, #0]
 8006a26:	f7fa f92a 	bl	8000c7e <_fstat>
 8006a2a:	1c43      	adds	r3, r0, #1
 8006a2c:	d102      	bne.n	8006a34 <_fstat_r+0x1c>
 8006a2e:	682b      	ldr	r3, [r5, #0]
 8006a30:	b103      	cbz	r3, 8006a34 <_fstat_r+0x1c>
 8006a32:	6023      	str	r3, [r4, #0]
 8006a34:	bd38      	pop	{r3, r4, r5, pc}
 8006a36:	bf00      	nop
 8006a38:	20000418 	.word	0x20000418

08006a3c <_isatty_r>:
 8006a3c:	b538      	push	{r3, r4, r5, lr}
 8006a3e:	4d06      	ldr	r5, [pc, #24]	@ (8006a58 <_isatty_r+0x1c>)
 8006a40:	2300      	movs	r3, #0
 8006a42:	4604      	mov	r4, r0
 8006a44:	4608      	mov	r0, r1
 8006a46:	602b      	str	r3, [r5, #0]
 8006a48:	f7fa f929 	bl	8000c9e <_isatty>
 8006a4c:	1c43      	adds	r3, r0, #1
 8006a4e:	d102      	bne.n	8006a56 <_isatty_r+0x1a>
 8006a50:	682b      	ldr	r3, [r5, #0]
 8006a52:	b103      	cbz	r3, 8006a56 <_isatty_r+0x1a>
 8006a54:	6023      	str	r3, [r4, #0]
 8006a56:	bd38      	pop	{r3, r4, r5, pc}
 8006a58:	20000418 	.word	0x20000418

08006a5c <_init>:
 8006a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a5e:	bf00      	nop
 8006a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a62:	bc08      	pop	{r3}
 8006a64:	469e      	mov	lr, r3
 8006a66:	4770      	bx	lr

08006a68 <_fini>:
 8006a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6a:	bf00      	nop
 8006a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a6e:	bc08      	pop	{r3}
 8006a70:	469e      	mov	lr, r3
 8006a72:	4770      	bx	lr
