
767_SPI_ILI9341_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a54  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  08008c58  08008c58  00009c58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092a8  080092a8  0000b1e0  2**0
                  CONTENTS
  4 .ARM          00000008  080092a8  080092a8  0000a2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092b0  080092b0  0000b1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092b0  080092b0  0000a2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092b4  080092b4  0000a2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080092b8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200001e0  08009498  0000b1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  08009498  0000b4f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015703  00000000  00000000  0000b20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003845  00000000  00000000  00020911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  00024158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001041  00000000  00000000  00025658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b0a9  00000000  00000000  00026699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc67  00000000  00000000  00051742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100fc2  00000000  00000000  0006d3a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016e36b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006624  00000000  00000000  0016e3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001749d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	08008c3c 	.word	0x08008c3c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	08008c3c 	.word	0x08008c3c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08e      	sub	sp, #56	@ 0x38
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005f6:	4b8d      	ldr	r3, [pc, #564]	@ (800082c <MX_GPIO_Init+0x24c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a8c      	ldr	r2, [pc, #560]	@ (800082c <MX_GPIO_Init+0x24c>)
 80005fc:	f043 0310 	orr.w	r3, r3, #16
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b8a      	ldr	r3, [pc, #552]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0310 	and.w	r3, r3, #16
 800060a:	623b      	str	r3, [r7, #32]
 800060c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060e:	4b87      	ldr	r3, [pc, #540]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a86      	ldr	r2, [pc, #536]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b84      	ldr	r3, [pc, #528]	@ (800082c <MX_GPIO_Init+0x24c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	61fb      	str	r3, [r7, #28]
 8000624:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000626:	4b81      	ldr	r3, [pc, #516]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a80      	ldr	r2, [pc, #512]	@ (800082c <MX_GPIO_Init+0x24c>)
 800062c:	f043 0320 	orr.w	r3, r3, #32
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b7e      	ldr	r3, [pc, #504]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0320 	and.w	r3, r3, #32
 800063a:	61bb      	str	r3, [r7, #24]
 800063c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063e:	4b7b      	ldr	r3, [pc, #492]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	4a7a      	ldr	r2, [pc, #488]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000648:	6313      	str	r3, [r2, #48]	@ 0x30
 800064a:	4b78      	ldr	r3, [pc, #480]	@ (800082c <MX_GPIO_Init+0x24c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b75      	ldr	r3, [pc, #468]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a74      	ldr	r2, [pc, #464]	@ (800082c <MX_GPIO_Init+0x24c>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b72      	ldr	r3, [pc, #456]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b6f      	ldr	r3, [pc, #444]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4a6e      	ldr	r2, [pc, #440]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4b6c      	ldr	r3, [pc, #432]	@ (800082c <MX_GPIO_Init+0x24c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000686:	4b69      	ldr	r3, [pc, #420]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a68      	ldr	r2, [pc, #416]	@ (800082c <MX_GPIO_Init+0x24c>)
 800068c:	f043 0308 	orr.w	r3, r3, #8
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b66      	ldr	r3, [pc, #408]	@ (800082c <MX_GPIO_Init+0x24c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0308 	and.w	r3, r3, #8
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800069e:	4b63      	ldr	r3, [pc, #396]	@ (800082c <MX_GPIO_Init+0x24c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a62      	ldr	r2, [pc, #392]	@ (800082c <MX_GPIO_Init+0x24c>)
 80006a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b60      	ldr	r3, [pc, #384]	@ (800082c <MX_GPIO_Init+0x24c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2168      	movs	r1, #104	@ 0x68
 80006ba:	485d      	ldr	r0, [pc, #372]	@ (8000830 <MX_GPIO_Init+0x250>)
 80006bc:	f002 fb4c 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80006c6:	485b      	ldr	r0, [pc, #364]	@ (8000834 <MX_GPIO_Init+0x254>)
 80006c8:	f002 fb46 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2140      	movs	r1, #64	@ 0x40
 80006d0:	4859      	ldr	r0, [pc, #356]	@ (8000838 <MX_GPIO_Init+0x258>)
 80006d2:	f002 fb41 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80006dc:	4857      	ldr	r0, [pc, #348]	@ (800083c <MX_GPIO_Init+0x25c>)
 80006de:	f002 fb3b 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 80006e2:	2314      	movs	r3, #20
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e6:	2300      	movs	r3, #0
 80006e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f2:	4619      	mov	r1, r3
 80006f4:	484e      	ldr	r0, [pc, #312]	@ (8000830 <MX_GPIO_Init+0x250>)
 80006f6:	f002 f96b 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 80006fa:	2368      	movs	r3, #104	@ 0x68
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000706:	2303      	movs	r3, #3
 8000708:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800070a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070e:	4619      	mov	r1, r3
 8000710:	4847      	ldr	r0, [pc, #284]	@ (8000830 <MX_GPIO_Init+0x250>)
 8000712:	f002 f95d 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000716:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800071a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071c:	2300      	movs	r3, #0
 800071e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000728:	4619      	mov	r1, r3
 800072a:	4844      	ldr	r0, [pc, #272]	@ (800083c <MX_GPIO_Init+0x25c>)
 800072c:	f002 f950 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000730:	2332      	movs	r3, #50	@ 0x32
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000740:	230b      	movs	r3, #11
 8000742:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000744:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000748:	4619      	mov	r1, r3
 800074a:	483c      	ldr	r0, [pc, #240]	@ (800083c <MX_GPIO_Init+0x25c>)
 800074c:	f002 f940 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000750:	2386      	movs	r3, #134	@ 0x86
 8000752:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000760:	230b      	movs	r3, #11
 8000762:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000768:	4619      	mov	r1, r3
 800076a:	4835      	ldr	r0, [pc, #212]	@ (8000840 <MX_GPIO_Init+0x260>)
 800076c:	f002 f930 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000770:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000774:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077e:	2303      	movs	r3, #3
 8000780:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000782:	230b      	movs	r3, #11
 8000784:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078a:	4619      	mov	r1, r3
 800078c:	4829      	ldr	r0, [pc, #164]	@ (8000834 <MX_GPIO_Init+0x254>)
 800078e:	f002 f91f 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000792:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000796:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a8:	4619      	mov	r1, r3
 80007aa:	4822      	ldr	r0, [pc, #136]	@ (8000834 <MX_GPIO_Init+0x254>)
 80007ac:	f002 f910 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007b0:	2340      	movs	r3, #64	@ 0x40
 80007b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c4:	4619      	mov	r1, r3
 80007c6:	481c      	ldr	r0, [pc, #112]	@ (8000838 <MX_GPIO_Init+0x258>)
 80007c8:	f002 f902 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007cc:	2380      	movs	r3, #128	@ 0x80
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007dc:	4619      	mov	r1, r3
 80007de:	4816      	ldr	r0, [pc, #88]	@ (8000838 <MX_GPIO_Init+0x258>)
 80007e0:	f002 f8f6 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 80007e4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fa:	4619      	mov	r1, r3
 80007fc:	480f      	ldr	r0, [pc, #60]	@ (800083c <MX_GPIO_Init+0x25c>)
 80007fe:	f002 f8e7 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000802:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000806:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000810:	2303      	movs	r3, #3
 8000812:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000814:	230b      	movs	r3, #11
 8000816:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800081c:	4619      	mov	r1, r3
 800081e:	4806      	ldr	r0, [pc, #24]	@ (8000838 <MX_GPIO_Init+0x258>)
 8000820:	f002 f8d6 	bl	80029d0 <HAL_GPIO_Init>

}
 8000824:	bf00      	nop
 8000826:	3738      	adds	r7, #56	@ 0x38
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40021000 	.word	0x40021000
 8000834:	40020400 	.word	0x40020400
 8000838:	40021800 	.word	0x40021800
 800083c:	40020800 	.word	0x40020800
 8000840:	40020000 	.word	0x40020000

08000844 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000848:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <MX_I2C1_Init+0x74>)
 800084a:	4a1c      	ldr	r2, [pc, #112]	@ (80008bc <MX_I2C1_Init+0x78>)
 800084c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800084e:	4b1a      	ldr	r3, [pc, #104]	@ (80008b8 <MX_I2C1_Init+0x74>)
 8000850:	4a1b      	ldr	r2, [pc, #108]	@ (80008c0 <MX_I2C1_Init+0x7c>)
 8000852:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000854:	4b18      	ldr	r3, [pc, #96]	@ (80008b8 <MX_I2C1_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085a:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <MX_I2C1_Init+0x74>)
 800085c:	2201      	movs	r2, #1
 800085e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000860:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <MX_I2C1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000866:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <MX_I2C1_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800086c:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <MX_I2C1_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_I2C1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <MX_I2C1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800087e:	480e      	ldr	r0, [pc, #56]	@ (80008b8 <MX_I2C1_Init+0x74>)
 8000880:	f002 fa9e 	bl	8002dc0 <HAL_I2C_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800088a:	f000 fd1f 	bl	80012cc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800088e:	2100      	movs	r1, #0
 8000890:	4809      	ldr	r0, [pc, #36]	@ (80008b8 <MX_I2C1_Init+0x74>)
 8000892:	f002 feef 	bl	8003674 <HAL_I2CEx_ConfigAnalogFilter>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800089c:	f000 fd16 	bl	80012cc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008a0:	2100      	movs	r1, #0
 80008a2:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <MX_I2C1_Init+0x74>)
 80008a4:	f002 ff31 	bl	800370a <HAL_I2CEx_ConfigDigitalFilter>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ae:	f000 fd0d 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200001fc 	.word	0x200001fc
 80008bc:	40005400 	.word	0x40005400
 80008c0:	00c0eaff 	.word	0x00c0eaff

080008c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	@ 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a17      	ldr	r2, [pc, #92]	@ (8000940 <HAL_I2C_MspInit+0x7c>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d128      	bne.n	8000938 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	4b17      	ldr	r3, [pc, #92]	@ (8000944 <HAL_I2C_MspInit+0x80>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a16      	ldr	r2, [pc, #88]	@ (8000944 <HAL_I2C_MspInit+0x80>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <HAL_I2C_MspInit+0x80>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000904:	2312      	movs	r3, #18
 8000906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000910:	2304      	movs	r3, #4
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	480b      	ldr	r0, [pc, #44]	@ (8000948 <HAL_I2C_MspInit+0x84>)
 800091c:	f002 f858 	bl	80029d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000920:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <HAL_I2C_MspInit+0x80>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000924:	4a07      	ldr	r2, [pc, #28]	@ (8000944 <HAL_I2C_MspInit+0x80>)
 8000926:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800092a:	6413      	str	r3, [r2, #64]	@ 0x40
 800092c:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <HAL_I2C_MspInit+0x80>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000930:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000938:	bf00      	nop
 800093a:	3728      	adds	r7, #40	@ 0x28
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40005400 	.word	0x40005400
 8000944:	40023800 	.word	0x40023800
 8000948:	40020400 	.word	0x40020400

0800094c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000950:	f3bf 8f4f 	dsb	sy
}
 8000954:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000956:	f3bf 8f6f 	isb	sy
}
 800095a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800095c:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <SCB_EnableICache+0x48>)
 800095e:	2200      	movs	r2, #0
 8000960:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000964:	f3bf 8f4f 	dsb	sy
}
 8000968:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800096a:	f3bf 8f6f 	isb	sy
}
 800096e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000970:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <SCB_EnableICache+0x48>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	4a07      	ldr	r2, [pc, #28]	@ (8000994 <SCB_EnableICache+0x48>)
 8000976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800097a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800097c:	f3bf 8f4f 	dsb	sy
}
 8000980:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000982:	f3bf 8f6f 	isb	sy
}
 8000986:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800099e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a1c <SCB_EnableDCache+0x84>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009a6:	f3bf 8f4f 	dsb	sy
}
 80009aa:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	@ (8000a1c <SCB_EnableDCache+0x84>)
 80009ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80009b2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	0b5b      	lsrs	r3, r3, #13
 80009b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009bc:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009c6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	015a      	lsls	r2, r3, #5
 80009cc:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80009d0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009d6:	4911      	ldr	r1, [pc, #68]	@ (8000a1c <SCB_EnableDCache+0x84>)
 80009d8:	4313      	orrs	r3, r2
 80009da:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	1e5a      	subs	r2, r3, #1
 80009e2:	60ba      	str	r2, [r7, #8]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d1ef      	bne.n	80009c8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	1e5a      	subs	r2, r3, #1
 80009ec:	60fa      	str	r2, [r7, #12]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d1e5      	bne.n	80009be <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80009f2:	f3bf 8f4f 	dsb	sy
}
 80009f6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80009f8:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <SCB_EnableDCache+0x84>)
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	4a07      	ldr	r2, [pc, #28]	@ (8000a1c <SCB_EnableDCache+0x84>)
 80009fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a04:	f3bf 8f4f 	dsb	sy
}
 8000a08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a0a:	f3bf 8f6f 	isb	sy
}
 8000a0e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000a10:	bf00      	nop
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b0ba      	sub	sp, #232	@ 0xe8
 8000a24:	af02      	add	r7, sp, #8
  uint8_t cmdBuffer[3];
  uint8_t dataBuffer[8];
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000a26:	f7ff ff91 	bl	800094c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000a2a:	f7ff ffb5 	bl	8000998 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2e:	f001 fe59 	bl	80026e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a32:	f000 fb75 	bl	8001120 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a36:	f7ff fdd3 	bl	80005e0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a3a:	f000 fe9b 	bl	8001774 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8000a3e:	f000 fc7d 	bl	800133c <MX_SPI5_Init>
  MX_TIM1_Init();
 8000a42:	f000 fe23 	bl	800168c <MX_TIM1_Init>
  MX_RNG_Init();
 8000a46:	f000 fc45 	bl	80012d4 <MX_RNG_Init>
  MX_I2C1_Init();
 8000a4a:	f7ff fefb 	bl	8000844 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 8000a4e:	f001 fa0d 	bl	8001e6c <ILI9341_Init>

  sprintf(str, "\n\rAM2320 I2C DEMO Starting .. .\n\r");
 8000a52:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000a56:	497b      	ldr	r1, [pc, #492]	@ (8000c44 <main+0x224>)
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f006 f82f 	bl	8006abc <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 200);
 8000a5e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fc3c 	bl	80002e0 <strlen>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8000a70:	23c8      	movs	r3, #200	@ 0xc8
 8000a72:	4875      	ldr	r0, [pc, #468]	@ (8000c48 <main+0x228>)
 8000a74:	f004 feca 	bl	800580c <HAL_UART_Transmit>

  cmdBuffer[0] = 0x03;  // Command to read register
 8000a78:	2303      	movs	r3, #3
 8000a7a:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  cmdBuffer[1] = 0x00;  // Starting address
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  cmdBuffer[2] = 0x04;  // Read 4 bytes (temperature + humidity)
 8000a84:	2304      	movs	r3, #4
 8000a86:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //----------------------------------------------------------TOUCHSCREEN EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 8000a8a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000a8e:	f001 fb99 	bl	80021c4 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000a92:	2001      	movs	r0, #1
 8000a94:	f001 f98c 	bl	8001db0 <ILI9341_Set_Rotation>
	  			char display_buff[30];

	  			// Print Temperature at top-left corner

//	  			ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
	  			while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET) {}
 8000a98:	bf00      	nop
 8000a9a:	4b6b      	ldr	r3, [pc, #428]	@ (8000c48 <main+0x228>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	69db      	ldr	r3, [r3, #28]
 8000aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aa4:	2b40      	cmp	r3, #64	@ 0x40
 8000aa6:	d1f8      	bne.n	8000a9a <main+0x7a>
	  			HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 200);
 8000aa8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fc17 	bl	80002e0 <strlen>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8000aba:	23c8      	movs	r3, #200	@ 0xc8
 8000abc:	4862      	ldr	r0, [pc, #392]	@ (8000c48 <main+0x228>)
 8000abe:	f004 fea5 	bl	800580c <HAL_UART_Transmit>

	  			HAL_Delay(5000);
 8000ac2:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000ac6:	f001 fe79 	bl	80027bc <HAL_Delay>
	  			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000aca:	2101      	movs	r1, #1
 8000acc:	485f      	ldr	r0, [pc, #380]	@ (8000c4c <main+0x22c>)
 8000ace:	f002 f95c 	bl	8002d8a <HAL_GPIO_TogglePin>

	  			        // Wake up the sensor
	  			HAL_I2C_Master_Transmit(&hi2c1, 0x5c << 1, NULL, 0, 200);
 8000ad2:	23c8      	movs	r3, #200	@ 0xc8
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	2200      	movs	r2, #0
 8000ada:	21b8      	movs	r1, #184	@ 0xb8
 8000adc:	485c      	ldr	r0, [pc, #368]	@ (8000c50 <main+0x230>)
 8000ade:	f002 f9ff 	bl	8002ee0 <HAL_I2C_Master_Transmit>
	  			HAL_Delay(800);  // Allow time for sensor to wake up
 8000ae2:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000ae6:	f001 fe69 	bl	80027bc <HAL_Delay>

	  			        // Send read command to sensor
	  			status = HAL_I2C_Master_Transmit(&hi2c1, 0x5c << 1, cmdBuffer, 3, 200);
 8000aea:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8000aee:	23c8      	movs	r3, #200	@ 0xc8
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	2303      	movs	r3, #3
 8000af4:	21b8      	movs	r1, #184	@ 0xb8
 8000af6:	4856      	ldr	r0, [pc, #344]	@ (8000c50 <main+0x230>)
 8000af8:	f002 f9f2 	bl	8002ee0 <HAL_I2C_Master_Transmit>
 8000afc:	4603      	mov	r3, r0
 8000afe:	461a      	mov	r2, r3
 8000b00:	4b54      	ldr	r3, [pc, #336]	@ (8000c54 <main+0x234>)
 8000b02:	701a      	strb	r2, [r3, #0]
	  			if (status != HAL_OK)
 8000b04:	4b53      	ldr	r3, [pc, #332]	@ (8000c54 <main+0x234>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d016      	beq.n	8000b3a <main+0x11a>
	  			{
	  			   sprintf(str, "I2C Transmit Error, Status: %d\n\r", status);
 8000b0c:	4b51      	ldr	r3, [pc, #324]	@ (8000c54 <main+0x234>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000b16:	4950      	ldr	r1, [pc, #320]	@ (8000c58 <main+0x238>)
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f005 ffcf 	bl	8006abc <siprintf>
	  			   HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 200);
 8000b1e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fbdc 	bl	80002e0 <strlen>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8000b30:	23c8      	movs	r3, #200	@ 0xc8
 8000b32:	4845      	ldr	r0, [pc, #276]	@ (8000c48 <main+0x228>)
 8000b34:	f004 fe6a 	bl	800580c <HAL_UART_Transmit>
	  			   continue;
 8000b38:	e2e5      	b.n	8001106 <main+0x6e6>
	  			}

	  			HAL_Delay(2);  // Wait for sensor response
 8000b3a:	2002      	movs	r0, #2
 8000b3c:	f001 fe3e 	bl	80027bc <HAL_Delay>

	  			        // Receive data from sensor
	  			status = HAL_I2C_Master_Receive(&hi2c1, 0x5c << 1, dataBuffer, 8, 200);
 8000b40:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8000b44:	23c8      	movs	r3, #200	@ 0xc8
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2308      	movs	r3, #8
 8000b4a:	21b8      	movs	r1, #184	@ 0xb8
 8000b4c:	4840      	ldr	r0, [pc, #256]	@ (8000c50 <main+0x230>)
 8000b4e:	f002 fabb 	bl	80030c8 <HAL_I2C_Master_Receive>
 8000b52:	4603      	mov	r3, r0
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b3f      	ldr	r3, [pc, #252]	@ (8000c54 <main+0x234>)
 8000b58:	701a      	strb	r2, [r3, #0]
	  			if (status != HAL_OK)
 8000b5a:	4b3e      	ldr	r3, [pc, #248]	@ (8000c54 <main+0x234>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d013      	beq.n	8000b8a <main+0x16a>
	  			{
	  			   sprintf(str, "I2C Receive Error\n\r");
 8000b62:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000b66:	493d      	ldr	r1, [pc, #244]	@ (8000c5c <main+0x23c>)
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f005 ffa7 	bl	8006abc <siprintf>
	  			   HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 200);
 8000b6e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fbb4 	bl	80002e0 <strlen>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8000b80:	23c8      	movs	r3, #200	@ 0xc8
 8000b82:	4831      	ldr	r0, [pc, #196]	@ (8000c48 <main+0x228>)
 8000b84:	f004 fe42 	bl	800580c <HAL_UART_Transmit>
	  			   continue;  // Skip if there's a receive error
 8000b88:	e2bd      	b.n	8001106 <main+0x6e6>
	  			}

	  			        // Validate CRC
	  			uint16_t Rcrc = dataBuffer[7] << 8 | dataBuffer[6];
 8000b8a:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8000b8e:	021b      	lsls	r3, r3, #8
 8000b90:	b21a      	sxth	r2, r3
 8000b92:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8000b96:	b21b      	sxth	r3, r3
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
	  			if (Rcrc == CRC16_2(dataBuffer, 6))
 8000ba0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000ba4:	2106      	movs	r1, #6
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 fb54 	bl	8001254 <CRC16_2>
 8000bac:	4603      	mov	r3, r0
 8000bae:	461a      	mov	r2, r3
 8000bb0:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d157      	bne.n	8000c68 <main+0x248>
	  			{
	  			   uint16_t temperature = ((dataBuffer[4] & 0x7F) << 8) + dataBuffer[5];
 8000bb8:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8000bbc:	021b      	lsls	r3, r3, #8
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	f897 2089 	ldrb.w	r2, [r7, #137]	@ 0x89
 8000bca:	4413      	add	r3, r2
 8000bcc:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
	  			   t = temperature / 10.0;
 8000bd0:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 8000bd4:	ee07 3a90 	vmov	s15, r3
 8000bd8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bdc:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8000be0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000be4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000be8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c60 <main+0x240>)
 8000bea:	edc3 7a00 	vstr	s15, [r3]
	  			   t = (((dataBuffer[4] & 0x80) >> 7) == 1) ? (t * (-1)) : t;
 8000bee:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8000bf2:	09db      	lsrs	r3, r3, #7
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d105      	bne.n	8000c06 <main+0x1e6>
 8000bfa:	4b19      	ldr	r3, [pc, #100]	@ (8000c60 <main+0x240>)
 8000bfc:	edd3 7a00 	vldr	s15, [r3]
 8000c00:	eef1 7a67 	vneg.f32	s15, s15
 8000c04:	e002      	b.n	8000c0c <main+0x1ec>
 8000c06:	4b16      	ldr	r3, [pc, #88]	@ (8000c60 <main+0x240>)
 8000c08:	edd3 7a00 	vldr	s15, [r3]
 8000c0c:	4b14      	ldr	r3, [pc, #80]	@ (8000c60 <main+0x240>)
 8000c0e:	edc3 7a00 	vstr	s15, [r3]

	  			   uint16_t humidity = (dataBuffer[2] << 8) + dataBuffer[3];
 8000c12:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8000c16:	021b      	lsls	r3, r3, #8
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8000c1e:	4413      	add	r3, r2
 8000c20:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
	  			   h = humidity / 10.0;
 8000c24:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 8000c28:	ee07 3a90 	vmov	s15, r3
 8000c2c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c30:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8000c34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c3c:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <main+0x244>)
 8000c3e:	edc3 7a00 	vstr	s15, [r3]
 8000c42:	e024      	b.n	8000c8e <main+0x26e>
 8000c44:	08008c58 	.word	0x08008c58
 8000c48:	20000324 	.word	0x20000324
 8000c4c:	40020400 	.word	0x40020400
 8000c50:	200001fc 	.word	0x200001fc
 8000c54:	20000248 	.word	0x20000248
 8000c58:	08008c7c 	.word	0x08008c7c
 8000c5c:	08008ca0 	.word	0x08008ca0
 8000c60:	20000004 	.word	0x20000004
 8000c64:	20000000 	.word	0x20000000
	  			 }
	  			 else
	  			 {
	  			   sprintf(str, "CRC mismatch\n\r");
 8000c68:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000c6c:	49d3      	ldr	r1, [pc, #844]	@ (8000fbc <main+0x59c>)
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f005 ff24 	bl	8006abc <siprintf>
	  			   HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 200);
 8000c74:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fb31 	bl	80002e0 <strlen>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8000c86:	23c8      	movs	r3, #200	@ 0xc8
 8000c88:	48cd      	ldr	r0, [pc, #820]	@ (8000fc0 <main+0x5a0>)
 8000c8a:	f004 fdbf 	bl	800580c <HAL_UART_Transmit>
	  			 }


	  			  ILI9341_Draw_Filled_Circle(40, 65, 20, 0xF800);   // Red circle
 8000c8e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000c92:	2214      	movs	r2, #20
 8000c94:	2141      	movs	r1, #65	@ 0x41
 8000c96:	2028      	movs	r0, #40	@ 0x28
 8000c98:	f000 fe09 	bl	80018ae <ILI9341_Draw_Filled_Circle>
	  			  ILI9341_Draw_Filled_Rectangle_Coord(80, 55, 250, 80, 0xFC10);  // Red scrollbar
 8000c9c:	f64f 4310 	movw	r3, #64528	@ 0xfc10
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	2350      	movs	r3, #80	@ 0x50
 8000ca4:	22fa      	movs	r2, #250	@ 0xfa
 8000ca6:	2137      	movs	r1, #55	@ 0x37
 8000ca8:	2050      	movs	r0, #80	@ 0x50
 8000caa:	f000 fe88 	bl	80019be <ILI9341_Draw_Filled_Rectangle_Coord>

	  			  ILI9341_Draw_Filled_Circle(40, 125, 20, 0x07E0);  // Green circle
 8000cae:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000cb2:	2214      	movs	r2, #20
 8000cb4:	217d      	movs	r1, #125	@ 0x7d
 8000cb6:	2028      	movs	r0, #40	@ 0x28
 8000cb8:	f000 fdf9 	bl	80018ae <ILI9341_Draw_Filled_Circle>
	  			  ILI9341_Draw_Filled_Rectangle_Coord(80, 115, 250, 140, 0x07F0);  // Green scrollbar
 8000cbc:	f44f 63fe 	mov.w	r3, #2032	@ 0x7f0
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	238c      	movs	r3, #140	@ 0x8c
 8000cc4:	22fa      	movs	r2, #250	@ 0xfa
 8000cc6:	2173      	movs	r1, #115	@ 0x73
 8000cc8:	2050      	movs	r0, #80	@ 0x50
 8000cca:	f000 fe78 	bl	80019be <ILI9341_Draw_Filled_Rectangle_Coord>

	  			  ILI9341_Draw_Filled_Circle(40, 185, 20, 0x001F);  // Blue circle
 8000cce:	231f      	movs	r3, #31
 8000cd0:	2214      	movs	r2, #20
 8000cd2:	21b9      	movs	r1, #185	@ 0xb9
 8000cd4:	2028      	movs	r0, #40	@ 0x28
 8000cd6:	f000 fdea 	bl	80018ae <ILI9341_Draw_Filled_Circle>
	  			  ILI9341_Draw_Filled_Rectangle_Coord(80, 175, 250, 200, 0x041F);  // Blue scrollbar
 8000cda:	f240 431f 	movw	r3, #1055	@ 0x41f
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	23c8      	movs	r3, #200	@ 0xc8
 8000ce2:	22fa      	movs	r2, #250	@ 0xfa
 8000ce4:	21af      	movs	r1, #175	@ 0xaf
 8000ce6:	2050      	movs	r0, #80	@ 0x50
 8000ce8:	f000 fe69 	bl	80019be <ILI9341_Draw_Filled_Rectangle_Coord>

	  			  sprintf(display_buff, "%.1fC  ", t);
 8000cec:	4bb5      	ldr	r3, [pc, #724]	@ (8000fc4 <main+0x5a4>)
 8000cee:	edd3 7a00 	vldr	s15, [r3]
 8000cf2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cf6:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8000cfa:	ec53 2b17 	vmov	r2, r3, d7
 8000cfe:	49b2      	ldr	r1, [pc, #712]	@ (8000fc8 <main+0x5a8>)
 8000d00:	f005 fedc 	bl	8006abc <siprintf>
	  			  ILI9341_Draw_Text(display_buff, 15, 15, BLACK, 2, WHITE); // Use (0, 0) for top-left
 8000d04:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8000d08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	2302      	movs	r3, #2
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2300      	movs	r3, #0
 8000d14:	220f      	movs	r2, #15
 8000d16:	210f      	movs	r1, #15
 8000d18:	f000 ff4a 	bl	8001bb0 <ILI9341_Draw_Text>

//	  			  rgb_color = ((scaled_red & 0xF8) << 8) | ((scaled_green & 0xFC) << 3) | (scaled_blue >> 3);  // RGB565 format
	  			  ILI9341_Draw_Filled_Circle(100, 20, 15, BLACK);  // Display mixed color
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	220f      	movs	r2, #15
 8000d20:	2114      	movs	r1, #20
 8000d22:	2064      	movs	r0, #100	@ 0x64
 8000d24:	f000 fdc3 	bl	80018ae <ILI9341_Draw_Filled_Circle>

	  			  sprintf(display_buff, "  %.1fRH", h);
 8000d28:	4ba8      	ldr	r3, [pc, #672]	@ (8000fcc <main+0x5ac>)
 8000d2a:	edd3 7a00 	vldr	s15, [r3]
 8000d2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d32:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8000d36:	ec53 2b17 	vmov	r2, r3, d7
 8000d3a:	49a5      	ldr	r1, [pc, #660]	@ (8000fd0 <main+0x5b0>)
 8000d3c:	f005 febe 	bl	8006abc <siprintf>
	  			  ILI9341_Draw_Text(display_buff, 120, 15, BLACK, 2, WHITE); // Adjusted position
 8000d40:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8000d44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	220f      	movs	r2, #15
 8000d52:	2178      	movs	r1, #120	@ 0x78
 8000d54:	f000 ff2c 	bl	8001bb0 <ILI9341_Draw_Text>

	  			  HAL_Delay(500);
 8000d58:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d5c:	f001 fd2e 	bl	80027bc <HAL_Delay>


	  			  while(1)
	  				  		{
	  				  			HAL_Delay(20);
 8000d60:	2014      	movs	r0, #20
 8000d62:	f001 fd2b 	bl	80027bc <HAL_Delay>

	  				  			if(TP_Touchpad_Pressed())
 8000d66:	f001 fcad 	bl	80026c4 <TP_Touchpad_Pressed>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f000 81c3 	beq.w	80010f8 <main+0x6d8>
	  				          {

	  				  					uint16_t x_pos = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
	  				  					uint16_t y_pos = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6


	  				  					HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_SET);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000d84:	4893      	ldr	r0, [pc, #588]	@ (8000fd4 <main+0x5b4>)
 8000d86:	f001 ffe7 	bl	8002d58 <HAL_GPIO_WritePin>

	  				  					uint16_t position_array[2];

	  				  					if(TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8000d8a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f001 fbd6 	bl	8002540 <TP_Read_Coordinates>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d1e2      	bne.n	8000d60 <main+0x340>
	  				  					{
	  				  					x_pos = position_array[0];
 8000d9a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8000d9e:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
	  				  					y_pos = position_array[1];
 8000da2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8000da6:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
//	  				  					ILI9341_Draw_Filled_Circle(x_pos, y_pos, 2, BLACK);

											ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000daa:	2001      	movs	r0, #1
 8000dac:	f001 f800 	bl	8001db0 <ILI9341_Set_Rotation>
//											sprintf(counter_buff, "POS X: %.3d", x_pos);
//											ILI9341_Draw_Text(counter_buff, 10, 80, BLACK, 2, WHITE);
//											sprintf(counter_buff, "POS Y: %.3d", y_pos);
//											ILI9341_Draw_Text(counter_buff, 10, 120, BLACK, 2, WHITE);

											if (x_pos >= 164 && x_pos <= 187 && y_pos >= 83 && y_pos <= 250){
 8000db0:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 8000db4:	2ba3      	cmp	r3, #163	@ 0xa3
 8000db6:	d965      	bls.n	8000e84 <main+0x464>
 8000db8:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 8000dbc:	2bbb      	cmp	r3, #187	@ 0xbb
 8000dbe:	d861      	bhi.n	8000e84 <main+0x464>
 8000dc0:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8000dc4:	2b52      	cmp	r3, #82	@ 0x52
 8000dc6:	d95d      	bls.n	8000e84 <main+0x464>
 8000dc8:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8000dcc:	2bfa      	cmp	r3, #250	@ 0xfa
 8000dce:	d859      	bhi.n	8000e84 <main+0x464>
//												ILI9341_Draw_Filled_Circle(100, 20, 15, 0xF800);
												red_intensity = (red_intensity + increment_value > max_intensity) ? max_intensity : red_intensity + increment_value;
 8000dd0:	4b81      	ldr	r3, [pc, #516]	@ (8000fd8 <main+0x5b8>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	2332      	movs	r3, #50	@ 0x32
 8000dd8:	4413      	add	r3, r2
 8000dda:	22ff      	movs	r2, #255	@ 0xff
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	bfa8      	it	ge
 8000de0:	4613      	movge	r3, r2
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	4b7c      	ldr	r3, [pc, #496]	@ (8000fd8 <main+0x5b8>)
 8000de6:	801a      	strh	r2, [r3, #0]
												redTouchCount++;
 8000de8:	4b7c      	ldr	r3, [pc, #496]	@ (8000fdc <main+0x5bc>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	4b7a      	ldr	r3, [pc, #488]	@ (8000fdc <main+0x5bc>)
 8000df2:	701a      	strb	r2, [r3, #0]

												ILI9341_Draw_Filled_Rectangle_Coord(80, 55, y_pos, 80, 0xC0C0);  // Silver scrollbar
 8000df4:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 8000df8:	f24c 03c0 	movw	r3, #49344	@ 0xc0c0
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	2350      	movs	r3, #80	@ 0x50
 8000e00:	2137      	movs	r1, #55	@ 0x37
 8000e02:	2050      	movs	r0, #80	@ 0x50
 8000e04:	f000 fddb 	bl	80019be <ILI9341_Draw_Filled_Rectangle_Coord>
												ILI9341_Draw_Filled_Rectangle_Coord(y_pos, 55, 250, 80, 0xFC10);  // Red scrollbar
 8000e08:	f8b7 00d6 	ldrh.w	r0, [r7, #214]	@ 0xd6
 8000e0c:	f64f 4310 	movw	r3, #64528	@ 0xfc10
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2350      	movs	r3, #80	@ 0x50
 8000e14:	22fa      	movs	r2, #250	@ 0xfa
 8000e16:	2137      	movs	r1, #55	@ 0x37
 8000e18:	f000 fdd1 	bl	80019be <ILI9341_Draw_Filled_Rectangle_Coord>

//												ILI9341_Draw_Filled_Rectangle_Coord(80, 55, 250, 80, 0xFC10);  // Red scrollbar

												uint16_t total_length_r = 250 - 80;
 8000e1c:	23aa      	movs	r3, #170	@ 0xaa
 8000e1e:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
												uint16_t filled_length_r = y_pos - 80;
 8000e22:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8000e26:	3b50      	subs	r3, #80	@ 0x50
 8000e28:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
												if (filled_length_r < 0) {
												    filled_length_r = 0;
												}
												percentage_r = ((float)filled_length_r / (float)total_length_r) * 100;
 8000e2c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8000e30:	ee07 3a90 	vmov	s15, r3
 8000e34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000e38:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8000e3c:	ee07 3a90 	vmov	s15, r3
 8000e40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e48:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8000ffc <main+0x5dc>
 8000e4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e54:	ee17 2a90 	vmov	r2, s15
 8000e58:	4b61      	ldr	r3, [pc, #388]	@ (8000fe0 <main+0x5c0>)
 8000e5a:	601a      	str	r2, [r3, #0]
												char redBuffer[30];
												sprintf(redBuffer, "%d%%", percentage_r);
 8000e5c:	4b60      	ldr	r3, [pc, #384]	@ (8000fe0 <main+0x5c0>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e64:	495f      	ldr	r1, [pc, #380]	@ (8000fe4 <main+0x5c4>)
 8000e66:	4618      	mov	r0, r3
 8000e68:	f005 fe28 	bl	8006abc <siprintf>
												ILI9341_Draw_Text(redBuffer, 230, 65, BLACK, 2, WHITE);
 8000e6c:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000e70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	2302      	movs	r3, #2
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	2241      	movs	r2, #65	@ 0x41
 8000e7e:	21e6      	movs	r1, #230	@ 0xe6
 8000e80:	f000 fe96 	bl	8001bb0 <ILI9341_Draw_Text>
											}
											if (x_pos >= 100 && x_pos <= 125 && y_pos >= 83 && y_pos <= 250){
 8000e84:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 8000e88:	2b63      	cmp	r3, #99	@ 0x63
 8000e8a:	d965      	bls.n	8000f58 <main+0x538>
 8000e8c:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 8000e90:	2b7d      	cmp	r3, #125	@ 0x7d
 8000e92:	d861      	bhi.n	8000f58 <main+0x538>
 8000e94:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8000e98:	2b52      	cmp	r3, #82	@ 0x52
 8000e9a:	d95d      	bls.n	8000f58 <main+0x538>
 8000e9c:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8000ea0:	2bfa      	cmp	r3, #250	@ 0xfa
 8000ea2:	d859      	bhi.n	8000f58 <main+0x538>
//												ILI9341_Draw_Filled_Circle(100, 20, 15, 0x07E0);
												green_intensity = (green_intensity + increment_value > max_intensity) ? max_intensity : green_intensity + increment_value;
 8000ea4:	4b50      	ldr	r3, [pc, #320]	@ (8000fe8 <main+0x5c8>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	2332      	movs	r3, #50	@ 0x32
 8000eac:	4413      	add	r3, r2
 8000eae:	22ff      	movs	r2, #255	@ 0xff
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	bfa8      	it	ge
 8000eb4:	4613      	movge	r3, r2
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	4b4b      	ldr	r3, [pc, #300]	@ (8000fe8 <main+0x5c8>)
 8000eba:	801a      	strh	r2, [r3, #0]
												greenTouchCount++;
 8000ebc:	4b4b      	ldr	r3, [pc, #300]	@ (8000fec <main+0x5cc>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	4b49      	ldr	r3, [pc, #292]	@ (8000fec <main+0x5cc>)
 8000ec6:	701a      	strb	r2, [r3, #0]
												ILI9341_Draw_Filled_Rectangle_Coord(80, 115, y_pos, 140, 0xC0C0);  // Silver scrollbar
 8000ec8:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 8000ecc:	f24c 03c0 	movw	r3, #49344	@ 0xc0c0
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	238c      	movs	r3, #140	@ 0x8c
 8000ed4:	2173      	movs	r1, #115	@ 0x73
 8000ed6:	2050      	movs	r0, #80	@ 0x50
 8000ed8:	f000 fd71 	bl	80019be <ILI9341_Draw_Filled_Rectangle_Coord>
												ILI9341_Draw_Filled_Rectangle_Coord(y_pos, 115, 250, 140, 0x07F0);  // Green scrollbar
 8000edc:	f8b7 00d6 	ldrh.w	r0, [r7, #214]	@ 0xd6
 8000ee0:	f44f 63fe 	mov.w	r3, #2032	@ 0x7f0
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	238c      	movs	r3, #140	@ 0x8c
 8000ee8:	22fa      	movs	r2, #250	@ 0xfa
 8000eea:	2173      	movs	r1, #115	@ 0x73
 8000eec:	f000 fd67 	bl	80019be <ILI9341_Draw_Filled_Rectangle_Coord>

												uint16_t total_length_g = 250 - 80;
 8000ef0:	23aa      	movs	r3, #170	@ 0xaa
 8000ef2:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
												uint16_t filled_length_g = y_pos - 80;
 8000ef6:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8000efa:	3b50      	subs	r3, #80	@ 0x50
 8000efc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
												if (filled_length_g < 0) {
												    filled_length_g = 0;
												}
												percentage_g = ((float)filled_length_g / (float)total_length_g) * 100;
 8000f00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000f04:	ee07 3a90 	vmov	s15, r3
 8000f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000f0c:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 8000f10:	ee07 3a90 	vmov	s15, r3
 8000f14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f1c:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8000ffc <main+0x5dc>
 8000f20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f28:	ee17 2a90 	vmov	r2, s15
 8000f2c:	4b30      	ldr	r3, [pc, #192]	@ (8000ff0 <main+0x5d0>)
 8000f2e:	601a      	str	r2, [r3, #0]
												char greenBuffer[30];
												sprintf(greenBuffer, "%d%%", percentage_g);
 8000f30:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff0 <main+0x5d0>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	f107 0320 	add.w	r3, r7, #32
 8000f38:	492a      	ldr	r1, [pc, #168]	@ (8000fe4 <main+0x5c4>)
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f005 fdbe 	bl	8006abc <siprintf>
												ILI9341_Draw_Text(greenBuffer, 230, 125, BLACK, 2, WHITE);
 8000f40:	f107 0020 	add.w	r0, r7, #32
 8000f44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f48:	9301      	str	r3, [sp, #4]
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	227d      	movs	r2, #125	@ 0x7d
 8000f52:	21e6      	movs	r1, #230	@ 0xe6
 8000f54:	f000 fe2c 	bl	8001bb0 <ILI9341_Draw_Text>
											}
											if (x_pos >= 40 && x_pos <= 63 && y_pos >= 83 && y_pos <= 250){
 8000f58:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 8000f5c:	2b27      	cmp	r3, #39	@ 0x27
 8000f5e:	f240 8089 	bls.w	8001074 <main+0x654>
 8000f62:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 8000f66:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f68:	f200 8084 	bhi.w	8001074 <main+0x654>
 8000f6c:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8000f70:	2b52      	cmp	r3, #82	@ 0x52
 8000f72:	d97f      	bls.n	8001074 <main+0x654>
 8000f74:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8000f78:	2bfa      	cmp	r3, #250	@ 0xfa
 8000f7a:	d87b      	bhi.n	8001074 <main+0x654>
//												ILI9341_Draw_Filled_Circle(100, 20, 15, 0x001F);
												blue_intensity = (blue_intensity + increment_value > max_intensity) ? max_intensity : blue_intensity + increment_value;
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff4 <main+0x5d4>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	2332      	movs	r3, #50	@ 0x32
 8000f84:	4413      	add	r3, r2
 8000f86:	22ff      	movs	r2, #255	@ 0xff
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	bfa8      	it	ge
 8000f8c:	4613      	movge	r3, r2
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <main+0x5d4>)
 8000f92:	801a      	strh	r2, [r3, #0]
												blueTouchCount++;
 8000f94:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <main+0x5d8>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <main+0x5d8>)
 8000f9e:	701a      	strb	r2, [r3, #0]
												ILI9341_Draw_Filled_Rectangle_Coord(80, 175, y_pos, 200, 0xC0C0);  // Silver scrollbar
 8000fa0:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 8000fa4:	f24c 03c0 	movw	r3, #49344	@ 0xc0c0
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	23c8      	movs	r3, #200	@ 0xc8
 8000fac:	21af      	movs	r1, #175	@ 0xaf
 8000fae:	2050      	movs	r0, #80	@ 0x50
 8000fb0:	f000 fd05 	bl	80019be <ILI9341_Draw_Filled_Rectangle_Coord>
												ILI9341_Draw_Filled_Rectangle_Coord(y_pos, 175, 250, 200, 0x041F);  // Blue scrollbar
 8000fb4:	f8b7 00d6 	ldrh.w	r0, [r7, #214]	@ 0xd6
 8000fb8:	e022      	b.n	8001000 <main+0x5e0>
 8000fba:	bf00      	nop
 8000fbc:	08008cb4 	.word	0x08008cb4
 8000fc0:	20000324 	.word	0x20000324
 8000fc4:	20000004 	.word	0x20000004
 8000fc8:	08008cc4 	.word	0x08008cc4
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	08008ccc 	.word	0x08008ccc
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	2000024a 	.word	0x2000024a
 8000fdc:	20000250 	.word	0x20000250
 8000fe0:	20000254 	.word	0x20000254
 8000fe4:	08008cd8 	.word	0x08008cd8
 8000fe8:	2000024c 	.word	0x2000024c
 8000fec:	20000251 	.word	0x20000251
 8000ff0:	20000258 	.word	0x20000258
 8000ff4:	2000024e 	.word	0x2000024e
 8000ff8:	20000252 	.word	0x20000252
 8000ffc:	42c80000 	.word	0x42c80000
 8001000:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	23c8      	movs	r3, #200	@ 0xc8
 8001008:	22fa      	movs	r2, #250	@ 0xfa
 800100a:	21af      	movs	r1, #175	@ 0xaf
 800100c:	f000 fcd7 	bl	80019be <ILI9341_Draw_Filled_Rectangle_Coord>

												uint16_t total_length_b = 250 - 80;
 8001010:	23aa      	movs	r3, #170	@ 0xaa
 8001012:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
												uint16_t filled_length_b = y_pos - 80;
 8001016:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 800101a:	3b50      	subs	r3, #80	@ 0x50
 800101c:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
												if (filled_length_b < 0) {
												    filled_length_b = 0;
												}
												percentage_b = ((float)filled_length_b / (float)total_length_b) * 100;
 8001020:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8001024:	ee07 3a90 	vmov	s15, r3
 8001028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800102c:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8001030:	ee07 3a90 	vmov	s15, r3
 8001034:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001038:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800103c:	ed1f 7a11 	vldr	s14, [pc, #-68]	@ 8000ffc <main+0x5dc>
 8001040:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001044:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001048:	ee17 2a90 	vmov	r2, s15
 800104c:	4b2e      	ldr	r3, [pc, #184]	@ (8001108 <main+0x6e8>)
 800104e:	601a      	str	r2, [r3, #0]
												char blueBuffer[30];
												sprintf(blueBuffer, "%d%%", percentage_b);
 8001050:	4b2d      	ldr	r3, [pc, #180]	@ (8001108 <main+0x6e8>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	463b      	mov	r3, r7
 8001056:	492d      	ldr	r1, [pc, #180]	@ (800110c <main+0x6ec>)
 8001058:	4618      	mov	r0, r3
 800105a:	f005 fd2f 	bl	8006abc <siprintf>
												ILI9341_Draw_Text(blueBuffer, 230, 185, BLACK, 2, WHITE);
 800105e:	4638      	mov	r0, r7
 8001060:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	2302      	movs	r3, #2
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2300      	movs	r3, #0
 800106c:	22b9      	movs	r2, #185	@ 0xb9
 800106e:	21e6      	movs	r1, #230	@ 0xe6
 8001070:	f000 fd9e 	bl	8001bb0 <ILI9341_Draw_Text>
											}

											uint16_t red_intensity   = (percentage_r * 31) / 100;  // Red uses 5 bits (0-31)
 8001074:	4b26      	ldr	r3, [pc, #152]	@ (8001110 <main+0x6f0>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4613      	mov	r3, r2
 800107a:	015b      	lsls	r3, r3, #5
 800107c:	1a9b      	subs	r3, r3, r2
 800107e:	4a25      	ldr	r2, [pc, #148]	@ (8001114 <main+0x6f4>)
 8001080:	fb82 1203 	smull	r1, r2, r2, r3
 8001084:	1152      	asrs	r2, r2, #5
 8001086:	17db      	asrs	r3, r3, #31
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
											uint16_t green_intensity = (percentage_g * 63) / 100;  // Green uses 6 bits (0-63)
 800108e:	4b22      	ldr	r3, [pc, #136]	@ (8001118 <main+0x6f8>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4613      	mov	r3, r2
 8001094:	019b      	lsls	r3, r3, #6
 8001096:	1a9b      	subs	r3, r3, r2
 8001098:	4a1e      	ldr	r2, [pc, #120]	@ (8001114 <main+0x6f4>)
 800109a:	fb82 1203 	smull	r1, r2, r2, r3
 800109e:	1152      	asrs	r2, r2, #5
 80010a0:	17db      	asrs	r3, r3, #31
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
											uint16_t blue_intensity  = (percentage_b * 31) / 100;  // Blue uses 5 bits (0-31)
 80010a8:	4b17      	ldr	r3, [pc, #92]	@ (8001108 <main+0x6e8>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4613      	mov	r3, r2
 80010ae:	015b      	lsls	r3, r3, #5
 80010b0:	1a9b      	subs	r3, r3, r2
 80010b2:	4a18      	ldr	r2, [pc, #96]	@ (8001114 <main+0x6f4>)
 80010b4:	fb82 1203 	smull	r1, r2, r2, r3
 80010b8:	1152      	asrs	r2, r2, #5
 80010ba:	17db      	asrs	r3, r3, #31
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4

											uint16_t mix_color = (red_intensity << 11) | (green_intensity << 5) | blue_intensity;
 80010c2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 80010c6:	02db      	lsls	r3, r3, #11
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	@ 0xc6
 80010ce:	015b      	lsls	r3, r3, #5
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 80010da:	4313      	orrs	r3, r2
 80010dc:	b21b      	sxth	r3, r3
 80010de:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
//											uint16_t color = (red_intensity * 31 / max_intensity) << 11 |
//											                             (green_intensity * 63 / max_intensity) << 5 |
//											                             (blue_intensity * 31 / max_intensity);

											            // Draw the filled circle with the new mixed color
											ILI9341_Draw_Filled_Circle(100, 20, 15, mix_color);
 80010e2:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 80010e6:	220f      	movs	r2, #15
 80010e8:	2114      	movs	r1, #20
 80010ea:	2064      	movs	r0, #100	@ 0x64
 80010ec:	f000 fbdf 	bl	80018ae <ILI9341_Draw_Filled_Circle>
											ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f000 fe5d 	bl	8001db0 <ILI9341_Set_Rotation>
 80010f6:	e633      	b.n	8000d60 <main+0x340>

//	  				  					ILI9341_Draw_Pixel(x_pos, y_pos, BLACK);
	  				          }
	  				  			else
	  				  			{
	  				  				HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80010fe:	4807      	ldr	r0, [pc, #28]	@ (800111c <main+0x6fc>)
 8001100:	f001 fe2a 	bl	8002d58 <HAL_GPIO_WritePin>
	  				  			HAL_Delay(20);
 8001104:	e62c      	b.n	8000d60 <main+0x340>
	  		while(1){
 8001106:	e4c7      	b.n	8000a98 <main+0x78>
 8001108:	2000025c 	.word	0x2000025c
 800110c:	08008cd8 	.word	0x08008cd8
 8001110:	20000254 	.word	0x20000254
 8001114:	51eb851f 	.word	0x51eb851f
 8001118:	20000258 	.word	0x20000258
 800111c:	40020400 	.word	0x40020400

08001120 <SystemClock_Config>:
}



void SystemClock_Config(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b0b8      	sub	sp, #224	@ 0xe0
 8001124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001126:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800112a:	2234      	movs	r2, #52	@ 0x34
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f005 fd27 	bl	8006b82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001134:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001144:	f107 0308 	add.w	r3, r7, #8
 8001148:	2290      	movs	r2, #144	@ 0x90
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f005 fd18 	bl	8006b82 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001152:	f002 fb27 	bl	80037a4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	4b3c      	ldr	r3, [pc, #240]	@ (8001248 <SystemClock_Config+0x128>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115a:	4a3b      	ldr	r2, [pc, #236]	@ (8001248 <SystemClock_Config+0x128>)
 800115c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001160:	6413      	str	r3, [r2, #64]	@ 0x40
 8001162:	4b39      	ldr	r3, [pc, #228]	@ (8001248 <SystemClock_Config+0x128>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800116e:	4b37      	ldr	r3, [pc, #220]	@ (800124c <SystemClock_Config+0x12c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a36      	ldr	r2, [pc, #216]	@ (800124c <SystemClock_Config+0x12c>)
 8001174:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	4b34      	ldr	r3, [pc, #208]	@ (800124c <SystemClock_Config+0x12c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001186:	2301      	movs	r3, #1
 8001188:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800118c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001190:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001194:	2302      	movs	r3, #2
 8001196:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800119e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011a2:	2304      	movs	r3, #4
 80011a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 80011a8:	23c8      	movs	r3, #200	@ 0xc8
 80011aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ae:	2302      	movs	r3, #2
 80011b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80011b4:	2309      	movs	r3, #9
 80011b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 fb4d 	bl	8003864 <HAL_RCC_OscConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80011d0:	f000 f87c 	bl	80012cc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011d4:	f002 faf6 	bl	80037c4 <HAL_PWREx_EnableOverDrive>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011de:	f000 f875 	bl	80012cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e2:	230f      	movs	r3, #15
 80011e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e8:	2302      	movs	r3, #2
 80011ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011f4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001200:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001204:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001208:	2106      	movs	r1, #6
 800120a:	4618      	mov	r0, r3
 800120c:	f002 fdd8 	bl	8003dc0 <HAL_RCC_ClockConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001216:	f000 f859 	bl	80012cc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 800121a:	4b0d      	ldr	r3, [pc, #52]	@ (8001250 <SystemClock_Config+0x130>)
 800121c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800121e:	2300      	movs	r3, #0
 8001220:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001222:	2300      	movs	r3, #0
 8001224:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001226:	2300      	movs	r3, #0
 8001228:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800122c:	f107 0308 	add.w	r3, r7, #8
 8001230:	4618      	mov	r0, r3
 8001232:	f002 ffeb 	bl	800420c <HAL_RCCEx_PeriphCLKConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0x120>
  {
    Error_Handler();
 800123c:	f000 f846 	bl	80012cc <Error_Handler>
  }
}
 8001240:	bf00      	nop
 8001242:	37e0      	adds	r7, #224	@ 0xe0
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40023800 	.word	0x40023800
 800124c:	40007000 	.word	0x40007000
 8001250:	00204100 	.word	0x00204100

08001254 <CRC16_2>:

/* USER CODE BEGIN 4 */
uint16_t CRC16_2 (uint8_t *ptr, uint8_t length){
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	70fb      	strb	r3, [r7, #3]
	          	uint16_t crc = 0xFFFF;
 8001260:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001264:	81fb      	strh	r3, [r7, #14]
	          	uint8_t s = 0x00;
 8001266:	2300      	movs	r3, #0
 8001268:	737b      	strb	r3, [r7, #13]
	          	while (length -- ) {
 800126a:	e023      	b.n	80012b4 <CRC16_2+0x60>
	          		crc ^= *ptr++;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	89fb      	ldrh	r3, [r7, #14]
 8001278:	4053      	eors	r3, r2
 800127a:	81fb      	strh	r3, [r7, #14]
	          		for(s = 0; s < 8; s++) {
 800127c:	2300      	movs	r3, #0
 800127e:	737b      	strb	r3, [r7, #13]
 8001280:	e015      	b.n	80012ae <CRC16_2+0x5a>
	          			if((crc & 0x01) != 0) {
 8001282:	89fb      	ldrh	r3, [r7, #14]
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	2b00      	cmp	r3, #0
 800128a:	d00a      	beq.n	80012a2 <CRC16_2+0x4e>
	          				crc >>= 1;
 800128c:	89fb      	ldrh	r3, [r7, #14]
 800128e:	085b      	lsrs	r3, r3, #1
 8001290:	81fb      	strh	r3, [r7, #14]
	          				crc ^= 0xA001;
 8001292:	89fb      	ldrh	r3, [r7, #14]
 8001294:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8001298:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 800129c:	43db      	mvns	r3, r3
 800129e:	81fb      	strh	r3, [r7, #14]
 80012a0:	e002      	b.n	80012a8 <CRC16_2+0x54>
	          			}else crc >>= 1;
 80012a2:	89fb      	ldrh	r3, [r7, #14]
 80012a4:	085b      	lsrs	r3, r3, #1
 80012a6:	81fb      	strh	r3, [r7, #14]
	          		for(s = 0; s < 8; s++) {
 80012a8:	7b7b      	ldrb	r3, [r7, #13]
 80012aa:	3301      	adds	r3, #1
 80012ac:	737b      	strb	r3, [r7, #13]
 80012ae:	7b7b      	ldrb	r3, [r7, #13]
 80012b0:	2b07      	cmp	r3, #7
 80012b2:	d9e6      	bls.n	8001282 <CRC16_2+0x2e>
	          	while (length -- ) {
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	1e5a      	subs	r2, r3, #1
 80012b8:	70fa      	strb	r2, [r7, #3]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1d6      	bne.n	800126c <CRC16_2+0x18>
	          		}
	          	}
	          	return crc;
 80012be:	89fb      	ldrh	r3, [r7, #14]
	          }
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <Error_Handler+0x4>

080012d4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80012d8:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <MX_RNG_Init+0x20>)
 80012da:	4a07      	ldr	r2, [pc, #28]	@ (80012f8 <MX_RNG_Init+0x24>)
 80012dc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80012de:	4805      	ldr	r0, [pc, #20]	@ (80012f4 <MX_RNG_Init+0x20>)
 80012e0:	f003 fbbc 	bl	8004a5c <HAL_RNG_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80012ea:	f7ff ffef 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000260 	.word	0x20000260
 80012f8:	50060800 	.word	0x50060800

080012fc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0a      	ldr	r2, [pc, #40]	@ (8001334 <HAL_RNG_MspInit+0x38>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d10b      	bne.n	8001326 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800130e:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <HAL_RNG_MspInit+0x3c>)
 8001310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001312:	4a09      	ldr	r2, [pc, #36]	@ (8001338 <HAL_RNG_MspInit+0x3c>)
 8001314:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001318:	6353      	str	r3, [r2, #52]	@ 0x34
 800131a:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <HAL_RNG_MspInit+0x3c>)
 800131c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800131e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	50060800 	.word	0x50060800
 8001338:	40023800 	.word	0x40023800

0800133c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001340:	4b1b      	ldr	r3, [pc, #108]	@ (80013b0 <MX_SPI5_Init+0x74>)
 8001342:	4a1c      	ldr	r2, [pc, #112]	@ (80013b4 <MX_SPI5_Init+0x78>)
 8001344:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001346:	4b1a      	ldr	r3, [pc, #104]	@ (80013b0 <MX_SPI5_Init+0x74>)
 8001348:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800134c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800134e:	4b18      	ldr	r3, [pc, #96]	@ (80013b0 <MX_SPI5_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001354:	4b16      	ldr	r3, [pc, #88]	@ (80013b0 <MX_SPI5_Init+0x74>)
 8001356:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800135a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800135c:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <MX_SPI5_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001362:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <MX_SPI5_Init+0x74>)
 8001364:	2200      	movs	r2, #0
 8001366:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <MX_SPI5_Init+0x74>)
 800136a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800136e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001370:	4b0f      	ldr	r3, [pc, #60]	@ (80013b0 <MX_SPI5_Init+0x74>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <MX_SPI5_Init+0x74>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <MX_SPI5_Init+0x74>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <MX_SPI5_Init+0x74>)
 8001384:	2200      	movs	r2, #0
 8001386:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001388:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <MX_SPI5_Init+0x74>)
 800138a:	2207      	movs	r2, #7
 800138c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800138e:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <MX_SPI5_Init+0x74>)
 8001390:	2200      	movs	r2, #0
 8001392:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <MX_SPI5_Init+0x74>)
 8001396:	2200      	movs	r2, #0
 8001398:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <MX_SPI5_Init+0x74>)
 800139c:	f003 fb88 	bl	8004ab0 <HAL_SPI_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 80013a6:	f7ff ff91 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000270 	.word	0x20000270
 80013b4:	40015000 	.word	0x40015000

080013b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	@ 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a17      	ldr	r2, [pc, #92]	@ (8001434 <HAL_SPI_MspInit+0x7c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d128      	bne.n	800142c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80013da:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <HAL_SPI_MspInit+0x80>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013de:	4a16      	ldr	r2, [pc, #88]	@ (8001438 <HAL_SPI_MspInit+0x80>)
 80013e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80013e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013e6:	4b14      	ldr	r3, [pc, #80]	@ (8001438 <HAL_SPI_MspInit+0x80>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013f2:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <HAL_SPI_MspInit+0x80>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	4a10      	ldr	r2, [pc, #64]	@ (8001438 <HAL_SPI_MspInit+0x80>)
 80013f8:	f043 0320 	orr.w	r3, r3, #32
 80013fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <HAL_SPI_MspInit+0x80>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	f003 0320 	and.w	r3, r3, #32
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800140a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800140e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800141c:	2305      	movs	r3, #5
 800141e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	4805      	ldr	r0, [pc, #20]	@ (800143c <HAL_SPI_MspInit+0x84>)
 8001428:	f001 fad2 	bl	80029d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800142c:	bf00      	nop
 800142e:	3728      	adds	r7, #40	@ 0x28
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40015000 	.word	0x40015000
 8001438:	40023800 	.word	0x40023800
 800143c:	40021400 	.word	0x40021400

08001440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <HAL_MspInit+0x44>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144a:	4a0e      	ldr	r2, [pc, #56]	@ (8001484 <HAL_MspInit+0x44>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001450:	6413      	str	r3, [r2, #64]	@ 0x40
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <HAL_MspInit+0x44>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <HAL_MspInit+0x44>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001462:	4a08      	ldr	r2, [pc, #32]	@ (8001484 <HAL_MspInit+0x44>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001468:	6453      	str	r3, [r2, #68]	@ 0x44
 800146a:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <HAL_MspInit+0x44>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800

08001488 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148c:	f001 f976 	bl	800277c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}

08001494 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
	return 1;
 8001498:	2301      	movs	r3, #1
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_kill>:

int _kill(int pid, int sig)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014ae:	f005 fbbb 	bl	8006c28 <__errno>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2216      	movs	r2, #22
 80014b6:	601a      	str	r2, [r3, #0]
	return -1;
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_exit>:

void _exit (int status)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ffe7 	bl	80014a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014d6:	bf00      	nop
 80014d8:	e7fd      	b.n	80014d6 <_exit+0x12>

080014da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	e00a      	b.n	8001502 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014ec:	f3af 8000 	nop.w
 80014f0:	4601      	mov	r1, r0
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	60ba      	str	r2, [r7, #8]
 80014f8:	b2ca      	uxtb	r2, r1
 80014fa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	3301      	adds	r3, #1
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	429a      	cmp	r2, r3
 8001508:	dbf0      	blt.n	80014ec <_read+0x12>
	}

return len;
 800150a:	687b      	ldr	r3, [r7, #4]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	e009      	b.n	800153a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	60ba      	str	r2, [r7, #8]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3301      	adds	r3, #1
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	429a      	cmp	r2, r3
 8001540:	dbf1      	blt.n	8001526 <_write+0x12>
	}
	return len;
 8001542:	687b      	ldr	r3, [r7, #4]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <_close>:

int _close(int file)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	return -1;
 8001554:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001574:	605a      	str	r2, [r3, #4]
	return 0;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <_isatty>:

int _isatty(int file)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	return 1;
 800158c:	2301      	movs	r3, #1
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800159a:	b480      	push	{r7}
 800159c:	b085      	sub	sp, #20
 800159e:	af00      	add	r7, sp, #0
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
	return 0;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015bc:	4a14      	ldr	r2, [pc, #80]	@ (8001610 <_sbrk+0x5c>)
 80015be:	4b15      	ldr	r3, [pc, #84]	@ (8001614 <_sbrk+0x60>)
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c8:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d0:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <_sbrk+0x64>)
 80015d2:	4a12      	ldr	r2, [pc, #72]	@ (800161c <_sbrk+0x68>)
 80015d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d207      	bcs.n	80015f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e4:	f005 fb20 	bl	8006c28 <__errno>
 80015e8:	4603      	mov	r3, r0
 80015ea:	220c      	movs	r2, #12
 80015ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	e009      	b.n	8001608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f4:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <_sbrk+0x64>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fa:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <_sbrk+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	4a05      	ldr	r2, [pc, #20]	@ (8001618 <_sbrk+0x64>)
 8001604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001606:	68fb      	ldr	r3, [r7, #12]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20080000 	.word	0x20080000
 8001614:	00000400 	.word	0x00000400
 8001618:	200002d4 	.word	0x200002d4
 800161c:	200004f8 	.word	0x200004f8

08001620 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001624:	4b15      	ldr	r3, [pc, #84]	@ (800167c <SystemInit+0x5c>)
 8001626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800162a:	4a14      	ldr	r2, [pc, #80]	@ (800167c <SystemInit+0x5c>)
 800162c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001630:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001634:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <SystemInit+0x60>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a11      	ldr	r2, [pc, #68]	@ (8001680 <SystemInit+0x60>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001640:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <SystemInit+0x60>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001646:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <SystemInit+0x60>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	490d      	ldr	r1, [pc, #52]	@ (8001680 <SystemInit+0x60>)
 800164c:	4b0d      	ldr	r3, [pc, #52]	@ (8001684 <SystemInit+0x64>)
 800164e:	4013      	ands	r3, r2
 8001650:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001652:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <SystemInit+0x60>)
 8001654:	4a0c      	ldr	r2, [pc, #48]	@ (8001688 <SystemInit+0x68>)
 8001656:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001658:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <SystemInit+0x60>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a08      	ldr	r2, [pc, #32]	@ (8001680 <SystemInit+0x60>)
 800165e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001662:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <SystemInit+0x60>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800166a:	4b04      	ldr	r3, [pc, #16]	@ (800167c <SystemInit+0x5c>)
 800166c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001670:	609a      	str	r2, [r3, #8]
#endif
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00
 8001680:	40023800 	.word	0x40023800
 8001684:	fef6ffff 	.word	0xfef6ffff
 8001688:	24003010 	.word	0x24003010

0800168c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001692:	f107 0310 	add.w	r3, r7, #16
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016aa:	4b20      	ldr	r3, [pc, #128]	@ (800172c <MX_TIM1_Init+0xa0>)
 80016ac:	4a20      	ldr	r2, [pc, #128]	@ (8001730 <MX_TIM1_Init+0xa4>)
 80016ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20000-1;
 80016b0:	4b1e      	ldr	r3, [pc, #120]	@ (800172c <MX_TIM1_Init+0xa0>)
 80016b2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80016b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b8:	4b1c      	ldr	r3, [pc, #112]	@ (800172c <MX_TIM1_Init+0xa0>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65536-1;
 80016be:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <MX_TIM1_Init+0xa0>)
 80016c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c6:	4b19      	ldr	r3, [pc, #100]	@ (800172c <MX_TIM1_Init+0xa0>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016cc:	4b17      	ldr	r3, [pc, #92]	@ (800172c <MX_TIM1_Init+0xa0>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d2:	4b16      	ldr	r3, [pc, #88]	@ (800172c <MX_TIM1_Init+0xa0>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016d8:	4814      	ldr	r0, [pc, #80]	@ (800172c <MX_TIM1_Init+0xa0>)
 80016da:	f003 fd63 	bl	80051a4 <HAL_TIM_Base_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80016e4:	f7ff fdf2 	bl	80012cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	4619      	mov	r1, r3
 80016f4:	480d      	ldr	r0, [pc, #52]	@ (800172c <MX_TIM1_Init+0xa0>)
 80016f6:	f003 fdad 	bl	8005254 <HAL_TIM_ConfigClockSource>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001700:	f7ff fde4 	bl	80012cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	4619      	mov	r1, r3
 8001714:	4805      	ldr	r0, [pc, #20]	@ (800172c <MX_TIM1_Init+0xa0>)
 8001716:	f003 ff9d 	bl	8005654 <HAL_TIMEx_MasterConfigSynchronization>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001720:	f7ff fdd4 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001724:	bf00      	nop
 8001726:	3720      	adds	r7, #32
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200002d8 	.word	0x200002d8
 8001730:	40010000 	.word	0x40010000

08001734 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0a      	ldr	r2, [pc, #40]	@ (800176c <HAL_TIM_Base_MspInit+0x38>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d10b      	bne.n	800175e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001746:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <HAL_TIM_Base_MspInit+0x3c>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	4a09      	ldr	r2, [pc, #36]	@ (8001770 <HAL_TIM_Base_MspInit+0x3c>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6453      	str	r3, [r2, #68]	@ 0x44
 8001752:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <HAL_TIM_Base_MspInit+0x3c>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40010000 	.word	0x40010000
 8001770:	40023800 	.word	0x40023800

08001774 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001778:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <MX_USART3_UART_Init+0x58>)
 800177a:	4a15      	ldr	r2, [pc, #84]	@ (80017d0 <MX_USART3_UART_Init+0x5c>)
 800177c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800177e:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <MX_USART3_UART_Init+0x58>)
 8001780:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001784:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001786:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <MX_USART3_UART_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800178c:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <MX_USART3_UART_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001792:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <MX_USART3_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001798:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <MX_USART3_UART_Init+0x58>)
 800179a:	220c      	movs	r2, #12
 800179c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179e:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <MX_USART3_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a4:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <MX_USART3_UART_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <MX_USART3_UART_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017b0:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <MX_USART3_UART_Init+0x58>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017b6:	4805      	ldr	r0, [pc, #20]	@ (80017cc <MX_USART3_UART_Init+0x58>)
 80017b8:	f003 ffda 	bl	8005770 <HAL_UART_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80017c2:	f7ff fd83 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000324 	.word	0x20000324
 80017d0:	40004800 	.word	0x40004800

080017d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	@ 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a17      	ldr	r2, [pc, #92]	@ (8001850 <HAL_UART_MspInit+0x7c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d128      	bne.n	8001848 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017f6:	4b17      	ldr	r3, [pc, #92]	@ (8001854 <HAL_UART_MspInit+0x80>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	4a16      	ldr	r2, [pc, #88]	@ (8001854 <HAL_UART_MspInit+0x80>)
 80017fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001800:	6413      	str	r3, [r2, #64]	@ 0x40
 8001802:	4b14      	ldr	r3, [pc, #80]	@ (8001854 <HAL_UART_MspInit+0x80>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001806:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800180e:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <HAL_UART_MspInit+0x80>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	4a10      	ldr	r2, [pc, #64]	@ (8001854 <HAL_UART_MspInit+0x80>)
 8001814:	f043 0308 	orr.w	r3, r3, #8
 8001818:	6313      	str	r3, [r2, #48]	@ 0x30
 800181a:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <HAL_UART_MspInit+0x80>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001826:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001834:	2303      	movs	r3, #3
 8001836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001838:	2307      	movs	r3, #7
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	4805      	ldr	r0, [pc, #20]	@ (8001858 <HAL_UART_MspInit+0x84>)
 8001844:	f001 f8c4 	bl	80029d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001848:	bf00      	nop
 800184a:	3728      	adds	r7, #40	@ 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40004800 	.word	0x40004800
 8001854:	40023800 	.word	0x40023800
 8001858:	40020c00 	.word	0x40020c00

0800185c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800185c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001894 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001860:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001862:	e003      	b.n	800186c <LoopCopyDataInit>

08001864 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001864:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001866:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001868:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800186a:	3104      	adds	r1, #4

0800186c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800186c:	480b      	ldr	r0, [pc, #44]	@ (800189c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800186e:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001870:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001872:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001874:	d3f6      	bcc.n	8001864 <CopyDataInit>
  ldr  r2, =_sbss
 8001876:	4a0b      	ldr	r2, [pc, #44]	@ (80018a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001878:	e002      	b.n	8001880 <LoopFillZerobss>

0800187a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800187a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800187c:	f842 3b04 	str.w	r3, [r2], #4

08001880 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001880:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001882:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001884:	d3f9      	bcc.n	800187a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001886:	f7ff fecb 	bl	8001620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800188a:	f005 f9d3 	bl	8006c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800188e:	f7ff f8c7 	bl	8000a20 <main>
  bx  lr    
 8001892:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001894:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001898:	080092b8 	.word	0x080092b8
  ldr  r0, =_sdata
 800189c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018a0:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80018a4:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80018a8:	200004f8 	.word	0x200004f8

080018ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018ac:	e7fe      	b.n	80018ac <ADC_IRQHandler>

080018ae <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80018ae:	b590      	push	{r4, r7, lr}
 80018b0:	b08b      	sub	sp, #44	@ 0x2c
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4604      	mov	r4, r0
 80018b6:	4608      	mov	r0, r1
 80018b8:	4611      	mov	r1, r2
 80018ba:	461a      	mov	r2, r3
 80018bc:	4623      	mov	r3, r4
 80018be:	80fb      	strh	r3, [r7, #6]
 80018c0:	4603      	mov	r3, r0
 80018c2:	80bb      	strh	r3, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]
 80018c8:	4613      	mov	r3, r2
 80018ca:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80018cc:	887b      	ldrh	r3, [r7, #2]
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
    int y = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80018d4:	887b      	ldrh	r3, [r7, #2]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	f1c3 0301 	rsb	r3, r3, #1
 80018dc:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80018e6:	e061      	b.n	80019ac <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80018e8:	88fa      	ldrh	r2, [r7, #6]
 80018ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	e018      	b.n	8001924 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	b298      	uxth	r0, r3
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	88bb      	ldrh	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	b29b      	uxth	r3, r3
 8001900:	883a      	ldrh	r2, [r7, #0]
 8001902:	4619      	mov	r1, r3
 8001904:	f000 fc84 	bl	8002210 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	b298      	uxth	r0, r3
 800190c:	6a3b      	ldr	r3, [r7, #32]
 800190e:	b29b      	uxth	r3, r3
 8001910:	88ba      	ldrh	r2, [r7, #4]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	b29b      	uxth	r3, r3
 8001916:	883a      	ldrh	r2, [r7, #0]
 8001918:	4619      	mov	r1, r3
 800191a:	f000 fc79 	bl	8002210 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	3301      	adds	r3, #1
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	88fa      	ldrh	r2, [r7, #6]
 8001926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001928:	4413      	add	r3, r2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	429a      	cmp	r2, r3
 800192e:	dde0      	ble.n	80018f2 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8001930:	88fa      	ldrh	r2, [r7, #6]
 8001932:	6a3b      	ldr	r3, [r7, #32]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	e018      	b.n	800196c <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	b298      	uxth	r0, r3
 800193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001940:	b29a      	uxth	r2, r3
 8001942:	88bb      	ldrh	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	b29b      	uxth	r3, r3
 8001948:	883a      	ldrh	r2, [r7, #0]
 800194a:	4619      	mov	r1, r3
 800194c:	f000 fc60 	bl	8002210 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	b298      	uxth	r0, r3
 8001954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001956:	b29b      	uxth	r3, r3
 8001958:	88ba      	ldrh	r2, [r7, #4]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	b29b      	uxth	r3, r3
 800195e:	883a      	ldrh	r2, [r7, #0]
 8001960:	4619      	mov	r1, r3
 8001962:	f000 fc55 	bl	8002210 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	3301      	adds	r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	88fa      	ldrh	r2, [r7, #6]
 800196e:	6a3b      	ldr	r3, [r7, #32]
 8001970:	4413      	add	r3, r2
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	429a      	cmp	r2, r3
 8001976:	dde0      	ble.n	800193a <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	3301      	adds	r3, #1
 800197c:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	4413      	add	r3, r2
 8001984:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	3302      	adds	r3, #2
 800198a:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	005a      	lsls	r2, r3, #1
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	4413      	add	r3, r2
 8001994:	2b00      	cmp	r3, #0
 8001996:	dd09      	ble.n	80019ac <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8001998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199a:	3b01      	subs	r3, #1
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
            radiusError += xChange;
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	4413      	add	r3, r2
 80019a4:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3302      	adds	r3, #2
 80019aa:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80019ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ae:	6a3b      	ldr	r3, [r7, #32]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	da99      	bge.n	80018e8 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	372c      	adds	r7, #44	@ 0x2c
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd90      	pop	{r4, r7, pc}

080019be <ILI9341_Draw_Filled_Rectangle_Coord>:
	
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 80019be:	b590      	push	{r4, r7, lr}
 80019c0:	b089      	sub	sp, #36	@ 0x24
 80019c2:	af02      	add	r7, sp, #8
 80019c4:	4604      	mov	r4, r0
 80019c6:	4608      	mov	r0, r1
 80019c8:	4611      	mov	r1, r2
 80019ca:	461a      	mov	r2, r3
 80019cc:	4623      	mov	r3, r4
 80019ce:	80fb      	strh	r3, [r7, #6]
 80019d0:	4603      	mov	r3, r0
 80019d2:	80bb      	strh	r3, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	807b      	strh	r3, [r7, #2]
 80019d8:	4613      	mov	r3, r2
 80019da:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 80019f8:	887a      	ldrh	r2, [r7, #2]
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	da01      	bge.n	8001a0a <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 8001a06:	2301      	movs	r3, #1
 8001a08:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8001a0e:	883a      	ldrh	r2, [r7, #0]
 8001a10:	88bb      	ldrh	r3, [r7, #4]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	da01      	bge.n	8001a20 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8001a20:	7cfb      	ldrb	r3, [r7, #19]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d106      	bne.n	8001a34 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	823b      	strh	r3, [r7, #16]
 8001a32:	e005      	b.n	8001a40 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8001a34:	88fa      	ldrh	r2, [r7, #6]
 8001a36:	887b      	ldrh	r3, [r7, #2]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8001a40:	7cbb      	ldrb	r3, [r7, #18]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d106      	bne.n	8001a54 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8001a46:	883a      	ldrh	r2, [r7, #0]
 8001a48:	88bb      	ldrh	r3, [r7, #4]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 8001a4e:	88bb      	ldrh	r3, [r7, #4]
 8001a50:	81fb      	strh	r3, [r7, #14]
 8001a52:	e005      	b.n	8001a60 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8001a54:	88ba      	ldrh	r2, [r7, #4]
 8001a56:	883b      	ldrh	r3, [r7, #0]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 8001a5c:	883b      	ldrh	r3, [r7, #0]
 8001a5e:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8001a60:	8abc      	ldrh	r4, [r7, #20]
 8001a62:	8afa      	ldrh	r2, [r7, #22]
 8001a64:	89f9      	ldrh	r1, [r7, #14]
 8001a66:	8a38      	ldrh	r0, [r7, #16]
 8001a68:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	4623      	mov	r3, r4
 8001a6e:	f000 fca9 	bl	80023c4 <ILI9341_Draw_Rectangle>
}
 8001a72:	bf00      	nop
 8001a74:	371c      	adds	r7, #28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd90      	pop	{r4, r7, pc}
	...

08001a7c <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8001a7c:	b590      	push	{r4, r7, lr}
 8001a7e:	b089      	sub	sp, #36	@ 0x24
 8001a80:	af02      	add	r7, sp, #8
 8001a82:	4604      	mov	r4, r0
 8001a84:	4608      	mov	r0, r1
 8001a86:	4611      	mov	r1, r2
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	71fb      	strb	r3, [r7, #7]
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71bb      	strb	r3, [r7, #6]
 8001a92:	460b      	mov	r3, r1
 8001a94:	717b      	strb	r3, [r7, #5]
 8001a96:	4613      	mov	r3, r2
 8001a98:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
 8001aa0:	2b1f      	cmp	r3, #31
 8001aa2:	d802      	bhi.n	8001aaa <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	71fb      	strb	r3, [r7, #7]
 8001aa8:	e002      	b.n	8001ab0 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8001aaa:	7dfb      	ldrb	r3, [r7, #23]
 8001aac:	3b20      	subs	r3, #32
 8001aae:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	753b      	strb	r3, [r7, #20]
 8001ab4:	e012      	b.n	8001adc <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8001ab6:	7dfa      	ldrb	r2, [r7, #23]
 8001ab8:	7d38      	ldrb	r0, [r7, #20]
 8001aba:	7d39      	ldrb	r1, [r7, #20]
 8001abc:	4c3b      	ldr	r4, [pc, #236]	@ (8001bac <ILI9341_Draw_Char+0x130>)
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4423      	add	r3, r4
 8001ac8:	4403      	add	r3, r0
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	f101 0318 	add.w	r3, r1, #24
 8001ad0:	443b      	add	r3, r7
 8001ad2:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001ad6:	7d3b      	ldrb	r3, [r7, #20]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	753b      	strb	r3, [r7, #20]
 8001adc:	7d3b      	ldrb	r3, [r7, #20]
 8001ade:	2b05      	cmp	r3, #5
 8001ae0:	d9e9      	bls.n	8001ab6 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8001ae2:	79bb      	ldrb	r3, [r7, #6]
 8001ae4:	b298      	uxth	r0, r3
 8001ae6:	797b      	ldrb	r3, [r7, #5]
 8001ae8:	b299      	uxth	r1, r3
 8001aea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001aec:	461a      	mov	r2, r3
 8001aee:	0052      	lsls	r2, r2, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	b29c      	uxth	r4, r3
 8001afc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	4623      	mov	r3, r4
 8001b02:	f000 fc5f 	bl	80023c4 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001b06:	2300      	movs	r3, #0
 8001b08:	757b      	strb	r3, [r7, #21]
 8001b0a:	e047      	b.n	8001b9c <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	75bb      	strb	r3, [r7, #22]
 8001b10:	e03e      	b.n	8001b90 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8001b12:	7d7b      	ldrb	r3, [r7, #21]
 8001b14:	3318      	adds	r3, #24
 8001b16:	443b      	add	r3, r7
 8001b18:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	7dbb      	ldrb	r3, [r7, #22]
 8001b20:	fa42 f303 	asr.w	r3, r2, r3
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d02e      	beq.n	8001b8a <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8001b2c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d110      	bne.n	8001b54 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001b32:	79bb      	ldrb	r3, [r7, #6]
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	7d7b      	ldrb	r3, [r7, #21]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	b298      	uxth	r0, r3
 8001b3e:	797b      	ldrb	r3, [r7, #5]
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	7dbb      	ldrb	r3, [r7, #22]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	887a      	ldrh	r2, [r7, #2]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f000 fb5f 	bl	8002210 <ILI9341_Draw_Pixel>
 8001b52:	e01a      	b.n	8001b8a <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001b54:	79bb      	ldrb	r3, [r7, #6]
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	7d7b      	ldrb	r3, [r7, #21]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8001b5e:	fb11 f303 	smulbb	r3, r1, r3
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	4413      	add	r3, r2
 8001b66:	b298      	uxth	r0, r3
 8001b68:	797b      	ldrb	r3, [r7, #5]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	7dbb      	ldrb	r3, [r7, #22]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8001b72:	fb11 f303 	smulbb	r3, r1, r3
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	4413      	add	r3, r2
 8001b7a:	b299      	uxth	r1, r3
 8001b7c:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8001b7e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001b80:	887b      	ldrh	r3, [r7, #2]
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	4623      	mov	r3, r4
 8001b86:	f000 fc1d 	bl	80023c4 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001b8a:	7dbb      	ldrb	r3, [r7, #22]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	75bb      	strb	r3, [r7, #22]
 8001b90:	7dbb      	ldrb	r3, [r7, #22]
 8001b92:	2b07      	cmp	r3, #7
 8001b94:	d9bd      	bls.n	8001b12 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001b96:	7d7b      	ldrb	r3, [r7, #21]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	757b      	strb	r3, [r7, #21]
 8001b9c:	7d7b      	ldrb	r3, [r7, #21]
 8001b9e:	2b05      	cmp	r3, #5
 8001ba0:	d9b4      	bls.n	8001b0c <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8001ba2:	bf00      	nop
 8001ba4:	bf00      	nop
 8001ba6:	371c      	adds	r7, #28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd90      	pop	{r4, r7, pc}
 8001bac:	08008cf8 	.word	0x08008cf8

08001bb0 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001bb0:	b590      	push	{r4, r7, lr}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	4608      	mov	r0, r1
 8001bba:	4611      	mov	r1, r2
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	70fb      	strb	r3, [r7, #3]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	70bb      	strb	r3, [r7, #2]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8001bca:	e017      	b.n	8001bfc <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	7818      	ldrb	r0, [r3, #0]
 8001bd4:	883c      	ldrh	r4, [r7, #0]
 8001bd6:	78ba      	ldrb	r2, [r7, #2]
 8001bd8:	78f9      	ldrb	r1, [r7, #3]
 8001bda:	8bbb      	ldrh	r3, [r7, #28]
 8001bdc:	9301      	str	r3, [sp, #4]
 8001bde:	8b3b      	ldrh	r3, [r7, #24]
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	4623      	mov	r3, r4
 8001be4:	f7ff ff4a 	bl	8001a7c <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8001be8:	8b3b      	ldrh	r3, [r7, #24]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	0052      	lsls	r2, r2, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1e3      	bne.n	8001bcc <ILI9341_Draw_Text+0x1c>
    }
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd90      	pop	{r4, r7, pc}
	...

08001c10 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8001c14:	f7ff fb92 	bl	800133c <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8001c18:	f7fe fce2 	bl	80005e0 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c22:	4802      	ldr	r0, [pc, #8]	@ (8001c2c <ILI9341_SPI_Init+0x1c>)
 8001c24:	f001 f898 	bl	8002d58 <HAL_GPIO_WritePin>
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40020800 	.word	0x40020800

08001c30 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8001c3a:	1df9      	adds	r1, r7, #7
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	2201      	movs	r2, #1
 8001c40:	4803      	ldr	r0, [pc, #12]	@ (8001c50 <ILI9341_SPI_Send+0x20>)
 8001c42:	f002 ffe0 	bl	8004c06 <HAL_SPI_Transmit>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000270 	.word	0x20000270

08001c54 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c64:	480b      	ldr	r0, [pc, #44]	@ (8001c94 <ILI9341_Write_Command+0x40>)
 8001c66:	f001 f877 	bl	8002d58 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c70:	4808      	ldr	r0, [pc, #32]	@ (8001c94 <ILI9341_Write_Command+0x40>)
 8001c72:	f001 f871 	bl	8002d58 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ffd9 	bl	8001c30 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c84:	4803      	ldr	r0, [pc, #12]	@ (8001c94 <ILI9341_Write_Command+0x40>)
 8001c86:	f001 f867 	bl	8002d58 <HAL_GPIO_WritePin>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40020800 	.word	0x40020800

08001c98 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ca8:	480b      	ldr	r0, [pc, #44]	@ (8001cd8 <ILI9341_Write_Data+0x40>)
 8001caa:	f001 f855 	bl	8002d58 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cb4:	4808      	ldr	r0, [pc, #32]	@ (8001cd8 <ILI9341_Write_Data+0x40>)
 8001cb6:	f001 f84f 	bl	8002d58 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ffb7 	bl	8001c30 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cc8:	4803      	ldr	r0, [pc, #12]	@ (8001cd8 <ILI9341_Write_Data+0x40>)
 8001cca:	f001 f845 	bl	8002d58 <HAL_GPIO_WritePin>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40020800 	.word	0x40020800

08001cdc <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4604      	mov	r4, r0
 8001ce4:	4608      	mov	r0, r1
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4623      	mov	r3, r4
 8001cec:	80fb      	strh	r3, [r7, #6]
 8001cee:	4603      	mov	r3, r0
 8001cf0:	80bb      	strh	r3, [r7, #4]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	807b      	strh	r3, [r7, #2]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8001cfa:	202a      	movs	r0, #42	@ 0x2a
 8001cfc:	f7ff ffaa 	bl	8001c54 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	0a1b      	lsrs	r3, r3, #8
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ffc5 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ffc0 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001d18:	887b      	ldrh	r3, [r7, #2]
 8001d1a:	0a1b      	lsrs	r3, r3, #8
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ffb9 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8001d26:	887b      	ldrh	r3, [r7, #2]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ffb4 	bl	8001c98 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001d30:	202b      	movs	r0, #43	@ 0x2b
 8001d32:	f7ff ff8f 	bl	8001c54 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8001d36:	88bb      	ldrh	r3, [r7, #4]
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ffaa 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001d44:	88bb      	ldrh	r3, [r7, #4]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ffa5 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8001d4e:	883b      	ldrh	r3, [r7, #0]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ff9e 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8001d5c:	883b      	ldrh	r3, [r7, #0]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff99 	bl	8001c98 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8001d66:	202c      	movs	r0, #44	@ 0x2c
 8001d68:	f7ff ff74 	bl	8001c54 <ILI9341_Write_Command>
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd90      	pop	{r4, r7, pc}

08001d74 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d7e:	480b      	ldr	r0, [pc, #44]	@ (8001dac <ILI9341_Reset+0x38>)
 8001d80:	f000 ffea 	bl	8002d58 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001d84:	20c8      	movs	r0, #200	@ 0xc8
 8001d86:	f000 fd19 	bl	80027bc <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d90:	4806      	ldr	r0, [pc, #24]	@ (8001dac <ILI9341_Reset+0x38>)
 8001d92:	f000 ffe1 	bl	8002d58 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001d96:	20c8      	movs	r0, #200	@ 0xc8
 8001d98:	f000 fd10 	bl	80027bc <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001da2:	4802      	ldr	r0, [pc, #8]	@ (8001dac <ILI9341_Reset+0x38>)
 8001da4:	f000 ffd8 	bl	8002d58 <HAL_GPIO_WritePin>
}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40020800 	.word	0x40020800

08001db0 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8001dbe:	2036      	movs	r0, #54	@ 0x36
 8001dc0:	f7ff ff48 	bl	8001c54 <ILI9341_Write_Command>
HAL_Delay(1);
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f000 fcf9 	bl	80027bc <HAL_Delay>
	
switch(screen_rotation) 
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d837      	bhi.n	8001e40 <ILI9341_Set_Rotation+0x90>
 8001dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8001dd8 <ILI9341_Set_Rotation+0x28>)
 8001dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd6:	bf00      	nop
 8001dd8:	08001de9 	.word	0x08001de9
 8001ddc:	08001dff 	.word	0x08001dff
 8001de0:	08001e15 	.word	0x08001e15
 8001de4:	08001e2b 	.word	0x08001e2b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8001de8:	2048      	movs	r0, #72	@ 0x48
 8001dea:	f7ff ff55 	bl	8001c98 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8001dee:	4b17      	ldr	r3, [pc, #92]	@ (8001e4c <ILI9341_Set_Rotation+0x9c>)
 8001df0:	22f0      	movs	r2, #240	@ 0xf0
 8001df2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001df4:	4b16      	ldr	r3, [pc, #88]	@ (8001e50 <ILI9341_Set_Rotation+0xa0>)
 8001df6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001dfa:	801a      	strh	r2, [r3, #0]
			break;
 8001dfc:	e021      	b.n	8001e42 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8001dfe:	2028      	movs	r0, #40	@ 0x28
 8001e00:	f7ff ff4a 	bl	8001c98 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001e04:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <ILI9341_Set_Rotation+0x9c>)
 8001e06:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001e0a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001e0c:	4b10      	ldr	r3, [pc, #64]	@ (8001e50 <ILI9341_Set_Rotation+0xa0>)
 8001e0e:	22f0      	movs	r2, #240	@ 0xf0
 8001e10:	801a      	strh	r2, [r3, #0]
			break;
 8001e12:	e016      	b.n	8001e42 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001e14:	2088      	movs	r0, #136	@ 0x88
 8001e16:	f7ff ff3f 	bl	8001c98 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <ILI9341_Set_Rotation+0x9c>)
 8001e1c:	22f0      	movs	r2, #240	@ 0xf0
 8001e1e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001e20:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <ILI9341_Set_Rotation+0xa0>)
 8001e22:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001e26:	801a      	strh	r2, [r3, #0]
			break;
 8001e28:	e00b      	b.n	8001e42 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8001e2a:	20e8      	movs	r0, #232	@ 0xe8
 8001e2c:	f7ff ff34 	bl	8001c98 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001e30:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <ILI9341_Set_Rotation+0x9c>)
 8001e32:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001e36:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001e38:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <ILI9341_Set_Rotation+0xa0>)
 8001e3a:	22f0      	movs	r2, #240	@ 0xf0
 8001e3c:	801a      	strh	r2, [r3, #0]
			break;
 8001e3e:	e000      	b.n	8001e42 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001e40:	bf00      	nop
	}
}
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2000000e 	.word	0x2000000e
 8001e50:	2000000c 	.word	0x2000000c

08001e54 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e5e:	4802      	ldr	r0, [pc, #8]	@ (8001e68 <ILI9341_Enable+0x14>)
 8001e60:	f000 ff7a 	bl	8002d58 <HAL_GPIO_WritePin>
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40020800 	.word	0x40020800

08001e6c <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8001e70:	f7ff fff0 	bl	8001e54 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001e74:	f7ff fecc 	bl	8001c10 <ILI9341_SPI_Init>
ILI9341_Reset();
 8001e78:	f7ff ff7c 	bl	8001d74 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f7ff fee9 	bl	8001c54 <ILI9341_Write_Command>
HAL_Delay(1000);
 8001e82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e86:	f000 fc99 	bl	80027bc <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8001e8a:	20cb      	movs	r0, #203	@ 0xcb
 8001e8c:	f7ff fee2 	bl	8001c54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8001e90:	2039      	movs	r0, #57	@ 0x39
 8001e92:	f7ff ff01 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8001e96:	202c      	movs	r0, #44	@ 0x2c
 8001e98:	f7ff fefe 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7ff fefb 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8001ea2:	2034      	movs	r0, #52	@ 0x34
 8001ea4:	f7ff fef8 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8001ea8:	2002      	movs	r0, #2
 8001eaa:	f7ff fef5 	bl	8001c98 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8001eae:	20cf      	movs	r0, #207	@ 0xcf
 8001eb0:	f7ff fed0 	bl	8001c54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f7ff feef 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001eba:	20c1      	movs	r0, #193	@ 0xc1
 8001ebc:	f7ff feec 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8001ec0:	2030      	movs	r0, #48	@ 0x30
 8001ec2:	f7ff fee9 	bl	8001c98 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8001ec6:	20e8      	movs	r0, #232	@ 0xe8
 8001ec8:	f7ff fec4 	bl	8001c54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8001ecc:	2085      	movs	r0, #133	@ 0x85
 8001ece:	f7ff fee3 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f7ff fee0 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8001ed8:	2078      	movs	r0, #120	@ 0x78
 8001eda:	f7ff fedd 	bl	8001c98 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8001ede:	20ea      	movs	r0, #234	@ 0xea
 8001ee0:	f7ff feb8 	bl	8001c54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f7ff fed7 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001eea:	2000      	movs	r0, #0
 8001eec:	f7ff fed4 	bl	8001c98 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001ef0:	20ed      	movs	r0, #237	@ 0xed
 8001ef2:	f7ff feaf 	bl	8001c54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8001ef6:	2064      	movs	r0, #100	@ 0x64
 8001ef8:	f7ff fece 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001efc:	2003      	movs	r0, #3
 8001efe:	f7ff fecb 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8001f02:	2012      	movs	r0, #18
 8001f04:	f7ff fec8 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001f08:	2081      	movs	r0, #129	@ 0x81
 8001f0a:	f7ff fec5 	bl	8001c98 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001f0e:	20f7      	movs	r0, #247	@ 0xf7
 8001f10:	f7ff fea0 	bl	8001c54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001f14:	2020      	movs	r0, #32
 8001f16:	f7ff febf 	bl	8001c98 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8001f1a:	20c0      	movs	r0, #192	@ 0xc0
 8001f1c:	f7ff fe9a 	bl	8001c54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001f20:	2023      	movs	r0, #35	@ 0x23
 8001f22:	f7ff feb9 	bl	8001c98 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8001f26:	20c1      	movs	r0, #193	@ 0xc1
 8001f28:	f7ff fe94 	bl	8001c54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001f2c:	2010      	movs	r0, #16
 8001f2e:	f7ff feb3 	bl	8001c98 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8001f32:	20c5      	movs	r0, #197	@ 0xc5
 8001f34:	f7ff fe8e 	bl	8001c54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001f38:	203e      	movs	r0, #62	@ 0x3e
 8001f3a:	f7ff fead 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001f3e:	2028      	movs	r0, #40	@ 0x28
 8001f40:	f7ff feaa 	bl	8001c98 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001f44:	20c7      	movs	r0, #199	@ 0xc7
 8001f46:	f7ff fe85 	bl	8001c54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8001f4a:	2086      	movs	r0, #134	@ 0x86
 8001f4c:	f7ff fea4 	bl	8001c98 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001f50:	2036      	movs	r0, #54	@ 0x36
 8001f52:	f7ff fe7f 	bl	8001c54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8001f56:	2048      	movs	r0, #72	@ 0x48
 8001f58:	f7ff fe9e 	bl	8001c98 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001f5c:	203a      	movs	r0, #58	@ 0x3a
 8001f5e:	f7ff fe79 	bl	8001c54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001f62:	2055      	movs	r0, #85	@ 0x55
 8001f64:	f7ff fe98 	bl	8001c98 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001f68:	20b1      	movs	r0, #177	@ 0xb1
 8001f6a:	f7ff fe73 	bl	8001c54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f7ff fe92 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001f74:	2018      	movs	r0, #24
 8001f76:	f7ff fe8f 	bl	8001c98 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8001f7a:	20b6      	movs	r0, #182	@ 0xb6
 8001f7c:	f7ff fe6a 	bl	8001c54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001f80:	2008      	movs	r0, #8
 8001f82:	f7ff fe89 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001f86:	2082      	movs	r0, #130	@ 0x82
 8001f88:	f7ff fe86 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001f8c:	2027      	movs	r0, #39	@ 0x27
 8001f8e:	f7ff fe83 	bl	8001c98 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8001f92:	20f2      	movs	r0, #242	@ 0xf2
 8001f94:	f7ff fe5e 	bl	8001c54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f7ff fe7d 	bl	8001c98 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8001f9e:	2026      	movs	r0, #38	@ 0x26
 8001fa0:	f7ff fe58 	bl	8001c54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f7ff fe77 	bl	8001c98 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001faa:	20e0      	movs	r0, #224	@ 0xe0
 8001fac:	f7ff fe52 	bl	8001c54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8001fb0:	200f      	movs	r0, #15
 8001fb2:	f7ff fe71 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001fb6:	2031      	movs	r0, #49	@ 0x31
 8001fb8:	f7ff fe6e 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001fbc:	202b      	movs	r0, #43	@ 0x2b
 8001fbe:	f7ff fe6b 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001fc2:	200c      	movs	r0, #12
 8001fc4:	f7ff fe68 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001fc8:	200e      	movs	r0, #14
 8001fca:	f7ff fe65 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001fce:	2008      	movs	r0, #8
 8001fd0:	f7ff fe62 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8001fd4:	204e      	movs	r0, #78	@ 0x4e
 8001fd6:	f7ff fe5f 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001fda:	20f1      	movs	r0, #241	@ 0xf1
 8001fdc:	f7ff fe5c 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001fe0:	2037      	movs	r0, #55	@ 0x37
 8001fe2:	f7ff fe59 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001fe6:	2007      	movs	r0, #7
 8001fe8:	f7ff fe56 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001fec:	2010      	movs	r0, #16
 8001fee:	f7ff fe53 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001ff2:	2003      	movs	r0, #3
 8001ff4:	f7ff fe50 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001ff8:	200e      	movs	r0, #14
 8001ffa:	f7ff fe4d 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001ffe:	2009      	movs	r0, #9
 8002000:	f7ff fe4a 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002004:	2000      	movs	r0, #0
 8002006:	f7ff fe47 	bl	8001c98 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 800200a:	20e1      	movs	r0, #225	@ 0xe1
 800200c:	f7ff fe22 	bl	8001c54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002010:	2000      	movs	r0, #0
 8002012:	f7ff fe41 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002016:	200e      	movs	r0, #14
 8002018:	f7ff fe3e 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 800201c:	2014      	movs	r0, #20
 800201e:	f7ff fe3b 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002022:	2003      	movs	r0, #3
 8002024:	f7ff fe38 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002028:	2011      	movs	r0, #17
 800202a:	f7ff fe35 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800202e:	2007      	movs	r0, #7
 8002030:	f7ff fe32 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002034:	2031      	movs	r0, #49	@ 0x31
 8002036:	f7ff fe2f 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800203a:	20c1      	movs	r0, #193	@ 0xc1
 800203c:	f7ff fe2c 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002040:	2048      	movs	r0, #72	@ 0x48
 8002042:	f7ff fe29 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002046:	2008      	movs	r0, #8
 8002048:	f7ff fe26 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800204c:	200f      	movs	r0, #15
 800204e:	f7ff fe23 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002052:	200c      	movs	r0, #12
 8002054:	f7ff fe20 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002058:	2031      	movs	r0, #49	@ 0x31
 800205a:	f7ff fe1d 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800205e:	2036      	movs	r0, #54	@ 0x36
 8002060:	f7ff fe1a 	bl	8001c98 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002064:	200f      	movs	r0, #15
 8002066:	f7ff fe17 	bl	8001c98 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800206a:	2011      	movs	r0, #17
 800206c:	f7ff fdf2 	bl	8001c54 <ILI9341_Write_Command>
HAL_Delay(120);
 8002070:	2078      	movs	r0, #120	@ 0x78
 8002072:	f000 fba3 	bl	80027bc <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8002076:	2029      	movs	r0, #41	@ 0x29
 8002078:	f7ff fdec 	bl	8001c54 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800207c:	2000      	movs	r0, #0
 800207e:	f7ff fe97 	bl	8001db0 <ILI9341_Set_Rotation>
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800208c:	b08d      	sub	sp, #52	@ 0x34
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	6039      	str	r1, [r7, #0]
 8002094:	80fb      	strh	r3, [r7, #6]
 8002096:	466b      	mov	r3, sp
 8002098:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80020a6:	d202      	bcs.n	80020ae <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020ac:	e002      	b.n	80020b4 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80020ae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80020b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80020b4:	2201      	movs	r2, #1
 80020b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020ba:	4840      	ldr	r0, [pc, #256]	@ (80021bc <ILI9341_Draw_Colour_Burst+0x134>)
 80020bc:	f000 fe4c 	bl	8002d58 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80020c0:	2200      	movs	r2, #0
 80020c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020c6:	483d      	ldr	r0, [pc, #244]	@ (80021bc <ILI9341_Draw_Colour_Burst+0x134>)
 80020c8:	f000 fe46 	bl	8002d58 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80020cc:	88fb      	ldrh	r3, [r7, #6]
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 80020d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80020d8:	460b      	mov	r3, r1
 80020da:	3b01      	subs	r3, #1
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	2300      	movs	r3, #0
 80020e0:	4688      	mov	r8, r1
 80020e2:	4699      	mov	r9, r3
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020f8:	2300      	movs	r3, #0
 80020fa:	460c      	mov	r4, r1
 80020fc:	461d      	mov	r5, r3
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	00eb      	lsls	r3, r5, #3
 8002108:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800210c:	00e2      	lsls	r2, r4, #3
 800210e:	1dcb      	adds	r3, r1, #7
 8002110:	08db      	lsrs	r3, r3, #3
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	ebad 0d03 	sub.w	sp, sp, r3
 8002118:	466b      	mov	r3, sp
 800211a:	3300      	adds	r3, #0
 800211c:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800211e:	2300      	movs	r3, #0
 8002120:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002122:	e00e      	b.n	8002142 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002128:	4413      	add	r3, r2
 800212a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800212e:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002132:	3301      	adds	r3, #1
 8002134:	88fa      	ldrh	r2, [r7, #6]
 8002136:	b2d1      	uxtb	r1, r2
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800213c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800213e:	3302      	adds	r3, #2
 8002140:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002142:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002146:	429a      	cmp	r2, r3
 8002148:	d3ec      	bcc.n	8002124 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002154:	fbb2 f3f3 	udiv	r3, r2, r3
 8002158:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800215e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002162:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002164:	fb01 f202 	mul.w	r2, r1, r2
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d010      	beq.n	8002194 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002172:	2300      	movs	r3, #0
 8002174:	627b      	str	r3, [r7, #36]	@ 0x24
 8002176:	e009      	b.n	800218c <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800217a:	b29a      	uxth	r2, r3
 800217c:	230a      	movs	r3, #10
 800217e:	69b9      	ldr	r1, [r7, #24]
 8002180:	480f      	ldr	r0, [pc, #60]	@ (80021c0 <ILI9341_Draw_Colour_Burst+0x138>)
 8002182:	f002 fd40 	bl	8004c06 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002188:	3301      	adds	r3, #1
 800218a:	627b      	str	r3, [r7, #36]	@ 0x24
 800218c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	429a      	cmp	r2, r3
 8002192:	d3f1      	bcc.n	8002178 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	b29a      	uxth	r2, r3
 8002198:	230a      	movs	r3, #10
 800219a:	69b9      	ldr	r1, [r7, #24]
 800219c:	4808      	ldr	r0, [pc, #32]	@ (80021c0 <ILI9341_Draw_Colour_Burst+0x138>)
 800219e:	f002 fd32 	bl	8004c06 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80021a2:	2201      	movs	r2, #1
 80021a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021a8:	4804      	ldr	r0, [pc, #16]	@ (80021bc <ILI9341_Draw_Colour_Burst+0x134>)
 80021aa:	f000 fdd5 	bl	8002d58 <HAL_GPIO_WritePin>
 80021ae:	46b5      	mov	sp, r6
}
 80021b0:	bf00      	nop
 80021b2:	3734      	adds	r7, #52	@ 0x34
 80021b4:	46bd      	mov	sp, r7
 80021b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80021ba:	bf00      	nop
 80021bc:	40020800 	.word	0x40020800
 80021c0:	20000270 	.word	0x20000270

080021c4 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80021ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002208 <ILI9341_Fill_Screen+0x44>)
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	4b0d      	ldr	r3, [pc, #52]	@ (800220c <ILI9341_Fill_Screen+0x48>)
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	b29b      	uxth	r3, r3
 80021da:	2100      	movs	r1, #0
 80021dc:	2000      	movs	r0, #0
 80021de:	f7ff fd7d 	bl	8001cdc <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80021e2:	4b09      	ldr	r3, [pc, #36]	@ (8002208 <ILI9341_Fill_Screen+0x44>)
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b08      	ldr	r3, [pc, #32]	@ (800220c <ILI9341_Fill_Screen+0x48>)
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	fb02 f303 	mul.w	r3, r2, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	4611      	mov	r1, r2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff ff44 	bl	8002088 <ILI9341_Draw_Colour_Burst>
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	2000000e 	.word	0x2000000e
 800220c:	2000000c 	.word	0x2000000c

08002210 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	80fb      	strh	r3, [r7, #6]
 800221a:	460b      	mov	r3, r1
 800221c:	80bb      	strh	r3, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002222:	4b64      	ldr	r3, [pc, #400]	@ (80023b4 <ILI9341_Draw_Pixel+0x1a4>)
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	b29b      	uxth	r3, r3
 8002228:	88fa      	ldrh	r2, [r7, #6]
 800222a:	429a      	cmp	r2, r3
 800222c:	f080 80be 	bcs.w	80023ac <ILI9341_Draw_Pixel+0x19c>
 8002230:	4b61      	ldr	r3, [pc, #388]	@ (80023b8 <ILI9341_Draw_Pixel+0x1a8>)
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	b29b      	uxth	r3, r3
 8002236:	88ba      	ldrh	r2, [r7, #4]
 8002238:	429a      	cmp	r2, r3
 800223a:	f080 80b7 	bcs.w	80023ac <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800223e:	2200      	movs	r2, #0
 8002240:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002244:	485d      	ldr	r0, [pc, #372]	@ (80023bc <ILI9341_Draw_Pixel+0x1ac>)
 8002246:	f000 fd87 	bl	8002d58 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800224a:	2200      	movs	r2, #0
 800224c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002250:	485a      	ldr	r0, [pc, #360]	@ (80023bc <ILI9341_Draw_Pixel+0x1ac>)
 8002252:	f000 fd81 	bl	8002d58 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002256:	202a      	movs	r0, #42	@ 0x2a
 8002258:	f7ff fcea 	bl	8001c30 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800225c:	2201      	movs	r2, #1
 800225e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002262:	4856      	ldr	r0, [pc, #344]	@ (80023bc <ILI9341_Draw_Pixel+0x1ac>)
 8002264:	f000 fd78 	bl	8002d58 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002268:	2201      	movs	r2, #1
 800226a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800226e:	4853      	ldr	r0, [pc, #332]	@ (80023bc <ILI9341_Draw_Pixel+0x1ac>)
 8002270:	f000 fd72 	bl	8002d58 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002274:	2200      	movs	r2, #0
 8002276:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800227a:	4850      	ldr	r0, [pc, #320]	@ (80023bc <ILI9341_Draw_Pixel+0x1ac>)
 800227c:	f000 fd6c 	bl	8002d58 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	b29b      	uxth	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	753b      	strb	r3, [r7, #20]
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	757b      	strb	r3, [r7, #21]
 8002290:	88fb      	ldrh	r3, [r7, #6]
 8002292:	3301      	adds	r3, #1
 8002294:	121b      	asrs	r3, r3, #8
 8002296:	b2db      	uxtb	r3, r3
 8002298:	75bb      	strb	r3, [r7, #22]
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	3301      	adds	r3, #1
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80022a4:	f107 0114 	add.w	r1, r7, #20
 80022a8:	2301      	movs	r3, #1
 80022aa:	2204      	movs	r2, #4
 80022ac:	4844      	ldr	r0, [pc, #272]	@ (80023c0 <ILI9341_Draw_Pixel+0x1b0>)
 80022ae:	f002 fcaa 	bl	8004c06 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80022b2:	2201      	movs	r2, #1
 80022b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022b8:	4840      	ldr	r0, [pc, #256]	@ (80023bc <ILI9341_Draw_Pixel+0x1ac>)
 80022ba:	f000 fd4d 	bl	8002d58 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80022be:	2200      	movs	r2, #0
 80022c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022c4:	483d      	ldr	r0, [pc, #244]	@ (80023bc <ILI9341_Draw_Pixel+0x1ac>)
 80022c6:	f000 fd47 	bl	8002d58 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80022ca:	2200      	movs	r2, #0
 80022cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022d0:	483a      	ldr	r0, [pc, #232]	@ (80023bc <ILI9341_Draw_Pixel+0x1ac>)
 80022d2:	f000 fd41 	bl	8002d58 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80022d6:	202b      	movs	r0, #43	@ 0x2b
 80022d8:	f7ff fcaa 	bl	8001c30 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80022dc:	2201      	movs	r2, #1
 80022de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022e2:	4836      	ldr	r0, [pc, #216]	@ (80023bc <ILI9341_Draw_Pixel+0x1ac>)
 80022e4:	f000 fd38 	bl	8002d58 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80022e8:	2201      	movs	r2, #1
 80022ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022ee:	4833      	ldr	r0, [pc, #204]	@ (80023bc <ILI9341_Draw_Pixel+0x1ac>)
 80022f0:	f000 fd32 	bl	8002d58 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80022f4:	2200      	movs	r2, #0
 80022f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022fa:	4830      	ldr	r0, [pc, #192]	@ (80023bc <ILI9341_Draw_Pixel+0x1ac>)
 80022fc:	f000 fd2c 	bl	8002d58 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002300:	88bb      	ldrh	r3, [r7, #4]
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	b29b      	uxth	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	743b      	strb	r3, [r7, #16]
 800230a:	88bb      	ldrh	r3, [r7, #4]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	747b      	strb	r3, [r7, #17]
 8002310:	88bb      	ldrh	r3, [r7, #4]
 8002312:	3301      	adds	r3, #1
 8002314:	121b      	asrs	r3, r3, #8
 8002316:	b2db      	uxtb	r3, r3
 8002318:	74bb      	strb	r3, [r7, #18]
 800231a:	88bb      	ldrh	r3, [r7, #4]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	3301      	adds	r3, #1
 8002320:	b2db      	uxtb	r3, r3
 8002322:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002324:	f107 0110 	add.w	r1, r7, #16
 8002328:	2301      	movs	r3, #1
 800232a:	2204      	movs	r2, #4
 800232c:	4824      	ldr	r0, [pc, #144]	@ (80023c0 <ILI9341_Draw_Pixel+0x1b0>)
 800232e:	f002 fc6a 	bl	8004c06 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002332:	2201      	movs	r2, #1
 8002334:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002338:	4820      	ldr	r0, [pc, #128]	@ (80023bc <ILI9341_Draw_Pixel+0x1ac>)
 800233a:	f000 fd0d 	bl	8002d58 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800233e:	2200      	movs	r2, #0
 8002340:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002344:	481d      	ldr	r0, [pc, #116]	@ (80023bc <ILI9341_Draw_Pixel+0x1ac>)
 8002346:	f000 fd07 	bl	8002d58 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800234a:	2200      	movs	r2, #0
 800234c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002350:	481a      	ldr	r0, [pc, #104]	@ (80023bc <ILI9341_Draw_Pixel+0x1ac>)
 8002352:	f000 fd01 	bl	8002d58 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002356:	202c      	movs	r0, #44	@ 0x2c
 8002358:	f7ff fc6a 	bl	8001c30 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800235c:	2201      	movs	r2, #1
 800235e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002362:	4816      	ldr	r0, [pc, #88]	@ (80023bc <ILI9341_Draw_Pixel+0x1ac>)
 8002364:	f000 fcf8 	bl	8002d58 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002368:	2201      	movs	r2, #1
 800236a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800236e:	4813      	ldr	r0, [pc, #76]	@ (80023bc <ILI9341_Draw_Pixel+0x1ac>)
 8002370:	f000 fcf2 	bl	8002d58 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002374:	2200      	movs	r2, #0
 8002376:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800237a:	4810      	ldr	r0, [pc, #64]	@ (80023bc <ILI9341_Draw_Pixel+0x1ac>)
 800237c:	f000 fcec 	bl	8002d58 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002380:	887b      	ldrh	r3, [r7, #2]
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	b29b      	uxth	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	733b      	strb	r3, [r7, #12]
 800238a:	887b      	ldrh	r3, [r7, #2]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002390:	f107 010c 	add.w	r1, r7, #12
 8002394:	2301      	movs	r3, #1
 8002396:	2202      	movs	r2, #2
 8002398:	4809      	ldr	r0, [pc, #36]	@ (80023c0 <ILI9341_Draw_Pixel+0x1b0>)
 800239a:	f002 fc34 	bl	8004c06 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800239e:	2201      	movs	r2, #1
 80023a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023a4:	4805      	ldr	r0, [pc, #20]	@ (80023bc <ILI9341_Draw_Pixel+0x1ac>)
 80023a6:	f000 fcd7 	bl	8002d58 <HAL_GPIO_WritePin>
 80023aa:	e000      	b.n	80023ae <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80023ac:	bf00      	nop
	
}
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	2000000e 	.word	0x2000000e
 80023b8:	2000000c 	.word	0x2000000c
 80023bc:	40020800 	.word	0x40020800
 80023c0:	20000270 	.word	0x20000270

080023c4 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 80023c4:	b590      	push	{r4, r7, lr}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4604      	mov	r4, r0
 80023cc:	4608      	mov	r0, r1
 80023ce:	4611      	mov	r1, r2
 80023d0:	461a      	mov	r2, r3
 80023d2:	4623      	mov	r3, r4
 80023d4:	80fb      	strh	r3, [r7, #6]
 80023d6:	4603      	mov	r3, r0
 80023d8:	80bb      	strh	r3, [r7, #4]
 80023da:	460b      	mov	r3, r1
 80023dc:	807b      	strh	r3, [r7, #2]
 80023de:	4613      	mov	r3, r2
 80023e0:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80023e2:	4b24      	ldr	r3, [pc, #144]	@ (8002474 <ILI9341_Draw_Rectangle+0xb0>)
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	88fa      	ldrh	r2, [r7, #6]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d23d      	bcs.n	800246a <ILI9341_Draw_Rectangle+0xa6>
 80023ee:	4b22      	ldr	r3, [pc, #136]	@ (8002478 <ILI9341_Draw_Rectangle+0xb4>)
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	88ba      	ldrh	r2, [r7, #4]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d237      	bcs.n	800246a <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 80023fa:	88fa      	ldrh	r2, [r7, #6]
 80023fc:	887b      	ldrh	r3, [r7, #2]
 80023fe:	4413      	add	r3, r2
 8002400:	4a1c      	ldr	r2, [pc, #112]	@ (8002474 <ILI9341_Draw_Rectangle+0xb0>)
 8002402:	8812      	ldrh	r2, [r2, #0]
 8002404:	b292      	uxth	r2, r2
 8002406:	4293      	cmp	r3, r2
 8002408:	dd05      	ble.n	8002416 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 800240a:	4b1a      	ldr	r3, [pc, #104]	@ (8002474 <ILI9341_Draw_Rectangle+0xb0>)
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	b29a      	uxth	r2, r3
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8002416:	88ba      	ldrh	r2, [r7, #4]
 8002418:	883b      	ldrh	r3, [r7, #0]
 800241a:	4413      	add	r3, r2
 800241c:	4a16      	ldr	r2, [pc, #88]	@ (8002478 <ILI9341_Draw_Rectangle+0xb4>)
 800241e:	8812      	ldrh	r2, [r2, #0]
 8002420:	b292      	uxth	r2, r2
 8002422:	4293      	cmp	r3, r2
 8002424:	dd05      	ble.n	8002432 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8002426:	4b14      	ldr	r3, [pc, #80]	@ (8002478 <ILI9341_Draw_Rectangle+0xb4>)
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	b29a      	uxth	r2, r3
 800242c:	88bb      	ldrh	r3, [r7, #4]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8002432:	88fa      	ldrh	r2, [r7, #6]
 8002434:	887b      	ldrh	r3, [r7, #2]
 8002436:	4413      	add	r3, r2
 8002438:	b29b      	uxth	r3, r3
 800243a:	3b01      	subs	r3, #1
 800243c:	b29c      	uxth	r4, r3
 800243e:	88ba      	ldrh	r2, [r7, #4]
 8002440:	883b      	ldrh	r3, [r7, #0]
 8002442:	4413      	add	r3, r2
 8002444:	b29b      	uxth	r3, r3
 8002446:	3b01      	subs	r3, #1
 8002448:	b29b      	uxth	r3, r3
 800244a:	88b9      	ldrh	r1, [r7, #4]
 800244c:	88f8      	ldrh	r0, [r7, #6]
 800244e:	4622      	mov	r2, r4
 8002450:	f7ff fc44 	bl	8001cdc <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8002454:	883b      	ldrh	r3, [r7, #0]
 8002456:	887a      	ldrh	r2, [r7, #2]
 8002458:	fb02 f303 	mul.w	r3, r2, r3
 800245c:	461a      	mov	r2, r3
 800245e:	8b3b      	ldrh	r3, [r7, #24]
 8002460:	4611      	mov	r1, r2
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fe10 	bl	8002088 <ILI9341_Draw_Colour_Burst>
 8002468:	e000      	b.n	800246c <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800246a:	bf00      	nop
}
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bd90      	pop	{r4, r7, pc}
 8002472:	bf00      	nop
 8002474:	2000000e 	.word	0x2000000e
 8002478:	2000000c 	.word	0x2000000c

0800247c <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8002482:	2310      	movs	r3, #16
 8002484:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 800248a:	e019      	b.n	80024c0 <TP_Read+0x44>
    {
        value <<= 1;
 800248c:	88bb      	ldrh	r3, [r7, #4]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002492:	2201      	movs	r2, #1
 8002494:	2108      	movs	r1, #8
 8002496:	480e      	ldr	r0, [pc, #56]	@ (80024d0 <TP_Read+0x54>)
 8002498:	f000 fc5e 	bl	8002d58 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 800249c:	2200      	movs	r2, #0
 800249e:	2108      	movs	r1, #8
 80024a0:	480b      	ldr	r0, [pc, #44]	@ (80024d0 <TP_Read+0x54>)
 80024a2:	f000 fc59 	bl	8002d58 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 80024a6:	2110      	movs	r1, #16
 80024a8:	4809      	ldr	r0, [pc, #36]	@ (80024d0 <TP_Read+0x54>)
 80024aa:	f000 fc3d 	bl	8002d28 <HAL_GPIO_ReadPin>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <TP_Read+0x3e>
        {
            value++;
 80024b4:	88bb      	ldrh	r3, [r7, #4]
 80024b6:	3301      	adds	r3, #1
 80024b8:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	3b01      	subs	r3, #1
 80024be:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1e2      	bne.n	800248c <TP_Read+0x10>
    };

    return value;
 80024c6:	88bb      	ldrh	r3, [r7, #4]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40021000 	.word	0x40021000

080024d4 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 80024de:	2308      	movs	r3, #8
 80024e0:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 80024e2:	2200      	movs	r2, #0
 80024e4:	2108      	movs	r1, #8
 80024e6:	4815      	ldr	r0, [pc, #84]	@ (800253c <TP_Write+0x68>)
 80024e8:	f000 fc36 	bl	8002d58 <HAL_GPIO_WritePin>
	
    while(i > 0)
 80024ec:	e01e      	b.n	800252c <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	da05      	bge.n	8002502 <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 80024f6:	2201      	movs	r2, #1
 80024f8:	2120      	movs	r1, #32
 80024fa:	4810      	ldr	r0, [pc, #64]	@ (800253c <TP_Write+0x68>)
 80024fc:	f000 fc2c 	bl	8002d58 <HAL_GPIO_WritePin>
 8002500:	e004      	b.n	800250c <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8002502:	2200      	movs	r2, #0
 8002504:	2120      	movs	r1, #32
 8002506:	480d      	ldr	r0, [pc, #52]	@ (800253c <TP_Write+0x68>)
 8002508:	f000 fc26 	bl	8002d58 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002512:	2201      	movs	r2, #1
 8002514:	2108      	movs	r1, #8
 8002516:	4809      	ldr	r0, [pc, #36]	@ (800253c <TP_Write+0x68>)
 8002518:	f000 fc1e 	bl	8002d58 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 800251c:	2200      	movs	r2, #0
 800251e:	2108      	movs	r1, #8
 8002520:	4806      	ldr	r0, [pc, #24]	@ (800253c <TP_Write+0x68>)
 8002522:	f000 fc19 	bl	8002d58 <HAL_GPIO_WritePin>
        i--;
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	3b01      	subs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1dd      	bne.n	80024ee <TP_Write+0x1a>
    };
}
 8002532:	bf00      	nop
 8002534:	bf00      	nop
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000

08002540 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08a      	sub	sp, #40	@ 0x28
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 8002548:	2201      	movs	r2, #1
 800254a:	2108      	movs	r1, #8
 800254c:	485a      	ldr	r0, [pc, #360]	@ (80026b8 <TP_Read_Coordinates+0x178>)
 800254e:	f000 fc03 	bl	8002d58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 8002552:	2201      	movs	r2, #1
 8002554:	2120      	movs	r1, #32
 8002556:	4858      	ldr	r0, [pc, #352]	@ (80026b8 <TP_Read_Coordinates+0x178>)
 8002558:	f000 fbfe 	bl	8002d58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 800255c:	2201      	movs	r2, #1
 800255e:	2140      	movs	r1, #64	@ 0x40
 8002560:	4855      	ldr	r0, [pc, #340]	@ (80026b8 <TP_Read_Coordinates+0x178>)
 8002562:	f000 fbf9 	bl	8002d58 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 8002566:	2300      	movs	r3, #0
 8002568:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 800256a:	2300      	movs	r3, #0
 800256c:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8002572:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002576:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 800257c:	2200      	movs	r2, #0
 800257e:	2140      	movs	r1, #64	@ 0x40
 8002580:	484d      	ldr	r0, [pc, #308]	@ (80026b8 <TP_Read_Coordinates+0x178>)
 8002582:	f000 fbe9 	bl	8002d58 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002586:	e023      	b.n	80025d0 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 8002588:	2090      	movs	r0, #144	@ 0x90
 800258a:	f7ff ffa3 	bl	80024d4 <TP_Write>

				rawy = TP_Read();	
 800258e:	f7ff ff75 	bl	800247c <TP_Read>
 8002592:	4603      	mov	r3, r0
 8002594:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 8002596:	89fb      	ldrh	r3, [r7, #14]
 8002598:	6a3a      	ldr	r2, [r7, #32]
 800259a:	4413      	add	r3, r2
 800259c:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 800259e:	89fb      	ldrh	r3, [r7, #14]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4413      	add	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 80025a6:	20d0      	movs	r0, #208	@ 0xd0
 80025a8:	f7ff ff94 	bl	80024d4 <TP_Write>
        rawx = TP_Read();
 80025ac:	f7ff ff66 	bl	800247c <TP_Read>
 80025b0:	4603      	mov	r3, r0
 80025b2:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 80025b4:	89bb      	ldrh	r3, [r7, #12]
 80025b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025b8:	4413      	add	r3, r2
 80025ba:	627b      	str	r3, [r7, #36]	@ 0x24
				calculating_x += rawx;
 80025bc:	89bb      	ldrh	r3, [r7, #12]
 80025be:	69fa      	ldr	r2, [r7, #28]
 80025c0:	4413      	add	r3, r2
 80025c2:	61fb      	str	r3, [r7, #28]
        samples--;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	617b      	str	r3, [r7, #20]
				counted_samples++;
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	3301      	adds	r3, #1
 80025ce:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d006      	beq.n	80025e4 <TP_Read_Coordinates+0xa4>
 80025d6:	2104      	movs	r1, #4
 80025d8:	4837      	ldr	r0, [pc, #220]	@ (80026b8 <TP_Read_Coordinates+0x178>)
 80025da:	f000 fba5 	bl	8002d28 <HAL_GPIO_ReadPin>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0d1      	beq.n	8002588 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 80025e4:	2201      	movs	r2, #1
 80025e6:	2140      	movs	r1, #64	@ 0x40
 80025e8:	4833      	ldr	r0, [pc, #204]	@ (80026b8 <TP_Read_Coordinates+0x178>)
 80025ea:	f000 fbb5 	bl	8002d58 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025f4:	d14d      	bne.n	8002692 <TP_Read_Coordinates+0x152>
 80025f6:	2104      	movs	r1, #4
 80025f8:	482f      	ldr	r0, [pc, #188]	@ (80026b8 <TP_Read_Coordinates+0x178>)
 80025fa:	f000 fb95 	bl	8002d28 <HAL_GPIO_ReadPin>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d146      	bne.n	8002692 <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 8002604:	69fa      	ldr	r2, [r7, #28]
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	fbb2 f3f3 	udiv	r3, r2, r3
 800260c:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	fbb2 f3f3 	udiv	r3, r2, r3
 8002616:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8002620:	89bb      	ldrh	r3, [r7, #12]
 8002622:	425b      	negs	r3, r3
 8002624:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8002626:	89fb      	ldrh	r3, [r7, #14]
 8002628:	425b      	negs	r3, r3
 800262a:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 800262c:	89ba      	ldrh	r2, [r7, #12]
 800262e:	4b23      	ldr	r3, [pc, #140]	@ (80026bc <TP_Read_Coordinates+0x17c>)
 8002630:	fba3 1302 	umull	r1, r3, r3, r2
 8002634:	1ad2      	subs	r2, r2, r3
 8002636:	0852      	lsrs	r2, r2, #1
 8002638:	4413      	add	r3, r2
 800263a:	0a1b      	lsrs	r3, r3, #8
 800263c:	b29b      	uxth	r3, r3
 800263e:	f1c3 03e3 	rsb	r3, r3, #227	@ 0xe3
 8002642:	ee07 3a90 	vmov	s15, r3
 8002646:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800264a:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 80026b0 <TP_Read_Coordinates+0x170>
 800264e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002652:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002656:	ee17 3a90 	vmov	r3, s15
 800265a:	b29a      	uxth	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8002660:	89fb      	ldrh	r3, [r7, #14]
 8002662:	4a17      	ldr	r2, [pc, #92]	@ (80026c0 <TP_Read_Coordinates+0x180>)
 8002664:	fba2 2303 	umull	r2, r3, r2, r3
 8002668:	09db      	lsrs	r3, r3, #7
 800266a:	b29b      	uxth	r3, r3
 800266c:	3b0f      	subs	r3, #15
 800266e:	ee07 3a90 	vmov	s15, r3
 8002672:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002676:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 80026b0 <TP_Read_Coordinates+0x170>
 800267a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3302      	adds	r3, #2
 8002682:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002686:	ee17 2a90 	vmov	r2, s15
 800268a:	b292      	uxth	r2, r2
 800268c:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 800268e:	2301      	movs	r3, #1
 8002690:	e007      	b.n	80026a2 <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3302      	adds	r3, #2
 800269c:	2200      	movs	r2, #0
 800269e:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 80026a0:	2300      	movs	r3, #0
		}
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3728      	adds	r7, #40	@ 0x28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	f3af 8000 	nop.w
 80026b0:	28f5c28f 	.word	0x28f5c28f
 80026b4:	3ff28f5c 	.word	0x3ff28f5c
 80026b8:	40021000 	.word	0x40021000
 80026bc:	e01e01e1 	.word	0xe01e01e1
 80026c0:	a0a0a0a1 	.word	0xa0a0a0a1

080026c4 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 80026c8:	2104      	movs	r1, #4
 80026ca:	4805      	ldr	r0, [pc, #20]	@ (80026e0 <TP_Touchpad_Pressed+0x1c>)
 80026cc:	f000 fb2c 	bl	8002d28 <HAL_GPIO_ReadPin>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 80026da:	2300      	movs	r3, #0
	}
}
 80026dc:	4618      	mov	r0, r3
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40021000 	.word	0x40021000

080026e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80026e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002718 <HAL_Init+0x34>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002718 <HAL_Init+0x34>)
 80026ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026f2:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026f4:	4b08      	ldr	r3, [pc, #32]	@ (8002718 <HAL_Init+0x34>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a07      	ldr	r2, [pc, #28]	@ (8002718 <HAL_Init+0x34>)
 80026fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002700:	2003      	movs	r0, #3
 8002702:	f000 f931 	bl	8002968 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002706:	2000      	movs	r0, #0
 8002708:	f000 f808 	bl	800271c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800270c:	f7fe fe98 	bl	8001440 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40023c00 	.word	0x40023c00

0800271c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002724:	4b12      	ldr	r3, [pc, #72]	@ (8002770 <HAL_InitTick+0x54>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4b12      	ldr	r3, [pc, #72]	@ (8002774 <HAL_InitTick+0x58>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	4619      	mov	r1, r3
 800272e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002732:	fbb3 f3f1 	udiv	r3, r3, r1
 8002736:	fbb2 f3f3 	udiv	r3, r2, r3
 800273a:	4618      	mov	r0, r3
 800273c:	f000 f93b 	bl	80029b6 <HAL_SYSTICK_Config>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e00e      	b.n	8002768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b0f      	cmp	r3, #15
 800274e:	d80a      	bhi.n	8002766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002750:	2200      	movs	r2, #0
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	f04f 30ff 	mov.w	r0, #4294967295
 8002758:	f000 f911 	bl	800297e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800275c:	4a06      	ldr	r2, [pc, #24]	@ (8002778 <HAL_InitTick+0x5c>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	e000      	b.n	8002768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
}
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000008 	.word	0x20000008
 8002774:	20000014 	.word	0x20000014
 8002778:	20000010 	.word	0x20000010

0800277c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002780:	4b06      	ldr	r3, [pc, #24]	@ (800279c <HAL_IncTick+0x20>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <HAL_IncTick+0x24>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4413      	add	r3, r2
 800278c:	4a04      	ldr	r2, [pc, #16]	@ (80027a0 <HAL_IncTick+0x24>)
 800278e:	6013      	str	r3, [r2, #0]
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20000014 	.word	0x20000014
 80027a0:	200003a8 	.word	0x200003a8

080027a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return uwTick;
 80027a8:	4b03      	ldr	r3, [pc, #12]	@ (80027b8 <HAL_GetTick+0x14>)
 80027aa:	681b      	ldr	r3, [r3, #0]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	200003a8 	.word	0x200003a8

080027bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c4:	f7ff ffee 	bl	80027a4 <HAL_GetTick>
 80027c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d4:	d005      	beq.n	80027e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002800 <HAL_Delay+0x44>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4413      	add	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027e2:	bf00      	nop
 80027e4:	f7ff ffde 	bl	80027a4 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d8f7      	bhi.n	80027e4 <HAL_Delay+0x28>
  {
  }
}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000014 	.word	0x20000014

08002804 <__NVIC_SetPriorityGrouping>:
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002814:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <__NVIC_SetPriorityGrouping+0x40>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002820:	4013      	ands	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800282c:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <__NVIC_SetPriorityGrouping+0x44>)
 800282e:	4313      	orrs	r3, r2
 8002830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002832:	4a04      	ldr	r2, [pc, #16]	@ (8002844 <__NVIC_SetPriorityGrouping+0x40>)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	60d3      	str	r3, [r2, #12]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000ed00 	.word	0xe000ed00
 8002848:	05fa0000 	.word	0x05fa0000

0800284c <__NVIC_GetPriorityGrouping>:
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002850:	4b04      	ldr	r3, [pc, #16]	@ (8002864 <__NVIC_GetPriorityGrouping+0x18>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	0a1b      	lsrs	r3, r3, #8
 8002856:	f003 0307 	and.w	r3, r3, #7
}
 800285a:	4618      	mov	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_SetPriority>:
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	6039      	str	r1, [r7, #0]
 8002872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002878:	2b00      	cmp	r3, #0
 800287a:	db0a      	blt.n	8002892 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	b2da      	uxtb	r2, r3
 8002880:	490c      	ldr	r1, [pc, #48]	@ (80028b4 <__NVIC_SetPriority+0x4c>)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	0112      	lsls	r2, r2, #4
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	440b      	add	r3, r1
 800288c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002890:	e00a      	b.n	80028a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	b2da      	uxtb	r2, r3
 8002896:	4908      	ldr	r1, [pc, #32]	@ (80028b8 <__NVIC_SetPriority+0x50>)
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	3b04      	subs	r3, #4
 80028a0:	0112      	lsls	r2, r2, #4
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	440b      	add	r3, r1
 80028a6:	761a      	strb	r2, [r3, #24]
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000e100 	.word	0xe000e100
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <NVIC_EncodePriority>:
{
 80028bc:	b480      	push	{r7}
 80028be:	b089      	sub	sp, #36	@ 0x24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f1c3 0307 	rsb	r3, r3, #7
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	bf28      	it	cs
 80028da:	2304      	movcs	r3, #4
 80028dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3304      	adds	r3, #4
 80028e2:	2b06      	cmp	r3, #6
 80028e4:	d902      	bls.n	80028ec <NVIC_EncodePriority+0x30>
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3b03      	subs	r3, #3
 80028ea:	e000      	b.n	80028ee <NVIC_EncodePriority+0x32>
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f0:	f04f 32ff 	mov.w	r2, #4294967295
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43da      	mvns	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	401a      	ands	r2, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002904:	f04f 31ff 	mov.w	r1, #4294967295
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	fa01 f303 	lsl.w	r3, r1, r3
 800290e:	43d9      	mvns	r1, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002914:	4313      	orrs	r3, r2
}
 8002916:	4618      	mov	r0, r3
 8002918:	3724      	adds	r7, #36	@ 0x24
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3b01      	subs	r3, #1
 8002930:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002934:	d301      	bcc.n	800293a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002936:	2301      	movs	r3, #1
 8002938:	e00f      	b.n	800295a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800293a:	4a0a      	ldr	r2, [pc, #40]	@ (8002964 <SysTick_Config+0x40>)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3b01      	subs	r3, #1
 8002940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002942:	210f      	movs	r1, #15
 8002944:	f04f 30ff 	mov.w	r0, #4294967295
 8002948:	f7ff ff8e 	bl	8002868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800294c:	4b05      	ldr	r3, [pc, #20]	@ (8002964 <SysTick_Config+0x40>)
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002952:	4b04      	ldr	r3, [pc, #16]	@ (8002964 <SysTick_Config+0x40>)
 8002954:	2207      	movs	r2, #7
 8002956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	e000e010 	.word	0xe000e010

08002968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7ff ff47 	bl	8002804 <__NVIC_SetPriorityGrouping>
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800297e:	b580      	push	{r7, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af00      	add	r7, sp, #0
 8002984:	4603      	mov	r3, r0
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
 800298a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002990:	f7ff ff5c 	bl	800284c <__NVIC_GetPriorityGrouping>
 8002994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	6978      	ldr	r0, [r7, #20]
 800299c:	f7ff ff8e 	bl	80028bc <NVIC_EncodePriority>
 80029a0:	4602      	mov	r2, r0
 80029a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff5d 	bl	8002868 <__NVIC_SetPriority>
}
 80029ae:	bf00      	nop
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff ffb0 	bl	8002924 <SysTick_Config>
 80029c4:	4603      	mov	r3, r0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b089      	sub	sp, #36	@ 0x24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
 80029ee:	e175      	b.n	8002cdc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80029f0:	2201      	movs	r2, #1
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	f040 8164 	bne.w	8002cd6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d00b      	beq.n	8002a2e <HAL_GPIO_Init+0x5e>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d007      	beq.n	8002a2e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a22:	2b11      	cmp	r3, #17
 8002a24:	d003      	beq.n	8002a2e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b12      	cmp	r3, #18
 8002a2c:	d130      	bne.n	8002a90 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	2203      	movs	r2, #3
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a64:	2201      	movs	r2, #1
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f003 0201 	and.w	r2, r3, #1
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x100>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b12      	cmp	r3, #18
 8002ace:	d123      	bne.n	8002b18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	08da      	lsrs	r2, r3, #3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3208      	adds	r2, #8
 8002ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	220f      	movs	r2, #15
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	08da      	lsrs	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3208      	adds	r2, #8
 8002b12:	69b9      	ldr	r1, [r7, #24]
 8002b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	2203      	movs	r2, #3
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 0203 	and.w	r2, r3, #3
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80be 	beq.w	8002cd6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5a:	4b66      	ldr	r3, [pc, #408]	@ (8002cf4 <HAL_GPIO_Init+0x324>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	4a65      	ldr	r2, [pc, #404]	@ (8002cf4 <HAL_GPIO_Init+0x324>)
 8002b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b66:	4b63      	ldr	r3, [pc, #396]	@ (8002cf4 <HAL_GPIO_Init+0x324>)
 8002b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b72:	4a61      	ldr	r2, [pc, #388]	@ (8002cf8 <HAL_GPIO_Init+0x328>)
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	089b      	lsrs	r3, r3, #2
 8002b78:	3302      	adds	r3, #2
 8002b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	220f      	movs	r2, #15
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a58      	ldr	r2, [pc, #352]	@ (8002cfc <HAL_GPIO_Init+0x32c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d037      	beq.n	8002c0e <HAL_GPIO_Init+0x23e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a57      	ldr	r2, [pc, #348]	@ (8002d00 <HAL_GPIO_Init+0x330>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d031      	beq.n	8002c0a <HAL_GPIO_Init+0x23a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a56      	ldr	r2, [pc, #344]	@ (8002d04 <HAL_GPIO_Init+0x334>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d02b      	beq.n	8002c06 <HAL_GPIO_Init+0x236>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a55      	ldr	r2, [pc, #340]	@ (8002d08 <HAL_GPIO_Init+0x338>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d025      	beq.n	8002c02 <HAL_GPIO_Init+0x232>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a54      	ldr	r2, [pc, #336]	@ (8002d0c <HAL_GPIO_Init+0x33c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d01f      	beq.n	8002bfe <HAL_GPIO_Init+0x22e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a53      	ldr	r2, [pc, #332]	@ (8002d10 <HAL_GPIO_Init+0x340>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d019      	beq.n	8002bfa <HAL_GPIO_Init+0x22a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a52      	ldr	r2, [pc, #328]	@ (8002d14 <HAL_GPIO_Init+0x344>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d013      	beq.n	8002bf6 <HAL_GPIO_Init+0x226>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a51      	ldr	r2, [pc, #324]	@ (8002d18 <HAL_GPIO_Init+0x348>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00d      	beq.n	8002bf2 <HAL_GPIO_Init+0x222>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a50      	ldr	r2, [pc, #320]	@ (8002d1c <HAL_GPIO_Init+0x34c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d007      	beq.n	8002bee <HAL_GPIO_Init+0x21e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a4f      	ldr	r2, [pc, #316]	@ (8002d20 <HAL_GPIO_Init+0x350>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d101      	bne.n	8002bea <HAL_GPIO_Init+0x21a>
 8002be6:	2309      	movs	r3, #9
 8002be8:	e012      	b.n	8002c10 <HAL_GPIO_Init+0x240>
 8002bea:	230a      	movs	r3, #10
 8002bec:	e010      	b.n	8002c10 <HAL_GPIO_Init+0x240>
 8002bee:	2308      	movs	r3, #8
 8002bf0:	e00e      	b.n	8002c10 <HAL_GPIO_Init+0x240>
 8002bf2:	2307      	movs	r3, #7
 8002bf4:	e00c      	b.n	8002c10 <HAL_GPIO_Init+0x240>
 8002bf6:	2306      	movs	r3, #6
 8002bf8:	e00a      	b.n	8002c10 <HAL_GPIO_Init+0x240>
 8002bfa:	2305      	movs	r3, #5
 8002bfc:	e008      	b.n	8002c10 <HAL_GPIO_Init+0x240>
 8002bfe:	2304      	movs	r3, #4
 8002c00:	e006      	b.n	8002c10 <HAL_GPIO_Init+0x240>
 8002c02:	2303      	movs	r3, #3
 8002c04:	e004      	b.n	8002c10 <HAL_GPIO_Init+0x240>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e002      	b.n	8002c10 <HAL_GPIO_Init+0x240>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <HAL_GPIO_Init+0x240>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	69fa      	ldr	r2, [r7, #28]
 8002c12:	f002 0203 	and.w	r2, r2, #3
 8002c16:	0092      	lsls	r2, r2, #2
 8002c18:	4093      	lsls	r3, r2
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c20:	4935      	ldr	r1, [pc, #212]	@ (8002cf8 <HAL_GPIO_Init+0x328>)
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	089b      	lsrs	r3, r3, #2
 8002c26:	3302      	adds	r3, #2
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d24 <HAL_GPIO_Init+0x354>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c52:	4a34      	ldr	r2, [pc, #208]	@ (8002d24 <HAL_GPIO_Init+0x354>)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c58:	4b32      	ldr	r3, [pc, #200]	@ (8002d24 <HAL_GPIO_Init+0x354>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c7c:	4a29      	ldr	r2, [pc, #164]	@ (8002d24 <HAL_GPIO_Init+0x354>)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c82:	4b28      	ldr	r3, [pc, #160]	@ (8002d24 <HAL_GPIO_Init+0x354>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8002d24 <HAL_GPIO_Init+0x354>)
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cac:	4b1d      	ldr	r3, [pc, #116]	@ (8002d24 <HAL_GPIO_Init+0x354>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cd0:	4a14      	ldr	r2, [pc, #80]	@ (8002d24 <HAL_GPIO_Init+0x354>)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	61fb      	str	r3, [r7, #28]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b0f      	cmp	r3, #15
 8002ce0:	f67f ae86 	bls.w	80029f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop
 8002ce8:	3724      	adds	r7, #36	@ 0x24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40013800 	.word	0x40013800
 8002cfc:	40020000 	.word	0x40020000
 8002d00:	40020400 	.word	0x40020400
 8002d04:	40020800 	.word	0x40020800
 8002d08:	40020c00 	.word	0x40020c00
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40021400 	.word	0x40021400
 8002d14:	40021800 	.word	0x40021800
 8002d18:	40021c00 	.word	0x40021c00
 8002d1c:	40022000 	.word	0x40022000
 8002d20:	40022400 	.word	0x40022400
 8002d24:	40013c00 	.word	0x40013c00

08002d28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	887b      	ldrh	r3, [r7, #2]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
 8002d44:	e001      	b.n	8002d4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d46:	2300      	movs	r3, #0
 8002d48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	807b      	strh	r3, [r7, #2]
 8002d64:	4613      	mov	r3, r2
 8002d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d68:	787b      	ldrb	r3, [r7, #1]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d74:	e003      	b.n	8002d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d76:	887b      	ldrh	r3, [r7, #2]
 8002d78:	041a      	lsls	r2, r3, #16
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	619a      	str	r2, [r3, #24]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	460b      	mov	r3, r1
 8002d94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d9c:	887a      	ldrh	r2, [r7, #2]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4013      	ands	r3, r2
 8002da2:	041a      	lsls	r2, r3, #16
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	43d9      	mvns	r1, r3
 8002da8:	887b      	ldrh	r3, [r7, #2]
 8002daa:	400b      	ands	r3, r1
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	619a      	str	r2, [r3, #24]
}
 8002db2:	bf00      	nop
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e07f      	b.n	8002ed2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fd fd6c 	bl	80008c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2224      	movs	r2, #36	@ 0x24
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0201 	bic.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d107      	bne.n	8002e3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	e006      	b.n	8002e48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002e46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d104      	bne.n	8002e5a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6859      	ldr	r1, [r3, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4b1d      	ldr	r3, [pc, #116]	@ (8002edc <HAL_I2C_Init+0x11c>)
 8002e66:	430b      	orrs	r3, r1
 8002e68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691a      	ldr	r2, [r3, #16]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	ea42 0103 	orr.w	r1, r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	021a      	lsls	r2, r3, #8
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69d9      	ldr	r1, [r3, #28]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1a      	ldr	r2, [r3, #32]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	02008000 	.word	0x02008000

08002ee0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	607a      	str	r2, [r7, #4]
 8002eea:	461a      	mov	r2, r3
 8002eec:	460b      	mov	r3, r1
 8002eee:	817b      	strh	r3, [r7, #10]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	f040 80da 	bne.w	80030b6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_I2C_Master_Transmit+0x30>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e0d3      	b.n	80030b8 <HAL_I2C_Master_Transmit+0x1d8>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f18:	f7ff fc44 	bl	80027a4 <HAL_GetTick>
 8002f1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	2319      	movs	r3, #25
 8002f24:	2201      	movs	r2, #1
 8002f26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f9e6 	bl	80032fc <I2C_WaitOnFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e0be      	b.n	80030b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2221      	movs	r2, #33	@ 0x21
 8002f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2210      	movs	r2, #16
 8002f46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	893a      	ldrh	r2, [r7, #8]
 8002f5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2bff      	cmp	r3, #255	@ 0xff
 8002f6a:	d90e      	bls.n	8002f8a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	22ff      	movs	r2, #255	@ 0xff
 8002f70:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	8979      	ldrh	r1, [r7, #10]
 8002f7a:	4b51      	ldr	r3, [pc, #324]	@ (80030c0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fb48 	bl	8003618 <I2C_TransferConfig>
 8002f88:	e06c      	b.n	8003064 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	8979      	ldrh	r1, [r7, #10]
 8002f9c:	4b48      	ldr	r3, [pc, #288]	@ (80030c0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 fb37 	bl	8003618 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002faa:	e05b      	b.n	8003064 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	6a39      	ldr	r1, [r7, #32]
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 f9e3 	bl	800337c <I2C_WaitOnTXISFlagUntilTimeout>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e07b      	b.n	80030b8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc4:	781a      	ldrb	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d034      	beq.n	8003064 <HAL_I2C_Master_Transmit+0x184>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d130      	bne.n	8003064 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	2200      	movs	r2, #0
 800300a:	2180      	movs	r1, #128	@ 0x80
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f975 	bl	80032fc <I2C_WaitOnFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e04d      	b.n	80030b8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	2bff      	cmp	r3, #255	@ 0xff
 8003024:	d90e      	bls.n	8003044 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	22ff      	movs	r2, #255	@ 0xff
 800302a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003030:	b2da      	uxtb	r2, r3
 8003032:	8979      	ldrh	r1, [r7, #10]
 8003034:	2300      	movs	r3, #0
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 faeb 	bl	8003618 <I2C_TransferConfig>
 8003042:	e00f      	b.n	8003064 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003052:	b2da      	uxtb	r2, r3
 8003054:	8979      	ldrh	r1, [r7, #10]
 8003056:	2300      	movs	r3, #0
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 fada 	bl	8003618 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d19e      	bne.n	8002fac <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	6a39      	ldr	r1, [r7, #32]
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 f9c2 	bl	80033fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e01a      	b.n	80030b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2220      	movs	r2, #32
 8003088:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6859      	ldr	r1, [r3, #4]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4b0b      	ldr	r3, [pc, #44]	@ (80030c4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003096:	400b      	ands	r3, r1
 8003098:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e000      	b.n	80030b8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
  }
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	80002000 	.word	0x80002000
 80030c4:	fe00e800 	.word	0xfe00e800

080030c8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	607a      	str	r2, [r7, #4]
 80030d2:	461a      	mov	r2, r3
 80030d4:	460b      	mov	r3, r1
 80030d6:	817b      	strh	r3, [r7, #10]
 80030d8:	4613      	mov	r3, r2
 80030da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	f040 80db 	bne.w	80032a0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_I2C_Master_Receive+0x30>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e0d4      	b.n	80032a2 <HAL_I2C_Master_Receive+0x1da>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003100:	f7ff fb50 	bl	80027a4 <HAL_GetTick>
 8003104:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	2319      	movs	r3, #25
 800310c:	2201      	movs	r2, #1
 800310e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f8f2 	bl	80032fc <I2C_WaitOnFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e0bf      	b.n	80032a2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2222      	movs	r2, #34	@ 0x22
 8003126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2210      	movs	r2, #16
 800312e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	893a      	ldrh	r2, [r7, #8]
 8003142:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314e:	b29b      	uxth	r3, r3
 8003150:	2bff      	cmp	r3, #255	@ 0xff
 8003152:	d90e      	bls.n	8003172 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	22ff      	movs	r2, #255	@ 0xff
 8003158:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800315e:	b2da      	uxtb	r2, r3
 8003160:	8979      	ldrh	r1, [r7, #10]
 8003162:	4b52      	ldr	r3, [pc, #328]	@ (80032ac <HAL_I2C_Master_Receive+0x1e4>)
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 fa54 	bl	8003618 <I2C_TransferConfig>
 8003170:	e06d      	b.n	800324e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003180:	b2da      	uxtb	r2, r3
 8003182:	8979      	ldrh	r1, [r7, #10]
 8003184:	4b49      	ldr	r3, [pc, #292]	@ (80032ac <HAL_I2C_Master_Receive+0x1e4>)
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 fa43 	bl	8003618 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003192:	e05c      	b.n	800324e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	6a39      	ldr	r1, [r7, #32]
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f96b 	bl	8003474 <I2C_WaitOnRXNEFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e07c      	b.n	80032a2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d034      	beq.n	800324e <HAL_I2C_Master_Receive+0x186>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d130      	bne.n	800324e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	2200      	movs	r2, #0
 80031f4:	2180      	movs	r1, #128	@ 0x80
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f880 	bl	80032fc <I2C_WaitOnFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e04d      	b.n	80032a2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320a:	b29b      	uxth	r3, r3
 800320c:	2bff      	cmp	r3, #255	@ 0xff
 800320e:	d90e      	bls.n	800322e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	22ff      	movs	r2, #255	@ 0xff
 8003214:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800321a:	b2da      	uxtb	r2, r3
 800321c:	8979      	ldrh	r1, [r7, #10]
 800321e:	2300      	movs	r3, #0
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f9f6 	bl	8003618 <I2C_TransferConfig>
 800322c:	e00f      	b.n	800324e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323c:	b2da      	uxtb	r2, r3
 800323e:	8979      	ldrh	r1, [r7, #10]
 8003240:	2300      	movs	r3, #0
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 f9e5 	bl	8003618 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d19d      	bne.n	8003194 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	6a39      	ldr	r1, [r7, #32]
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f8cd 	bl	80033fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e01a      	b.n	80032a2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2220      	movs	r2, #32
 8003272:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6859      	ldr	r1, [r3, #4]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4b0c      	ldr	r3, [pc, #48]	@ (80032b0 <HAL_I2C_Master_Receive+0x1e8>)
 8003280:	400b      	ands	r3, r1
 8003282:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	e000      	b.n	80032a2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80032a0:	2302      	movs	r3, #2
  }
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	80002400 	.word	0x80002400
 80032b0:	fe00e800 	.word	0xfe00e800

080032b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d103      	bne.n	80032d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2200      	movs	r2, #0
 80032d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d007      	beq.n	80032f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	619a      	str	r2, [r3, #24]
  }
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	603b      	str	r3, [r7, #0]
 8003308:	4613      	mov	r3, r2
 800330a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800330c:	e022      	b.n	8003354 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003314:	d01e      	beq.n	8003354 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003316:	f7ff fa45 	bl	80027a4 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d302      	bcc.n	800332c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d113      	bne.n	8003354 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003330:	f043 0220 	orr.w	r2, r3, #32
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e00f      	b.n	8003374 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699a      	ldr	r2, [r3, #24]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	4013      	ands	r3, r2
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	429a      	cmp	r2, r3
 8003362:	bf0c      	ite	eq
 8003364:	2301      	moveq	r3, #1
 8003366:	2300      	movne	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	461a      	mov	r2, r3
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	429a      	cmp	r2, r3
 8003370:	d0cd      	beq.n	800330e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003388:	e02c      	b.n	80033e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	68b9      	ldr	r1, [r7, #8]
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f8dc 	bl	800354c <I2C_IsAcknowledgeFailed>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e02a      	b.n	80033f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a4:	d01e      	beq.n	80033e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a6:	f7ff f9fd 	bl	80027a4 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d302      	bcc.n	80033bc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d113      	bne.n	80033e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e007      	b.n	80033f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d1cb      	bne.n	800338a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003408:	e028      	b.n	800345c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	68b9      	ldr	r1, [r7, #8]
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f89c 	bl	800354c <I2C_IsAcknowledgeFailed>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e026      	b.n	800346c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800341e:	f7ff f9c1 	bl	80027a4 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	429a      	cmp	r2, r3
 800342c:	d302      	bcc.n	8003434 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d113      	bne.n	800345c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003438:	f043 0220 	orr.w	r2, r3, #32
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e007      	b.n	800346c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b20      	cmp	r3, #32
 8003468:	d1cf      	bne.n	800340a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003480:	e055      	b.n	800352e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	68b9      	ldr	r1, [r7, #8]
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f860 	bl	800354c <I2C_IsAcknowledgeFailed>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e053      	b.n	800353e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	f003 0320 	and.w	r3, r3, #32
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d129      	bne.n	80034f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d105      	bne.n	80034be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e03f      	b.n	800353e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2220      	movs	r2, #32
 80034c4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003548 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80034d2:	400b      	ands	r3, r1
 80034d4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e022      	b.n	800353e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f8:	f7ff f954 	bl	80027a4 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	429a      	cmp	r2, r3
 8003506:	d302      	bcc.n	800350e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10f      	bne.n	800352e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003512:	f043 0220 	orr.w	r2, r3, #32
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2220      	movs	r2, #32
 800351e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e007      	b.n	800353e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b04      	cmp	r3, #4
 800353a:	d1a2      	bne.n	8003482 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	fe00e800 	.word	0xfe00e800

0800354c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2b10      	cmp	r3, #16
 8003564:	d151      	bne.n	800360a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003566:	e022      	b.n	80035ae <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356e:	d01e      	beq.n	80035ae <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003570:	f7ff f918 	bl	80027a4 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	429a      	cmp	r2, r3
 800357e:	d302      	bcc.n	8003586 <I2C_IsAcknowledgeFailed+0x3a>
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d113      	bne.n	80035ae <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358a:	f043 0220 	orr.w	r2, r3, #32
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e02e      	b.n	800360c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	f003 0320 	and.w	r3, r3, #32
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d1d5      	bne.n	8003568 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2210      	movs	r2, #16
 80035c2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2220      	movs	r2, #32
 80035ca:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f7ff fe71 	bl	80032b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6859      	ldr	r1, [r3, #4]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003614 <I2C_IsAcknowledgeFailed+0xc8>)
 80035de:	400b      	ands	r3, r1
 80035e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e6:	f043 0204 	orr.w	r2, r3, #4
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	fe00e800 	.word	0xfe00e800

08003618 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	607b      	str	r3, [r7, #4]
 8003622:	460b      	mov	r3, r1
 8003624:	817b      	strh	r3, [r7, #10]
 8003626:	4613      	mov	r3, r2
 8003628:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	0d5b      	lsrs	r3, r3, #21
 8003634:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003638:	4b0d      	ldr	r3, [pc, #52]	@ (8003670 <I2C_TransferConfig+0x58>)
 800363a:	430b      	orrs	r3, r1
 800363c:	43db      	mvns	r3, r3
 800363e:	ea02 0103 	and.w	r1, r2, r3
 8003642:	897b      	ldrh	r3, [r7, #10]
 8003644:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003648:	7a7b      	ldrb	r3, [r7, #9]
 800364a:	041b      	lsls	r3, r3, #16
 800364c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	431a      	orrs	r2, r3
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	431a      	orrs	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003662:	bf00      	nop
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	03ff63ff 	.word	0x03ff63ff

08003674 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b20      	cmp	r3, #32
 8003688:	d138      	bne.n	80036fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003694:	2302      	movs	r3, #2
 8003696:	e032      	b.n	80036fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2224      	movs	r2, #36	@ 0x24
 80036a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0201 	bic.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6819      	ldr	r1, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	e000      	b.n	80036fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036fc:	2302      	movs	r3, #2
  }
}
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800370a:	b480      	push	{r7}
 800370c:	b085      	sub	sp, #20
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b20      	cmp	r3, #32
 800371e:	d139      	bne.n	8003794 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800372a:	2302      	movs	r3, #2
 800372c:	e033      	b.n	8003796 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2224      	movs	r2, #36	@ 0x24
 800373a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0201 	bic.w	r2, r2, #1
 800374c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800375c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	e000      	b.n	8003796 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003794:	2302      	movs	r3, #2
  }
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
	...

080037a4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037a8:	4b05      	ldr	r3, [pc, #20]	@ (80037c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a04      	ldr	r2, [pc, #16]	@ (80037c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037b2:	6013      	str	r3, [r2, #0]
}
 80037b4:	bf00      	nop
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40007000 	.word	0x40007000

080037c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80037ca:	2300      	movs	r3, #0
 80037cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80037ce:	4b23      	ldr	r3, [pc, #140]	@ (800385c <HAL_PWREx_EnableOverDrive+0x98>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	4a22      	ldr	r2, [pc, #136]	@ (800385c <HAL_PWREx_EnableOverDrive+0x98>)
 80037d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80037da:	4b20      	ldr	r3, [pc, #128]	@ (800385c <HAL_PWREx_EnableOverDrive+0x98>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80037e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003860 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003860 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037f2:	f7fe ffd7 	bl	80027a4 <HAL_GetTick>
 80037f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037f8:	e009      	b.n	800380e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037fa:	f7fe ffd3 	bl	80027a4 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003808:	d901      	bls.n	800380e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e022      	b.n	8003854 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800380e:	4b14      	ldr	r3, [pc, #80]	@ (8003860 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003816:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800381a:	d1ee      	bne.n	80037fa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800381c:	4b10      	ldr	r3, [pc, #64]	@ (8003860 <HAL_PWREx_EnableOverDrive+0x9c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a0f      	ldr	r2, [pc, #60]	@ (8003860 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003822:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003826:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003828:	f7fe ffbc 	bl	80027a4 <HAL_GetTick>
 800382c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800382e:	e009      	b.n	8003844 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003830:	f7fe ffb8 	bl	80027a4 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800383e:	d901      	bls.n	8003844 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e007      	b.n	8003854 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003844:	4b06      	ldr	r3, [pc, #24]	@ (8003860 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003850:	d1ee      	bne.n	8003830 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40023800 	.word	0x40023800
 8003860:	40007000 	.word	0x40007000

08003864 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800386c:	2300      	movs	r3, #0
 800386e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e29b      	b.n	8003db2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 8087 	beq.w	8003996 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003888:	4b96      	ldr	r3, [pc, #600]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b04      	cmp	r3, #4
 8003892:	d00c      	beq.n	80038ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003894:	4b93      	ldr	r3, [pc, #588]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 030c 	and.w	r3, r3, #12
 800389c:	2b08      	cmp	r3, #8
 800389e:	d112      	bne.n	80038c6 <HAL_RCC_OscConfig+0x62>
 80038a0:	4b90      	ldr	r3, [pc, #576]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038ac:	d10b      	bne.n	80038c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ae:	4b8d      	ldr	r3, [pc, #564]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d06c      	beq.n	8003994 <HAL_RCC_OscConfig+0x130>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d168      	bne.n	8003994 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e275      	b.n	8003db2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ce:	d106      	bne.n	80038de <HAL_RCC_OscConfig+0x7a>
 80038d0:	4b84      	ldr	r3, [pc, #528]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a83      	ldr	r2, [pc, #524]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80038d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	e02e      	b.n	800393c <HAL_RCC_OscConfig+0xd8>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10c      	bne.n	8003900 <HAL_RCC_OscConfig+0x9c>
 80038e6:	4b7f      	ldr	r3, [pc, #508]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a7e      	ldr	r2, [pc, #504]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80038ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	4b7c      	ldr	r3, [pc, #496]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a7b      	ldr	r2, [pc, #492]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80038f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e01d      	b.n	800393c <HAL_RCC_OscConfig+0xd8>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003908:	d10c      	bne.n	8003924 <HAL_RCC_OscConfig+0xc0>
 800390a:	4b76      	ldr	r3, [pc, #472]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a75      	ldr	r2, [pc, #468]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003910:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	4b73      	ldr	r3, [pc, #460]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a72      	ldr	r2, [pc, #456]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 800391c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e00b      	b.n	800393c <HAL_RCC_OscConfig+0xd8>
 8003924:	4b6f      	ldr	r3, [pc, #444]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a6e      	ldr	r2, [pc, #440]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 800392a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	4b6c      	ldr	r3, [pc, #432]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a6b      	ldr	r2, [pc, #428]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003936:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800393a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d013      	beq.n	800396c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fe ff2e 	bl	80027a4 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800394c:	f7fe ff2a 	bl	80027a4 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	@ 0x64
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e229      	b.n	8003db2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	4b61      	ldr	r3, [pc, #388]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCC_OscConfig+0xe8>
 800396a:	e014      	b.n	8003996 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396c:	f7fe ff1a 	bl	80027a4 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003974:	f7fe ff16 	bl	80027a4 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	@ 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e215      	b.n	8003db2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003986:	4b57      	ldr	r3, [pc, #348]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x110>
 8003992:	e000      	b.n	8003996 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d069      	beq.n	8003a76 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039a2:	4b50      	ldr	r3, [pc, #320]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00b      	beq.n	80039c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ae:	4b4d      	ldr	r3, [pc, #308]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d11c      	bne.n	80039f4 <HAL_RCC_OscConfig+0x190>
 80039ba:	4b4a      	ldr	r3, [pc, #296]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d116      	bne.n	80039f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c6:	4b47      	ldr	r3, [pc, #284]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_RCC_OscConfig+0x17a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d001      	beq.n	80039de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e1e9      	b.n	8003db2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039de:	4b41      	ldr	r3, [pc, #260]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	493d      	ldr	r1, [pc, #244]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039f2:	e040      	b.n	8003a76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d023      	beq.n	8003a44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039fc:	4b39      	ldr	r3, [pc, #228]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a38      	ldr	r2, [pc, #224]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fe fecc 	bl	80027a4 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a10:	f7fe fec8 	bl	80027a4 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e1c7      	b.n	8003db2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a22:	4b30      	ldr	r3, [pc, #192]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2e:	4b2d      	ldr	r3, [pc, #180]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4929      	ldr	r1, [pc, #164]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	600b      	str	r3, [r1, #0]
 8003a42:	e018      	b.n	8003a76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a44:	4b27      	ldr	r3, [pc, #156]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a26      	ldr	r2, [pc, #152]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003a4a:	f023 0301 	bic.w	r3, r3, #1
 8003a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a50:	f7fe fea8 	bl	80027a4 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a58:	f7fe fea4 	bl	80027a4 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e1a3      	b.n	8003db2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d038      	beq.n	8003af4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d019      	beq.n	8003abe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a8a:	4b16      	ldr	r3, [pc, #88]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a8e:	4a15      	ldr	r2, [pc, #84]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a96:	f7fe fe85 	bl	80027a4 <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a9e:	f7fe fe81 	bl	80027a4 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e180      	b.n	8003db2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003ab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0f0      	beq.n	8003a9e <HAL_RCC_OscConfig+0x23a>
 8003abc:	e01a      	b.n	8003af4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003abe:	4b09      	ldr	r3, [pc, #36]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac2:	4a08      	ldr	r2, [pc, #32]	@ (8003ae4 <HAL_RCC_OscConfig+0x280>)
 8003ac4:	f023 0301 	bic.w	r3, r3, #1
 8003ac8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aca:	f7fe fe6b 	bl	80027a4 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad0:	e00a      	b.n	8003ae8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad2:	f7fe fe67 	bl	80027a4 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d903      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e166      	b.n	8003db2 <HAL_RCC_OscConfig+0x54e>
 8003ae4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae8:	4b92      	ldr	r3, [pc, #584]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003aea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1ee      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 80a4 	beq.w	8003c4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b02:	4b8c      	ldr	r3, [pc, #560]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10d      	bne.n	8003b2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b0e:	4b89      	ldr	r3, [pc, #548]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	4a88      	ldr	r2, [pc, #544]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b1a:	4b86      	ldr	r3, [pc, #536]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b22:	60bb      	str	r3, [r7, #8]
 8003b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b26:	2301      	movs	r3, #1
 8003b28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b2a:	4b83      	ldr	r3, [pc, #524]	@ (8003d38 <HAL_RCC_OscConfig+0x4d4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d118      	bne.n	8003b68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003b36:	4b80      	ldr	r3, [pc, #512]	@ (8003d38 <HAL_RCC_OscConfig+0x4d4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a7f      	ldr	r2, [pc, #508]	@ (8003d38 <HAL_RCC_OscConfig+0x4d4>)
 8003b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b42:	f7fe fe2f 	bl	80027a4 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b4a:	f7fe fe2b 	bl	80027a4 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b64      	cmp	r3, #100	@ 0x64
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e12a      	b.n	8003db2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b5c:	4b76      	ldr	r3, [pc, #472]	@ (8003d38 <HAL_RCC_OscConfig+0x4d4>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d106      	bne.n	8003b7e <HAL_RCC_OscConfig+0x31a>
 8003b70:	4b70      	ldr	r3, [pc, #448]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b74:	4a6f      	ldr	r2, [pc, #444]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003b76:	f043 0301 	orr.w	r3, r3, #1
 8003b7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b7c:	e02d      	b.n	8003bda <HAL_RCC_OscConfig+0x376>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10c      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x33c>
 8003b86:	4b6b      	ldr	r3, [pc, #428]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8a:	4a6a      	ldr	r2, [pc, #424]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b92:	4b68      	ldr	r3, [pc, #416]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b96:	4a67      	ldr	r2, [pc, #412]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003b98:	f023 0304 	bic.w	r3, r3, #4
 8003b9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b9e:	e01c      	b.n	8003bda <HAL_RCC_OscConfig+0x376>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b05      	cmp	r3, #5
 8003ba6:	d10c      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x35e>
 8003ba8:	4b62      	ldr	r3, [pc, #392]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bac:	4a61      	ldr	r2, [pc, #388]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003bae:	f043 0304 	orr.w	r3, r3, #4
 8003bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb4:	4b5f      	ldr	r3, [pc, #380]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb8:	4a5e      	ldr	r2, [pc, #376]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bc0:	e00b      	b.n	8003bda <HAL_RCC_OscConfig+0x376>
 8003bc2:	4b5c      	ldr	r3, [pc, #368]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc6:	4a5b      	ldr	r2, [pc, #364]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bce:	4b59      	ldr	r3, [pc, #356]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd2:	4a58      	ldr	r2, [pc, #352]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003bd4:	f023 0304 	bic.w	r3, r3, #4
 8003bd8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d015      	beq.n	8003c0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be2:	f7fe fddf 	bl	80027a4 <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be8:	e00a      	b.n	8003c00 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bea:	f7fe fddb 	bl	80027a4 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e0d8      	b.n	8003db2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c00:	4b4c      	ldr	r3, [pc, #304]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0ee      	beq.n	8003bea <HAL_RCC_OscConfig+0x386>
 8003c0c:	e014      	b.n	8003c38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0e:	f7fe fdc9 	bl	80027a4 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c14:	e00a      	b.n	8003c2c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c16:	f7fe fdc5 	bl	80027a4 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e0c2      	b.n	8003db2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c2c:	4b41      	ldr	r3, [pc, #260]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1ee      	bne.n	8003c16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c38:	7dfb      	ldrb	r3, [r7, #23]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d105      	bne.n	8003c4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	4a3c      	ldr	r2, [pc, #240]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003c44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c48:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 80ae 	beq.w	8003db0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c54:	4b37      	ldr	r3, [pc, #220]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d06d      	beq.n	8003d3c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d14b      	bne.n	8003d00 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c68:	4b32      	ldr	r3, [pc, #200]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a31      	ldr	r2, [pc, #196]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003c6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fe fd96 	bl	80027a4 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7c:	f7fe fd92 	bl	80027a4 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e091      	b.n	8003db2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8e:	4b29      	ldr	r3, [pc, #164]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69da      	ldr	r2, [r3, #28]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca8:	019b      	lsls	r3, r3, #6
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb0:	085b      	lsrs	r3, r3, #1
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	041b      	lsls	r3, r3, #16
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbc:	061b      	lsls	r3, r3, #24
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc4:	071b      	lsls	r3, r3, #28
 8003cc6:	491b      	ldr	r1, [pc, #108]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ccc:	4b19      	ldr	r3, [pc, #100]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a18      	ldr	r2, [pc, #96]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003cd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd8:	f7fe fd64 	bl	80027a4 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce0:	f7fe fd60 	bl	80027a4 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e05f      	b.n	8003db2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf2:	4b10      	ldr	r3, [pc, #64]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x47c>
 8003cfe:	e057      	b.n	8003db0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d00:	4b0c      	ldr	r3, [pc, #48]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a0b      	ldr	r2, [pc, #44]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003d06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7fe fd4a 	bl	80027a4 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d14:	f7fe fd46 	bl	80027a4 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e045      	b.n	8003db2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d26:	4b03      	ldr	r3, [pc, #12]	@ (8003d34 <HAL_RCC_OscConfig+0x4d0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x4b0>
 8003d32:	e03d      	b.n	8003db0 <HAL_RCC_OscConfig+0x54c>
 8003d34:	40023800 	.word	0x40023800
 8003d38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8003dbc <HAL_RCC_OscConfig+0x558>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d030      	beq.n	8003dac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d129      	bne.n	8003dac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d122      	bne.n	8003dac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d119      	bne.n	8003dac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d82:	085b      	lsrs	r3, r3, #1
 8003d84:	3b01      	subs	r3, #1
 8003d86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d10f      	bne.n	8003dac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d107      	bne.n	8003dac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d001      	beq.n	8003db0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e000      	b.n	8003db2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40023800 	.word	0x40023800

08003dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0d0      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd8:	4b6a      	ldr	r3, [pc, #424]	@ (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d910      	bls.n	8003e08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de6:	4b67      	ldr	r3, [pc, #412]	@ (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f023 020f 	bic.w	r2, r3, #15
 8003dee:	4965      	ldr	r1, [pc, #404]	@ (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df6:	4b63      	ldr	r3, [pc, #396]	@ (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d001      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0b8      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d020      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e20:	4b59      	ldr	r3, [pc, #356]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c8>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	4a58      	ldr	r2, [pc, #352]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c8>)
 8003e26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e38:	4b53      	ldr	r3, [pc, #332]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	4a52      	ldr	r2, [pc, #328]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e44:	4b50      	ldr	r3, [pc, #320]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c8>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	494d      	ldr	r1, [pc, #308]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c8>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d040      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d107      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6a:	4b47      	ldr	r3, [pc, #284]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d115      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e07f      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d107      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e82:	4b41      	ldr	r3, [pc, #260]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d109      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e073      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e92:	4b3d      	ldr	r3, [pc, #244]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e06b      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ea2:	4b39      	ldr	r3, [pc, #228]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f023 0203 	bic.w	r2, r3, #3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	4936      	ldr	r1, [pc, #216]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb4:	f7fe fc76 	bl	80027a4 <HAL_GetTick>
 8003eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eba:	e00a      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ebc:	f7fe fc72 	bl	80027a4 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e053      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 020c 	and.w	r2, r3, #12
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d1eb      	bne.n	8003ebc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ee4:	4b27      	ldr	r3, [pc, #156]	@ (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d210      	bcs.n	8003f14 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef2:	4b24      	ldr	r3, [pc, #144]	@ (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f023 020f 	bic.w	r2, r3, #15
 8003efa:	4922      	ldr	r1, [pc, #136]	@ (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f02:	4b20      	ldr	r3, [pc, #128]	@ (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e032      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f20:	4b19      	ldr	r3, [pc, #100]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c8>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4916      	ldr	r1, [pc, #88]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c8>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d009      	beq.n	8003f52 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f3e:	4b12      	ldr	r3, [pc, #72]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c8>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	490e      	ldr	r1, [pc, #56]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c8>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f52:	f000 f821 	bl	8003f98 <HAL_RCC_GetSysClockFreq>
 8003f56:	4602      	mov	r2, r0
 8003f58:	4b0b      	ldr	r3, [pc, #44]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	490a      	ldr	r1, [pc, #40]	@ (8003f8c <HAL_RCC_ClockConfig+0x1cc>)
 8003f64:	5ccb      	ldrb	r3, [r1, r3]
 8003f66:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6a:	4a09      	ldr	r2, [pc, #36]	@ (8003f90 <HAL_RCC_ClockConfig+0x1d0>)
 8003f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f6e:	4b09      	ldr	r3, [pc, #36]	@ (8003f94 <HAL_RCC_ClockConfig+0x1d4>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fe fbd2 	bl	800271c <HAL_InitTick>

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40023c00 	.word	0x40023c00
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	08008ce0 	.word	0x08008ce0
 8003f90:	20000008 	.word	0x20000008
 8003f94:	20000010 	.word	0x20000010

08003f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f9c:	b094      	sub	sp, #80	@ 0x50
 8003f9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fa8:	2300      	movs	r3, #0
 8003faa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fb0:	4b79      	ldr	r3, [pc, #484]	@ (8004198 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f003 030c 	and.w	r3, r3, #12
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d00d      	beq.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x40>
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	f200 80e1 	bhi.w	8004184 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <HAL_RCC_GetSysClockFreq+0x34>
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d003      	beq.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fca:	e0db      	b.n	8004184 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fcc:	4b73      	ldr	r3, [pc, #460]	@ (800419c <HAL_RCC_GetSysClockFreq+0x204>)
 8003fce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fd0:	e0db      	b.n	800418a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fd2:	4b73      	ldr	r3, [pc, #460]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fd6:	e0d8      	b.n	800418a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fd8:	4b6f      	ldr	r3, [pc, #444]	@ (8004198 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fe0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003fe2:	4b6d      	ldr	r3, [pc, #436]	@ (8004198 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d063      	beq.n	80040b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fee:	4b6a      	ldr	r3, [pc, #424]	@ (8004198 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	099b      	lsrs	r3, r3, #6
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ff8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004000:	633b      	str	r3, [r7, #48]	@ 0x30
 8004002:	2300      	movs	r3, #0
 8004004:	637b      	str	r3, [r7, #52]	@ 0x34
 8004006:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800400a:	4622      	mov	r2, r4
 800400c:	462b      	mov	r3, r5
 800400e:	f04f 0000 	mov.w	r0, #0
 8004012:	f04f 0100 	mov.w	r1, #0
 8004016:	0159      	lsls	r1, r3, #5
 8004018:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800401c:	0150      	lsls	r0, r2, #5
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	4621      	mov	r1, r4
 8004024:	1a51      	subs	r1, r2, r1
 8004026:	6139      	str	r1, [r7, #16]
 8004028:	4629      	mov	r1, r5
 800402a:	eb63 0301 	sbc.w	r3, r3, r1
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800403c:	4659      	mov	r1, fp
 800403e:	018b      	lsls	r3, r1, #6
 8004040:	4651      	mov	r1, sl
 8004042:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004046:	4651      	mov	r1, sl
 8004048:	018a      	lsls	r2, r1, #6
 800404a:	4651      	mov	r1, sl
 800404c:	ebb2 0801 	subs.w	r8, r2, r1
 8004050:	4659      	mov	r1, fp
 8004052:	eb63 0901 	sbc.w	r9, r3, r1
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004062:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004066:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800406a:	4690      	mov	r8, r2
 800406c:	4699      	mov	r9, r3
 800406e:	4623      	mov	r3, r4
 8004070:	eb18 0303 	adds.w	r3, r8, r3
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	462b      	mov	r3, r5
 8004078:	eb49 0303 	adc.w	r3, r9, r3
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800408a:	4629      	mov	r1, r5
 800408c:	024b      	lsls	r3, r1, #9
 800408e:	4621      	mov	r1, r4
 8004090:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004094:	4621      	mov	r1, r4
 8004096:	024a      	lsls	r2, r1, #9
 8004098:	4610      	mov	r0, r2
 800409a:	4619      	mov	r1, r3
 800409c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800409e:	2200      	movs	r2, #0
 80040a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040a8:	f7fc f922 	bl	80002f0 <__aeabi_uldivmod>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4613      	mov	r3, r2
 80040b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040b4:	e058      	b.n	8004168 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b6:	4b38      	ldr	r3, [pc, #224]	@ (8004198 <HAL_RCC_GetSysClockFreq+0x200>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	099b      	lsrs	r3, r3, #6
 80040bc:	2200      	movs	r2, #0
 80040be:	4618      	mov	r0, r3
 80040c0:	4611      	mov	r1, r2
 80040c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040c6:	623b      	str	r3, [r7, #32]
 80040c8:	2300      	movs	r3, #0
 80040ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80040cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040d0:	4642      	mov	r2, r8
 80040d2:	464b      	mov	r3, r9
 80040d4:	f04f 0000 	mov.w	r0, #0
 80040d8:	f04f 0100 	mov.w	r1, #0
 80040dc:	0159      	lsls	r1, r3, #5
 80040de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040e2:	0150      	lsls	r0, r2, #5
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4641      	mov	r1, r8
 80040ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80040ee:	4649      	mov	r1, r9
 80040f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004100:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004104:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004108:	ebb2 040a 	subs.w	r4, r2, sl
 800410c:	eb63 050b 	sbc.w	r5, r3, fp
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	00eb      	lsls	r3, r5, #3
 800411a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800411e:	00e2      	lsls	r2, r4, #3
 8004120:	4614      	mov	r4, r2
 8004122:	461d      	mov	r5, r3
 8004124:	4643      	mov	r3, r8
 8004126:	18e3      	adds	r3, r4, r3
 8004128:	603b      	str	r3, [r7, #0]
 800412a:	464b      	mov	r3, r9
 800412c:	eb45 0303 	adc.w	r3, r5, r3
 8004130:	607b      	str	r3, [r7, #4]
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800413e:	4629      	mov	r1, r5
 8004140:	028b      	lsls	r3, r1, #10
 8004142:	4621      	mov	r1, r4
 8004144:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004148:	4621      	mov	r1, r4
 800414a:	028a      	lsls	r2, r1, #10
 800414c:	4610      	mov	r0, r2
 800414e:	4619      	mov	r1, r3
 8004150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004152:	2200      	movs	r2, #0
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	61fa      	str	r2, [r7, #28]
 8004158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800415c:	f7fc f8c8 	bl	80002f0 <__aeabi_uldivmod>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	4613      	mov	r3, r2
 8004166:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004168:	4b0b      	ldr	r3, [pc, #44]	@ (8004198 <HAL_RCC_GetSysClockFreq+0x200>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	0c1b      	lsrs	r3, r3, #16
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	3301      	adds	r3, #1
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004178:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800417a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800417c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004180:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004182:	e002      	b.n	800418a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004184:	4b05      	ldr	r3, [pc, #20]	@ (800419c <HAL_RCC_GetSysClockFreq+0x204>)
 8004186:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800418a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800418c:	4618      	mov	r0, r3
 800418e:	3750      	adds	r7, #80	@ 0x50
 8004190:	46bd      	mov	sp, r7
 8004192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004196:	bf00      	nop
 8004198:	40023800 	.word	0x40023800
 800419c:	00f42400 	.word	0x00f42400
 80041a0:	007a1200 	.word	0x007a1200

080041a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041a8:	4b03      	ldr	r3, [pc, #12]	@ (80041b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041aa:	681b      	ldr	r3, [r3, #0]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	20000008 	.word	0x20000008

080041bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041c0:	f7ff fff0 	bl	80041a4 <HAL_RCC_GetHCLKFreq>
 80041c4:	4602      	mov	r2, r0
 80041c6:	4b05      	ldr	r3, [pc, #20]	@ (80041dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	0a9b      	lsrs	r3, r3, #10
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	4903      	ldr	r1, [pc, #12]	@ (80041e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041d2:	5ccb      	ldrb	r3, [r1, r3]
 80041d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041d8:	4618      	mov	r0, r3
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40023800 	.word	0x40023800
 80041e0:	08008cf0 	.word	0x08008cf0

080041e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041e8:	f7ff ffdc 	bl	80041a4 <HAL_RCC_GetHCLKFreq>
 80041ec:	4602      	mov	r2, r0
 80041ee:	4b05      	ldr	r3, [pc, #20]	@ (8004204 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	0b5b      	lsrs	r3, r3, #13
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	4903      	ldr	r1, [pc, #12]	@ (8004208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041fa:	5ccb      	ldrb	r3, [r1, r3]
 80041fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004200:	4618      	mov	r0, r3
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40023800 	.word	0x40023800
 8004208:	08008cf0 	.word	0x08008cf0

0800420c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004218:	2300      	movs	r3, #0
 800421a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800421c:	2300      	movs	r3, #0
 800421e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004220:	2300      	movs	r3, #0
 8004222:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d012      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004234:	4b69      	ldr	r3, [pc, #420]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	4a68      	ldr	r2, [pc, #416]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800423e:	6093      	str	r3, [r2, #8]
 8004240:	4b66      	ldr	r3, [pc, #408]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004248:	4964      	ldr	r1, [pc, #400]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004256:	2301      	movs	r3, #1
 8004258:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d017      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004266:	4b5d      	ldr	r3, [pc, #372]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004268:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800426c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004274:	4959      	ldr	r1, [pc, #356]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004280:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004284:	d101      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004286:	2301      	movs	r3, #1
 8004288:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004292:	2301      	movs	r3, #1
 8004294:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d017      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042a2:	4b4e      	ldr	r3, [pc, #312]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042a8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	494a      	ldr	r1, [pc, #296]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042c0:	d101      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80042c2:	2301      	movs	r3, #1
 80042c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80042ce:	2301      	movs	r3, #1
 80042d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80042de:	2301      	movs	r3, #1
 80042e0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 808b 	beq.w	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042f0:	4b3a      	ldr	r3, [pc, #232]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f4:	4a39      	ldr	r2, [pc, #228]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80042fc:	4b37      	ldr	r3, [pc, #220]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004300:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004308:	4b35      	ldr	r3, [pc, #212]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a34      	ldr	r2, [pc, #208]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800430e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004312:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004314:	f7fe fa46 	bl	80027a4 <HAL_GetTick>
 8004318:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800431a:	e008      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800431c:	f7fe fa42 	bl	80027a4 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	@ 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e38f      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800432e:	4b2c      	ldr	r3, [pc, #176]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800433a:	4b28      	ldr	r3, [pc, #160]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800433c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800433e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004342:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d035      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	429a      	cmp	r2, r3
 8004356:	d02e      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004358:	4b20      	ldr	r3, [pc, #128]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800435c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004360:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004362:	4b1e      	ldr	r3, [pc, #120]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004366:	4a1d      	ldr	r2, [pc, #116]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800436c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800436e:	4b1b      	ldr	r3, [pc, #108]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004372:	4a1a      	ldr	r2, [pc, #104]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004374:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004378:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800437a:	4a18      	ldr	r2, [pc, #96]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004380:	4b16      	ldr	r3, [pc, #88]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b01      	cmp	r3, #1
 800438a:	d114      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438c:	f7fe fa0a 	bl	80027a4 <HAL_GetTick>
 8004390:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004392:	e00a      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004394:	f7fe fa06 	bl	80027a4 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d901      	bls.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e351      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043aa:	4b0c      	ldr	r3, [pc, #48]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0ee      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043c2:	d111      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80043c4:	4b05      	ldr	r3, [pc, #20]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80043d0:	4b04      	ldr	r3, [pc, #16]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80043d2:	400b      	ands	r3, r1
 80043d4:	4901      	ldr	r1, [pc, #4]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	608b      	str	r3, [r1, #8]
 80043da:	e00b      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80043dc:	40023800 	.word	0x40023800
 80043e0:	40007000 	.word	0x40007000
 80043e4:	0ffffcff 	.word	0x0ffffcff
 80043e8:	4bac      	ldr	r3, [pc, #688]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	4aab      	ldr	r2, [pc, #684]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ee:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80043f2:	6093      	str	r3, [r2, #8]
 80043f4:	4ba9      	ldr	r3, [pc, #676]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004400:	49a6      	ldr	r1, [pc, #664]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004402:	4313      	orrs	r3, r2
 8004404:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0310 	and.w	r3, r3, #16
 800440e:	2b00      	cmp	r3, #0
 8004410:	d010      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004412:	4ba2      	ldr	r3, [pc, #648]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004414:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004418:	4aa0      	ldr	r2, [pc, #640]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800441a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800441e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004422:	4b9e      	ldr	r3, [pc, #632]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004424:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800442c:	499b      	ldr	r1, [pc, #620]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800442e:	4313      	orrs	r3, r2
 8004430:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004440:	4b96      	ldr	r3, [pc, #600]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004446:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800444e:	4993      	ldr	r1, [pc, #588]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004462:	4b8e      	ldr	r3, [pc, #568]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004468:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004470:	498a      	ldr	r1, [pc, #552]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004472:	4313      	orrs	r3, r2
 8004474:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00a      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004484:	4b85      	ldr	r3, [pc, #532]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800448a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004492:	4982      	ldr	r1, [pc, #520]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004494:	4313      	orrs	r3, r2
 8004496:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044a6:	4b7d      	ldr	r3, [pc, #500]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b4:	4979      	ldr	r1, [pc, #484]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044c8:	4b74      	ldr	r3, [pc, #464]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ce:	f023 0203 	bic.w	r2, r3, #3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d6:	4971      	ldr	r1, [pc, #452]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044ea:	4b6c      	ldr	r3, [pc, #432]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f0:	f023 020c 	bic.w	r2, r3, #12
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044f8:	4968      	ldr	r1, [pc, #416]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800450c:	4b63      	ldr	r3, [pc, #396]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800450e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004512:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800451a:	4960      	ldr	r1, [pc, #384]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800452e:	4b5b      	ldr	r3, [pc, #364]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004534:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800453c:	4957      	ldr	r1, [pc, #348]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004550:	4b52      	ldr	r3, [pc, #328]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004556:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455e:	494f      	ldr	r1, [pc, #316]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004572:	4b4a      	ldr	r3, [pc, #296]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004578:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004580:	4946      	ldr	r1, [pc, #280]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004594:	4b41      	ldr	r3, [pc, #260]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800459a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a2:	493e      	ldr	r1, [pc, #248]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80045b6:	4b39      	ldr	r3, [pc, #228]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c4:	4935      	ldr	r1, [pc, #212]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045d8:	4b30      	ldr	r3, [pc, #192]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045de:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045e6:	492d      	ldr	r1, [pc, #180]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d011      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80045fa:	4b28      	ldr	r3, [pc, #160]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004600:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004608:	4924      	ldr	r1, [pc, #144]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004614:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004618:	d101      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800461a:	2301      	movs	r3, #1
 800461c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800462a:	2301      	movs	r3, #1
 800462c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800463a:	4b18      	ldr	r3, [pc, #96]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800463c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004640:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004648:	4914      	ldr	r1, [pc, #80]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00b      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800465c:	4b0f      	ldr	r3, [pc, #60]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004662:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800466c:	490b      	ldr	r1, [pc, #44]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00f      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004680:	4b06      	ldr	r3, [pc, #24]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004686:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004690:	4902      	ldr	r1, [pc, #8]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004698:	e002      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800469a:	bf00      	nop
 800469c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00b      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046ac:	4b8a      	ldr	r3, [pc, #552]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046b2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046bc:	4986      	ldr	r1, [pc, #536]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00b      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80046d0:	4b81      	ldr	r3, [pc, #516]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046d6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046e0:	497d      	ldr	r1, [pc, #500]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d006      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 80d6 	beq.w	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046fc:	4b76      	ldr	r3, [pc, #472]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a75      	ldr	r2, [pc, #468]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004702:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004706:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004708:	f7fe f84c 	bl	80027a4 <HAL_GetTick>
 800470c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004710:	f7fe f848 	bl	80027a4 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b64      	cmp	r3, #100	@ 0x64
 800471c:	d901      	bls.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e195      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004722:	4b6d      	ldr	r3, [pc, #436]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d021      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800473e:	2b00      	cmp	r3, #0
 8004740:	d11d      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004742:	4b65      	ldr	r3, [pc, #404]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004748:	0c1b      	lsrs	r3, r3, #16
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004750:	4b61      	ldr	r3, [pc, #388]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004752:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004756:	0e1b      	lsrs	r3, r3, #24
 8004758:	f003 030f 	and.w	r3, r3, #15
 800475c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	019a      	lsls	r2, r3, #6
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	041b      	lsls	r3, r3, #16
 8004768:	431a      	orrs	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	061b      	lsls	r3, r3, #24
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	071b      	lsls	r3, r3, #28
 8004776:	4958      	ldr	r1, [pc, #352]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d004      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800478e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004792:	d00a      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800479c:	2b00      	cmp	r3, #0
 800479e:	d02e      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047a8:	d129      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047aa:	4b4b      	ldr	r3, [pc, #300]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047b0:	0c1b      	lsrs	r3, r3, #16
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047b8:	4b47      	ldr	r3, [pc, #284]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047be:	0f1b      	lsrs	r3, r3, #28
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	019a      	lsls	r2, r3, #6
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	041b      	lsls	r3, r3, #16
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	061b      	lsls	r3, r3, #24
 80047d8:	431a      	orrs	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	071b      	lsls	r3, r3, #28
 80047de:	493e      	ldr	r1, [pc, #248]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80047e6:	4b3c      	ldr	r3, [pc, #240]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047ec:	f023 021f 	bic.w	r2, r3, #31
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f4:	3b01      	subs	r3, #1
 80047f6:	4938      	ldr	r1, [pc, #224]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d01d      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800480a:	4b33      	ldr	r3, [pc, #204]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800480c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004810:	0e1b      	lsrs	r3, r3, #24
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004818:	4b2f      	ldr	r3, [pc, #188]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800481a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800481e:	0f1b      	lsrs	r3, r3, #28
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	019a      	lsls	r2, r3, #6
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	041b      	lsls	r3, r3, #16
 8004832:	431a      	orrs	r2, r3
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	061b      	lsls	r3, r3, #24
 8004838:	431a      	orrs	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	071b      	lsls	r3, r3, #28
 800483e:	4926      	ldr	r1, [pc, #152]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004840:	4313      	orrs	r3, r2
 8004842:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d011      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	019a      	lsls	r2, r3, #6
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	041b      	lsls	r3, r3, #16
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	061b      	lsls	r3, r3, #24
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	071b      	lsls	r3, r3, #28
 800486e:	491a      	ldr	r1, [pc, #104]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004876:	4b18      	ldr	r3, [pc, #96]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a17      	ldr	r2, [pc, #92]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800487c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004882:	f7fd ff8f 	bl	80027a4 <HAL_GetTick>
 8004886:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004888:	e008      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800488a:	f7fd ff8b 	bl	80027a4 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b64      	cmp	r3, #100	@ 0x64
 8004896:	d901      	bls.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e0d8      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800489c:	4b0e      	ldr	r3, [pc, #56]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f0      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	f040 80ce 	bne.w	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80048b0:	4b09      	ldr	r3, [pc, #36]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a08      	ldr	r2, [pc, #32]	@ (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048bc:	f7fd ff72 	bl	80027a4 <HAL_GetTick>
 80048c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048c2:	e00b      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048c4:	f7fd ff6e 	bl	80027a4 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b64      	cmp	r3, #100	@ 0x64
 80048d0:	d904      	bls.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e0bb      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80048d6:	bf00      	nop
 80048d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048dc:	4b5e      	ldr	r3, [pc, #376]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048e8:	d0ec      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d009      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004906:	2b00      	cmp	r3, #0
 8004908:	d02e      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490e:	2b00      	cmp	r3, #0
 8004910:	d12a      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004912:	4b51      	ldr	r3, [pc, #324]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004918:	0c1b      	lsrs	r3, r3, #16
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004920:	4b4d      	ldr	r3, [pc, #308]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004926:	0f1b      	lsrs	r3, r3, #28
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	019a      	lsls	r2, r3, #6
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	041b      	lsls	r3, r3, #16
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	061b      	lsls	r3, r3, #24
 8004940:	431a      	orrs	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	071b      	lsls	r3, r3, #28
 8004946:	4944      	ldr	r1, [pc, #272]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800494e:	4b42      	ldr	r3, [pc, #264]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004950:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004954:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495c:	3b01      	subs	r3, #1
 800495e:	021b      	lsls	r3, r3, #8
 8004960:	493d      	ldr	r1, [pc, #244]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d022      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004978:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800497c:	d11d      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800497e:	4b36      	ldr	r3, [pc, #216]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004984:	0e1b      	lsrs	r3, r3, #24
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800498c:	4b32      	ldr	r3, [pc, #200]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004992:	0f1b      	lsrs	r3, r3, #28
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	019a      	lsls	r2, r3, #6
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	041b      	lsls	r3, r3, #16
 80049a6:	431a      	orrs	r2, r3
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	061b      	lsls	r3, r3, #24
 80049ac:	431a      	orrs	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	071b      	lsls	r3, r3, #28
 80049b2:	4929      	ldr	r1, [pc, #164]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d028      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049c6:	4b24      	ldr	r3, [pc, #144]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049cc:	0e1b      	lsrs	r3, r3, #24
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049d4:	4b20      	ldr	r3, [pc, #128]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049da:	0c1b      	lsrs	r3, r3, #16
 80049dc:	f003 0303 	and.w	r3, r3, #3
 80049e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	019a      	lsls	r2, r3, #6
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	041b      	lsls	r3, r3, #16
 80049ec:	431a      	orrs	r2, r3
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	061b      	lsls	r3, r3, #24
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	071b      	lsls	r3, r3, #28
 80049fa:	4917      	ldr	r1, [pc, #92]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a02:	4b15      	ldr	r3, [pc, #84]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a10:	4911      	ldr	r1, [pc, #68]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a18:	4b0f      	ldr	r3, [pc, #60]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a0e      	ldr	r2, [pc, #56]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a24:	f7fd febe 	bl	80027a4 <HAL_GetTick>
 8004a28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a2c:	f7fd feba 	bl	80027a4 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b64      	cmp	r3, #100	@ 0x64
 8004a38:	d901      	bls.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e007      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a3e:	4b06      	ldr	r3, [pc, #24]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a4a:	d1ef      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3720      	adds	r7, #32
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	40023800 	.word	0x40023800

08004a5c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e01c      	b.n	8004aa8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	795b      	ldrb	r3, [r3, #5]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d105      	bne.n	8004a84 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7fc fc3c 	bl	80012fc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f042 0204 	orr.w	r2, r2, #4
 8004a98:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e09d      	b.n	8004bfe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d108      	bne.n	8004adc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ad2:	d009      	beq.n	8004ae8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	61da      	str	r2, [r3, #28]
 8004ada:	e005      	b.n	8004ae8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d106      	bne.n	8004b08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7fc fc58 	bl	80013b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b28:	d902      	bls.n	8004b30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	e002      	b.n	8004b36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004b3e:	d007      	beq.n	8004b50 <HAL_SPI_Init+0xa0>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b48:	d002      	beq.n	8004b50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b92:	ea42 0103 	orr.w	r1, r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	0c1b      	lsrs	r3, r3, #16
 8004bac:	f003 0204 	and.w	r2, r3, #4
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004bcc:	ea42 0103 	orr.w	r1, r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69da      	ldr	r2, [r3, #28]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b088      	sub	sp, #32
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	603b      	str	r3, [r7, #0]
 8004c12:	4613      	mov	r3, r2
 8004c14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_SPI_Transmit+0x22>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e158      	b.n	8004eda <HAL_SPI_Transmit+0x2d4>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c30:	f7fd fdb8 	bl	80027a4 <HAL_GetTick>
 8004c34:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c36:	88fb      	ldrh	r3, [r7, #6]
 8004c38:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d002      	beq.n	8004c4c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c46:	2302      	movs	r3, #2
 8004c48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c4a:	e13d      	b.n	8004ec8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <HAL_SPI_Transmit+0x52>
 8004c52:	88fb      	ldrh	r3, [r7, #6]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d102      	bne.n	8004c5e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c5c:	e134      	b.n	8004ec8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2203      	movs	r2, #3
 8004c62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	88fa      	ldrh	r2, [r7, #6]
 8004c76:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	88fa      	ldrh	r2, [r7, #6]
 8004c7c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ca8:	d10f      	bne.n	8004cca <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd4:	2b40      	cmp	r3, #64	@ 0x40
 8004cd6:	d007      	beq.n	8004ce8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ce6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004cf0:	d94b      	bls.n	8004d8a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <HAL_SPI_Transmit+0xfa>
 8004cfa:	8afb      	ldrh	r3, [r7, #22]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d13e      	bne.n	8004d7e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d04:	881a      	ldrh	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d10:	1c9a      	adds	r2, r3, #2
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d24:	e02b      	b.n	8004d7e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d112      	bne.n	8004d5a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d38:	881a      	ldrh	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d44:	1c9a      	adds	r2, r3, #2
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d58:	e011      	b.n	8004d7e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d5a:	f7fd fd23 	bl	80027a4 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d803      	bhi.n	8004d72 <HAL_SPI_Transmit+0x16c>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d70:	d102      	bne.n	8004d78 <HAL_SPI_Transmit+0x172>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d102      	bne.n	8004d7e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d7c:	e0a4      	b.n	8004ec8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1ce      	bne.n	8004d26 <HAL_SPI_Transmit+0x120>
 8004d88:	e07c      	b.n	8004e84 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <HAL_SPI_Transmit+0x192>
 8004d92:	8afb      	ldrh	r3, [r7, #22]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d170      	bne.n	8004e7a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d912      	bls.n	8004dc8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da6:	881a      	ldrh	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db2:	1c9a      	adds	r2, r3, #2
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b02      	subs	r3, #2
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004dc6:	e058      	b.n	8004e7a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	330c      	adds	r3, #12
 8004dd2:	7812      	ldrb	r2, [r2, #0]
 8004dd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004dee:	e044      	b.n	8004e7a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d12b      	bne.n	8004e56 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d912      	bls.n	8004e2e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0c:	881a      	ldrh	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e18:	1c9a      	adds	r2, r3, #2
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b02      	subs	r3, #2
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e2c:	e025      	b.n	8004e7a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	330c      	adds	r3, #12
 8004e38:	7812      	ldrb	r2, [r2, #0]
 8004e3a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e54:	e011      	b.n	8004e7a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e56:	f7fd fca5 	bl	80027a4 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d803      	bhi.n	8004e6e <HAL_SPI_Transmit+0x268>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6c:	d102      	bne.n	8004e74 <HAL_SPI_Transmit+0x26e>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d102      	bne.n	8004e7a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e78:	e026      	b.n	8004ec8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1b5      	bne.n	8004df0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	6839      	ldr	r1, [r7, #0]
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 f945 	bl	8005118 <SPI_EndRxTxTransaction>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10a      	bne.n	8004eb8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	613b      	str	r3, [r7, #16]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	613b      	str	r3, [r7, #16]
 8004eb6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	77fb      	strb	r3, [r7, #31]
 8004ec4:	e000      	b.n	8004ec8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004ec6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004ed8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3720      	adds	r7, #32
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	603b      	str	r3, [r7, #0]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ef4:	f7fd fc56 	bl	80027a4 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efc:	1a9b      	subs	r3, r3, r2
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	4413      	add	r3, r2
 8004f02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f04:	f7fd fc4e 	bl	80027a4 <HAL_GetTick>
 8004f08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f0a:	4b39      	ldr	r3, [pc, #228]	@ (8004ff0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	015b      	lsls	r3, r3, #5
 8004f10:	0d1b      	lsrs	r3, r3, #20
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	fb02 f303 	mul.w	r3, r2, r3
 8004f18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f1a:	e054      	b.n	8004fc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f22:	d050      	beq.n	8004fc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f24:	f7fd fc3e 	bl	80027a4 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d902      	bls.n	8004f3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d13d      	bne.n	8004fb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f52:	d111      	bne.n	8004f78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f5c:	d004      	beq.n	8004f68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f66:	d107      	bne.n	8004f78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f80:	d10f      	bne.n	8004fa2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fa0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e017      	b.n	8004fe6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	bf0c      	ite	eq
 8004fd6:	2301      	moveq	r3, #1
 8004fd8:	2300      	movne	r3, #0
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	461a      	mov	r2, r3
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d19b      	bne.n	8004f1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3720      	adds	r7, #32
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	20000008 	.word	0x20000008

08004ff4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005002:	f7fd fbcf 	bl	80027a4 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800500a:	1a9b      	subs	r3, r3, r2
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	4413      	add	r3, r2
 8005010:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005012:	f7fd fbc7 	bl	80027a4 <HAL_GetTick>
 8005016:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005018:	4b3e      	ldr	r3, [pc, #248]	@ (8005114 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	4613      	mov	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	00da      	lsls	r2, r3, #3
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	0d1b      	lsrs	r3, r3, #20
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	fb02 f303 	mul.w	r3, r2, r3
 800502e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005030:	e062      	b.n	80050f8 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005038:	d109      	bne.n	800504e <SPI_WaitFifoStateUntilTimeout+0x5a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d106      	bne.n	800504e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	330c      	adds	r3, #12
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	b2db      	uxtb	r3, r3
 800504a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800504c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005054:	d050      	beq.n	80050f8 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005056:	f7fd fba5 	bl	80027a4 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	69fa      	ldr	r2, [r7, #28]
 8005062:	429a      	cmp	r2, r3
 8005064:	d902      	bls.n	800506c <SPI_WaitFifoStateUntilTimeout+0x78>
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d13d      	bne.n	80050e8 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800507a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005084:	d111      	bne.n	80050aa <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800508e:	d004      	beq.n	800509a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005098:	d107      	bne.n	80050aa <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050b2:	d10f      	bne.n	80050d4 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e010      	b.n	800510a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	3b01      	subs	r3, #1
 80050f6:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689a      	ldr	r2, [r3, #8]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	4013      	ands	r3, r2
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	429a      	cmp	r2, r3
 8005106:	d194      	bne.n	8005032 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3720      	adds	r7, #32
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20000008 	.word	0x20000008

08005118 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af02      	add	r7, sp, #8
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2200      	movs	r2, #0
 800512c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7ff ff5f 	bl	8004ff4 <SPI_WaitFifoStateUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d007      	beq.n	800514c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005140:	f043 0220 	orr.w	r2, r3, #32
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e027      	b.n	800519c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2200      	movs	r2, #0
 8005154:	2180      	movs	r1, #128	@ 0x80
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f7ff fec4 	bl	8004ee4 <SPI_WaitFlagStateUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d007      	beq.n	8005172 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005166:	f043 0220 	orr.w	r2, r3, #32
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e014      	b.n	800519c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2200      	movs	r2, #0
 800517a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f7ff ff38 	bl	8004ff4 <SPI_WaitFifoStateUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d007      	beq.n	800519a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800518e:	f043 0220 	orr.w	r2, r3, #32
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e000      	b.n	800519c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e049      	b.n	800524a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d106      	bne.n	80051d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7fc fab2 	bl	8001734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3304      	adds	r3, #4
 80051e0:	4619      	mov	r1, r3
 80051e2:	4610      	mov	r0, r2
 80051e4:	f000 f8fc 	bl	80053e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005264:	2b01      	cmp	r3, #1
 8005266:	d101      	bne.n	800526c <HAL_TIM_ConfigClockSource+0x18>
 8005268:	2302      	movs	r3, #2
 800526a:	e0b3      	b.n	80053d4 <HAL_TIM_ConfigClockSource+0x180>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4b55      	ldr	r3, [pc, #340]	@ (80053dc <HAL_TIM_ConfigClockSource+0x188>)
 8005288:	4013      	ands	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005292:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052a4:	d03e      	beq.n	8005324 <HAL_TIM_ConfigClockSource+0xd0>
 80052a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052aa:	f200 8087 	bhi.w	80053bc <HAL_TIM_ConfigClockSource+0x168>
 80052ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052b2:	f000 8085 	beq.w	80053c0 <HAL_TIM_ConfigClockSource+0x16c>
 80052b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ba:	d87f      	bhi.n	80053bc <HAL_TIM_ConfigClockSource+0x168>
 80052bc:	2b70      	cmp	r3, #112	@ 0x70
 80052be:	d01a      	beq.n	80052f6 <HAL_TIM_ConfigClockSource+0xa2>
 80052c0:	2b70      	cmp	r3, #112	@ 0x70
 80052c2:	d87b      	bhi.n	80053bc <HAL_TIM_ConfigClockSource+0x168>
 80052c4:	2b60      	cmp	r3, #96	@ 0x60
 80052c6:	d050      	beq.n	800536a <HAL_TIM_ConfigClockSource+0x116>
 80052c8:	2b60      	cmp	r3, #96	@ 0x60
 80052ca:	d877      	bhi.n	80053bc <HAL_TIM_ConfigClockSource+0x168>
 80052cc:	2b50      	cmp	r3, #80	@ 0x50
 80052ce:	d03c      	beq.n	800534a <HAL_TIM_ConfigClockSource+0xf6>
 80052d0:	2b50      	cmp	r3, #80	@ 0x50
 80052d2:	d873      	bhi.n	80053bc <HAL_TIM_ConfigClockSource+0x168>
 80052d4:	2b40      	cmp	r3, #64	@ 0x40
 80052d6:	d058      	beq.n	800538a <HAL_TIM_ConfigClockSource+0x136>
 80052d8:	2b40      	cmp	r3, #64	@ 0x40
 80052da:	d86f      	bhi.n	80053bc <HAL_TIM_ConfigClockSource+0x168>
 80052dc:	2b30      	cmp	r3, #48	@ 0x30
 80052de:	d064      	beq.n	80053aa <HAL_TIM_ConfigClockSource+0x156>
 80052e0:	2b30      	cmp	r3, #48	@ 0x30
 80052e2:	d86b      	bhi.n	80053bc <HAL_TIM_ConfigClockSource+0x168>
 80052e4:	2b20      	cmp	r3, #32
 80052e6:	d060      	beq.n	80053aa <HAL_TIM_ConfigClockSource+0x156>
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	d867      	bhi.n	80053bc <HAL_TIM_ConfigClockSource+0x168>
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d05c      	beq.n	80053aa <HAL_TIM_ConfigClockSource+0x156>
 80052f0:	2b10      	cmp	r3, #16
 80052f2:	d05a      	beq.n	80053aa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80052f4:	e062      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6818      	ldr	r0, [r3, #0]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	6899      	ldr	r1, [r3, #8]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f000 f985 	bl	8005614 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005318:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	609a      	str	r2, [r3, #8]
      break;
 8005322:	e04e      	b.n	80053c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6818      	ldr	r0, [r3, #0]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	6899      	ldr	r1, [r3, #8]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f000 f96e 	bl	8005614 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005346:	609a      	str	r2, [r3, #8]
      break;
 8005348:	e03b      	b.n	80053c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6818      	ldr	r0, [r3, #0]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	6859      	ldr	r1, [r3, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	461a      	mov	r2, r3
 8005358:	f000 f8e2 	bl	8005520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2150      	movs	r1, #80	@ 0x50
 8005362:	4618      	mov	r0, r3
 8005364:	f000 f93b 	bl	80055de <TIM_ITRx_SetConfig>
      break;
 8005368:	e02b      	b.n	80053c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6818      	ldr	r0, [r3, #0]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	6859      	ldr	r1, [r3, #4]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	461a      	mov	r2, r3
 8005378:	f000 f901 	bl	800557e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2160      	movs	r1, #96	@ 0x60
 8005382:	4618      	mov	r0, r3
 8005384:	f000 f92b 	bl	80055de <TIM_ITRx_SetConfig>
      break;
 8005388:	e01b      	b.n	80053c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	6859      	ldr	r1, [r3, #4]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	461a      	mov	r2, r3
 8005398:	f000 f8c2 	bl	8005520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2140      	movs	r1, #64	@ 0x40
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 f91b 	bl	80055de <TIM_ITRx_SetConfig>
      break;
 80053a8:	e00b      	b.n	80053c2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4619      	mov	r1, r3
 80053b4:	4610      	mov	r0, r2
 80053b6:	f000 f912 	bl	80055de <TIM_ITRx_SetConfig>
        break;
 80053ba:	e002      	b.n	80053c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80053bc:	bf00      	nop
 80053be:	e000      	b.n	80053c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80053c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	fffeff88 	.word	0xfffeff88

080053e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a40      	ldr	r2, [pc, #256]	@ (80054f4 <TIM_Base_SetConfig+0x114>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d013      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053fe:	d00f      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a3d      	ldr	r2, [pc, #244]	@ (80054f8 <TIM_Base_SetConfig+0x118>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00b      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a3c      	ldr	r2, [pc, #240]	@ (80054fc <TIM_Base_SetConfig+0x11c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d007      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a3b      	ldr	r2, [pc, #236]	@ (8005500 <TIM_Base_SetConfig+0x120>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d003      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a3a      	ldr	r2, [pc, #232]	@ (8005504 <TIM_Base_SetConfig+0x124>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d108      	bne.n	8005432 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a2f      	ldr	r2, [pc, #188]	@ (80054f4 <TIM_Base_SetConfig+0x114>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d02b      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005440:	d027      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a2c      	ldr	r2, [pc, #176]	@ (80054f8 <TIM_Base_SetConfig+0x118>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d023      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a2b      	ldr	r2, [pc, #172]	@ (80054fc <TIM_Base_SetConfig+0x11c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d01f      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a2a      	ldr	r2, [pc, #168]	@ (8005500 <TIM_Base_SetConfig+0x120>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d01b      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a29      	ldr	r2, [pc, #164]	@ (8005504 <TIM_Base_SetConfig+0x124>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d017      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a28      	ldr	r2, [pc, #160]	@ (8005508 <TIM_Base_SetConfig+0x128>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d013      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a27      	ldr	r2, [pc, #156]	@ (800550c <TIM_Base_SetConfig+0x12c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00f      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a26      	ldr	r2, [pc, #152]	@ (8005510 <TIM_Base_SetConfig+0x130>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00b      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a25      	ldr	r2, [pc, #148]	@ (8005514 <TIM_Base_SetConfig+0x134>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d007      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a24      	ldr	r2, [pc, #144]	@ (8005518 <TIM_Base_SetConfig+0x138>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d003      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a23      	ldr	r2, [pc, #140]	@ (800551c <TIM_Base_SetConfig+0x13c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d108      	bne.n	80054a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a0a      	ldr	r2, [pc, #40]	@ (80054f4 <TIM_Base_SetConfig+0x114>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d003      	beq.n	80054d8 <TIM_Base_SetConfig+0xf8>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a0c      	ldr	r2, [pc, #48]	@ (8005504 <TIM_Base_SetConfig+0x124>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d103      	bne.n	80054e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	615a      	str	r2, [r3, #20]
}
 80054e6:	bf00      	nop
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40010000 	.word	0x40010000
 80054f8:	40000400 	.word	0x40000400
 80054fc:	40000800 	.word	0x40000800
 8005500:	40000c00 	.word	0x40000c00
 8005504:	40010400 	.word	0x40010400
 8005508:	40014000 	.word	0x40014000
 800550c:	40014400 	.word	0x40014400
 8005510:	40014800 	.word	0x40014800
 8005514:	40001800 	.word	0x40001800
 8005518:	40001c00 	.word	0x40001c00
 800551c:	40002000 	.word	0x40002000

08005520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	f023 0201 	bic.w	r2, r3, #1
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800554a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	4313      	orrs	r3, r2
 8005554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f023 030a 	bic.w	r3, r3, #10
 800555c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4313      	orrs	r3, r2
 8005564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	621a      	str	r2, [r3, #32]
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800557e:	b480      	push	{r7}
 8005580:	b087      	sub	sp, #28
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f023 0210 	bic.w	r2, r3, #16
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	031b      	lsls	r3, r3, #12
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	621a      	str	r2, [r3, #32]
}
 80055d2:	bf00      	nop
 80055d4:	371c      	adds	r7, #28
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055de:	b480      	push	{r7}
 80055e0:	b085      	sub	sp, #20
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f043 0307 	orr.w	r3, r3, #7
 8005600:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	609a      	str	r2, [r3, #8]
}
 8005608:	bf00      	nop
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800562e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	021a      	lsls	r2, r3, #8
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	431a      	orrs	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4313      	orrs	r3, r2
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	609a      	str	r2, [r3, #8]
}
 8005648:	bf00      	nop
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005668:	2302      	movs	r3, #2
 800566a:	e06d      	b.n	8005748 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a30      	ldr	r2, [pc, #192]	@ (8005754 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d004      	beq.n	80056a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a2f      	ldr	r2, [pc, #188]	@ (8005758 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d108      	bne.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80056a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a20      	ldr	r2, [pc, #128]	@ (8005754 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d022      	beq.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056de:	d01d      	beq.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1d      	ldr	r2, [pc, #116]	@ (800575c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d018      	beq.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005760 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d013      	beq.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005764 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00e      	beq.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a15      	ldr	r2, [pc, #84]	@ (8005758 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d009      	beq.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a16      	ldr	r2, [pc, #88]	@ (8005768 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d004      	beq.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a15      	ldr	r2, [pc, #84]	@ (800576c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d10c      	bne.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005722:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	4313      	orrs	r3, r2
 800572c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	40010000 	.word	0x40010000
 8005758:	40010400 	.word	0x40010400
 800575c:	40000400 	.word	0x40000400
 8005760:	40000800 	.word	0x40000800
 8005764:	40000c00 	.word	0x40000c00
 8005768:	40014000 	.word	0x40014000
 800576c:	40001800 	.word	0x40001800

08005770 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e040      	b.n	8005804 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fc f81e 	bl	80017d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2224      	movs	r2, #36	@ 0x24
 800579c:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 0201 	bic.w	r2, r2, #1
 80057ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f8c0 	bl	8005934 <UART_SetConfig>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e022      	b.n	8005804 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d002      	beq.n	80057cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fb18 	bl	8005dfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0201 	orr.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fb9f 	bl	8005f40 <UART_CheckIdleState>
 8005802:	4603      	mov	r3, r0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08a      	sub	sp, #40	@ 0x28
 8005810:	af02      	add	r7, sp, #8
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	603b      	str	r3, [r7, #0]
 8005818:	4613      	mov	r3, r2
 800581a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005820:	2b20      	cmp	r3, #32
 8005822:	f040 8081 	bne.w	8005928 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_UART_Transmit+0x26>
 800582c:	88fb      	ldrh	r3, [r7, #6]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e079      	b.n	800592a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_UART_Transmit+0x38>
 8005840:	2302      	movs	r3, #2
 8005842:	e072      	b.n	800592a <HAL_UART_Transmit+0x11e>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2221      	movs	r2, #33	@ 0x21
 8005858:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800585a:	f7fc ffa3 	bl	80027a4 <HAL_GetTick>
 800585e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	88fa      	ldrh	r2, [r7, #6]
 8005864:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	88fa      	ldrh	r2, [r7, #6]
 800586c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005878:	d108      	bne.n	800588c <HAL_UART_Transmit+0x80>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d104      	bne.n	800588c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005882:	2300      	movs	r3, #0
 8005884:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	e003      	b.n	8005894 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005890:	2300      	movs	r3, #0
 8005892:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    while (huart->TxXferCount > 0U)
 800589c:	e02c      	b.n	80058f8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2200      	movs	r2, #0
 80058a6:	2180      	movs	r1, #128	@ 0x80
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 fb92 	bl	8005fd2 <UART_WaitOnFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e038      	b.n	800592a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10b      	bne.n	80058d6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058cc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	3302      	adds	r3, #2
 80058d2:	61bb      	str	r3, [r7, #24]
 80058d4:	e007      	b.n	80058e6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	781a      	ldrb	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	3301      	adds	r3, #1
 80058e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80058fe:	b29b      	uxth	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1cc      	bne.n	800589e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2200      	movs	r2, #0
 800590c:	2140      	movs	r1, #64	@ 0x40
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 fb5f 	bl	8005fd2 <UART_WaitOnFlagUntilTimeout>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e005      	b.n	800592a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2220      	movs	r2, #32
 8005922:	679a      	str	r2, [r3, #120]	@ 0x78

    return HAL_OK;
 8005924:	2300      	movs	r3, #0
 8005926:	e000      	b.n	800592a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005928:	2302      	movs	r3, #2
  }
}
 800592a:	4618      	mov	r0, r3
 800592c:	3720      	adds	r7, #32
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
	...

08005934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b088      	sub	sp, #32
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	4313      	orrs	r3, r2
 8005956:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	4ba6      	ldr	r3, [pc, #664]	@ (8005bf8 <UART_SetConfig+0x2c4>)
 8005960:	4013      	ands	r3, r2
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	6812      	ldr	r2, [r2, #0]
 8005966:	6979      	ldr	r1, [r7, #20]
 8005968:	430b      	orrs	r3, r1
 800596a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	4313      	orrs	r3, r2
 8005990:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a94      	ldr	r2, [pc, #592]	@ (8005bfc <UART_SetConfig+0x2c8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d120      	bne.n	80059f2 <UART_SetConfig+0xbe>
 80059b0:	4b93      	ldr	r3, [pc, #588]	@ (8005c00 <UART_SetConfig+0x2cc>)
 80059b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059b6:	f003 0303 	and.w	r3, r3, #3
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d816      	bhi.n	80059ec <UART_SetConfig+0xb8>
 80059be:	a201      	add	r2, pc, #4	@ (adr r2, 80059c4 <UART_SetConfig+0x90>)
 80059c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c4:	080059d5 	.word	0x080059d5
 80059c8:	080059e1 	.word	0x080059e1
 80059cc:	080059db 	.word	0x080059db
 80059d0:	080059e7 	.word	0x080059e7
 80059d4:	2301      	movs	r3, #1
 80059d6:	77fb      	strb	r3, [r7, #31]
 80059d8:	e150      	b.n	8005c7c <UART_SetConfig+0x348>
 80059da:	2302      	movs	r3, #2
 80059dc:	77fb      	strb	r3, [r7, #31]
 80059de:	e14d      	b.n	8005c7c <UART_SetConfig+0x348>
 80059e0:	2304      	movs	r3, #4
 80059e2:	77fb      	strb	r3, [r7, #31]
 80059e4:	e14a      	b.n	8005c7c <UART_SetConfig+0x348>
 80059e6:	2308      	movs	r3, #8
 80059e8:	77fb      	strb	r3, [r7, #31]
 80059ea:	e147      	b.n	8005c7c <UART_SetConfig+0x348>
 80059ec:	2310      	movs	r3, #16
 80059ee:	77fb      	strb	r3, [r7, #31]
 80059f0:	e144      	b.n	8005c7c <UART_SetConfig+0x348>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a83      	ldr	r2, [pc, #524]	@ (8005c04 <UART_SetConfig+0x2d0>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d132      	bne.n	8005a62 <UART_SetConfig+0x12e>
 80059fc:	4b80      	ldr	r3, [pc, #512]	@ (8005c00 <UART_SetConfig+0x2cc>)
 80059fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a02:	f003 030c 	and.w	r3, r3, #12
 8005a06:	2b0c      	cmp	r3, #12
 8005a08:	d828      	bhi.n	8005a5c <UART_SetConfig+0x128>
 8005a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a10 <UART_SetConfig+0xdc>)
 8005a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a10:	08005a45 	.word	0x08005a45
 8005a14:	08005a5d 	.word	0x08005a5d
 8005a18:	08005a5d 	.word	0x08005a5d
 8005a1c:	08005a5d 	.word	0x08005a5d
 8005a20:	08005a51 	.word	0x08005a51
 8005a24:	08005a5d 	.word	0x08005a5d
 8005a28:	08005a5d 	.word	0x08005a5d
 8005a2c:	08005a5d 	.word	0x08005a5d
 8005a30:	08005a4b 	.word	0x08005a4b
 8005a34:	08005a5d 	.word	0x08005a5d
 8005a38:	08005a5d 	.word	0x08005a5d
 8005a3c:	08005a5d 	.word	0x08005a5d
 8005a40:	08005a57 	.word	0x08005a57
 8005a44:	2300      	movs	r3, #0
 8005a46:	77fb      	strb	r3, [r7, #31]
 8005a48:	e118      	b.n	8005c7c <UART_SetConfig+0x348>
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	77fb      	strb	r3, [r7, #31]
 8005a4e:	e115      	b.n	8005c7c <UART_SetConfig+0x348>
 8005a50:	2304      	movs	r3, #4
 8005a52:	77fb      	strb	r3, [r7, #31]
 8005a54:	e112      	b.n	8005c7c <UART_SetConfig+0x348>
 8005a56:	2308      	movs	r3, #8
 8005a58:	77fb      	strb	r3, [r7, #31]
 8005a5a:	e10f      	b.n	8005c7c <UART_SetConfig+0x348>
 8005a5c:	2310      	movs	r3, #16
 8005a5e:	77fb      	strb	r3, [r7, #31]
 8005a60:	e10c      	b.n	8005c7c <UART_SetConfig+0x348>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a68      	ldr	r2, [pc, #416]	@ (8005c08 <UART_SetConfig+0x2d4>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d120      	bne.n	8005aae <UART_SetConfig+0x17a>
 8005a6c:	4b64      	ldr	r3, [pc, #400]	@ (8005c00 <UART_SetConfig+0x2cc>)
 8005a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a72:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a76:	2b30      	cmp	r3, #48	@ 0x30
 8005a78:	d013      	beq.n	8005aa2 <UART_SetConfig+0x16e>
 8005a7a:	2b30      	cmp	r3, #48	@ 0x30
 8005a7c:	d814      	bhi.n	8005aa8 <UART_SetConfig+0x174>
 8005a7e:	2b20      	cmp	r3, #32
 8005a80:	d009      	beq.n	8005a96 <UART_SetConfig+0x162>
 8005a82:	2b20      	cmp	r3, #32
 8005a84:	d810      	bhi.n	8005aa8 <UART_SetConfig+0x174>
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <UART_SetConfig+0x15c>
 8005a8a:	2b10      	cmp	r3, #16
 8005a8c:	d006      	beq.n	8005a9c <UART_SetConfig+0x168>
 8005a8e:	e00b      	b.n	8005aa8 <UART_SetConfig+0x174>
 8005a90:	2300      	movs	r3, #0
 8005a92:	77fb      	strb	r3, [r7, #31]
 8005a94:	e0f2      	b.n	8005c7c <UART_SetConfig+0x348>
 8005a96:	2302      	movs	r3, #2
 8005a98:	77fb      	strb	r3, [r7, #31]
 8005a9a:	e0ef      	b.n	8005c7c <UART_SetConfig+0x348>
 8005a9c:	2304      	movs	r3, #4
 8005a9e:	77fb      	strb	r3, [r7, #31]
 8005aa0:	e0ec      	b.n	8005c7c <UART_SetConfig+0x348>
 8005aa2:	2308      	movs	r3, #8
 8005aa4:	77fb      	strb	r3, [r7, #31]
 8005aa6:	e0e9      	b.n	8005c7c <UART_SetConfig+0x348>
 8005aa8:	2310      	movs	r3, #16
 8005aaa:	77fb      	strb	r3, [r7, #31]
 8005aac:	e0e6      	b.n	8005c7c <UART_SetConfig+0x348>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a56      	ldr	r2, [pc, #344]	@ (8005c0c <UART_SetConfig+0x2d8>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d120      	bne.n	8005afa <UART_SetConfig+0x1c6>
 8005ab8:	4b51      	ldr	r3, [pc, #324]	@ (8005c00 <UART_SetConfig+0x2cc>)
 8005aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005abe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005ac2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ac4:	d013      	beq.n	8005aee <UART_SetConfig+0x1ba>
 8005ac6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ac8:	d814      	bhi.n	8005af4 <UART_SetConfig+0x1c0>
 8005aca:	2b80      	cmp	r3, #128	@ 0x80
 8005acc:	d009      	beq.n	8005ae2 <UART_SetConfig+0x1ae>
 8005ace:	2b80      	cmp	r3, #128	@ 0x80
 8005ad0:	d810      	bhi.n	8005af4 <UART_SetConfig+0x1c0>
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <UART_SetConfig+0x1a8>
 8005ad6:	2b40      	cmp	r3, #64	@ 0x40
 8005ad8:	d006      	beq.n	8005ae8 <UART_SetConfig+0x1b4>
 8005ada:	e00b      	b.n	8005af4 <UART_SetConfig+0x1c0>
 8005adc:	2300      	movs	r3, #0
 8005ade:	77fb      	strb	r3, [r7, #31]
 8005ae0:	e0cc      	b.n	8005c7c <UART_SetConfig+0x348>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	77fb      	strb	r3, [r7, #31]
 8005ae6:	e0c9      	b.n	8005c7c <UART_SetConfig+0x348>
 8005ae8:	2304      	movs	r3, #4
 8005aea:	77fb      	strb	r3, [r7, #31]
 8005aec:	e0c6      	b.n	8005c7c <UART_SetConfig+0x348>
 8005aee:	2308      	movs	r3, #8
 8005af0:	77fb      	strb	r3, [r7, #31]
 8005af2:	e0c3      	b.n	8005c7c <UART_SetConfig+0x348>
 8005af4:	2310      	movs	r3, #16
 8005af6:	77fb      	strb	r3, [r7, #31]
 8005af8:	e0c0      	b.n	8005c7c <UART_SetConfig+0x348>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a44      	ldr	r2, [pc, #272]	@ (8005c10 <UART_SetConfig+0x2dc>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d125      	bne.n	8005b50 <UART_SetConfig+0x21c>
 8005b04:	4b3e      	ldr	r3, [pc, #248]	@ (8005c00 <UART_SetConfig+0x2cc>)
 8005b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b12:	d017      	beq.n	8005b44 <UART_SetConfig+0x210>
 8005b14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b18:	d817      	bhi.n	8005b4a <UART_SetConfig+0x216>
 8005b1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b1e:	d00b      	beq.n	8005b38 <UART_SetConfig+0x204>
 8005b20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b24:	d811      	bhi.n	8005b4a <UART_SetConfig+0x216>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <UART_SetConfig+0x1fe>
 8005b2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b2e:	d006      	beq.n	8005b3e <UART_SetConfig+0x20a>
 8005b30:	e00b      	b.n	8005b4a <UART_SetConfig+0x216>
 8005b32:	2300      	movs	r3, #0
 8005b34:	77fb      	strb	r3, [r7, #31]
 8005b36:	e0a1      	b.n	8005c7c <UART_SetConfig+0x348>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	77fb      	strb	r3, [r7, #31]
 8005b3c:	e09e      	b.n	8005c7c <UART_SetConfig+0x348>
 8005b3e:	2304      	movs	r3, #4
 8005b40:	77fb      	strb	r3, [r7, #31]
 8005b42:	e09b      	b.n	8005c7c <UART_SetConfig+0x348>
 8005b44:	2308      	movs	r3, #8
 8005b46:	77fb      	strb	r3, [r7, #31]
 8005b48:	e098      	b.n	8005c7c <UART_SetConfig+0x348>
 8005b4a:	2310      	movs	r3, #16
 8005b4c:	77fb      	strb	r3, [r7, #31]
 8005b4e:	e095      	b.n	8005c7c <UART_SetConfig+0x348>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a2f      	ldr	r2, [pc, #188]	@ (8005c14 <UART_SetConfig+0x2e0>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d125      	bne.n	8005ba6 <UART_SetConfig+0x272>
 8005b5a:	4b29      	ldr	r3, [pc, #164]	@ (8005c00 <UART_SetConfig+0x2cc>)
 8005b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005b64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b68:	d017      	beq.n	8005b9a <UART_SetConfig+0x266>
 8005b6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b6e:	d817      	bhi.n	8005ba0 <UART_SetConfig+0x26c>
 8005b70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b74:	d00b      	beq.n	8005b8e <UART_SetConfig+0x25a>
 8005b76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b7a:	d811      	bhi.n	8005ba0 <UART_SetConfig+0x26c>
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <UART_SetConfig+0x254>
 8005b80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b84:	d006      	beq.n	8005b94 <UART_SetConfig+0x260>
 8005b86:	e00b      	b.n	8005ba0 <UART_SetConfig+0x26c>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	77fb      	strb	r3, [r7, #31]
 8005b8c:	e076      	b.n	8005c7c <UART_SetConfig+0x348>
 8005b8e:	2302      	movs	r3, #2
 8005b90:	77fb      	strb	r3, [r7, #31]
 8005b92:	e073      	b.n	8005c7c <UART_SetConfig+0x348>
 8005b94:	2304      	movs	r3, #4
 8005b96:	77fb      	strb	r3, [r7, #31]
 8005b98:	e070      	b.n	8005c7c <UART_SetConfig+0x348>
 8005b9a:	2308      	movs	r3, #8
 8005b9c:	77fb      	strb	r3, [r7, #31]
 8005b9e:	e06d      	b.n	8005c7c <UART_SetConfig+0x348>
 8005ba0:	2310      	movs	r3, #16
 8005ba2:	77fb      	strb	r3, [r7, #31]
 8005ba4:	e06a      	b.n	8005c7c <UART_SetConfig+0x348>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a1b      	ldr	r2, [pc, #108]	@ (8005c18 <UART_SetConfig+0x2e4>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d138      	bne.n	8005c22 <UART_SetConfig+0x2ee>
 8005bb0:	4b13      	ldr	r3, [pc, #76]	@ (8005c00 <UART_SetConfig+0x2cc>)
 8005bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005bba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bbe:	d017      	beq.n	8005bf0 <UART_SetConfig+0x2bc>
 8005bc0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bc4:	d82a      	bhi.n	8005c1c <UART_SetConfig+0x2e8>
 8005bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bca:	d00b      	beq.n	8005be4 <UART_SetConfig+0x2b0>
 8005bcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bd0:	d824      	bhi.n	8005c1c <UART_SetConfig+0x2e8>
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <UART_SetConfig+0x2aa>
 8005bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bda:	d006      	beq.n	8005bea <UART_SetConfig+0x2b6>
 8005bdc:	e01e      	b.n	8005c1c <UART_SetConfig+0x2e8>
 8005bde:	2300      	movs	r3, #0
 8005be0:	77fb      	strb	r3, [r7, #31]
 8005be2:	e04b      	b.n	8005c7c <UART_SetConfig+0x348>
 8005be4:	2302      	movs	r3, #2
 8005be6:	77fb      	strb	r3, [r7, #31]
 8005be8:	e048      	b.n	8005c7c <UART_SetConfig+0x348>
 8005bea:	2304      	movs	r3, #4
 8005bec:	77fb      	strb	r3, [r7, #31]
 8005bee:	e045      	b.n	8005c7c <UART_SetConfig+0x348>
 8005bf0:	2308      	movs	r3, #8
 8005bf2:	77fb      	strb	r3, [r7, #31]
 8005bf4:	e042      	b.n	8005c7c <UART_SetConfig+0x348>
 8005bf6:	bf00      	nop
 8005bf8:	efff69f3 	.word	0xefff69f3
 8005bfc:	40011000 	.word	0x40011000
 8005c00:	40023800 	.word	0x40023800
 8005c04:	40004400 	.word	0x40004400
 8005c08:	40004800 	.word	0x40004800
 8005c0c:	40004c00 	.word	0x40004c00
 8005c10:	40005000 	.word	0x40005000
 8005c14:	40011400 	.word	0x40011400
 8005c18:	40007800 	.word	0x40007800
 8005c1c:	2310      	movs	r3, #16
 8005c1e:	77fb      	strb	r3, [r7, #31]
 8005c20:	e02c      	b.n	8005c7c <UART_SetConfig+0x348>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a72      	ldr	r2, [pc, #456]	@ (8005df0 <UART_SetConfig+0x4bc>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d125      	bne.n	8005c78 <UART_SetConfig+0x344>
 8005c2c:	4b71      	ldr	r3, [pc, #452]	@ (8005df4 <UART_SetConfig+0x4c0>)
 8005c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c32:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005c36:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005c3a:	d017      	beq.n	8005c6c <UART_SetConfig+0x338>
 8005c3c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005c40:	d817      	bhi.n	8005c72 <UART_SetConfig+0x33e>
 8005c42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c46:	d00b      	beq.n	8005c60 <UART_SetConfig+0x32c>
 8005c48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c4c:	d811      	bhi.n	8005c72 <UART_SetConfig+0x33e>
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <UART_SetConfig+0x326>
 8005c52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c56:	d006      	beq.n	8005c66 <UART_SetConfig+0x332>
 8005c58:	e00b      	b.n	8005c72 <UART_SetConfig+0x33e>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	77fb      	strb	r3, [r7, #31]
 8005c5e:	e00d      	b.n	8005c7c <UART_SetConfig+0x348>
 8005c60:	2302      	movs	r3, #2
 8005c62:	77fb      	strb	r3, [r7, #31]
 8005c64:	e00a      	b.n	8005c7c <UART_SetConfig+0x348>
 8005c66:	2304      	movs	r3, #4
 8005c68:	77fb      	strb	r3, [r7, #31]
 8005c6a:	e007      	b.n	8005c7c <UART_SetConfig+0x348>
 8005c6c:	2308      	movs	r3, #8
 8005c6e:	77fb      	strb	r3, [r7, #31]
 8005c70:	e004      	b.n	8005c7c <UART_SetConfig+0x348>
 8005c72:	2310      	movs	r3, #16
 8005c74:	77fb      	strb	r3, [r7, #31]
 8005c76:	e001      	b.n	8005c7c <UART_SetConfig+0x348>
 8005c78:	2310      	movs	r3, #16
 8005c7a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c84:	d15c      	bne.n	8005d40 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8005c86:	7ffb      	ldrb	r3, [r7, #31]
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d828      	bhi.n	8005cde <UART_SetConfig+0x3aa>
 8005c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c94 <UART_SetConfig+0x360>)
 8005c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c92:	bf00      	nop
 8005c94:	08005cb9 	.word	0x08005cb9
 8005c98:	08005cc1 	.word	0x08005cc1
 8005c9c:	08005cc9 	.word	0x08005cc9
 8005ca0:	08005cdf 	.word	0x08005cdf
 8005ca4:	08005ccf 	.word	0x08005ccf
 8005ca8:	08005cdf 	.word	0x08005cdf
 8005cac:	08005cdf 	.word	0x08005cdf
 8005cb0:	08005cdf 	.word	0x08005cdf
 8005cb4:	08005cd7 	.word	0x08005cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cb8:	f7fe fa80 	bl	80041bc <HAL_RCC_GetPCLK1Freq>
 8005cbc:	61b8      	str	r0, [r7, #24]
        break;
 8005cbe:	e013      	b.n	8005ce8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cc0:	f7fe fa90 	bl	80041e4 <HAL_RCC_GetPCLK2Freq>
 8005cc4:	61b8      	str	r0, [r7, #24]
        break;
 8005cc6:	e00f      	b.n	8005ce8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8005df8 <UART_SetConfig+0x4c4>)
 8005cca:	61bb      	str	r3, [r7, #24]
        break;
 8005ccc:	e00c      	b.n	8005ce8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cce:	f7fe f963 	bl	8003f98 <HAL_RCC_GetSysClockFreq>
 8005cd2:	61b8      	str	r0, [r7, #24]
        break;
 8005cd4:	e008      	b.n	8005ce8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cda:	61bb      	str	r3, [r7, #24]
        break;
 8005cdc:	e004      	b.n	8005ce8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	77bb      	strb	r3, [r7, #30]
        break;
 8005ce6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d074      	beq.n	8005dd8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	005a      	lsls	r2, r3, #1
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	085b      	lsrs	r3, r3, #1
 8005cf8:	441a      	add	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	2b0f      	cmp	r3, #15
 8005d0a:	d916      	bls.n	8005d3a <UART_SetConfig+0x406>
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d12:	d212      	bcs.n	8005d3a <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	f023 030f 	bic.w	r3, r3, #15
 8005d1c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	085b      	lsrs	r3, r3, #1
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	f003 0307 	and.w	r3, r3, #7
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	89fb      	ldrh	r3, [r7, #14]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	89fa      	ldrh	r2, [r7, #14]
 8005d36:	60da      	str	r2, [r3, #12]
 8005d38:	e04e      	b.n	8005dd8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	77bb      	strb	r3, [r7, #30]
 8005d3e:	e04b      	b.n	8005dd8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d40:	7ffb      	ldrb	r3, [r7, #31]
 8005d42:	2b08      	cmp	r3, #8
 8005d44:	d827      	bhi.n	8005d96 <UART_SetConfig+0x462>
 8005d46:	a201      	add	r2, pc, #4	@ (adr r2, 8005d4c <UART_SetConfig+0x418>)
 8005d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4c:	08005d71 	.word	0x08005d71
 8005d50:	08005d79 	.word	0x08005d79
 8005d54:	08005d81 	.word	0x08005d81
 8005d58:	08005d97 	.word	0x08005d97
 8005d5c:	08005d87 	.word	0x08005d87
 8005d60:	08005d97 	.word	0x08005d97
 8005d64:	08005d97 	.word	0x08005d97
 8005d68:	08005d97 	.word	0x08005d97
 8005d6c:	08005d8f 	.word	0x08005d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d70:	f7fe fa24 	bl	80041bc <HAL_RCC_GetPCLK1Freq>
 8005d74:	61b8      	str	r0, [r7, #24]
        break;
 8005d76:	e013      	b.n	8005da0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d78:	f7fe fa34 	bl	80041e4 <HAL_RCC_GetPCLK2Freq>
 8005d7c:	61b8      	str	r0, [r7, #24]
        break;
 8005d7e:	e00f      	b.n	8005da0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d80:	4b1d      	ldr	r3, [pc, #116]	@ (8005df8 <UART_SetConfig+0x4c4>)
 8005d82:	61bb      	str	r3, [r7, #24]
        break;
 8005d84:	e00c      	b.n	8005da0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d86:	f7fe f907 	bl	8003f98 <HAL_RCC_GetSysClockFreq>
 8005d8a:	61b8      	str	r0, [r7, #24]
        break;
 8005d8c:	e008      	b.n	8005da0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d92:	61bb      	str	r3, [r7, #24]
        break;
 8005d94:	e004      	b.n	8005da0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	77bb      	strb	r3, [r7, #30]
        break;
 8005d9e:	bf00      	nop
    }

    if (pclk != 0U)
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d018      	beq.n	8005dd8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	085a      	lsrs	r2, r3, #1
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	441a      	add	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	2b0f      	cmp	r3, #15
 8005dc0:	d908      	bls.n	8005dd4 <UART_SetConfig+0x4a0>
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dc8:	d204      	bcs.n	8005dd4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	60da      	str	r2, [r3, #12]
 8005dd2:	e001      	b.n	8005dd8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 8005de4:	7fbb      	ldrb	r3, [r7, #30]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3720      	adds	r7, #32
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	40007c00 	.word	0x40007c00
 8005df4:	40023800 	.word	0x40023800
 8005df8:	00f42400 	.word	0x00f42400

08005dfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00a      	beq.n	8005e26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00a      	beq.n	8005e6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6e:	f003 0308 	and.w	r3, r3, #8
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e90:	f003 0310 	and.w	r3, r3, #16
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00a      	beq.n	8005eae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01a      	beq.n	8005f12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005efa:	d10a      	bne.n	8005f12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	605a      	str	r2, [r3, #4]
  }
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af02      	add	r7, sp, #8
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f50:	f7fc fc28 	bl	80027a4 <HAL_GetTick>
 8005f54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0308 	and.w	r3, r3, #8
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d10e      	bne.n	8005f82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f82d 	bl	8005fd2 <UART_WaitOnFlagUntilTimeout>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e023      	b.n	8005fca <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b04      	cmp	r3, #4
 8005f8e:	d10e      	bne.n	8005fae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f817 	bl	8005fd2 <UART_WaitOnFlagUntilTimeout>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e00d      	b.n	8005fca <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	60f8      	str	r0, [r7, #12]
 8005fda:	60b9      	str	r1, [r7, #8]
 8005fdc:	603b      	str	r3, [r7, #0]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fe2:	e05e      	b.n	80060a2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fea:	d05a      	beq.n	80060a2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fec:	f7fc fbda 	bl	80027a4 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d302      	bcc.n	8006002 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d11b      	bne.n	800603a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8006010:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 0201 	bic.w	r2, r2, #1
 8006020:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2220      	movs	r2, #32
 8006026:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2220      	movs	r2, #32
 800602c:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e043      	b.n	80060c2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	d02c      	beq.n	80060a2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006052:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006056:	d124      	bne.n	80060a2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006060:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8006070:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 0201 	bic.w	r2, r2, #1
 8006080:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2220      	movs	r2, #32
 8006086:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2220      	movs	r2, #32
 800608c:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2220      	movs	r2, #32
 8006092:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e00f      	b.n	80060c2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	69da      	ldr	r2, [r3, #28]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	4013      	ands	r3, r2
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	bf0c      	ite	eq
 80060b2:	2301      	moveq	r3, #1
 80060b4:	2300      	movne	r3, #0
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	461a      	mov	r2, r3
 80060ba:	79fb      	ldrb	r3, [r7, #7]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d091      	beq.n	8005fe4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <__cvt>:
 80060ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060cc:	ed2d 8b02 	vpush	{d8}
 80060d0:	eeb0 8b40 	vmov.f64	d8, d0
 80060d4:	b085      	sub	sp, #20
 80060d6:	4617      	mov	r7, r2
 80060d8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80060da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060dc:	ee18 2a90 	vmov	r2, s17
 80060e0:	f025 0520 	bic.w	r5, r5, #32
 80060e4:	2a00      	cmp	r2, #0
 80060e6:	bfb6      	itet	lt
 80060e8:	222d      	movlt	r2, #45	@ 0x2d
 80060ea:	2200      	movge	r2, #0
 80060ec:	eeb1 8b40 	vneglt.f64	d8, d0
 80060f0:	2d46      	cmp	r5, #70	@ 0x46
 80060f2:	460c      	mov	r4, r1
 80060f4:	701a      	strb	r2, [r3, #0]
 80060f6:	d004      	beq.n	8006102 <__cvt+0x38>
 80060f8:	2d45      	cmp	r5, #69	@ 0x45
 80060fa:	d100      	bne.n	80060fe <__cvt+0x34>
 80060fc:	3401      	adds	r4, #1
 80060fe:	2102      	movs	r1, #2
 8006100:	e000      	b.n	8006104 <__cvt+0x3a>
 8006102:	2103      	movs	r1, #3
 8006104:	ab03      	add	r3, sp, #12
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	ab02      	add	r3, sp, #8
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	4622      	mov	r2, r4
 800610e:	4633      	mov	r3, r6
 8006110:	eeb0 0b48 	vmov.f64	d0, d8
 8006114:	f000 fe40 	bl	8006d98 <_dtoa_r>
 8006118:	2d47      	cmp	r5, #71	@ 0x47
 800611a:	d114      	bne.n	8006146 <__cvt+0x7c>
 800611c:	07fb      	lsls	r3, r7, #31
 800611e:	d50a      	bpl.n	8006136 <__cvt+0x6c>
 8006120:	1902      	adds	r2, r0, r4
 8006122:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800612a:	bf08      	it	eq
 800612c:	9203      	streq	r2, [sp, #12]
 800612e:	2130      	movs	r1, #48	@ 0x30
 8006130:	9b03      	ldr	r3, [sp, #12]
 8006132:	4293      	cmp	r3, r2
 8006134:	d319      	bcc.n	800616a <__cvt+0xa0>
 8006136:	9b03      	ldr	r3, [sp, #12]
 8006138:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800613a:	1a1b      	subs	r3, r3, r0
 800613c:	6013      	str	r3, [r2, #0]
 800613e:	b005      	add	sp, #20
 8006140:	ecbd 8b02 	vpop	{d8}
 8006144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006146:	2d46      	cmp	r5, #70	@ 0x46
 8006148:	eb00 0204 	add.w	r2, r0, r4
 800614c:	d1e9      	bne.n	8006122 <__cvt+0x58>
 800614e:	7803      	ldrb	r3, [r0, #0]
 8006150:	2b30      	cmp	r3, #48	@ 0x30
 8006152:	d107      	bne.n	8006164 <__cvt+0x9a>
 8006154:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800615c:	bf1c      	itt	ne
 800615e:	f1c4 0401 	rsbne	r4, r4, #1
 8006162:	6034      	strne	r4, [r6, #0]
 8006164:	6833      	ldr	r3, [r6, #0]
 8006166:	441a      	add	r2, r3
 8006168:	e7db      	b.n	8006122 <__cvt+0x58>
 800616a:	1c5c      	adds	r4, r3, #1
 800616c:	9403      	str	r4, [sp, #12]
 800616e:	7019      	strb	r1, [r3, #0]
 8006170:	e7de      	b.n	8006130 <__cvt+0x66>

08006172 <__exponent>:
 8006172:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006174:	2900      	cmp	r1, #0
 8006176:	bfba      	itte	lt
 8006178:	4249      	neglt	r1, r1
 800617a:	232d      	movlt	r3, #45	@ 0x2d
 800617c:	232b      	movge	r3, #43	@ 0x2b
 800617e:	2909      	cmp	r1, #9
 8006180:	7002      	strb	r2, [r0, #0]
 8006182:	7043      	strb	r3, [r0, #1]
 8006184:	dd29      	ble.n	80061da <__exponent+0x68>
 8006186:	f10d 0307 	add.w	r3, sp, #7
 800618a:	461d      	mov	r5, r3
 800618c:	270a      	movs	r7, #10
 800618e:	461a      	mov	r2, r3
 8006190:	fbb1 f6f7 	udiv	r6, r1, r7
 8006194:	fb07 1416 	mls	r4, r7, r6, r1
 8006198:	3430      	adds	r4, #48	@ 0x30
 800619a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800619e:	460c      	mov	r4, r1
 80061a0:	2c63      	cmp	r4, #99	@ 0x63
 80061a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80061a6:	4631      	mov	r1, r6
 80061a8:	dcf1      	bgt.n	800618e <__exponent+0x1c>
 80061aa:	3130      	adds	r1, #48	@ 0x30
 80061ac:	1e94      	subs	r4, r2, #2
 80061ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 80061b2:	1c41      	adds	r1, r0, #1
 80061b4:	4623      	mov	r3, r4
 80061b6:	42ab      	cmp	r3, r5
 80061b8:	d30a      	bcc.n	80061d0 <__exponent+0x5e>
 80061ba:	f10d 0309 	add.w	r3, sp, #9
 80061be:	1a9b      	subs	r3, r3, r2
 80061c0:	42ac      	cmp	r4, r5
 80061c2:	bf88      	it	hi
 80061c4:	2300      	movhi	r3, #0
 80061c6:	3302      	adds	r3, #2
 80061c8:	4403      	add	r3, r0
 80061ca:	1a18      	subs	r0, r3, r0
 80061cc:	b003      	add	sp, #12
 80061ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80061d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80061d8:	e7ed      	b.n	80061b6 <__exponent+0x44>
 80061da:	2330      	movs	r3, #48	@ 0x30
 80061dc:	3130      	adds	r1, #48	@ 0x30
 80061de:	7083      	strb	r3, [r0, #2]
 80061e0:	70c1      	strb	r1, [r0, #3]
 80061e2:	1d03      	adds	r3, r0, #4
 80061e4:	e7f1      	b.n	80061ca <__exponent+0x58>
	...

080061e8 <_printf_float>:
 80061e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ec:	b08d      	sub	sp, #52	@ 0x34
 80061ee:	460c      	mov	r4, r1
 80061f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80061f4:	4616      	mov	r6, r2
 80061f6:	461f      	mov	r7, r3
 80061f8:	4605      	mov	r5, r0
 80061fa:	f000 fccb 	bl	8006b94 <_localeconv_r>
 80061fe:	f8d0 b000 	ldr.w	fp, [r0]
 8006202:	4658      	mov	r0, fp
 8006204:	f7fa f86c 	bl	80002e0 <strlen>
 8006208:	2300      	movs	r3, #0
 800620a:	930a      	str	r3, [sp, #40]	@ 0x28
 800620c:	f8d8 3000 	ldr.w	r3, [r8]
 8006210:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006214:	6822      	ldr	r2, [r4, #0]
 8006216:	9005      	str	r0, [sp, #20]
 8006218:	3307      	adds	r3, #7
 800621a:	f023 0307 	bic.w	r3, r3, #7
 800621e:	f103 0108 	add.w	r1, r3, #8
 8006222:	f8c8 1000 	str.w	r1, [r8]
 8006226:	ed93 0b00 	vldr	d0, [r3]
 800622a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8006488 <_printf_float+0x2a0>
 800622e:	eeb0 7bc0 	vabs.f64	d7, d0
 8006232:	eeb4 7b46 	vcmp.f64	d7, d6
 8006236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800623a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800623e:	dd24      	ble.n	800628a <_printf_float+0xa2>
 8006240:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006248:	d502      	bpl.n	8006250 <_printf_float+0x68>
 800624a:	232d      	movs	r3, #45	@ 0x2d
 800624c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006250:	498f      	ldr	r1, [pc, #572]	@ (8006490 <_printf_float+0x2a8>)
 8006252:	4b90      	ldr	r3, [pc, #576]	@ (8006494 <_printf_float+0x2ac>)
 8006254:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006258:	bf94      	ite	ls
 800625a:	4688      	movls	r8, r1
 800625c:	4698      	movhi	r8, r3
 800625e:	f022 0204 	bic.w	r2, r2, #4
 8006262:	2303      	movs	r3, #3
 8006264:	6123      	str	r3, [r4, #16]
 8006266:	6022      	str	r2, [r4, #0]
 8006268:	f04f 0a00 	mov.w	sl, #0
 800626c:	9700      	str	r7, [sp, #0]
 800626e:	4633      	mov	r3, r6
 8006270:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006272:	4621      	mov	r1, r4
 8006274:	4628      	mov	r0, r5
 8006276:	f000 f9d1 	bl	800661c <_printf_common>
 800627a:	3001      	adds	r0, #1
 800627c:	f040 8089 	bne.w	8006392 <_printf_float+0x1aa>
 8006280:	f04f 30ff 	mov.w	r0, #4294967295
 8006284:	b00d      	add	sp, #52	@ 0x34
 8006286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800628a:	eeb4 0b40 	vcmp.f64	d0, d0
 800628e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006292:	d709      	bvc.n	80062a8 <_printf_float+0xc0>
 8006294:	ee10 3a90 	vmov	r3, s1
 8006298:	2b00      	cmp	r3, #0
 800629a:	bfbc      	itt	lt
 800629c:	232d      	movlt	r3, #45	@ 0x2d
 800629e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80062a2:	497d      	ldr	r1, [pc, #500]	@ (8006498 <_printf_float+0x2b0>)
 80062a4:	4b7d      	ldr	r3, [pc, #500]	@ (800649c <_printf_float+0x2b4>)
 80062a6:	e7d5      	b.n	8006254 <_printf_float+0x6c>
 80062a8:	6863      	ldr	r3, [r4, #4]
 80062aa:	1c59      	adds	r1, r3, #1
 80062ac:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80062b0:	d139      	bne.n	8006326 <_printf_float+0x13e>
 80062b2:	2306      	movs	r3, #6
 80062b4:	6063      	str	r3, [r4, #4]
 80062b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80062ba:	2300      	movs	r3, #0
 80062bc:	6022      	str	r2, [r4, #0]
 80062be:	9303      	str	r3, [sp, #12]
 80062c0:	ab0a      	add	r3, sp, #40	@ 0x28
 80062c2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80062c6:	ab09      	add	r3, sp, #36	@ 0x24
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	6861      	ldr	r1, [r4, #4]
 80062cc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80062d0:	4628      	mov	r0, r5
 80062d2:	f7ff fefa 	bl	80060ca <__cvt>
 80062d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80062da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80062dc:	4680      	mov	r8, r0
 80062de:	d129      	bne.n	8006334 <_printf_float+0x14c>
 80062e0:	1cc8      	adds	r0, r1, #3
 80062e2:	db02      	blt.n	80062ea <_printf_float+0x102>
 80062e4:	6863      	ldr	r3, [r4, #4]
 80062e6:	4299      	cmp	r1, r3
 80062e8:	dd41      	ble.n	800636e <_printf_float+0x186>
 80062ea:	f1a9 0902 	sub.w	r9, r9, #2
 80062ee:	fa5f f989 	uxtb.w	r9, r9
 80062f2:	3901      	subs	r1, #1
 80062f4:	464a      	mov	r2, r9
 80062f6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80062fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80062fc:	f7ff ff39 	bl	8006172 <__exponent>
 8006300:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006302:	1813      	adds	r3, r2, r0
 8006304:	2a01      	cmp	r2, #1
 8006306:	4682      	mov	sl, r0
 8006308:	6123      	str	r3, [r4, #16]
 800630a:	dc02      	bgt.n	8006312 <_printf_float+0x12a>
 800630c:	6822      	ldr	r2, [r4, #0]
 800630e:	07d2      	lsls	r2, r2, #31
 8006310:	d501      	bpl.n	8006316 <_printf_float+0x12e>
 8006312:	3301      	adds	r3, #1
 8006314:	6123      	str	r3, [r4, #16]
 8006316:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0a6      	beq.n	800626c <_printf_float+0x84>
 800631e:	232d      	movs	r3, #45	@ 0x2d
 8006320:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006324:	e7a2      	b.n	800626c <_printf_float+0x84>
 8006326:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800632a:	d1c4      	bne.n	80062b6 <_printf_float+0xce>
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1c2      	bne.n	80062b6 <_printf_float+0xce>
 8006330:	2301      	movs	r3, #1
 8006332:	e7bf      	b.n	80062b4 <_printf_float+0xcc>
 8006334:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006338:	d9db      	bls.n	80062f2 <_printf_float+0x10a>
 800633a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800633e:	d118      	bne.n	8006372 <_printf_float+0x18a>
 8006340:	2900      	cmp	r1, #0
 8006342:	6863      	ldr	r3, [r4, #4]
 8006344:	dd0b      	ble.n	800635e <_printf_float+0x176>
 8006346:	6121      	str	r1, [r4, #16]
 8006348:	b913      	cbnz	r3, 8006350 <_printf_float+0x168>
 800634a:	6822      	ldr	r2, [r4, #0]
 800634c:	07d0      	lsls	r0, r2, #31
 800634e:	d502      	bpl.n	8006356 <_printf_float+0x16e>
 8006350:	3301      	adds	r3, #1
 8006352:	440b      	add	r3, r1
 8006354:	6123      	str	r3, [r4, #16]
 8006356:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006358:	f04f 0a00 	mov.w	sl, #0
 800635c:	e7db      	b.n	8006316 <_printf_float+0x12e>
 800635e:	b913      	cbnz	r3, 8006366 <_printf_float+0x17e>
 8006360:	6822      	ldr	r2, [r4, #0]
 8006362:	07d2      	lsls	r2, r2, #31
 8006364:	d501      	bpl.n	800636a <_printf_float+0x182>
 8006366:	3302      	adds	r3, #2
 8006368:	e7f4      	b.n	8006354 <_printf_float+0x16c>
 800636a:	2301      	movs	r3, #1
 800636c:	e7f2      	b.n	8006354 <_printf_float+0x16c>
 800636e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8006372:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006374:	4299      	cmp	r1, r3
 8006376:	db05      	blt.n	8006384 <_printf_float+0x19c>
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	6121      	str	r1, [r4, #16]
 800637c:	07d8      	lsls	r0, r3, #31
 800637e:	d5ea      	bpl.n	8006356 <_printf_float+0x16e>
 8006380:	1c4b      	adds	r3, r1, #1
 8006382:	e7e7      	b.n	8006354 <_printf_float+0x16c>
 8006384:	2900      	cmp	r1, #0
 8006386:	bfd4      	ite	le
 8006388:	f1c1 0202 	rsble	r2, r1, #2
 800638c:	2201      	movgt	r2, #1
 800638e:	4413      	add	r3, r2
 8006390:	e7e0      	b.n	8006354 <_printf_float+0x16c>
 8006392:	6823      	ldr	r3, [r4, #0]
 8006394:	055a      	lsls	r2, r3, #21
 8006396:	d407      	bmi.n	80063a8 <_printf_float+0x1c0>
 8006398:	6923      	ldr	r3, [r4, #16]
 800639a:	4642      	mov	r2, r8
 800639c:	4631      	mov	r1, r6
 800639e:	4628      	mov	r0, r5
 80063a0:	47b8      	blx	r7
 80063a2:	3001      	adds	r0, #1
 80063a4:	d12a      	bne.n	80063fc <_printf_float+0x214>
 80063a6:	e76b      	b.n	8006280 <_printf_float+0x98>
 80063a8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80063ac:	f240 80e0 	bls.w	8006570 <_printf_float+0x388>
 80063b0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80063b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80063b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063bc:	d133      	bne.n	8006426 <_printf_float+0x23e>
 80063be:	4a38      	ldr	r2, [pc, #224]	@ (80064a0 <_printf_float+0x2b8>)
 80063c0:	2301      	movs	r3, #1
 80063c2:	4631      	mov	r1, r6
 80063c4:	4628      	mov	r0, r5
 80063c6:	47b8      	blx	r7
 80063c8:	3001      	adds	r0, #1
 80063ca:	f43f af59 	beq.w	8006280 <_printf_float+0x98>
 80063ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80063d2:	4543      	cmp	r3, r8
 80063d4:	db02      	blt.n	80063dc <_printf_float+0x1f4>
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	07d8      	lsls	r0, r3, #31
 80063da:	d50f      	bpl.n	80063fc <_printf_float+0x214>
 80063dc:	9b05      	ldr	r3, [sp, #20]
 80063de:	465a      	mov	r2, fp
 80063e0:	4631      	mov	r1, r6
 80063e2:	4628      	mov	r0, r5
 80063e4:	47b8      	blx	r7
 80063e6:	3001      	adds	r0, #1
 80063e8:	f43f af4a 	beq.w	8006280 <_printf_float+0x98>
 80063ec:	f04f 0900 	mov.w	r9, #0
 80063f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80063f4:	f104 0a1a 	add.w	sl, r4, #26
 80063f8:	45c8      	cmp	r8, r9
 80063fa:	dc09      	bgt.n	8006410 <_printf_float+0x228>
 80063fc:	6823      	ldr	r3, [r4, #0]
 80063fe:	079b      	lsls	r3, r3, #30
 8006400:	f100 8107 	bmi.w	8006612 <_printf_float+0x42a>
 8006404:	68e0      	ldr	r0, [r4, #12]
 8006406:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006408:	4298      	cmp	r0, r3
 800640a:	bfb8      	it	lt
 800640c:	4618      	movlt	r0, r3
 800640e:	e739      	b.n	8006284 <_printf_float+0x9c>
 8006410:	2301      	movs	r3, #1
 8006412:	4652      	mov	r2, sl
 8006414:	4631      	mov	r1, r6
 8006416:	4628      	mov	r0, r5
 8006418:	47b8      	blx	r7
 800641a:	3001      	adds	r0, #1
 800641c:	f43f af30 	beq.w	8006280 <_printf_float+0x98>
 8006420:	f109 0901 	add.w	r9, r9, #1
 8006424:	e7e8      	b.n	80063f8 <_printf_float+0x210>
 8006426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006428:	2b00      	cmp	r3, #0
 800642a:	dc3b      	bgt.n	80064a4 <_printf_float+0x2bc>
 800642c:	4a1c      	ldr	r2, [pc, #112]	@ (80064a0 <_printf_float+0x2b8>)
 800642e:	2301      	movs	r3, #1
 8006430:	4631      	mov	r1, r6
 8006432:	4628      	mov	r0, r5
 8006434:	47b8      	blx	r7
 8006436:	3001      	adds	r0, #1
 8006438:	f43f af22 	beq.w	8006280 <_printf_float+0x98>
 800643c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006440:	ea59 0303 	orrs.w	r3, r9, r3
 8006444:	d102      	bne.n	800644c <_printf_float+0x264>
 8006446:	6823      	ldr	r3, [r4, #0]
 8006448:	07d9      	lsls	r1, r3, #31
 800644a:	d5d7      	bpl.n	80063fc <_printf_float+0x214>
 800644c:	9b05      	ldr	r3, [sp, #20]
 800644e:	465a      	mov	r2, fp
 8006450:	4631      	mov	r1, r6
 8006452:	4628      	mov	r0, r5
 8006454:	47b8      	blx	r7
 8006456:	3001      	adds	r0, #1
 8006458:	f43f af12 	beq.w	8006280 <_printf_float+0x98>
 800645c:	f04f 0a00 	mov.w	sl, #0
 8006460:	f104 0b1a 	add.w	fp, r4, #26
 8006464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006466:	425b      	negs	r3, r3
 8006468:	4553      	cmp	r3, sl
 800646a:	dc01      	bgt.n	8006470 <_printf_float+0x288>
 800646c:	464b      	mov	r3, r9
 800646e:	e794      	b.n	800639a <_printf_float+0x1b2>
 8006470:	2301      	movs	r3, #1
 8006472:	465a      	mov	r2, fp
 8006474:	4631      	mov	r1, r6
 8006476:	4628      	mov	r0, r5
 8006478:	47b8      	blx	r7
 800647a:	3001      	adds	r0, #1
 800647c:	f43f af00 	beq.w	8006280 <_printf_float+0x98>
 8006480:	f10a 0a01 	add.w	sl, sl, #1
 8006484:	e7ee      	b.n	8006464 <_printf_float+0x27c>
 8006486:	bf00      	nop
 8006488:	ffffffff 	.word	0xffffffff
 800648c:	7fefffff 	.word	0x7fefffff
 8006490:	08008f38 	.word	0x08008f38
 8006494:	08008f3c 	.word	0x08008f3c
 8006498:	08008f40 	.word	0x08008f40
 800649c:	08008f44 	.word	0x08008f44
 80064a0:	08008f48 	.word	0x08008f48
 80064a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80064a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80064aa:	4553      	cmp	r3, sl
 80064ac:	bfa8      	it	ge
 80064ae:	4653      	movge	r3, sl
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	4699      	mov	r9, r3
 80064b4:	dc37      	bgt.n	8006526 <_printf_float+0x33e>
 80064b6:	2300      	movs	r3, #0
 80064b8:	9307      	str	r3, [sp, #28]
 80064ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064be:	f104 021a 	add.w	r2, r4, #26
 80064c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80064c4:	9907      	ldr	r1, [sp, #28]
 80064c6:	9306      	str	r3, [sp, #24]
 80064c8:	eba3 0309 	sub.w	r3, r3, r9
 80064cc:	428b      	cmp	r3, r1
 80064ce:	dc31      	bgt.n	8006534 <_printf_float+0x34c>
 80064d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064d2:	459a      	cmp	sl, r3
 80064d4:	dc3b      	bgt.n	800654e <_printf_float+0x366>
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	07da      	lsls	r2, r3, #31
 80064da:	d438      	bmi.n	800654e <_printf_float+0x366>
 80064dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064de:	ebaa 0903 	sub.w	r9, sl, r3
 80064e2:	9b06      	ldr	r3, [sp, #24]
 80064e4:	ebaa 0303 	sub.w	r3, sl, r3
 80064e8:	4599      	cmp	r9, r3
 80064ea:	bfa8      	it	ge
 80064ec:	4699      	movge	r9, r3
 80064ee:	f1b9 0f00 	cmp.w	r9, #0
 80064f2:	dc34      	bgt.n	800655e <_printf_float+0x376>
 80064f4:	f04f 0800 	mov.w	r8, #0
 80064f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064fc:	f104 0b1a 	add.w	fp, r4, #26
 8006500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006502:	ebaa 0303 	sub.w	r3, sl, r3
 8006506:	eba3 0309 	sub.w	r3, r3, r9
 800650a:	4543      	cmp	r3, r8
 800650c:	f77f af76 	ble.w	80063fc <_printf_float+0x214>
 8006510:	2301      	movs	r3, #1
 8006512:	465a      	mov	r2, fp
 8006514:	4631      	mov	r1, r6
 8006516:	4628      	mov	r0, r5
 8006518:	47b8      	blx	r7
 800651a:	3001      	adds	r0, #1
 800651c:	f43f aeb0 	beq.w	8006280 <_printf_float+0x98>
 8006520:	f108 0801 	add.w	r8, r8, #1
 8006524:	e7ec      	b.n	8006500 <_printf_float+0x318>
 8006526:	4642      	mov	r2, r8
 8006528:	4631      	mov	r1, r6
 800652a:	4628      	mov	r0, r5
 800652c:	47b8      	blx	r7
 800652e:	3001      	adds	r0, #1
 8006530:	d1c1      	bne.n	80064b6 <_printf_float+0x2ce>
 8006532:	e6a5      	b.n	8006280 <_printf_float+0x98>
 8006534:	2301      	movs	r3, #1
 8006536:	4631      	mov	r1, r6
 8006538:	4628      	mov	r0, r5
 800653a:	9206      	str	r2, [sp, #24]
 800653c:	47b8      	blx	r7
 800653e:	3001      	adds	r0, #1
 8006540:	f43f ae9e 	beq.w	8006280 <_printf_float+0x98>
 8006544:	9b07      	ldr	r3, [sp, #28]
 8006546:	9a06      	ldr	r2, [sp, #24]
 8006548:	3301      	adds	r3, #1
 800654a:	9307      	str	r3, [sp, #28]
 800654c:	e7b9      	b.n	80064c2 <_printf_float+0x2da>
 800654e:	9b05      	ldr	r3, [sp, #20]
 8006550:	465a      	mov	r2, fp
 8006552:	4631      	mov	r1, r6
 8006554:	4628      	mov	r0, r5
 8006556:	47b8      	blx	r7
 8006558:	3001      	adds	r0, #1
 800655a:	d1bf      	bne.n	80064dc <_printf_float+0x2f4>
 800655c:	e690      	b.n	8006280 <_printf_float+0x98>
 800655e:	9a06      	ldr	r2, [sp, #24]
 8006560:	464b      	mov	r3, r9
 8006562:	4442      	add	r2, r8
 8006564:	4631      	mov	r1, r6
 8006566:	4628      	mov	r0, r5
 8006568:	47b8      	blx	r7
 800656a:	3001      	adds	r0, #1
 800656c:	d1c2      	bne.n	80064f4 <_printf_float+0x30c>
 800656e:	e687      	b.n	8006280 <_printf_float+0x98>
 8006570:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8006574:	f1b9 0f01 	cmp.w	r9, #1
 8006578:	dc01      	bgt.n	800657e <_printf_float+0x396>
 800657a:	07db      	lsls	r3, r3, #31
 800657c:	d536      	bpl.n	80065ec <_printf_float+0x404>
 800657e:	2301      	movs	r3, #1
 8006580:	4642      	mov	r2, r8
 8006582:	4631      	mov	r1, r6
 8006584:	4628      	mov	r0, r5
 8006586:	47b8      	blx	r7
 8006588:	3001      	adds	r0, #1
 800658a:	f43f ae79 	beq.w	8006280 <_printf_float+0x98>
 800658e:	9b05      	ldr	r3, [sp, #20]
 8006590:	465a      	mov	r2, fp
 8006592:	4631      	mov	r1, r6
 8006594:	4628      	mov	r0, r5
 8006596:	47b8      	blx	r7
 8006598:	3001      	adds	r0, #1
 800659a:	f43f ae71 	beq.w	8006280 <_printf_float+0x98>
 800659e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80065a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80065a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065aa:	f109 39ff 	add.w	r9, r9, #4294967295
 80065ae:	d018      	beq.n	80065e2 <_printf_float+0x3fa>
 80065b0:	464b      	mov	r3, r9
 80065b2:	f108 0201 	add.w	r2, r8, #1
 80065b6:	4631      	mov	r1, r6
 80065b8:	4628      	mov	r0, r5
 80065ba:	47b8      	blx	r7
 80065bc:	3001      	adds	r0, #1
 80065be:	d10c      	bne.n	80065da <_printf_float+0x3f2>
 80065c0:	e65e      	b.n	8006280 <_printf_float+0x98>
 80065c2:	2301      	movs	r3, #1
 80065c4:	465a      	mov	r2, fp
 80065c6:	4631      	mov	r1, r6
 80065c8:	4628      	mov	r0, r5
 80065ca:	47b8      	blx	r7
 80065cc:	3001      	adds	r0, #1
 80065ce:	f43f ae57 	beq.w	8006280 <_printf_float+0x98>
 80065d2:	f108 0801 	add.w	r8, r8, #1
 80065d6:	45c8      	cmp	r8, r9
 80065d8:	dbf3      	blt.n	80065c2 <_printf_float+0x3da>
 80065da:	4653      	mov	r3, sl
 80065dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80065e0:	e6dc      	b.n	800639c <_printf_float+0x1b4>
 80065e2:	f04f 0800 	mov.w	r8, #0
 80065e6:	f104 0b1a 	add.w	fp, r4, #26
 80065ea:	e7f4      	b.n	80065d6 <_printf_float+0x3ee>
 80065ec:	2301      	movs	r3, #1
 80065ee:	4642      	mov	r2, r8
 80065f0:	e7e1      	b.n	80065b6 <_printf_float+0x3ce>
 80065f2:	2301      	movs	r3, #1
 80065f4:	464a      	mov	r2, r9
 80065f6:	4631      	mov	r1, r6
 80065f8:	4628      	mov	r0, r5
 80065fa:	47b8      	blx	r7
 80065fc:	3001      	adds	r0, #1
 80065fe:	f43f ae3f 	beq.w	8006280 <_printf_float+0x98>
 8006602:	f108 0801 	add.w	r8, r8, #1
 8006606:	68e3      	ldr	r3, [r4, #12]
 8006608:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800660a:	1a5b      	subs	r3, r3, r1
 800660c:	4543      	cmp	r3, r8
 800660e:	dcf0      	bgt.n	80065f2 <_printf_float+0x40a>
 8006610:	e6f8      	b.n	8006404 <_printf_float+0x21c>
 8006612:	f04f 0800 	mov.w	r8, #0
 8006616:	f104 0919 	add.w	r9, r4, #25
 800661a:	e7f4      	b.n	8006606 <_printf_float+0x41e>

0800661c <_printf_common>:
 800661c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006620:	4616      	mov	r6, r2
 8006622:	4698      	mov	r8, r3
 8006624:	688a      	ldr	r2, [r1, #8]
 8006626:	690b      	ldr	r3, [r1, #16]
 8006628:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800662c:	4293      	cmp	r3, r2
 800662e:	bfb8      	it	lt
 8006630:	4613      	movlt	r3, r2
 8006632:	6033      	str	r3, [r6, #0]
 8006634:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006638:	4607      	mov	r7, r0
 800663a:	460c      	mov	r4, r1
 800663c:	b10a      	cbz	r2, 8006642 <_printf_common+0x26>
 800663e:	3301      	adds	r3, #1
 8006640:	6033      	str	r3, [r6, #0]
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	0699      	lsls	r1, r3, #26
 8006646:	bf42      	ittt	mi
 8006648:	6833      	ldrmi	r3, [r6, #0]
 800664a:	3302      	addmi	r3, #2
 800664c:	6033      	strmi	r3, [r6, #0]
 800664e:	6825      	ldr	r5, [r4, #0]
 8006650:	f015 0506 	ands.w	r5, r5, #6
 8006654:	d106      	bne.n	8006664 <_printf_common+0x48>
 8006656:	f104 0a19 	add.w	sl, r4, #25
 800665a:	68e3      	ldr	r3, [r4, #12]
 800665c:	6832      	ldr	r2, [r6, #0]
 800665e:	1a9b      	subs	r3, r3, r2
 8006660:	42ab      	cmp	r3, r5
 8006662:	dc26      	bgt.n	80066b2 <_printf_common+0x96>
 8006664:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006668:	6822      	ldr	r2, [r4, #0]
 800666a:	3b00      	subs	r3, #0
 800666c:	bf18      	it	ne
 800666e:	2301      	movne	r3, #1
 8006670:	0692      	lsls	r2, r2, #26
 8006672:	d42b      	bmi.n	80066cc <_printf_common+0xb0>
 8006674:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006678:	4641      	mov	r1, r8
 800667a:	4638      	mov	r0, r7
 800667c:	47c8      	blx	r9
 800667e:	3001      	adds	r0, #1
 8006680:	d01e      	beq.n	80066c0 <_printf_common+0xa4>
 8006682:	6823      	ldr	r3, [r4, #0]
 8006684:	6922      	ldr	r2, [r4, #16]
 8006686:	f003 0306 	and.w	r3, r3, #6
 800668a:	2b04      	cmp	r3, #4
 800668c:	bf02      	ittt	eq
 800668e:	68e5      	ldreq	r5, [r4, #12]
 8006690:	6833      	ldreq	r3, [r6, #0]
 8006692:	1aed      	subeq	r5, r5, r3
 8006694:	68a3      	ldr	r3, [r4, #8]
 8006696:	bf0c      	ite	eq
 8006698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800669c:	2500      	movne	r5, #0
 800669e:	4293      	cmp	r3, r2
 80066a0:	bfc4      	itt	gt
 80066a2:	1a9b      	subgt	r3, r3, r2
 80066a4:	18ed      	addgt	r5, r5, r3
 80066a6:	2600      	movs	r6, #0
 80066a8:	341a      	adds	r4, #26
 80066aa:	42b5      	cmp	r5, r6
 80066ac:	d11a      	bne.n	80066e4 <_printf_common+0xc8>
 80066ae:	2000      	movs	r0, #0
 80066b0:	e008      	b.n	80066c4 <_printf_common+0xa8>
 80066b2:	2301      	movs	r3, #1
 80066b4:	4652      	mov	r2, sl
 80066b6:	4641      	mov	r1, r8
 80066b8:	4638      	mov	r0, r7
 80066ba:	47c8      	blx	r9
 80066bc:	3001      	adds	r0, #1
 80066be:	d103      	bne.n	80066c8 <_printf_common+0xac>
 80066c0:	f04f 30ff 	mov.w	r0, #4294967295
 80066c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066c8:	3501      	adds	r5, #1
 80066ca:	e7c6      	b.n	800665a <_printf_common+0x3e>
 80066cc:	18e1      	adds	r1, r4, r3
 80066ce:	1c5a      	adds	r2, r3, #1
 80066d0:	2030      	movs	r0, #48	@ 0x30
 80066d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066d6:	4422      	add	r2, r4
 80066d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066e0:	3302      	adds	r3, #2
 80066e2:	e7c7      	b.n	8006674 <_printf_common+0x58>
 80066e4:	2301      	movs	r3, #1
 80066e6:	4622      	mov	r2, r4
 80066e8:	4641      	mov	r1, r8
 80066ea:	4638      	mov	r0, r7
 80066ec:	47c8      	blx	r9
 80066ee:	3001      	adds	r0, #1
 80066f0:	d0e6      	beq.n	80066c0 <_printf_common+0xa4>
 80066f2:	3601      	adds	r6, #1
 80066f4:	e7d9      	b.n	80066aa <_printf_common+0x8e>
	...

080066f8 <_printf_i>:
 80066f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066fc:	7e0f      	ldrb	r7, [r1, #24]
 80066fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006700:	2f78      	cmp	r7, #120	@ 0x78
 8006702:	4691      	mov	r9, r2
 8006704:	4680      	mov	r8, r0
 8006706:	460c      	mov	r4, r1
 8006708:	469a      	mov	sl, r3
 800670a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800670e:	d807      	bhi.n	8006720 <_printf_i+0x28>
 8006710:	2f62      	cmp	r7, #98	@ 0x62
 8006712:	d80a      	bhi.n	800672a <_printf_i+0x32>
 8006714:	2f00      	cmp	r7, #0
 8006716:	f000 80d2 	beq.w	80068be <_printf_i+0x1c6>
 800671a:	2f58      	cmp	r7, #88	@ 0x58
 800671c:	f000 80b9 	beq.w	8006892 <_printf_i+0x19a>
 8006720:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006724:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006728:	e03a      	b.n	80067a0 <_printf_i+0xa8>
 800672a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800672e:	2b15      	cmp	r3, #21
 8006730:	d8f6      	bhi.n	8006720 <_printf_i+0x28>
 8006732:	a101      	add	r1, pc, #4	@ (adr r1, 8006738 <_printf_i+0x40>)
 8006734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006738:	08006791 	.word	0x08006791
 800673c:	080067a5 	.word	0x080067a5
 8006740:	08006721 	.word	0x08006721
 8006744:	08006721 	.word	0x08006721
 8006748:	08006721 	.word	0x08006721
 800674c:	08006721 	.word	0x08006721
 8006750:	080067a5 	.word	0x080067a5
 8006754:	08006721 	.word	0x08006721
 8006758:	08006721 	.word	0x08006721
 800675c:	08006721 	.word	0x08006721
 8006760:	08006721 	.word	0x08006721
 8006764:	080068a5 	.word	0x080068a5
 8006768:	080067cf 	.word	0x080067cf
 800676c:	0800685f 	.word	0x0800685f
 8006770:	08006721 	.word	0x08006721
 8006774:	08006721 	.word	0x08006721
 8006778:	080068c7 	.word	0x080068c7
 800677c:	08006721 	.word	0x08006721
 8006780:	080067cf 	.word	0x080067cf
 8006784:	08006721 	.word	0x08006721
 8006788:	08006721 	.word	0x08006721
 800678c:	08006867 	.word	0x08006867
 8006790:	6833      	ldr	r3, [r6, #0]
 8006792:	1d1a      	adds	r2, r3, #4
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6032      	str	r2, [r6, #0]
 8006798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800679c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80067a0:	2301      	movs	r3, #1
 80067a2:	e09d      	b.n	80068e0 <_printf_i+0x1e8>
 80067a4:	6833      	ldr	r3, [r6, #0]
 80067a6:	6820      	ldr	r0, [r4, #0]
 80067a8:	1d19      	adds	r1, r3, #4
 80067aa:	6031      	str	r1, [r6, #0]
 80067ac:	0606      	lsls	r6, r0, #24
 80067ae:	d501      	bpl.n	80067b4 <_printf_i+0xbc>
 80067b0:	681d      	ldr	r5, [r3, #0]
 80067b2:	e003      	b.n	80067bc <_printf_i+0xc4>
 80067b4:	0645      	lsls	r5, r0, #25
 80067b6:	d5fb      	bpl.n	80067b0 <_printf_i+0xb8>
 80067b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80067bc:	2d00      	cmp	r5, #0
 80067be:	da03      	bge.n	80067c8 <_printf_i+0xd0>
 80067c0:	232d      	movs	r3, #45	@ 0x2d
 80067c2:	426d      	negs	r5, r5
 80067c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067c8:	4859      	ldr	r0, [pc, #356]	@ (8006930 <_printf_i+0x238>)
 80067ca:	230a      	movs	r3, #10
 80067cc:	e011      	b.n	80067f2 <_printf_i+0xfa>
 80067ce:	6821      	ldr	r1, [r4, #0]
 80067d0:	6833      	ldr	r3, [r6, #0]
 80067d2:	0608      	lsls	r0, r1, #24
 80067d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80067d8:	d402      	bmi.n	80067e0 <_printf_i+0xe8>
 80067da:	0649      	lsls	r1, r1, #25
 80067dc:	bf48      	it	mi
 80067de:	b2ad      	uxthmi	r5, r5
 80067e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80067e2:	4853      	ldr	r0, [pc, #332]	@ (8006930 <_printf_i+0x238>)
 80067e4:	6033      	str	r3, [r6, #0]
 80067e6:	bf14      	ite	ne
 80067e8:	230a      	movne	r3, #10
 80067ea:	2308      	moveq	r3, #8
 80067ec:	2100      	movs	r1, #0
 80067ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067f2:	6866      	ldr	r6, [r4, #4]
 80067f4:	60a6      	str	r6, [r4, #8]
 80067f6:	2e00      	cmp	r6, #0
 80067f8:	bfa2      	ittt	ge
 80067fa:	6821      	ldrge	r1, [r4, #0]
 80067fc:	f021 0104 	bicge.w	r1, r1, #4
 8006800:	6021      	strge	r1, [r4, #0]
 8006802:	b90d      	cbnz	r5, 8006808 <_printf_i+0x110>
 8006804:	2e00      	cmp	r6, #0
 8006806:	d04b      	beq.n	80068a0 <_printf_i+0x1a8>
 8006808:	4616      	mov	r6, r2
 800680a:	fbb5 f1f3 	udiv	r1, r5, r3
 800680e:	fb03 5711 	mls	r7, r3, r1, r5
 8006812:	5dc7      	ldrb	r7, [r0, r7]
 8006814:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006818:	462f      	mov	r7, r5
 800681a:	42bb      	cmp	r3, r7
 800681c:	460d      	mov	r5, r1
 800681e:	d9f4      	bls.n	800680a <_printf_i+0x112>
 8006820:	2b08      	cmp	r3, #8
 8006822:	d10b      	bne.n	800683c <_printf_i+0x144>
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	07df      	lsls	r7, r3, #31
 8006828:	d508      	bpl.n	800683c <_printf_i+0x144>
 800682a:	6923      	ldr	r3, [r4, #16]
 800682c:	6861      	ldr	r1, [r4, #4]
 800682e:	4299      	cmp	r1, r3
 8006830:	bfde      	ittt	le
 8006832:	2330      	movle	r3, #48	@ 0x30
 8006834:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006838:	f106 36ff 	addle.w	r6, r6, #4294967295
 800683c:	1b92      	subs	r2, r2, r6
 800683e:	6122      	str	r2, [r4, #16]
 8006840:	f8cd a000 	str.w	sl, [sp]
 8006844:	464b      	mov	r3, r9
 8006846:	aa03      	add	r2, sp, #12
 8006848:	4621      	mov	r1, r4
 800684a:	4640      	mov	r0, r8
 800684c:	f7ff fee6 	bl	800661c <_printf_common>
 8006850:	3001      	adds	r0, #1
 8006852:	d14a      	bne.n	80068ea <_printf_i+0x1f2>
 8006854:	f04f 30ff 	mov.w	r0, #4294967295
 8006858:	b004      	add	sp, #16
 800685a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800685e:	6823      	ldr	r3, [r4, #0]
 8006860:	f043 0320 	orr.w	r3, r3, #32
 8006864:	6023      	str	r3, [r4, #0]
 8006866:	4833      	ldr	r0, [pc, #204]	@ (8006934 <_printf_i+0x23c>)
 8006868:	2778      	movs	r7, #120	@ 0x78
 800686a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	6831      	ldr	r1, [r6, #0]
 8006872:	061f      	lsls	r7, r3, #24
 8006874:	f851 5b04 	ldr.w	r5, [r1], #4
 8006878:	d402      	bmi.n	8006880 <_printf_i+0x188>
 800687a:	065f      	lsls	r7, r3, #25
 800687c:	bf48      	it	mi
 800687e:	b2ad      	uxthmi	r5, r5
 8006880:	6031      	str	r1, [r6, #0]
 8006882:	07d9      	lsls	r1, r3, #31
 8006884:	bf44      	itt	mi
 8006886:	f043 0320 	orrmi.w	r3, r3, #32
 800688a:	6023      	strmi	r3, [r4, #0]
 800688c:	b11d      	cbz	r5, 8006896 <_printf_i+0x19e>
 800688e:	2310      	movs	r3, #16
 8006890:	e7ac      	b.n	80067ec <_printf_i+0xf4>
 8006892:	4827      	ldr	r0, [pc, #156]	@ (8006930 <_printf_i+0x238>)
 8006894:	e7e9      	b.n	800686a <_printf_i+0x172>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	f023 0320 	bic.w	r3, r3, #32
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	e7f6      	b.n	800688e <_printf_i+0x196>
 80068a0:	4616      	mov	r6, r2
 80068a2:	e7bd      	b.n	8006820 <_printf_i+0x128>
 80068a4:	6833      	ldr	r3, [r6, #0]
 80068a6:	6825      	ldr	r5, [r4, #0]
 80068a8:	6961      	ldr	r1, [r4, #20]
 80068aa:	1d18      	adds	r0, r3, #4
 80068ac:	6030      	str	r0, [r6, #0]
 80068ae:	062e      	lsls	r6, r5, #24
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	d501      	bpl.n	80068b8 <_printf_i+0x1c0>
 80068b4:	6019      	str	r1, [r3, #0]
 80068b6:	e002      	b.n	80068be <_printf_i+0x1c6>
 80068b8:	0668      	lsls	r0, r5, #25
 80068ba:	d5fb      	bpl.n	80068b4 <_printf_i+0x1bc>
 80068bc:	8019      	strh	r1, [r3, #0]
 80068be:	2300      	movs	r3, #0
 80068c0:	6123      	str	r3, [r4, #16]
 80068c2:	4616      	mov	r6, r2
 80068c4:	e7bc      	b.n	8006840 <_printf_i+0x148>
 80068c6:	6833      	ldr	r3, [r6, #0]
 80068c8:	1d1a      	adds	r2, r3, #4
 80068ca:	6032      	str	r2, [r6, #0]
 80068cc:	681e      	ldr	r6, [r3, #0]
 80068ce:	6862      	ldr	r2, [r4, #4]
 80068d0:	2100      	movs	r1, #0
 80068d2:	4630      	mov	r0, r6
 80068d4:	f7f9 fcb4 	bl	8000240 <memchr>
 80068d8:	b108      	cbz	r0, 80068de <_printf_i+0x1e6>
 80068da:	1b80      	subs	r0, r0, r6
 80068dc:	6060      	str	r0, [r4, #4]
 80068de:	6863      	ldr	r3, [r4, #4]
 80068e0:	6123      	str	r3, [r4, #16]
 80068e2:	2300      	movs	r3, #0
 80068e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068e8:	e7aa      	b.n	8006840 <_printf_i+0x148>
 80068ea:	6923      	ldr	r3, [r4, #16]
 80068ec:	4632      	mov	r2, r6
 80068ee:	4649      	mov	r1, r9
 80068f0:	4640      	mov	r0, r8
 80068f2:	47d0      	blx	sl
 80068f4:	3001      	adds	r0, #1
 80068f6:	d0ad      	beq.n	8006854 <_printf_i+0x15c>
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	079b      	lsls	r3, r3, #30
 80068fc:	d413      	bmi.n	8006926 <_printf_i+0x22e>
 80068fe:	68e0      	ldr	r0, [r4, #12]
 8006900:	9b03      	ldr	r3, [sp, #12]
 8006902:	4298      	cmp	r0, r3
 8006904:	bfb8      	it	lt
 8006906:	4618      	movlt	r0, r3
 8006908:	e7a6      	b.n	8006858 <_printf_i+0x160>
 800690a:	2301      	movs	r3, #1
 800690c:	4632      	mov	r2, r6
 800690e:	4649      	mov	r1, r9
 8006910:	4640      	mov	r0, r8
 8006912:	47d0      	blx	sl
 8006914:	3001      	adds	r0, #1
 8006916:	d09d      	beq.n	8006854 <_printf_i+0x15c>
 8006918:	3501      	adds	r5, #1
 800691a:	68e3      	ldr	r3, [r4, #12]
 800691c:	9903      	ldr	r1, [sp, #12]
 800691e:	1a5b      	subs	r3, r3, r1
 8006920:	42ab      	cmp	r3, r5
 8006922:	dcf2      	bgt.n	800690a <_printf_i+0x212>
 8006924:	e7eb      	b.n	80068fe <_printf_i+0x206>
 8006926:	2500      	movs	r5, #0
 8006928:	f104 0619 	add.w	r6, r4, #25
 800692c:	e7f5      	b.n	800691a <_printf_i+0x222>
 800692e:	bf00      	nop
 8006930:	08008f4a 	.word	0x08008f4a
 8006934:	08008f5b 	.word	0x08008f5b

08006938 <std>:
 8006938:	2300      	movs	r3, #0
 800693a:	b510      	push	{r4, lr}
 800693c:	4604      	mov	r4, r0
 800693e:	e9c0 3300 	strd	r3, r3, [r0]
 8006942:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006946:	6083      	str	r3, [r0, #8]
 8006948:	8181      	strh	r1, [r0, #12]
 800694a:	6643      	str	r3, [r0, #100]	@ 0x64
 800694c:	81c2      	strh	r2, [r0, #14]
 800694e:	6183      	str	r3, [r0, #24]
 8006950:	4619      	mov	r1, r3
 8006952:	2208      	movs	r2, #8
 8006954:	305c      	adds	r0, #92	@ 0x5c
 8006956:	f000 f914 	bl	8006b82 <memset>
 800695a:	4b0d      	ldr	r3, [pc, #52]	@ (8006990 <std+0x58>)
 800695c:	6263      	str	r3, [r4, #36]	@ 0x24
 800695e:	4b0d      	ldr	r3, [pc, #52]	@ (8006994 <std+0x5c>)
 8006960:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006962:	4b0d      	ldr	r3, [pc, #52]	@ (8006998 <std+0x60>)
 8006964:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006966:	4b0d      	ldr	r3, [pc, #52]	@ (800699c <std+0x64>)
 8006968:	6323      	str	r3, [r4, #48]	@ 0x30
 800696a:	4b0d      	ldr	r3, [pc, #52]	@ (80069a0 <std+0x68>)
 800696c:	6224      	str	r4, [r4, #32]
 800696e:	429c      	cmp	r4, r3
 8006970:	d006      	beq.n	8006980 <std+0x48>
 8006972:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006976:	4294      	cmp	r4, r2
 8006978:	d002      	beq.n	8006980 <std+0x48>
 800697a:	33d0      	adds	r3, #208	@ 0xd0
 800697c:	429c      	cmp	r4, r3
 800697e:	d105      	bne.n	800698c <std+0x54>
 8006980:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006988:	f000 b978 	b.w	8006c7c <__retarget_lock_init_recursive>
 800698c:	bd10      	pop	{r4, pc}
 800698e:	bf00      	nop
 8006990:	08006afd 	.word	0x08006afd
 8006994:	08006b1f 	.word	0x08006b1f
 8006998:	08006b57 	.word	0x08006b57
 800699c:	08006b7b 	.word	0x08006b7b
 80069a0:	200003ac 	.word	0x200003ac

080069a4 <stdio_exit_handler>:
 80069a4:	4a02      	ldr	r2, [pc, #8]	@ (80069b0 <stdio_exit_handler+0xc>)
 80069a6:	4903      	ldr	r1, [pc, #12]	@ (80069b4 <stdio_exit_handler+0x10>)
 80069a8:	4803      	ldr	r0, [pc, #12]	@ (80069b8 <stdio_exit_handler+0x14>)
 80069aa:	f000 b869 	b.w	8006a80 <_fwalk_sglue>
 80069ae:	bf00      	nop
 80069b0:	20000018 	.word	0x20000018
 80069b4:	08008501 	.word	0x08008501
 80069b8:	20000028 	.word	0x20000028

080069bc <cleanup_stdio>:
 80069bc:	6841      	ldr	r1, [r0, #4]
 80069be:	4b0c      	ldr	r3, [pc, #48]	@ (80069f0 <cleanup_stdio+0x34>)
 80069c0:	4299      	cmp	r1, r3
 80069c2:	b510      	push	{r4, lr}
 80069c4:	4604      	mov	r4, r0
 80069c6:	d001      	beq.n	80069cc <cleanup_stdio+0x10>
 80069c8:	f001 fd9a 	bl	8008500 <_fflush_r>
 80069cc:	68a1      	ldr	r1, [r4, #8]
 80069ce:	4b09      	ldr	r3, [pc, #36]	@ (80069f4 <cleanup_stdio+0x38>)
 80069d0:	4299      	cmp	r1, r3
 80069d2:	d002      	beq.n	80069da <cleanup_stdio+0x1e>
 80069d4:	4620      	mov	r0, r4
 80069d6:	f001 fd93 	bl	8008500 <_fflush_r>
 80069da:	68e1      	ldr	r1, [r4, #12]
 80069dc:	4b06      	ldr	r3, [pc, #24]	@ (80069f8 <cleanup_stdio+0x3c>)
 80069de:	4299      	cmp	r1, r3
 80069e0:	d004      	beq.n	80069ec <cleanup_stdio+0x30>
 80069e2:	4620      	mov	r0, r4
 80069e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069e8:	f001 bd8a 	b.w	8008500 <_fflush_r>
 80069ec:	bd10      	pop	{r4, pc}
 80069ee:	bf00      	nop
 80069f0:	200003ac 	.word	0x200003ac
 80069f4:	20000414 	.word	0x20000414
 80069f8:	2000047c 	.word	0x2000047c

080069fc <global_stdio_init.part.0>:
 80069fc:	b510      	push	{r4, lr}
 80069fe:	4b0b      	ldr	r3, [pc, #44]	@ (8006a2c <global_stdio_init.part.0+0x30>)
 8006a00:	4c0b      	ldr	r4, [pc, #44]	@ (8006a30 <global_stdio_init.part.0+0x34>)
 8006a02:	4a0c      	ldr	r2, [pc, #48]	@ (8006a34 <global_stdio_init.part.0+0x38>)
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	4620      	mov	r0, r4
 8006a08:	2200      	movs	r2, #0
 8006a0a:	2104      	movs	r1, #4
 8006a0c:	f7ff ff94 	bl	8006938 <std>
 8006a10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006a14:	2201      	movs	r2, #1
 8006a16:	2109      	movs	r1, #9
 8006a18:	f7ff ff8e 	bl	8006938 <std>
 8006a1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a20:	2202      	movs	r2, #2
 8006a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a26:	2112      	movs	r1, #18
 8006a28:	f7ff bf86 	b.w	8006938 <std>
 8006a2c:	200004e4 	.word	0x200004e4
 8006a30:	200003ac 	.word	0x200003ac
 8006a34:	080069a5 	.word	0x080069a5

08006a38 <__sfp_lock_acquire>:
 8006a38:	4801      	ldr	r0, [pc, #4]	@ (8006a40 <__sfp_lock_acquire+0x8>)
 8006a3a:	f000 b920 	b.w	8006c7e <__retarget_lock_acquire_recursive>
 8006a3e:	bf00      	nop
 8006a40:	200004ed 	.word	0x200004ed

08006a44 <__sfp_lock_release>:
 8006a44:	4801      	ldr	r0, [pc, #4]	@ (8006a4c <__sfp_lock_release+0x8>)
 8006a46:	f000 b91b 	b.w	8006c80 <__retarget_lock_release_recursive>
 8006a4a:	bf00      	nop
 8006a4c:	200004ed 	.word	0x200004ed

08006a50 <__sinit>:
 8006a50:	b510      	push	{r4, lr}
 8006a52:	4604      	mov	r4, r0
 8006a54:	f7ff fff0 	bl	8006a38 <__sfp_lock_acquire>
 8006a58:	6a23      	ldr	r3, [r4, #32]
 8006a5a:	b11b      	cbz	r3, 8006a64 <__sinit+0x14>
 8006a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a60:	f7ff bff0 	b.w	8006a44 <__sfp_lock_release>
 8006a64:	4b04      	ldr	r3, [pc, #16]	@ (8006a78 <__sinit+0x28>)
 8006a66:	6223      	str	r3, [r4, #32]
 8006a68:	4b04      	ldr	r3, [pc, #16]	@ (8006a7c <__sinit+0x2c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1f5      	bne.n	8006a5c <__sinit+0xc>
 8006a70:	f7ff ffc4 	bl	80069fc <global_stdio_init.part.0>
 8006a74:	e7f2      	b.n	8006a5c <__sinit+0xc>
 8006a76:	bf00      	nop
 8006a78:	080069bd 	.word	0x080069bd
 8006a7c:	200004e4 	.word	0x200004e4

08006a80 <_fwalk_sglue>:
 8006a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a84:	4607      	mov	r7, r0
 8006a86:	4688      	mov	r8, r1
 8006a88:	4614      	mov	r4, r2
 8006a8a:	2600      	movs	r6, #0
 8006a8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a90:	f1b9 0901 	subs.w	r9, r9, #1
 8006a94:	d505      	bpl.n	8006aa2 <_fwalk_sglue+0x22>
 8006a96:	6824      	ldr	r4, [r4, #0]
 8006a98:	2c00      	cmp	r4, #0
 8006a9a:	d1f7      	bne.n	8006a8c <_fwalk_sglue+0xc>
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aa2:	89ab      	ldrh	r3, [r5, #12]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d907      	bls.n	8006ab8 <_fwalk_sglue+0x38>
 8006aa8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006aac:	3301      	adds	r3, #1
 8006aae:	d003      	beq.n	8006ab8 <_fwalk_sglue+0x38>
 8006ab0:	4629      	mov	r1, r5
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	47c0      	blx	r8
 8006ab6:	4306      	orrs	r6, r0
 8006ab8:	3568      	adds	r5, #104	@ 0x68
 8006aba:	e7e9      	b.n	8006a90 <_fwalk_sglue+0x10>

08006abc <siprintf>:
 8006abc:	b40e      	push	{r1, r2, r3}
 8006abe:	b500      	push	{lr}
 8006ac0:	b09c      	sub	sp, #112	@ 0x70
 8006ac2:	ab1d      	add	r3, sp, #116	@ 0x74
 8006ac4:	9002      	str	r0, [sp, #8]
 8006ac6:	9006      	str	r0, [sp, #24]
 8006ac8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006acc:	4809      	ldr	r0, [pc, #36]	@ (8006af4 <siprintf+0x38>)
 8006ace:	9107      	str	r1, [sp, #28]
 8006ad0:	9104      	str	r1, [sp, #16]
 8006ad2:	4909      	ldr	r1, [pc, #36]	@ (8006af8 <siprintf+0x3c>)
 8006ad4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ad8:	9105      	str	r1, [sp, #20]
 8006ada:	6800      	ldr	r0, [r0, #0]
 8006adc:	9301      	str	r3, [sp, #4]
 8006ade:	a902      	add	r1, sp, #8
 8006ae0:	f001 fb8e 	bl	8008200 <_svfiprintf_r>
 8006ae4:	9b02      	ldr	r3, [sp, #8]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	701a      	strb	r2, [r3, #0]
 8006aea:	b01c      	add	sp, #112	@ 0x70
 8006aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8006af0:	b003      	add	sp, #12
 8006af2:	4770      	bx	lr
 8006af4:	20000024 	.word	0x20000024
 8006af8:	ffff0208 	.word	0xffff0208

08006afc <__sread>:
 8006afc:	b510      	push	{r4, lr}
 8006afe:	460c      	mov	r4, r1
 8006b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b04:	f000 f86c 	bl	8006be0 <_read_r>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	bfab      	itete	ge
 8006b0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8006b10:	181b      	addge	r3, r3, r0
 8006b12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b16:	bfac      	ite	ge
 8006b18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b1a:	81a3      	strhlt	r3, [r4, #12]
 8006b1c:	bd10      	pop	{r4, pc}

08006b1e <__swrite>:
 8006b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b22:	461f      	mov	r7, r3
 8006b24:	898b      	ldrh	r3, [r1, #12]
 8006b26:	05db      	lsls	r3, r3, #23
 8006b28:	4605      	mov	r5, r0
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	4616      	mov	r6, r2
 8006b2e:	d505      	bpl.n	8006b3c <__swrite+0x1e>
 8006b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b34:	2302      	movs	r3, #2
 8006b36:	2200      	movs	r2, #0
 8006b38:	f000 f840 	bl	8006bbc <_lseek_r>
 8006b3c:	89a3      	ldrh	r3, [r4, #12]
 8006b3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b46:	81a3      	strh	r3, [r4, #12]
 8006b48:	4632      	mov	r2, r6
 8006b4a:	463b      	mov	r3, r7
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b52:	f000 b857 	b.w	8006c04 <_write_r>

08006b56 <__sseek>:
 8006b56:	b510      	push	{r4, lr}
 8006b58:	460c      	mov	r4, r1
 8006b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b5e:	f000 f82d 	bl	8006bbc <_lseek_r>
 8006b62:	1c43      	adds	r3, r0, #1
 8006b64:	89a3      	ldrh	r3, [r4, #12]
 8006b66:	bf15      	itete	ne
 8006b68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b72:	81a3      	strheq	r3, [r4, #12]
 8006b74:	bf18      	it	ne
 8006b76:	81a3      	strhne	r3, [r4, #12]
 8006b78:	bd10      	pop	{r4, pc}

08006b7a <__sclose>:
 8006b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b7e:	f000 b80d 	b.w	8006b9c <_close_r>

08006b82 <memset>:
 8006b82:	4402      	add	r2, r0
 8006b84:	4603      	mov	r3, r0
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d100      	bne.n	8006b8c <memset+0xa>
 8006b8a:	4770      	bx	lr
 8006b8c:	f803 1b01 	strb.w	r1, [r3], #1
 8006b90:	e7f9      	b.n	8006b86 <memset+0x4>
	...

08006b94 <_localeconv_r>:
 8006b94:	4800      	ldr	r0, [pc, #0]	@ (8006b98 <_localeconv_r+0x4>)
 8006b96:	4770      	bx	lr
 8006b98:	20000164 	.word	0x20000164

08006b9c <_close_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	4d06      	ldr	r5, [pc, #24]	@ (8006bb8 <_close_r+0x1c>)
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	4608      	mov	r0, r1
 8006ba6:	602b      	str	r3, [r5, #0]
 8006ba8:	f7fa fcd0 	bl	800154c <_close>
 8006bac:	1c43      	adds	r3, r0, #1
 8006bae:	d102      	bne.n	8006bb6 <_close_r+0x1a>
 8006bb0:	682b      	ldr	r3, [r5, #0]
 8006bb2:	b103      	cbz	r3, 8006bb6 <_close_r+0x1a>
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	bd38      	pop	{r3, r4, r5, pc}
 8006bb8:	200004e8 	.word	0x200004e8

08006bbc <_lseek_r>:
 8006bbc:	b538      	push	{r3, r4, r5, lr}
 8006bbe:	4d07      	ldr	r5, [pc, #28]	@ (8006bdc <_lseek_r+0x20>)
 8006bc0:	4604      	mov	r4, r0
 8006bc2:	4608      	mov	r0, r1
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	602a      	str	r2, [r5, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	f7fa fce5 	bl	800159a <_lseek>
 8006bd0:	1c43      	adds	r3, r0, #1
 8006bd2:	d102      	bne.n	8006bda <_lseek_r+0x1e>
 8006bd4:	682b      	ldr	r3, [r5, #0]
 8006bd6:	b103      	cbz	r3, 8006bda <_lseek_r+0x1e>
 8006bd8:	6023      	str	r3, [r4, #0]
 8006bda:	bd38      	pop	{r3, r4, r5, pc}
 8006bdc:	200004e8 	.word	0x200004e8

08006be0 <_read_r>:
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	4d07      	ldr	r5, [pc, #28]	@ (8006c00 <_read_r+0x20>)
 8006be4:	4604      	mov	r4, r0
 8006be6:	4608      	mov	r0, r1
 8006be8:	4611      	mov	r1, r2
 8006bea:	2200      	movs	r2, #0
 8006bec:	602a      	str	r2, [r5, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	f7fa fc73 	bl	80014da <_read>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	d102      	bne.n	8006bfe <_read_r+0x1e>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	b103      	cbz	r3, 8006bfe <_read_r+0x1e>
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	bd38      	pop	{r3, r4, r5, pc}
 8006c00:	200004e8 	.word	0x200004e8

08006c04 <_write_r>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	4d07      	ldr	r5, [pc, #28]	@ (8006c24 <_write_r+0x20>)
 8006c08:	4604      	mov	r4, r0
 8006c0a:	4608      	mov	r0, r1
 8006c0c:	4611      	mov	r1, r2
 8006c0e:	2200      	movs	r2, #0
 8006c10:	602a      	str	r2, [r5, #0]
 8006c12:	461a      	mov	r2, r3
 8006c14:	f7fa fc7e 	bl	8001514 <_write>
 8006c18:	1c43      	adds	r3, r0, #1
 8006c1a:	d102      	bne.n	8006c22 <_write_r+0x1e>
 8006c1c:	682b      	ldr	r3, [r5, #0]
 8006c1e:	b103      	cbz	r3, 8006c22 <_write_r+0x1e>
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	bd38      	pop	{r3, r4, r5, pc}
 8006c24:	200004e8 	.word	0x200004e8

08006c28 <__errno>:
 8006c28:	4b01      	ldr	r3, [pc, #4]	@ (8006c30 <__errno+0x8>)
 8006c2a:	6818      	ldr	r0, [r3, #0]
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	20000024 	.word	0x20000024

08006c34 <__libc_init_array>:
 8006c34:	b570      	push	{r4, r5, r6, lr}
 8006c36:	4d0d      	ldr	r5, [pc, #52]	@ (8006c6c <__libc_init_array+0x38>)
 8006c38:	4c0d      	ldr	r4, [pc, #52]	@ (8006c70 <__libc_init_array+0x3c>)
 8006c3a:	1b64      	subs	r4, r4, r5
 8006c3c:	10a4      	asrs	r4, r4, #2
 8006c3e:	2600      	movs	r6, #0
 8006c40:	42a6      	cmp	r6, r4
 8006c42:	d109      	bne.n	8006c58 <__libc_init_array+0x24>
 8006c44:	4d0b      	ldr	r5, [pc, #44]	@ (8006c74 <__libc_init_array+0x40>)
 8006c46:	4c0c      	ldr	r4, [pc, #48]	@ (8006c78 <__libc_init_array+0x44>)
 8006c48:	f001 fff8 	bl	8008c3c <_init>
 8006c4c:	1b64      	subs	r4, r4, r5
 8006c4e:	10a4      	asrs	r4, r4, #2
 8006c50:	2600      	movs	r6, #0
 8006c52:	42a6      	cmp	r6, r4
 8006c54:	d105      	bne.n	8006c62 <__libc_init_array+0x2e>
 8006c56:	bd70      	pop	{r4, r5, r6, pc}
 8006c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c5c:	4798      	blx	r3
 8006c5e:	3601      	adds	r6, #1
 8006c60:	e7ee      	b.n	8006c40 <__libc_init_array+0xc>
 8006c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c66:	4798      	blx	r3
 8006c68:	3601      	adds	r6, #1
 8006c6a:	e7f2      	b.n	8006c52 <__libc_init_array+0x1e>
 8006c6c:	080092b0 	.word	0x080092b0
 8006c70:	080092b0 	.word	0x080092b0
 8006c74:	080092b0 	.word	0x080092b0
 8006c78:	080092b4 	.word	0x080092b4

08006c7c <__retarget_lock_init_recursive>:
 8006c7c:	4770      	bx	lr

08006c7e <__retarget_lock_acquire_recursive>:
 8006c7e:	4770      	bx	lr

08006c80 <__retarget_lock_release_recursive>:
 8006c80:	4770      	bx	lr

08006c82 <quorem>:
 8006c82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c86:	6903      	ldr	r3, [r0, #16]
 8006c88:	690c      	ldr	r4, [r1, #16]
 8006c8a:	42a3      	cmp	r3, r4
 8006c8c:	4607      	mov	r7, r0
 8006c8e:	db7e      	blt.n	8006d8e <quorem+0x10c>
 8006c90:	3c01      	subs	r4, #1
 8006c92:	f101 0814 	add.w	r8, r1, #20
 8006c96:	00a3      	lsls	r3, r4, #2
 8006c98:	f100 0514 	add.w	r5, r0, #20
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ca2:	9301      	str	r3, [sp, #4]
 8006ca4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ca8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cac:	3301      	adds	r3, #1
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006cb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006cb8:	d32e      	bcc.n	8006d18 <quorem+0x96>
 8006cba:	f04f 0a00 	mov.w	sl, #0
 8006cbe:	46c4      	mov	ip, r8
 8006cc0:	46ae      	mov	lr, r5
 8006cc2:	46d3      	mov	fp, sl
 8006cc4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006cc8:	b298      	uxth	r0, r3
 8006cca:	fb06 a000 	mla	r0, r6, r0, sl
 8006cce:	0c02      	lsrs	r2, r0, #16
 8006cd0:	0c1b      	lsrs	r3, r3, #16
 8006cd2:	fb06 2303 	mla	r3, r6, r3, r2
 8006cd6:	f8de 2000 	ldr.w	r2, [lr]
 8006cda:	b280      	uxth	r0, r0
 8006cdc:	b292      	uxth	r2, r2
 8006cde:	1a12      	subs	r2, r2, r0
 8006ce0:	445a      	add	r2, fp
 8006ce2:	f8de 0000 	ldr.w	r0, [lr]
 8006ce6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006cf0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006cf4:	b292      	uxth	r2, r2
 8006cf6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006cfa:	45e1      	cmp	r9, ip
 8006cfc:	f84e 2b04 	str.w	r2, [lr], #4
 8006d00:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006d04:	d2de      	bcs.n	8006cc4 <quorem+0x42>
 8006d06:	9b00      	ldr	r3, [sp, #0]
 8006d08:	58eb      	ldr	r3, [r5, r3]
 8006d0a:	b92b      	cbnz	r3, 8006d18 <quorem+0x96>
 8006d0c:	9b01      	ldr	r3, [sp, #4]
 8006d0e:	3b04      	subs	r3, #4
 8006d10:	429d      	cmp	r5, r3
 8006d12:	461a      	mov	r2, r3
 8006d14:	d32f      	bcc.n	8006d76 <quorem+0xf4>
 8006d16:	613c      	str	r4, [r7, #16]
 8006d18:	4638      	mov	r0, r7
 8006d1a:	f001 f90d 	bl	8007f38 <__mcmp>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	db25      	blt.n	8006d6e <quorem+0xec>
 8006d22:	4629      	mov	r1, r5
 8006d24:	2000      	movs	r0, #0
 8006d26:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d2a:	f8d1 c000 	ldr.w	ip, [r1]
 8006d2e:	fa1f fe82 	uxth.w	lr, r2
 8006d32:	fa1f f38c 	uxth.w	r3, ip
 8006d36:	eba3 030e 	sub.w	r3, r3, lr
 8006d3a:	4403      	add	r3, r0
 8006d3c:	0c12      	lsrs	r2, r2, #16
 8006d3e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006d42:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d4c:	45c1      	cmp	r9, r8
 8006d4e:	f841 3b04 	str.w	r3, [r1], #4
 8006d52:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006d56:	d2e6      	bcs.n	8006d26 <quorem+0xa4>
 8006d58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d60:	b922      	cbnz	r2, 8006d6c <quorem+0xea>
 8006d62:	3b04      	subs	r3, #4
 8006d64:	429d      	cmp	r5, r3
 8006d66:	461a      	mov	r2, r3
 8006d68:	d30b      	bcc.n	8006d82 <quorem+0x100>
 8006d6a:	613c      	str	r4, [r7, #16]
 8006d6c:	3601      	adds	r6, #1
 8006d6e:	4630      	mov	r0, r6
 8006d70:	b003      	add	sp, #12
 8006d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d76:	6812      	ldr	r2, [r2, #0]
 8006d78:	3b04      	subs	r3, #4
 8006d7a:	2a00      	cmp	r2, #0
 8006d7c:	d1cb      	bne.n	8006d16 <quorem+0x94>
 8006d7e:	3c01      	subs	r4, #1
 8006d80:	e7c6      	b.n	8006d10 <quorem+0x8e>
 8006d82:	6812      	ldr	r2, [r2, #0]
 8006d84:	3b04      	subs	r3, #4
 8006d86:	2a00      	cmp	r2, #0
 8006d88:	d1ef      	bne.n	8006d6a <quorem+0xe8>
 8006d8a:	3c01      	subs	r4, #1
 8006d8c:	e7ea      	b.n	8006d64 <quorem+0xe2>
 8006d8e:	2000      	movs	r0, #0
 8006d90:	e7ee      	b.n	8006d70 <quorem+0xee>
 8006d92:	0000      	movs	r0, r0
 8006d94:	0000      	movs	r0, r0
	...

08006d98 <_dtoa_r>:
 8006d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d9c:	ed2d 8b02 	vpush	{d8}
 8006da0:	69c7      	ldr	r7, [r0, #28]
 8006da2:	b091      	sub	sp, #68	@ 0x44
 8006da4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006da8:	ec55 4b10 	vmov	r4, r5, d0
 8006dac:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8006dae:	9107      	str	r1, [sp, #28]
 8006db0:	4681      	mov	r9, r0
 8006db2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006db4:	930d      	str	r3, [sp, #52]	@ 0x34
 8006db6:	b97f      	cbnz	r7, 8006dd8 <_dtoa_r+0x40>
 8006db8:	2010      	movs	r0, #16
 8006dba:	f000 fd8d 	bl	80078d8 <malloc>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	f8c9 001c 	str.w	r0, [r9, #28]
 8006dc4:	b920      	cbnz	r0, 8006dd0 <_dtoa_r+0x38>
 8006dc6:	4ba0      	ldr	r3, [pc, #640]	@ (8007048 <_dtoa_r+0x2b0>)
 8006dc8:	21ef      	movs	r1, #239	@ 0xef
 8006dca:	48a0      	ldr	r0, [pc, #640]	@ (800704c <_dtoa_r+0x2b4>)
 8006dcc:	f001 fbf8 	bl	80085c0 <__assert_func>
 8006dd0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006dd4:	6007      	str	r7, [r0, #0]
 8006dd6:	60c7      	str	r7, [r0, #12]
 8006dd8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006ddc:	6819      	ldr	r1, [r3, #0]
 8006dde:	b159      	cbz	r1, 8006df8 <_dtoa_r+0x60>
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	604a      	str	r2, [r1, #4]
 8006de4:	2301      	movs	r3, #1
 8006de6:	4093      	lsls	r3, r2
 8006de8:	608b      	str	r3, [r1, #8]
 8006dea:	4648      	mov	r0, r9
 8006dec:	f000 fe6a 	bl	8007ac4 <_Bfree>
 8006df0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006df4:	2200      	movs	r2, #0
 8006df6:	601a      	str	r2, [r3, #0]
 8006df8:	1e2b      	subs	r3, r5, #0
 8006dfa:	bfbb      	ittet	lt
 8006dfc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006e00:	9303      	strlt	r3, [sp, #12]
 8006e02:	2300      	movge	r3, #0
 8006e04:	2201      	movlt	r2, #1
 8006e06:	bfac      	ite	ge
 8006e08:	6033      	strge	r3, [r6, #0]
 8006e0a:	6032      	strlt	r2, [r6, #0]
 8006e0c:	4b90      	ldr	r3, [pc, #576]	@ (8007050 <_dtoa_r+0x2b8>)
 8006e0e:	9e03      	ldr	r6, [sp, #12]
 8006e10:	43b3      	bics	r3, r6
 8006e12:	d110      	bne.n	8006e36 <_dtoa_r+0x9e>
 8006e14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006e16:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006e1a:	6013      	str	r3, [r2, #0]
 8006e1c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8006e20:	4323      	orrs	r3, r4
 8006e22:	f000 84de 	beq.w	80077e2 <_dtoa_r+0xa4a>
 8006e26:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006e28:	4f8a      	ldr	r7, [pc, #552]	@ (8007054 <_dtoa_r+0x2bc>)
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f000 84e0 	beq.w	80077f0 <_dtoa_r+0xa58>
 8006e30:	1cfb      	adds	r3, r7, #3
 8006e32:	f000 bcdb 	b.w	80077ec <_dtoa_r+0xa54>
 8006e36:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006e3a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e42:	d10a      	bne.n	8006e5a <_dtoa_r+0xc2>
 8006e44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006e46:	2301      	movs	r3, #1
 8006e48:	6013      	str	r3, [r2, #0]
 8006e4a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006e4c:	b113      	cbz	r3, 8006e54 <_dtoa_r+0xbc>
 8006e4e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8006e50:	4b81      	ldr	r3, [pc, #516]	@ (8007058 <_dtoa_r+0x2c0>)
 8006e52:	6013      	str	r3, [r2, #0]
 8006e54:	4f81      	ldr	r7, [pc, #516]	@ (800705c <_dtoa_r+0x2c4>)
 8006e56:	f000 bccb 	b.w	80077f0 <_dtoa_r+0xa58>
 8006e5a:	aa0e      	add	r2, sp, #56	@ 0x38
 8006e5c:	a90f      	add	r1, sp, #60	@ 0x3c
 8006e5e:	4648      	mov	r0, r9
 8006e60:	eeb0 0b48 	vmov.f64	d0, d8
 8006e64:	f001 f918 	bl	8008098 <__d2b>
 8006e68:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8006e6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e6e:	9001      	str	r0, [sp, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d045      	beq.n	8006f00 <_dtoa_r+0x168>
 8006e74:	eeb0 7b48 	vmov.f64	d7, d8
 8006e78:	ee18 1a90 	vmov	r1, s17
 8006e7c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006e80:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8006e84:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006e88:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8006e8c:	2500      	movs	r5, #0
 8006e8e:	ee07 1a90 	vmov	s15, r1
 8006e92:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8006e96:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007030 <_dtoa_r+0x298>
 8006e9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006e9e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007038 <_dtoa_r+0x2a0>
 8006ea2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006ea6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007040 <_dtoa_r+0x2a8>
 8006eaa:	ee07 3a90 	vmov	s15, r3
 8006eae:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006eb2:	eeb0 7b46 	vmov.f64	d7, d6
 8006eb6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006eba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006ebe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec6:	ee16 8a90 	vmov	r8, s13
 8006eca:	d508      	bpl.n	8006ede <_dtoa_r+0x146>
 8006ecc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006ed0:	eeb4 6b47 	vcmp.f64	d6, d7
 8006ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed8:	bf18      	it	ne
 8006eda:	f108 38ff 	addne.w	r8, r8, #4294967295
 8006ede:	f1b8 0f16 	cmp.w	r8, #22
 8006ee2:	d82b      	bhi.n	8006f3c <_dtoa_r+0x1a4>
 8006ee4:	495e      	ldr	r1, [pc, #376]	@ (8007060 <_dtoa_r+0x2c8>)
 8006ee6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8006eea:	ed91 7b00 	vldr	d7, [r1]
 8006eee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ef6:	d501      	bpl.n	8006efc <_dtoa_r+0x164>
 8006ef8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006efc:	2100      	movs	r1, #0
 8006efe:	e01e      	b.n	8006f3e <_dtoa_r+0x1a6>
 8006f00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f02:	4413      	add	r3, r2
 8006f04:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8006f08:	2920      	cmp	r1, #32
 8006f0a:	bfc1      	itttt	gt
 8006f0c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8006f10:	408e      	lslgt	r6, r1
 8006f12:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8006f16:	fa24 f101 	lsrgt.w	r1, r4, r1
 8006f1a:	bfd6      	itet	le
 8006f1c:	f1c1 0120 	rsble	r1, r1, #32
 8006f20:	4331      	orrgt	r1, r6
 8006f22:	fa04 f101 	lslle.w	r1, r4, r1
 8006f26:	ee07 1a90 	vmov	s15, r1
 8006f2a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	ee17 1a90 	vmov	r1, s15
 8006f34:	2501      	movs	r5, #1
 8006f36:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8006f3a:	e7a8      	b.n	8006e8e <_dtoa_r+0xf6>
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	1ad2      	subs	r2, r2, r3
 8006f40:	1e53      	subs	r3, r2, #1
 8006f42:	9306      	str	r3, [sp, #24]
 8006f44:	bf45      	ittet	mi
 8006f46:	f1c2 0301 	rsbmi	r3, r2, #1
 8006f4a:	9305      	strmi	r3, [sp, #20]
 8006f4c:	2300      	movpl	r3, #0
 8006f4e:	2300      	movmi	r3, #0
 8006f50:	bf4c      	ite	mi
 8006f52:	9306      	strmi	r3, [sp, #24]
 8006f54:	9305      	strpl	r3, [sp, #20]
 8006f56:	f1b8 0f00 	cmp.w	r8, #0
 8006f5a:	910c      	str	r1, [sp, #48]	@ 0x30
 8006f5c:	db18      	blt.n	8006f90 <_dtoa_r+0x1f8>
 8006f5e:	9b06      	ldr	r3, [sp, #24]
 8006f60:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006f64:	4443      	add	r3, r8
 8006f66:	9306      	str	r3, [sp, #24]
 8006f68:	2300      	movs	r3, #0
 8006f6a:	9a07      	ldr	r2, [sp, #28]
 8006f6c:	2a09      	cmp	r2, #9
 8006f6e:	d849      	bhi.n	8007004 <_dtoa_r+0x26c>
 8006f70:	2a05      	cmp	r2, #5
 8006f72:	bfc4      	itt	gt
 8006f74:	3a04      	subgt	r2, #4
 8006f76:	9207      	strgt	r2, [sp, #28]
 8006f78:	9a07      	ldr	r2, [sp, #28]
 8006f7a:	f1a2 0202 	sub.w	r2, r2, #2
 8006f7e:	bfcc      	ite	gt
 8006f80:	2400      	movgt	r4, #0
 8006f82:	2401      	movle	r4, #1
 8006f84:	2a03      	cmp	r2, #3
 8006f86:	d848      	bhi.n	800701a <_dtoa_r+0x282>
 8006f88:	e8df f002 	tbb	[pc, r2]
 8006f8c:	3a2c2e0b 	.word	0x3a2c2e0b
 8006f90:	9b05      	ldr	r3, [sp, #20]
 8006f92:	2200      	movs	r2, #0
 8006f94:	eba3 0308 	sub.w	r3, r3, r8
 8006f98:	9305      	str	r3, [sp, #20]
 8006f9a:	920a      	str	r2, [sp, #40]	@ 0x28
 8006f9c:	f1c8 0300 	rsb	r3, r8, #0
 8006fa0:	e7e3      	b.n	8006f6a <_dtoa_r+0x1d2>
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	9208      	str	r2, [sp, #32]
 8006fa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fa8:	2a00      	cmp	r2, #0
 8006faa:	dc39      	bgt.n	8007020 <_dtoa_r+0x288>
 8006fac:	f04f 0b01 	mov.w	fp, #1
 8006fb0:	46da      	mov	sl, fp
 8006fb2:	465a      	mov	r2, fp
 8006fb4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8006fb8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	2004      	movs	r0, #4
 8006fc0:	f100 0614 	add.w	r6, r0, #20
 8006fc4:	4296      	cmp	r6, r2
 8006fc6:	d930      	bls.n	800702a <_dtoa_r+0x292>
 8006fc8:	6079      	str	r1, [r7, #4]
 8006fca:	4648      	mov	r0, r9
 8006fcc:	9304      	str	r3, [sp, #16]
 8006fce:	f000 fd39 	bl	8007a44 <_Balloc>
 8006fd2:	9b04      	ldr	r3, [sp, #16]
 8006fd4:	4607      	mov	r7, r0
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d146      	bne.n	8007068 <_dtoa_r+0x2d0>
 8006fda:	4b22      	ldr	r3, [pc, #136]	@ (8007064 <_dtoa_r+0x2cc>)
 8006fdc:	4602      	mov	r2, r0
 8006fde:	f240 11af 	movw	r1, #431	@ 0x1af
 8006fe2:	e6f2      	b.n	8006dca <_dtoa_r+0x32>
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	e7dd      	b.n	8006fa4 <_dtoa_r+0x20c>
 8006fe8:	2200      	movs	r2, #0
 8006fea:	9208      	str	r2, [sp, #32]
 8006fec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fee:	eb08 0b02 	add.w	fp, r8, r2
 8006ff2:	f10b 0a01 	add.w	sl, fp, #1
 8006ff6:	4652      	mov	r2, sl
 8006ff8:	2a01      	cmp	r2, #1
 8006ffa:	bfb8      	it	lt
 8006ffc:	2201      	movlt	r2, #1
 8006ffe:	e7db      	b.n	8006fb8 <_dtoa_r+0x220>
 8007000:	2201      	movs	r2, #1
 8007002:	e7f2      	b.n	8006fea <_dtoa_r+0x252>
 8007004:	2401      	movs	r4, #1
 8007006:	2200      	movs	r2, #0
 8007008:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800700c:	f04f 3bff 	mov.w	fp, #4294967295
 8007010:	2100      	movs	r1, #0
 8007012:	46da      	mov	sl, fp
 8007014:	2212      	movs	r2, #18
 8007016:	9109      	str	r1, [sp, #36]	@ 0x24
 8007018:	e7ce      	b.n	8006fb8 <_dtoa_r+0x220>
 800701a:	2201      	movs	r2, #1
 800701c:	9208      	str	r2, [sp, #32]
 800701e:	e7f5      	b.n	800700c <_dtoa_r+0x274>
 8007020:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8007024:	46da      	mov	sl, fp
 8007026:	465a      	mov	r2, fp
 8007028:	e7c6      	b.n	8006fb8 <_dtoa_r+0x220>
 800702a:	3101      	adds	r1, #1
 800702c:	0040      	lsls	r0, r0, #1
 800702e:	e7c7      	b.n	8006fc0 <_dtoa_r+0x228>
 8007030:	636f4361 	.word	0x636f4361
 8007034:	3fd287a7 	.word	0x3fd287a7
 8007038:	8b60c8b3 	.word	0x8b60c8b3
 800703c:	3fc68a28 	.word	0x3fc68a28
 8007040:	509f79fb 	.word	0x509f79fb
 8007044:	3fd34413 	.word	0x3fd34413
 8007048:	08008f79 	.word	0x08008f79
 800704c:	08008f90 	.word	0x08008f90
 8007050:	7ff00000 	.word	0x7ff00000
 8007054:	08008f75 	.word	0x08008f75
 8007058:	08008f49 	.word	0x08008f49
 800705c:	08008f48 	.word	0x08008f48
 8007060:	08009088 	.word	0x08009088
 8007064:	08008fe8 	.word	0x08008fe8
 8007068:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800706c:	f1ba 0f0e 	cmp.w	sl, #14
 8007070:	6010      	str	r0, [r2, #0]
 8007072:	d86f      	bhi.n	8007154 <_dtoa_r+0x3bc>
 8007074:	2c00      	cmp	r4, #0
 8007076:	d06d      	beq.n	8007154 <_dtoa_r+0x3bc>
 8007078:	f1b8 0f00 	cmp.w	r8, #0
 800707c:	f340 80c2 	ble.w	8007204 <_dtoa_r+0x46c>
 8007080:	4aca      	ldr	r2, [pc, #808]	@ (80073ac <_dtoa_r+0x614>)
 8007082:	f008 010f 	and.w	r1, r8, #15
 8007086:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800708a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800708e:	ed92 7b00 	vldr	d7, [r2]
 8007092:	ea4f 1128 	mov.w	r1, r8, asr #4
 8007096:	f000 80a9 	beq.w	80071ec <_dtoa_r+0x454>
 800709a:	4ac5      	ldr	r2, [pc, #788]	@ (80073b0 <_dtoa_r+0x618>)
 800709c:	ed92 6b08 	vldr	d6, [r2, #32]
 80070a0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80070a4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80070a8:	f001 010f 	and.w	r1, r1, #15
 80070ac:	2203      	movs	r2, #3
 80070ae:	48c0      	ldr	r0, [pc, #768]	@ (80073b0 <_dtoa_r+0x618>)
 80070b0:	2900      	cmp	r1, #0
 80070b2:	f040 809d 	bne.w	80071f0 <_dtoa_r+0x458>
 80070b6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80070ba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80070be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80070c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80070c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070c8:	2900      	cmp	r1, #0
 80070ca:	f000 80c1 	beq.w	8007250 <_dtoa_r+0x4b8>
 80070ce:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80070d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80070d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070da:	f140 80b9 	bpl.w	8007250 <_dtoa_r+0x4b8>
 80070de:	f1ba 0f00 	cmp.w	sl, #0
 80070e2:	f000 80b5 	beq.w	8007250 <_dtoa_r+0x4b8>
 80070e6:	f1bb 0f00 	cmp.w	fp, #0
 80070ea:	dd31      	ble.n	8007150 <_dtoa_r+0x3b8>
 80070ec:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80070f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80070f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80070f8:	f108 31ff 	add.w	r1, r8, #4294967295
 80070fc:	9104      	str	r1, [sp, #16]
 80070fe:	3201      	adds	r2, #1
 8007100:	465c      	mov	r4, fp
 8007102:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007106:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800710a:	ee07 2a90 	vmov	s15, r2
 800710e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007112:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007116:	ee15 2a90 	vmov	r2, s11
 800711a:	ec51 0b15 	vmov	r0, r1, d5
 800711e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8007122:	2c00      	cmp	r4, #0
 8007124:	f040 8098 	bne.w	8007258 <_dtoa_r+0x4c0>
 8007128:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800712c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007130:	ec41 0b17 	vmov	d7, r0, r1
 8007134:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800713c:	f300 8261 	bgt.w	8007602 <_dtoa_r+0x86a>
 8007140:	eeb1 7b47 	vneg.f64	d7, d7
 8007144:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800714c:	f100 80f5 	bmi.w	800733a <_dtoa_r+0x5a2>
 8007150:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007154:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007156:	2a00      	cmp	r2, #0
 8007158:	f2c0 812c 	blt.w	80073b4 <_dtoa_r+0x61c>
 800715c:	f1b8 0f0e 	cmp.w	r8, #14
 8007160:	f300 8128 	bgt.w	80073b4 <_dtoa_r+0x61c>
 8007164:	4b91      	ldr	r3, [pc, #580]	@ (80073ac <_dtoa_r+0x614>)
 8007166:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800716a:	ed93 6b00 	vldr	d6, [r3]
 800716e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007170:	2b00      	cmp	r3, #0
 8007172:	da03      	bge.n	800717c <_dtoa_r+0x3e4>
 8007174:	f1ba 0f00 	cmp.w	sl, #0
 8007178:	f340 80d2 	ble.w	8007320 <_dtoa_r+0x588>
 800717c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8007180:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007184:	463e      	mov	r6, r7
 8007186:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800718a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800718e:	ee15 3a10 	vmov	r3, s10
 8007192:	3330      	adds	r3, #48	@ 0x30
 8007194:	f806 3b01 	strb.w	r3, [r6], #1
 8007198:	1bf3      	subs	r3, r6, r7
 800719a:	459a      	cmp	sl, r3
 800719c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80071a0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80071a4:	f040 80f8 	bne.w	8007398 <_dtoa_r+0x600>
 80071a8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80071ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80071b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b4:	f300 80dd 	bgt.w	8007372 <_dtoa_r+0x5da>
 80071b8:	eeb4 7b46 	vcmp.f64	d7, d6
 80071bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071c0:	d104      	bne.n	80071cc <_dtoa_r+0x434>
 80071c2:	ee15 3a10 	vmov	r3, s10
 80071c6:	07db      	lsls	r3, r3, #31
 80071c8:	f100 80d3 	bmi.w	8007372 <_dtoa_r+0x5da>
 80071cc:	9901      	ldr	r1, [sp, #4]
 80071ce:	4648      	mov	r0, r9
 80071d0:	f000 fc78 	bl	8007ac4 <_Bfree>
 80071d4:	2300      	movs	r3, #0
 80071d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80071d8:	7033      	strb	r3, [r6, #0]
 80071da:	f108 0301 	add.w	r3, r8, #1
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 8304 	beq.w	80077f0 <_dtoa_r+0xa58>
 80071e8:	601e      	str	r6, [r3, #0]
 80071ea:	e301      	b.n	80077f0 <_dtoa_r+0xa58>
 80071ec:	2202      	movs	r2, #2
 80071ee:	e75e      	b.n	80070ae <_dtoa_r+0x316>
 80071f0:	07cc      	lsls	r4, r1, #31
 80071f2:	d504      	bpl.n	80071fe <_dtoa_r+0x466>
 80071f4:	ed90 6b00 	vldr	d6, [r0]
 80071f8:	3201      	adds	r2, #1
 80071fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80071fe:	1049      	asrs	r1, r1, #1
 8007200:	3008      	adds	r0, #8
 8007202:	e755      	b.n	80070b0 <_dtoa_r+0x318>
 8007204:	d022      	beq.n	800724c <_dtoa_r+0x4b4>
 8007206:	f1c8 0100 	rsb	r1, r8, #0
 800720a:	4a68      	ldr	r2, [pc, #416]	@ (80073ac <_dtoa_r+0x614>)
 800720c:	f001 000f 	and.w	r0, r1, #15
 8007210:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007214:	ed92 7b00 	vldr	d7, [r2]
 8007218:	ee28 7b07 	vmul.f64	d7, d8, d7
 800721c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007220:	4863      	ldr	r0, [pc, #396]	@ (80073b0 <_dtoa_r+0x618>)
 8007222:	1109      	asrs	r1, r1, #4
 8007224:	2400      	movs	r4, #0
 8007226:	2202      	movs	r2, #2
 8007228:	b929      	cbnz	r1, 8007236 <_dtoa_r+0x49e>
 800722a:	2c00      	cmp	r4, #0
 800722c:	f43f af49 	beq.w	80070c2 <_dtoa_r+0x32a>
 8007230:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007234:	e745      	b.n	80070c2 <_dtoa_r+0x32a>
 8007236:	07ce      	lsls	r6, r1, #31
 8007238:	d505      	bpl.n	8007246 <_dtoa_r+0x4ae>
 800723a:	ed90 6b00 	vldr	d6, [r0]
 800723e:	3201      	adds	r2, #1
 8007240:	2401      	movs	r4, #1
 8007242:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007246:	1049      	asrs	r1, r1, #1
 8007248:	3008      	adds	r0, #8
 800724a:	e7ed      	b.n	8007228 <_dtoa_r+0x490>
 800724c:	2202      	movs	r2, #2
 800724e:	e738      	b.n	80070c2 <_dtoa_r+0x32a>
 8007250:	f8cd 8010 	str.w	r8, [sp, #16]
 8007254:	4654      	mov	r4, sl
 8007256:	e754      	b.n	8007102 <_dtoa_r+0x36a>
 8007258:	4a54      	ldr	r2, [pc, #336]	@ (80073ac <_dtoa_r+0x614>)
 800725a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800725e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007262:	9a08      	ldr	r2, [sp, #32]
 8007264:	ec41 0b17 	vmov	d7, r0, r1
 8007268:	443c      	add	r4, r7
 800726a:	b34a      	cbz	r2, 80072c0 <_dtoa_r+0x528>
 800726c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8007270:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8007274:	463e      	mov	r6, r7
 8007276:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800727a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800727e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007282:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007286:	ee14 2a90 	vmov	r2, s9
 800728a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800728e:	3230      	adds	r2, #48	@ 0x30
 8007290:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007294:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800729c:	f806 2b01 	strb.w	r2, [r6], #1
 80072a0:	d438      	bmi.n	8007314 <_dtoa_r+0x57c>
 80072a2:	ee32 5b46 	vsub.f64	d5, d2, d6
 80072a6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80072aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ae:	d462      	bmi.n	8007376 <_dtoa_r+0x5de>
 80072b0:	42a6      	cmp	r6, r4
 80072b2:	f43f af4d 	beq.w	8007150 <_dtoa_r+0x3b8>
 80072b6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80072ba:	ee26 6b03 	vmul.f64	d6, d6, d3
 80072be:	e7e0      	b.n	8007282 <_dtoa_r+0x4ea>
 80072c0:	4621      	mov	r1, r4
 80072c2:	463e      	mov	r6, r7
 80072c4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80072c8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80072cc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80072d0:	ee14 2a90 	vmov	r2, s9
 80072d4:	3230      	adds	r2, #48	@ 0x30
 80072d6:	f806 2b01 	strb.w	r2, [r6], #1
 80072da:	42a6      	cmp	r6, r4
 80072dc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80072e0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80072e4:	d119      	bne.n	800731a <_dtoa_r+0x582>
 80072e6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80072ea:	ee37 4b05 	vadd.f64	d4, d7, d5
 80072ee:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80072f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f6:	dc3e      	bgt.n	8007376 <_dtoa_r+0x5de>
 80072f8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80072fc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007304:	f57f af24 	bpl.w	8007150 <_dtoa_r+0x3b8>
 8007308:	460e      	mov	r6, r1
 800730a:	3901      	subs	r1, #1
 800730c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007310:	2b30      	cmp	r3, #48	@ 0x30
 8007312:	d0f9      	beq.n	8007308 <_dtoa_r+0x570>
 8007314:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007318:	e758      	b.n	80071cc <_dtoa_r+0x434>
 800731a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800731e:	e7d5      	b.n	80072cc <_dtoa_r+0x534>
 8007320:	d10b      	bne.n	800733a <_dtoa_r+0x5a2>
 8007322:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007326:	ee26 6b07 	vmul.f64	d6, d6, d7
 800732a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800732e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007336:	f2c0 8161 	blt.w	80075fc <_dtoa_r+0x864>
 800733a:	2400      	movs	r4, #0
 800733c:	4625      	mov	r5, r4
 800733e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007340:	43db      	mvns	r3, r3
 8007342:	9304      	str	r3, [sp, #16]
 8007344:	463e      	mov	r6, r7
 8007346:	f04f 0800 	mov.w	r8, #0
 800734a:	4621      	mov	r1, r4
 800734c:	4648      	mov	r0, r9
 800734e:	f000 fbb9 	bl	8007ac4 <_Bfree>
 8007352:	2d00      	cmp	r5, #0
 8007354:	d0de      	beq.n	8007314 <_dtoa_r+0x57c>
 8007356:	f1b8 0f00 	cmp.w	r8, #0
 800735a:	d005      	beq.n	8007368 <_dtoa_r+0x5d0>
 800735c:	45a8      	cmp	r8, r5
 800735e:	d003      	beq.n	8007368 <_dtoa_r+0x5d0>
 8007360:	4641      	mov	r1, r8
 8007362:	4648      	mov	r0, r9
 8007364:	f000 fbae 	bl	8007ac4 <_Bfree>
 8007368:	4629      	mov	r1, r5
 800736a:	4648      	mov	r0, r9
 800736c:	f000 fbaa 	bl	8007ac4 <_Bfree>
 8007370:	e7d0      	b.n	8007314 <_dtoa_r+0x57c>
 8007372:	f8cd 8010 	str.w	r8, [sp, #16]
 8007376:	4633      	mov	r3, r6
 8007378:	461e      	mov	r6, r3
 800737a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800737e:	2a39      	cmp	r2, #57	@ 0x39
 8007380:	d106      	bne.n	8007390 <_dtoa_r+0x5f8>
 8007382:	429f      	cmp	r7, r3
 8007384:	d1f8      	bne.n	8007378 <_dtoa_r+0x5e0>
 8007386:	9a04      	ldr	r2, [sp, #16]
 8007388:	3201      	adds	r2, #1
 800738a:	9204      	str	r2, [sp, #16]
 800738c:	2230      	movs	r2, #48	@ 0x30
 800738e:	703a      	strb	r2, [r7, #0]
 8007390:	781a      	ldrb	r2, [r3, #0]
 8007392:	3201      	adds	r2, #1
 8007394:	701a      	strb	r2, [r3, #0]
 8007396:	e7bd      	b.n	8007314 <_dtoa_r+0x57c>
 8007398:	ee27 7b04 	vmul.f64	d7, d7, d4
 800739c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80073a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a4:	f47f aeef 	bne.w	8007186 <_dtoa_r+0x3ee>
 80073a8:	e710      	b.n	80071cc <_dtoa_r+0x434>
 80073aa:	bf00      	nop
 80073ac:	08009088 	.word	0x08009088
 80073b0:	08009060 	.word	0x08009060
 80073b4:	9908      	ldr	r1, [sp, #32]
 80073b6:	2900      	cmp	r1, #0
 80073b8:	f000 80e3 	beq.w	8007582 <_dtoa_r+0x7ea>
 80073bc:	9907      	ldr	r1, [sp, #28]
 80073be:	2901      	cmp	r1, #1
 80073c0:	f300 80c8 	bgt.w	8007554 <_dtoa_r+0x7bc>
 80073c4:	2d00      	cmp	r5, #0
 80073c6:	f000 80c1 	beq.w	800754c <_dtoa_r+0x7b4>
 80073ca:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80073ce:	9e05      	ldr	r6, [sp, #20]
 80073d0:	461c      	mov	r4, r3
 80073d2:	9304      	str	r3, [sp, #16]
 80073d4:	9b05      	ldr	r3, [sp, #20]
 80073d6:	4413      	add	r3, r2
 80073d8:	9305      	str	r3, [sp, #20]
 80073da:	9b06      	ldr	r3, [sp, #24]
 80073dc:	2101      	movs	r1, #1
 80073de:	4413      	add	r3, r2
 80073e0:	4648      	mov	r0, r9
 80073e2:	9306      	str	r3, [sp, #24]
 80073e4:	f000 fc22 	bl	8007c2c <__i2b>
 80073e8:	9b04      	ldr	r3, [sp, #16]
 80073ea:	4605      	mov	r5, r0
 80073ec:	b166      	cbz	r6, 8007408 <_dtoa_r+0x670>
 80073ee:	9a06      	ldr	r2, [sp, #24]
 80073f0:	2a00      	cmp	r2, #0
 80073f2:	dd09      	ble.n	8007408 <_dtoa_r+0x670>
 80073f4:	42b2      	cmp	r2, r6
 80073f6:	9905      	ldr	r1, [sp, #20]
 80073f8:	bfa8      	it	ge
 80073fa:	4632      	movge	r2, r6
 80073fc:	1a89      	subs	r1, r1, r2
 80073fe:	9105      	str	r1, [sp, #20]
 8007400:	9906      	ldr	r1, [sp, #24]
 8007402:	1ab6      	subs	r6, r6, r2
 8007404:	1a8a      	subs	r2, r1, r2
 8007406:	9206      	str	r2, [sp, #24]
 8007408:	b1fb      	cbz	r3, 800744a <_dtoa_r+0x6b2>
 800740a:	9a08      	ldr	r2, [sp, #32]
 800740c:	2a00      	cmp	r2, #0
 800740e:	f000 80bc 	beq.w	800758a <_dtoa_r+0x7f2>
 8007412:	b19c      	cbz	r4, 800743c <_dtoa_r+0x6a4>
 8007414:	4629      	mov	r1, r5
 8007416:	4622      	mov	r2, r4
 8007418:	4648      	mov	r0, r9
 800741a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800741c:	f000 fcc6 	bl	8007dac <__pow5mult>
 8007420:	9a01      	ldr	r2, [sp, #4]
 8007422:	4601      	mov	r1, r0
 8007424:	4605      	mov	r5, r0
 8007426:	4648      	mov	r0, r9
 8007428:	f000 fc16 	bl	8007c58 <__multiply>
 800742c:	9901      	ldr	r1, [sp, #4]
 800742e:	9004      	str	r0, [sp, #16]
 8007430:	4648      	mov	r0, r9
 8007432:	f000 fb47 	bl	8007ac4 <_Bfree>
 8007436:	9a04      	ldr	r2, [sp, #16]
 8007438:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800743a:	9201      	str	r2, [sp, #4]
 800743c:	1b1a      	subs	r2, r3, r4
 800743e:	d004      	beq.n	800744a <_dtoa_r+0x6b2>
 8007440:	9901      	ldr	r1, [sp, #4]
 8007442:	4648      	mov	r0, r9
 8007444:	f000 fcb2 	bl	8007dac <__pow5mult>
 8007448:	9001      	str	r0, [sp, #4]
 800744a:	2101      	movs	r1, #1
 800744c:	4648      	mov	r0, r9
 800744e:	f000 fbed 	bl	8007c2c <__i2b>
 8007452:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007454:	4604      	mov	r4, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 81d0 	beq.w	80077fc <_dtoa_r+0xa64>
 800745c:	461a      	mov	r2, r3
 800745e:	4601      	mov	r1, r0
 8007460:	4648      	mov	r0, r9
 8007462:	f000 fca3 	bl	8007dac <__pow5mult>
 8007466:	9b07      	ldr	r3, [sp, #28]
 8007468:	2b01      	cmp	r3, #1
 800746a:	4604      	mov	r4, r0
 800746c:	f300 8095 	bgt.w	800759a <_dtoa_r+0x802>
 8007470:	9b02      	ldr	r3, [sp, #8]
 8007472:	2b00      	cmp	r3, #0
 8007474:	f040 808b 	bne.w	800758e <_dtoa_r+0x7f6>
 8007478:	9b03      	ldr	r3, [sp, #12]
 800747a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800747e:	2a00      	cmp	r2, #0
 8007480:	f040 8087 	bne.w	8007592 <_dtoa_r+0x7fa>
 8007484:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007488:	0d12      	lsrs	r2, r2, #20
 800748a:	0512      	lsls	r2, r2, #20
 800748c:	2a00      	cmp	r2, #0
 800748e:	f000 8082 	beq.w	8007596 <_dtoa_r+0x7fe>
 8007492:	9b05      	ldr	r3, [sp, #20]
 8007494:	3301      	adds	r3, #1
 8007496:	9305      	str	r3, [sp, #20]
 8007498:	9b06      	ldr	r3, [sp, #24]
 800749a:	3301      	adds	r3, #1
 800749c:	9306      	str	r3, [sp, #24]
 800749e:	2301      	movs	r3, #1
 80074a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 81af 	beq.w	8007808 <_dtoa_r+0xa70>
 80074aa:	6922      	ldr	r2, [r4, #16]
 80074ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80074b0:	6910      	ldr	r0, [r2, #16]
 80074b2:	f000 fb6f 	bl	8007b94 <__hi0bits>
 80074b6:	f1c0 0020 	rsb	r0, r0, #32
 80074ba:	9b06      	ldr	r3, [sp, #24]
 80074bc:	4418      	add	r0, r3
 80074be:	f010 001f 	ands.w	r0, r0, #31
 80074c2:	d076      	beq.n	80075b2 <_dtoa_r+0x81a>
 80074c4:	f1c0 0220 	rsb	r2, r0, #32
 80074c8:	2a04      	cmp	r2, #4
 80074ca:	dd69      	ble.n	80075a0 <_dtoa_r+0x808>
 80074cc:	9b05      	ldr	r3, [sp, #20]
 80074ce:	f1c0 001c 	rsb	r0, r0, #28
 80074d2:	4403      	add	r3, r0
 80074d4:	9305      	str	r3, [sp, #20]
 80074d6:	9b06      	ldr	r3, [sp, #24]
 80074d8:	4406      	add	r6, r0
 80074da:	4403      	add	r3, r0
 80074dc:	9306      	str	r3, [sp, #24]
 80074de:	9b05      	ldr	r3, [sp, #20]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	dd05      	ble.n	80074f0 <_dtoa_r+0x758>
 80074e4:	9901      	ldr	r1, [sp, #4]
 80074e6:	461a      	mov	r2, r3
 80074e8:	4648      	mov	r0, r9
 80074ea:	f000 fcb9 	bl	8007e60 <__lshift>
 80074ee:	9001      	str	r0, [sp, #4]
 80074f0:	9b06      	ldr	r3, [sp, #24]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	dd05      	ble.n	8007502 <_dtoa_r+0x76a>
 80074f6:	4621      	mov	r1, r4
 80074f8:	461a      	mov	r2, r3
 80074fa:	4648      	mov	r0, r9
 80074fc:	f000 fcb0 	bl	8007e60 <__lshift>
 8007500:	4604      	mov	r4, r0
 8007502:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007504:	2b00      	cmp	r3, #0
 8007506:	d056      	beq.n	80075b6 <_dtoa_r+0x81e>
 8007508:	9801      	ldr	r0, [sp, #4]
 800750a:	4621      	mov	r1, r4
 800750c:	f000 fd14 	bl	8007f38 <__mcmp>
 8007510:	2800      	cmp	r0, #0
 8007512:	da50      	bge.n	80075b6 <_dtoa_r+0x81e>
 8007514:	f108 33ff 	add.w	r3, r8, #4294967295
 8007518:	9304      	str	r3, [sp, #16]
 800751a:	9901      	ldr	r1, [sp, #4]
 800751c:	2300      	movs	r3, #0
 800751e:	220a      	movs	r2, #10
 8007520:	4648      	mov	r0, r9
 8007522:	f000 faf1 	bl	8007b08 <__multadd>
 8007526:	9b08      	ldr	r3, [sp, #32]
 8007528:	9001      	str	r0, [sp, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 816e 	beq.w	800780c <_dtoa_r+0xa74>
 8007530:	4629      	mov	r1, r5
 8007532:	2300      	movs	r3, #0
 8007534:	220a      	movs	r2, #10
 8007536:	4648      	mov	r0, r9
 8007538:	f000 fae6 	bl	8007b08 <__multadd>
 800753c:	f1bb 0f00 	cmp.w	fp, #0
 8007540:	4605      	mov	r5, r0
 8007542:	dc64      	bgt.n	800760e <_dtoa_r+0x876>
 8007544:	9b07      	ldr	r3, [sp, #28]
 8007546:	2b02      	cmp	r3, #2
 8007548:	dc3e      	bgt.n	80075c8 <_dtoa_r+0x830>
 800754a:	e060      	b.n	800760e <_dtoa_r+0x876>
 800754c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800754e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007552:	e73c      	b.n	80073ce <_dtoa_r+0x636>
 8007554:	f10a 34ff 	add.w	r4, sl, #4294967295
 8007558:	42a3      	cmp	r3, r4
 800755a:	bfbf      	itttt	lt
 800755c:	1ae2      	sublt	r2, r4, r3
 800755e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007560:	189b      	addlt	r3, r3, r2
 8007562:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8007564:	bfae      	itee	ge
 8007566:	1b1c      	subge	r4, r3, r4
 8007568:	4623      	movlt	r3, r4
 800756a:	2400      	movlt	r4, #0
 800756c:	f1ba 0f00 	cmp.w	sl, #0
 8007570:	bfb5      	itete	lt
 8007572:	9a05      	ldrlt	r2, [sp, #20]
 8007574:	9e05      	ldrge	r6, [sp, #20]
 8007576:	eba2 060a 	sublt.w	r6, r2, sl
 800757a:	4652      	movge	r2, sl
 800757c:	bfb8      	it	lt
 800757e:	2200      	movlt	r2, #0
 8007580:	e727      	b.n	80073d2 <_dtoa_r+0x63a>
 8007582:	9e05      	ldr	r6, [sp, #20]
 8007584:	9d08      	ldr	r5, [sp, #32]
 8007586:	461c      	mov	r4, r3
 8007588:	e730      	b.n	80073ec <_dtoa_r+0x654>
 800758a:	461a      	mov	r2, r3
 800758c:	e758      	b.n	8007440 <_dtoa_r+0x6a8>
 800758e:	2300      	movs	r3, #0
 8007590:	e786      	b.n	80074a0 <_dtoa_r+0x708>
 8007592:	9b02      	ldr	r3, [sp, #8]
 8007594:	e784      	b.n	80074a0 <_dtoa_r+0x708>
 8007596:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007598:	e783      	b.n	80074a2 <_dtoa_r+0x70a>
 800759a:	2300      	movs	r3, #0
 800759c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800759e:	e784      	b.n	80074aa <_dtoa_r+0x712>
 80075a0:	d09d      	beq.n	80074de <_dtoa_r+0x746>
 80075a2:	9b05      	ldr	r3, [sp, #20]
 80075a4:	321c      	adds	r2, #28
 80075a6:	4413      	add	r3, r2
 80075a8:	9305      	str	r3, [sp, #20]
 80075aa:	9b06      	ldr	r3, [sp, #24]
 80075ac:	4416      	add	r6, r2
 80075ae:	4413      	add	r3, r2
 80075b0:	e794      	b.n	80074dc <_dtoa_r+0x744>
 80075b2:	4602      	mov	r2, r0
 80075b4:	e7f5      	b.n	80075a2 <_dtoa_r+0x80a>
 80075b6:	f1ba 0f00 	cmp.w	sl, #0
 80075ba:	f8cd 8010 	str.w	r8, [sp, #16]
 80075be:	46d3      	mov	fp, sl
 80075c0:	dc21      	bgt.n	8007606 <_dtoa_r+0x86e>
 80075c2:	9b07      	ldr	r3, [sp, #28]
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	dd1e      	ble.n	8007606 <_dtoa_r+0x86e>
 80075c8:	f1bb 0f00 	cmp.w	fp, #0
 80075cc:	f47f aeb7 	bne.w	800733e <_dtoa_r+0x5a6>
 80075d0:	4621      	mov	r1, r4
 80075d2:	465b      	mov	r3, fp
 80075d4:	2205      	movs	r2, #5
 80075d6:	4648      	mov	r0, r9
 80075d8:	f000 fa96 	bl	8007b08 <__multadd>
 80075dc:	4601      	mov	r1, r0
 80075de:	4604      	mov	r4, r0
 80075e0:	9801      	ldr	r0, [sp, #4]
 80075e2:	f000 fca9 	bl	8007f38 <__mcmp>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	f77f aea9 	ble.w	800733e <_dtoa_r+0x5a6>
 80075ec:	463e      	mov	r6, r7
 80075ee:	2331      	movs	r3, #49	@ 0x31
 80075f0:	f806 3b01 	strb.w	r3, [r6], #1
 80075f4:	9b04      	ldr	r3, [sp, #16]
 80075f6:	3301      	adds	r3, #1
 80075f8:	9304      	str	r3, [sp, #16]
 80075fa:	e6a4      	b.n	8007346 <_dtoa_r+0x5ae>
 80075fc:	f8cd 8010 	str.w	r8, [sp, #16]
 8007600:	4654      	mov	r4, sl
 8007602:	4625      	mov	r5, r4
 8007604:	e7f2      	b.n	80075ec <_dtoa_r+0x854>
 8007606:	9b08      	ldr	r3, [sp, #32]
 8007608:	2b00      	cmp	r3, #0
 800760a:	f000 8103 	beq.w	8007814 <_dtoa_r+0xa7c>
 800760e:	2e00      	cmp	r6, #0
 8007610:	dd05      	ble.n	800761e <_dtoa_r+0x886>
 8007612:	4629      	mov	r1, r5
 8007614:	4632      	mov	r2, r6
 8007616:	4648      	mov	r0, r9
 8007618:	f000 fc22 	bl	8007e60 <__lshift>
 800761c:	4605      	mov	r5, r0
 800761e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007620:	2b00      	cmp	r3, #0
 8007622:	d058      	beq.n	80076d6 <_dtoa_r+0x93e>
 8007624:	6869      	ldr	r1, [r5, #4]
 8007626:	4648      	mov	r0, r9
 8007628:	f000 fa0c 	bl	8007a44 <_Balloc>
 800762c:	4606      	mov	r6, r0
 800762e:	b928      	cbnz	r0, 800763c <_dtoa_r+0x8a4>
 8007630:	4b82      	ldr	r3, [pc, #520]	@ (800783c <_dtoa_r+0xaa4>)
 8007632:	4602      	mov	r2, r0
 8007634:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007638:	f7ff bbc7 	b.w	8006dca <_dtoa_r+0x32>
 800763c:	692a      	ldr	r2, [r5, #16]
 800763e:	3202      	adds	r2, #2
 8007640:	0092      	lsls	r2, r2, #2
 8007642:	f105 010c 	add.w	r1, r5, #12
 8007646:	300c      	adds	r0, #12
 8007648:	f000 ffac 	bl	80085a4 <memcpy>
 800764c:	2201      	movs	r2, #1
 800764e:	4631      	mov	r1, r6
 8007650:	4648      	mov	r0, r9
 8007652:	f000 fc05 	bl	8007e60 <__lshift>
 8007656:	1c7b      	adds	r3, r7, #1
 8007658:	9305      	str	r3, [sp, #20]
 800765a:	eb07 030b 	add.w	r3, r7, fp
 800765e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007660:	9b02      	ldr	r3, [sp, #8]
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	46a8      	mov	r8, r5
 8007668:	9308      	str	r3, [sp, #32]
 800766a:	4605      	mov	r5, r0
 800766c:	9b05      	ldr	r3, [sp, #20]
 800766e:	9801      	ldr	r0, [sp, #4]
 8007670:	4621      	mov	r1, r4
 8007672:	f103 3bff 	add.w	fp, r3, #4294967295
 8007676:	f7ff fb04 	bl	8006c82 <quorem>
 800767a:	4641      	mov	r1, r8
 800767c:	9002      	str	r0, [sp, #8]
 800767e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007682:	9801      	ldr	r0, [sp, #4]
 8007684:	f000 fc58 	bl	8007f38 <__mcmp>
 8007688:	462a      	mov	r2, r5
 800768a:	9006      	str	r0, [sp, #24]
 800768c:	4621      	mov	r1, r4
 800768e:	4648      	mov	r0, r9
 8007690:	f000 fc6e 	bl	8007f70 <__mdiff>
 8007694:	68c2      	ldr	r2, [r0, #12]
 8007696:	4606      	mov	r6, r0
 8007698:	b9fa      	cbnz	r2, 80076da <_dtoa_r+0x942>
 800769a:	4601      	mov	r1, r0
 800769c:	9801      	ldr	r0, [sp, #4]
 800769e:	f000 fc4b 	bl	8007f38 <__mcmp>
 80076a2:	4602      	mov	r2, r0
 80076a4:	4631      	mov	r1, r6
 80076a6:	4648      	mov	r0, r9
 80076a8:	920a      	str	r2, [sp, #40]	@ 0x28
 80076aa:	f000 fa0b 	bl	8007ac4 <_Bfree>
 80076ae:	9b07      	ldr	r3, [sp, #28]
 80076b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076b2:	9e05      	ldr	r6, [sp, #20]
 80076b4:	ea43 0102 	orr.w	r1, r3, r2
 80076b8:	9b08      	ldr	r3, [sp, #32]
 80076ba:	4319      	orrs	r1, r3
 80076bc:	d10f      	bne.n	80076de <_dtoa_r+0x946>
 80076be:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80076c2:	d028      	beq.n	8007716 <_dtoa_r+0x97e>
 80076c4:	9b06      	ldr	r3, [sp, #24]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	dd02      	ble.n	80076d0 <_dtoa_r+0x938>
 80076ca:	9b02      	ldr	r3, [sp, #8]
 80076cc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80076d0:	f88b a000 	strb.w	sl, [fp]
 80076d4:	e639      	b.n	800734a <_dtoa_r+0x5b2>
 80076d6:	4628      	mov	r0, r5
 80076d8:	e7bd      	b.n	8007656 <_dtoa_r+0x8be>
 80076da:	2201      	movs	r2, #1
 80076dc:	e7e2      	b.n	80076a4 <_dtoa_r+0x90c>
 80076de:	9b06      	ldr	r3, [sp, #24]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	db04      	blt.n	80076ee <_dtoa_r+0x956>
 80076e4:	9907      	ldr	r1, [sp, #28]
 80076e6:	430b      	orrs	r3, r1
 80076e8:	9908      	ldr	r1, [sp, #32]
 80076ea:	430b      	orrs	r3, r1
 80076ec:	d120      	bne.n	8007730 <_dtoa_r+0x998>
 80076ee:	2a00      	cmp	r2, #0
 80076f0:	ddee      	ble.n	80076d0 <_dtoa_r+0x938>
 80076f2:	9901      	ldr	r1, [sp, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	4648      	mov	r0, r9
 80076f8:	f000 fbb2 	bl	8007e60 <__lshift>
 80076fc:	4621      	mov	r1, r4
 80076fe:	9001      	str	r0, [sp, #4]
 8007700:	f000 fc1a 	bl	8007f38 <__mcmp>
 8007704:	2800      	cmp	r0, #0
 8007706:	dc03      	bgt.n	8007710 <_dtoa_r+0x978>
 8007708:	d1e2      	bne.n	80076d0 <_dtoa_r+0x938>
 800770a:	f01a 0f01 	tst.w	sl, #1
 800770e:	d0df      	beq.n	80076d0 <_dtoa_r+0x938>
 8007710:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007714:	d1d9      	bne.n	80076ca <_dtoa_r+0x932>
 8007716:	2339      	movs	r3, #57	@ 0x39
 8007718:	f88b 3000 	strb.w	r3, [fp]
 800771c:	4633      	mov	r3, r6
 800771e:	461e      	mov	r6, r3
 8007720:	3b01      	subs	r3, #1
 8007722:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007726:	2a39      	cmp	r2, #57	@ 0x39
 8007728:	d053      	beq.n	80077d2 <_dtoa_r+0xa3a>
 800772a:	3201      	adds	r2, #1
 800772c:	701a      	strb	r2, [r3, #0]
 800772e:	e60c      	b.n	800734a <_dtoa_r+0x5b2>
 8007730:	2a00      	cmp	r2, #0
 8007732:	dd07      	ble.n	8007744 <_dtoa_r+0x9ac>
 8007734:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007738:	d0ed      	beq.n	8007716 <_dtoa_r+0x97e>
 800773a:	f10a 0301 	add.w	r3, sl, #1
 800773e:	f88b 3000 	strb.w	r3, [fp]
 8007742:	e602      	b.n	800734a <_dtoa_r+0x5b2>
 8007744:	9b05      	ldr	r3, [sp, #20]
 8007746:	9a05      	ldr	r2, [sp, #20]
 8007748:	f803 ac01 	strb.w	sl, [r3, #-1]
 800774c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800774e:	4293      	cmp	r3, r2
 8007750:	d029      	beq.n	80077a6 <_dtoa_r+0xa0e>
 8007752:	9901      	ldr	r1, [sp, #4]
 8007754:	2300      	movs	r3, #0
 8007756:	220a      	movs	r2, #10
 8007758:	4648      	mov	r0, r9
 800775a:	f000 f9d5 	bl	8007b08 <__multadd>
 800775e:	45a8      	cmp	r8, r5
 8007760:	9001      	str	r0, [sp, #4]
 8007762:	f04f 0300 	mov.w	r3, #0
 8007766:	f04f 020a 	mov.w	r2, #10
 800776a:	4641      	mov	r1, r8
 800776c:	4648      	mov	r0, r9
 800776e:	d107      	bne.n	8007780 <_dtoa_r+0x9e8>
 8007770:	f000 f9ca 	bl	8007b08 <__multadd>
 8007774:	4680      	mov	r8, r0
 8007776:	4605      	mov	r5, r0
 8007778:	9b05      	ldr	r3, [sp, #20]
 800777a:	3301      	adds	r3, #1
 800777c:	9305      	str	r3, [sp, #20]
 800777e:	e775      	b.n	800766c <_dtoa_r+0x8d4>
 8007780:	f000 f9c2 	bl	8007b08 <__multadd>
 8007784:	4629      	mov	r1, r5
 8007786:	4680      	mov	r8, r0
 8007788:	2300      	movs	r3, #0
 800778a:	220a      	movs	r2, #10
 800778c:	4648      	mov	r0, r9
 800778e:	f000 f9bb 	bl	8007b08 <__multadd>
 8007792:	4605      	mov	r5, r0
 8007794:	e7f0      	b.n	8007778 <_dtoa_r+0x9e0>
 8007796:	f1bb 0f00 	cmp.w	fp, #0
 800779a:	bfcc      	ite	gt
 800779c:	465e      	movgt	r6, fp
 800779e:	2601      	movle	r6, #1
 80077a0:	443e      	add	r6, r7
 80077a2:	f04f 0800 	mov.w	r8, #0
 80077a6:	9901      	ldr	r1, [sp, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	4648      	mov	r0, r9
 80077ac:	f000 fb58 	bl	8007e60 <__lshift>
 80077b0:	4621      	mov	r1, r4
 80077b2:	9001      	str	r0, [sp, #4]
 80077b4:	f000 fbc0 	bl	8007f38 <__mcmp>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	dcaf      	bgt.n	800771c <_dtoa_r+0x984>
 80077bc:	d102      	bne.n	80077c4 <_dtoa_r+0xa2c>
 80077be:	f01a 0f01 	tst.w	sl, #1
 80077c2:	d1ab      	bne.n	800771c <_dtoa_r+0x984>
 80077c4:	4633      	mov	r3, r6
 80077c6:	461e      	mov	r6, r3
 80077c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077cc:	2a30      	cmp	r2, #48	@ 0x30
 80077ce:	d0fa      	beq.n	80077c6 <_dtoa_r+0xa2e>
 80077d0:	e5bb      	b.n	800734a <_dtoa_r+0x5b2>
 80077d2:	429f      	cmp	r7, r3
 80077d4:	d1a3      	bne.n	800771e <_dtoa_r+0x986>
 80077d6:	9b04      	ldr	r3, [sp, #16]
 80077d8:	3301      	adds	r3, #1
 80077da:	9304      	str	r3, [sp, #16]
 80077dc:	2331      	movs	r3, #49	@ 0x31
 80077de:	703b      	strb	r3, [r7, #0]
 80077e0:	e5b3      	b.n	800734a <_dtoa_r+0x5b2>
 80077e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80077e4:	4f16      	ldr	r7, [pc, #88]	@ (8007840 <_dtoa_r+0xaa8>)
 80077e6:	b11b      	cbz	r3, 80077f0 <_dtoa_r+0xa58>
 80077e8:	f107 0308 	add.w	r3, r7, #8
 80077ec:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80077ee:	6013      	str	r3, [r2, #0]
 80077f0:	4638      	mov	r0, r7
 80077f2:	b011      	add	sp, #68	@ 0x44
 80077f4:	ecbd 8b02 	vpop	{d8}
 80077f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077fc:	9b07      	ldr	r3, [sp, #28]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	f77f ae36 	ble.w	8007470 <_dtoa_r+0x6d8>
 8007804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007806:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007808:	2001      	movs	r0, #1
 800780a:	e656      	b.n	80074ba <_dtoa_r+0x722>
 800780c:	f1bb 0f00 	cmp.w	fp, #0
 8007810:	f77f aed7 	ble.w	80075c2 <_dtoa_r+0x82a>
 8007814:	463e      	mov	r6, r7
 8007816:	9801      	ldr	r0, [sp, #4]
 8007818:	4621      	mov	r1, r4
 800781a:	f7ff fa32 	bl	8006c82 <quorem>
 800781e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007822:	f806 ab01 	strb.w	sl, [r6], #1
 8007826:	1bf2      	subs	r2, r6, r7
 8007828:	4593      	cmp	fp, r2
 800782a:	ddb4      	ble.n	8007796 <_dtoa_r+0x9fe>
 800782c:	9901      	ldr	r1, [sp, #4]
 800782e:	2300      	movs	r3, #0
 8007830:	220a      	movs	r2, #10
 8007832:	4648      	mov	r0, r9
 8007834:	f000 f968 	bl	8007b08 <__multadd>
 8007838:	9001      	str	r0, [sp, #4]
 800783a:	e7ec      	b.n	8007816 <_dtoa_r+0xa7e>
 800783c:	08008fe8 	.word	0x08008fe8
 8007840:	08008f6c 	.word	0x08008f6c

08007844 <_free_r>:
 8007844:	b538      	push	{r3, r4, r5, lr}
 8007846:	4605      	mov	r5, r0
 8007848:	2900      	cmp	r1, #0
 800784a:	d041      	beq.n	80078d0 <_free_r+0x8c>
 800784c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007850:	1f0c      	subs	r4, r1, #4
 8007852:	2b00      	cmp	r3, #0
 8007854:	bfb8      	it	lt
 8007856:	18e4      	addlt	r4, r4, r3
 8007858:	f000 f8e8 	bl	8007a2c <__malloc_lock>
 800785c:	4a1d      	ldr	r2, [pc, #116]	@ (80078d4 <_free_r+0x90>)
 800785e:	6813      	ldr	r3, [r2, #0]
 8007860:	b933      	cbnz	r3, 8007870 <_free_r+0x2c>
 8007862:	6063      	str	r3, [r4, #4]
 8007864:	6014      	str	r4, [r2, #0]
 8007866:	4628      	mov	r0, r5
 8007868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800786c:	f000 b8e4 	b.w	8007a38 <__malloc_unlock>
 8007870:	42a3      	cmp	r3, r4
 8007872:	d908      	bls.n	8007886 <_free_r+0x42>
 8007874:	6820      	ldr	r0, [r4, #0]
 8007876:	1821      	adds	r1, r4, r0
 8007878:	428b      	cmp	r3, r1
 800787a:	bf01      	itttt	eq
 800787c:	6819      	ldreq	r1, [r3, #0]
 800787e:	685b      	ldreq	r3, [r3, #4]
 8007880:	1809      	addeq	r1, r1, r0
 8007882:	6021      	streq	r1, [r4, #0]
 8007884:	e7ed      	b.n	8007862 <_free_r+0x1e>
 8007886:	461a      	mov	r2, r3
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	b10b      	cbz	r3, 8007890 <_free_r+0x4c>
 800788c:	42a3      	cmp	r3, r4
 800788e:	d9fa      	bls.n	8007886 <_free_r+0x42>
 8007890:	6811      	ldr	r1, [r2, #0]
 8007892:	1850      	adds	r0, r2, r1
 8007894:	42a0      	cmp	r0, r4
 8007896:	d10b      	bne.n	80078b0 <_free_r+0x6c>
 8007898:	6820      	ldr	r0, [r4, #0]
 800789a:	4401      	add	r1, r0
 800789c:	1850      	adds	r0, r2, r1
 800789e:	4283      	cmp	r3, r0
 80078a0:	6011      	str	r1, [r2, #0]
 80078a2:	d1e0      	bne.n	8007866 <_free_r+0x22>
 80078a4:	6818      	ldr	r0, [r3, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	6053      	str	r3, [r2, #4]
 80078aa:	4408      	add	r0, r1
 80078ac:	6010      	str	r0, [r2, #0]
 80078ae:	e7da      	b.n	8007866 <_free_r+0x22>
 80078b0:	d902      	bls.n	80078b8 <_free_r+0x74>
 80078b2:	230c      	movs	r3, #12
 80078b4:	602b      	str	r3, [r5, #0]
 80078b6:	e7d6      	b.n	8007866 <_free_r+0x22>
 80078b8:	6820      	ldr	r0, [r4, #0]
 80078ba:	1821      	adds	r1, r4, r0
 80078bc:	428b      	cmp	r3, r1
 80078be:	bf04      	itt	eq
 80078c0:	6819      	ldreq	r1, [r3, #0]
 80078c2:	685b      	ldreq	r3, [r3, #4]
 80078c4:	6063      	str	r3, [r4, #4]
 80078c6:	bf04      	itt	eq
 80078c8:	1809      	addeq	r1, r1, r0
 80078ca:	6021      	streq	r1, [r4, #0]
 80078cc:	6054      	str	r4, [r2, #4]
 80078ce:	e7ca      	b.n	8007866 <_free_r+0x22>
 80078d0:	bd38      	pop	{r3, r4, r5, pc}
 80078d2:	bf00      	nop
 80078d4:	200004f4 	.word	0x200004f4

080078d8 <malloc>:
 80078d8:	4b02      	ldr	r3, [pc, #8]	@ (80078e4 <malloc+0xc>)
 80078da:	4601      	mov	r1, r0
 80078dc:	6818      	ldr	r0, [r3, #0]
 80078de:	f000 b825 	b.w	800792c <_malloc_r>
 80078e2:	bf00      	nop
 80078e4:	20000024 	.word	0x20000024

080078e8 <sbrk_aligned>:
 80078e8:	b570      	push	{r4, r5, r6, lr}
 80078ea:	4e0f      	ldr	r6, [pc, #60]	@ (8007928 <sbrk_aligned+0x40>)
 80078ec:	460c      	mov	r4, r1
 80078ee:	6831      	ldr	r1, [r6, #0]
 80078f0:	4605      	mov	r5, r0
 80078f2:	b911      	cbnz	r1, 80078fa <sbrk_aligned+0x12>
 80078f4:	f000 fe46 	bl	8008584 <_sbrk_r>
 80078f8:	6030      	str	r0, [r6, #0]
 80078fa:	4621      	mov	r1, r4
 80078fc:	4628      	mov	r0, r5
 80078fe:	f000 fe41 	bl	8008584 <_sbrk_r>
 8007902:	1c43      	adds	r3, r0, #1
 8007904:	d103      	bne.n	800790e <sbrk_aligned+0x26>
 8007906:	f04f 34ff 	mov.w	r4, #4294967295
 800790a:	4620      	mov	r0, r4
 800790c:	bd70      	pop	{r4, r5, r6, pc}
 800790e:	1cc4      	adds	r4, r0, #3
 8007910:	f024 0403 	bic.w	r4, r4, #3
 8007914:	42a0      	cmp	r0, r4
 8007916:	d0f8      	beq.n	800790a <sbrk_aligned+0x22>
 8007918:	1a21      	subs	r1, r4, r0
 800791a:	4628      	mov	r0, r5
 800791c:	f000 fe32 	bl	8008584 <_sbrk_r>
 8007920:	3001      	adds	r0, #1
 8007922:	d1f2      	bne.n	800790a <sbrk_aligned+0x22>
 8007924:	e7ef      	b.n	8007906 <sbrk_aligned+0x1e>
 8007926:	bf00      	nop
 8007928:	200004f0 	.word	0x200004f0

0800792c <_malloc_r>:
 800792c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007930:	1ccd      	adds	r5, r1, #3
 8007932:	f025 0503 	bic.w	r5, r5, #3
 8007936:	3508      	adds	r5, #8
 8007938:	2d0c      	cmp	r5, #12
 800793a:	bf38      	it	cc
 800793c:	250c      	movcc	r5, #12
 800793e:	2d00      	cmp	r5, #0
 8007940:	4606      	mov	r6, r0
 8007942:	db01      	blt.n	8007948 <_malloc_r+0x1c>
 8007944:	42a9      	cmp	r1, r5
 8007946:	d904      	bls.n	8007952 <_malloc_r+0x26>
 8007948:	230c      	movs	r3, #12
 800794a:	6033      	str	r3, [r6, #0]
 800794c:	2000      	movs	r0, #0
 800794e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007952:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a28 <_malloc_r+0xfc>
 8007956:	f000 f869 	bl	8007a2c <__malloc_lock>
 800795a:	f8d8 3000 	ldr.w	r3, [r8]
 800795e:	461c      	mov	r4, r3
 8007960:	bb44      	cbnz	r4, 80079b4 <_malloc_r+0x88>
 8007962:	4629      	mov	r1, r5
 8007964:	4630      	mov	r0, r6
 8007966:	f7ff ffbf 	bl	80078e8 <sbrk_aligned>
 800796a:	1c43      	adds	r3, r0, #1
 800796c:	4604      	mov	r4, r0
 800796e:	d158      	bne.n	8007a22 <_malloc_r+0xf6>
 8007970:	f8d8 4000 	ldr.w	r4, [r8]
 8007974:	4627      	mov	r7, r4
 8007976:	2f00      	cmp	r7, #0
 8007978:	d143      	bne.n	8007a02 <_malloc_r+0xd6>
 800797a:	2c00      	cmp	r4, #0
 800797c:	d04b      	beq.n	8007a16 <_malloc_r+0xea>
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	4639      	mov	r1, r7
 8007982:	4630      	mov	r0, r6
 8007984:	eb04 0903 	add.w	r9, r4, r3
 8007988:	f000 fdfc 	bl	8008584 <_sbrk_r>
 800798c:	4581      	cmp	r9, r0
 800798e:	d142      	bne.n	8007a16 <_malloc_r+0xea>
 8007990:	6821      	ldr	r1, [r4, #0]
 8007992:	1a6d      	subs	r5, r5, r1
 8007994:	4629      	mov	r1, r5
 8007996:	4630      	mov	r0, r6
 8007998:	f7ff ffa6 	bl	80078e8 <sbrk_aligned>
 800799c:	3001      	adds	r0, #1
 800799e:	d03a      	beq.n	8007a16 <_malloc_r+0xea>
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	442b      	add	r3, r5
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	f8d8 3000 	ldr.w	r3, [r8]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	bb62      	cbnz	r2, 8007a08 <_malloc_r+0xdc>
 80079ae:	f8c8 7000 	str.w	r7, [r8]
 80079b2:	e00f      	b.n	80079d4 <_malloc_r+0xa8>
 80079b4:	6822      	ldr	r2, [r4, #0]
 80079b6:	1b52      	subs	r2, r2, r5
 80079b8:	d420      	bmi.n	80079fc <_malloc_r+0xd0>
 80079ba:	2a0b      	cmp	r2, #11
 80079bc:	d917      	bls.n	80079ee <_malloc_r+0xc2>
 80079be:	1961      	adds	r1, r4, r5
 80079c0:	42a3      	cmp	r3, r4
 80079c2:	6025      	str	r5, [r4, #0]
 80079c4:	bf18      	it	ne
 80079c6:	6059      	strne	r1, [r3, #4]
 80079c8:	6863      	ldr	r3, [r4, #4]
 80079ca:	bf08      	it	eq
 80079cc:	f8c8 1000 	streq.w	r1, [r8]
 80079d0:	5162      	str	r2, [r4, r5]
 80079d2:	604b      	str	r3, [r1, #4]
 80079d4:	4630      	mov	r0, r6
 80079d6:	f000 f82f 	bl	8007a38 <__malloc_unlock>
 80079da:	f104 000b 	add.w	r0, r4, #11
 80079de:	1d23      	adds	r3, r4, #4
 80079e0:	f020 0007 	bic.w	r0, r0, #7
 80079e4:	1ac2      	subs	r2, r0, r3
 80079e6:	bf1c      	itt	ne
 80079e8:	1a1b      	subne	r3, r3, r0
 80079ea:	50a3      	strne	r3, [r4, r2]
 80079ec:	e7af      	b.n	800794e <_malloc_r+0x22>
 80079ee:	6862      	ldr	r2, [r4, #4]
 80079f0:	42a3      	cmp	r3, r4
 80079f2:	bf0c      	ite	eq
 80079f4:	f8c8 2000 	streq.w	r2, [r8]
 80079f8:	605a      	strne	r2, [r3, #4]
 80079fa:	e7eb      	b.n	80079d4 <_malloc_r+0xa8>
 80079fc:	4623      	mov	r3, r4
 80079fe:	6864      	ldr	r4, [r4, #4]
 8007a00:	e7ae      	b.n	8007960 <_malloc_r+0x34>
 8007a02:	463c      	mov	r4, r7
 8007a04:	687f      	ldr	r7, [r7, #4]
 8007a06:	e7b6      	b.n	8007976 <_malloc_r+0x4a>
 8007a08:	461a      	mov	r2, r3
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	42a3      	cmp	r3, r4
 8007a0e:	d1fb      	bne.n	8007a08 <_malloc_r+0xdc>
 8007a10:	2300      	movs	r3, #0
 8007a12:	6053      	str	r3, [r2, #4]
 8007a14:	e7de      	b.n	80079d4 <_malloc_r+0xa8>
 8007a16:	230c      	movs	r3, #12
 8007a18:	6033      	str	r3, [r6, #0]
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	f000 f80c 	bl	8007a38 <__malloc_unlock>
 8007a20:	e794      	b.n	800794c <_malloc_r+0x20>
 8007a22:	6005      	str	r5, [r0, #0]
 8007a24:	e7d6      	b.n	80079d4 <_malloc_r+0xa8>
 8007a26:	bf00      	nop
 8007a28:	200004f4 	.word	0x200004f4

08007a2c <__malloc_lock>:
 8007a2c:	4801      	ldr	r0, [pc, #4]	@ (8007a34 <__malloc_lock+0x8>)
 8007a2e:	f7ff b926 	b.w	8006c7e <__retarget_lock_acquire_recursive>
 8007a32:	bf00      	nop
 8007a34:	200004ec 	.word	0x200004ec

08007a38 <__malloc_unlock>:
 8007a38:	4801      	ldr	r0, [pc, #4]	@ (8007a40 <__malloc_unlock+0x8>)
 8007a3a:	f7ff b921 	b.w	8006c80 <__retarget_lock_release_recursive>
 8007a3e:	bf00      	nop
 8007a40:	200004ec 	.word	0x200004ec

08007a44 <_Balloc>:
 8007a44:	b570      	push	{r4, r5, r6, lr}
 8007a46:	69c6      	ldr	r6, [r0, #28]
 8007a48:	4604      	mov	r4, r0
 8007a4a:	460d      	mov	r5, r1
 8007a4c:	b976      	cbnz	r6, 8007a6c <_Balloc+0x28>
 8007a4e:	2010      	movs	r0, #16
 8007a50:	f7ff ff42 	bl	80078d8 <malloc>
 8007a54:	4602      	mov	r2, r0
 8007a56:	61e0      	str	r0, [r4, #28]
 8007a58:	b920      	cbnz	r0, 8007a64 <_Balloc+0x20>
 8007a5a:	4b18      	ldr	r3, [pc, #96]	@ (8007abc <_Balloc+0x78>)
 8007a5c:	4818      	ldr	r0, [pc, #96]	@ (8007ac0 <_Balloc+0x7c>)
 8007a5e:	216b      	movs	r1, #107	@ 0x6b
 8007a60:	f000 fdae 	bl	80085c0 <__assert_func>
 8007a64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a68:	6006      	str	r6, [r0, #0]
 8007a6a:	60c6      	str	r6, [r0, #12]
 8007a6c:	69e6      	ldr	r6, [r4, #28]
 8007a6e:	68f3      	ldr	r3, [r6, #12]
 8007a70:	b183      	cbz	r3, 8007a94 <_Balloc+0x50>
 8007a72:	69e3      	ldr	r3, [r4, #28]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a7a:	b9b8      	cbnz	r0, 8007aac <_Balloc+0x68>
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	fa01 f605 	lsl.w	r6, r1, r5
 8007a82:	1d72      	adds	r2, r6, #5
 8007a84:	0092      	lsls	r2, r2, #2
 8007a86:	4620      	mov	r0, r4
 8007a88:	f000 fdb8 	bl	80085fc <_calloc_r>
 8007a8c:	b160      	cbz	r0, 8007aa8 <_Balloc+0x64>
 8007a8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a92:	e00e      	b.n	8007ab2 <_Balloc+0x6e>
 8007a94:	2221      	movs	r2, #33	@ 0x21
 8007a96:	2104      	movs	r1, #4
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f000 fdaf 	bl	80085fc <_calloc_r>
 8007a9e:	69e3      	ldr	r3, [r4, #28]
 8007aa0:	60f0      	str	r0, [r6, #12]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e4      	bne.n	8007a72 <_Balloc+0x2e>
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	bd70      	pop	{r4, r5, r6, pc}
 8007aac:	6802      	ldr	r2, [r0, #0]
 8007aae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ab8:	e7f7      	b.n	8007aaa <_Balloc+0x66>
 8007aba:	bf00      	nop
 8007abc:	08008f79 	.word	0x08008f79
 8007ac0:	08008ff9 	.word	0x08008ff9

08007ac4 <_Bfree>:
 8007ac4:	b570      	push	{r4, r5, r6, lr}
 8007ac6:	69c6      	ldr	r6, [r0, #28]
 8007ac8:	4605      	mov	r5, r0
 8007aca:	460c      	mov	r4, r1
 8007acc:	b976      	cbnz	r6, 8007aec <_Bfree+0x28>
 8007ace:	2010      	movs	r0, #16
 8007ad0:	f7ff ff02 	bl	80078d8 <malloc>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	61e8      	str	r0, [r5, #28]
 8007ad8:	b920      	cbnz	r0, 8007ae4 <_Bfree+0x20>
 8007ada:	4b09      	ldr	r3, [pc, #36]	@ (8007b00 <_Bfree+0x3c>)
 8007adc:	4809      	ldr	r0, [pc, #36]	@ (8007b04 <_Bfree+0x40>)
 8007ade:	218f      	movs	r1, #143	@ 0x8f
 8007ae0:	f000 fd6e 	bl	80085c0 <__assert_func>
 8007ae4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ae8:	6006      	str	r6, [r0, #0]
 8007aea:	60c6      	str	r6, [r0, #12]
 8007aec:	b13c      	cbz	r4, 8007afe <_Bfree+0x3a>
 8007aee:	69eb      	ldr	r3, [r5, #28]
 8007af0:	6862      	ldr	r2, [r4, #4]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007af8:	6021      	str	r1, [r4, #0]
 8007afa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007afe:	bd70      	pop	{r4, r5, r6, pc}
 8007b00:	08008f79 	.word	0x08008f79
 8007b04:	08008ff9 	.word	0x08008ff9

08007b08 <__multadd>:
 8007b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b0c:	690d      	ldr	r5, [r1, #16]
 8007b0e:	4607      	mov	r7, r0
 8007b10:	460c      	mov	r4, r1
 8007b12:	461e      	mov	r6, r3
 8007b14:	f101 0c14 	add.w	ip, r1, #20
 8007b18:	2000      	movs	r0, #0
 8007b1a:	f8dc 3000 	ldr.w	r3, [ip]
 8007b1e:	b299      	uxth	r1, r3
 8007b20:	fb02 6101 	mla	r1, r2, r1, r6
 8007b24:	0c1e      	lsrs	r6, r3, #16
 8007b26:	0c0b      	lsrs	r3, r1, #16
 8007b28:	fb02 3306 	mla	r3, r2, r6, r3
 8007b2c:	b289      	uxth	r1, r1
 8007b2e:	3001      	adds	r0, #1
 8007b30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b34:	4285      	cmp	r5, r0
 8007b36:	f84c 1b04 	str.w	r1, [ip], #4
 8007b3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b3e:	dcec      	bgt.n	8007b1a <__multadd+0x12>
 8007b40:	b30e      	cbz	r6, 8007b86 <__multadd+0x7e>
 8007b42:	68a3      	ldr	r3, [r4, #8]
 8007b44:	42ab      	cmp	r3, r5
 8007b46:	dc19      	bgt.n	8007b7c <__multadd+0x74>
 8007b48:	6861      	ldr	r1, [r4, #4]
 8007b4a:	4638      	mov	r0, r7
 8007b4c:	3101      	adds	r1, #1
 8007b4e:	f7ff ff79 	bl	8007a44 <_Balloc>
 8007b52:	4680      	mov	r8, r0
 8007b54:	b928      	cbnz	r0, 8007b62 <__multadd+0x5a>
 8007b56:	4602      	mov	r2, r0
 8007b58:	4b0c      	ldr	r3, [pc, #48]	@ (8007b8c <__multadd+0x84>)
 8007b5a:	480d      	ldr	r0, [pc, #52]	@ (8007b90 <__multadd+0x88>)
 8007b5c:	21ba      	movs	r1, #186	@ 0xba
 8007b5e:	f000 fd2f 	bl	80085c0 <__assert_func>
 8007b62:	6922      	ldr	r2, [r4, #16]
 8007b64:	3202      	adds	r2, #2
 8007b66:	f104 010c 	add.w	r1, r4, #12
 8007b6a:	0092      	lsls	r2, r2, #2
 8007b6c:	300c      	adds	r0, #12
 8007b6e:	f000 fd19 	bl	80085a4 <memcpy>
 8007b72:	4621      	mov	r1, r4
 8007b74:	4638      	mov	r0, r7
 8007b76:	f7ff ffa5 	bl	8007ac4 <_Bfree>
 8007b7a:	4644      	mov	r4, r8
 8007b7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b80:	3501      	adds	r5, #1
 8007b82:	615e      	str	r6, [r3, #20]
 8007b84:	6125      	str	r5, [r4, #16]
 8007b86:	4620      	mov	r0, r4
 8007b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b8c:	08008fe8 	.word	0x08008fe8
 8007b90:	08008ff9 	.word	0x08008ff9

08007b94 <__hi0bits>:
 8007b94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007b98:	4603      	mov	r3, r0
 8007b9a:	bf36      	itet	cc
 8007b9c:	0403      	lslcc	r3, r0, #16
 8007b9e:	2000      	movcs	r0, #0
 8007ba0:	2010      	movcc	r0, #16
 8007ba2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ba6:	bf3c      	itt	cc
 8007ba8:	021b      	lslcc	r3, r3, #8
 8007baa:	3008      	addcc	r0, #8
 8007bac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bb0:	bf3c      	itt	cc
 8007bb2:	011b      	lslcc	r3, r3, #4
 8007bb4:	3004      	addcc	r0, #4
 8007bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bba:	bf3c      	itt	cc
 8007bbc:	009b      	lslcc	r3, r3, #2
 8007bbe:	3002      	addcc	r0, #2
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	db05      	blt.n	8007bd0 <__hi0bits+0x3c>
 8007bc4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007bc8:	f100 0001 	add.w	r0, r0, #1
 8007bcc:	bf08      	it	eq
 8007bce:	2020      	moveq	r0, #32
 8007bd0:	4770      	bx	lr

08007bd2 <__lo0bits>:
 8007bd2:	6803      	ldr	r3, [r0, #0]
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	f013 0007 	ands.w	r0, r3, #7
 8007bda:	d00b      	beq.n	8007bf4 <__lo0bits+0x22>
 8007bdc:	07d9      	lsls	r1, r3, #31
 8007bde:	d421      	bmi.n	8007c24 <__lo0bits+0x52>
 8007be0:	0798      	lsls	r0, r3, #30
 8007be2:	bf49      	itett	mi
 8007be4:	085b      	lsrmi	r3, r3, #1
 8007be6:	089b      	lsrpl	r3, r3, #2
 8007be8:	2001      	movmi	r0, #1
 8007bea:	6013      	strmi	r3, [r2, #0]
 8007bec:	bf5c      	itt	pl
 8007bee:	6013      	strpl	r3, [r2, #0]
 8007bf0:	2002      	movpl	r0, #2
 8007bf2:	4770      	bx	lr
 8007bf4:	b299      	uxth	r1, r3
 8007bf6:	b909      	cbnz	r1, 8007bfc <__lo0bits+0x2a>
 8007bf8:	0c1b      	lsrs	r3, r3, #16
 8007bfa:	2010      	movs	r0, #16
 8007bfc:	b2d9      	uxtb	r1, r3
 8007bfe:	b909      	cbnz	r1, 8007c04 <__lo0bits+0x32>
 8007c00:	3008      	adds	r0, #8
 8007c02:	0a1b      	lsrs	r3, r3, #8
 8007c04:	0719      	lsls	r1, r3, #28
 8007c06:	bf04      	itt	eq
 8007c08:	091b      	lsreq	r3, r3, #4
 8007c0a:	3004      	addeq	r0, #4
 8007c0c:	0799      	lsls	r1, r3, #30
 8007c0e:	bf04      	itt	eq
 8007c10:	089b      	lsreq	r3, r3, #2
 8007c12:	3002      	addeq	r0, #2
 8007c14:	07d9      	lsls	r1, r3, #31
 8007c16:	d403      	bmi.n	8007c20 <__lo0bits+0x4e>
 8007c18:	085b      	lsrs	r3, r3, #1
 8007c1a:	f100 0001 	add.w	r0, r0, #1
 8007c1e:	d003      	beq.n	8007c28 <__lo0bits+0x56>
 8007c20:	6013      	str	r3, [r2, #0]
 8007c22:	4770      	bx	lr
 8007c24:	2000      	movs	r0, #0
 8007c26:	4770      	bx	lr
 8007c28:	2020      	movs	r0, #32
 8007c2a:	4770      	bx	lr

08007c2c <__i2b>:
 8007c2c:	b510      	push	{r4, lr}
 8007c2e:	460c      	mov	r4, r1
 8007c30:	2101      	movs	r1, #1
 8007c32:	f7ff ff07 	bl	8007a44 <_Balloc>
 8007c36:	4602      	mov	r2, r0
 8007c38:	b928      	cbnz	r0, 8007c46 <__i2b+0x1a>
 8007c3a:	4b05      	ldr	r3, [pc, #20]	@ (8007c50 <__i2b+0x24>)
 8007c3c:	4805      	ldr	r0, [pc, #20]	@ (8007c54 <__i2b+0x28>)
 8007c3e:	f240 1145 	movw	r1, #325	@ 0x145
 8007c42:	f000 fcbd 	bl	80085c0 <__assert_func>
 8007c46:	2301      	movs	r3, #1
 8007c48:	6144      	str	r4, [r0, #20]
 8007c4a:	6103      	str	r3, [r0, #16]
 8007c4c:	bd10      	pop	{r4, pc}
 8007c4e:	bf00      	nop
 8007c50:	08008fe8 	.word	0x08008fe8
 8007c54:	08008ff9 	.word	0x08008ff9

08007c58 <__multiply>:
 8007c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c5c:	4614      	mov	r4, r2
 8007c5e:	690a      	ldr	r2, [r1, #16]
 8007c60:	6923      	ldr	r3, [r4, #16]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	bfa8      	it	ge
 8007c66:	4623      	movge	r3, r4
 8007c68:	460f      	mov	r7, r1
 8007c6a:	bfa4      	itt	ge
 8007c6c:	460c      	movge	r4, r1
 8007c6e:	461f      	movge	r7, r3
 8007c70:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007c74:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007c78:	68a3      	ldr	r3, [r4, #8]
 8007c7a:	6861      	ldr	r1, [r4, #4]
 8007c7c:	eb0a 0609 	add.w	r6, sl, r9
 8007c80:	42b3      	cmp	r3, r6
 8007c82:	b085      	sub	sp, #20
 8007c84:	bfb8      	it	lt
 8007c86:	3101      	addlt	r1, #1
 8007c88:	f7ff fedc 	bl	8007a44 <_Balloc>
 8007c8c:	b930      	cbnz	r0, 8007c9c <__multiply+0x44>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	4b44      	ldr	r3, [pc, #272]	@ (8007da4 <__multiply+0x14c>)
 8007c92:	4845      	ldr	r0, [pc, #276]	@ (8007da8 <__multiply+0x150>)
 8007c94:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007c98:	f000 fc92 	bl	80085c0 <__assert_func>
 8007c9c:	f100 0514 	add.w	r5, r0, #20
 8007ca0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ca4:	462b      	mov	r3, r5
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	4543      	cmp	r3, r8
 8007caa:	d321      	bcc.n	8007cf0 <__multiply+0x98>
 8007cac:	f107 0114 	add.w	r1, r7, #20
 8007cb0:	f104 0214 	add.w	r2, r4, #20
 8007cb4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007cb8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007cbc:	9302      	str	r3, [sp, #8]
 8007cbe:	1b13      	subs	r3, r2, r4
 8007cc0:	3b15      	subs	r3, #21
 8007cc2:	f023 0303 	bic.w	r3, r3, #3
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	f104 0715 	add.w	r7, r4, #21
 8007ccc:	42ba      	cmp	r2, r7
 8007cce:	bf38      	it	cc
 8007cd0:	2304      	movcc	r3, #4
 8007cd2:	9301      	str	r3, [sp, #4]
 8007cd4:	9b02      	ldr	r3, [sp, #8]
 8007cd6:	9103      	str	r1, [sp, #12]
 8007cd8:	428b      	cmp	r3, r1
 8007cda:	d80c      	bhi.n	8007cf6 <__multiply+0x9e>
 8007cdc:	2e00      	cmp	r6, #0
 8007cde:	dd03      	ble.n	8007ce8 <__multiply+0x90>
 8007ce0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d05b      	beq.n	8007da0 <__multiply+0x148>
 8007ce8:	6106      	str	r6, [r0, #16]
 8007cea:	b005      	add	sp, #20
 8007cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf0:	f843 2b04 	str.w	r2, [r3], #4
 8007cf4:	e7d8      	b.n	8007ca8 <__multiply+0x50>
 8007cf6:	f8b1 a000 	ldrh.w	sl, [r1]
 8007cfa:	f1ba 0f00 	cmp.w	sl, #0
 8007cfe:	d024      	beq.n	8007d4a <__multiply+0xf2>
 8007d00:	f104 0e14 	add.w	lr, r4, #20
 8007d04:	46a9      	mov	r9, r5
 8007d06:	f04f 0c00 	mov.w	ip, #0
 8007d0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d0e:	f8d9 3000 	ldr.w	r3, [r9]
 8007d12:	fa1f fb87 	uxth.w	fp, r7
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	fb0a 330b 	mla	r3, sl, fp, r3
 8007d1c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007d20:	f8d9 7000 	ldr.w	r7, [r9]
 8007d24:	4463      	add	r3, ip
 8007d26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d2a:	fb0a c70b 	mla	r7, sl, fp, ip
 8007d2e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d38:	4572      	cmp	r2, lr
 8007d3a:	f849 3b04 	str.w	r3, [r9], #4
 8007d3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d42:	d8e2      	bhi.n	8007d0a <__multiply+0xb2>
 8007d44:	9b01      	ldr	r3, [sp, #4]
 8007d46:	f845 c003 	str.w	ip, [r5, r3]
 8007d4a:	9b03      	ldr	r3, [sp, #12]
 8007d4c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007d50:	3104      	adds	r1, #4
 8007d52:	f1b9 0f00 	cmp.w	r9, #0
 8007d56:	d021      	beq.n	8007d9c <__multiply+0x144>
 8007d58:	682b      	ldr	r3, [r5, #0]
 8007d5a:	f104 0c14 	add.w	ip, r4, #20
 8007d5e:	46ae      	mov	lr, r5
 8007d60:	f04f 0a00 	mov.w	sl, #0
 8007d64:	f8bc b000 	ldrh.w	fp, [ip]
 8007d68:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007d6c:	fb09 770b 	mla	r7, r9, fp, r7
 8007d70:	4457      	add	r7, sl
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d78:	f84e 3b04 	str.w	r3, [lr], #4
 8007d7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d84:	f8be 3000 	ldrh.w	r3, [lr]
 8007d88:	fb09 330a 	mla	r3, r9, sl, r3
 8007d8c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007d90:	4562      	cmp	r2, ip
 8007d92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d96:	d8e5      	bhi.n	8007d64 <__multiply+0x10c>
 8007d98:	9f01      	ldr	r7, [sp, #4]
 8007d9a:	51eb      	str	r3, [r5, r7]
 8007d9c:	3504      	adds	r5, #4
 8007d9e:	e799      	b.n	8007cd4 <__multiply+0x7c>
 8007da0:	3e01      	subs	r6, #1
 8007da2:	e79b      	b.n	8007cdc <__multiply+0x84>
 8007da4:	08008fe8 	.word	0x08008fe8
 8007da8:	08008ff9 	.word	0x08008ff9

08007dac <__pow5mult>:
 8007dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007db0:	4615      	mov	r5, r2
 8007db2:	f012 0203 	ands.w	r2, r2, #3
 8007db6:	4607      	mov	r7, r0
 8007db8:	460e      	mov	r6, r1
 8007dba:	d007      	beq.n	8007dcc <__pow5mult+0x20>
 8007dbc:	4c25      	ldr	r4, [pc, #148]	@ (8007e54 <__pow5mult+0xa8>)
 8007dbe:	3a01      	subs	r2, #1
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007dc6:	f7ff fe9f 	bl	8007b08 <__multadd>
 8007dca:	4606      	mov	r6, r0
 8007dcc:	10ad      	asrs	r5, r5, #2
 8007dce:	d03d      	beq.n	8007e4c <__pow5mult+0xa0>
 8007dd0:	69fc      	ldr	r4, [r7, #28]
 8007dd2:	b97c      	cbnz	r4, 8007df4 <__pow5mult+0x48>
 8007dd4:	2010      	movs	r0, #16
 8007dd6:	f7ff fd7f 	bl	80078d8 <malloc>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	61f8      	str	r0, [r7, #28]
 8007dde:	b928      	cbnz	r0, 8007dec <__pow5mult+0x40>
 8007de0:	4b1d      	ldr	r3, [pc, #116]	@ (8007e58 <__pow5mult+0xac>)
 8007de2:	481e      	ldr	r0, [pc, #120]	@ (8007e5c <__pow5mult+0xb0>)
 8007de4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007de8:	f000 fbea 	bl	80085c0 <__assert_func>
 8007dec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007df0:	6004      	str	r4, [r0, #0]
 8007df2:	60c4      	str	r4, [r0, #12]
 8007df4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007df8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007dfc:	b94c      	cbnz	r4, 8007e12 <__pow5mult+0x66>
 8007dfe:	f240 2171 	movw	r1, #625	@ 0x271
 8007e02:	4638      	mov	r0, r7
 8007e04:	f7ff ff12 	bl	8007c2c <__i2b>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e0e:	4604      	mov	r4, r0
 8007e10:	6003      	str	r3, [r0, #0]
 8007e12:	f04f 0900 	mov.w	r9, #0
 8007e16:	07eb      	lsls	r3, r5, #31
 8007e18:	d50a      	bpl.n	8007e30 <__pow5mult+0x84>
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	4622      	mov	r2, r4
 8007e1e:	4638      	mov	r0, r7
 8007e20:	f7ff ff1a 	bl	8007c58 <__multiply>
 8007e24:	4631      	mov	r1, r6
 8007e26:	4680      	mov	r8, r0
 8007e28:	4638      	mov	r0, r7
 8007e2a:	f7ff fe4b 	bl	8007ac4 <_Bfree>
 8007e2e:	4646      	mov	r6, r8
 8007e30:	106d      	asrs	r5, r5, #1
 8007e32:	d00b      	beq.n	8007e4c <__pow5mult+0xa0>
 8007e34:	6820      	ldr	r0, [r4, #0]
 8007e36:	b938      	cbnz	r0, 8007e48 <__pow5mult+0x9c>
 8007e38:	4622      	mov	r2, r4
 8007e3a:	4621      	mov	r1, r4
 8007e3c:	4638      	mov	r0, r7
 8007e3e:	f7ff ff0b 	bl	8007c58 <__multiply>
 8007e42:	6020      	str	r0, [r4, #0]
 8007e44:	f8c0 9000 	str.w	r9, [r0]
 8007e48:	4604      	mov	r4, r0
 8007e4a:	e7e4      	b.n	8007e16 <__pow5mult+0x6a>
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e52:	bf00      	nop
 8007e54:	08009054 	.word	0x08009054
 8007e58:	08008f79 	.word	0x08008f79
 8007e5c:	08008ff9 	.word	0x08008ff9

08007e60 <__lshift>:
 8007e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e64:	460c      	mov	r4, r1
 8007e66:	6849      	ldr	r1, [r1, #4]
 8007e68:	6923      	ldr	r3, [r4, #16]
 8007e6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e6e:	68a3      	ldr	r3, [r4, #8]
 8007e70:	4607      	mov	r7, r0
 8007e72:	4691      	mov	r9, r2
 8007e74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e78:	f108 0601 	add.w	r6, r8, #1
 8007e7c:	42b3      	cmp	r3, r6
 8007e7e:	db0b      	blt.n	8007e98 <__lshift+0x38>
 8007e80:	4638      	mov	r0, r7
 8007e82:	f7ff fddf 	bl	8007a44 <_Balloc>
 8007e86:	4605      	mov	r5, r0
 8007e88:	b948      	cbnz	r0, 8007e9e <__lshift+0x3e>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	4b28      	ldr	r3, [pc, #160]	@ (8007f30 <__lshift+0xd0>)
 8007e8e:	4829      	ldr	r0, [pc, #164]	@ (8007f34 <__lshift+0xd4>)
 8007e90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007e94:	f000 fb94 	bl	80085c0 <__assert_func>
 8007e98:	3101      	adds	r1, #1
 8007e9a:	005b      	lsls	r3, r3, #1
 8007e9c:	e7ee      	b.n	8007e7c <__lshift+0x1c>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f100 0114 	add.w	r1, r0, #20
 8007ea4:	f100 0210 	add.w	r2, r0, #16
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	4553      	cmp	r3, sl
 8007eac:	db33      	blt.n	8007f16 <__lshift+0xb6>
 8007eae:	6920      	ldr	r0, [r4, #16]
 8007eb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007eb4:	f104 0314 	add.w	r3, r4, #20
 8007eb8:	f019 091f 	ands.w	r9, r9, #31
 8007ebc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ec0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ec4:	d02b      	beq.n	8007f1e <__lshift+0xbe>
 8007ec6:	f1c9 0e20 	rsb	lr, r9, #32
 8007eca:	468a      	mov	sl, r1
 8007ecc:	2200      	movs	r2, #0
 8007ece:	6818      	ldr	r0, [r3, #0]
 8007ed0:	fa00 f009 	lsl.w	r0, r0, r9
 8007ed4:	4310      	orrs	r0, r2
 8007ed6:	f84a 0b04 	str.w	r0, [sl], #4
 8007eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ede:	459c      	cmp	ip, r3
 8007ee0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ee4:	d8f3      	bhi.n	8007ece <__lshift+0x6e>
 8007ee6:	ebac 0304 	sub.w	r3, ip, r4
 8007eea:	3b15      	subs	r3, #21
 8007eec:	f023 0303 	bic.w	r3, r3, #3
 8007ef0:	3304      	adds	r3, #4
 8007ef2:	f104 0015 	add.w	r0, r4, #21
 8007ef6:	4584      	cmp	ip, r0
 8007ef8:	bf38      	it	cc
 8007efa:	2304      	movcc	r3, #4
 8007efc:	50ca      	str	r2, [r1, r3]
 8007efe:	b10a      	cbz	r2, 8007f04 <__lshift+0xa4>
 8007f00:	f108 0602 	add.w	r6, r8, #2
 8007f04:	3e01      	subs	r6, #1
 8007f06:	4638      	mov	r0, r7
 8007f08:	612e      	str	r6, [r5, #16]
 8007f0a:	4621      	mov	r1, r4
 8007f0c:	f7ff fdda 	bl	8007ac4 <_Bfree>
 8007f10:	4628      	mov	r0, r5
 8007f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f16:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	e7c5      	b.n	8007eaa <__lshift+0x4a>
 8007f1e:	3904      	subs	r1, #4
 8007f20:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f24:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f28:	459c      	cmp	ip, r3
 8007f2a:	d8f9      	bhi.n	8007f20 <__lshift+0xc0>
 8007f2c:	e7ea      	b.n	8007f04 <__lshift+0xa4>
 8007f2e:	bf00      	nop
 8007f30:	08008fe8 	.word	0x08008fe8
 8007f34:	08008ff9 	.word	0x08008ff9

08007f38 <__mcmp>:
 8007f38:	690a      	ldr	r2, [r1, #16]
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	6900      	ldr	r0, [r0, #16]
 8007f3e:	1a80      	subs	r0, r0, r2
 8007f40:	b530      	push	{r4, r5, lr}
 8007f42:	d10e      	bne.n	8007f62 <__mcmp+0x2a>
 8007f44:	3314      	adds	r3, #20
 8007f46:	3114      	adds	r1, #20
 8007f48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007f50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f58:	4295      	cmp	r5, r2
 8007f5a:	d003      	beq.n	8007f64 <__mcmp+0x2c>
 8007f5c:	d205      	bcs.n	8007f6a <__mcmp+0x32>
 8007f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f62:	bd30      	pop	{r4, r5, pc}
 8007f64:	42a3      	cmp	r3, r4
 8007f66:	d3f3      	bcc.n	8007f50 <__mcmp+0x18>
 8007f68:	e7fb      	b.n	8007f62 <__mcmp+0x2a>
 8007f6a:	2001      	movs	r0, #1
 8007f6c:	e7f9      	b.n	8007f62 <__mcmp+0x2a>
	...

08007f70 <__mdiff>:
 8007f70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f74:	4689      	mov	r9, r1
 8007f76:	4606      	mov	r6, r0
 8007f78:	4611      	mov	r1, r2
 8007f7a:	4648      	mov	r0, r9
 8007f7c:	4614      	mov	r4, r2
 8007f7e:	f7ff ffdb 	bl	8007f38 <__mcmp>
 8007f82:	1e05      	subs	r5, r0, #0
 8007f84:	d112      	bne.n	8007fac <__mdiff+0x3c>
 8007f86:	4629      	mov	r1, r5
 8007f88:	4630      	mov	r0, r6
 8007f8a:	f7ff fd5b 	bl	8007a44 <_Balloc>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	b928      	cbnz	r0, 8007f9e <__mdiff+0x2e>
 8007f92:	4b3f      	ldr	r3, [pc, #252]	@ (8008090 <__mdiff+0x120>)
 8007f94:	f240 2137 	movw	r1, #567	@ 0x237
 8007f98:	483e      	ldr	r0, [pc, #248]	@ (8008094 <__mdiff+0x124>)
 8007f9a:	f000 fb11 	bl	80085c0 <__assert_func>
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007fa4:	4610      	mov	r0, r2
 8007fa6:	b003      	add	sp, #12
 8007fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fac:	bfbc      	itt	lt
 8007fae:	464b      	movlt	r3, r9
 8007fb0:	46a1      	movlt	r9, r4
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007fb8:	bfba      	itte	lt
 8007fba:	461c      	movlt	r4, r3
 8007fbc:	2501      	movlt	r5, #1
 8007fbe:	2500      	movge	r5, #0
 8007fc0:	f7ff fd40 	bl	8007a44 <_Balloc>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	b918      	cbnz	r0, 8007fd0 <__mdiff+0x60>
 8007fc8:	4b31      	ldr	r3, [pc, #196]	@ (8008090 <__mdiff+0x120>)
 8007fca:	f240 2145 	movw	r1, #581	@ 0x245
 8007fce:	e7e3      	b.n	8007f98 <__mdiff+0x28>
 8007fd0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007fd4:	6926      	ldr	r6, [r4, #16]
 8007fd6:	60c5      	str	r5, [r0, #12]
 8007fd8:	f109 0310 	add.w	r3, r9, #16
 8007fdc:	f109 0514 	add.w	r5, r9, #20
 8007fe0:	f104 0e14 	add.w	lr, r4, #20
 8007fe4:	f100 0b14 	add.w	fp, r0, #20
 8007fe8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007fec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007ff0:	9301      	str	r3, [sp, #4]
 8007ff2:	46d9      	mov	r9, fp
 8007ff4:	f04f 0c00 	mov.w	ip, #0
 8007ff8:	9b01      	ldr	r3, [sp, #4]
 8007ffa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007ffe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	fa1f f38a 	uxth.w	r3, sl
 8008008:	4619      	mov	r1, r3
 800800a:	b283      	uxth	r3, r0
 800800c:	1acb      	subs	r3, r1, r3
 800800e:	0c00      	lsrs	r0, r0, #16
 8008010:	4463      	add	r3, ip
 8008012:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008016:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800801a:	b29b      	uxth	r3, r3
 800801c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008020:	4576      	cmp	r6, lr
 8008022:	f849 3b04 	str.w	r3, [r9], #4
 8008026:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800802a:	d8e5      	bhi.n	8007ff8 <__mdiff+0x88>
 800802c:	1b33      	subs	r3, r6, r4
 800802e:	3b15      	subs	r3, #21
 8008030:	f023 0303 	bic.w	r3, r3, #3
 8008034:	3415      	adds	r4, #21
 8008036:	3304      	adds	r3, #4
 8008038:	42a6      	cmp	r6, r4
 800803a:	bf38      	it	cc
 800803c:	2304      	movcc	r3, #4
 800803e:	441d      	add	r5, r3
 8008040:	445b      	add	r3, fp
 8008042:	461e      	mov	r6, r3
 8008044:	462c      	mov	r4, r5
 8008046:	4544      	cmp	r4, r8
 8008048:	d30e      	bcc.n	8008068 <__mdiff+0xf8>
 800804a:	f108 0103 	add.w	r1, r8, #3
 800804e:	1b49      	subs	r1, r1, r5
 8008050:	f021 0103 	bic.w	r1, r1, #3
 8008054:	3d03      	subs	r5, #3
 8008056:	45a8      	cmp	r8, r5
 8008058:	bf38      	it	cc
 800805a:	2100      	movcc	r1, #0
 800805c:	440b      	add	r3, r1
 800805e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008062:	b191      	cbz	r1, 800808a <__mdiff+0x11a>
 8008064:	6117      	str	r7, [r2, #16]
 8008066:	e79d      	b.n	8007fa4 <__mdiff+0x34>
 8008068:	f854 1b04 	ldr.w	r1, [r4], #4
 800806c:	46e6      	mov	lr, ip
 800806e:	0c08      	lsrs	r0, r1, #16
 8008070:	fa1c fc81 	uxtah	ip, ip, r1
 8008074:	4471      	add	r1, lr
 8008076:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800807a:	b289      	uxth	r1, r1
 800807c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008080:	f846 1b04 	str.w	r1, [r6], #4
 8008084:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008088:	e7dd      	b.n	8008046 <__mdiff+0xd6>
 800808a:	3f01      	subs	r7, #1
 800808c:	e7e7      	b.n	800805e <__mdiff+0xee>
 800808e:	bf00      	nop
 8008090:	08008fe8 	.word	0x08008fe8
 8008094:	08008ff9 	.word	0x08008ff9

08008098 <__d2b>:
 8008098:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800809c:	460f      	mov	r7, r1
 800809e:	2101      	movs	r1, #1
 80080a0:	ec59 8b10 	vmov	r8, r9, d0
 80080a4:	4616      	mov	r6, r2
 80080a6:	f7ff fccd 	bl	8007a44 <_Balloc>
 80080aa:	4604      	mov	r4, r0
 80080ac:	b930      	cbnz	r0, 80080bc <__d2b+0x24>
 80080ae:	4602      	mov	r2, r0
 80080b0:	4b23      	ldr	r3, [pc, #140]	@ (8008140 <__d2b+0xa8>)
 80080b2:	4824      	ldr	r0, [pc, #144]	@ (8008144 <__d2b+0xac>)
 80080b4:	f240 310f 	movw	r1, #783	@ 0x30f
 80080b8:	f000 fa82 	bl	80085c0 <__assert_func>
 80080bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80080c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080c4:	b10d      	cbz	r5, 80080ca <__d2b+0x32>
 80080c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080ca:	9301      	str	r3, [sp, #4]
 80080cc:	f1b8 0300 	subs.w	r3, r8, #0
 80080d0:	d023      	beq.n	800811a <__d2b+0x82>
 80080d2:	4668      	mov	r0, sp
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	f7ff fd7c 	bl	8007bd2 <__lo0bits>
 80080da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80080de:	b1d0      	cbz	r0, 8008116 <__d2b+0x7e>
 80080e0:	f1c0 0320 	rsb	r3, r0, #32
 80080e4:	fa02 f303 	lsl.w	r3, r2, r3
 80080e8:	430b      	orrs	r3, r1
 80080ea:	40c2      	lsrs	r2, r0
 80080ec:	6163      	str	r3, [r4, #20]
 80080ee:	9201      	str	r2, [sp, #4]
 80080f0:	9b01      	ldr	r3, [sp, #4]
 80080f2:	61a3      	str	r3, [r4, #24]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	bf0c      	ite	eq
 80080f8:	2201      	moveq	r2, #1
 80080fa:	2202      	movne	r2, #2
 80080fc:	6122      	str	r2, [r4, #16]
 80080fe:	b1a5      	cbz	r5, 800812a <__d2b+0x92>
 8008100:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008104:	4405      	add	r5, r0
 8008106:	603d      	str	r5, [r7, #0]
 8008108:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800810c:	6030      	str	r0, [r6, #0]
 800810e:	4620      	mov	r0, r4
 8008110:	b003      	add	sp, #12
 8008112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008116:	6161      	str	r1, [r4, #20]
 8008118:	e7ea      	b.n	80080f0 <__d2b+0x58>
 800811a:	a801      	add	r0, sp, #4
 800811c:	f7ff fd59 	bl	8007bd2 <__lo0bits>
 8008120:	9b01      	ldr	r3, [sp, #4]
 8008122:	6163      	str	r3, [r4, #20]
 8008124:	3020      	adds	r0, #32
 8008126:	2201      	movs	r2, #1
 8008128:	e7e8      	b.n	80080fc <__d2b+0x64>
 800812a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800812e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008132:	6038      	str	r0, [r7, #0]
 8008134:	6918      	ldr	r0, [r3, #16]
 8008136:	f7ff fd2d 	bl	8007b94 <__hi0bits>
 800813a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800813e:	e7e5      	b.n	800810c <__d2b+0x74>
 8008140:	08008fe8 	.word	0x08008fe8
 8008144:	08008ff9 	.word	0x08008ff9

08008148 <__ssputs_r>:
 8008148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800814c:	688e      	ldr	r6, [r1, #8]
 800814e:	461f      	mov	r7, r3
 8008150:	42be      	cmp	r6, r7
 8008152:	680b      	ldr	r3, [r1, #0]
 8008154:	4682      	mov	sl, r0
 8008156:	460c      	mov	r4, r1
 8008158:	4690      	mov	r8, r2
 800815a:	d82d      	bhi.n	80081b8 <__ssputs_r+0x70>
 800815c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008160:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008164:	d026      	beq.n	80081b4 <__ssputs_r+0x6c>
 8008166:	6965      	ldr	r5, [r4, #20]
 8008168:	6909      	ldr	r1, [r1, #16]
 800816a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800816e:	eba3 0901 	sub.w	r9, r3, r1
 8008172:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008176:	1c7b      	adds	r3, r7, #1
 8008178:	444b      	add	r3, r9
 800817a:	106d      	asrs	r5, r5, #1
 800817c:	429d      	cmp	r5, r3
 800817e:	bf38      	it	cc
 8008180:	461d      	movcc	r5, r3
 8008182:	0553      	lsls	r3, r2, #21
 8008184:	d527      	bpl.n	80081d6 <__ssputs_r+0x8e>
 8008186:	4629      	mov	r1, r5
 8008188:	f7ff fbd0 	bl	800792c <_malloc_r>
 800818c:	4606      	mov	r6, r0
 800818e:	b360      	cbz	r0, 80081ea <__ssputs_r+0xa2>
 8008190:	6921      	ldr	r1, [r4, #16]
 8008192:	464a      	mov	r2, r9
 8008194:	f000 fa06 	bl	80085a4 <memcpy>
 8008198:	89a3      	ldrh	r3, [r4, #12]
 800819a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800819e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081a2:	81a3      	strh	r3, [r4, #12]
 80081a4:	6126      	str	r6, [r4, #16]
 80081a6:	6165      	str	r5, [r4, #20]
 80081a8:	444e      	add	r6, r9
 80081aa:	eba5 0509 	sub.w	r5, r5, r9
 80081ae:	6026      	str	r6, [r4, #0]
 80081b0:	60a5      	str	r5, [r4, #8]
 80081b2:	463e      	mov	r6, r7
 80081b4:	42be      	cmp	r6, r7
 80081b6:	d900      	bls.n	80081ba <__ssputs_r+0x72>
 80081b8:	463e      	mov	r6, r7
 80081ba:	6820      	ldr	r0, [r4, #0]
 80081bc:	4632      	mov	r2, r6
 80081be:	4641      	mov	r1, r8
 80081c0:	f000 f9c6 	bl	8008550 <memmove>
 80081c4:	68a3      	ldr	r3, [r4, #8]
 80081c6:	1b9b      	subs	r3, r3, r6
 80081c8:	60a3      	str	r3, [r4, #8]
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	4433      	add	r3, r6
 80081ce:	6023      	str	r3, [r4, #0]
 80081d0:	2000      	movs	r0, #0
 80081d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d6:	462a      	mov	r2, r5
 80081d8:	f000 fa36 	bl	8008648 <_realloc_r>
 80081dc:	4606      	mov	r6, r0
 80081de:	2800      	cmp	r0, #0
 80081e0:	d1e0      	bne.n	80081a4 <__ssputs_r+0x5c>
 80081e2:	6921      	ldr	r1, [r4, #16]
 80081e4:	4650      	mov	r0, sl
 80081e6:	f7ff fb2d 	bl	8007844 <_free_r>
 80081ea:	230c      	movs	r3, #12
 80081ec:	f8ca 3000 	str.w	r3, [sl]
 80081f0:	89a3      	ldrh	r3, [r4, #12]
 80081f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081f6:	81a3      	strh	r3, [r4, #12]
 80081f8:	f04f 30ff 	mov.w	r0, #4294967295
 80081fc:	e7e9      	b.n	80081d2 <__ssputs_r+0x8a>
	...

08008200 <_svfiprintf_r>:
 8008200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008204:	4698      	mov	r8, r3
 8008206:	898b      	ldrh	r3, [r1, #12]
 8008208:	061b      	lsls	r3, r3, #24
 800820a:	b09d      	sub	sp, #116	@ 0x74
 800820c:	4607      	mov	r7, r0
 800820e:	460d      	mov	r5, r1
 8008210:	4614      	mov	r4, r2
 8008212:	d510      	bpl.n	8008236 <_svfiprintf_r+0x36>
 8008214:	690b      	ldr	r3, [r1, #16]
 8008216:	b973      	cbnz	r3, 8008236 <_svfiprintf_r+0x36>
 8008218:	2140      	movs	r1, #64	@ 0x40
 800821a:	f7ff fb87 	bl	800792c <_malloc_r>
 800821e:	6028      	str	r0, [r5, #0]
 8008220:	6128      	str	r0, [r5, #16]
 8008222:	b930      	cbnz	r0, 8008232 <_svfiprintf_r+0x32>
 8008224:	230c      	movs	r3, #12
 8008226:	603b      	str	r3, [r7, #0]
 8008228:	f04f 30ff 	mov.w	r0, #4294967295
 800822c:	b01d      	add	sp, #116	@ 0x74
 800822e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008232:	2340      	movs	r3, #64	@ 0x40
 8008234:	616b      	str	r3, [r5, #20]
 8008236:	2300      	movs	r3, #0
 8008238:	9309      	str	r3, [sp, #36]	@ 0x24
 800823a:	2320      	movs	r3, #32
 800823c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008240:	f8cd 800c 	str.w	r8, [sp, #12]
 8008244:	2330      	movs	r3, #48	@ 0x30
 8008246:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80083e4 <_svfiprintf_r+0x1e4>
 800824a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800824e:	f04f 0901 	mov.w	r9, #1
 8008252:	4623      	mov	r3, r4
 8008254:	469a      	mov	sl, r3
 8008256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800825a:	b10a      	cbz	r2, 8008260 <_svfiprintf_r+0x60>
 800825c:	2a25      	cmp	r2, #37	@ 0x25
 800825e:	d1f9      	bne.n	8008254 <_svfiprintf_r+0x54>
 8008260:	ebba 0b04 	subs.w	fp, sl, r4
 8008264:	d00b      	beq.n	800827e <_svfiprintf_r+0x7e>
 8008266:	465b      	mov	r3, fp
 8008268:	4622      	mov	r2, r4
 800826a:	4629      	mov	r1, r5
 800826c:	4638      	mov	r0, r7
 800826e:	f7ff ff6b 	bl	8008148 <__ssputs_r>
 8008272:	3001      	adds	r0, #1
 8008274:	f000 80a7 	beq.w	80083c6 <_svfiprintf_r+0x1c6>
 8008278:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800827a:	445a      	add	r2, fp
 800827c:	9209      	str	r2, [sp, #36]	@ 0x24
 800827e:	f89a 3000 	ldrb.w	r3, [sl]
 8008282:	2b00      	cmp	r3, #0
 8008284:	f000 809f 	beq.w	80083c6 <_svfiprintf_r+0x1c6>
 8008288:	2300      	movs	r3, #0
 800828a:	f04f 32ff 	mov.w	r2, #4294967295
 800828e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008292:	f10a 0a01 	add.w	sl, sl, #1
 8008296:	9304      	str	r3, [sp, #16]
 8008298:	9307      	str	r3, [sp, #28]
 800829a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800829e:	931a      	str	r3, [sp, #104]	@ 0x68
 80082a0:	4654      	mov	r4, sl
 80082a2:	2205      	movs	r2, #5
 80082a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a8:	484e      	ldr	r0, [pc, #312]	@ (80083e4 <_svfiprintf_r+0x1e4>)
 80082aa:	f7f7 ffc9 	bl	8000240 <memchr>
 80082ae:	9a04      	ldr	r2, [sp, #16]
 80082b0:	b9d8      	cbnz	r0, 80082ea <_svfiprintf_r+0xea>
 80082b2:	06d0      	lsls	r0, r2, #27
 80082b4:	bf44      	itt	mi
 80082b6:	2320      	movmi	r3, #32
 80082b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082bc:	0711      	lsls	r1, r2, #28
 80082be:	bf44      	itt	mi
 80082c0:	232b      	movmi	r3, #43	@ 0x2b
 80082c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082c6:	f89a 3000 	ldrb.w	r3, [sl]
 80082ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80082cc:	d015      	beq.n	80082fa <_svfiprintf_r+0xfa>
 80082ce:	9a07      	ldr	r2, [sp, #28]
 80082d0:	4654      	mov	r4, sl
 80082d2:	2000      	movs	r0, #0
 80082d4:	f04f 0c0a 	mov.w	ip, #10
 80082d8:	4621      	mov	r1, r4
 80082da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082de:	3b30      	subs	r3, #48	@ 0x30
 80082e0:	2b09      	cmp	r3, #9
 80082e2:	d94b      	bls.n	800837c <_svfiprintf_r+0x17c>
 80082e4:	b1b0      	cbz	r0, 8008314 <_svfiprintf_r+0x114>
 80082e6:	9207      	str	r2, [sp, #28]
 80082e8:	e014      	b.n	8008314 <_svfiprintf_r+0x114>
 80082ea:	eba0 0308 	sub.w	r3, r0, r8
 80082ee:	fa09 f303 	lsl.w	r3, r9, r3
 80082f2:	4313      	orrs	r3, r2
 80082f4:	9304      	str	r3, [sp, #16]
 80082f6:	46a2      	mov	sl, r4
 80082f8:	e7d2      	b.n	80082a0 <_svfiprintf_r+0xa0>
 80082fa:	9b03      	ldr	r3, [sp, #12]
 80082fc:	1d19      	adds	r1, r3, #4
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	9103      	str	r1, [sp, #12]
 8008302:	2b00      	cmp	r3, #0
 8008304:	bfbb      	ittet	lt
 8008306:	425b      	neglt	r3, r3
 8008308:	f042 0202 	orrlt.w	r2, r2, #2
 800830c:	9307      	strge	r3, [sp, #28]
 800830e:	9307      	strlt	r3, [sp, #28]
 8008310:	bfb8      	it	lt
 8008312:	9204      	strlt	r2, [sp, #16]
 8008314:	7823      	ldrb	r3, [r4, #0]
 8008316:	2b2e      	cmp	r3, #46	@ 0x2e
 8008318:	d10a      	bne.n	8008330 <_svfiprintf_r+0x130>
 800831a:	7863      	ldrb	r3, [r4, #1]
 800831c:	2b2a      	cmp	r3, #42	@ 0x2a
 800831e:	d132      	bne.n	8008386 <_svfiprintf_r+0x186>
 8008320:	9b03      	ldr	r3, [sp, #12]
 8008322:	1d1a      	adds	r2, r3, #4
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	9203      	str	r2, [sp, #12]
 8008328:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800832c:	3402      	adds	r4, #2
 800832e:	9305      	str	r3, [sp, #20]
 8008330:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80083f4 <_svfiprintf_r+0x1f4>
 8008334:	7821      	ldrb	r1, [r4, #0]
 8008336:	2203      	movs	r2, #3
 8008338:	4650      	mov	r0, sl
 800833a:	f7f7 ff81 	bl	8000240 <memchr>
 800833e:	b138      	cbz	r0, 8008350 <_svfiprintf_r+0x150>
 8008340:	9b04      	ldr	r3, [sp, #16]
 8008342:	eba0 000a 	sub.w	r0, r0, sl
 8008346:	2240      	movs	r2, #64	@ 0x40
 8008348:	4082      	lsls	r2, r0
 800834a:	4313      	orrs	r3, r2
 800834c:	3401      	adds	r4, #1
 800834e:	9304      	str	r3, [sp, #16]
 8008350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008354:	4824      	ldr	r0, [pc, #144]	@ (80083e8 <_svfiprintf_r+0x1e8>)
 8008356:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800835a:	2206      	movs	r2, #6
 800835c:	f7f7 ff70 	bl	8000240 <memchr>
 8008360:	2800      	cmp	r0, #0
 8008362:	d036      	beq.n	80083d2 <_svfiprintf_r+0x1d2>
 8008364:	4b21      	ldr	r3, [pc, #132]	@ (80083ec <_svfiprintf_r+0x1ec>)
 8008366:	bb1b      	cbnz	r3, 80083b0 <_svfiprintf_r+0x1b0>
 8008368:	9b03      	ldr	r3, [sp, #12]
 800836a:	3307      	adds	r3, #7
 800836c:	f023 0307 	bic.w	r3, r3, #7
 8008370:	3308      	adds	r3, #8
 8008372:	9303      	str	r3, [sp, #12]
 8008374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008376:	4433      	add	r3, r6
 8008378:	9309      	str	r3, [sp, #36]	@ 0x24
 800837a:	e76a      	b.n	8008252 <_svfiprintf_r+0x52>
 800837c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008380:	460c      	mov	r4, r1
 8008382:	2001      	movs	r0, #1
 8008384:	e7a8      	b.n	80082d8 <_svfiprintf_r+0xd8>
 8008386:	2300      	movs	r3, #0
 8008388:	3401      	adds	r4, #1
 800838a:	9305      	str	r3, [sp, #20]
 800838c:	4619      	mov	r1, r3
 800838e:	f04f 0c0a 	mov.w	ip, #10
 8008392:	4620      	mov	r0, r4
 8008394:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008398:	3a30      	subs	r2, #48	@ 0x30
 800839a:	2a09      	cmp	r2, #9
 800839c:	d903      	bls.n	80083a6 <_svfiprintf_r+0x1a6>
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d0c6      	beq.n	8008330 <_svfiprintf_r+0x130>
 80083a2:	9105      	str	r1, [sp, #20]
 80083a4:	e7c4      	b.n	8008330 <_svfiprintf_r+0x130>
 80083a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80083aa:	4604      	mov	r4, r0
 80083ac:	2301      	movs	r3, #1
 80083ae:	e7f0      	b.n	8008392 <_svfiprintf_r+0x192>
 80083b0:	ab03      	add	r3, sp, #12
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	462a      	mov	r2, r5
 80083b6:	4b0e      	ldr	r3, [pc, #56]	@ (80083f0 <_svfiprintf_r+0x1f0>)
 80083b8:	a904      	add	r1, sp, #16
 80083ba:	4638      	mov	r0, r7
 80083bc:	f7fd ff14 	bl	80061e8 <_printf_float>
 80083c0:	1c42      	adds	r2, r0, #1
 80083c2:	4606      	mov	r6, r0
 80083c4:	d1d6      	bne.n	8008374 <_svfiprintf_r+0x174>
 80083c6:	89ab      	ldrh	r3, [r5, #12]
 80083c8:	065b      	lsls	r3, r3, #25
 80083ca:	f53f af2d 	bmi.w	8008228 <_svfiprintf_r+0x28>
 80083ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083d0:	e72c      	b.n	800822c <_svfiprintf_r+0x2c>
 80083d2:	ab03      	add	r3, sp, #12
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	462a      	mov	r2, r5
 80083d8:	4b05      	ldr	r3, [pc, #20]	@ (80083f0 <_svfiprintf_r+0x1f0>)
 80083da:	a904      	add	r1, sp, #16
 80083dc:	4638      	mov	r0, r7
 80083de:	f7fe f98b 	bl	80066f8 <_printf_i>
 80083e2:	e7ed      	b.n	80083c0 <_svfiprintf_r+0x1c0>
 80083e4:	08009150 	.word	0x08009150
 80083e8:	0800915a 	.word	0x0800915a
 80083ec:	080061e9 	.word	0x080061e9
 80083f0:	08008149 	.word	0x08008149
 80083f4:	08009156 	.word	0x08009156

080083f8 <__sflush_r>:
 80083f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008400:	0716      	lsls	r6, r2, #28
 8008402:	4605      	mov	r5, r0
 8008404:	460c      	mov	r4, r1
 8008406:	d454      	bmi.n	80084b2 <__sflush_r+0xba>
 8008408:	684b      	ldr	r3, [r1, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	dc02      	bgt.n	8008414 <__sflush_r+0x1c>
 800840e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008410:	2b00      	cmp	r3, #0
 8008412:	dd48      	ble.n	80084a6 <__sflush_r+0xae>
 8008414:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008416:	2e00      	cmp	r6, #0
 8008418:	d045      	beq.n	80084a6 <__sflush_r+0xae>
 800841a:	2300      	movs	r3, #0
 800841c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008420:	682f      	ldr	r7, [r5, #0]
 8008422:	6a21      	ldr	r1, [r4, #32]
 8008424:	602b      	str	r3, [r5, #0]
 8008426:	d030      	beq.n	800848a <__sflush_r+0x92>
 8008428:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800842a:	89a3      	ldrh	r3, [r4, #12]
 800842c:	0759      	lsls	r1, r3, #29
 800842e:	d505      	bpl.n	800843c <__sflush_r+0x44>
 8008430:	6863      	ldr	r3, [r4, #4]
 8008432:	1ad2      	subs	r2, r2, r3
 8008434:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008436:	b10b      	cbz	r3, 800843c <__sflush_r+0x44>
 8008438:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800843a:	1ad2      	subs	r2, r2, r3
 800843c:	2300      	movs	r3, #0
 800843e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008440:	6a21      	ldr	r1, [r4, #32]
 8008442:	4628      	mov	r0, r5
 8008444:	47b0      	blx	r6
 8008446:	1c43      	adds	r3, r0, #1
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	d106      	bne.n	800845a <__sflush_r+0x62>
 800844c:	6829      	ldr	r1, [r5, #0]
 800844e:	291d      	cmp	r1, #29
 8008450:	d82b      	bhi.n	80084aa <__sflush_r+0xb2>
 8008452:	4a2a      	ldr	r2, [pc, #168]	@ (80084fc <__sflush_r+0x104>)
 8008454:	410a      	asrs	r2, r1
 8008456:	07d6      	lsls	r6, r2, #31
 8008458:	d427      	bmi.n	80084aa <__sflush_r+0xb2>
 800845a:	2200      	movs	r2, #0
 800845c:	6062      	str	r2, [r4, #4]
 800845e:	04d9      	lsls	r1, r3, #19
 8008460:	6922      	ldr	r2, [r4, #16]
 8008462:	6022      	str	r2, [r4, #0]
 8008464:	d504      	bpl.n	8008470 <__sflush_r+0x78>
 8008466:	1c42      	adds	r2, r0, #1
 8008468:	d101      	bne.n	800846e <__sflush_r+0x76>
 800846a:	682b      	ldr	r3, [r5, #0]
 800846c:	b903      	cbnz	r3, 8008470 <__sflush_r+0x78>
 800846e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008470:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008472:	602f      	str	r7, [r5, #0]
 8008474:	b1b9      	cbz	r1, 80084a6 <__sflush_r+0xae>
 8008476:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800847a:	4299      	cmp	r1, r3
 800847c:	d002      	beq.n	8008484 <__sflush_r+0x8c>
 800847e:	4628      	mov	r0, r5
 8008480:	f7ff f9e0 	bl	8007844 <_free_r>
 8008484:	2300      	movs	r3, #0
 8008486:	6363      	str	r3, [r4, #52]	@ 0x34
 8008488:	e00d      	b.n	80084a6 <__sflush_r+0xae>
 800848a:	2301      	movs	r3, #1
 800848c:	4628      	mov	r0, r5
 800848e:	47b0      	blx	r6
 8008490:	4602      	mov	r2, r0
 8008492:	1c50      	adds	r0, r2, #1
 8008494:	d1c9      	bne.n	800842a <__sflush_r+0x32>
 8008496:	682b      	ldr	r3, [r5, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d0c6      	beq.n	800842a <__sflush_r+0x32>
 800849c:	2b1d      	cmp	r3, #29
 800849e:	d001      	beq.n	80084a4 <__sflush_r+0xac>
 80084a0:	2b16      	cmp	r3, #22
 80084a2:	d11e      	bne.n	80084e2 <__sflush_r+0xea>
 80084a4:	602f      	str	r7, [r5, #0]
 80084a6:	2000      	movs	r0, #0
 80084a8:	e022      	b.n	80084f0 <__sflush_r+0xf8>
 80084aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084ae:	b21b      	sxth	r3, r3
 80084b0:	e01b      	b.n	80084ea <__sflush_r+0xf2>
 80084b2:	690f      	ldr	r7, [r1, #16]
 80084b4:	2f00      	cmp	r7, #0
 80084b6:	d0f6      	beq.n	80084a6 <__sflush_r+0xae>
 80084b8:	0793      	lsls	r3, r2, #30
 80084ba:	680e      	ldr	r6, [r1, #0]
 80084bc:	bf08      	it	eq
 80084be:	694b      	ldreq	r3, [r1, #20]
 80084c0:	600f      	str	r7, [r1, #0]
 80084c2:	bf18      	it	ne
 80084c4:	2300      	movne	r3, #0
 80084c6:	eba6 0807 	sub.w	r8, r6, r7
 80084ca:	608b      	str	r3, [r1, #8]
 80084cc:	f1b8 0f00 	cmp.w	r8, #0
 80084d0:	dde9      	ble.n	80084a6 <__sflush_r+0xae>
 80084d2:	6a21      	ldr	r1, [r4, #32]
 80084d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80084d6:	4643      	mov	r3, r8
 80084d8:	463a      	mov	r2, r7
 80084da:	4628      	mov	r0, r5
 80084dc:	47b0      	blx	r6
 80084de:	2800      	cmp	r0, #0
 80084e0:	dc08      	bgt.n	80084f4 <__sflush_r+0xfc>
 80084e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084ea:	81a3      	strh	r3, [r4, #12]
 80084ec:	f04f 30ff 	mov.w	r0, #4294967295
 80084f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084f4:	4407      	add	r7, r0
 80084f6:	eba8 0800 	sub.w	r8, r8, r0
 80084fa:	e7e7      	b.n	80084cc <__sflush_r+0xd4>
 80084fc:	dfbffffe 	.word	0xdfbffffe

08008500 <_fflush_r>:
 8008500:	b538      	push	{r3, r4, r5, lr}
 8008502:	690b      	ldr	r3, [r1, #16]
 8008504:	4605      	mov	r5, r0
 8008506:	460c      	mov	r4, r1
 8008508:	b913      	cbnz	r3, 8008510 <_fflush_r+0x10>
 800850a:	2500      	movs	r5, #0
 800850c:	4628      	mov	r0, r5
 800850e:	bd38      	pop	{r3, r4, r5, pc}
 8008510:	b118      	cbz	r0, 800851a <_fflush_r+0x1a>
 8008512:	6a03      	ldr	r3, [r0, #32]
 8008514:	b90b      	cbnz	r3, 800851a <_fflush_r+0x1a>
 8008516:	f7fe fa9b 	bl	8006a50 <__sinit>
 800851a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d0f3      	beq.n	800850a <_fflush_r+0xa>
 8008522:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008524:	07d0      	lsls	r0, r2, #31
 8008526:	d404      	bmi.n	8008532 <_fflush_r+0x32>
 8008528:	0599      	lsls	r1, r3, #22
 800852a:	d402      	bmi.n	8008532 <_fflush_r+0x32>
 800852c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800852e:	f7fe fba6 	bl	8006c7e <__retarget_lock_acquire_recursive>
 8008532:	4628      	mov	r0, r5
 8008534:	4621      	mov	r1, r4
 8008536:	f7ff ff5f 	bl	80083f8 <__sflush_r>
 800853a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800853c:	07da      	lsls	r2, r3, #31
 800853e:	4605      	mov	r5, r0
 8008540:	d4e4      	bmi.n	800850c <_fflush_r+0xc>
 8008542:	89a3      	ldrh	r3, [r4, #12]
 8008544:	059b      	lsls	r3, r3, #22
 8008546:	d4e1      	bmi.n	800850c <_fflush_r+0xc>
 8008548:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800854a:	f7fe fb99 	bl	8006c80 <__retarget_lock_release_recursive>
 800854e:	e7dd      	b.n	800850c <_fflush_r+0xc>

08008550 <memmove>:
 8008550:	4288      	cmp	r0, r1
 8008552:	b510      	push	{r4, lr}
 8008554:	eb01 0402 	add.w	r4, r1, r2
 8008558:	d902      	bls.n	8008560 <memmove+0x10>
 800855a:	4284      	cmp	r4, r0
 800855c:	4623      	mov	r3, r4
 800855e:	d807      	bhi.n	8008570 <memmove+0x20>
 8008560:	1e43      	subs	r3, r0, #1
 8008562:	42a1      	cmp	r1, r4
 8008564:	d008      	beq.n	8008578 <memmove+0x28>
 8008566:	f811 2b01 	ldrb.w	r2, [r1], #1
 800856a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800856e:	e7f8      	b.n	8008562 <memmove+0x12>
 8008570:	4402      	add	r2, r0
 8008572:	4601      	mov	r1, r0
 8008574:	428a      	cmp	r2, r1
 8008576:	d100      	bne.n	800857a <memmove+0x2a>
 8008578:	bd10      	pop	{r4, pc}
 800857a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800857e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008582:	e7f7      	b.n	8008574 <memmove+0x24>

08008584 <_sbrk_r>:
 8008584:	b538      	push	{r3, r4, r5, lr}
 8008586:	4d06      	ldr	r5, [pc, #24]	@ (80085a0 <_sbrk_r+0x1c>)
 8008588:	2300      	movs	r3, #0
 800858a:	4604      	mov	r4, r0
 800858c:	4608      	mov	r0, r1
 800858e:	602b      	str	r3, [r5, #0]
 8008590:	f7f9 f810 	bl	80015b4 <_sbrk>
 8008594:	1c43      	adds	r3, r0, #1
 8008596:	d102      	bne.n	800859e <_sbrk_r+0x1a>
 8008598:	682b      	ldr	r3, [r5, #0]
 800859a:	b103      	cbz	r3, 800859e <_sbrk_r+0x1a>
 800859c:	6023      	str	r3, [r4, #0]
 800859e:	bd38      	pop	{r3, r4, r5, pc}
 80085a0:	200004e8 	.word	0x200004e8

080085a4 <memcpy>:
 80085a4:	440a      	add	r2, r1
 80085a6:	4291      	cmp	r1, r2
 80085a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80085ac:	d100      	bne.n	80085b0 <memcpy+0xc>
 80085ae:	4770      	bx	lr
 80085b0:	b510      	push	{r4, lr}
 80085b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085ba:	4291      	cmp	r1, r2
 80085bc:	d1f9      	bne.n	80085b2 <memcpy+0xe>
 80085be:	bd10      	pop	{r4, pc}

080085c0 <__assert_func>:
 80085c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085c2:	4614      	mov	r4, r2
 80085c4:	461a      	mov	r2, r3
 80085c6:	4b09      	ldr	r3, [pc, #36]	@ (80085ec <__assert_func+0x2c>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4605      	mov	r5, r0
 80085cc:	68d8      	ldr	r0, [r3, #12]
 80085ce:	b954      	cbnz	r4, 80085e6 <__assert_func+0x26>
 80085d0:	4b07      	ldr	r3, [pc, #28]	@ (80085f0 <__assert_func+0x30>)
 80085d2:	461c      	mov	r4, r3
 80085d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085d8:	9100      	str	r1, [sp, #0]
 80085da:	462b      	mov	r3, r5
 80085dc:	4905      	ldr	r1, [pc, #20]	@ (80085f4 <__assert_func+0x34>)
 80085de:	f000 f86f 	bl	80086c0 <fiprintf>
 80085e2:	f000 f87f 	bl	80086e4 <abort>
 80085e6:	4b04      	ldr	r3, [pc, #16]	@ (80085f8 <__assert_func+0x38>)
 80085e8:	e7f4      	b.n	80085d4 <__assert_func+0x14>
 80085ea:	bf00      	nop
 80085ec:	20000024 	.word	0x20000024
 80085f0:	080091a6 	.word	0x080091a6
 80085f4:	08009178 	.word	0x08009178
 80085f8:	0800916b 	.word	0x0800916b

080085fc <_calloc_r>:
 80085fc:	b570      	push	{r4, r5, r6, lr}
 80085fe:	fba1 5402 	umull	r5, r4, r1, r2
 8008602:	b93c      	cbnz	r4, 8008614 <_calloc_r+0x18>
 8008604:	4629      	mov	r1, r5
 8008606:	f7ff f991 	bl	800792c <_malloc_r>
 800860a:	4606      	mov	r6, r0
 800860c:	b928      	cbnz	r0, 800861a <_calloc_r+0x1e>
 800860e:	2600      	movs	r6, #0
 8008610:	4630      	mov	r0, r6
 8008612:	bd70      	pop	{r4, r5, r6, pc}
 8008614:	220c      	movs	r2, #12
 8008616:	6002      	str	r2, [r0, #0]
 8008618:	e7f9      	b.n	800860e <_calloc_r+0x12>
 800861a:	462a      	mov	r2, r5
 800861c:	4621      	mov	r1, r4
 800861e:	f7fe fab0 	bl	8006b82 <memset>
 8008622:	e7f5      	b.n	8008610 <_calloc_r+0x14>

08008624 <__ascii_mbtowc>:
 8008624:	b082      	sub	sp, #8
 8008626:	b901      	cbnz	r1, 800862a <__ascii_mbtowc+0x6>
 8008628:	a901      	add	r1, sp, #4
 800862a:	b142      	cbz	r2, 800863e <__ascii_mbtowc+0x1a>
 800862c:	b14b      	cbz	r3, 8008642 <__ascii_mbtowc+0x1e>
 800862e:	7813      	ldrb	r3, [r2, #0]
 8008630:	600b      	str	r3, [r1, #0]
 8008632:	7812      	ldrb	r2, [r2, #0]
 8008634:	1e10      	subs	r0, r2, #0
 8008636:	bf18      	it	ne
 8008638:	2001      	movne	r0, #1
 800863a:	b002      	add	sp, #8
 800863c:	4770      	bx	lr
 800863e:	4610      	mov	r0, r2
 8008640:	e7fb      	b.n	800863a <__ascii_mbtowc+0x16>
 8008642:	f06f 0001 	mvn.w	r0, #1
 8008646:	e7f8      	b.n	800863a <__ascii_mbtowc+0x16>

08008648 <_realloc_r>:
 8008648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800864c:	4680      	mov	r8, r0
 800864e:	4615      	mov	r5, r2
 8008650:	460c      	mov	r4, r1
 8008652:	b921      	cbnz	r1, 800865e <_realloc_r+0x16>
 8008654:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008658:	4611      	mov	r1, r2
 800865a:	f7ff b967 	b.w	800792c <_malloc_r>
 800865e:	b92a      	cbnz	r2, 800866c <_realloc_r+0x24>
 8008660:	f7ff f8f0 	bl	8007844 <_free_r>
 8008664:	2400      	movs	r4, #0
 8008666:	4620      	mov	r0, r4
 8008668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800866c:	f000 f841 	bl	80086f2 <_malloc_usable_size_r>
 8008670:	4285      	cmp	r5, r0
 8008672:	4606      	mov	r6, r0
 8008674:	d802      	bhi.n	800867c <_realloc_r+0x34>
 8008676:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800867a:	d8f4      	bhi.n	8008666 <_realloc_r+0x1e>
 800867c:	4629      	mov	r1, r5
 800867e:	4640      	mov	r0, r8
 8008680:	f7ff f954 	bl	800792c <_malloc_r>
 8008684:	4607      	mov	r7, r0
 8008686:	2800      	cmp	r0, #0
 8008688:	d0ec      	beq.n	8008664 <_realloc_r+0x1c>
 800868a:	42b5      	cmp	r5, r6
 800868c:	462a      	mov	r2, r5
 800868e:	4621      	mov	r1, r4
 8008690:	bf28      	it	cs
 8008692:	4632      	movcs	r2, r6
 8008694:	f7ff ff86 	bl	80085a4 <memcpy>
 8008698:	4621      	mov	r1, r4
 800869a:	4640      	mov	r0, r8
 800869c:	f7ff f8d2 	bl	8007844 <_free_r>
 80086a0:	463c      	mov	r4, r7
 80086a2:	e7e0      	b.n	8008666 <_realloc_r+0x1e>

080086a4 <__ascii_wctomb>:
 80086a4:	4603      	mov	r3, r0
 80086a6:	4608      	mov	r0, r1
 80086a8:	b141      	cbz	r1, 80086bc <__ascii_wctomb+0x18>
 80086aa:	2aff      	cmp	r2, #255	@ 0xff
 80086ac:	d904      	bls.n	80086b8 <__ascii_wctomb+0x14>
 80086ae:	228a      	movs	r2, #138	@ 0x8a
 80086b0:	601a      	str	r2, [r3, #0]
 80086b2:	f04f 30ff 	mov.w	r0, #4294967295
 80086b6:	4770      	bx	lr
 80086b8:	700a      	strb	r2, [r1, #0]
 80086ba:	2001      	movs	r0, #1
 80086bc:	4770      	bx	lr
	...

080086c0 <fiprintf>:
 80086c0:	b40e      	push	{r1, r2, r3}
 80086c2:	b503      	push	{r0, r1, lr}
 80086c4:	4601      	mov	r1, r0
 80086c6:	ab03      	add	r3, sp, #12
 80086c8:	4805      	ldr	r0, [pc, #20]	@ (80086e0 <fiprintf+0x20>)
 80086ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80086ce:	6800      	ldr	r0, [r0, #0]
 80086d0:	9301      	str	r3, [sp, #4]
 80086d2:	f000 f83f 	bl	8008754 <_vfiprintf_r>
 80086d6:	b002      	add	sp, #8
 80086d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80086dc:	b003      	add	sp, #12
 80086de:	4770      	bx	lr
 80086e0:	20000024 	.word	0x20000024

080086e4 <abort>:
 80086e4:	b508      	push	{r3, lr}
 80086e6:	2006      	movs	r0, #6
 80086e8:	f000 fa08 	bl	8008afc <raise>
 80086ec:	2001      	movs	r0, #1
 80086ee:	f7f8 fee9 	bl	80014c4 <_exit>

080086f2 <_malloc_usable_size_r>:
 80086f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086f6:	1f18      	subs	r0, r3, #4
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	bfbc      	itt	lt
 80086fc:	580b      	ldrlt	r3, [r1, r0]
 80086fe:	18c0      	addlt	r0, r0, r3
 8008700:	4770      	bx	lr

08008702 <__sfputc_r>:
 8008702:	6893      	ldr	r3, [r2, #8]
 8008704:	3b01      	subs	r3, #1
 8008706:	2b00      	cmp	r3, #0
 8008708:	b410      	push	{r4}
 800870a:	6093      	str	r3, [r2, #8]
 800870c:	da08      	bge.n	8008720 <__sfputc_r+0x1e>
 800870e:	6994      	ldr	r4, [r2, #24]
 8008710:	42a3      	cmp	r3, r4
 8008712:	db01      	blt.n	8008718 <__sfputc_r+0x16>
 8008714:	290a      	cmp	r1, #10
 8008716:	d103      	bne.n	8008720 <__sfputc_r+0x1e>
 8008718:	f85d 4b04 	ldr.w	r4, [sp], #4
 800871c:	f000 b932 	b.w	8008984 <__swbuf_r>
 8008720:	6813      	ldr	r3, [r2, #0]
 8008722:	1c58      	adds	r0, r3, #1
 8008724:	6010      	str	r0, [r2, #0]
 8008726:	7019      	strb	r1, [r3, #0]
 8008728:	4608      	mov	r0, r1
 800872a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800872e:	4770      	bx	lr

08008730 <__sfputs_r>:
 8008730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008732:	4606      	mov	r6, r0
 8008734:	460f      	mov	r7, r1
 8008736:	4614      	mov	r4, r2
 8008738:	18d5      	adds	r5, r2, r3
 800873a:	42ac      	cmp	r4, r5
 800873c:	d101      	bne.n	8008742 <__sfputs_r+0x12>
 800873e:	2000      	movs	r0, #0
 8008740:	e007      	b.n	8008752 <__sfputs_r+0x22>
 8008742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008746:	463a      	mov	r2, r7
 8008748:	4630      	mov	r0, r6
 800874a:	f7ff ffda 	bl	8008702 <__sfputc_r>
 800874e:	1c43      	adds	r3, r0, #1
 8008750:	d1f3      	bne.n	800873a <__sfputs_r+0xa>
 8008752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008754 <_vfiprintf_r>:
 8008754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008758:	460d      	mov	r5, r1
 800875a:	b09d      	sub	sp, #116	@ 0x74
 800875c:	4614      	mov	r4, r2
 800875e:	4698      	mov	r8, r3
 8008760:	4606      	mov	r6, r0
 8008762:	b118      	cbz	r0, 800876c <_vfiprintf_r+0x18>
 8008764:	6a03      	ldr	r3, [r0, #32]
 8008766:	b90b      	cbnz	r3, 800876c <_vfiprintf_r+0x18>
 8008768:	f7fe f972 	bl	8006a50 <__sinit>
 800876c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800876e:	07d9      	lsls	r1, r3, #31
 8008770:	d405      	bmi.n	800877e <_vfiprintf_r+0x2a>
 8008772:	89ab      	ldrh	r3, [r5, #12]
 8008774:	059a      	lsls	r2, r3, #22
 8008776:	d402      	bmi.n	800877e <_vfiprintf_r+0x2a>
 8008778:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800877a:	f7fe fa80 	bl	8006c7e <__retarget_lock_acquire_recursive>
 800877e:	89ab      	ldrh	r3, [r5, #12]
 8008780:	071b      	lsls	r3, r3, #28
 8008782:	d501      	bpl.n	8008788 <_vfiprintf_r+0x34>
 8008784:	692b      	ldr	r3, [r5, #16]
 8008786:	b99b      	cbnz	r3, 80087b0 <_vfiprintf_r+0x5c>
 8008788:	4629      	mov	r1, r5
 800878a:	4630      	mov	r0, r6
 800878c:	f000 f938 	bl	8008a00 <__swsetup_r>
 8008790:	b170      	cbz	r0, 80087b0 <_vfiprintf_r+0x5c>
 8008792:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008794:	07dc      	lsls	r4, r3, #31
 8008796:	d504      	bpl.n	80087a2 <_vfiprintf_r+0x4e>
 8008798:	f04f 30ff 	mov.w	r0, #4294967295
 800879c:	b01d      	add	sp, #116	@ 0x74
 800879e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a2:	89ab      	ldrh	r3, [r5, #12]
 80087a4:	0598      	lsls	r0, r3, #22
 80087a6:	d4f7      	bmi.n	8008798 <_vfiprintf_r+0x44>
 80087a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087aa:	f7fe fa69 	bl	8006c80 <__retarget_lock_release_recursive>
 80087ae:	e7f3      	b.n	8008798 <_vfiprintf_r+0x44>
 80087b0:	2300      	movs	r3, #0
 80087b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80087b4:	2320      	movs	r3, #32
 80087b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80087be:	2330      	movs	r3, #48	@ 0x30
 80087c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008970 <_vfiprintf_r+0x21c>
 80087c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087c8:	f04f 0901 	mov.w	r9, #1
 80087cc:	4623      	mov	r3, r4
 80087ce:	469a      	mov	sl, r3
 80087d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087d4:	b10a      	cbz	r2, 80087da <_vfiprintf_r+0x86>
 80087d6:	2a25      	cmp	r2, #37	@ 0x25
 80087d8:	d1f9      	bne.n	80087ce <_vfiprintf_r+0x7a>
 80087da:	ebba 0b04 	subs.w	fp, sl, r4
 80087de:	d00b      	beq.n	80087f8 <_vfiprintf_r+0xa4>
 80087e0:	465b      	mov	r3, fp
 80087e2:	4622      	mov	r2, r4
 80087e4:	4629      	mov	r1, r5
 80087e6:	4630      	mov	r0, r6
 80087e8:	f7ff ffa2 	bl	8008730 <__sfputs_r>
 80087ec:	3001      	adds	r0, #1
 80087ee:	f000 80a7 	beq.w	8008940 <_vfiprintf_r+0x1ec>
 80087f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087f4:	445a      	add	r2, fp
 80087f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80087f8:	f89a 3000 	ldrb.w	r3, [sl]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 809f 	beq.w	8008940 <_vfiprintf_r+0x1ec>
 8008802:	2300      	movs	r3, #0
 8008804:	f04f 32ff 	mov.w	r2, #4294967295
 8008808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800880c:	f10a 0a01 	add.w	sl, sl, #1
 8008810:	9304      	str	r3, [sp, #16]
 8008812:	9307      	str	r3, [sp, #28]
 8008814:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008818:	931a      	str	r3, [sp, #104]	@ 0x68
 800881a:	4654      	mov	r4, sl
 800881c:	2205      	movs	r2, #5
 800881e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008822:	4853      	ldr	r0, [pc, #332]	@ (8008970 <_vfiprintf_r+0x21c>)
 8008824:	f7f7 fd0c 	bl	8000240 <memchr>
 8008828:	9a04      	ldr	r2, [sp, #16]
 800882a:	b9d8      	cbnz	r0, 8008864 <_vfiprintf_r+0x110>
 800882c:	06d1      	lsls	r1, r2, #27
 800882e:	bf44      	itt	mi
 8008830:	2320      	movmi	r3, #32
 8008832:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008836:	0713      	lsls	r3, r2, #28
 8008838:	bf44      	itt	mi
 800883a:	232b      	movmi	r3, #43	@ 0x2b
 800883c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008840:	f89a 3000 	ldrb.w	r3, [sl]
 8008844:	2b2a      	cmp	r3, #42	@ 0x2a
 8008846:	d015      	beq.n	8008874 <_vfiprintf_r+0x120>
 8008848:	9a07      	ldr	r2, [sp, #28]
 800884a:	4654      	mov	r4, sl
 800884c:	2000      	movs	r0, #0
 800884e:	f04f 0c0a 	mov.w	ip, #10
 8008852:	4621      	mov	r1, r4
 8008854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008858:	3b30      	subs	r3, #48	@ 0x30
 800885a:	2b09      	cmp	r3, #9
 800885c:	d94b      	bls.n	80088f6 <_vfiprintf_r+0x1a2>
 800885e:	b1b0      	cbz	r0, 800888e <_vfiprintf_r+0x13a>
 8008860:	9207      	str	r2, [sp, #28]
 8008862:	e014      	b.n	800888e <_vfiprintf_r+0x13a>
 8008864:	eba0 0308 	sub.w	r3, r0, r8
 8008868:	fa09 f303 	lsl.w	r3, r9, r3
 800886c:	4313      	orrs	r3, r2
 800886e:	9304      	str	r3, [sp, #16]
 8008870:	46a2      	mov	sl, r4
 8008872:	e7d2      	b.n	800881a <_vfiprintf_r+0xc6>
 8008874:	9b03      	ldr	r3, [sp, #12]
 8008876:	1d19      	adds	r1, r3, #4
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	9103      	str	r1, [sp, #12]
 800887c:	2b00      	cmp	r3, #0
 800887e:	bfbb      	ittet	lt
 8008880:	425b      	neglt	r3, r3
 8008882:	f042 0202 	orrlt.w	r2, r2, #2
 8008886:	9307      	strge	r3, [sp, #28]
 8008888:	9307      	strlt	r3, [sp, #28]
 800888a:	bfb8      	it	lt
 800888c:	9204      	strlt	r2, [sp, #16]
 800888e:	7823      	ldrb	r3, [r4, #0]
 8008890:	2b2e      	cmp	r3, #46	@ 0x2e
 8008892:	d10a      	bne.n	80088aa <_vfiprintf_r+0x156>
 8008894:	7863      	ldrb	r3, [r4, #1]
 8008896:	2b2a      	cmp	r3, #42	@ 0x2a
 8008898:	d132      	bne.n	8008900 <_vfiprintf_r+0x1ac>
 800889a:	9b03      	ldr	r3, [sp, #12]
 800889c:	1d1a      	adds	r2, r3, #4
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	9203      	str	r2, [sp, #12]
 80088a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088a6:	3402      	adds	r4, #2
 80088a8:	9305      	str	r3, [sp, #20]
 80088aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008980 <_vfiprintf_r+0x22c>
 80088ae:	7821      	ldrb	r1, [r4, #0]
 80088b0:	2203      	movs	r2, #3
 80088b2:	4650      	mov	r0, sl
 80088b4:	f7f7 fcc4 	bl	8000240 <memchr>
 80088b8:	b138      	cbz	r0, 80088ca <_vfiprintf_r+0x176>
 80088ba:	9b04      	ldr	r3, [sp, #16]
 80088bc:	eba0 000a 	sub.w	r0, r0, sl
 80088c0:	2240      	movs	r2, #64	@ 0x40
 80088c2:	4082      	lsls	r2, r0
 80088c4:	4313      	orrs	r3, r2
 80088c6:	3401      	adds	r4, #1
 80088c8:	9304      	str	r3, [sp, #16]
 80088ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ce:	4829      	ldr	r0, [pc, #164]	@ (8008974 <_vfiprintf_r+0x220>)
 80088d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088d4:	2206      	movs	r2, #6
 80088d6:	f7f7 fcb3 	bl	8000240 <memchr>
 80088da:	2800      	cmp	r0, #0
 80088dc:	d03f      	beq.n	800895e <_vfiprintf_r+0x20a>
 80088de:	4b26      	ldr	r3, [pc, #152]	@ (8008978 <_vfiprintf_r+0x224>)
 80088e0:	bb1b      	cbnz	r3, 800892a <_vfiprintf_r+0x1d6>
 80088e2:	9b03      	ldr	r3, [sp, #12]
 80088e4:	3307      	adds	r3, #7
 80088e6:	f023 0307 	bic.w	r3, r3, #7
 80088ea:	3308      	adds	r3, #8
 80088ec:	9303      	str	r3, [sp, #12]
 80088ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088f0:	443b      	add	r3, r7
 80088f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80088f4:	e76a      	b.n	80087cc <_vfiprintf_r+0x78>
 80088f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80088fa:	460c      	mov	r4, r1
 80088fc:	2001      	movs	r0, #1
 80088fe:	e7a8      	b.n	8008852 <_vfiprintf_r+0xfe>
 8008900:	2300      	movs	r3, #0
 8008902:	3401      	adds	r4, #1
 8008904:	9305      	str	r3, [sp, #20]
 8008906:	4619      	mov	r1, r3
 8008908:	f04f 0c0a 	mov.w	ip, #10
 800890c:	4620      	mov	r0, r4
 800890e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008912:	3a30      	subs	r2, #48	@ 0x30
 8008914:	2a09      	cmp	r2, #9
 8008916:	d903      	bls.n	8008920 <_vfiprintf_r+0x1cc>
 8008918:	2b00      	cmp	r3, #0
 800891a:	d0c6      	beq.n	80088aa <_vfiprintf_r+0x156>
 800891c:	9105      	str	r1, [sp, #20]
 800891e:	e7c4      	b.n	80088aa <_vfiprintf_r+0x156>
 8008920:	fb0c 2101 	mla	r1, ip, r1, r2
 8008924:	4604      	mov	r4, r0
 8008926:	2301      	movs	r3, #1
 8008928:	e7f0      	b.n	800890c <_vfiprintf_r+0x1b8>
 800892a:	ab03      	add	r3, sp, #12
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	462a      	mov	r2, r5
 8008930:	4b12      	ldr	r3, [pc, #72]	@ (800897c <_vfiprintf_r+0x228>)
 8008932:	a904      	add	r1, sp, #16
 8008934:	4630      	mov	r0, r6
 8008936:	f7fd fc57 	bl	80061e8 <_printf_float>
 800893a:	4607      	mov	r7, r0
 800893c:	1c78      	adds	r0, r7, #1
 800893e:	d1d6      	bne.n	80088ee <_vfiprintf_r+0x19a>
 8008940:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008942:	07d9      	lsls	r1, r3, #31
 8008944:	d405      	bmi.n	8008952 <_vfiprintf_r+0x1fe>
 8008946:	89ab      	ldrh	r3, [r5, #12]
 8008948:	059a      	lsls	r2, r3, #22
 800894a:	d402      	bmi.n	8008952 <_vfiprintf_r+0x1fe>
 800894c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800894e:	f7fe f997 	bl	8006c80 <__retarget_lock_release_recursive>
 8008952:	89ab      	ldrh	r3, [r5, #12]
 8008954:	065b      	lsls	r3, r3, #25
 8008956:	f53f af1f 	bmi.w	8008798 <_vfiprintf_r+0x44>
 800895a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800895c:	e71e      	b.n	800879c <_vfiprintf_r+0x48>
 800895e:	ab03      	add	r3, sp, #12
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	462a      	mov	r2, r5
 8008964:	4b05      	ldr	r3, [pc, #20]	@ (800897c <_vfiprintf_r+0x228>)
 8008966:	a904      	add	r1, sp, #16
 8008968:	4630      	mov	r0, r6
 800896a:	f7fd fec5 	bl	80066f8 <_printf_i>
 800896e:	e7e4      	b.n	800893a <_vfiprintf_r+0x1e6>
 8008970:	08009150 	.word	0x08009150
 8008974:	0800915a 	.word	0x0800915a
 8008978:	080061e9 	.word	0x080061e9
 800897c:	08008731 	.word	0x08008731
 8008980:	08009156 	.word	0x08009156

08008984 <__swbuf_r>:
 8008984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008986:	460e      	mov	r6, r1
 8008988:	4614      	mov	r4, r2
 800898a:	4605      	mov	r5, r0
 800898c:	b118      	cbz	r0, 8008996 <__swbuf_r+0x12>
 800898e:	6a03      	ldr	r3, [r0, #32]
 8008990:	b90b      	cbnz	r3, 8008996 <__swbuf_r+0x12>
 8008992:	f7fe f85d 	bl	8006a50 <__sinit>
 8008996:	69a3      	ldr	r3, [r4, #24]
 8008998:	60a3      	str	r3, [r4, #8]
 800899a:	89a3      	ldrh	r3, [r4, #12]
 800899c:	071a      	lsls	r2, r3, #28
 800899e:	d501      	bpl.n	80089a4 <__swbuf_r+0x20>
 80089a0:	6923      	ldr	r3, [r4, #16]
 80089a2:	b943      	cbnz	r3, 80089b6 <__swbuf_r+0x32>
 80089a4:	4621      	mov	r1, r4
 80089a6:	4628      	mov	r0, r5
 80089a8:	f000 f82a 	bl	8008a00 <__swsetup_r>
 80089ac:	b118      	cbz	r0, 80089b6 <__swbuf_r+0x32>
 80089ae:	f04f 37ff 	mov.w	r7, #4294967295
 80089b2:	4638      	mov	r0, r7
 80089b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089b6:	6823      	ldr	r3, [r4, #0]
 80089b8:	6922      	ldr	r2, [r4, #16]
 80089ba:	1a98      	subs	r0, r3, r2
 80089bc:	6963      	ldr	r3, [r4, #20]
 80089be:	b2f6      	uxtb	r6, r6
 80089c0:	4283      	cmp	r3, r0
 80089c2:	4637      	mov	r7, r6
 80089c4:	dc05      	bgt.n	80089d2 <__swbuf_r+0x4e>
 80089c6:	4621      	mov	r1, r4
 80089c8:	4628      	mov	r0, r5
 80089ca:	f7ff fd99 	bl	8008500 <_fflush_r>
 80089ce:	2800      	cmp	r0, #0
 80089d0:	d1ed      	bne.n	80089ae <__swbuf_r+0x2a>
 80089d2:	68a3      	ldr	r3, [r4, #8]
 80089d4:	3b01      	subs	r3, #1
 80089d6:	60a3      	str	r3, [r4, #8]
 80089d8:	6823      	ldr	r3, [r4, #0]
 80089da:	1c5a      	adds	r2, r3, #1
 80089dc:	6022      	str	r2, [r4, #0]
 80089de:	701e      	strb	r6, [r3, #0]
 80089e0:	6962      	ldr	r2, [r4, #20]
 80089e2:	1c43      	adds	r3, r0, #1
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d004      	beq.n	80089f2 <__swbuf_r+0x6e>
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	07db      	lsls	r3, r3, #31
 80089ec:	d5e1      	bpl.n	80089b2 <__swbuf_r+0x2e>
 80089ee:	2e0a      	cmp	r6, #10
 80089f0:	d1df      	bne.n	80089b2 <__swbuf_r+0x2e>
 80089f2:	4621      	mov	r1, r4
 80089f4:	4628      	mov	r0, r5
 80089f6:	f7ff fd83 	bl	8008500 <_fflush_r>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d0d9      	beq.n	80089b2 <__swbuf_r+0x2e>
 80089fe:	e7d6      	b.n	80089ae <__swbuf_r+0x2a>

08008a00 <__swsetup_r>:
 8008a00:	b538      	push	{r3, r4, r5, lr}
 8008a02:	4b29      	ldr	r3, [pc, #164]	@ (8008aa8 <__swsetup_r+0xa8>)
 8008a04:	4605      	mov	r5, r0
 8008a06:	6818      	ldr	r0, [r3, #0]
 8008a08:	460c      	mov	r4, r1
 8008a0a:	b118      	cbz	r0, 8008a14 <__swsetup_r+0x14>
 8008a0c:	6a03      	ldr	r3, [r0, #32]
 8008a0e:	b90b      	cbnz	r3, 8008a14 <__swsetup_r+0x14>
 8008a10:	f7fe f81e 	bl	8006a50 <__sinit>
 8008a14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a18:	0719      	lsls	r1, r3, #28
 8008a1a:	d422      	bmi.n	8008a62 <__swsetup_r+0x62>
 8008a1c:	06da      	lsls	r2, r3, #27
 8008a1e:	d407      	bmi.n	8008a30 <__swsetup_r+0x30>
 8008a20:	2209      	movs	r2, #9
 8008a22:	602a      	str	r2, [r5, #0]
 8008a24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a28:	81a3      	strh	r3, [r4, #12]
 8008a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2e:	e033      	b.n	8008a98 <__swsetup_r+0x98>
 8008a30:	0758      	lsls	r0, r3, #29
 8008a32:	d512      	bpl.n	8008a5a <__swsetup_r+0x5a>
 8008a34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a36:	b141      	cbz	r1, 8008a4a <__swsetup_r+0x4a>
 8008a38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a3c:	4299      	cmp	r1, r3
 8008a3e:	d002      	beq.n	8008a46 <__swsetup_r+0x46>
 8008a40:	4628      	mov	r0, r5
 8008a42:	f7fe feff 	bl	8007844 <_free_r>
 8008a46:	2300      	movs	r3, #0
 8008a48:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a4a:	89a3      	ldrh	r3, [r4, #12]
 8008a4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a50:	81a3      	strh	r3, [r4, #12]
 8008a52:	2300      	movs	r3, #0
 8008a54:	6063      	str	r3, [r4, #4]
 8008a56:	6923      	ldr	r3, [r4, #16]
 8008a58:	6023      	str	r3, [r4, #0]
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	f043 0308 	orr.w	r3, r3, #8
 8008a60:	81a3      	strh	r3, [r4, #12]
 8008a62:	6923      	ldr	r3, [r4, #16]
 8008a64:	b94b      	cbnz	r3, 8008a7a <__swsetup_r+0x7a>
 8008a66:	89a3      	ldrh	r3, [r4, #12]
 8008a68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a70:	d003      	beq.n	8008a7a <__swsetup_r+0x7a>
 8008a72:	4621      	mov	r1, r4
 8008a74:	4628      	mov	r0, r5
 8008a76:	f000 f883 	bl	8008b80 <__smakebuf_r>
 8008a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a7e:	f013 0201 	ands.w	r2, r3, #1
 8008a82:	d00a      	beq.n	8008a9a <__swsetup_r+0x9a>
 8008a84:	2200      	movs	r2, #0
 8008a86:	60a2      	str	r2, [r4, #8]
 8008a88:	6962      	ldr	r2, [r4, #20]
 8008a8a:	4252      	negs	r2, r2
 8008a8c:	61a2      	str	r2, [r4, #24]
 8008a8e:	6922      	ldr	r2, [r4, #16]
 8008a90:	b942      	cbnz	r2, 8008aa4 <__swsetup_r+0xa4>
 8008a92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a96:	d1c5      	bne.n	8008a24 <__swsetup_r+0x24>
 8008a98:	bd38      	pop	{r3, r4, r5, pc}
 8008a9a:	0799      	lsls	r1, r3, #30
 8008a9c:	bf58      	it	pl
 8008a9e:	6962      	ldrpl	r2, [r4, #20]
 8008aa0:	60a2      	str	r2, [r4, #8]
 8008aa2:	e7f4      	b.n	8008a8e <__swsetup_r+0x8e>
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	e7f7      	b.n	8008a98 <__swsetup_r+0x98>
 8008aa8:	20000024 	.word	0x20000024

08008aac <_raise_r>:
 8008aac:	291f      	cmp	r1, #31
 8008aae:	b538      	push	{r3, r4, r5, lr}
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	d904      	bls.n	8008ac0 <_raise_r+0x14>
 8008ab6:	2316      	movs	r3, #22
 8008ab8:	6003      	str	r3, [r0, #0]
 8008aba:	f04f 30ff 	mov.w	r0, #4294967295
 8008abe:	bd38      	pop	{r3, r4, r5, pc}
 8008ac0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008ac2:	b112      	cbz	r2, 8008aca <_raise_r+0x1e>
 8008ac4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ac8:	b94b      	cbnz	r3, 8008ade <_raise_r+0x32>
 8008aca:	4628      	mov	r0, r5
 8008acc:	f000 f830 	bl	8008b30 <_getpid_r>
 8008ad0:	4622      	mov	r2, r4
 8008ad2:	4601      	mov	r1, r0
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ada:	f000 b817 	b.w	8008b0c <_kill_r>
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d00a      	beq.n	8008af8 <_raise_r+0x4c>
 8008ae2:	1c59      	adds	r1, r3, #1
 8008ae4:	d103      	bne.n	8008aee <_raise_r+0x42>
 8008ae6:	2316      	movs	r3, #22
 8008ae8:	6003      	str	r3, [r0, #0]
 8008aea:	2001      	movs	r0, #1
 8008aec:	e7e7      	b.n	8008abe <_raise_r+0x12>
 8008aee:	2100      	movs	r1, #0
 8008af0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008af4:	4620      	mov	r0, r4
 8008af6:	4798      	blx	r3
 8008af8:	2000      	movs	r0, #0
 8008afa:	e7e0      	b.n	8008abe <_raise_r+0x12>

08008afc <raise>:
 8008afc:	4b02      	ldr	r3, [pc, #8]	@ (8008b08 <raise+0xc>)
 8008afe:	4601      	mov	r1, r0
 8008b00:	6818      	ldr	r0, [r3, #0]
 8008b02:	f7ff bfd3 	b.w	8008aac <_raise_r>
 8008b06:	bf00      	nop
 8008b08:	20000024 	.word	0x20000024

08008b0c <_kill_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	4d07      	ldr	r5, [pc, #28]	@ (8008b2c <_kill_r+0x20>)
 8008b10:	2300      	movs	r3, #0
 8008b12:	4604      	mov	r4, r0
 8008b14:	4608      	mov	r0, r1
 8008b16:	4611      	mov	r1, r2
 8008b18:	602b      	str	r3, [r5, #0]
 8008b1a:	f7f8 fcc3 	bl	80014a4 <_kill>
 8008b1e:	1c43      	adds	r3, r0, #1
 8008b20:	d102      	bne.n	8008b28 <_kill_r+0x1c>
 8008b22:	682b      	ldr	r3, [r5, #0]
 8008b24:	b103      	cbz	r3, 8008b28 <_kill_r+0x1c>
 8008b26:	6023      	str	r3, [r4, #0]
 8008b28:	bd38      	pop	{r3, r4, r5, pc}
 8008b2a:	bf00      	nop
 8008b2c:	200004e8 	.word	0x200004e8

08008b30 <_getpid_r>:
 8008b30:	f7f8 bcb0 	b.w	8001494 <_getpid>

08008b34 <__swhatbuf_r>:
 8008b34:	b570      	push	{r4, r5, r6, lr}
 8008b36:	460c      	mov	r4, r1
 8008b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b3c:	2900      	cmp	r1, #0
 8008b3e:	b096      	sub	sp, #88	@ 0x58
 8008b40:	4615      	mov	r5, r2
 8008b42:	461e      	mov	r6, r3
 8008b44:	da0d      	bge.n	8008b62 <__swhatbuf_r+0x2e>
 8008b46:	89a3      	ldrh	r3, [r4, #12]
 8008b48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b4c:	f04f 0100 	mov.w	r1, #0
 8008b50:	bf14      	ite	ne
 8008b52:	2340      	movne	r3, #64	@ 0x40
 8008b54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b58:	2000      	movs	r0, #0
 8008b5a:	6031      	str	r1, [r6, #0]
 8008b5c:	602b      	str	r3, [r5, #0]
 8008b5e:	b016      	add	sp, #88	@ 0x58
 8008b60:	bd70      	pop	{r4, r5, r6, pc}
 8008b62:	466a      	mov	r2, sp
 8008b64:	f000 f848 	bl	8008bf8 <_fstat_r>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	dbec      	blt.n	8008b46 <__swhatbuf_r+0x12>
 8008b6c:	9901      	ldr	r1, [sp, #4]
 8008b6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b76:	4259      	negs	r1, r3
 8008b78:	4159      	adcs	r1, r3
 8008b7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b7e:	e7eb      	b.n	8008b58 <__swhatbuf_r+0x24>

08008b80 <__smakebuf_r>:
 8008b80:	898b      	ldrh	r3, [r1, #12]
 8008b82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b84:	079d      	lsls	r5, r3, #30
 8008b86:	4606      	mov	r6, r0
 8008b88:	460c      	mov	r4, r1
 8008b8a:	d507      	bpl.n	8008b9c <__smakebuf_r+0x1c>
 8008b8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	6123      	str	r3, [r4, #16]
 8008b94:	2301      	movs	r3, #1
 8008b96:	6163      	str	r3, [r4, #20]
 8008b98:	b003      	add	sp, #12
 8008b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b9c:	ab01      	add	r3, sp, #4
 8008b9e:	466a      	mov	r2, sp
 8008ba0:	f7ff ffc8 	bl	8008b34 <__swhatbuf_r>
 8008ba4:	9f00      	ldr	r7, [sp, #0]
 8008ba6:	4605      	mov	r5, r0
 8008ba8:	4639      	mov	r1, r7
 8008baa:	4630      	mov	r0, r6
 8008bac:	f7fe febe 	bl	800792c <_malloc_r>
 8008bb0:	b948      	cbnz	r0, 8008bc6 <__smakebuf_r+0x46>
 8008bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bb6:	059a      	lsls	r2, r3, #22
 8008bb8:	d4ee      	bmi.n	8008b98 <__smakebuf_r+0x18>
 8008bba:	f023 0303 	bic.w	r3, r3, #3
 8008bbe:	f043 0302 	orr.w	r3, r3, #2
 8008bc2:	81a3      	strh	r3, [r4, #12]
 8008bc4:	e7e2      	b.n	8008b8c <__smakebuf_r+0xc>
 8008bc6:	89a3      	ldrh	r3, [r4, #12]
 8008bc8:	6020      	str	r0, [r4, #0]
 8008bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bce:	81a3      	strh	r3, [r4, #12]
 8008bd0:	9b01      	ldr	r3, [sp, #4]
 8008bd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008bd6:	b15b      	cbz	r3, 8008bf0 <__smakebuf_r+0x70>
 8008bd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bdc:	4630      	mov	r0, r6
 8008bde:	f000 f81d 	bl	8008c1c <_isatty_r>
 8008be2:	b128      	cbz	r0, 8008bf0 <__smakebuf_r+0x70>
 8008be4:	89a3      	ldrh	r3, [r4, #12]
 8008be6:	f023 0303 	bic.w	r3, r3, #3
 8008bea:	f043 0301 	orr.w	r3, r3, #1
 8008bee:	81a3      	strh	r3, [r4, #12]
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	431d      	orrs	r5, r3
 8008bf4:	81a5      	strh	r5, [r4, #12]
 8008bf6:	e7cf      	b.n	8008b98 <__smakebuf_r+0x18>

08008bf8 <_fstat_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	4d07      	ldr	r5, [pc, #28]	@ (8008c18 <_fstat_r+0x20>)
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	4604      	mov	r4, r0
 8008c00:	4608      	mov	r0, r1
 8008c02:	4611      	mov	r1, r2
 8008c04:	602b      	str	r3, [r5, #0]
 8008c06:	f7f8 fcad 	bl	8001564 <_fstat>
 8008c0a:	1c43      	adds	r3, r0, #1
 8008c0c:	d102      	bne.n	8008c14 <_fstat_r+0x1c>
 8008c0e:	682b      	ldr	r3, [r5, #0]
 8008c10:	b103      	cbz	r3, 8008c14 <_fstat_r+0x1c>
 8008c12:	6023      	str	r3, [r4, #0]
 8008c14:	bd38      	pop	{r3, r4, r5, pc}
 8008c16:	bf00      	nop
 8008c18:	200004e8 	.word	0x200004e8

08008c1c <_isatty_r>:
 8008c1c:	b538      	push	{r3, r4, r5, lr}
 8008c1e:	4d06      	ldr	r5, [pc, #24]	@ (8008c38 <_isatty_r+0x1c>)
 8008c20:	2300      	movs	r3, #0
 8008c22:	4604      	mov	r4, r0
 8008c24:	4608      	mov	r0, r1
 8008c26:	602b      	str	r3, [r5, #0]
 8008c28:	f7f8 fcac 	bl	8001584 <_isatty>
 8008c2c:	1c43      	adds	r3, r0, #1
 8008c2e:	d102      	bne.n	8008c36 <_isatty_r+0x1a>
 8008c30:	682b      	ldr	r3, [r5, #0]
 8008c32:	b103      	cbz	r3, 8008c36 <_isatty_r+0x1a>
 8008c34:	6023      	str	r3, [r4, #0]
 8008c36:	bd38      	pop	{r3, r4, r5, pc}
 8008c38:	200004e8 	.word	0x200004e8

08008c3c <_init>:
 8008c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3e:	bf00      	nop
 8008c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c42:	bc08      	pop	{r3}
 8008c44:	469e      	mov	lr, r3
 8008c46:	4770      	bx	lr

08008c48 <_fini>:
 8008c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4a:	bf00      	nop
 8008c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c4e:	bc08      	pop	{r3}
 8008c50:	469e      	mov	lr, r3
 8008c52:	4770      	bx	lr
