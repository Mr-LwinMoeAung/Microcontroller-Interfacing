
lab06_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004184  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004384  08004384  00005384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043e0  080043e0  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080043e0  080043e0  000053e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043e8  080043e8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043e8  080043e8  000053e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043ec  080043ec  000053ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080043f0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  2000005c  0800444c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  0800444c  000062f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f623  00000000  00000000  0000608a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002150  00000000  00000000  000156ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00017800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4c  00000000  00000000  00018538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002821f  00000000  00000000  00018f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001178d  00000000  00000000  000411a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb55a  00000000  00000000  00052930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014de8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ba0  00000000  00000000  0014ded0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00151a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800436c 	.word	0x0800436c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	0800436c 	.word	0x0800436c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e6:	4b09      	ldr	r3, [pc, #36]	@ (800060c <MX_GPIO_Init+0x2c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a08      	ldr	r2, [pc, #32]	@ (800060c <MX_GPIO_Init+0x2c>)
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b06      	ldr	r3, [pc, #24]	@ (800060c <MX_GPIO_Init+0x2c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0308 	and.w	r3, r3, #8
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b0b2      	sub	sp, #200	@ 0xc8
 8000614:	af00      	add	r7, sp, #0


  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000616:	f000 f8c3 	bl	80007a0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fb4a 	bl	8000cb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f851 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f7ff ffdd 	bl	80005e0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000626:	f000 f9a9 	bl	800097c <MX_TIM1_Init>
  MX_TIM2_Init();
 800062a:	f000 f9fb 	bl	8000a24 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800062e:	f000 fa87 	bl	8000b40 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim1);
 8000632:	481c      	ldr	r0, [pc, #112]	@ (80006a4 <main+0x94>)
 8000634:	f002 f834 	bl	80026a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim2);
 8000638:	481b      	ldr	r0, [pc, #108]	@ (80006a8 <main+0x98>)
 800063a:	f002 f831 	bl	80026a0 <HAL_TIM_Base_Start_IT>
  while (1)
  {



	  if (count == 60) {
 800063e:	4b1b      	ldr	r3, [pc, #108]	@ (80006ac <main+0x9c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b3c      	cmp	r3, #60	@ 0x3c
 8000644:	d107      	bne.n	8000656 <main+0x46>
		  count = 0;
 8000646:	4b19      	ldr	r3, [pc, #100]	@ (80006ac <main+0x9c>)
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
		  m_count ++;
 800064c:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <main+0xa0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	3301      	adds	r3, #1
 8000652:	4a17      	ldr	r2, [pc, #92]	@ (80006b0 <main+0xa0>)
 8000654:	6013      	str	r3, [r2, #0]
	  }
//	  m_count = count%60;
	  temp = c_delay;
 8000656:	4b17      	ldr	r3, [pc, #92]	@ (80006b4 <main+0xa4>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a17      	ldr	r2, [pc, #92]	@ (80006b8 <main+0xa8>)
 800065c:	6013      	str	r3, [r2, #0]

	  if (c_delay >= temp){
 800065e:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <main+0xa4>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <main+0xa8>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	429a      	cmp	r2, r3
 8000668:	d3e9      	bcc.n	800063e <main+0x2e>

		  sprintf(decimal_str, "%02lu:%02lu\r\n", m_count, count);
 800066a:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <main+0xa0>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <main+0x9c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8000676:	4911      	ldr	r1, [pc, #68]	@ (80006bc <main+0xac>)
 8000678:	f003 f9d8 	bl	8003a2c <siprintf>

		  HAL_UART_Transmit(&huart3, (uint8_t*)decimal_str, strlen(decimal_str), 1000);
 800067c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff fddd 	bl	8000240 <strlen>
 8000686:	4603      	mov	r3, r0
 8000688:	b29a      	uxth	r2, r3
 800068a:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 800068e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000692:	480b      	ldr	r0, [pc, #44]	@ (80006c0 <main+0xb0>)
 8000694:	f002 fcc0 	bl	8003018 <HAL_UART_Transmit>

		  c_delay = temp;
 8000698:	4b07      	ldr	r3, [pc, #28]	@ (80006b8 <main+0xa8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a05      	ldr	r2, [pc, #20]	@ (80006b4 <main+0xa4>)
 800069e:	6013      	str	r3, [r2, #0]
	  if (count == 60) {
 80006a0:	e7cd      	b.n	800063e <main+0x2e>
 80006a2:	bf00      	nop
 80006a4:	2000008c 	.word	0x2000008c
 80006a8:	200000d8 	.word	0x200000d8
 80006ac:	20000078 	.word	0x20000078
 80006b0:	2000007c 	.word	0x2000007c
 80006b4:	20000080 	.word	0x20000080
 80006b8:	20000084 	.word	0x20000084
 80006bc:	08004384 	.word	0x08004384
 80006c0:	20000124 	.word	0x20000124

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	@ 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	2234      	movs	r2, #52	@ 0x34
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 f9ca 	bl	8003a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000798 <SystemClock_Config+0xd4>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	4a2a      	ldr	r2, [pc, #168]	@ (8000798 <SystemClock_Config+0xd4>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f4:	4b28      	ldr	r3, [pc, #160]	@ (8000798 <SystemClock_Config+0xd4>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	4b26      	ldr	r3, [pc, #152]	@ (800079c <SystemClock_Config+0xd8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a25      	ldr	r2, [pc, #148]	@ (800079c <SystemClock_Config+0xd8>)
 8000706:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b23      	ldr	r3, [pc, #140]	@ (800079c <SystemClock_Config+0xd8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800072c:	2308      	movs	r3, #8
 800072e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000730:	23d8      	movs	r3, #216	@ 0xd8
 8000732:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fe97 	bl	8001478 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000750:	f000 f852 	bl	80007f8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000754:	f000 fe40 	bl	80013d8 <HAL_PWREx_EnableOverDrive>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800075e:	f000 f84b 	bl	80007f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000774:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000778:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	2107      	movs	r1, #7
 8000780:	4618      	mov	r0, r3
 8000782:	f001 f927 	bl	80019d4 <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800078c:	f000 f834 	bl	80007f8 <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3750      	adds	r7, #80	@ 0x50
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007a6:	463b      	mov	r3, r7
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80007b2:	f000 fbed 	bl	8000f90 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007b6:	2301      	movs	r3, #1
 80007b8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80007c2:	231f      	movs	r3, #31
 80007c4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80007c6:	2387      	movs	r3, #135	@ 0x87
 80007c8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80007ce:	2300      	movs	r3, #0
 80007d0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007d2:	2301      	movs	r3, #1
 80007d4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80007d6:	2301      	movs	r3, #1
 80007d8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007e2:	463b      	mov	r3, r7
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 fc0b 	bl	8001000 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80007ea:	2004      	movs	r0, #4
 80007ec:	f000 fbe8 	bl	8000fc0 <HAL_MPU_Enable>

}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
}
 80007fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <Error_Handler+0x8>

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <HAL_MspInit+0x44>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080e:	4a0e      	ldr	r2, [pc, #56]	@ (8000848 <HAL_MspInit+0x44>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000814:	6413      	str	r3, [r2, #64]	@ 0x40
 8000816:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <HAL_MspInit+0x44>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <HAL_MspInit+0x44>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000826:	4a08      	ldr	r2, [pc, #32]	@ (8000848 <HAL_MspInit+0x44>)
 8000828:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800082c:	6453      	str	r3, [r2, #68]	@ 0x44
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <HAL_MspInit+0x44>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <NMI_Handler+0x4>

08000854 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <MemManage_Handler+0x4>

08000864 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <BusFault_Handler+0x4>

0800086c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <UsageFault_Handler+0x4>

08000874 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a2:	f000 fa43 	bl	8000d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	count++;
 80008b0:	4b04      	ldr	r3, [pc, #16]	@ (80008c4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	3301      	adds	r3, #1
 80008b6:	4a03      	ldr	r2, [pc, #12]	@ (80008c4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80008b8:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008ba:	4803      	ldr	r0, [pc, #12]	@ (80008c8 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 80008bc:	f001 ff68 	bl	8002790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000078 	.word	0x20000078
 80008c8:	2000008c 	.word	0x2000008c

080008cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	c_delay++;
 80008d0:	4b04      	ldr	r3, [pc, #16]	@ (80008e4 <TIM2_IRQHandler+0x18>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	4a03      	ldr	r2, [pc, #12]	@ (80008e4 <TIM2_IRQHandler+0x18>)
 80008d8:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008da:	4803      	ldr	r0, [pc, #12]	@ (80008e8 <TIM2_IRQHandler+0x1c>)
 80008dc:	f001 ff58 	bl	8002790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000080 	.word	0x20000080
 80008e8:	200000d8 	.word	0x200000d8

080008ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f4:	4a14      	ldr	r2, [pc, #80]	@ (8000948 <_sbrk+0x5c>)
 80008f6:	4b15      	ldr	r3, [pc, #84]	@ (800094c <_sbrk+0x60>)
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000900:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <_sbrk+0x64>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d102      	bne.n	800090e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000908:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <_sbrk+0x64>)
 800090a:	4a12      	ldr	r2, [pc, #72]	@ (8000954 <_sbrk+0x68>)
 800090c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800090e:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <_sbrk+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	429a      	cmp	r2, r3
 800091a:	d207      	bcs.n	800092c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800091c:	f003 f8ae 	bl	8003a7c <__errno>
 8000920:	4603      	mov	r3, r0
 8000922:	220c      	movs	r2, #12
 8000924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
 800092a:	e009      	b.n	8000940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800092c:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <_sbrk+0x64>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000932:	4b07      	ldr	r3, [pc, #28]	@ (8000950 <_sbrk+0x64>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	4a05      	ldr	r2, [pc, #20]	@ (8000950 <_sbrk+0x64>)
 800093c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800093e:	68fb      	ldr	r3, [r7, #12]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20080000 	.word	0x20080000
 800094c:	00000400 	.word	0x00000400
 8000950:	20000088 	.word	0x20000088
 8000954:	200002f8 	.word	0x200002f8

08000958 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <SystemInit+0x20>)
 800095e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000962:	4a05      	ldr	r2, [pc, #20]	@ (8000978 <SystemInit+0x20>)
 8000964:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000968:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800099a:	4b20      	ldr	r3, [pc, #128]	@ (8000a1c <MX_TIM1_Init+0xa0>)
 800099c:	4a20      	ldr	r2, [pc, #128]	@ (8000a20 <MX_TIM1_Init+0xa4>)
 800099e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600-1;
 80009a0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a1c <MX_TIM1_Init+0xa0>)
 80009a2:	f245 425f 	movw	r2, #21599	@ 0x545f
 80009a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <MX_TIM1_Init+0xa0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10190-1;
 80009ae:	4b1b      	ldr	r3, [pc, #108]	@ (8000a1c <MX_TIM1_Init+0xa0>)
 80009b0:	f242 72cd 	movw	r2, #10189	@ 0x27cd
 80009b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b6:	4b19      	ldr	r3, [pc, #100]	@ (8000a1c <MX_TIM1_Init+0xa0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009bc:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <MX_TIM1_Init+0xa0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c2:	4b16      	ldr	r3, [pc, #88]	@ (8000a1c <MX_TIM1_Init+0xa0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009c8:	4814      	ldr	r0, [pc, #80]	@ (8000a1c <MX_TIM1_Init+0xa0>)
 80009ca:	f001 fe11 	bl	80025f0 <HAL_TIM_Base_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80009d4:	f7ff ff10 	bl	80007f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009de:	f107 0310 	add.w	r3, r7, #16
 80009e2:	4619      	mov	r1, r3
 80009e4:	480d      	ldr	r0, [pc, #52]	@ (8000a1c <MX_TIM1_Init+0xa0>)
 80009e6:	f001 ffdb 	bl	80029a0 <HAL_TIM_ConfigClockSource>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80009f0:	f7ff ff02 	bl	80007f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_TIM1_Init+0xa0>)
 8000a06:	f002 fa0d 	bl	8002e24 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a10:	f7ff fef2 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3720      	adds	r7, #32
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000008c 	.word	0x2000008c
 8000a20:	40010000 	.word	0x40010000

08000a24 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2a:	f107 0310 	add.w	r3, r7, #16
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a42:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <MX_TIM2_Init+0x94>)
 8000a44:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 216-1;
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <MX_TIM2_Init+0x94>)
 8000a4c:	22d7      	movs	r2, #215	@ 0xd7
 8000a4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a50:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <MX_TIM2_Init+0x94>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400000;
 8000a56:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <MX_TIM2_Init+0x94>)
 8000a58:	4a18      	ldr	r2, [pc, #96]	@ (8000abc <MX_TIM2_Init+0x98>)
 8000a5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <MX_TIM2_Init+0x94>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <MX_TIM2_Init+0x94>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a68:	4813      	ldr	r0, [pc, #76]	@ (8000ab8 <MX_TIM2_Init+0x94>)
 8000a6a:	f001 fdc1 	bl	80025f0 <HAL_TIM_Base_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a74:	f7ff fec0 	bl	80007f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	4619      	mov	r1, r3
 8000a84:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <MX_TIM2_Init+0x94>)
 8000a86:	f001 ff8b 	bl	80029a0 <HAL_TIM_ConfigClockSource>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a90:	f7ff feb2 	bl	80007f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a94:	2300      	movs	r3, #0
 8000a96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <MX_TIM2_Init+0x94>)
 8000aa2:	f002 f9bf 	bl	8002e24 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000aac:	f7ff fea4 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	3720      	adds	r7, #32
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200000d8 	.word	0x200000d8
 8000abc:	00061a80 	.word	0x00061a80

08000ac0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a1a      	ldr	r2, [pc, #104]	@ (8000b38 <HAL_TIM_Base_MspInit+0x78>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d114      	bne.n	8000afc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b3c <HAL_TIM_Base_MspInit+0x7c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad6:	4a19      	ldr	r2, [pc, #100]	@ (8000b3c <HAL_TIM_Base_MspInit+0x7c>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ade:	4b17      	ldr	r3, [pc, #92]	@ (8000b3c <HAL_TIM_Base_MspInit+0x7c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2101      	movs	r1, #1
 8000aee:	2019      	movs	r0, #25
 8000af0:	f000 fa17 	bl	8000f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000af4:	2019      	movs	r0, #25
 8000af6:	f000 fa30 	bl	8000f5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000afa:	e018      	b.n	8000b2e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b04:	d113      	bne.n	8000b2e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b06:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <HAL_TIM_Base_MspInit+0x7c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b3c <HAL_TIM_Base_MspInit+0x7c>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b12:	4b0a      	ldr	r3, [pc, #40]	@ (8000b3c <HAL_TIM_Base_MspInit+0x7c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2102      	movs	r1, #2
 8000b22:	201c      	movs	r0, #28
 8000b24:	f000 f9fd 	bl	8000f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b28:	201c      	movs	r0, #28
 8000b2a:	f000 fa16 	bl	8000f5a <HAL_NVIC_EnableIRQ>
}
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40010000 	.word	0x40010000
 8000b3c:	40023800 	.word	0x40023800

08000b40 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b44:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b46:	4a15      	ldr	r2, [pc, #84]	@ (8000b9c <MX_USART3_UART_Init+0x5c>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	@ (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b84:	f002 f9fa 	bl	8002f7c <HAL_UART_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b8e:	f7ff fe33 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000124 	.word	0x20000124
 8000b9c:	40004800 	.word	0x40004800

08000ba0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b0ae      	sub	sp, #184	@ 0xb8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2290      	movs	r2, #144	@ 0x90
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f002 ff53 	bl	8003a6c <memset>
  if(uartHandle->Instance==USART3)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a22      	ldr	r2, [pc, #136]	@ (8000c54 <HAL_UART_MspInit+0xb4>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d13c      	bne.n	8000c4a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bd4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 f8de 	bl	8001da0 <HAL_RCCEx_PeriphCLKConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bea:	f7ff fe05 	bl	80007f8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bee:	4b1a      	ldr	r3, [pc, #104]	@ (8000c58 <HAL_UART_MspInit+0xb8>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf2:	4a19      	ldr	r2, [pc, #100]	@ (8000c58 <HAL_UART_MspInit+0xb8>)
 8000bf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bfa:	4b17      	ldr	r3, [pc, #92]	@ (8000c58 <HAL_UART_MspInit+0xb8>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c06:	4b14      	ldr	r3, [pc, #80]	@ (8000c58 <HAL_UART_MspInit+0xb8>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a13      	ldr	r2, [pc, #76]	@ (8000c58 <HAL_UART_MspInit+0xb8>)
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <HAL_UART_MspInit+0xb8>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c1e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c38:	2307      	movs	r3, #7
 8000c3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	@ (8000c5c <HAL_UART_MspInit+0xbc>)
 8000c46:	f000 fa1b 	bl	8001080 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	37b8      	adds	r7, #184	@ 0xb8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40004800 	.word	0x40004800
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020c00 	.word	0x40020c00

08000c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c64:	f7ff fe78 	bl	8000958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c68:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c6a:	490d      	ldr	r1, [pc, #52]	@ (8000ca0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c80:	4c0a      	ldr	r4, [pc, #40]	@ (8000cac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f002 fefb 	bl	8003a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c92:	f7ff fcbd 	bl	8000610 <main>
  bx  lr    
 8000c96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c98:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ca4:	080043f0 	.word	0x080043f0
  ldr r2, =_sbss
 8000ca8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000cac:	200002f8 	.word	0x200002f8

08000cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC_IRQHandler>

08000cb2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	f000 f928 	bl	8000f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f000 f805 	bl	8000ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc2:	f7ff fd9f 	bl	8000804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc6:	2300      	movs	r3, #0
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <HAL_InitTick+0x54>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <HAL_InitTick+0x58>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f943 	bl	8000f76 <HAL_SYSTICK_Config>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00e      	b.n	8000d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b0f      	cmp	r3, #15
 8000cfe:	d80a      	bhi.n	8000d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d00:	2200      	movs	r2, #0
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f000 f90b 	bl	8000f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d0c:	4a06      	ldr	r2, [pc, #24]	@ (8000d28 <HAL_InitTick+0x5c>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	e000      	b.n	8000d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000000 	.word	0x20000000
 8000d24:	20000008 	.word	0x20000008
 8000d28:	20000004 	.word	0x20000004

08000d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <HAL_IncTick+0x20>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_IncTick+0x24>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a04      	ldr	r2, [pc, #16]	@ (8000d50 <HAL_IncTick+0x24>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	200001ac 	.word	0x200001ac

08000d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b03      	ldr	r3, [pc, #12]	@ (8000d68 <HAL_GetTick+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	200001ac 	.word	0x200001ac

08000d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <__NVIC_SetPriorityGrouping+0x40>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d96:	4313      	orrs	r3, r2
 8000d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9a:	4a04      	ldr	r2, [pc, #16]	@ (8000dac <__NVIC_SetPriorityGrouping+0x40>)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	60d3      	str	r3, [r2, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00
 8000db0:	05fa0000 	.word	0x05fa0000

08000db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db8:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <__NVIC_GetPriorityGrouping+0x18>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	f003 0307 	and.w	r3, r3, #7
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	db0b      	blt.n	8000dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f003 021f 	and.w	r2, r3, #31
 8000de8:	4907      	ldr	r1, [pc, #28]	@ (8000e08 <__NVIC_EnableIRQ+0x38>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	095b      	lsrs	r3, r3, #5
 8000df0:	2001      	movs	r0, #1
 8000df2:	fa00 f202 	lsl.w	r2, r0, r2
 8000df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000e100 	.word	0xe000e100

08000e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	db0a      	blt.n	8000e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	490c      	ldr	r1, [pc, #48]	@ (8000e58 <__NVIC_SetPriority+0x4c>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	0112      	lsls	r2, r2, #4
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	440b      	add	r3, r1
 8000e30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e34:	e00a      	b.n	8000e4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4908      	ldr	r1, [pc, #32]	@ (8000e5c <__NVIC_SetPriority+0x50>)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	3b04      	subs	r3, #4
 8000e44:	0112      	lsls	r2, r2, #4
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	440b      	add	r3, r1
 8000e4a:	761a      	strb	r2, [r3, #24]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000e100 	.word	0xe000e100
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	@ 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f1c3 0307 	rsb	r3, r3, #7
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	bf28      	it	cs
 8000e7e:	2304      	movcs	r3, #4
 8000e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3304      	adds	r3, #4
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	d902      	bls.n	8000e90 <NVIC_EncodePriority+0x30>
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3b03      	subs	r3, #3
 8000e8e:	e000      	b.n	8000e92 <NVIC_EncodePriority+0x32>
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	f04f 32ff 	mov.w	r2, #4294967295
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	43d9      	mvns	r1, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	4313      	orrs	r3, r2
         );
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3724      	adds	r7, #36	@ 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ed8:	d301      	bcc.n	8000ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00f      	b.n	8000efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ede:	4a0a      	ldr	r2, [pc, #40]	@ (8000f08 <SysTick_Config+0x40>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f7ff ff8e 	bl	8000e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef0:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <SysTick_Config+0x40>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef6:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <SysTick_Config+0x40>)
 8000ef8:	2207      	movs	r2, #7
 8000efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	e000e010 	.word	0xe000e010

08000f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ff29 	bl	8000d6c <__NVIC_SetPriorityGrouping>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	4603      	mov	r3, r0
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f34:	f7ff ff3e 	bl	8000db4 <__NVIC_GetPriorityGrouping>
 8000f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	68b9      	ldr	r1, [r7, #8]
 8000f3e:	6978      	ldr	r0, [r7, #20]
 8000f40:	f7ff ff8e 	bl	8000e60 <NVIC_EncodePriority>
 8000f44:	4602      	mov	r2, r0
 8000f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff5d 	bl	8000e0c <__NVIC_SetPriority>
}
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff31 	bl	8000dd0 <__NVIC_EnableIRQ>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ffa2 	bl	8000ec8 <SysTick_Config>
 8000f84:	4603      	mov	r3, r0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000f94:	f3bf 8f5f 	dmb	sy
}
 8000f98:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	@ (8000fb8 <HAL_MPU_Disable+0x28>)
 8000f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f9e:	4a06      	ldr	r2, [pc, #24]	@ (8000fb8 <HAL_MPU_Disable+0x28>)
 8000fa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fa4:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000fa6:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <HAL_MPU_Disable+0x2c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00
 8000fbc:	e000ed90 	.word	0xe000ed90

08000fc0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff8 <HAL_MPU_Enable+0x38>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <HAL_MPU_Enable+0x3c>)
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fd6:	4a09      	ldr	r2, [pc, #36]	@ (8000ffc <HAL_MPU_Enable+0x3c>)
 8000fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fdc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000fde:	f3bf 8f4f 	dsb	sy
}
 8000fe2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe4:	f3bf 8f6f 	isb	sy
}
 8000fe8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed90 	.word	0xe000ed90
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	785a      	ldrb	r2, [r3, #1]
 800100c:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <HAL_MPU_ConfigRegion+0x7c>)
 800100e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001010:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <HAL_MPU_ConfigRegion+0x7c>)
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	4a19      	ldr	r2, [pc, #100]	@ (800107c <HAL_MPU_ConfigRegion+0x7c>)
 8001016:	f023 0301 	bic.w	r3, r3, #1
 800101a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800101c:	4a17      	ldr	r2, [pc, #92]	@ (800107c <HAL_MPU_ConfigRegion+0x7c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	7b1b      	ldrb	r3, [r3, #12]
 8001028:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7adb      	ldrb	r3, [r3, #11]
 800102e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001030:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	7a9b      	ldrb	r3, [r3, #10]
 8001036:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001038:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	7b5b      	ldrb	r3, [r3, #13]
 800103e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001040:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	7b9b      	ldrb	r3, [r3, #14]
 8001046:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001048:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	7bdb      	ldrb	r3, [r3, #15]
 800104e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001050:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	7a5b      	ldrb	r3, [r3, #9]
 8001056:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001058:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7a1b      	ldrb	r3, [r3, #8]
 800105e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001060:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	7812      	ldrb	r2, [r2, #0]
 8001066:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001068:	4a04      	ldr	r2, [pc, #16]	@ (800107c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800106a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800106c:	6113      	str	r3, [r2, #16]
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed90 	.word	0xe000ed90

08001080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	@ 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	e175      	b.n	800138c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80010a0:	2201      	movs	r2, #1
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	f040 8164 	bne.w	8001386 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d005      	beq.n	80010d6 <HAL_GPIO_Init+0x56>
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d130      	bne.n	8001138 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800110c:	2201      	movs	r2, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	f003 0201 	and.w	r2, r3, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b03      	cmp	r3, #3
 8001142:	d017      	beq.n	8001174 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d123      	bne.n	80011c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	08da      	lsrs	r2, r3, #3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3208      	adds	r2, #8
 8001188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	220f      	movs	r2, #15
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	691a      	ldr	r2, [r3, #16]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	08da      	lsrs	r2, r3, #3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3208      	adds	r2, #8
 80011c2:	69b9      	ldr	r1, [r7, #24]
 80011c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0203 	and.w	r2, r3, #3
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 80be 	beq.w	8001386 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	4b66      	ldr	r3, [pc, #408]	@ (80013a4 <HAL_GPIO_Init+0x324>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120e:	4a65      	ldr	r2, [pc, #404]	@ (80013a4 <HAL_GPIO_Init+0x324>)
 8001210:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001214:	6453      	str	r3, [r2, #68]	@ 0x44
 8001216:	4b63      	ldr	r3, [pc, #396]	@ (80013a4 <HAL_GPIO_Init+0x324>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001222:	4a61      	ldr	r2, [pc, #388]	@ (80013a8 <HAL_GPIO_Init+0x328>)
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	3302      	adds	r3, #2
 800122a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	220f      	movs	r2, #15
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a58      	ldr	r2, [pc, #352]	@ (80013ac <HAL_GPIO_Init+0x32c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d037      	beq.n	80012be <HAL_GPIO_Init+0x23e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a57      	ldr	r2, [pc, #348]	@ (80013b0 <HAL_GPIO_Init+0x330>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d031      	beq.n	80012ba <HAL_GPIO_Init+0x23a>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a56      	ldr	r2, [pc, #344]	@ (80013b4 <HAL_GPIO_Init+0x334>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d02b      	beq.n	80012b6 <HAL_GPIO_Init+0x236>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a55      	ldr	r2, [pc, #340]	@ (80013b8 <HAL_GPIO_Init+0x338>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d025      	beq.n	80012b2 <HAL_GPIO_Init+0x232>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a54      	ldr	r2, [pc, #336]	@ (80013bc <HAL_GPIO_Init+0x33c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d01f      	beq.n	80012ae <HAL_GPIO_Init+0x22e>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a53      	ldr	r2, [pc, #332]	@ (80013c0 <HAL_GPIO_Init+0x340>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d019      	beq.n	80012aa <HAL_GPIO_Init+0x22a>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a52      	ldr	r2, [pc, #328]	@ (80013c4 <HAL_GPIO_Init+0x344>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d013      	beq.n	80012a6 <HAL_GPIO_Init+0x226>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a51      	ldr	r2, [pc, #324]	@ (80013c8 <HAL_GPIO_Init+0x348>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d00d      	beq.n	80012a2 <HAL_GPIO_Init+0x222>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a50      	ldr	r2, [pc, #320]	@ (80013cc <HAL_GPIO_Init+0x34c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d007      	beq.n	800129e <HAL_GPIO_Init+0x21e>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4f      	ldr	r2, [pc, #316]	@ (80013d0 <HAL_GPIO_Init+0x350>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d101      	bne.n	800129a <HAL_GPIO_Init+0x21a>
 8001296:	2309      	movs	r3, #9
 8001298:	e012      	b.n	80012c0 <HAL_GPIO_Init+0x240>
 800129a:	230a      	movs	r3, #10
 800129c:	e010      	b.n	80012c0 <HAL_GPIO_Init+0x240>
 800129e:	2308      	movs	r3, #8
 80012a0:	e00e      	b.n	80012c0 <HAL_GPIO_Init+0x240>
 80012a2:	2307      	movs	r3, #7
 80012a4:	e00c      	b.n	80012c0 <HAL_GPIO_Init+0x240>
 80012a6:	2306      	movs	r3, #6
 80012a8:	e00a      	b.n	80012c0 <HAL_GPIO_Init+0x240>
 80012aa:	2305      	movs	r3, #5
 80012ac:	e008      	b.n	80012c0 <HAL_GPIO_Init+0x240>
 80012ae:	2304      	movs	r3, #4
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x240>
 80012b2:	2303      	movs	r3, #3
 80012b4:	e004      	b.n	80012c0 <HAL_GPIO_Init+0x240>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_Init+0x240>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x240>
 80012be:	2300      	movs	r3, #0
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	f002 0203 	and.w	r2, r2, #3
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	4093      	lsls	r3, r2
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012d0:	4935      	ldr	r1, [pc, #212]	@ (80013a8 <HAL_GPIO_Init+0x328>)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012de:	4b3d      	ldr	r3, [pc, #244]	@ (80013d4 <HAL_GPIO_Init+0x354>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001302:	4a34      	ldr	r2, [pc, #208]	@ (80013d4 <HAL_GPIO_Init+0x354>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001308:	4b32      	ldr	r3, [pc, #200]	@ (80013d4 <HAL_GPIO_Init+0x354>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800132c:	4a29      	ldr	r2, [pc, #164]	@ (80013d4 <HAL_GPIO_Init+0x354>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001332:	4b28      	ldr	r3, [pc, #160]	@ (80013d4 <HAL_GPIO_Init+0x354>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001356:	4a1f      	ldr	r2, [pc, #124]	@ (80013d4 <HAL_GPIO_Init+0x354>)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800135c:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <HAL_GPIO_Init+0x354>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001380:	4a14      	ldr	r2, [pc, #80]	@ (80013d4 <HAL_GPIO_Init+0x354>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3301      	adds	r3, #1
 800138a:	61fb      	str	r3, [r7, #28]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	2b0f      	cmp	r3, #15
 8001390:	f67f ae86 	bls.w	80010a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3724      	adds	r7, #36	@ 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40013800 	.word	0x40013800
 80013ac:	40020000 	.word	0x40020000
 80013b0:	40020400 	.word	0x40020400
 80013b4:	40020800 	.word	0x40020800
 80013b8:	40020c00 	.word	0x40020c00
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40021400 	.word	0x40021400
 80013c4:	40021800 	.word	0x40021800
 80013c8:	40021c00 	.word	0x40021c00
 80013cc:	40022000 	.word	0x40022000
 80013d0:	40022400 	.word	0x40022400
 80013d4:	40013c00 	.word	0x40013c00

080013d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	4b23      	ldr	r3, [pc, #140]	@ (8001470 <HAL_PWREx_EnableOverDrive+0x98>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	4a22      	ldr	r2, [pc, #136]	@ (8001470 <HAL_PWREx_EnableOverDrive+0x98>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ee:	4b20      	ldr	r3, [pc, #128]	@ (8001470 <HAL_PWREx_EnableOverDrive+0x98>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80013fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001474 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001474 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001404:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001406:	f7ff fca5 	bl	8000d54 <HAL_GetTick>
 800140a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800140c:	e009      	b.n	8001422 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800140e:	f7ff fca1 	bl	8000d54 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800141c:	d901      	bls.n	8001422 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e022      	b.n	8001468 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001422:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800142a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800142e:	d1ee      	bne.n	800140e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001430:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0f      	ldr	r2, [pc, #60]	@ (8001474 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800143a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800143c:	f7ff fc8a 	bl	8000d54 <HAL_GetTick>
 8001440:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001442:	e009      	b.n	8001458 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001444:	f7ff fc86 	bl	8000d54 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001452:	d901      	bls.n	8001458 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e007      	b.n	8001468 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_PWREx_EnableOverDrive+0x9c>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001460:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001464:	d1ee      	bne.n	8001444 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40023800 	.word	0x40023800
 8001474:	40007000 	.word	0x40007000

08001478 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001480:	2300      	movs	r3, #0
 8001482:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e29b      	b.n	80019c6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 8087 	beq.w	80015aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800149c:	4b96      	ldr	r3, [pc, #600]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 030c 	and.w	r3, r3, #12
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d00c      	beq.n	80014c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014a8:	4b93      	ldr	r3, [pc, #588]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 030c 	and.w	r3, r3, #12
 80014b0:	2b08      	cmp	r3, #8
 80014b2:	d112      	bne.n	80014da <HAL_RCC_OscConfig+0x62>
 80014b4:	4b90      	ldr	r3, [pc, #576]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014c0:	d10b      	bne.n	80014da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c2:	4b8d      	ldr	r3, [pc, #564]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d06c      	beq.n	80015a8 <HAL_RCC_OscConfig+0x130>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d168      	bne.n	80015a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e275      	b.n	80019c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014e2:	d106      	bne.n	80014f2 <HAL_RCC_OscConfig+0x7a>
 80014e4:	4b84      	ldr	r3, [pc, #528]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a83      	ldr	r2, [pc, #524]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 80014ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	e02e      	b.n	8001550 <HAL_RCC_OscConfig+0xd8>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10c      	bne.n	8001514 <HAL_RCC_OscConfig+0x9c>
 80014fa:	4b7f      	ldr	r3, [pc, #508]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a7e      	ldr	r2, [pc, #504]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 8001500:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	4b7c      	ldr	r3, [pc, #496]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a7b      	ldr	r2, [pc, #492]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 800150c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e01d      	b.n	8001550 <HAL_RCC_OscConfig+0xd8>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800151c:	d10c      	bne.n	8001538 <HAL_RCC_OscConfig+0xc0>
 800151e:	4b76      	ldr	r3, [pc, #472]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a75      	ldr	r2, [pc, #468]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 8001524:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	4b73      	ldr	r3, [pc, #460]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a72      	ldr	r2, [pc, #456]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 8001530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e00b      	b.n	8001550 <HAL_RCC_OscConfig+0xd8>
 8001538:	4b6f      	ldr	r3, [pc, #444]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a6e      	ldr	r2, [pc, #440]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 800153e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b6c      	ldr	r3, [pc, #432]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a6b      	ldr	r2, [pc, #428]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 800154a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800154e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d013      	beq.n	8001580 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fbfc 	bl	8000d54 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fbf8 	bl	8000d54 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	@ 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e229      	b.n	80019c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	4b61      	ldr	r3, [pc, #388]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0xe8>
 800157e:	e014      	b.n	80015aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fbe8 	bl	8000d54 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fbe4 	bl	8000d54 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	@ 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e215      	b.n	80019c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159a:	4b57      	ldr	r3, [pc, #348]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x110>
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d069      	beq.n	800168a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015b6:	4b50      	ldr	r3, [pc, #320]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00b      	beq.n	80015da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015c2:	4b4d      	ldr	r3, [pc, #308]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d11c      	bne.n	8001608 <HAL_RCC_OscConfig+0x190>
 80015ce:	4b4a      	ldr	r3, [pc, #296]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d116      	bne.n	8001608 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015da:	4b47      	ldr	r3, [pc, #284]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d005      	beq.n	80015f2 <HAL_RCC_OscConfig+0x17a>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d001      	beq.n	80015f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e1e9      	b.n	80019c6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f2:	4b41      	ldr	r3, [pc, #260]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	493d      	ldr	r1, [pc, #244]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 8001602:	4313      	orrs	r3, r2
 8001604:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001606:	e040      	b.n	800168a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d023      	beq.n	8001658 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001610:	4b39      	ldr	r3, [pc, #228]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a38      	ldr	r2, [pc, #224]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161c:	f7ff fb9a 	bl	8000d54 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001624:	f7ff fb96 	bl	8000d54 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e1c7      	b.n	80019c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001636:	4b30      	ldr	r3, [pc, #192]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001642:	4b2d      	ldr	r3, [pc, #180]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	4929      	ldr	r1, [pc, #164]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 8001652:	4313      	orrs	r3, r2
 8001654:	600b      	str	r3, [r1, #0]
 8001656:	e018      	b.n	800168a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001658:	4b27      	ldr	r3, [pc, #156]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a26      	ldr	r2, [pc, #152]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 800165e:	f023 0301 	bic.w	r3, r3, #1
 8001662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001664:	f7ff fb76 	bl	8000d54 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166c:	f7ff fb72 	bl	8000d54 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e1a3      	b.n	80019c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167e:	4b1e      	ldr	r3, [pc, #120]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	2b00      	cmp	r3, #0
 8001694:	d038      	beq.n	8001708 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d019      	beq.n	80016d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800169e:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 80016a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016a2:	4a15      	ldr	r2, [pc, #84]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016aa:	f7ff fb53 	bl	8000d54 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b2:	f7ff fb4f 	bl	8000d54 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e180      	b.n	80019c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c4:	4b0c      	ldr	r3, [pc, #48]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 80016c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0f0      	beq.n	80016b2 <HAL_RCC_OscConfig+0x23a>
 80016d0:	e01a      	b.n	8001708 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d2:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 80016d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016d6:	4a08      	ldr	r2, [pc, #32]	@ (80016f8 <HAL_RCC_OscConfig+0x280>)
 80016d8:	f023 0301 	bic.w	r3, r3, #1
 80016dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016de:	f7ff fb39 	bl	8000d54 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e4:	e00a      	b.n	80016fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e6:	f7ff fb35 	bl	8000d54 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d903      	bls.n	80016fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e166      	b.n	80019c6 <HAL_RCC_OscConfig+0x54e>
 80016f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016fc:	4b92      	ldr	r3, [pc, #584]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 80016fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1ee      	bne.n	80016e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 80a4 	beq.w	800185e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001716:	4b8c      	ldr	r3, [pc, #560]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10d      	bne.n	800173e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	4b89      	ldr	r3, [pc, #548]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001726:	4a88      	ldr	r2, [pc, #544]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 8001728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800172c:	6413      	str	r3, [r2, #64]	@ 0x40
 800172e:	4b86      	ldr	r3, [pc, #536]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800173a:	2301      	movs	r3, #1
 800173c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800173e:	4b83      	ldr	r3, [pc, #524]	@ (800194c <HAL_RCC_OscConfig+0x4d4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001746:	2b00      	cmp	r3, #0
 8001748:	d118      	bne.n	800177c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800174a:	4b80      	ldr	r3, [pc, #512]	@ (800194c <HAL_RCC_OscConfig+0x4d4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a7f      	ldr	r2, [pc, #508]	@ (800194c <HAL_RCC_OscConfig+0x4d4>)
 8001750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001756:	f7ff fafd 	bl	8000d54 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800175e:	f7ff faf9 	bl	8000d54 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b64      	cmp	r3, #100	@ 0x64
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e12a      	b.n	80019c6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001770:	4b76      	ldr	r3, [pc, #472]	@ (800194c <HAL_RCC_OscConfig+0x4d4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d106      	bne.n	8001792 <HAL_RCC_OscConfig+0x31a>
 8001784:	4b70      	ldr	r3, [pc, #448]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 8001786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001788:	4a6f      	ldr	r2, [pc, #444]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001790:	e02d      	b.n	80017ee <HAL_RCC_OscConfig+0x376>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x33c>
 800179a:	4b6b      	ldr	r3, [pc, #428]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 800179c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800179e:	4a6a      	ldr	r2, [pc, #424]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 80017a0:	f023 0301 	bic.w	r3, r3, #1
 80017a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80017a6:	4b68      	ldr	r3, [pc, #416]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017aa:	4a67      	ldr	r2, [pc, #412]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 80017ac:	f023 0304 	bic.w	r3, r3, #4
 80017b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80017b2:	e01c      	b.n	80017ee <HAL_RCC_OscConfig+0x376>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b05      	cmp	r3, #5
 80017ba:	d10c      	bne.n	80017d6 <HAL_RCC_OscConfig+0x35e>
 80017bc:	4b62      	ldr	r3, [pc, #392]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 80017be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c0:	4a61      	ldr	r2, [pc, #388]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 80017c2:	f043 0304 	orr.w	r3, r3, #4
 80017c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80017c8:	4b5f      	ldr	r3, [pc, #380]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 80017ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017cc:	4a5e      	ldr	r2, [pc, #376]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80017d4:	e00b      	b.n	80017ee <HAL_RCC_OscConfig+0x376>
 80017d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 80017d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017da:	4a5b      	ldr	r2, [pc, #364]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 80017dc:	f023 0301 	bic.w	r3, r3, #1
 80017e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80017e2:	4b59      	ldr	r3, [pc, #356]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 80017e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e6:	4a58      	ldr	r2, [pc, #352]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 80017e8:	f023 0304 	bic.w	r3, r3, #4
 80017ec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d015      	beq.n	8001822 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f6:	f7ff faad 	bl	8000d54 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fc:	e00a      	b.n	8001814 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fe:	f7ff faa9 	bl	8000d54 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800180c:	4293      	cmp	r3, r2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e0d8      	b.n	80019c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001814:	4b4c      	ldr	r3, [pc, #304]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 8001816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0ee      	beq.n	80017fe <HAL_RCC_OscConfig+0x386>
 8001820:	e014      	b.n	800184c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001822:	f7ff fa97 	bl	8000d54 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001828:	e00a      	b.n	8001840 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7ff fa93 	bl	8000d54 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001838:	4293      	cmp	r3, r2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e0c2      	b.n	80019c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001840:	4b41      	ldr	r3, [pc, #260]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 8001842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1ee      	bne.n	800182a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800184c:	7dfb      	ldrb	r3, [r7, #23]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d105      	bne.n	800185e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001852:	4b3d      	ldr	r3, [pc, #244]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	4a3c      	ldr	r2, [pc, #240]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 8001858:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800185c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 80ae 	beq.w	80019c4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001868:	4b37      	ldr	r3, [pc, #220]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b08      	cmp	r3, #8
 8001872:	d06d      	beq.n	8001950 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d14b      	bne.n	8001914 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187c:	4b32      	ldr	r3, [pc, #200]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a31      	ldr	r2, [pc, #196]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 8001882:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001888:	f7ff fa64 	bl	8000d54 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001890:	f7ff fa60 	bl	8000d54 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e091      	b.n	80019c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a2:	4b29      	ldr	r3, [pc, #164]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69da      	ldr	r2, [r3, #28]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018bc:	019b      	lsls	r3, r3, #6
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c4:	085b      	lsrs	r3, r3, #1
 80018c6:	3b01      	subs	r3, #1
 80018c8:	041b      	lsls	r3, r3, #16
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d0:	061b      	lsls	r3, r3, #24
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d8:	071b      	lsls	r3, r3, #28
 80018da:	491b      	ldr	r1, [pc, #108]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018e0:	4b19      	ldr	r3, [pc, #100]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a18      	ldr	r2, [pc, #96]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 80018e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff fa32 	bl	8000d54 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff fa2e 	bl	8000d54 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e05f      	b.n	80019c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001906:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x47c>
 8001912:	e057      	b.n	80019c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001914:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0b      	ldr	r2, [pc, #44]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 800191a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800191e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff fa18 	bl	8000d54 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001928:	f7ff fa14 	bl	8000d54 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e045      	b.n	80019c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193a:	4b03      	ldr	r3, [pc, #12]	@ (8001948 <HAL_RCC_OscConfig+0x4d0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x4b0>
 8001946:	e03d      	b.n	80019c4 <HAL_RCC_OscConfig+0x54c>
 8001948:	40023800 	.word	0x40023800
 800194c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001950:	4b1f      	ldr	r3, [pc, #124]	@ (80019d0 <HAL_RCC_OscConfig+0x558>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d030      	beq.n	80019c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001968:	429a      	cmp	r2, r3
 800196a:	d129      	bne.n	80019c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	d122      	bne.n	80019c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001980:	4013      	ands	r3, r2
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001986:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001988:	4293      	cmp	r3, r2
 800198a:	d119      	bne.n	80019c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001996:	085b      	lsrs	r3, r3, #1
 8001998:	3b01      	subs	r3, #1
 800199a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800199c:	429a      	cmp	r2, r3
 800199e:	d10f      	bne.n	80019c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d107      	bne.n	80019c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019bc:	429a      	cmp	r2, r3
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800

080019d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0d0      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d910      	bls.n	8001a1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fa:	4b67      	ldr	r3, [pc, #412]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 020f 	bic.w	r2, r3, #15
 8001a02:	4965      	ldr	r1, [pc, #404]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0a:	4b63      	ldr	r3, [pc, #396]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d001      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0b8      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d020      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a34:	4b59      	ldr	r3, [pc, #356]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	4a58      	ldr	r2, [pc, #352]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001a3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a4c:	4b53      	ldr	r3, [pc, #332]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	4a52      	ldr	r2, [pc, #328]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001a52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a58:	4b50      	ldr	r3, [pc, #320]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	494d      	ldr	r1, [pc, #308]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d040      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d107      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	4b47      	ldr	r3, [pc, #284]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d115      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e07f      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d107      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a96:	4b41      	ldr	r3, [pc, #260]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d109      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e073      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e06b      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab6:	4b39      	ldr	r3, [pc, #228]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f023 0203 	bic.w	r2, r3, #3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	4936      	ldr	r1, [pc, #216]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ac8:	f7ff f944 	bl	8000d54 <HAL_GetTick>
 8001acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ace:	e00a      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad0:	f7ff f940 	bl	8000d54 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e053      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 020c 	and.w	r2, r3, #12
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d1eb      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001af8:	4b27      	ldr	r3, [pc, #156]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 030f 	and.w	r3, r3, #15
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d210      	bcs.n	8001b28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b06:	4b24      	ldr	r3, [pc, #144]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 020f 	bic.w	r2, r3, #15
 8001b0e:	4922      	ldr	r1, [pc, #136]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b16:	4b20      	ldr	r3, [pc, #128]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e032      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d008      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b34:	4b19      	ldr	r3, [pc, #100]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	4916      	ldr	r1, [pc, #88]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d009      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b52:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	490e      	ldr	r1, [pc, #56]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b66:	f000 f821 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	490a      	ldr	r1, [pc, #40]	@ (8001ba0 <HAL_RCC_ClockConfig+0x1cc>)
 8001b78:	5ccb      	ldrb	r3, [r1, r3]
 8001b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7e:	4a09      	ldr	r2, [pc, #36]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1d0>)
 8001b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b82:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1d4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff f8a0 	bl	8000ccc <HAL_InitTick>

  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40023c00 	.word	0x40023c00
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	08004394 	.word	0x08004394
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	20000004 	.word	0x20000004

08001bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bb0:	b090      	sub	sp, #64	@ 0x40
 8001bb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bb8:	2300      	movs	r3, #0
 8001bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bc4:	4b59      	ldr	r3, [pc, #356]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d00d      	beq.n	8001bec <HAL_RCC_GetSysClockFreq+0x40>
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	f200 80a1 	bhi.w	8001d18 <HAL_RCC_GetSysClockFreq+0x16c>
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d002      	beq.n	8001be0 <HAL_RCC_GetSysClockFreq+0x34>
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d003      	beq.n	8001be6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bde:	e09b      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001be0:	4b53      	ldr	r3, [pc, #332]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x184>)
 8001be2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001be4:	e09b      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001be6:	4b53      	ldr	r3, [pc, #332]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x188>)
 8001be8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bea:	e098      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bec:	4b4f      	ldr	r3, [pc, #316]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bf4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001bf6:	4b4d      	ldr	r3, [pc, #308]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d028      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c02:	4b4a      	ldr	r3, [pc, #296]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	099b      	lsrs	r3, r3, #6
 8001c08:	2200      	movs	r2, #0
 8001c0a:	623b      	str	r3, [r7, #32]
 8001c0c:	627a      	str	r2, [r7, #36]	@ 0x24
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c14:	2100      	movs	r1, #0
 8001c16:	4b47      	ldr	r3, [pc, #284]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c18:	fb03 f201 	mul.w	r2, r3, r1
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	fb00 f303 	mul.w	r3, r0, r3
 8001c22:	4413      	add	r3, r2
 8001c24:	4a43      	ldr	r2, [pc, #268]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c26:	fba0 1202 	umull	r1, r2, r0, r2
 8001c2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c2c:	460a      	mov	r2, r1
 8001c2e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001c30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c32:	4413      	add	r3, r2
 8001c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c38:	2200      	movs	r2, #0
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	61fa      	str	r2, [r7, #28]
 8001c3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c46:	f7fe fb53 	bl	80002f0 <__aeabi_uldivmod>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4613      	mov	r3, r2
 8001c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c52:	e053      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c54:	4b35      	ldr	r3, [pc, #212]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	099b      	lsrs	r3, r3, #6
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	617a      	str	r2, [r7, #20]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c66:	f04f 0b00 	mov.w	fp, #0
 8001c6a:	4652      	mov	r2, sl
 8001c6c:	465b      	mov	r3, fp
 8001c6e:	f04f 0000 	mov.w	r0, #0
 8001c72:	f04f 0100 	mov.w	r1, #0
 8001c76:	0159      	lsls	r1, r3, #5
 8001c78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c7c:	0150      	lsls	r0, r2, #5
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	ebb2 080a 	subs.w	r8, r2, sl
 8001c86:	eb63 090b 	sbc.w	r9, r3, fp
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c9e:	ebb2 0408 	subs.w	r4, r2, r8
 8001ca2:	eb63 0509 	sbc.w	r5, r3, r9
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	00eb      	lsls	r3, r5, #3
 8001cb0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cb4:	00e2      	lsls	r2, r4, #3
 8001cb6:	4614      	mov	r4, r2
 8001cb8:	461d      	mov	r5, r3
 8001cba:	eb14 030a 	adds.w	r3, r4, sl
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	eb45 030b 	adc.w	r3, r5, fp
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cd2:	4629      	mov	r1, r5
 8001cd4:	028b      	lsls	r3, r1, #10
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cdc:	4621      	mov	r1, r4
 8001cde:	028a      	lsls	r2, r1, #10
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	60fa      	str	r2, [r7, #12]
 8001cec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cf0:	f7fe fafe 	bl	80002f0 <__aeabi_uldivmod>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	0c1b      	lsrs	r3, r3, #16
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	3301      	adds	r3, #1
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001d0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d16:	e002      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d18:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3740      	adds	r7, #64	@ 0x40
 8001d24:	46bd      	mov	sp, r7
 8001d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	00f42400 	.word	0x00f42400
 8001d34:	017d7840 	.word	0x017d7840

08001d38 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	@ (8001d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20000000 	.word	0x20000000

08001d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d54:	f7ff fff0 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	0a9b      	lsrs	r3, r3, #10
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4903      	ldr	r1, [pc, #12]	@ (8001d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	080043a4 	.word	0x080043a4

08001d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d7c:	f7ff ffdc 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	0b5b      	lsrs	r3, r3, #13
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4903      	ldr	r1, [pc, #12]	@ (8001d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	080043a4 	.word	0x080043a4

08001da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d012      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001dc8:	4b69      	ldr	r3, [pc, #420]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	4a68      	ldr	r2, [pc, #416]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dce:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001dd2:	6093      	str	r3, [r2, #8]
 8001dd4:	4b66      	ldr	r3, [pc, #408]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ddc:	4964      	ldr	r1, [pc, #400]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001dea:	2301      	movs	r3, #1
 8001dec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d017      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dfa:	4b5d      	ldr	r3, [pc, #372]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e00:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e08:	4959      	ldr	r1, [pc, #356]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e18:	d101      	bne.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001e26:	2301      	movs	r3, #1
 8001e28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d017      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e36:	4b4e      	ldr	r3, [pc, #312]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e3c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	494a      	ldr	r1, [pc, #296]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e54:	d101      	bne.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001e56:	2301      	movs	r3, #1
 8001e58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001e62:	2301      	movs	r3, #1
 8001e64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001e72:	2301      	movs	r3, #1
 8001e74:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0320 	and.w	r3, r3, #32
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 808b 	beq.w	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e84:	4b3a      	ldr	r3, [pc, #232]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e88:	4a39      	ldr	r2, [pc, #228]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e90:	4b37      	ldr	r3, [pc, #220]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e9c:	4b35      	ldr	r3, [pc, #212]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a34      	ldr	r2, [pc, #208]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ea6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ea8:	f7fe ff54 	bl	8000d54 <HAL_GetTick>
 8001eac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb0:	f7fe ff50 	bl	8000d54 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b64      	cmp	r3, #100	@ 0x64
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e38f      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ece:	4b28      	ldr	r3, [pc, #160]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ed6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d035      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d02e      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001eec:	4b20      	ldr	r3, [pc, #128]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ef4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001efa:	4a1d      	ldr	r2, [pc, #116]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f00:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f02:	4b1b      	ldr	r3, [pc, #108]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f06:	4a1a      	ldr	r2, [pc, #104]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f0c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001f0e:	4a18      	ldr	r2, [pc, #96]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f14:	4b16      	ldr	r3, [pc, #88]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d114      	bne.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7fe ff18 	bl	8000d54 <HAL_GetTick>
 8001f24:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f26:	e00a      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f28:	f7fe ff14 	bl	8000d54 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e351      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0ee      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001f56:	d111      	bne.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001f58:	4b05      	ldr	r3, [pc, #20]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f64:	4b04      	ldr	r3, [pc, #16]	@ (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f66:	400b      	ands	r3, r1
 8001f68:	4901      	ldr	r1, [pc, #4]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
 8001f6e:	e00b      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40007000 	.word	0x40007000
 8001f78:	0ffffcff 	.word	0x0ffffcff
 8001f7c:	4bac      	ldr	r3, [pc, #688]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	4aab      	ldr	r2, [pc, #684]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f82:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001f86:	6093      	str	r3, [r2, #8]
 8001f88:	4ba9      	ldr	r3, [pc, #676]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f8a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f94:	49a6      	ldr	r1, [pc, #664]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d010      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001fa6:	4ba2      	ldr	r3, [pc, #648]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fac:	4aa0      	ldr	r2, [pc, #640]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fb2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fb6:	4b9e      	ldr	r3, [pc, #632]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc0:	499b      	ldr	r1, [pc, #620]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00a      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fd4:	4b96      	ldr	r3, [pc, #600]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fda:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fe2:	4993      	ldr	r1, [pc, #588]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00a      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ff6:	4b8e      	ldr	r3, [pc, #568]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ffc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002004:	498a      	ldr	r1, [pc, #552]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002006:	4313      	orrs	r3, r2
 8002008:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00a      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002018:	4b85      	ldr	r3, [pc, #532]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800201a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002026:	4982      	ldr	r1, [pc, #520]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002028:	4313      	orrs	r3, r2
 800202a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800203a:	4b7d      	ldr	r3, [pc, #500]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800203c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002040:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002048:	4979      	ldr	r1, [pc, #484]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00a      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800205c:	4b74      	ldr	r3, [pc, #464]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002062:	f023 0203 	bic.w	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206a:	4971      	ldr	r1, [pc, #452]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800207e:	4b6c      	ldr	r3, [pc, #432]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002084:	f023 020c 	bic.w	r2, r3, #12
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800208c:	4968      	ldr	r1, [pc, #416]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00a      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020a0:	4b63      	ldr	r3, [pc, #396]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ae:	4960      	ldr	r1, [pc, #384]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00a      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020d0:	4957      	ldr	r1, [pc, #348]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00a      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020e4:	4b52      	ldr	r3, [pc, #328]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f2:	494f      	ldr	r1, [pc, #316]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002106:	4b4a      	ldr	r3, [pc, #296]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800210c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002114:	4946      	ldr	r1, [pc, #280]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00a      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002128:	4b41      	ldr	r3, [pc, #260]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800212e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002136:	493e      	ldr	r1, [pc, #248]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800214a:	4b39      	ldr	r3, [pc, #228]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800214c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002150:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002158:	4935      	ldr	r1, [pc, #212]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00a      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800216c:	4b30      	ldr	r3, [pc, #192]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800216e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002172:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800217a:	492d      	ldr	r1, [pc, #180]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d011      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800218e:	4b28      	ldr	r3, [pc, #160]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002194:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800219c:	4924      	ldr	r1, [pc, #144]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021ac:	d101      	bne.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80021ae:	2301      	movs	r3, #1
 80021b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80021be:	2301      	movs	r3, #1
 80021c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00a      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021ce:	4b18      	ldr	r3, [pc, #96]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021dc:	4914      	ldr	r1, [pc, #80]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00b      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002200:	490b      	ldr	r1, [pc, #44]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00f      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002214:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800221a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002224:	4902      	ldr	r1, [pc, #8]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002226:	4313      	orrs	r3, r2
 8002228:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800222c:	e002      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800222e:	bf00      	nop
 8002230:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00b      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002240:	4b8a      	ldr	r3, [pc, #552]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002242:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002246:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002250:	4986      	ldr	r1, [pc, #536]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00b      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002264:	4b81      	ldr	r3, [pc, #516]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002266:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800226a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002274:	497d      	ldr	r1, [pc, #500]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d006      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 80d6 	beq.w	800243c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002290:	4b76      	ldr	r3, [pc, #472]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a75      	ldr	r2, [pc, #468]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002296:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800229a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800229c:	f7fe fd5a 	bl	8000d54 <HAL_GetTick>
 80022a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022a4:	f7fe fd56 	bl	8000d54 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	@ 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e195      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022b6:	4b6d      	ldr	r3, [pc, #436]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d021      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d11d      	bne.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022d6:	4b65      	ldr	r3, [pc, #404]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022dc:	0c1b      	lsrs	r3, r3, #16
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022e4:	4b61      	ldr	r3, [pc, #388]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022ea:	0e1b      	lsrs	r3, r3, #24
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	019a      	lsls	r2, r3, #6
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	041b      	lsls	r3, r3, #16
 80022fc:	431a      	orrs	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	061b      	lsls	r3, r3, #24
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	071b      	lsls	r3, r3, #28
 800230a:	4958      	ldr	r1, [pc, #352]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d004      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002322:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002326:	d00a      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002330:	2b00      	cmp	r3, #0
 8002332:	d02e      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002338:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800233c:	d129      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800233e:	4b4b      	ldr	r3, [pc, #300]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002340:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002344:	0c1b      	lsrs	r3, r3, #16
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800234c:	4b47      	ldr	r3, [pc, #284]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800234e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002352:	0f1b      	lsrs	r3, r3, #28
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	019a      	lsls	r2, r3, #6
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	041b      	lsls	r3, r3, #16
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	061b      	lsls	r3, r3, #24
 800236c:	431a      	orrs	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	071b      	lsls	r3, r3, #28
 8002372:	493e      	ldr	r1, [pc, #248]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800237a:	4b3c      	ldr	r3, [pc, #240]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800237c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002380:	f023 021f 	bic.w	r2, r3, #31
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002388:	3b01      	subs	r3, #1
 800238a:	4938      	ldr	r1, [pc, #224]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d01d      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800239e:	4b33      	ldr	r3, [pc, #204]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023a4:	0e1b      	lsrs	r3, r3, #24
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023ac:	4b2f      	ldr	r3, [pc, #188]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023b2:	0f1b      	lsrs	r3, r3, #28
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	019a      	lsls	r2, r3, #6
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	041b      	lsls	r3, r3, #16
 80023c6:	431a      	orrs	r2, r3
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	061b      	lsls	r3, r3, #24
 80023cc:	431a      	orrs	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	071b      	lsls	r3, r3, #28
 80023d2:	4926      	ldr	r1, [pc, #152]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d011      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	019a      	lsls	r2, r3, #6
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	041b      	lsls	r3, r3, #16
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	061b      	lsls	r3, r3, #24
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	071b      	lsls	r3, r3, #28
 8002402:	491a      	ldr	r1, [pc, #104]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800240a:	4b18      	ldr	r3, [pc, #96]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a17      	ldr	r2, [pc, #92]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002410:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002416:	f7fe fc9d 	bl	8000d54 <HAL_GetTick>
 800241a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800241c:	e008      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800241e:	f7fe fc99 	bl	8000d54 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b64      	cmp	r3, #100	@ 0x64
 800242a:	d901      	bls.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e0d8      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002430:	4b0e      	ldr	r3, [pc, #56]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	2b01      	cmp	r3, #1
 8002440:	f040 80ce 	bne.w	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002444:	4b09      	ldr	r3, [pc, #36]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a08      	ldr	r2, [pc, #32]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800244a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800244e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002450:	f7fe fc80 	bl	8000d54 <HAL_GetTick>
 8002454:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002456:	e00b      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002458:	f7fe fc7c 	bl	8000d54 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	@ 0x64
 8002464:	d904      	bls.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e0bb      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800246a:	bf00      	nop
 800246c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002470:	4b5e      	ldr	r3, [pc, #376]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800247c:	d0ec      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800248e:	2b00      	cmp	r3, #0
 8002490:	d009      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800249a:	2b00      	cmp	r3, #0
 800249c:	d02e      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d12a      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024a6:	4b51      	ldr	r3, [pc, #324]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ac:	0c1b      	lsrs	r3, r3, #16
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024b4:	4b4d      	ldr	r3, [pc, #308]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ba:	0f1b      	lsrs	r3, r3, #28
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	019a      	lsls	r2, r3, #6
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	041b      	lsls	r3, r3, #16
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	061b      	lsls	r3, r3, #24
 80024d4:	431a      	orrs	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	071b      	lsls	r3, r3, #28
 80024da:	4944      	ldr	r1, [pc, #272]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024e2:	4b42      	ldr	r3, [pc, #264]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024e8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f0:	3b01      	subs	r3, #1
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	493d      	ldr	r1, [pc, #244]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d022      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800250c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002510:	d11d      	bne.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002512:	4b36      	ldr	r3, [pc, #216]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002518:	0e1b      	lsrs	r3, r3, #24
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002520:	4b32      	ldr	r3, [pc, #200]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002526:	0f1b      	lsrs	r3, r3, #28
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	019a      	lsls	r2, r3, #6
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	041b      	lsls	r3, r3, #16
 800253a:	431a      	orrs	r2, r3
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	061b      	lsls	r3, r3, #24
 8002540:	431a      	orrs	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	071b      	lsls	r3, r3, #28
 8002546:	4929      	ldr	r1, [pc, #164]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d028      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800255a:	4b24      	ldr	r3, [pc, #144]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800255c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002560:	0e1b      	lsrs	r3, r3, #24
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002568:	4b20      	ldr	r3, [pc, #128]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256e:	0c1b      	lsrs	r3, r3, #16
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	019a      	lsls	r2, r3, #6
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	041b      	lsls	r3, r3, #16
 8002580:	431a      	orrs	r2, r3
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	061b      	lsls	r3, r3, #24
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	071b      	lsls	r3, r3, #28
 800258e:	4917      	ldr	r1, [pc, #92]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002596:	4b15      	ldr	r3, [pc, #84]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002598:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800259c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a4:	4911      	ldr	r1, [pc, #68]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80025ac:	4b0f      	ldr	r3, [pc, #60]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0e      	ldr	r2, [pc, #56]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b8:	f7fe fbcc 	bl	8000d54 <HAL_GetTick>
 80025bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025c0:	f7fe fbc8 	bl	8000d54 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	@ 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e007      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025d2:	4b06      	ldr	r3, [pc, #24]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025de:	d1ef      	bne.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3720      	adds	r7, #32
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800

080025f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e049      	b.n	8002696 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7fe fa52 	bl	8000ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3304      	adds	r3, #4
 800262c:	4619      	mov	r1, r3
 800262e:	4610      	mov	r0, r2
 8002630:	f000 fab2 	bl	8002b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d001      	beq.n	80026b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e054      	b.n	8002762 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a26      	ldr	r2, [pc, #152]	@ (8002770 <HAL_TIM_Base_Start_IT+0xd0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d022      	beq.n	8002720 <HAL_TIM_Base_Start_IT+0x80>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026e2:	d01d      	beq.n	8002720 <HAL_TIM_Base_Start_IT+0x80>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a22      	ldr	r2, [pc, #136]	@ (8002774 <HAL_TIM_Base_Start_IT+0xd4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d018      	beq.n	8002720 <HAL_TIM_Base_Start_IT+0x80>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a21      	ldr	r2, [pc, #132]	@ (8002778 <HAL_TIM_Base_Start_IT+0xd8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d013      	beq.n	8002720 <HAL_TIM_Base_Start_IT+0x80>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a1f      	ldr	r2, [pc, #124]	@ (800277c <HAL_TIM_Base_Start_IT+0xdc>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00e      	beq.n	8002720 <HAL_TIM_Base_Start_IT+0x80>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a1e      	ldr	r2, [pc, #120]	@ (8002780 <HAL_TIM_Base_Start_IT+0xe0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d009      	beq.n	8002720 <HAL_TIM_Base_Start_IT+0x80>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1c      	ldr	r2, [pc, #112]	@ (8002784 <HAL_TIM_Base_Start_IT+0xe4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d004      	beq.n	8002720 <HAL_TIM_Base_Start_IT+0x80>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1b      	ldr	r2, [pc, #108]	@ (8002788 <HAL_TIM_Base_Start_IT+0xe8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d115      	bne.n	800274c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	4b19      	ldr	r3, [pc, #100]	@ (800278c <HAL_TIM_Base_Start_IT+0xec>)
 8002728:	4013      	ands	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b06      	cmp	r3, #6
 8002730:	d015      	beq.n	800275e <HAL_TIM_Base_Start_IT+0xbe>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002738:	d011      	beq.n	800275e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0201 	orr.w	r2, r2, #1
 8002748:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800274a:	e008      	b.n	800275e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e000      	b.n	8002760 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40010000 	.word	0x40010000
 8002774:	40000400 	.word	0x40000400
 8002778:	40000800 	.word	0x40000800
 800277c:	40000c00 	.word	0x40000c00
 8002780:	40010400 	.word	0x40010400
 8002784:	40014000 	.word	0x40014000
 8002788:	40001800 	.word	0x40001800
 800278c:	00010007 	.word	0x00010007

08002790 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d020      	beq.n	80027f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01b      	beq.n	80027f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0202 	mvn.w	r2, #2
 80027c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f9be 	bl	8002b5c <HAL_TIM_IC_CaptureCallback>
 80027e0:	e005      	b.n	80027ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f9b0 	bl	8002b48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f9c1 	bl	8002b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d020      	beq.n	8002840 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d01b      	beq.n	8002840 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0204 	mvn.w	r2, #4
 8002810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2202      	movs	r2, #2
 8002816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f998 	bl	8002b5c <HAL_TIM_IC_CaptureCallback>
 800282c:	e005      	b.n	800283a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f98a 	bl	8002b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f99b 	bl	8002b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d020      	beq.n	800288c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01b      	beq.n	800288c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f06f 0208 	mvn.w	r2, #8
 800285c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2204      	movs	r2, #4
 8002862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f972 	bl	8002b5c <HAL_TIM_IC_CaptureCallback>
 8002878:	e005      	b.n	8002886 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f964 	bl	8002b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f975 	bl	8002b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	2b00      	cmp	r3, #0
 8002894:	d020      	beq.n	80028d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f003 0310 	and.w	r3, r3, #16
 800289c:	2b00      	cmp	r3, #0
 800289e:	d01b      	beq.n	80028d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 0210 	mvn.w	r2, #16
 80028a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2208      	movs	r2, #8
 80028ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f94c 	bl	8002b5c <HAL_TIM_IC_CaptureCallback>
 80028c4:	e005      	b.n	80028d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f93e 	bl	8002b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f94f 	bl	8002b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00c      	beq.n	80028fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d007      	beq.n	80028fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f06f 0201 	mvn.w	r2, #1
 80028f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f91c 	bl	8002b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002902:	2b00      	cmp	r3, #0
 8002904:	d104      	bne.n	8002910 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00c      	beq.n	800292a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002916:	2b00      	cmp	r3, #0
 8002918:	d007      	beq.n	800292a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 fb15 	bl	8002f54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00c      	beq.n	800294e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800293a:	2b00      	cmp	r3, #0
 800293c:	d007      	beq.n	800294e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 fb0d 	bl	8002f68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00c      	beq.n	8002972 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800296a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f909 	bl	8002b84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f003 0320 	and.w	r3, r3, #32
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00c      	beq.n	8002996 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f003 0320 	and.w	r3, r3, #32
 8002982:	2b00      	cmp	r3, #0
 8002984:	d007      	beq.n	8002996 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f06f 0220 	mvn.w	r2, #32
 800298e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 fad5 	bl	8002f40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_TIM_ConfigClockSource+0x1c>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e0b4      	b.n	8002b26 <HAL_TIM_ConfigClockSource+0x186>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	4b56      	ldr	r3, [pc, #344]	@ (8002b30 <HAL_TIM_ConfigClockSource+0x190>)
 80029d8:	4013      	ands	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029f4:	d03e      	beq.n	8002a74 <HAL_TIM_ConfigClockSource+0xd4>
 80029f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029fa:	f200 8087 	bhi.w	8002b0c <HAL_TIM_ConfigClockSource+0x16c>
 80029fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a02:	f000 8086 	beq.w	8002b12 <HAL_TIM_ConfigClockSource+0x172>
 8002a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a0a:	d87f      	bhi.n	8002b0c <HAL_TIM_ConfigClockSource+0x16c>
 8002a0c:	2b70      	cmp	r3, #112	@ 0x70
 8002a0e:	d01a      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0xa6>
 8002a10:	2b70      	cmp	r3, #112	@ 0x70
 8002a12:	d87b      	bhi.n	8002b0c <HAL_TIM_ConfigClockSource+0x16c>
 8002a14:	2b60      	cmp	r3, #96	@ 0x60
 8002a16:	d050      	beq.n	8002aba <HAL_TIM_ConfigClockSource+0x11a>
 8002a18:	2b60      	cmp	r3, #96	@ 0x60
 8002a1a:	d877      	bhi.n	8002b0c <HAL_TIM_ConfigClockSource+0x16c>
 8002a1c:	2b50      	cmp	r3, #80	@ 0x50
 8002a1e:	d03c      	beq.n	8002a9a <HAL_TIM_ConfigClockSource+0xfa>
 8002a20:	2b50      	cmp	r3, #80	@ 0x50
 8002a22:	d873      	bhi.n	8002b0c <HAL_TIM_ConfigClockSource+0x16c>
 8002a24:	2b40      	cmp	r3, #64	@ 0x40
 8002a26:	d058      	beq.n	8002ada <HAL_TIM_ConfigClockSource+0x13a>
 8002a28:	2b40      	cmp	r3, #64	@ 0x40
 8002a2a:	d86f      	bhi.n	8002b0c <HAL_TIM_ConfigClockSource+0x16c>
 8002a2c:	2b30      	cmp	r3, #48	@ 0x30
 8002a2e:	d064      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0x15a>
 8002a30:	2b30      	cmp	r3, #48	@ 0x30
 8002a32:	d86b      	bhi.n	8002b0c <HAL_TIM_ConfigClockSource+0x16c>
 8002a34:	2b20      	cmp	r3, #32
 8002a36:	d060      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0x15a>
 8002a38:	2b20      	cmp	r3, #32
 8002a3a:	d867      	bhi.n	8002b0c <HAL_TIM_ConfigClockSource+0x16c>
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d05c      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0x15a>
 8002a40:	2b10      	cmp	r3, #16
 8002a42:	d05a      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0x15a>
 8002a44:	e062      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a56:	f000 f9c5 	bl	8002de4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	609a      	str	r2, [r3, #8]
      break;
 8002a72:	e04f      	b.n	8002b14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a84:	f000 f9ae 	bl	8002de4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a96:	609a      	str	r2, [r3, #8]
      break;
 8002a98:	e03c      	b.n	8002b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f000 f922 	bl	8002cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2150      	movs	r1, #80	@ 0x50
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 f97b 	bl	8002dae <TIM_ITRx_SetConfig>
      break;
 8002ab8:	e02c      	b.n	8002b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	f000 f941 	bl	8002d4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2160      	movs	r1, #96	@ 0x60
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 f96b 	bl	8002dae <TIM_ITRx_SetConfig>
      break;
 8002ad8:	e01c      	b.n	8002b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	f000 f902 	bl	8002cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2140      	movs	r1, #64	@ 0x40
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 f95b 	bl	8002dae <TIM_ITRx_SetConfig>
      break;
 8002af8:	e00c      	b.n	8002b14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4619      	mov	r1, r3
 8002b04:	4610      	mov	r0, r2
 8002b06:	f000 f952 	bl	8002dae <TIM_ITRx_SetConfig>
      break;
 8002b0a:	e003      	b.n	8002b14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b10:	e000      	b.n	8002b14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	fffeff88 	.word	0xfffeff88

08002b34 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a46      	ldr	r2, [pc, #280]	@ (8002cc4 <TIM_Base_SetConfig+0x12c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d013      	beq.n	8002bd8 <TIM_Base_SetConfig+0x40>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb6:	d00f      	beq.n	8002bd8 <TIM_Base_SetConfig+0x40>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a43      	ldr	r2, [pc, #268]	@ (8002cc8 <TIM_Base_SetConfig+0x130>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d00b      	beq.n	8002bd8 <TIM_Base_SetConfig+0x40>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a42      	ldr	r2, [pc, #264]	@ (8002ccc <TIM_Base_SetConfig+0x134>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d007      	beq.n	8002bd8 <TIM_Base_SetConfig+0x40>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a41      	ldr	r2, [pc, #260]	@ (8002cd0 <TIM_Base_SetConfig+0x138>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d003      	beq.n	8002bd8 <TIM_Base_SetConfig+0x40>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a40      	ldr	r2, [pc, #256]	@ (8002cd4 <TIM_Base_SetConfig+0x13c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d108      	bne.n	8002bea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a35      	ldr	r2, [pc, #212]	@ (8002cc4 <TIM_Base_SetConfig+0x12c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d02b      	beq.n	8002c4a <TIM_Base_SetConfig+0xb2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf8:	d027      	beq.n	8002c4a <TIM_Base_SetConfig+0xb2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a32      	ldr	r2, [pc, #200]	@ (8002cc8 <TIM_Base_SetConfig+0x130>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d023      	beq.n	8002c4a <TIM_Base_SetConfig+0xb2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a31      	ldr	r2, [pc, #196]	@ (8002ccc <TIM_Base_SetConfig+0x134>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01f      	beq.n	8002c4a <TIM_Base_SetConfig+0xb2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a30      	ldr	r2, [pc, #192]	@ (8002cd0 <TIM_Base_SetConfig+0x138>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d01b      	beq.n	8002c4a <TIM_Base_SetConfig+0xb2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a2f      	ldr	r2, [pc, #188]	@ (8002cd4 <TIM_Base_SetConfig+0x13c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d017      	beq.n	8002c4a <TIM_Base_SetConfig+0xb2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a2e      	ldr	r2, [pc, #184]	@ (8002cd8 <TIM_Base_SetConfig+0x140>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d013      	beq.n	8002c4a <TIM_Base_SetConfig+0xb2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a2d      	ldr	r2, [pc, #180]	@ (8002cdc <TIM_Base_SetConfig+0x144>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00f      	beq.n	8002c4a <TIM_Base_SetConfig+0xb2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a2c      	ldr	r2, [pc, #176]	@ (8002ce0 <TIM_Base_SetConfig+0x148>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d00b      	beq.n	8002c4a <TIM_Base_SetConfig+0xb2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a2b      	ldr	r2, [pc, #172]	@ (8002ce4 <TIM_Base_SetConfig+0x14c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d007      	beq.n	8002c4a <TIM_Base_SetConfig+0xb2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ce8 <TIM_Base_SetConfig+0x150>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d003      	beq.n	8002c4a <TIM_Base_SetConfig+0xb2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a29      	ldr	r2, [pc, #164]	@ (8002cec <TIM_Base_SetConfig+0x154>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d108      	bne.n	8002c5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a10      	ldr	r2, [pc, #64]	@ (8002cc4 <TIM_Base_SetConfig+0x12c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d003      	beq.n	8002c90 <TIM_Base_SetConfig+0xf8>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a12      	ldr	r2, [pc, #72]	@ (8002cd4 <TIM_Base_SetConfig+0x13c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d103      	bne.n	8002c98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d105      	bne.n	8002cb6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f023 0201 	bic.w	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	611a      	str	r2, [r3, #16]
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40010000 	.word	0x40010000
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	40000800 	.word	0x40000800
 8002cd0:	40000c00 	.word	0x40000c00
 8002cd4:	40010400 	.word	0x40010400
 8002cd8:	40014000 	.word	0x40014000
 8002cdc:	40014400 	.word	0x40014400
 8002ce0:	40014800 	.word	0x40014800
 8002ce4:	40001800 	.word	0x40001800
 8002ce8:	40001c00 	.word	0x40001c00
 8002cec:	40002000 	.word	0x40002000

08002cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	f023 0201 	bic.w	r2, r3, #1
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f023 030a 	bic.w	r3, r3, #10
 8002d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	621a      	str	r2, [r3, #32]
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b087      	sub	sp, #28
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	f023 0210 	bic.w	r2, r3, #16
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	031b      	lsls	r3, r3, #12
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	621a      	str	r2, [r3, #32]
}
 8002da2:	bf00      	nop
 8002da4:	371c      	adds	r7, #28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b085      	sub	sp, #20
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f043 0307 	orr.w	r3, r3, #7
 8002dd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	609a      	str	r2, [r3, #8]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	021a      	lsls	r2, r3, #8
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	609a      	str	r2, [r3, #8]
}
 8002e18:	bf00      	nop
 8002e1a:	371c      	adds	r7, #28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e06d      	b.n	8002f18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2202      	movs	r2, #2
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a30      	ldr	r2, [pc, #192]	@ (8002f24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d004      	beq.n	8002e70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a2f      	ldr	r2, [pc, #188]	@ (8002f28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d108      	bne.n	8002e82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002e76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a20      	ldr	r2, [pc, #128]	@ (8002f24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d022      	beq.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eae:	d01d      	beq.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d018      	beq.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8002f30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d013      	beq.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1a      	ldr	r2, [pc, #104]	@ (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00e      	beq.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a15      	ldr	r2, [pc, #84]	@ (8002f28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d009      	beq.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a16      	ldr	r2, [pc, #88]	@ (8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d004      	beq.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a15      	ldr	r2, [pc, #84]	@ (8002f3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d10c      	bne.n	8002f06 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ef2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	40010000 	.word	0x40010000
 8002f28:	40010400 	.word	0x40010400
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	40000800 	.word	0x40000800
 8002f34:	40000c00 	.word	0x40000c00
 8002f38:	40014000 	.word	0x40014000
 8002f3c:	40001800 	.word	0x40001800

08002f40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e040      	b.n	8003010 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fd fdfe 	bl	8000ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2224      	movs	r2, #36	@ 0x24
 8002fa8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0201 	bic.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 fb16 	bl	80035f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f8af 	bl	800312c <UART_SetConfig>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e01b      	b.n	8003010 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fe6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ff6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0201 	orr.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 fb95 	bl	8003738 <UART_CheckIdleState>
 800300e:	4603      	mov	r3, r0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08a      	sub	sp, #40	@ 0x28
 800301c:	af02      	add	r7, sp, #8
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	4613      	mov	r3, r2
 8003026:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800302c:	2b20      	cmp	r3, #32
 800302e:	d177      	bne.n	8003120 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_UART_Transmit+0x24>
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e070      	b.n	8003122 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2221      	movs	r2, #33	@ 0x21
 800304c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800304e:	f7fd fe81 	bl	8000d54 <HAL_GetTick>
 8003052:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	88fa      	ldrh	r2, [r7, #6]
 8003058:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	88fa      	ldrh	r2, [r7, #6]
 8003060:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800306c:	d108      	bne.n	8003080 <HAL_UART_Transmit+0x68>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d104      	bne.n	8003080 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	e003      	b.n	8003088 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003084:	2300      	movs	r3, #0
 8003086:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003088:	e02f      	b.n	80030ea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2200      	movs	r2, #0
 8003092:	2180      	movs	r1, #128	@ 0x80
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 fbf7 	bl	8003888 <UART_WaitOnFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d004      	beq.n	80030aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2220      	movs	r2, #32
 80030a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e03b      	b.n	8003122 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10b      	bne.n	80030c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	3302      	adds	r3, #2
 80030c4:	61bb      	str	r3, [r7, #24]
 80030c6:	e007      	b.n	80030d8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	781a      	ldrb	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	3301      	adds	r3, #1
 80030d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80030de:	b29b      	uxth	r3, r3
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1c9      	bne.n	800308a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2200      	movs	r2, #0
 80030fe:	2140      	movs	r1, #64	@ 0x40
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fbc1 	bl	8003888 <UART_WaitOnFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d004      	beq.n	8003116 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2220      	movs	r2, #32
 8003110:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e005      	b.n	8003122 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2220      	movs	r2, #32
 800311a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	e000      	b.n	8003122 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003120:	2302      	movs	r3, #2
  }
}
 8003122:	4618      	mov	r0, r3
 8003124:	3720      	adds	r7, #32
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	4313      	orrs	r3, r2
 800314e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4ba6      	ldr	r3, [pc, #664]	@ (80033f0 <UART_SetConfig+0x2c4>)
 8003158:	4013      	ands	r3, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	6979      	ldr	r1, [r7, #20]
 8003160:	430b      	orrs	r3, r1
 8003162:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	4313      	orrs	r3, r2
 8003188:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	430a      	orrs	r2, r1
 800319c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a94      	ldr	r2, [pc, #592]	@ (80033f4 <UART_SetConfig+0x2c8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d120      	bne.n	80031ea <UART_SetConfig+0xbe>
 80031a8:	4b93      	ldr	r3, [pc, #588]	@ (80033f8 <UART_SetConfig+0x2cc>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d816      	bhi.n	80031e4 <UART_SetConfig+0xb8>
 80031b6:	a201      	add	r2, pc, #4	@ (adr r2, 80031bc <UART_SetConfig+0x90>)
 80031b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031bc:	080031cd 	.word	0x080031cd
 80031c0:	080031d9 	.word	0x080031d9
 80031c4:	080031d3 	.word	0x080031d3
 80031c8:	080031df 	.word	0x080031df
 80031cc:	2301      	movs	r3, #1
 80031ce:	77fb      	strb	r3, [r7, #31]
 80031d0:	e150      	b.n	8003474 <UART_SetConfig+0x348>
 80031d2:	2302      	movs	r3, #2
 80031d4:	77fb      	strb	r3, [r7, #31]
 80031d6:	e14d      	b.n	8003474 <UART_SetConfig+0x348>
 80031d8:	2304      	movs	r3, #4
 80031da:	77fb      	strb	r3, [r7, #31]
 80031dc:	e14a      	b.n	8003474 <UART_SetConfig+0x348>
 80031de:	2308      	movs	r3, #8
 80031e0:	77fb      	strb	r3, [r7, #31]
 80031e2:	e147      	b.n	8003474 <UART_SetConfig+0x348>
 80031e4:	2310      	movs	r3, #16
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	e144      	b.n	8003474 <UART_SetConfig+0x348>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a83      	ldr	r2, [pc, #524]	@ (80033fc <UART_SetConfig+0x2d0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d132      	bne.n	800325a <UART_SetConfig+0x12e>
 80031f4:	4b80      	ldr	r3, [pc, #512]	@ (80033f8 <UART_SetConfig+0x2cc>)
 80031f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b0c      	cmp	r3, #12
 8003200:	d828      	bhi.n	8003254 <UART_SetConfig+0x128>
 8003202:	a201      	add	r2, pc, #4	@ (adr r2, 8003208 <UART_SetConfig+0xdc>)
 8003204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003208:	0800323d 	.word	0x0800323d
 800320c:	08003255 	.word	0x08003255
 8003210:	08003255 	.word	0x08003255
 8003214:	08003255 	.word	0x08003255
 8003218:	08003249 	.word	0x08003249
 800321c:	08003255 	.word	0x08003255
 8003220:	08003255 	.word	0x08003255
 8003224:	08003255 	.word	0x08003255
 8003228:	08003243 	.word	0x08003243
 800322c:	08003255 	.word	0x08003255
 8003230:	08003255 	.word	0x08003255
 8003234:	08003255 	.word	0x08003255
 8003238:	0800324f 	.word	0x0800324f
 800323c:	2300      	movs	r3, #0
 800323e:	77fb      	strb	r3, [r7, #31]
 8003240:	e118      	b.n	8003474 <UART_SetConfig+0x348>
 8003242:	2302      	movs	r3, #2
 8003244:	77fb      	strb	r3, [r7, #31]
 8003246:	e115      	b.n	8003474 <UART_SetConfig+0x348>
 8003248:	2304      	movs	r3, #4
 800324a:	77fb      	strb	r3, [r7, #31]
 800324c:	e112      	b.n	8003474 <UART_SetConfig+0x348>
 800324e:	2308      	movs	r3, #8
 8003250:	77fb      	strb	r3, [r7, #31]
 8003252:	e10f      	b.n	8003474 <UART_SetConfig+0x348>
 8003254:	2310      	movs	r3, #16
 8003256:	77fb      	strb	r3, [r7, #31]
 8003258:	e10c      	b.n	8003474 <UART_SetConfig+0x348>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a68      	ldr	r2, [pc, #416]	@ (8003400 <UART_SetConfig+0x2d4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d120      	bne.n	80032a6 <UART_SetConfig+0x17a>
 8003264:	4b64      	ldr	r3, [pc, #400]	@ (80033f8 <UART_SetConfig+0x2cc>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800326a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800326e:	2b30      	cmp	r3, #48	@ 0x30
 8003270:	d013      	beq.n	800329a <UART_SetConfig+0x16e>
 8003272:	2b30      	cmp	r3, #48	@ 0x30
 8003274:	d814      	bhi.n	80032a0 <UART_SetConfig+0x174>
 8003276:	2b20      	cmp	r3, #32
 8003278:	d009      	beq.n	800328e <UART_SetConfig+0x162>
 800327a:	2b20      	cmp	r3, #32
 800327c:	d810      	bhi.n	80032a0 <UART_SetConfig+0x174>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <UART_SetConfig+0x15c>
 8003282:	2b10      	cmp	r3, #16
 8003284:	d006      	beq.n	8003294 <UART_SetConfig+0x168>
 8003286:	e00b      	b.n	80032a0 <UART_SetConfig+0x174>
 8003288:	2300      	movs	r3, #0
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e0f2      	b.n	8003474 <UART_SetConfig+0x348>
 800328e:	2302      	movs	r3, #2
 8003290:	77fb      	strb	r3, [r7, #31]
 8003292:	e0ef      	b.n	8003474 <UART_SetConfig+0x348>
 8003294:	2304      	movs	r3, #4
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	e0ec      	b.n	8003474 <UART_SetConfig+0x348>
 800329a:	2308      	movs	r3, #8
 800329c:	77fb      	strb	r3, [r7, #31]
 800329e:	e0e9      	b.n	8003474 <UART_SetConfig+0x348>
 80032a0:	2310      	movs	r3, #16
 80032a2:	77fb      	strb	r3, [r7, #31]
 80032a4:	e0e6      	b.n	8003474 <UART_SetConfig+0x348>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a56      	ldr	r2, [pc, #344]	@ (8003404 <UART_SetConfig+0x2d8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d120      	bne.n	80032f2 <UART_SetConfig+0x1c6>
 80032b0:	4b51      	ldr	r3, [pc, #324]	@ (80033f8 <UART_SetConfig+0x2cc>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80032ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80032bc:	d013      	beq.n	80032e6 <UART_SetConfig+0x1ba>
 80032be:	2bc0      	cmp	r3, #192	@ 0xc0
 80032c0:	d814      	bhi.n	80032ec <UART_SetConfig+0x1c0>
 80032c2:	2b80      	cmp	r3, #128	@ 0x80
 80032c4:	d009      	beq.n	80032da <UART_SetConfig+0x1ae>
 80032c6:	2b80      	cmp	r3, #128	@ 0x80
 80032c8:	d810      	bhi.n	80032ec <UART_SetConfig+0x1c0>
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <UART_SetConfig+0x1a8>
 80032ce:	2b40      	cmp	r3, #64	@ 0x40
 80032d0:	d006      	beq.n	80032e0 <UART_SetConfig+0x1b4>
 80032d2:	e00b      	b.n	80032ec <UART_SetConfig+0x1c0>
 80032d4:	2300      	movs	r3, #0
 80032d6:	77fb      	strb	r3, [r7, #31]
 80032d8:	e0cc      	b.n	8003474 <UART_SetConfig+0x348>
 80032da:	2302      	movs	r3, #2
 80032dc:	77fb      	strb	r3, [r7, #31]
 80032de:	e0c9      	b.n	8003474 <UART_SetConfig+0x348>
 80032e0:	2304      	movs	r3, #4
 80032e2:	77fb      	strb	r3, [r7, #31]
 80032e4:	e0c6      	b.n	8003474 <UART_SetConfig+0x348>
 80032e6:	2308      	movs	r3, #8
 80032e8:	77fb      	strb	r3, [r7, #31]
 80032ea:	e0c3      	b.n	8003474 <UART_SetConfig+0x348>
 80032ec:	2310      	movs	r3, #16
 80032ee:	77fb      	strb	r3, [r7, #31]
 80032f0:	e0c0      	b.n	8003474 <UART_SetConfig+0x348>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a44      	ldr	r2, [pc, #272]	@ (8003408 <UART_SetConfig+0x2dc>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d125      	bne.n	8003348 <UART_SetConfig+0x21c>
 80032fc:	4b3e      	ldr	r3, [pc, #248]	@ (80033f8 <UART_SetConfig+0x2cc>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003306:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800330a:	d017      	beq.n	800333c <UART_SetConfig+0x210>
 800330c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003310:	d817      	bhi.n	8003342 <UART_SetConfig+0x216>
 8003312:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003316:	d00b      	beq.n	8003330 <UART_SetConfig+0x204>
 8003318:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800331c:	d811      	bhi.n	8003342 <UART_SetConfig+0x216>
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <UART_SetConfig+0x1fe>
 8003322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003326:	d006      	beq.n	8003336 <UART_SetConfig+0x20a>
 8003328:	e00b      	b.n	8003342 <UART_SetConfig+0x216>
 800332a:	2300      	movs	r3, #0
 800332c:	77fb      	strb	r3, [r7, #31]
 800332e:	e0a1      	b.n	8003474 <UART_SetConfig+0x348>
 8003330:	2302      	movs	r3, #2
 8003332:	77fb      	strb	r3, [r7, #31]
 8003334:	e09e      	b.n	8003474 <UART_SetConfig+0x348>
 8003336:	2304      	movs	r3, #4
 8003338:	77fb      	strb	r3, [r7, #31]
 800333a:	e09b      	b.n	8003474 <UART_SetConfig+0x348>
 800333c:	2308      	movs	r3, #8
 800333e:	77fb      	strb	r3, [r7, #31]
 8003340:	e098      	b.n	8003474 <UART_SetConfig+0x348>
 8003342:	2310      	movs	r3, #16
 8003344:	77fb      	strb	r3, [r7, #31]
 8003346:	e095      	b.n	8003474 <UART_SetConfig+0x348>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a2f      	ldr	r2, [pc, #188]	@ (800340c <UART_SetConfig+0x2e0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d125      	bne.n	800339e <UART_SetConfig+0x272>
 8003352:	4b29      	ldr	r3, [pc, #164]	@ (80033f8 <UART_SetConfig+0x2cc>)
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003358:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800335c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003360:	d017      	beq.n	8003392 <UART_SetConfig+0x266>
 8003362:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003366:	d817      	bhi.n	8003398 <UART_SetConfig+0x26c>
 8003368:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800336c:	d00b      	beq.n	8003386 <UART_SetConfig+0x25a>
 800336e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003372:	d811      	bhi.n	8003398 <UART_SetConfig+0x26c>
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <UART_SetConfig+0x254>
 8003378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800337c:	d006      	beq.n	800338c <UART_SetConfig+0x260>
 800337e:	e00b      	b.n	8003398 <UART_SetConfig+0x26c>
 8003380:	2301      	movs	r3, #1
 8003382:	77fb      	strb	r3, [r7, #31]
 8003384:	e076      	b.n	8003474 <UART_SetConfig+0x348>
 8003386:	2302      	movs	r3, #2
 8003388:	77fb      	strb	r3, [r7, #31]
 800338a:	e073      	b.n	8003474 <UART_SetConfig+0x348>
 800338c:	2304      	movs	r3, #4
 800338e:	77fb      	strb	r3, [r7, #31]
 8003390:	e070      	b.n	8003474 <UART_SetConfig+0x348>
 8003392:	2308      	movs	r3, #8
 8003394:	77fb      	strb	r3, [r7, #31]
 8003396:	e06d      	b.n	8003474 <UART_SetConfig+0x348>
 8003398:	2310      	movs	r3, #16
 800339a:	77fb      	strb	r3, [r7, #31]
 800339c:	e06a      	b.n	8003474 <UART_SetConfig+0x348>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003410 <UART_SetConfig+0x2e4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d138      	bne.n	800341a <UART_SetConfig+0x2ee>
 80033a8:	4b13      	ldr	r3, [pc, #76]	@ (80033f8 <UART_SetConfig+0x2cc>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ae:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80033b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80033b6:	d017      	beq.n	80033e8 <UART_SetConfig+0x2bc>
 80033b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80033bc:	d82a      	bhi.n	8003414 <UART_SetConfig+0x2e8>
 80033be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033c2:	d00b      	beq.n	80033dc <UART_SetConfig+0x2b0>
 80033c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033c8:	d824      	bhi.n	8003414 <UART_SetConfig+0x2e8>
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <UART_SetConfig+0x2aa>
 80033ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033d2:	d006      	beq.n	80033e2 <UART_SetConfig+0x2b6>
 80033d4:	e01e      	b.n	8003414 <UART_SetConfig+0x2e8>
 80033d6:	2300      	movs	r3, #0
 80033d8:	77fb      	strb	r3, [r7, #31]
 80033da:	e04b      	b.n	8003474 <UART_SetConfig+0x348>
 80033dc:	2302      	movs	r3, #2
 80033de:	77fb      	strb	r3, [r7, #31]
 80033e0:	e048      	b.n	8003474 <UART_SetConfig+0x348>
 80033e2:	2304      	movs	r3, #4
 80033e4:	77fb      	strb	r3, [r7, #31]
 80033e6:	e045      	b.n	8003474 <UART_SetConfig+0x348>
 80033e8:	2308      	movs	r3, #8
 80033ea:	77fb      	strb	r3, [r7, #31]
 80033ec:	e042      	b.n	8003474 <UART_SetConfig+0x348>
 80033ee:	bf00      	nop
 80033f0:	efff69f3 	.word	0xefff69f3
 80033f4:	40011000 	.word	0x40011000
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40004400 	.word	0x40004400
 8003400:	40004800 	.word	0x40004800
 8003404:	40004c00 	.word	0x40004c00
 8003408:	40005000 	.word	0x40005000
 800340c:	40011400 	.word	0x40011400
 8003410:	40007800 	.word	0x40007800
 8003414:	2310      	movs	r3, #16
 8003416:	77fb      	strb	r3, [r7, #31]
 8003418:	e02c      	b.n	8003474 <UART_SetConfig+0x348>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a72      	ldr	r2, [pc, #456]	@ (80035e8 <UART_SetConfig+0x4bc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d125      	bne.n	8003470 <UART_SetConfig+0x344>
 8003424:	4b71      	ldr	r3, [pc, #452]	@ (80035ec <UART_SetConfig+0x4c0>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800342a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800342e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003432:	d017      	beq.n	8003464 <UART_SetConfig+0x338>
 8003434:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003438:	d817      	bhi.n	800346a <UART_SetConfig+0x33e>
 800343a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800343e:	d00b      	beq.n	8003458 <UART_SetConfig+0x32c>
 8003440:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003444:	d811      	bhi.n	800346a <UART_SetConfig+0x33e>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <UART_SetConfig+0x326>
 800344a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800344e:	d006      	beq.n	800345e <UART_SetConfig+0x332>
 8003450:	e00b      	b.n	800346a <UART_SetConfig+0x33e>
 8003452:	2300      	movs	r3, #0
 8003454:	77fb      	strb	r3, [r7, #31]
 8003456:	e00d      	b.n	8003474 <UART_SetConfig+0x348>
 8003458:	2302      	movs	r3, #2
 800345a:	77fb      	strb	r3, [r7, #31]
 800345c:	e00a      	b.n	8003474 <UART_SetConfig+0x348>
 800345e:	2304      	movs	r3, #4
 8003460:	77fb      	strb	r3, [r7, #31]
 8003462:	e007      	b.n	8003474 <UART_SetConfig+0x348>
 8003464:	2308      	movs	r3, #8
 8003466:	77fb      	strb	r3, [r7, #31]
 8003468:	e004      	b.n	8003474 <UART_SetConfig+0x348>
 800346a:	2310      	movs	r3, #16
 800346c:	77fb      	strb	r3, [r7, #31]
 800346e:	e001      	b.n	8003474 <UART_SetConfig+0x348>
 8003470:	2310      	movs	r3, #16
 8003472:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800347c:	d15b      	bne.n	8003536 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800347e:	7ffb      	ldrb	r3, [r7, #31]
 8003480:	2b08      	cmp	r3, #8
 8003482:	d828      	bhi.n	80034d6 <UART_SetConfig+0x3aa>
 8003484:	a201      	add	r2, pc, #4	@ (adr r2, 800348c <UART_SetConfig+0x360>)
 8003486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348a:	bf00      	nop
 800348c:	080034b1 	.word	0x080034b1
 8003490:	080034b9 	.word	0x080034b9
 8003494:	080034c1 	.word	0x080034c1
 8003498:	080034d7 	.word	0x080034d7
 800349c:	080034c7 	.word	0x080034c7
 80034a0:	080034d7 	.word	0x080034d7
 80034a4:	080034d7 	.word	0x080034d7
 80034a8:	080034d7 	.word	0x080034d7
 80034ac:	080034cf 	.word	0x080034cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034b0:	f7fe fc4e 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 80034b4:	61b8      	str	r0, [r7, #24]
        break;
 80034b6:	e013      	b.n	80034e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034b8:	f7fe fc5e 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 80034bc:	61b8      	str	r0, [r7, #24]
        break;
 80034be:	e00f      	b.n	80034e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034c0:	4b4b      	ldr	r3, [pc, #300]	@ (80035f0 <UART_SetConfig+0x4c4>)
 80034c2:	61bb      	str	r3, [r7, #24]
        break;
 80034c4:	e00c      	b.n	80034e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034c6:	f7fe fb71 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 80034ca:	61b8      	str	r0, [r7, #24]
        break;
 80034cc:	e008      	b.n	80034e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034d2:	61bb      	str	r3, [r7, #24]
        break;
 80034d4:	e004      	b.n	80034e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	77bb      	strb	r3, [r7, #30]
        break;
 80034de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d074      	beq.n	80035d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	005a      	lsls	r2, r3, #1
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	085b      	lsrs	r3, r3, #1
 80034f0:	441a      	add	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	2b0f      	cmp	r3, #15
 8003500:	d916      	bls.n	8003530 <UART_SetConfig+0x404>
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003508:	d212      	bcs.n	8003530 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	b29b      	uxth	r3, r3
 800350e:	f023 030f 	bic.w	r3, r3, #15
 8003512:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	085b      	lsrs	r3, r3, #1
 8003518:	b29b      	uxth	r3, r3
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	b29a      	uxth	r2, r3
 8003520:	89fb      	ldrh	r3, [r7, #14]
 8003522:	4313      	orrs	r3, r2
 8003524:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	89fa      	ldrh	r2, [r7, #14]
 800352c:	60da      	str	r2, [r3, #12]
 800352e:	e04f      	b.n	80035d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	77bb      	strb	r3, [r7, #30]
 8003534:	e04c      	b.n	80035d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003536:	7ffb      	ldrb	r3, [r7, #31]
 8003538:	2b08      	cmp	r3, #8
 800353a:	d828      	bhi.n	800358e <UART_SetConfig+0x462>
 800353c:	a201      	add	r2, pc, #4	@ (adr r2, 8003544 <UART_SetConfig+0x418>)
 800353e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003542:	bf00      	nop
 8003544:	08003569 	.word	0x08003569
 8003548:	08003571 	.word	0x08003571
 800354c:	08003579 	.word	0x08003579
 8003550:	0800358f 	.word	0x0800358f
 8003554:	0800357f 	.word	0x0800357f
 8003558:	0800358f 	.word	0x0800358f
 800355c:	0800358f 	.word	0x0800358f
 8003560:	0800358f 	.word	0x0800358f
 8003564:	08003587 	.word	0x08003587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003568:	f7fe fbf2 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 800356c:	61b8      	str	r0, [r7, #24]
        break;
 800356e:	e013      	b.n	8003598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003570:	f7fe fc02 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 8003574:	61b8      	str	r0, [r7, #24]
        break;
 8003576:	e00f      	b.n	8003598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003578:	4b1d      	ldr	r3, [pc, #116]	@ (80035f0 <UART_SetConfig+0x4c4>)
 800357a:	61bb      	str	r3, [r7, #24]
        break;
 800357c:	e00c      	b.n	8003598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800357e:	f7fe fb15 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 8003582:	61b8      	str	r0, [r7, #24]
        break;
 8003584:	e008      	b.n	8003598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003586:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800358a:	61bb      	str	r3, [r7, #24]
        break;
 800358c:	e004      	b.n	8003598 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	77bb      	strb	r3, [r7, #30]
        break;
 8003596:	bf00      	nop
    }

    if (pclk != 0U)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d018      	beq.n	80035d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	085a      	lsrs	r2, r3, #1
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	441a      	add	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	2b0f      	cmp	r3, #15
 80035b6:	d909      	bls.n	80035cc <UART_SetConfig+0x4a0>
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035be:	d205      	bcs.n	80035cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60da      	str	r2, [r3, #12]
 80035ca:	e001      	b.n	80035d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80035dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3720      	adds	r7, #32
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40007c00 	.word	0x40007c00
 80035ec:	40023800 	.word	0x40023800
 80035f0:	00f42400 	.word	0x00f42400

080035f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003688:	f003 0310 	and.w	r3, r3, #16
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01a      	beq.n	800370a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036f2:	d10a      	bne.n	800370a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	605a      	str	r2, [r3, #4]
  }
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b098      	sub	sp, #96	@ 0x60
 800373c:	af02      	add	r7, sp, #8
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003748:	f7fd fb04 	bl	8000d54 <HAL_GetTick>
 800374c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b08      	cmp	r3, #8
 800375a:	d12e      	bne.n	80037ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800375c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003764:	2200      	movs	r2, #0
 8003766:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f88c 	bl	8003888 <UART_WaitOnFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d021      	beq.n	80037ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003786:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800378a:	653b      	str	r3, [r7, #80]	@ 0x50
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003794:	647b      	str	r3, [r7, #68]	@ 0x44
 8003796:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003798:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800379a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800379c:	e841 2300 	strex	r3, r2, [r1]
 80037a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e6      	bne.n	8003776 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2220      	movs	r2, #32
 80037ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e062      	b.n	8003880 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d149      	bne.n	800385c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d0:	2200      	movs	r2, #0
 80037d2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f856 	bl	8003888 <UART_WaitOnFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d03c      	beq.n	800385c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ea:	e853 3f00 	ldrex	r3, [r3]
 80037ee:	623b      	str	r3, [r7, #32]
   return(result);
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003800:	633b      	str	r3, [r7, #48]	@ 0x30
 8003802:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003804:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003806:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003808:	e841 2300 	strex	r3, r2, [r1]
 800380c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800380e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e6      	bne.n	80037e2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3308      	adds	r3, #8
 800381a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	e853 3f00 	ldrex	r3, [r3]
 8003822:	60fb      	str	r3, [r7, #12]
   return(result);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0301 	bic.w	r3, r3, #1
 800382a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3308      	adds	r3, #8
 8003832:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003834:	61fa      	str	r2, [r7, #28]
 8003836:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003838:	69b9      	ldr	r1, [r7, #24]
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	e841 2300 	strex	r3, r2, [r1]
 8003840:	617b      	str	r3, [r7, #20]
   return(result);
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e5      	bne.n	8003814 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2220      	movs	r2, #32
 800384c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e011      	b.n	8003880 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2220      	movs	r2, #32
 8003866:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3758      	adds	r7, #88	@ 0x58
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	4613      	mov	r3, r2
 8003896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003898:	e04f      	b.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d04b      	beq.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a2:	f7fd fa57 	bl	8000d54 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d302      	bcc.n	80038b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e04e      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d037      	beq.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b80      	cmp	r3, #128	@ 0x80
 80038ce:	d034      	beq.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b40      	cmp	r3, #64	@ 0x40
 80038d4:	d031      	beq.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d110      	bne.n	8003906 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2208      	movs	r2, #8
 80038ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f838 	bl	8003962 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2208      	movs	r2, #8
 80038f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e029      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003910:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003914:	d111      	bne.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800391e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f81e 	bl	8003962 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2220      	movs	r2, #32
 800392a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e00f      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4013      	ands	r3, r2
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	429a      	cmp	r2, r3
 8003948:	bf0c      	ite	eq
 800394a:	2301      	moveq	r3, #1
 800394c:	2300      	movne	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	429a      	cmp	r2, r3
 8003956:	d0a0      	beq.n	800389a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003962:	b480      	push	{r7}
 8003964:	b095      	sub	sp, #84	@ 0x54
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003972:	e853 3f00 	ldrex	r3, [r3]
 8003976:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800397e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003988:	643b      	str	r3, [r7, #64]	@ 0x40
 800398a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800398e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003990:	e841 2300 	strex	r3, r2, [r1]
 8003994:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1e6      	bne.n	800396a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3308      	adds	r3, #8
 80039a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	e853 3f00 	ldrex	r3, [r3]
 80039aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3308      	adds	r3, #8
 80039ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039c4:	e841 2300 	strex	r3, r2, [r1]
 80039c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1e5      	bne.n	800399c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d118      	bne.n	8003a0a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	e853 3f00 	ldrex	r3, [r3]
 80039e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f023 0310 	bic.w	r3, r3, #16
 80039ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039f6:	61bb      	str	r3, [r7, #24]
 80039f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fa:	6979      	ldr	r1, [r7, #20]
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	e841 2300 	strex	r3, r2, [r1]
 8003a02:	613b      	str	r3, [r7, #16]
   return(result);
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1e6      	bne.n	80039d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003a1e:	bf00      	nop
 8003a20:	3754      	adds	r7, #84	@ 0x54
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <siprintf>:
 8003a2c:	b40e      	push	{r1, r2, r3}
 8003a2e:	b500      	push	{lr}
 8003a30:	b09c      	sub	sp, #112	@ 0x70
 8003a32:	ab1d      	add	r3, sp, #116	@ 0x74
 8003a34:	9002      	str	r0, [sp, #8]
 8003a36:	9006      	str	r0, [sp, #24]
 8003a38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003a3c:	4809      	ldr	r0, [pc, #36]	@ (8003a64 <siprintf+0x38>)
 8003a3e:	9107      	str	r1, [sp, #28]
 8003a40:	9104      	str	r1, [sp, #16]
 8003a42:	4909      	ldr	r1, [pc, #36]	@ (8003a68 <siprintf+0x3c>)
 8003a44:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a48:	9105      	str	r1, [sp, #20]
 8003a4a:	6800      	ldr	r0, [r0, #0]
 8003a4c:	9301      	str	r3, [sp, #4]
 8003a4e:	a902      	add	r1, sp, #8
 8003a50:	f000 f994 	bl	8003d7c <_svfiprintf_r>
 8003a54:	9b02      	ldr	r3, [sp, #8]
 8003a56:	2200      	movs	r2, #0
 8003a58:	701a      	strb	r2, [r3, #0]
 8003a5a:	b01c      	add	sp, #112	@ 0x70
 8003a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a60:	b003      	add	sp, #12
 8003a62:	4770      	bx	lr
 8003a64:	2000000c 	.word	0x2000000c
 8003a68:	ffff0208 	.word	0xffff0208

08003a6c <memset>:
 8003a6c:	4402      	add	r2, r0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d100      	bne.n	8003a76 <memset+0xa>
 8003a74:	4770      	bx	lr
 8003a76:	f803 1b01 	strb.w	r1, [r3], #1
 8003a7a:	e7f9      	b.n	8003a70 <memset+0x4>

08003a7c <__errno>:
 8003a7c:	4b01      	ldr	r3, [pc, #4]	@ (8003a84 <__errno+0x8>)
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	2000000c 	.word	0x2000000c

08003a88 <__libc_init_array>:
 8003a88:	b570      	push	{r4, r5, r6, lr}
 8003a8a:	4d0d      	ldr	r5, [pc, #52]	@ (8003ac0 <__libc_init_array+0x38>)
 8003a8c:	4c0d      	ldr	r4, [pc, #52]	@ (8003ac4 <__libc_init_array+0x3c>)
 8003a8e:	1b64      	subs	r4, r4, r5
 8003a90:	10a4      	asrs	r4, r4, #2
 8003a92:	2600      	movs	r6, #0
 8003a94:	42a6      	cmp	r6, r4
 8003a96:	d109      	bne.n	8003aac <__libc_init_array+0x24>
 8003a98:	4d0b      	ldr	r5, [pc, #44]	@ (8003ac8 <__libc_init_array+0x40>)
 8003a9a:	4c0c      	ldr	r4, [pc, #48]	@ (8003acc <__libc_init_array+0x44>)
 8003a9c:	f000 fc66 	bl	800436c <_init>
 8003aa0:	1b64      	subs	r4, r4, r5
 8003aa2:	10a4      	asrs	r4, r4, #2
 8003aa4:	2600      	movs	r6, #0
 8003aa6:	42a6      	cmp	r6, r4
 8003aa8:	d105      	bne.n	8003ab6 <__libc_init_array+0x2e>
 8003aaa:	bd70      	pop	{r4, r5, r6, pc}
 8003aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ab0:	4798      	blx	r3
 8003ab2:	3601      	adds	r6, #1
 8003ab4:	e7ee      	b.n	8003a94 <__libc_init_array+0xc>
 8003ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aba:	4798      	blx	r3
 8003abc:	3601      	adds	r6, #1
 8003abe:	e7f2      	b.n	8003aa6 <__libc_init_array+0x1e>
 8003ac0:	080043e8 	.word	0x080043e8
 8003ac4:	080043e8 	.word	0x080043e8
 8003ac8:	080043e8 	.word	0x080043e8
 8003acc:	080043ec 	.word	0x080043ec

08003ad0 <__retarget_lock_acquire_recursive>:
 8003ad0:	4770      	bx	lr

08003ad2 <__retarget_lock_release_recursive>:
 8003ad2:	4770      	bx	lr

08003ad4 <_free_r>:
 8003ad4:	b538      	push	{r3, r4, r5, lr}
 8003ad6:	4605      	mov	r5, r0
 8003ad8:	2900      	cmp	r1, #0
 8003ada:	d041      	beq.n	8003b60 <_free_r+0x8c>
 8003adc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ae0:	1f0c      	subs	r4, r1, #4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	bfb8      	it	lt
 8003ae6:	18e4      	addlt	r4, r4, r3
 8003ae8:	f000 f8e0 	bl	8003cac <__malloc_lock>
 8003aec:	4a1d      	ldr	r2, [pc, #116]	@ (8003b64 <_free_r+0x90>)
 8003aee:	6813      	ldr	r3, [r2, #0]
 8003af0:	b933      	cbnz	r3, 8003b00 <_free_r+0x2c>
 8003af2:	6063      	str	r3, [r4, #4]
 8003af4:	6014      	str	r4, [r2, #0]
 8003af6:	4628      	mov	r0, r5
 8003af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003afc:	f000 b8dc 	b.w	8003cb8 <__malloc_unlock>
 8003b00:	42a3      	cmp	r3, r4
 8003b02:	d908      	bls.n	8003b16 <_free_r+0x42>
 8003b04:	6820      	ldr	r0, [r4, #0]
 8003b06:	1821      	adds	r1, r4, r0
 8003b08:	428b      	cmp	r3, r1
 8003b0a:	bf01      	itttt	eq
 8003b0c:	6819      	ldreq	r1, [r3, #0]
 8003b0e:	685b      	ldreq	r3, [r3, #4]
 8003b10:	1809      	addeq	r1, r1, r0
 8003b12:	6021      	streq	r1, [r4, #0]
 8003b14:	e7ed      	b.n	8003af2 <_free_r+0x1e>
 8003b16:	461a      	mov	r2, r3
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	b10b      	cbz	r3, 8003b20 <_free_r+0x4c>
 8003b1c:	42a3      	cmp	r3, r4
 8003b1e:	d9fa      	bls.n	8003b16 <_free_r+0x42>
 8003b20:	6811      	ldr	r1, [r2, #0]
 8003b22:	1850      	adds	r0, r2, r1
 8003b24:	42a0      	cmp	r0, r4
 8003b26:	d10b      	bne.n	8003b40 <_free_r+0x6c>
 8003b28:	6820      	ldr	r0, [r4, #0]
 8003b2a:	4401      	add	r1, r0
 8003b2c:	1850      	adds	r0, r2, r1
 8003b2e:	4283      	cmp	r3, r0
 8003b30:	6011      	str	r1, [r2, #0]
 8003b32:	d1e0      	bne.n	8003af6 <_free_r+0x22>
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	6053      	str	r3, [r2, #4]
 8003b3a:	4408      	add	r0, r1
 8003b3c:	6010      	str	r0, [r2, #0]
 8003b3e:	e7da      	b.n	8003af6 <_free_r+0x22>
 8003b40:	d902      	bls.n	8003b48 <_free_r+0x74>
 8003b42:	230c      	movs	r3, #12
 8003b44:	602b      	str	r3, [r5, #0]
 8003b46:	e7d6      	b.n	8003af6 <_free_r+0x22>
 8003b48:	6820      	ldr	r0, [r4, #0]
 8003b4a:	1821      	adds	r1, r4, r0
 8003b4c:	428b      	cmp	r3, r1
 8003b4e:	bf04      	itt	eq
 8003b50:	6819      	ldreq	r1, [r3, #0]
 8003b52:	685b      	ldreq	r3, [r3, #4]
 8003b54:	6063      	str	r3, [r4, #4]
 8003b56:	bf04      	itt	eq
 8003b58:	1809      	addeq	r1, r1, r0
 8003b5a:	6021      	streq	r1, [r4, #0]
 8003b5c:	6054      	str	r4, [r2, #4]
 8003b5e:	e7ca      	b.n	8003af6 <_free_r+0x22>
 8003b60:	bd38      	pop	{r3, r4, r5, pc}
 8003b62:	bf00      	nop
 8003b64:	200002f4 	.word	0x200002f4

08003b68 <sbrk_aligned>:
 8003b68:	b570      	push	{r4, r5, r6, lr}
 8003b6a:	4e0f      	ldr	r6, [pc, #60]	@ (8003ba8 <sbrk_aligned+0x40>)
 8003b6c:	460c      	mov	r4, r1
 8003b6e:	6831      	ldr	r1, [r6, #0]
 8003b70:	4605      	mov	r5, r0
 8003b72:	b911      	cbnz	r1, 8003b7a <sbrk_aligned+0x12>
 8003b74:	f000 fba6 	bl	80042c4 <_sbrk_r>
 8003b78:	6030      	str	r0, [r6, #0]
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	f000 fba1 	bl	80042c4 <_sbrk_r>
 8003b82:	1c43      	adds	r3, r0, #1
 8003b84:	d103      	bne.n	8003b8e <sbrk_aligned+0x26>
 8003b86:	f04f 34ff 	mov.w	r4, #4294967295
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	bd70      	pop	{r4, r5, r6, pc}
 8003b8e:	1cc4      	adds	r4, r0, #3
 8003b90:	f024 0403 	bic.w	r4, r4, #3
 8003b94:	42a0      	cmp	r0, r4
 8003b96:	d0f8      	beq.n	8003b8a <sbrk_aligned+0x22>
 8003b98:	1a21      	subs	r1, r4, r0
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	f000 fb92 	bl	80042c4 <_sbrk_r>
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	d1f2      	bne.n	8003b8a <sbrk_aligned+0x22>
 8003ba4:	e7ef      	b.n	8003b86 <sbrk_aligned+0x1e>
 8003ba6:	bf00      	nop
 8003ba8:	200002f0 	.word	0x200002f0

08003bac <_malloc_r>:
 8003bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bb0:	1ccd      	adds	r5, r1, #3
 8003bb2:	f025 0503 	bic.w	r5, r5, #3
 8003bb6:	3508      	adds	r5, #8
 8003bb8:	2d0c      	cmp	r5, #12
 8003bba:	bf38      	it	cc
 8003bbc:	250c      	movcc	r5, #12
 8003bbe:	2d00      	cmp	r5, #0
 8003bc0:	4606      	mov	r6, r0
 8003bc2:	db01      	blt.n	8003bc8 <_malloc_r+0x1c>
 8003bc4:	42a9      	cmp	r1, r5
 8003bc6:	d904      	bls.n	8003bd2 <_malloc_r+0x26>
 8003bc8:	230c      	movs	r3, #12
 8003bca:	6033      	str	r3, [r6, #0]
 8003bcc:	2000      	movs	r0, #0
 8003bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ca8 <_malloc_r+0xfc>
 8003bd6:	f000 f869 	bl	8003cac <__malloc_lock>
 8003bda:	f8d8 3000 	ldr.w	r3, [r8]
 8003bde:	461c      	mov	r4, r3
 8003be0:	bb44      	cbnz	r4, 8003c34 <_malloc_r+0x88>
 8003be2:	4629      	mov	r1, r5
 8003be4:	4630      	mov	r0, r6
 8003be6:	f7ff ffbf 	bl	8003b68 <sbrk_aligned>
 8003bea:	1c43      	adds	r3, r0, #1
 8003bec:	4604      	mov	r4, r0
 8003bee:	d158      	bne.n	8003ca2 <_malloc_r+0xf6>
 8003bf0:	f8d8 4000 	ldr.w	r4, [r8]
 8003bf4:	4627      	mov	r7, r4
 8003bf6:	2f00      	cmp	r7, #0
 8003bf8:	d143      	bne.n	8003c82 <_malloc_r+0xd6>
 8003bfa:	2c00      	cmp	r4, #0
 8003bfc:	d04b      	beq.n	8003c96 <_malloc_r+0xea>
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	4639      	mov	r1, r7
 8003c02:	4630      	mov	r0, r6
 8003c04:	eb04 0903 	add.w	r9, r4, r3
 8003c08:	f000 fb5c 	bl	80042c4 <_sbrk_r>
 8003c0c:	4581      	cmp	r9, r0
 8003c0e:	d142      	bne.n	8003c96 <_malloc_r+0xea>
 8003c10:	6821      	ldr	r1, [r4, #0]
 8003c12:	1a6d      	subs	r5, r5, r1
 8003c14:	4629      	mov	r1, r5
 8003c16:	4630      	mov	r0, r6
 8003c18:	f7ff ffa6 	bl	8003b68 <sbrk_aligned>
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	d03a      	beq.n	8003c96 <_malloc_r+0xea>
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	442b      	add	r3, r5
 8003c24:	6023      	str	r3, [r4, #0]
 8003c26:	f8d8 3000 	ldr.w	r3, [r8]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	bb62      	cbnz	r2, 8003c88 <_malloc_r+0xdc>
 8003c2e:	f8c8 7000 	str.w	r7, [r8]
 8003c32:	e00f      	b.n	8003c54 <_malloc_r+0xa8>
 8003c34:	6822      	ldr	r2, [r4, #0]
 8003c36:	1b52      	subs	r2, r2, r5
 8003c38:	d420      	bmi.n	8003c7c <_malloc_r+0xd0>
 8003c3a:	2a0b      	cmp	r2, #11
 8003c3c:	d917      	bls.n	8003c6e <_malloc_r+0xc2>
 8003c3e:	1961      	adds	r1, r4, r5
 8003c40:	42a3      	cmp	r3, r4
 8003c42:	6025      	str	r5, [r4, #0]
 8003c44:	bf18      	it	ne
 8003c46:	6059      	strne	r1, [r3, #4]
 8003c48:	6863      	ldr	r3, [r4, #4]
 8003c4a:	bf08      	it	eq
 8003c4c:	f8c8 1000 	streq.w	r1, [r8]
 8003c50:	5162      	str	r2, [r4, r5]
 8003c52:	604b      	str	r3, [r1, #4]
 8003c54:	4630      	mov	r0, r6
 8003c56:	f000 f82f 	bl	8003cb8 <__malloc_unlock>
 8003c5a:	f104 000b 	add.w	r0, r4, #11
 8003c5e:	1d23      	adds	r3, r4, #4
 8003c60:	f020 0007 	bic.w	r0, r0, #7
 8003c64:	1ac2      	subs	r2, r0, r3
 8003c66:	bf1c      	itt	ne
 8003c68:	1a1b      	subne	r3, r3, r0
 8003c6a:	50a3      	strne	r3, [r4, r2]
 8003c6c:	e7af      	b.n	8003bce <_malloc_r+0x22>
 8003c6e:	6862      	ldr	r2, [r4, #4]
 8003c70:	42a3      	cmp	r3, r4
 8003c72:	bf0c      	ite	eq
 8003c74:	f8c8 2000 	streq.w	r2, [r8]
 8003c78:	605a      	strne	r2, [r3, #4]
 8003c7a:	e7eb      	b.n	8003c54 <_malloc_r+0xa8>
 8003c7c:	4623      	mov	r3, r4
 8003c7e:	6864      	ldr	r4, [r4, #4]
 8003c80:	e7ae      	b.n	8003be0 <_malloc_r+0x34>
 8003c82:	463c      	mov	r4, r7
 8003c84:	687f      	ldr	r7, [r7, #4]
 8003c86:	e7b6      	b.n	8003bf6 <_malloc_r+0x4a>
 8003c88:	461a      	mov	r2, r3
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	42a3      	cmp	r3, r4
 8003c8e:	d1fb      	bne.n	8003c88 <_malloc_r+0xdc>
 8003c90:	2300      	movs	r3, #0
 8003c92:	6053      	str	r3, [r2, #4]
 8003c94:	e7de      	b.n	8003c54 <_malloc_r+0xa8>
 8003c96:	230c      	movs	r3, #12
 8003c98:	6033      	str	r3, [r6, #0]
 8003c9a:	4630      	mov	r0, r6
 8003c9c:	f000 f80c 	bl	8003cb8 <__malloc_unlock>
 8003ca0:	e794      	b.n	8003bcc <_malloc_r+0x20>
 8003ca2:	6005      	str	r5, [r0, #0]
 8003ca4:	e7d6      	b.n	8003c54 <_malloc_r+0xa8>
 8003ca6:	bf00      	nop
 8003ca8:	200002f4 	.word	0x200002f4

08003cac <__malloc_lock>:
 8003cac:	4801      	ldr	r0, [pc, #4]	@ (8003cb4 <__malloc_lock+0x8>)
 8003cae:	f7ff bf0f 	b.w	8003ad0 <__retarget_lock_acquire_recursive>
 8003cb2:	bf00      	nop
 8003cb4:	200002ec 	.word	0x200002ec

08003cb8 <__malloc_unlock>:
 8003cb8:	4801      	ldr	r0, [pc, #4]	@ (8003cc0 <__malloc_unlock+0x8>)
 8003cba:	f7ff bf0a 	b.w	8003ad2 <__retarget_lock_release_recursive>
 8003cbe:	bf00      	nop
 8003cc0:	200002ec 	.word	0x200002ec

08003cc4 <__ssputs_r>:
 8003cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cc8:	688e      	ldr	r6, [r1, #8]
 8003cca:	461f      	mov	r7, r3
 8003ccc:	42be      	cmp	r6, r7
 8003cce:	680b      	ldr	r3, [r1, #0]
 8003cd0:	4682      	mov	sl, r0
 8003cd2:	460c      	mov	r4, r1
 8003cd4:	4690      	mov	r8, r2
 8003cd6:	d82d      	bhi.n	8003d34 <__ssputs_r+0x70>
 8003cd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003cdc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003ce0:	d026      	beq.n	8003d30 <__ssputs_r+0x6c>
 8003ce2:	6965      	ldr	r5, [r4, #20]
 8003ce4:	6909      	ldr	r1, [r1, #16]
 8003ce6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cea:	eba3 0901 	sub.w	r9, r3, r1
 8003cee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cf2:	1c7b      	adds	r3, r7, #1
 8003cf4:	444b      	add	r3, r9
 8003cf6:	106d      	asrs	r5, r5, #1
 8003cf8:	429d      	cmp	r5, r3
 8003cfa:	bf38      	it	cc
 8003cfc:	461d      	movcc	r5, r3
 8003cfe:	0553      	lsls	r3, r2, #21
 8003d00:	d527      	bpl.n	8003d52 <__ssputs_r+0x8e>
 8003d02:	4629      	mov	r1, r5
 8003d04:	f7ff ff52 	bl	8003bac <_malloc_r>
 8003d08:	4606      	mov	r6, r0
 8003d0a:	b360      	cbz	r0, 8003d66 <__ssputs_r+0xa2>
 8003d0c:	6921      	ldr	r1, [r4, #16]
 8003d0e:	464a      	mov	r2, r9
 8003d10:	f000 fae8 	bl	80042e4 <memcpy>
 8003d14:	89a3      	ldrh	r3, [r4, #12]
 8003d16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d1e:	81a3      	strh	r3, [r4, #12]
 8003d20:	6126      	str	r6, [r4, #16]
 8003d22:	6165      	str	r5, [r4, #20]
 8003d24:	444e      	add	r6, r9
 8003d26:	eba5 0509 	sub.w	r5, r5, r9
 8003d2a:	6026      	str	r6, [r4, #0]
 8003d2c:	60a5      	str	r5, [r4, #8]
 8003d2e:	463e      	mov	r6, r7
 8003d30:	42be      	cmp	r6, r7
 8003d32:	d900      	bls.n	8003d36 <__ssputs_r+0x72>
 8003d34:	463e      	mov	r6, r7
 8003d36:	6820      	ldr	r0, [r4, #0]
 8003d38:	4632      	mov	r2, r6
 8003d3a:	4641      	mov	r1, r8
 8003d3c:	f000 faa8 	bl	8004290 <memmove>
 8003d40:	68a3      	ldr	r3, [r4, #8]
 8003d42:	1b9b      	subs	r3, r3, r6
 8003d44:	60a3      	str	r3, [r4, #8]
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	4433      	add	r3, r6
 8003d4a:	6023      	str	r3, [r4, #0]
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d52:	462a      	mov	r2, r5
 8003d54:	f000 fad4 	bl	8004300 <_realloc_r>
 8003d58:	4606      	mov	r6, r0
 8003d5a:	2800      	cmp	r0, #0
 8003d5c:	d1e0      	bne.n	8003d20 <__ssputs_r+0x5c>
 8003d5e:	6921      	ldr	r1, [r4, #16]
 8003d60:	4650      	mov	r0, sl
 8003d62:	f7ff feb7 	bl	8003ad4 <_free_r>
 8003d66:	230c      	movs	r3, #12
 8003d68:	f8ca 3000 	str.w	r3, [sl]
 8003d6c:	89a3      	ldrh	r3, [r4, #12]
 8003d6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d72:	81a3      	strh	r3, [r4, #12]
 8003d74:	f04f 30ff 	mov.w	r0, #4294967295
 8003d78:	e7e9      	b.n	8003d4e <__ssputs_r+0x8a>
	...

08003d7c <_svfiprintf_r>:
 8003d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d80:	4698      	mov	r8, r3
 8003d82:	898b      	ldrh	r3, [r1, #12]
 8003d84:	061b      	lsls	r3, r3, #24
 8003d86:	b09d      	sub	sp, #116	@ 0x74
 8003d88:	4607      	mov	r7, r0
 8003d8a:	460d      	mov	r5, r1
 8003d8c:	4614      	mov	r4, r2
 8003d8e:	d510      	bpl.n	8003db2 <_svfiprintf_r+0x36>
 8003d90:	690b      	ldr	r3, [r1, #16]
 8003d92:	b973      	cbnz	r3, 8003db2 <_svfiprintf_r+0x36>
 8003d94:	2140      	movs	r1, #64	@ 0x40
 8003d96:	f7ff ff09 	bl	8003bac <_malloc_r>
 8003d9a:	6028      	str	r0, [r5, #0]
 8003d9c:	6128      	str	r0, [r5, #16]
 8003d9e:	b930      	cbnz	r0, 8003dae <_svfiprintf_r+0x32>
 8003da0:	230c      	movs	r3, #12
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	f04f 30ff 	mov.w	r0, #4294967295
 8003da8:	b01d      	add	sp, #116	@ 0x74
 8003daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dae:	2340      	movs	r3, #64	@ 0x40
 8003db0:	616b      	str	r3, [r5, #20]
 8003db2:	2300      	movs	r3, #0
 8003db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003db6:	2320      	movs	r3, #32
 8003db8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003dbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dc0:	2330      	movs	r3, #48	@ 0x30
 8003dc2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003f60 <_svfiprintf_r+0x1e4>
 8003dc6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003dca:	f04f 0901 	mov.w	r9, #1
 8003dce:	4623      	mov	r3, r4
 8003dd0:	469a      	mov	sl, r3
 8003dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dd6:	b10a      	cbz	r2, 8003ddc <_svfiprintf_r+0x60>
 8003dd8:	2a25      	cmp	r2, #37	@ 0x25
 8003dda:	d1f9      	bne.n	8003dd0 <_svfiprintf_r+0x54>
 8003ddc:	ebba 0b04 	subs.w	fp, sl, r4
 8003de0:	d00b      	beq.n	8003dfa <_svfiprintf_r+0x7e>
 8003de2:	465b      	mov	r3, fp
 8003de4:	4622      	mov	r2, r4
 8003de6:	4629      	mov	r1, r5
 8003de8:	4638      	mov	r0, r7
 8003dea:	f7ff ff6b 	bl	8003cc4 <__ssputs_r>
 8003dee:	3001      	adds	r0, #1
 8003df0:	f000 80a7 	beq.w	8003f42 <_svfiprintf_r+0x1c6>
 8003df4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003df6:	445a      	add	r2, fp
 8003df8:	9209      	str	r2, [sp, #36]	@ 0x24
 8003dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 809f 	beq.w	8003f42 <_svfiprintf_r+0x1c6>
 8003e04:	2300      	movs	r3, #0
 8003e06:	f04f 32ff 	mov.w	r2, #4294967295
 8003e0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e0e:	f10a 0a01 	add.w	sl, sl, #1
 8003e12:	9304      	str	r3, [sp, #16]
 8003e14:	9307      	str	r3, [sp, #28]
 8003e16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e1c:	4654      	mov	r4, sl
 8003e1e:	2205      	movs	r2, #5
 8003e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e24:	484e      	ldr	r0, [pc, #312]	@ (8003f60 <_svfiprintf_r+0x1e4>)
 8003e26:	f7fc fa13 	bl	8000250 <memchr>
 8003e2a:	9a04      	ldr	r2, [sp, #16]
 8003e2c:	b9d8      	cbnz	r0, 8003e66 <_svfiprintf_r+0xea>
 8003e2e:	06d0      	lsls	r0, r2, #27
 8003e30:	bf44      	itt	mi
 8003e32:	2320      	movmi	r3, #32
 8003e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e38:	0711      	lsls	r1, r2, #28
 8003e3a:	bf44      	itt	mi
 8003e3c:	232b      	movmi	r3, #43	@ 0x2b
 8003e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e42:	f89a 3000 	ldrb.w	r3, [sl]
 8003e46:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e48:	d015      	beq.n	8003e76 <_svfiprintf_r+0xfa>
 8003e4a:	9a07      	ldr	r2, [sp, #28]
 8003e4c:	4654      	mov	r4, sl
 8003e4e:	2000      	movs	r0, #0
 8003e50:	f04f 0c0a 	mov.w	ip, #10
 8003e54:	4621      	mov	r1, r4
 8003e56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e5a:	3b30      	subs	r3, #48	@ 0x30
 8003e5c:	2b09      	cmp	r3, #9
 8003e5e:	d94b      	bls.n	8003ef8 <_svfiprintf_r+0x17c>
 8003e60:	b1b0      	cbz	r0, 8003e90 <_svfiprintf_r+0x114>
 8003e62:	9207      	str	r2, [sp, #28]
 8003e64:	e014      	b.n	8003e90 <_svfiprintf_r+0x114>
 8003e66:	eba0 0308 	sub.w	r3, r0, r8
 8003e6a:	fa09 f303 	lsl.w	r3, r9, r3
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	9304      	str	r3, [sp, #16]
 8003e72:	46a2      	mov	sl, r4
 8003e74:	e7d2      	b.n	8003e1c <_svfiprintf_r+0xa0>
 8003e76:	9b03      	ldr	r3, [sp, #12]
 8003e78:	1d19      	adds	r1, r3, #4
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	9103      	str	r1, [sp, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bfbb      	ittet	lt
 8003e82:	425b      	neglt	r3, r3
 8003e84:	f042 0202 	orrlt.w	r2, r2, #2
 8003e88:	9307      	strge	r3, [sp, #28]
 8003e8a:	9307      	strlt	r3, [sp, #28]
 8003e8c:	bfb8      	it	lt
 8003e8e:	9204      	strlt	r2, [sp, #16]
 8003e90:	7823      	ldrb	r3, [r4, #0]
 8003e92:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e94:	d10a      	bne.n	8003eac <_svfiprintf_r+0x130>
 8003e96:	7863      	ldrb	r3, [r4, #1]
 8003e98:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e9a:	d132      	bne.n	8003f02 <_svfiprintf_r+0x186>
 8003e9c:	9b03      	ldr	r3, [sp, #12]
 8003e9e:	1d1a      	adds	r2, r3, #4
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	9203      	str	r2, [sp, #12]
 8003ea4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ea8:	3402      	adds	r4, #2
 8003eaa:	9305      	str	r3, [sp, #20]
 8003eac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003f70 <_svfiprintf_r+0x1f4>
 8003eb0:	7821      	ldrb	r1, [r4, #0]
 8003eb2:	2203      	movs	r2, #3
 8003eb4:	4650      	mov	r0, sl
 8003eb6:	f7fc f9cb 	bl	8000250 <memchr>
 8003eba:	b138      	cbz	r0, 8003ecc <_svfiprintf_r+0x150>
 8003ebc:	9b04      	ldr	r3, [sp, #16]
 8003ebe:	eba0 000a 	sub.w	r0, r0, sl
 8003ec2:	2240      	movs	r2, #64	@ 0x40
 8003ec4:	4082      	lsls	r2, r0
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	3401      	adds	r4, #1
 8003eca:	9304      	str	r3, [sp, #16]
 8003ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ed0:	4824      	ldr	r0, [pc, #144]	@ (8003f64 <_svfiprintf_r+0x1e8>)
 8003ed2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ed6:	2206      	movs	r2, #6
 8003ed8:	f7fc f9ba 	bl	8000250 <memchr>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	d036      	beq.n	8003f4e <_svfiprintf_r+0x1d2>
 8003ee0:	4b21      	ldr	r3, [pc, #132]	@ (8003f68 <_svfiprintf_r+0x1ec>)
 8003ee2:	bb1b      	cbnz	r3, 8003f2c <_svfiprintf_r+0x1b0>
 8003ee4:	9b03      	ldr	r3, [sp, #12]
 8003ee6:	3307      	adds	r3, #7
 8003ee8:	f023 0307 	bic.w	r3, r3, #7
 8003eec:	3308      	adds	r3, #8
 8003eee:	9303      	str	r3, [sp, #12]
 8003ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ef2:	4433      	add	r3, r6
 8003ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ef6:	e76a      	b.n	8003dce <_svfiprintf_r+0x52>
 8003ef8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003efc:	460c      	mov	r4, r1
 8003efe:	2001      	movs	r0, #1
 8003f00:	e7a8      	b.n	8003e54 <_svfiprintf_r+0xd8>
 8003f02:	2300      	movs	r3, #0
 8003f04:	3401      	adds	r4, #1
 8003f06:	9305      	str	r3, [sp, #20]
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f04f 0c0a 	mov.w	ip, #10
 8003f0e:	4620      	mov	r0, r4
 8003f10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f14:	3a30      	subs	r2, #48	@ 0x30
 8003f16:	2a09      	cmp	r2, #9
 8003f18:	d903      	bls.n	8003f22 <_svfiprintf_r+0x1a6>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0c6      	beq.n	8003eac <_svfiprintf_r+0x130>
 8003f1e:	9105      	str	r1, [sp, #20]
 8003f20:	e7c4      	b.n	8003eac <_svfiprintf_r+0x130>
 8003f22:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f26:	4604      	mov	r4, r0
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e7f0      	b.n	8003f0e <_svfiprintf_r+0x192>
 8003f2c:	ab03      	add	r3, sp, #12
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	462a      	mov	r2, r5
 8003f32:	4b0e      	ldr	r3, [pc, #56]	@ (8003f6c <_svfiprintf_r+0x1f0>)
 8003f34:	a904      	add	r1, sp, #16
 8003f36:	4638      	mov	r0, r7
 8003f38:	f3af 8000 	nop.w
 8003f3c:	1c42      	adds	r2, r0, #1
 8003f3e:	4606      	mov	r6, r0
 8003f40:	d1d6      	bne.n	8003ef0 <_svfiprintf_r+0x174>
 8003f42:	89ab      	ldrh	r3, [r5, #12]
 8003f44:	065b      	lsls	r3, r3, #25
 8003f46:	f53f af2d 	bmi.w	8003da4 <_svfiprintf_r+0x28>
 8003f4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f4c:	e72c      	b.n	8003da8 <_svfiprintf_r+0x2c>
 8003f4e:	ab03      	add	r3, sp, #12
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	462a      	mov	r2, r5
 8003f54:	4b05      	ldr	r3, [pc, #20]	@ (8003f6c <_svfiprintf_r+0x1f0>)
 8003f56:	a904      	add	r1, sp, #16
 8003f58:	4638      	mov	r0, r7
 8003f5a:	f000 f879 	bl	8004050 <_printf_i>
 8003f5e:	e7ed      	b.n	8003f3c <_svfiprintf_r+0x1c0>
 8003f60:	080043ac 	.word	0x080043ac
 8003f64:	080043b6 	.word	0x080043b6
 8003f68:	00000000 	.word	0x00000000
 8003f6c:	08003cc5 	.word	0x08003cc5
 8003f70:	080043b2 	.word	0x080043b2

08003f74 <_printf_common>:
 8003f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f78:	4616      	mov	r6, r2
 8003f7a:	4698      	mov	r8, r3
 8003f7c:	688a      	ldr	r2, [r1, #8]
 8003f7e:	690b      	ldr	r3, [r1, #16]
 8003f80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f84:	4293      	cmp	r3, r2
 8003f86:	bfb8      	it	lt
 8003f88:	4613      	movlt	r3, r2
 8003f8a:	6033      	str	r3, [r6, #0]
 8003f8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f90:	4607      	mov	r7, r0
 8003f92:	460c      	mov	r4, r1
 8003f94:	b10a      	cbz	r2, 8003f9a <_printf_common+0x26>
 8003f96:	3301      	adds	r3, #1
 8003f98:	6033      	str	r3, [r6, #0]
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	0699      	lsls	r1, r3, #26
 8003f9e:	bf42      	ittt	mi
 8003fa0:	6833      	ldrmi	r3, [r6, #0]
 8003fa2:	3302      	addmi	r3, #2
 8003fa4:	6033      	strmi	r3, [r6, #0]
 8003fa6:	6825      	ldr	r5, [r4, #0]
 8003fa8:	f015 0506 	ands.w	r5, r5, #6
 8003fac:	d106      	bne.n	8003fbc <_printf_common+0x48>
 8003fae:	f104 0a19 	add.w	sl, r4, #25
 8003fb2:	68e3      	ldr	r3, [r4, #12]
 8003fb4:	6832      	ldr	r2, [r6, #0]
 8003fb6:	1a9b      	subs	r3, r3, r2
 8003fb8:	42ab      	cmp	r3, r5
 8003fba:	dc26      	bgt.n	800400a <_printf_common+0x96>
 8003fbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003fc0:	6822      	ldr	r2, [r4, #0]
 8003fc2:	3b00      	subs	r3, #0
 8003fc4:	bf18      	it	ne
 8003fc6:	2301      	movne	r3, #1
 8003fc8:	0692      	lsls	r2, r2, #26
 8003fca:	d42b      	bmi.n	8004024 <_printf_common+0xb0>
 8003fcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003fd0:	4641      	mov	r1, r8
 8003fd2:	4638      	mov	r0, r7
 8003fd4:	47c8      	blx	r9
 8003fd6:	3001      	adds	r0, #1
 8003fd8:	d01e      	beq.n	8004018 <_printf_common+0xa4>
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	6922      	ldr	r2, [r4, #16]
 8003fde:	f003 0306 	and.w	r3, r3, #6
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	bf02      	ittt	eq
 8003fe6:	68e5      	ldreq	r5, [r4, #12]
 8003fe8:	6833      	ldreq	r3, [r6, #0]
 8003fea:	1aed      	subeq	r5, r5, r3
 8003fec:	68a3      	ldr	r3, [r4, #8]
 8003fee:	bf0c      	ite	eq
 8003ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ff4:	2500      	movne	r5, #0
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	bfc4      	itt	gt
 8003ffa:	1a9b      	subgt	r3, r3, r2
 8003ffc:	18ed      	addgt	r5, r5, r3
 8003ffe:	2600      	movs	r6, #0
 8004000:	341a      	adds	r4, #26
 8004002:	42b5      	cmp	r5, r6
 8004004:	d11a      	bne.n	800403c <_printf_common+0xc8>
 8004006:	2000      	movs	r0, #0
 8004008:	e008      	b.n	800401c <_printf_common+0xa8>
 800400a:	2301      	movs	r3, #1
 800400c:	4652      	mov	r2, sl
 800400e:	4641      	mov	r1, r8
 8004010:	4638      	mov	r0, r7
 8004012:	47c8      	blx	r9
 8004014:	3001      	adds	r0, #1
 8004016:	d103      	bne.n	8004020 <_printf_common+0xac>
 8004018:	f04f 30ff 	mov.w	r0, #4294967295
 800401c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004020:	3501      	adds	r5, #1
 8004022:	e7c6      	b.n	8003fb2 <_printf_common+0x3e>
 8004024:	18e1      	adds	r1, r4, r3
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	2030      	movs	r0, #48	@ 0x30
 800402a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800402e:	4422      	add	r2, r4
 8004030:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004034:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004038:	3302      	adds	r3, #2
 800403a:	e7c7      	b.n	8003fcc <_printf_common+0x58>
 800403c:	2301      	movs	r3, #1
 800403e:	4622      	mov	r2, r4
 8004040:	4641      	mov	r1, r8
 8004042:	4638      	mov	r0, r7
 8004044:	47c8      	blx	r9
 8004046:	3001      	adds	r0, #1
 8004048:	d0e6      	beq.n	8004018 <_printf_common+0xa4>
 800404a:	3601      	adds	r6, #1
 800404c:	e7d9      	b.n	8004002 <_printf_common+0x8e>
	...

08004050 <_printf_i>:
 8004050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004054:	7e0f      	ldrb	r7, [r1, #24]
 8004056:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004058:	2f78      	cmp	r7, #120	@ 0x78
 800405a:	4691      	mov	r9, r2
 800405c:	4680      	mov	r8, r0
 800405e:	460c      	mov	r4, r1
 8004060:	469a      	mov	sl, r3
 8004062:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004066:	d807      	bhi.n	8004078 <_printf_i+0x28>
 8004068:	2f62      	cmp	r7, #98	@ 0x62
 800406a:	d80a      	bhi.n	8004082 <_printf_i+0x32>
 800406c:	2f00      	cmp	r7, #0
 800406e:	f000 80d2 	beq.w	8004216 <_printf_i+0x1c6>
 8004072:	2f58      	cmp	r7, #88	@ 0x58
 8004074:	f000 80b9 	beq.w	80041ea <_printf_i+0x19a>
 8004078:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800407c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004080:	e03a      	b.n	80040f8 <_printf_i+0xa8>
 8004082:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004086:	2b15      	cmp	r3, #21
 8004088:	d8f6      	bhi.n	8004078 <_printf_i+0x28>
 800408a:	a101      	add	r1, pc, #4	@ (adr r1, 8004090 <_printf_i+0x40>)
 800408c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004090:	080040e9 	.word	0x080040e9
 8004094:	080040fd 	.word	0x080040fd
 8004098:	08004079 	.word	0x08004079
 800409c:	08004079 	.word	0x08004079
 80040a0:	08004079 	.word	0x08004079
 80040a4:	08004079 	.word	0x08004079
 80040a8:	080040fd 	.word	0x080040fd
 80040ac:	08004079 	.word	0x08004079
 80040b0:	08004079 	.word	0x08004079
 80040b4:	08004079 	.word	0x08004079
 80040b8:	08004079 	.word	0x08004079
 80040bc:	080041fd 	.word	0x080041fd
 80040c0:	08004127 	.word	0x08004127
 80040c4:	080041b7 	.word	0x080041b7
 80040c8:	08004079 	.word	0x08004079
 80040cc:	08004079 	.word	0x08004079
 80040d0:	0800421f 	.word	0x0800421f
 80040d4:	08004079 	.word	0x08004079
 80040d8:	08004127 	.word	0x08004127
 80040dc:	08004079 	.word	0x08004079
 80040e0:	08004079 	.word	0x08004079
 80040e4:	080041bf 	.word	0x080041bf
 80040e8:	6833      	ldr	r3, [r6, #0]
 80040ea:	1d1a      	adds	r2, r3, #4
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6032      	str	r2, [r6, #0]
 80040f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80040f8:	2301      	movs	r3, #1
 80040fa:	e09d      	b.n	8004238 <_printf_i+0x1e8>
 80040fc:	6833      	ldr	r3, [r6, #0]
 80040fe:	6820      	ldr	r0, [r4, #0]
 8004100:	1d19      	adds	r1, r3, #4
 8004102:	6031      	str	r1, [r6, #0]
 8004104:	0606      	lsls	r6, r0, #24
 8004106:	d501      	bpl.n	800410c <_printf_i+0xbc>
 8004108:	681d      	ldr	r5, [r3, #0]
 800410a:	e003      	b.n	8004114 <_printf_i+0xc4>
 800410c:	0645      	lsls	r5, r0, #25
 800410e:	d5fb      	bpl.n	8004108 <_printf_i+0xb8>
 8004110:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004114:	2d00      	cmp	r5, #0
 8004116:	da03      	bge.n	8004120 <_printf_i+0xd0>
 8004118:	232d      	movs	r3, #45	@ 0x2d
 800411a:	426d      	negs	r5, r5
 800411c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004120:	4859      	ldr	r0, [pc, #356]	@ (8004288 <_printf_i+0x238>)
 8004122:	230a      	movs	r3, #10
 8004124:	e011      	b.n	800414a <_printf_i+0xfa>
 8004126:	6821      	ldr	r1, [r4, #0]
 8004128:	6833      	ldr	r3, [r6, #0]
 800412a:	0608      	lsls	r0, r1, #24
 800412c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004130:	d402      	bmi.n	8004138 <_printf_i+0xe8>
 8004132:	0649      	lsls	r1, r1, #25
 8004134:	bf48      	it	mi
 8004136:	b2ad      	uxthmi	r5, r5
 8004138:	2f6f      	cmp	r7, #111	@ 0x6f
 800413a:	4853      	ldr	r0, [pc, #332]	@ (8004288 <_printf_i+0x238>)
 800413c:	6033      	str	r3, [r6, #0]
 800413e:	bf14      	ite	ne
 8004140:	230a      	movne	r3, #10
 8004142:	2308      	moveq	r3, #8
 8004144:	2100      	movs	r1, #0
 8004146:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800414a:	6866      	ldr	r6, [r4, #4]
 800414c:	60a6      	str	r6, [r4, #8]
 800414e:	2e00      	cmp	r6, #0
 8004150:	bfa2      	ittt	ge
 8004152:	6821      	ldrge	r1, [r4, #0]
 8004154:	f021 0104 	bicge.w	r1, r1, #4
 8004158:	6021      	strge	r1, [r4, #0]
 800415a:	b90d      	cbnz	r5, 8004160 <_printf_i+0x110>
 800415c:	2e00      	cmp	r6, #0
 800415e:	d04b      	beq.n	80041f8 <_printf_i+0x1a8>
 8004160:	4616      	mov	r6, r2
 8004162:	fbb5 f1f3 	udiv	r1, r5, r3
 8004166:	fb03 5711 	mls	r7, r3, r1, r5
 800416a:	5dc7      	ldrb	r7, [r0, r7]
 800416c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004170:	462f      	mov	r7, r5
 8004172:	42bb      	cmp	r3, r7
 8004174:	460d      	mov	r5, r1
 8004176:	d9f4      	bls.n	8004162 <_printf_i+0x112>
 8004178:	2b08      	cmp	r3, #8
 800417a:	d10b      	bne.n	8004194 <_printf_i+0x144>
 800417c:	6823      	ldr	r3, [r4, #0]
 800417e:	07df      	lsls	r7, r3, #31
 8004180:	d508      	bpl.n	8004194 <_printf_i+0x144>
 8004182:	6923      	ldr	r3, [r4, #16]
 8004184:	6861      	ldr	r1, [r4, #4]
 8004186:	4299      	cmp	r1, r3
 8004188:	bfde      	ittt	le
 800418a:	2330      	movle	r3, #48	@ 0x30
 800418c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004190:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004194:	1b92      	subs	r2, r2, r6
 8004196:	6122      	str	r2, [r4, #16]
 8004198:	f8cd a000 	str.w	sl, [sp]
 800419c:	464b      	mov	r3, r9
 800419e:	aa03      	add	r2, sp, #12
 80041a0:	4621      	mov	r1, r4
 80041a2:	4640      	mov	r0, r8
 80041a4:	f7ff fee6 	bl	8003f74 <_printf_common>
 80041a8:	3001      	adds	r0, #1
 80041aa:	d14a      	bne.n	8004242 <_printf_i+0x1f2>
 80041ac:	f04f 30ff 	mov.w	r0, #4294967295
 80041b0:	b004      	add	sp, #16
 80041b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	f043 0320 	orr.w	r3, r3, #32
 80041bc:	6023      	str	r3, [r4, #0]
 80041be:	4833      	ldr	r0, [pc, #204]	@ (800428c <_printf_i+0x23c>)
 80041c0:	2778      	movs	r7, #120	@ 0x78
 80041c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041c6:	6823      	ldr	r3, [r4, #0]
 80041c8:	6831      	ldr	r1, [r6, #0]
 80041ca:	061f      	lsls	r7, r3, #24
 80041cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80041d0:	d402      	bmi.n	80041d8 <_printf_i+0x188>
 80041d2:	065f      	lsls	r7, r3, #25
 80041d4:	bf48      	it	mi
 80041d6:	b2ad      	uxthmi	r5, r5
 80041d8:	6031      	str	r1, [r6, #0]
 80041da:	07d9      	lsls	r1, r3, #31
 80041dc:	bf44      	itt	mi
 80041de:	f043 0320 	orrmi.w	r3, r3, #32
 80041e2:	6023      	strmi	r3, [r4, #0]
 80041e4:	b11d      	cbz	r5, 80041ee <_printf_i+0x19e>
 80041e6:	2310      	movs	r3, #16
 80041e8:	e7ac      	b.n	8004144 <_printf_i+0xf4>
 80041ea:	4827      	ldr	r0, [pc, #156]	@ (8004288 <_printf_i+0x238>)
 80041ec:	e7e9      	b.n	80041c2 <_printf_i+0x172>
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	f023 0320 	bic.w	r3, r3, #32
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	e7f6      	b.n	80041e6 <_printf_i+0x196>
 80041f8:	4616      	mov	r6, r2
 80041fa:	e7bd      	b.n	8004178 <_printf_i+0x128>
 80041fc:	6833      	ldr	r3, [r6, #0]
 80041fe:	6825      	ldr	r5, [r4, #0]
 8004200:	6961      	ldr	r1, [r4, #20]
 8004202:	1d18      	adds	r0, r3, #4
 8004204:	6030      	str	r0, [r6, #0]
 8004206:	062e      	lsls	r6, r5, #24
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	d501      	bpl.n	8004210 <_printf_i+0x1c0>
 800420c:	6019      	str	r1, [r3, #0]
 800420e:	e002      	b.n	8004216 <_printf_i+0x1c6>
 8004210:	0668      	lsls	r0, r5, #25
 8004212:	d5fb      	bpl.n	800420c <_printf_i+0x1bc>
 8004214:	8019      	strh	r1, [r3, #0]
 8004216:	2300      	movs	r3, #0
 8004218:	6123      	str	r3, [r4, #16]
 800421a:	4616      	mov	r6, r2
 800421c:	e7bc      	b.n	8004198 <_printf_i+0x148>
 800421e:	6833      	ldr	r3, [r6, #0]
 8004220:	1d1a      	adds	r2, r3, #4
 8004222:	6032      	str	r2, [r6, #0]
 8004224:	681e      	ldr	r6, [r3, #0]
 8004226:	6862      	ldr	r2, [r4, #4]
 8004228:	2100      	movs	r1, #0
 800422a:	4630      	mov	r0, r6
 800422c:	f7fc f810 	bl	8000250 <memchr>
 8004230:	b108      	cbz	r0, 8004236 <_printf_i+0x1e6>
 8004232:	1b80      	subs	r0, r0, r6
 8004234:	6060      	str	r0, [r4, #4]
 8004236:	6863      	ldr	r3, [r4, #4]
 8004238:	6123      	str	r3, [r4, #16]
 800423a:	2300      	movs	r3, #0
 800423c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004240:	e7aa      	b.n	8004198 <_printf_i+0x148>
 8004242:	6923      	ldr	r3, [r4, #16]
 8004244:	4632      	mov	r2, r6
 8004246:	4649      	mov	r1, r9
 8004248:	4640      	mov	r0, r8
 800424a:	47d0      	blx	sl
 800424c:	3001      	adds	r0, #1
 800424e:	d0ad      	beq.n	80041ac <_printf_i+0x15c>
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	079b      	lsls	r3, r3, #30
 8004254:	d413      	bmi.n	800427e <_printf_i+0x22e>
 8004256:	68e0      	ldr	r0, [r4, #12]
 8004258:	9b03      	ldr	r3, [sp, #12]
 800425a:	4298      	cmp	r0, r3
 800425c:	bfb8      	it	lt
 800425e:	4618      	movlt	r0, r3
 8004260:	e7a6      	b.n	80041b0 <_printf_i+0x160>
 8004262:	2301      	movs	r3, #1
 8004264:	4632      	mov	r2, r6
 8004266:	4649      	mov	r1, r9
 8004268:	4640      	mov	r0, r8
 800426a:	47d0      	blx	sl
 800426c:	3001      	adds	r0, #1
 800426e:	d09d      	beq.n	80041ac <_printf_i+0x15c>
 8004270:	3501      	adds	r5, #1
 8004272:	68e3      	ldr	r3, [r4, #12]
 8004274:	9903      	ldr	r1, [sp, #12]
 8004276:	1a5b      	subs	r3, r3, r1
 8004278:	42ab      	cmp	r3, r5
 800427a:	dcf2      	bgt.n	8004262 <_printf_i+0x212>
 800427c:	e7eb      	b.n	8004256 <_printf_i+0x206>
 800427e:	2500      	movs	r5, #0
 8004280:	f104 0619 	add.w	r6, r4, #25
 8004284:	e7f5      	b.n	8004272 <_printf_i+0x222>
 8004286:	bf00      	nop
 8004288:	080043bd 	.word	0x080043bd
 800428c:	080043ce 	.word	0x080043ce

08004290 <memmove>:
 8004290:	4288      	cmp	r0, r1
 8004292:	b510      	push	{r4, lr}
 8004294:	eb01 0402 	add.w	r4, r1, r2
 8004298:	d902      	bls.n	80042a0 <memmove+0x10>
 800429a:	4284      	cmp	r4, r0
 800429c:	4623      	mov	r3, r4
 800429e:	d807      	bhi.n	80042b0 <memmove+0x20>
 80042a0:	1e43      	subs	r3, r0, #1
 80042a2:	42a1      	cmp	r1, r4
 80042a4:	d008      	beq.n	80042b8 <memmove+0x28>
 80042a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042ae:	e7f8      	b.n	80042a2 <memmove+0x12>
 80042b0:	4402      	add	r2, r0
 80042b2:	4601      	mov	r1, r0
 80042b4:	428a      	cmp	r2, r1
 80042b6:	d100      	bne.n	80042ba <memmove+0x2a>
 80042b8:	bd10      	pop	{r4, pc}
 80042ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042c2:	e7f7      	b.n	80042b4 <memmove+0x24>

080042c4 <_sbrk_r>:
 80042c4:	b538      	push	{r3, r4, r5, lr}
 80042c6:	4d06      	ldr	r5, [pc, #24]	@ (80042e0 <_sbrk_r+0x1c>)
 80042c8:	2300      	movs	r3, #0
 80042ca:	4604      	mov	r4, r0
 80042cc:	4608      	mov	r0, r1
 80042ce:	602b      	str	r3, [r5, #0]
 80042d0:	f7fc fb0c 	bl	80008ec <_sbrk>
 80042d4:	1c43      	adds	r3, r0, #1
 80042d6:	d102      	bne.n	80042de <_sbrk_r+0x1a>
 80042d8:	682b      	ldr	r3, [r5, #0]
 80042da:	b103      	cbz	r3, 80042de <_sbrk_r+0x1a>
 80042dc:	6023      	str	r3, [r4, #0]
 80042de:	bd38      	pop	{r3, r4, r5, pc}
 80042e0:	200002e8 	.word	0x200002e8

080042e4 <memcpy>:
 80042e4:	440a      	add	r2, r1
 80042e6:	4291      	cmp	r1, r2
 80042e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80042ec:	d100      	bne.n	80042f0 <memcpy+0xc>
 80042ee:	4770      	bx	lr
 80042f0:	b510      	push	{r4, lr}
 80042f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042fa:	4291      	cmp	r1, r2
 80042fc:	d1f9      	bne.n	80042f2 <memcpy+0xe>
 80042fe:	bd10      	pop	{r4, pc}

08004300 <_realloc_r>:
 8004300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004304:	4680      	mov	r8, r0
 8004306:	4615      	mov	r5, r2
 8004308:	460c      	mov	r4, r1
 800430a:	b921      	cbnz	r1, 8004316 <_realloc_r+0x16>
 800430c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004310:	4611      	mov	r1, r2
 8004312:	f7ff bc4b 	b.w	8003bac <_malloc_r>
 8004316:	b92a      	cbnz	r2, 8004324 <_realloc_r+0x24>
 8004318:	f7ff fbdc 	bl	8003ad4 <_free_r>
 800431c:	2400      	movs	r4, #0
 800431e:	4620      	mov	r0, r4
 8004320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004324:	f000 f81a 	bl	800435c <_malloc_usable_size_r>
 8004328:	4285      	cmp	r5, r0
 800432a:	4606      	mov	r6, r0
 800432c:	d802      	bhi.n	8004334 <_realloc_r+0x34>
 800432e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004332:	d8f4      	bhi.n	800431e <_realloc_r+0x1e>
 8004334:	4629      	mov	r1, r5
 8004336:	4640      	mov	r0, r8
 8004338:	f7ff fc38 	bl	8003bac <_malloc_r>
 800433c:	4607      	mov	r7, r0
 800433e:	2800      	cmp	r0, #0
 8004340:	d0ec      	beq.n	800431c <_realloc_r+0x1c>
 8004342:	42b5      	cmp	r5, r6
 8004344:	462a      	mov	r2, r5
 8004346:	4621      	mov	r1, r4
 8004348:	bf28      	it	cs
 800434a:	4632      	movcs	r2, r6
 800434c:	f7ff ffca 	bl	80042e4 <memcpy>
 8004350:	4621      	mov	r1, r4
 8004352:	4640      	mov	r0, r8
 8004354:	f7ff fbbe 	bl	8003ad4 <_free_r>
 8004358:	463c      	mov	r4, r7
 800435a:	e7e0      	b.n	800431e <_realloc_r+0x1e>

0800435c <_malloc_usable_size_r>:
 800435c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004360:	1f18      	subs	r0, r3, #4
 8004362:	2b00      	cmp	r3, #0
 8004364:	bfbc      	itt	lt
 8004366:	580b      	ldrlt	r3, [r1, r0]
 8004368:	18c0      	addlt	r0, r0, r3
 800436a:	4770      	bx	lr

0800436c <_init>:
 800436c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436e:	bf00      	nop
 8004370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004372:	bc08      	pop	{r3}
 8004374:	469e      	mov	lr, r3
 8004376:	4770      	bx	lr

08004378 <_fini>:
 8004378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437a:	bf00      	nop
 800437c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800437e:	bc08      	pop	{r3}
 8004380:	469e      	mov	lr, r3
 8004382:	4770      	bx	lr
