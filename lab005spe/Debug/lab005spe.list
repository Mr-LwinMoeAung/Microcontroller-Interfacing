
lab005spe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e64  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004064  08004064  00005064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040cc  080040cc  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080040cc  080040cc  000050cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040d4  080040d4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040d4  080040d4  000050d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040d8  080040d8  000050d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080040dc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  2000005c  08004138  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08004138  00006314  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbb3  00000000  00000000  0000608a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204a  00000000  00000000  00011c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  00013c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006be  00000000  00000000  00014570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027db1  00000000  00000000  00014c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd5c  00000000  00000000  0003c9df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f665b  00000000  00000000  0004a73b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00140d96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000277c  00000000  00000000  00140ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00143558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800404c 	.word	0x0800404c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	0800404c 	.word	0x0800404c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005f2:	4b21      	ldr	r3, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x98>)
 80005f4:	4a21      	ldr	r2, [pc, #132]	@ (800067c <MX_ADC1_Init+0x9c>)
 80005f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000678 <MX_ADC1_Init+0x98>)
 80005fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000600:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000606:	4b1c      	ldr	r3, [pc, #112]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800060c:	4b1a      	ldr	r3, [pc, #104]	@ (8000678 <MX_ADC1_Init+0x98>)
 800060e:	2201      	movs	r2, #1
 8000610:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000612:	4b19      	ldr	r3, [pc, #100]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061a:	4b17      	ldr	r3, [pc, #92]	@ (8000678 <MX_ADC1_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000620:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000622:	4a17      	ldr	r2, [pc, #92]	@ (8000680 <MX_ADC1_Init+0xa0>)
 8000624:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000626:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800062c:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <MX_ADC1_Init+0x98>)
 800062e:	2201      	movs	r2, #1
 8000630:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000632:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000634:	2201      	movs	r2, #1
 8000636:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800063a:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000640:	480d      	ldr	r0, [pc, #52]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000642:	f000 fb6b 	bl	8000d1c <HAL_ADC_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800064c:	f000 f9a5 	bl	800099a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000650:	2303      	movs	r3, #3
 8000652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000654:	2301      	movs	r3, #1
 8000656:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	4619      	mov	r1, r3
 8000660:	4805      	ldr	r0, [pc, #20]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000662:	f000 fca3 	bl	8000fac <HAL_ADC_ConfigChannel>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800066c:	f000 f995 	bl	800099a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000078 	.word	0x20000078
 800067c:	40012000 	.word	0x40012000
 8000680:	0f000001 	.word	0x0f000001

08000684 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	@ 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a39      	ldr	r2, [pc, #228]	@ (8000788 <HAL_ADC_MspInit+0x104>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d16b      	bne.n	800077e <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a6:	4b39      	ldr	r3, [pc, #228]	@ (800078c <HAL_ADC_MspInit+0x108>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006aa:	4a38      	ldr	r2, [pc, #224]	@ (800078c <HAL_ADC_MspInit+0x108>)
 80006ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80006b2:	4b36      	ldr	r3, [pc, #216]	@ (800078c <HAL_ADC_MspInit+0x108>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b33      	ldr	r3, [pc, #204]	@ (800078c <HAL_ADC_MspInit+0x108>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a32      	ldr	r2, [pc, #200]	@ (800078c <HAL_ADC_MspInit+0x108>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b30      	ldr	r3, [pc, #192]	@ (800078c <HAL_ADC_MspInit+0x108>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b2d      	ldr	r3, [pc, #180]	@ (800078c <HAL_ADC_MspInit+0x108>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a2c      	ldr	r2, [pc, #176]	@ (800078c <HAL_ADC_MspInit+0x108>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b2a      	ldr	r3, [pc, #168]	@ (800078c <HAL_ADC_MspInit+0x108>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80006ee:	230d      	movs	r3, #13
 80006f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f2:	2303      	movs	r3, #3
 80006f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	4619      	mov	r1, r3
 8000700:	4823      	ldr	r0, [pc, #140]	@ (8000790 <HAL_ADC_MspInit+0x10c>)
 8000702:	f001 fbaf 	bl	8001e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000706:	23e8      	movs	r3, #232	@ 0xe8
 8000708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800070a:	2303      	movs	r3, #3
 800070c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	481e      	ldr	r0, [pc, #120]	@ (8000794 <HAL_ADC_MspInit+0x110>)
 800071a:	f001 fba3 	bl	8001e64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800071e:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <HAL_ADC_MspInit+0x114>)
 8000720:	4a1e      	ldr	r2, [pc, #120]	@ (800079c <HAL_ADC_MspInit+0x118>)
 8000722:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000724:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <HAL_ADC_MspInit+0x114>)
 8000726:	2200      	movs	r2, #0
 8000728:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800072a:	4b1b      	ldr	r3, [pc, #108]	@ (8000798 <HAL_ADC_MspInit+0x114>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000730:	4b19      	ldr	r3, [pc, #100]	@ (8000798 <HAL_ADC_MspInit+0x114>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000736:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <HAL_ADC_MspInit+0x114>)
 8000738:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800073c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800073e:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <HAL_ADC_MspInit+0x114>)
 8000740:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000744:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000746:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <HAL_ADC_MspInit+0x114>)
 8000748:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800074c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800074e:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <HAL_ADC_MspInit+0x114>)
 8000750:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000754:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000756:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <HAL_ADC_MspInit+0x114>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800075c:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <HAL_ADC_MspInit+0x114>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000762:	480d      	ldr	r0, [pc, #52]	@ (8000798 <HAL_ADC_MspInit+0x114>)
 8000764:	f001 f806 	bl	8001774 <HAL_DMA_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 800076e:	f000 f914 	bl	800099a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4a08      	ldr	r2, [pc, #32]	@ (8000798 <HAL_ADC_MspInit+0x114>)
 8000776:	639a      	str	r2, [r3, #56]	@ 0x38
 8000778:	4a07      	ldr	r2, [pc, #28]	@ (8000798 <HAL_ADC_MspInit+0x114>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800077e:	bf00      	nop
 8000780:	3728      	adds	r7, #40	@ 0x28
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40012000 	.word	0x40012000
 800078c:	40023800 	.word	0x40023800
 8000790:	40020800 	.word	0x40020800
 8000794:	40020000 	.word	0x40020000
 8000798:	200000c0 	.word	0x200000c0
 800079c:	40026410 	.word	0x40026410

080007a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007a6:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <MX_DMA_Init+0x38>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a0b      	ldr	r2, [pc, #44]	@ (80007d8 <MX_DMA_Init+0x38>)
 80007ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MX_DMA_Init+0x38>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	2038      	movs	r0, #56	@ 0x38
 80007c4:	f000 ff9f 	bl	8001706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007c8:	2038      	movs	r0, #56	@ 0x38
 80007ca:	f000 ffb8 	bl	800173e <HAL_NVIC_EnableIRQ>

}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	@ 0x28
 80007e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007f2:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <MX_GPIO_Init+0xa4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a22      	ldr	r2, [pc, #136]	@ (8000880 <MX_GPIO_Init+0xa4>)
 80007f8:	f043 0320 	orr.w	r3, r3, #32
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b20      	ldr	r3, [pc, #128]	@ (8000880 <MX_GPIO_Init+0xa4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0320 	and.w	r3, r3, #32
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	4b1d      	ldr	r3, [pc, #116]	@ (8000880 <MX_GPIO_Init+0xa4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a1c      	ldr	r2, [pc, #112]	@ (8000880 <MX_GPIO_Init+0xa4>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <MX_GPIO_Init+0xa4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <MX_GPIO_Init+0xa4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a16      	ldr	r2, [pc, #88]	@ (8000880 <MX_GPIO_Init+0xa4>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_GPIO_Init+0xa4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_GPIO_Init+0xa4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a10      	ldr	r2, [pc, #64]	@ (8000880 <MX_GPIO_Init+0xa4>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <MX_GPIO_Init+0xa4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2103      	movs	r1, #3
 8000856:	480b      	ldr	r0, [pc, #44]	@ (8000884 <MX_GPIO_Init+0xa8>)
 8000858:	f001 fcb0 	bl	80021bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800085c:	2303      	movs	r3, #3
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	4804      	ldr	r0, [pc, #16]	@ (8000884 <MX_GPIO_Init+0xa8>)
 8000874:	f001 faf6 	bl	8001e64 <HAL_GPIO_Init>

}
 8000878:	bf00      	nop
 800087a:	3728      	adds	r7, #40	@ 0x28
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	40021400 	.word	0x40021400

08000888 <HAL_ADC_ConvHalfCpltCallback>:
void MX_ADC1_Init(void);
void MX_USART3_UART_Init(void);

/* Private user code ---------------------------------------------------------*/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a05      	ldr	r2, [pc, #20]	@ (80008ac <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d104      	bne.n	80008a4 <HAL_ADC_ConvHalfCpltCallback+0x1c>
    {
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET); // Turn on LED on PF0
 800089a:	2201      	movs	r2, #1
 800089c:	2101      	movs	r1, #1
 800089e:	4804      	ldr	r0, [pc, #16]	@ (80008b0 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 80008a0:	f001 fc8c 	bl	80021bc <HAL_GPIO_WritePin>
    }
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40012000 	.word	0x40012000
 80008b0:	40021400 	.word	0x40021400

080008b4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80008b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008b6:	b099      	sub	sp, #100	@ 0x64
 80008b8:	af06      	add	r7, sp, #24
 80008ba:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a20      	ldr	r2, [pc, #128]	@ (8000944 <HAL_ADC_ConvCpltCallback+0x90>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d139      	bne.n	800093a <HAL_ADC_ConvCpltCallback+0x86>
    {
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET); // Turn off LED on PF0
 80008c6:	2200      	movs	r2, #0
 80008c8:	2101      	movs	r1, #1
 80008ca:	481f      	ldr	r0, [pc, #124]	@ (8000948 <HAL_ADC_ConvCpltCallback+0x94>)
 80008cc:	f001 fc76 	bl	80021bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);   // Turn on LED on PF1
 80008d0:	2201      	movs	r2, #1
 80008d2:	2102      	movs	r1, #2
 80008d4:	481c      	ldr	r0, [pc, #112]	@ (8000948 <HAL_ADC_ConvCpltCallback+0x94>)
 80008d6:	f001 fc71 	bl	80021bc <HAL_GPIO_WritePin>
        char msg[64];
        snprintf(msg, sizeof(msg), "ADC Values: %u %u %u %u %u %u %u\r\n",
        		(unsigned int)adc_buffer[0], (unsigned int)adc_buffer[1], (unsigned int)adc_buffer[2],
 80008da:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <HAL_ADC_ConvCpltCallback+0x98>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <HAL_ADC_ConvCpltCallback+0x98>)
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	4a19      	ldr	r2, [pc, #100]	@ (800094c <HAL_ADC_ConvCpltCallback+0x98>)
 80008e6:	6892      	ldr	r2, [r2, #8]
        		(unsigned int)adc_buffer[3], (unsigned int)adc_buffer[4],
 80008e8:	4918      	ldr	r1, [pc, #96]	@ (800094c <HAL_ADC_ConvCpltCallback+0x98>)
 80008ea:	68c9      	ldr	r1, [r1, #12]
 80008ec:	4817      	ldr	r0, [pc, #92]	@ (800094c <HAL_ADC_ConvCpltCallback+0x98>)
 80008ee:	6900      	ldr	r0, [r0, #16]
        		(unsigned int)adc_buffer[5], (unsigned int)adc_buffer[6]);
 80008f0:	4c16      	ldr	r4, [pc, #88]	@ (800094c <HAL_ADC_ConvCpltCallback+0x98>)
 80008f2:	6964      	ldr	r4, [r4, #20]
 80008f4:	4d15      	ldr	r5, [pc, #84]	@ (800094c <HAL_ADC_ConvCpltCallback+0x98>)
 80008f6:	69ad      	ldr	r5, [r5, #24]
        snprintf(msg, sizeof(msg), "ADC Values: %u %u %u %u %u %u %u\r\n",
 80008f8:	f107 0608 	add.w	r6, r7, #8
 80008fc:	9505      	str	r5, [sp, #20]
 80008fe:	9404      	str	r4, [sp, #16]
 8000900:	9003      	str	r0, [sp, #12]
 8000902:	9102      	str	r1, [sp, #8]
 8000904:	9201      	str	r2, [sp, #4]
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	4a11      	ldr	r2, [pc, #68]	@ (8000950 <HAL_ADC_ConvCpltCallback+0x9c>)
 800090c:	2140      	movs	r1, #64	@ 0x40
 800090e:	4630      	mov	r0, r6
 8000910:	f002 fee8 	bl	80036e4 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fc91 	bl	8000240 <strlen>
 800091e:	4603      	mov	r3, r0
 8000920:	b29a      	uxth	r2, r3
 8000922:	f107 0108 	add.w	r1, r7, #8
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
 800092a:	480a      	ldr	r0, [pc, #40]	@ (8000954 <HAL_ADC_ConvCpltCallback+0xa0>)
 800092c:	f002 f9d0 	bl	8002cd0 <HAL_UART_Transmit>
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET); // Turn off LED on PF1
 8000930:	2200      	movs	r2, #0
 8000932:	2102      	movs	r1, #2
 8000934:	4804      	ldr	r0, [pc, #16]	@ (8000948 <HAL_ADC_ConvCpltCallback+0x94>)
 8000936:	f001 fc41 	bl	80021bc <HAL_GPIO_WritePin>
    }
}
 800093a:	bf00      	nop
 800093c:	374c      	adds	r7, #76	@ 0x4c
 800093e:	46bd      	mov	sp, r7
 8000940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000942:	bf00      	nop
 8000944:	40012000 	.word	0x40012000
 8000948:	40021400 	.word	0x40021400
 800094c:	20000120 	.word	0x20000120
 8000950:	08004064 	.word	0x08004064
 8000954:	20000140 	.word	0x20000140

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800095c:	f000 f981 	bl	8000c62 <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 8000960:	f000 f814 	bl	800098c <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000964:	f7ff ff3a 	bl	80007dc <MX_GPIO_Init>
    MX_DMA_Init();
 8000968:	f7ff ff1a 	bl	80007a0 <MX_DMA_Init>
    MX_ADC1_Init();
 800096c:	f7ff fe38 	bl	80005e0 <MX_ADC1_Init>
    MX_USART3_UART_Init();
 8000970:	f000 f8be 	bl	8000af0 <MX_USART3_UART_Init>

    /* Start ADC conversion with DMA */
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 7);
 8000974:	2207      	movs	r2, #7
 8000976:	4903      	ldr	r1, [pc, #12]	@ (8000984 <main+0x2c>)
 8000978:	4803      	ldr	r0, [pc, #12]	@ (8000988 <main+0x30>)
 800097a:	f000 fa13 	bl	8000da4 <HAL_ADC_Start_DMA>

    /* Infinite loop */
    while (1)
 800097e:	bf00      	nop
 8000980:	e7fd      	b.n	800097e <main+0x26>
 8000982:	bf00      	nop
 8000984:	20000120 	.word	0x20000120
 8000988:	20000078 	.word	0x20000078

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
    // System clock configuration here
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <Error_Handler>:

void Error_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
    // You can add your error handling code here
    while(1)
 800099e:	bf00      	nop
 80009a0:	e7fd      	b.n	800099e <Error_Handler+0x4>
	...

080009a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <HAL_MspInit+0x44>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	4a0e      	ldr	r2, [pc, #56]	@ (80009e8 <HAL_MspInit+0x44>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b6:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <HAL_MspInit+0x44>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <HAL_MspInit+0x44>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c6:	4a08      	ldr	r2, [pc, #32]	@ (80009e8 <HAL_MspInit+0x44>)
 80009c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ce:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <HAL_MspInit+0x44>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <NMI_Handler+0x4>

080009f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <HardFault_Handler+0x4>

080009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <MemManage_Handler+0x4>

08000a04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a42:	f000 f94b 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a50:	4802      	ldr	r0, [pc, #8]	@ (8000a5c <DMA2_Stream0_IRQHandler+0x10>)
 8000a52:	f000 ff9d 	bl	8001990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000c0 	.word	0x200000c0

08000a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a68:	4a14      	ldr	r2, [pc, #80]	@ (8000abc <_sbrk+0x5c>)
 8000a6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <_sbrk+0x60>)
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a74:	4b13      	ldr	r3, [pc, #76]	@ (8000ac4 <_sbrk+0x64>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d102      	bne.n	8000a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <_sbrk+0x64>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	@ (8000ac8 <_sbrk+0x68>)
 8000a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a82:	4b10      	ldr	r3, [pc, #64]	@ (8000ac4 <_sbrk+0x64>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d207      	bcs.n	8000aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a90:	f002 fe64 	bl	800375c <__errno>
 8000a94:	4603      	mov	r3, r0
 8000a96:	220c      	movs	r2, #12
 8000a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9e:	e009      	b.n	8000ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa0:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <_sbrk+0x64>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aa6:	4b07      	ldr	r3, [pc, #28]	@ (8000ac4 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	4a05      	ldr	r2, [pc, #20]	@ (8000ac4 <_sbrk+0x64>)
 8000ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20080000 	.word	0x20080000
 8000ac0:	00000400 	.word	0x00000400
 8000ac4:	2000013c 	.word	0x2000013c
 8000ac8:	20000318 	.word	0x20000318

08000acc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <SystemInit+0x20>)
 8000ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ad6:	4a05      	ldr	r2, [pc, #20]	@ (8000aec <SystemInit+0x20>)
 8000ad8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000adc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000af4:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <MX_USART3_UART_Init+0x58>)
 8000af6:	4a15      	ldr	r2, [pc, #84]	@ (8000b4c <MX_USART3_UART_Init+0x5c>)
 8000af8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000afa:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <MX_USART3_UART_Init+0x58>)
 8000afc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_USART3_UART_Init+0x58>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_USART3_UART_Init+0x58>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <MX_USART3_UART_Init+0x58>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <MX_USART3_UART_Init+0x58>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <MX_USART3_UART_Init+0x58>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b20:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <MX_USART3_UART_Init+0x58>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <MX_USART3_UART_Init+0x58>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <MX_USART3_UART_Init+0x58>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <MX_USART3_UART_Init+0x58>)
 8000b34:	f002 f87e 	bl	8002c34 <HAL_UART_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b3e:	f7ff ff2c 	bl	800099a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000140 	.word	0x20000140
 8000b4c:	40004800 	.word	0x40004800

08000b50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b0ae      	sub	sp, #184	@ 0xb8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2290      	movs	r2, #144	@ 0x90
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f002 fdeb 	bl	800374c <memset>
  if(uartHandle->Instance==USART3)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a22      	ldr	r2, [pc, #136]	@ (8000c04 <HAL_UART_MspInit+0xb4>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d13c      	bne.n	8000bfa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b84:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f001 fc28 	bl	80023e4 <HAL_RCCEx_PeriphCLKConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b9a:	f7ff fefe 	bl	800099a <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <HAL_UART_MspInit+0xb8>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	4a19      	ldr	r2, [pc, #100]	@ (8000c08 <HAL_UART_MspInit+0xb8>)
 8000ba4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000baa:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <HAL_UART_MspInit+0xb8>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb6:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <HAL_UART_MspInit+0xb8>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a13      	ldr	r2, [pc, #76]	@ (8000c08 <HAL_UART_MspInit+0xb8>)
 8000bbc:	f043 0308 	orr.w	r3, r3, #8
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <HAL_UART_MspInit+0xb8>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0308 	and.w	r3, r3, #8
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000be8:	2307      	movs	r3, #7
 8000bea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <HAL_UART_MspInit+0xbc>)
 8000bf6:	f001 f935 	bl	8001e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	37b8      	adds	r7, #184	@ 0xb8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40004800 	.word	0x40004800
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020c00 	.word	0x40020c00

08000c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c14:	f7ff ff5a 	bl	8000acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c18:	480c      	ldr	r0, [pc, #48]	@ (8000c4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c1a:	490d      	ldr	r1, [pc, #52]	@ (8000c50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c20:	e002      	b.n	8000c28 <LoopCopyDataInit>

08000c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c26:	3304      	adds	r3, #4

08000c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c2c:	d3f9      	bcc.n	8000c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c30:	4c0a      	ldr	r4, [pc, #40]	@ (8000c5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c34:	e001      	b.n	8000c3a <LoopFillZerobss>

08000c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c38:	3204      	adds	r2, #4

08000c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c3c:	d3fb      	bcc.n	8000c36 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f002 fd93 	bl	8003768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c42:	f7ff fe89 	bl	8000958 <main>
  bx  lr    
 8000c46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c48:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c54:	080040dc 	.word	0x080040dc
  ldr r2, =_sbss
 8000c58:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c5c:	20000314 	.word	0x20000314

08000c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC_IRQHandler>

08000c62 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c66:	2003      	movs	r0, #3
 8000c68:	f000 fd42 	bl	80016f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6c:	200f      	movs	r0, #15
 8000c6e:	f000 f805 	bl	8000c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c72:	f7ff fe97 	bl	80009a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c76:	2300      	movs	r3, #0
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c84:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <HAL_InitTick+0x54>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <HAL_InitTick+0x58>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 fd5d 	bl	800175a <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00e      	b.n	8000cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d80a      	bhi.n	8000cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f000 fd25 	bl	8001706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cbc:	4a06      	ldr	r2, [pc, #24]	@ (8000cd8 <HAL_InitTick+0x5c>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	200001c8 	.word	0x200001c8

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	@ (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	200001c8 	.word	0x200001c8

08000d1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e031      	b.n	8000d96 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d109      	bne.n	8000d4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff fca2 	bl	8000684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d52:	f003 0310 	and.w	r3, r3, #16
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d116      	bne.n	8000d88 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d5e:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <HAL_ADC_Init+0x84>)
 8000d60:	4013      	ands	r3, r2
 8000d62:	f043 0202 	orr.w	r2, r3, #2
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f000 fa74 	bl	8001258 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7a:	f023 0303 	bic.w	r3, r3, #3
 8000d7e:	f043 0201 	orr.w	r2, r3, #1
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d86:	e001      	b.n	8000d8c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	ffffeefd 	.word	0xffffeefd

08000da4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d101      	bne.n	8000dc2 <HAL_ADC_Start_DMA+0x1e>
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	e0d4      	b.n	8000f6c <HAL_ADC_Start_DMA+0x1c8>
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d018      	beq.n	8000e0a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f042 0201 	orr.w	r2, r2, #1
 8000de6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000de8:	4b62      	ldr	r3, [pc, #392]	@ (8000f74 <HAL_ADC_Start_DMA+0x1d0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a62      	ldr	r2, [pc, #392]	@ (8000f78 <HAL_ADC_Start_DMA+0x1d4>)
 8000dee:	fba2 2303 	umull	r2, r3, r2, r3
 8000df2:	0c9a      	lsrs	r2, r3, #18
 8000df4:	4613      	mov	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	4413      	add	r3, r2
 8000dfa:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8000dfc:	e002      	b.n	8000e04 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	3b01      	subs	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1f9      	bne.n	8000dfe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	f040 809c 	bne.w	8000f52 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e1e:	4b57      	ldr	r3, [pc, #348]	@ (8000f7c <HAL_ADC_Start_DMA+0x1d8>)
 8000e20:	4013      	ands	r3, r2
 8000e22:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d007      	beq.n	8000e48 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e40:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e54:	d106      	bne.n	8000e64 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5a:	f023 0206 	bic.w	r2, r3, #6
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	645a      	str	r2, [r3, #68]	@ 0x44
 8000e62:	e002      	b.n	8000e6a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2200      	movs	r2, #0
 8000e68:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e76:	4a42      	ldr	r2, [pc, #264]	@ (8000f80 <HAL_ADC_Start_DMA+0x1dc>)
 8000e78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e7e:	4a41      	ldr	r2, [pc, #260]	@ (8000f84 <HAL_ADC_Start_DMA+0x1e0>)
 8000e80:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e86:	4a40      	ldr	r2, [pc, #256]	@ (8000f88 <HAL_ADC_Start_DMA+0x1e4>)
 8000e88:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000e92:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8000ea2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000eb2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	334c      	adds	r3, #76	@ 0x4c
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	68ba      	ldr	r2, [r7, #8]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f000 fd04 	bl	80018d0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000ec8:	4b30      	ldr	r3, [pc, #192]	@ (8000f8c <HAL_ADC_Start_DMA+0x1e8>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 031f 	and.w	r3, r3, #31
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d10f      	bne.n	8000ef4 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d143      	bne.n	8000f6a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	e03a      	b.n	8000f6a <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a25      	ldr	r2, [pc, #148]	@ (8000f90 <HAL_ADC_Start_DMA+0x1ec>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d10e      	bne.n	8000f1c <HAL_ADC_Start_DMA+0x178>
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d107      	bne.n	8000f1c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689a      	ldr	r2, [r3, #8]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f1a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f8c <HAL_ADC_Start_DMA+0x1e8>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0310 	and.w	r3, r3, #16
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d120      	bne.n	8000f6a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a19      	ldr	r2, [pc, #100]	@ (8000f94 <HAL_ADC_Start_DMA+0x1f0>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d11b      	bne.n	8000f6a <HAL_ADC_Start_DMA+0x1c6>
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d114      	bne.n	8000f6a <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	689a      	ldr	r2, [r3, #8]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	e00b      	b.n	8000f6a <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f56:	f043 0210 	orr.w	r2, r3, #16
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f62:	f043 0201 	orr.w	r2, r3, #1
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000000 	.word	0x20000000
 8000f78:	431bde83 	.word	0x431bde83
 8000f7c:	fffff8fe 	.word	0xfffff8fe
 8000f80:	0800144d 	.word	0x0800144d
 8000f84:	08001507 	.word	0x08001507
 8000f88:	08001523 	.word	0x08001523
 8000f8c:	40012300 	.word	0x40012300
 8000f90:	40012000 	.word	0x40012000
 8000f94:	40012200 	.word	0x40012200

08000f98 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d101      	bne.n	8000fc8 <HAL_ADC_ConfigChannel+0x1c>
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	e136      	b.n	8001236 <HAL_ADC_ConfigChannel+0x28a>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b09      	cmp	r3, #9
 8000fd6:	d93a      	bls.n	800104e <HAL_ADC_ConfigChannel+0xa2>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000fe0:	d035      	beq.n	800104e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68d9      	ldr	r1, [r3, #12]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	3b1e      	subs	r3, #30
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43da      	mvns	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	400a      	ands	r2, r1
 8001006:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a8d      	ldr	r2, [pc, #564]	@ (8001244 <HAL_ADC_ConfigChannel+0x298>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d10a      	bne.n	8001028 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68d9      	ldr	r1, [r3, #12]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	061a      	lsls	r2, r3, #24
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	430a      	orrs	r2, r1
 8001024:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001026:	e035      	b.n	8001094 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	68d9      	ldr	r1, [r3, #12]
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	b29b      	uxth	r3, r3
 8001038:	4618      	mov	r0, r3
 800103a:	4603      	mov	r3, r0
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4403      	add	r3, r0
 8001040:	3b1e      	subs	r3, #30
 8001042:	409a      	lsls	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	430a      	orrs	r2, r1
 800104a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800104c:	e022      	b.n	8001094 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6919      	ldr	r1, [r3, #16]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	b29b      	uxth	r3, r3
 800105a:	461a      	mov	r2, r3
 800105c:	4613      	mov	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4413      	add	r3, r2
 8001062:	2207      	movs	r2, #7
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43da      	mvns	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	400a      	ands	r2, r1
 8001070:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6919      	ldr	r1, [r3, #16]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	b29b      	uxth	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	4603      	mov	r3, r0
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4403      	add	r3, r0
 800108a:	409a      	lsls	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	430a      	orrs	r2, r1
 8001092:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b06      	cmp	r3, #6
 800109a:	d824      	bhi.n	80010e6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	3b05      	subs	r3, #5
 80010ae:	221f      	movs	r2, #31
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43da      	mvns	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	400a      	ands	r2, r1
 80010bc:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	3b05      	subs	r3, #5
 80010d8:	fa00 f203 	lsl.w	r2, r0, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80010e4:	e04c      	b.n	8001180 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b0c      	cmp	r3, #12
 80010ec:	d824      	bhi.n	8001138 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	3b23      	subs	r3, #35	@ 0x23
 8001100:	221f      	movs	r2, #31
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	400a      	ands	r2, r1
 800110e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	4618      	mov	r0, r3
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	3b23      	subs	r3, #35	@ 0x23
 800112a:	fa00 f203 	lsl.w	r2, r0, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	430a      	orrs	r2, r1
 8001134:	631a      	str	r2, [r3, #48]	@ 0x30
 8001136:	e023      	b.n	8001180 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	3b41      	subs	r3, #65	@ 0x41
 800114a:	221f      	movs	r2, #31
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43da      	mvns	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	400a      	ands	r2, r1
 8001158:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	b29b      	uxth	r3, r3
 8001166:	4618      	mov	r0, r3
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	3b41      	subs	r3, #65	@ 0x41
 8001174:	fa00 f203 	lsl.w	r2, r0, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a30      	ldr	r2, [pc, #192]	@ (8001248 <HAL_ADC_ConfigChannel+0x29c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d10a      	bne.n	80011a0 <HAL_ADC_ConfigChannel+0x1f4>
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001192:	d105      	bne.n	80011a0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001194:	4b2d      	ldr	r3, [pc, #180]	@ (800124c <HAL_ADC_ConfigChannel+0x2a0>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4a2c      	ldr	r2, [pc, #176]	@ (800124c <HAL_ADC_ConfigChannel+0x2a0>)
 800119a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800119e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a28      	ldr	r2, [pc, #160]	@ (8001248 <HAL_ADC_ConfigChannel+0x29c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d10f      	bne.n	80011ca <HAL_ADC_ConfigChannel+0x21e>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b12      	cmp	r3, #18
 80011b0:	d10b      	bne.n	80011ca <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80011b2:	4b26      	ldr	r3, [pc, #152]	@ (800124c <HAL_ADC_ConfigChannel+0x2a0>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	4a25      	ldr	r2, [pc, #148]	@ (800124c <HAL_ADC_ConfigChannel+0x2a0>)
 80011b8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80011bc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80011be:	4b23      	ldr	r3, [pc, #140]	@ (800124c <HAL_ADC_ConfigChannel+0x2a0>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4a22      	ldr	r2, [pc, #136]	@ (800124c <HAL_ADC_ConfigChannel+0x2a0>)
 80011c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011c8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001248 <HAL_ADC_ConfigChannel+0x29c>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d12b      	bne.n	800122c <HAL_ADC_ConfigChannel+0x280>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001244 <HAL_ADC_ConfigChannel+0x298>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d003      	beq.n	80011e6 <HAL_ADC_ConfigChannel+0x23a>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b11      	cmp	r3, #17
 80011e4:	d122      	bne.n	800122c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80011e6:	4b19      	ldr	r3, [pc, #100]	@ (800124c <HAL_ADC_ConfigChannel+0x2a0>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	4a18      	ldr	r2, [pc, #96]	@ (800124c <HAL_ADC_ConfigChannel+0x2a0>)
 80011ec:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80011f0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80011f2:	4b16      	ldr	r3, [pc, #88]	@ (800124c <HAL_ADC_ConfigChannel+0x2a0>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	4a15      	ldr	r2, [pc, #84]	@ (800124c <HAL_ADC_ConfigChannel+0x2a0>)
 80011f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80011fc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a10      	ldr	r2, [pc, #64]	@ (8001244 <HAL_ADC_ConfigChannel+0x298>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d111      	bne.n	800122c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001208:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <HAL_ADC_ConfigChannel+0x2a4>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a11      	ldr	r2, [pc, #68]	@ (8001254 <HAL_ADC_ConfigChannel+0x2a8>)
 800120e:	fba2 2303 	umull	r2, r3, r2, r3
 8001212:	0c9a      	lsrs	r2, r3, #18
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800121e:	e002      	b.n	8001226 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	3b01      	subs	r3, #1
 8001224:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1f9      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	10000012 	.word	0x10000012
 8001248:	40012000 	.word	0x40012000
 800124c:	40012300 	.word	0x40012300
 8001250:	20000000 	.word	0x20000000
 8001254:	431bde83 	.word	0x431bde83

08001258 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001260:	4b78      	ldr	r3, [pc, #480]	@ (8001444 <ADC_Init+0x1ec>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	4a77      	ldr	r2, [pc, #476]	@ (8001444 <ADC_Init+0x1ec>)
 8001266:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800126a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800126c:	4b75      	ldr	r3, [pc, #468]	@ (8001444 <ADC_Init+0x1ec>)
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	4973      	ldr	r1, [pc, #460]	@ (8001444 <ADC_Init+0x1ec>)
 8001276:	4313      	orrs	r3, r2
 8001278:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001288:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6859      	ldr	r1, [r3, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	021a      	lsls	r2, r3, #8
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80012ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6859      	ldr	r1, [r3, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	430a      	orrs	r2, r1
 80012be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6899      	ldr	r1, [r3, #8]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e6:	4a58      	ldr	r2, [pc, #352]	@ (8001448 <ADC_Init+0x1f0>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d022      	beq.n	8001332 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80012fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6899      	ldr	r1, [r3, #8]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800131c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6899      	ldr	r1, [r3, #8]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	e00f      	b.n	8001352 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001340:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001350:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 0202 	bic.w	r2, r2, #2
 8001360:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6899      	ldr	r1, [r3, #8]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	005a      	lsls	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3020 	ldrb.w	r3, [r3, #32]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d01b      	beq.n	80013b8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800138e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800139e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6859      	ldr	r1, [r3, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013aa:	3b01      	subs	r3, #1
 80013ac:	035a      	lsls	r2, r3, #13
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	e007      	b.n	80013c8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80013d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	051a      	lsls	r2, r3, #20
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80013fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6899      	ldr	r1, [r3, #8]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800140a:	025a      	lsls	r2, r3, #9
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001422:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6899      	ldr	r1, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	029a      	lsls	r2, r3, #10
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	430a      	orrs	r2, r1
 8001436:	609a      	str	r2, [r3, #8]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	40012300 	.word	0x40012300
 8001448:	0f000001 	.word	0x0f000001

0800144c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001458:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001462:	2b00      	cmp	r3, #0
 8001464:	d13c      	bne.n	80014e0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d12b      	bne.n	80014d8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001484:	2b00      	cmp	r3, #0
 8001486:	d127      	bne.n	80014d8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800148e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001492:	2b00      	cmp	r3, #0
 8001494:	d006      	beq.n	80014a4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d119      	bne.n	80014d8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0220 	bic.w	r2, r2, #32
 80014b2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d105      	bne.n	80014d8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d0:	f043 0201 	orr.w	r2, r3, #1
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f7ff f9eb 	bl	80008b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80014de:	e00e      	b.n	80014fe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e4:	f003 0310 	and.w	r3, r3, #16
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f7ff fd53 	bl	8000f98 <HAL_ADC_ErrorCallback>
}
 80014f2:	e004      	b.n	80014fe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	4798      	blx	r3
}
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001512:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f7ff f9b7 	bl	8000888 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b084      	sub	sp, #16
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800152e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2240      	movs	r2, #64	@ 0x40
 8001534:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	f043 0204 	orr.w	r2, r3, #4
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f7ff fd28 	bl	8000f98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001560:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <__NVIC_SetPriorityGrouping+0x40>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800156c:	4013      	ands	r3, r2
 800156e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <__NVIC_SetPriorityGrouping+0x44>)
 800157a:	4313      	orrs	r3, r2
 800157c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157e:	4a04      	ldr	r2, [pc, #16]	@ (8001590 <__NVIC_SetPriorityGrouping+0x40>)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	60d3      	str	r3, [r2, #12]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00
 8001594:	05fa0000 	.word	0x05fa0000

08001598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800159c:	4b04      	ldr	r3, [pc, #16]	@ (80015b0 <__NVIC_GetPriorityGrouping+0x18>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	0a1b      	lsrs	r3, r3, #8
 80015a2:	f003 0307 	and.w	r3, r3, #7
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	db0b      	blt.n	80015de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	f003 021f 	and.w	r2, r3, #31
 80015cc:	4907      	ldr	r1, [pc, #28]	@ (80015ec <__NVIC_EnableIRQ+0x38>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	095b      	lsrs	r3, r3, #5
 80015d4:	2001      	movs	r0, #1
 80015d6:	fa00 f202 	lsl.w	r2, r0, r2
 80015da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000e100 	.word	0xe000e100

080015f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	2b00      	cmp	r3, #0
 8001602:	db0a      	blt.n	800161a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	490c      	ldr	r1, [pc, #48]	@ (800163c <__NVIC_SetPriority+0x4c>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	0112      	lsls	r2, r2, #4
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	440b      	add	r3, r1
 8001614:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001618:	e00a      	b.n	8001630 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4908      	ldr	r1, [pc, #32]	@ (8001640 <__NVIC_SetPriority+0x50>)
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	3b04      	subs	r3, #4
 8001628:	0112      	lsls	r2, r2, #4
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	440b      	add	r3, r1
 800162e:	761a      	strb	r2, [r3, #24]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000e100 	.word	0xe000e100
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001644:	b480      	push	{r7}
 8001646:	b089      	sub	sp, #36	@ 0x24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f1c3 0307 	rsb	r3, r3, #7
 800165e:	2b04      	cmp	r3, #4
 8001660:	bf28      	it	cs
 8001662:	2304      	movcs	r3, #4
 8001664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3304      	adds	r3, #4
 800166a:	2b06      	cmp	r3, #6
 800166c:	d902      	bls.n	8001674 <NVIC_EncodePriority+0x30>
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3b03      	subs	r3, #3
 8001672:	e000      	b.n	8001676 <NVIC_EncodePriority+0x32>
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	f04f 32ff 	mov.w	r2, #4294967295
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43da      	mvns	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	401a      	ands	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800168c:	f04f 31ff 	mov.w	r1, #4294967295
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	fa01 f303 	lsl.w	r3, r1, r3
 8001696:	43d9      	mvns	r1, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	4313      	orrs	r3, r2
         );
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3724      	adds	r7, #36	@ 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016bc:	d301      	bcc.n	80016c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016be:	2301      	movs	r3, #1
 80016c0:	e00f      	b.n	80016e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c2:	4a0a      	ldr	r2, [pc, #40]	@ (80016ec <SysTick_Config+0x40>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ca:	210f      	movs	r1, #15
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295
 80016d0:	f7ff ff8e 	bl	80015f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d4:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <SysTick_Config+0x40>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016da:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <SysTick_Config+0x40>)
 80016dc:	2207      	movs	r2, #7
 80016de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	e000e010 	.word	0xe000e010

080016f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ff29 	bl	8001550 <__NVIC_SetPriorityGrouping>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001718:	f7ff ff3e 	bl	8001598 <__NVIC_GetPriorityGrouping>
 800171c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	6978      	ldr	r0, [r7, #20]
 8001724:	f7ff ff8e 	bl	8001644 <NVIC_EncodePriority>
 8001728:	4602      	mov	r2, r0
 800172a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff5d 	bl	80015f0 <__NVIC_SetPriority>
}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff31 	bl	80015b4 <__NVIC_EnableIRQ>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff ffa2 	bl	80016ac <SysTick_Config>
 8001768:	4603      	mov	r3, r0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001780:	f7ff fac0 	bl	8000d04 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e099      	b.n	80018c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2202      	movs	r2, #2
 8001794:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0201 	bic.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017b0:	e00f      	b.n	80017d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017b2:	f7ff faa7 	bl	8000d04 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b05      	cmp	r3, #5
 80017be:	d908      	bls.n	80017d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2220      	movs	r2, #32
 80017c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2203      	movs	r2, #3
 80017ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e078      	b.n	80018c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1e8      	bne.n	80017b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	4b38      	ldr	r3, [pc, #224]	@ (80018cc <HAL_DMA_Init+0x158>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800180a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001816:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	4313      	orrs	r3, r2
 8001822:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001828:	2b04      	cmp	r3, #4
 800182a:	d107      	bne.n	800183c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001834:	4313      	orrs	r3, r2
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4313      	orrs	r3, r2
 800183a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f023 0307 	bic.w	r3, r3, #7
 8001852:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	4313      	orrs	r3, r2
 800185c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001862:	2b04      	cmp	r3, #4
 8001864:	d117      	bne.n	8001896 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	4313      	orrs	r3, r2
 800186e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00e      	beq.n	8001896 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 fa77 	bl	8001d6c <DMA_CheckFifoParam>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d008      	beq.n	8001896 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2240      	movs	r2, #64	@ 0x40
 8001888:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001892:	2301      	movs	r3, #1
 8001894:	e016      	b.n	80018c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 fa2e 	bl	8001d00 <DMA_CalcBaseAndBitshift>
 80018a4:	4603      	mov	r3, r0
 80018a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ac:	223f      	movs	r2, #63	@ 0x3f
 80018ae:	409a      	lsls	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	e010803f 	.word	0xe010803f

080018d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d101      	bne.n	80018f6 <HAL_DMA_Start_IT+0x26>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e048      	b.n	8001988 <HAL_DMA_Start_IT+0xb8>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b01      	cmp	r3, #1
 8001908:	d137      	bne.n	800197a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2202      	movs	r2, #2
 800190e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f000 f9c0 	bl	8001ca4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001928:	223f      	movs	r2, #63	@ 0x3f
 800192a:	409a      	lsls	r2, r3
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0216 	orr.w	r2, r2, #22
 800193e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800194e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001954:	2b00      	cmp	r3, #0
 8001956:	d007      	beq.n	8001968 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0208 	orr.w	r2, r2, #8
 8001966:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f042 0201 	orr.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	e005      	b.n	8001986 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001982:	2302      	movs	r3, #2
 8001984:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001986:	7dfb      	ldrb	r3, [r7, #23]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800199c:	4b8e      	ldr	r3, [pc, #568]	@ (8001bd8 <HAL_DMA_IRQHandler+0x248>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a8e      	ldr	r2, [pc, #568]	@ (8001bdc <HAL_DMA_IRQHandler+0x24c>)
 80019a2:	fba2 2303 	umull	r2, r3, r2, r3
 80019a6:	0a9b      	lsrs	r3, r3, #10
 80019a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ba:	2208      	movs	r2, #8
 80019bc:	409a      	lsls	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d01a      	beq.n	80019fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d013      	beq.n	80019fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0204 	bic.w	r2, r2, #4
 80019e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e8:	2208      	movs	r2, #8
 80019ea:	409a      	lsls	r2, r3
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f4:	f043 0201 	orr.w	r2, r3, #1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a00:	2201      	movs	r2, #1
 8001a02:	409a      	lsls	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4013      	ands	r3, r2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d012      	beq.n	8001a32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00b      	beq.n	8001a32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a1e:	2201      	movs	r2, #1
 8001a20:	409a      	lsls	r2, r3
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a2a:	f043 0202 	orr.w	r2, r3, #2
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a36:	2204      	movs	r2, #4
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d012      	beq.n	8001a68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00b      	beq.n	8001a68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a54:	2204      	movs	r2, #4
 8001a56:	409a      	lsls	r2, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a60:	f043 0204 	orr.w	r2, r3, #4
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a6c:	2210      	movs	r2, #16
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d043      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d03c      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a8a:	2210      	movs	r2, #16
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d018      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d108      	bne.n	8001ac0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d024      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	4798      	blx	r3
 8001abe:	e01f      	b.n	8001b00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01b      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	4798      	blx	r3
 8001ad0:	e016      	b.n	8001b00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d107      	bne.n	8001af0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0208 	bic.w	r2, r2, #8
 8001aee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b04:	2220      	movs	r2, #32
 8001b06:	409a      	lsls	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 808f 	beq.w	8001c30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 8087 	beq.w	8001c30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b26:	2220      	movs	r2, #32
 8001b28:	409a      	lsls	r2, r3
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b05      	cmp	r3, #5
 8001b38:	d136      	bne.n	8001ba8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0216 	bic.w	r2, r2, #22
 8001b48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d103      	bne.n	8001b6a <HAL_DMA_IRQHandler+0x1da>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d007      	beq.n	8001b7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0208 	bic.w	r2, r2, #8
 8001b78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b7e:	223f      	movs	r2, #63	@ 0x3f
 8001b80:	409a      	lsls	r2, r3
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d07e      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	4798      	blx	r3
        }
        return;
 8001ba6:	e079      	b.n	8001c9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d01d      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10d      	bne.n	8001be0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d031      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	4798      	blx	r3
 8001bd4:	e02c      	b.n	8001c30 <HAL_DMA_IRQHandler+0x2a0>
 8001bd6:	bf00      	nop
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d023      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	4798      	blx	r3
 8001bf0:	e01e      	b.n	8001c30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10f      	bne.n	8001c20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0210 	bic.w	r2, r2, #16
 8001c0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d032      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d022      	beq.n	8001c8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2205      	movs	r2, #5
 8001c48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0201 	bic.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d307      	bcc.n	8001c78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f2      	bne.n	8001c5c <HAL_DMA_IRQHandler+0x2cc>
 8001c76:	e000      	b.n	8001c7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d005      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	4798      	blx	r3
 8001c9a:	e000      	b.n	8001c9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c9c:	bf00      	nop
    }
  }
}
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001cc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b40      	cmp	r3, #64	@ 0x40
 8001cd0:	d108      	bne.n	8001ce4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ce2:	e007      	b.n	8001cf4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	60da      	str	r2, [r3, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	3b10      	subs	r3, #16
 8001d10:	4a13      	ldr	r2, [pc, #76]	@ (8001d60 <DMA_CalcBaseAndBitshift+0x60>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	091b      	lsrs	r3, r3, #4
 8001d18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d1a:	4a12      	ldr	r2, [pc, #72]	@ (8001d64 <DMA_CalcBaseAndBitshift+0x64>)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4413      	add	r3, r2
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	d908      	bls.n	8001d40 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <DMA_CalcBaseAndBitshift+0x68>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	1d1a      	adds	r2, r3, #4
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d3e:	e006      	b.n	8001d4e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b08      	ldr	r3, [pc, #32]	@ (8001d68 <DMA_CalcBaseAndBitshift+0x68>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	aaaaaaab 	.word	0xaaaaaaab
 8001d64:	08004090 	.word	0x08004090
 8001d68:	fffffc00 	.word	0xfffffc00

08001d6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d11f      	bne.n	8001dc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d856      	bhi.n	8001e3a <DMA_CheckFifoParam+0xce>
 8001d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8001d94 <DMA_CheckFifoParam+0x28>)
 8001d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d92:	bf00      	nop
 8001d94:	08001da5 	.word	0x08001da5
 8001d98:	08001db7 	.word	0x08001db7
 8001d9c:	08001da5 	.word	0x08001da5
 8001da0:	08001e3b 	.word	0x08001e3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d046      	beq.n	8001e3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001db4:	e043      	b.n	8001e3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001dbe:	d140      	bne.n	8001e42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dc4:	e03d      	b.n	8001e42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dce:	d121      	bne.n	8001e14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d837      	bhi.n	8001e46 <DMA_CheckFifoParam+0xda>
 8001dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8001ddc <DMA_CheckFifoParam+0x70>)
 8001dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ddc:	08001ded 	.word	0x08001ded
 8001de0:	08001df3 	.word	0x08001df3
 8001de4:	08001ded 	.word	0x08001ded
 8001de8:	08001e05 	.word	0x08001e05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
      break;
 8001df0:	e030      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d025      	beq.n	8001e4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e02:	e022      	b.n	8001e4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e08:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e0c:	d11f      	bne.n	8001e4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e12:	e01c      	b.n	8001e4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d903      	bls.n	8001e22 <DMA_CheckFifoParam+0xb6>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d003      	beq.n	8001e28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e20:	e018      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	73fb      	strb	r3, [r7, #15]
      break;
 8001e26:	e015      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00e      	beq.n	8001e52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	73fb      	strb	r3, [r7, #15]
      break;
 8001e38:	e00b      	b.n	8001e52 <DMA_CheckFifoParam+0xe6>
      break;
 8001e3a:	bf00      	nop
 8001e3c:	e00a      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      break;
 8001e3e:	bf00      	nop
 8001e40:	e008      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      break;
 8001e42:	bf00      	nop
 8001e44:	e006      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      break;
 8001e46:	bf00      	nop
 8001e48:	e004      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      break;
 8001e4a:	bf00      	nop
 8001e4c:	e002      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e4e:	bf00      	nop
 8001e50:	e000      	b.n	8001e54 <DMA_CheckFifoParam+0xe8>
      break;
 8001e52:	bf00      	nop
    }
  } 
  
  return status; 
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop

08001e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b089      	sub	sp, #36	@ 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	e175      	b.n	8002170 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e84:	2201      	movs	r2, #1
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	f040 8164 	bne.w	800216a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d005      	beq.n	8001eba <HAL_GPIO_Init+0x56>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d130      	bne.n	8001f1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f003 0201 	and.w	r2, r3, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d017      	beq.n	8001f58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	2203      	movs	r2, #3
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d123      	bne.n	8001fac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	08da      	lsrs	r2, r3, #3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3208      	adds	r2, #8
 8001f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	220f      	movs	r2, #15
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	08da      	lsrs	r2, r3, #3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3208      	adds	r2, #8
 8001fa6:	69b9      	ldr	r1, [r7, #24]
 8001fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0203 	and.w	r2, r3, #3
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 80be 	beq.w	800216a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fee:	4b66      	ldr	r3, [pc, #408]	@ (8002188 <HAL_GPIO_Init+0x324>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff2:	4a65      	ldr	r2, [pc, #404]	@ (8002188 <HAL_GPIO_Init+0x324>)
 8001ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ffa:	4b63      	ldr	r3, [pc, #396]	@ (8002188 <HAL_GPIO_Init+0x324>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002006:	4a61      	ldr	r2, [pc, #388]	@ (800218c <HAL_GPIO_Init+0x328>)
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	3302      	adds	r3, #2
 800200e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	220f      	movs	r2, #15
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a58      	ldr	r2, [pc, #352]	@ (8002190 <HAL_GPIO_Init+0x32c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d037      	beq.n	80020a2 <HAL_GPIO_Init+0x23e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a57      	ldr	r2, [pc, #348]	@ (8002194 <HAL_GPIO_Init+0x330>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d031      	beq.n	800209e <HAL_GPIO_Init+0x23a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a56      	ldr	r2, [pc, #344]	@ (8002198 <HAL_GPIO_Init+0x334>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d02b      	beq.n	800209a <HAL_GPIO_Init+0x236>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a55      	ldr	r2, [pc, #340]	@ (800219c <HAL_GPIO_Init+0x338>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d025      	beq.n	8002096 <HAL_GPIO_Init+0x232>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a54      	ldr	r2, [pc, #336]	@ (80021a0 <HAL_GPIO_Init+0x33c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d01f      	beq.n	8002092 <HAL_GPIO_Init+0x22e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a53      	ldr	r2, [pc, #332]	@ (80021a4 <HAL_GPIO_Init+0x340>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d019      	beq.n	800208e <HAL_GPIO_Init+0x22a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a52      	ldr	r2, [pc, #328]	@ (80021a8 <HAL_GPIO_Init+0x344>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d013      	beq.n	800208a <HAL_GPIO_Init+0x226>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a51      	ldr	r2, [pc, #324]	@ (80021ac <HAL_GPIO_Init+0x348>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00d      	beq.n	8002086 <HAL_GPIO_Init+0x222>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a50      	ldr	r2, [pc, #320]	@ (80021b0 <HAL_GPIO_Init+0x34c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d007      	beq.n	8002082 <HAL_GPIO_Init+0x21e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4f      	ldr	r2, [pc, #316]	@ (80021b4 <HAL_GPIO_Init+0x350>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d101      	bne.n	800207e <HAL_GPIO_Init+0x21a>
 800207a:	2309      	movs	r3, #9
 800207c:	e012      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 800207e:	230a      	movs	r3, #10
 8002080:	e010      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 8002082:	2308      	movs	r3, #8
 8002084:	e00e      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 8002086:	2307      	movs	r3, #7
 8002088:	e00c      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 800208a:	2306      	movs	r3, #6
 800208c:	e00a      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 800208e:	2305      	movs	r3, #5
 8002090:	e008      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 8002092:	2304      	movs	r3, #4
 8002094:	e006      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 8002096:	2303      	movs	r3, #3
 8002098:	e004      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 800209a:	2302      	movs	r3, #2
 800209c:	e002      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 80020a2:	2300      	movs	r3, #0
 80020a4:	69fa      	ldr	r2, [r7, #28]
 80020a6:	f002 0203 	and.w	r2, r2, #3
 80020aa:	0092      	lsls	r2, r2, #2
 80020ac:	4093      	lsls	r3, r2
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020b4:	4935      	ldr	r1, [pc, #212]	@ (800218c <HAL_GPIO_Init+0x328>)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	089b      	lsrs	r3, r3, #2
 80020ba:	3302      	adds	r3, #2
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c2:	4b3d      	ldr	r3, [pc, #244]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020e6:	4a34      	ldr	r2, [pc, #208]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020ec:	4b32      	ldr	r3, [pc, #200]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002110:	4a29      	ldr	r2, [pc, #164]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002116:	4b28      	ldr	r3, [pc, #160]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800213a:	4a1f      	ldr	r2, [pc, #124]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002140:	4b1d      	ldr	r3, [pc, #116]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002164:	4a14      	ldr	r2, [pc, #80]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3301      	adds	r3, #1
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	2b0f      	cmp	r3, #15
 8002174:	f67f ae86 	bls.w	8001e84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	3724      	adds	r7, #36	@ 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800
 800218c:	40013800 	.word	0x40013800
 8002190:	40020000 	.word	0x40020000
 8002194:	40020400 	.word	0x40020400
 8002198:	40020800 	.word	0x40020800
 800219c:	40020c00 	.word	0x40020c00
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40021400 	.word	0x40021400
 80021a8:	40021800 	.word	0x40021800
 80021ac:	40021c00 	.word	0x40021c00
 80021b0:	40022000 	.word	0x40022000
 80021b4:	40022400 	.word	0x40022400
 80021b8:	40013c00 	.word	0x40013c00

080021bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	807b      	strh	r3, [r7, #2]
 80021c8:	4613      	mov	r3, r2
 80021ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021cc:	787b      	ldrb	r3, [r7, #1]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021d2:	887a      	ldrh	r2, [r7, #2]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80021d8:	e003      	b.n	80021e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80021da:	887b      	ldrh	r3, [r7, #2]
 80021dc:	041a      	lsls	r2, r3, #16
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	619a      	str	r2, [r3, #24]
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021f4:	b090      	sub	sp, #64	@ 0x40
 80021f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80021fc:	2300      	movs	r3, #0
 80021fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002200:	2300      	movs	r3, #0
 8002202:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002208:	4b59      	ldr	r3, [pc, #356]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x180>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b08      	cmp	r3, #8
 8002212:	d00d      	beq.n	8002230 <HAL_RCC_GetSysClockFreq+0x40>
 8002214:	2b08      	cmp	r3, #8
 8002216:	f200 80a1 	bhi.w	800235c <HAL_RCC_GetSysClockFreq+0x16c>
 800221a:	2b00      	cmp	r3, #0
 800221c:	d002      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0x34>
 800221e:	2b04      	cmp	r3, #4
 8002220:	d003      	beq.n	800222a <HAL_RCC_GetSysClockFreq+0x3a>
 8002222:	e09b      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002224:	4b53      	ldr	r3, [pc, #332]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x184>)
 8002226:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002228:	e09b      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800222a:	4b53      	ldr	r3, [pc, #332]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x188>)
 800222c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800222e:	e098      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002230:	4b4f      	ldr	r3, [pc, #316]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x180>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002238:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800223a:	4b4d      	ldr	r3, [pc, #308]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x180>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d028      	beq.n	8002298 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002246:	4b4a      	ldr	r3, [pc, #296]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x180>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	099b      	lsrs	r3, r3, #6
 800224c:	2200      	movs	r2, #0
 800224e:	623b      	str	r3, [r7, #32]
 8002250:	627a      	str	r2, [r7, #36]	@ 0x24
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002258:	2100      	movs	r1, #0
 800225a:	4b47      	ldr	r3, [pc, #284]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x188>)
 800225c:	fb03 f201 	mul.w	r2, r3, r1
 8002260:	2300      	movs	r3, #0
 8002262:	fb00 f303 	mul.w	r3, r0, r3
 8002266:	4413      	add	r3, r2
 8002268:	4a43      	ldr	r2, [pc, #268]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x188>)
 800226a:	fba0 1202 	umull	r1, r2, r0, r2
 800226e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002270:	460a      	mov	r2, r1
 8002272:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002274:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002276:	4413      	add	r3, r2
 8002278:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800227a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800227c:	2200      	movs	r2, #0
 800227e:	61bb      	str	r3, [r7, #24]
 8002280:	61fa      	str	r2, [r7, #28]
 8002282:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002286:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800228a:	f7fe f831 	bl	80002f0 <__aeabi_uldivmod>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4613      	mov	r3, r2
 8002294:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002296:	e053      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002298:	4b35      	ldr	r3, [pc, #212]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x180>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	099b      	lsrs	r3, r3, #6
 800229e:	2200      	movs	r2, #0
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	617a      	str	r2, [r7, #20]
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80022aa:	f04f 0b00 	mov.w	fp, #0
 80022ae:	4652      	mov	r2, sl
 80022b0:	465b      	mov	r3, fp
 80022b2:	f04f 0000 	mov.w	r0, #0
 80022b6:	f04f 0100 	mov.w	r1, #0
 80022ba:	0159      	lsls	r1, r3, #5
 80022bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022c0:	0150      	lsls	r0, r2, #5
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	ebb2 080a 	subs.w	r8, r2, sl
 80022ca:	eb63 090b 	sbc.w	r9, r3, fp
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022e2:	ebb2 0408 	subs.w	r4, r2, r8
 80022e6:	eb63 0509 	sbc.w	r5, r3, r9
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	00eb      	lsls	r3, r5, #3
 80022f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022f8:	00e2      	lsls	r2, r4, #3
 80022fa:	4614      	mov	r4, r2
 80022fc:	461d      	mov	r5, r3
 80022fe:	eb14 030a 	adds.w	r3, r4, sl
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	eb45 030b 	adc.w	r3, r5, fp
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002316:	4629      	mov	r1, r5
 8002318:	028b      	lsls	r3, r1, #10
 800231a:	4621      	mov	r1, r4
 800231c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002320:	4621      	mov	r1, r4
 8002322:	028a      	lsls	r2, r1, #10
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800232a:	2200      	movs	r2, #0
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	60fa      	str	r2, [r7, #12]
 8002330:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002334:	f7fd ffdc 	bl	80002f0 <__aeabi_uldivmod>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4613      	mov	r3, r2
 800233e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002340:	4b0b      	ldr	r3, [pc, #44]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x180>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	0c1b      	lsrs	r3, r3, #16
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	3301      	adds	r3, #1
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002350:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002354:	fbb2 f3f3 	udiv	r3, r2, r3
 8002358:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800235a:	e002      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800235c:	4b05      	ldr	r3, [pc, #20]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x184>)
 800235e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002364:	4618      	mov	r0, r3
 8002366:	3740      	adds	r7, #64	@ 0x40
 8002368:	46bd      	mov	sp, r7
 800236a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800236e:	bf00      	nop
 8002370:	40023800 	.word	0x40023800
 8002374:	00f42400 	.word	0x00f42400
 8002378:	017d7840 	.word	0x017d7840

0800237c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002380:	4b03      	ldr	r3, [pc, #12]	@ (8002390 <HAL_RCC_GetHCLKFreq+0x14>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000000 	.word	0x20000000

08002394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002398:	f7ff fff0 	bl	800237c <HAL_RCC_GetHCLKFreq>
 800239c:	4602      	mov	r2, r0
 800239e:	4b05      	ldr	r3, [pc, #20]	@ (80023b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	0a9b      	lsrs	r3, r3, #10
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	4903      	ldr	r1, [pc, #12]	@ (80023b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023aa:	5ccb      	ldrb	r3, [r1, r3]
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40023800 	.word	0x40023800
 80023b8:	08004088 	.word	0x08004088

080023bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023c0:	f7ff ffdc 	bl	800237c <HAL_RCC_GetHCLKFreq>
 80023c4:	4602      	mov	r2, r0
 80023c6:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	0b5b      	lsrs	r3, r3, #13
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	4903      	ldr	r1, [pc, #12]	@ (80023e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023d2:	5ccb      	ldrb	r3, [r1, r3]
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d8:	4618      	mov	r0, r3
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40023800 	.word	0x40023800
 80023e0:	08004088 	.word	0x08004088

080023e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d012      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800240c:	4b69      	ldr	r3, [pc, #420]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4a68      	ldr	r2, [pc, #416]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002412:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002416:	6093      	str	r3, [r2, #8]
 8002418:	4b66      	ldr	r3, [pc, #408]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002420:	4964      	ldr	r1, [pc, #400]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002422:	4313      	orrs	r3, r2
 8002424:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800242e:	2301      	movs	r3, #1
 8002430:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d017      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800243e:	4b5d      	ldr	r3, [pc, #372]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002440:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002444:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800244c:	4959      	ldr	r1, [pc, #356]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002458:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800245c:	d101      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800245e:	2301      	movs	r3, #1
 8002460:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800246a:	2301      	movs	r3, #1
 800246c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d017      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800247a:	4b4e      	ldr	r3, [pc, #312]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800247c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002480:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002488:	494a      	ldr	r1, [pc, #296]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002498:	d101      	bne.n	800249e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800249a:	2301      	movs	r3, #1
 800249c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80024a6:	2301      	movs	r3, #1
 80024a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80024b6:	2301      	movs	r3, #1
 80024b8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0320 	and.w	r3, r3, #32
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 808b 	beq.w	80025de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024c8:	4b3a      	ldr	r3, [pc, #232]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024cc:	4a39      	ldr	r2, [pc, #228]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80024d4:	4b37      	ldr	r3, [pc, #220]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024e0:	4b35      	ldr	r3, [pc, #212]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a34      	ldr	r2, [pc, #208]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ec:	f7fe fc0a 	bl	8000d04 <HAL_GetTick>
 80024f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f4:	f7fe fc06 	bl	8000d04 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	@ 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e38f      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002506:	4b2c      	ldr	r3, [pc, #176]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002512:	4b28      	ldr	r3, [pc, #160]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800251a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d035      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	429a      	cmp	r2, r3
 800252e:	d02e      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002530:	4b20      	ldr	r3, [pc, #128]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002538:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800253a:	4b1e      	ldr	r3, [pc, #120]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800253c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800253e:	4a1d      	ldr	r2, [pc, #116]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002544:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002546:	4b1b      	ldr	r3, [pc, #108]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800254a:	4a1a      	ldr	r2, [pc, #104]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800254c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002550:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002552:	4a18      	ldr	r2, [pc, #96]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002558:	4b16      	ldr	r3, [pc, #88]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800255a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b01      	cmp	r3, #1
 8002562:	d114      	bne.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7fe fbce 	bl	8000d04 <HAL_GetTick>
 8002568:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256a:	e00a      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800256c:	f7fe fbca 	bl	8000d04 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e351      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002582:	4b0c      	ldr	r3, [pc, #48]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0ee      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002596:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800259a:	d111      	bne.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800259c:	4b05      	ldr	r3, [pc, #20]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025a8:	4b04      	ldr	r3, [pc, #16]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025aa:	400b      	ands	r3, r1
 80025ac:	4901      	ldr	r1, [pc, #4]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
 80025b2:	e00b      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40007000 	.word	0x40007000
 80025bc:	0ffffcff 	.word	0x0ffffcff
 80025c0:	4bac      	ldr	r3, [pc, #688]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	4aab      	ldr	r2, [pc, #684]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025c6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80025ca:	6093      	str	r3, [r2, #8]
 80025cc:	4ba9      	ldr	r3, [pc, #676]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d8:	49a6      	ldr	r1, [pc, #664]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d010      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80025ea:	4ba2      	ldr	r3, [pc, #648]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025f0:	4aa0      	ldr	r2, [pc, #640]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80025fa:	4b9e      	ldr	r3, [pc, #632]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002604:	499b      	ldr	r1, [pc, #620]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00a      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002618:	4b96      	ldr	r3, [pc, #600]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800261a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800261e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002626:	4993      	ldr	r1, [pc, #588]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00a      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800263a:	4b8e      	ldr	r3, [pc, #568]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800263c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002640:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002648:	498a      	ldr	r1, [pc, #552]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00a      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800265c:	4b85      	ldr	r3, [pc, #532]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800265e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002662:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800266a:	4982      	ldr	r1, [pc, #520]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00a      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800267e:	4b7d      	ldr	r3, [pc, #500]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002684:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268c:	4979      	ldr	r1, [pc, #484]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00a      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026a0:	4b74      	ldr	r3, [pc, #464]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a6:	f023 0203 	bic.w	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ae:	4971      	ldr	r1, [pc, #452]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00a      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026c2:	4b6c      	ldr	r3, [pc, #432]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c8:	f023 020c 	bic.w	r2, r3, #12
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d0:	4968      	ldr	r1, [pc, #416]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00a      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026e4:	4b63      	ldr	r3, [pc, #396]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ea:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f2:	4960      	ldr	r1, [pc, #384]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002706:	4b5b      	ldr	r3, [pc, #364]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002714:	4957      	ldr	r1, [pc, #348]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00a      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002728:	4b52      	ldr	r3, [pc, #328]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800272a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800272e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002736:	494f      	ldr	r1, [pc, #316]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800274a:	4b4a      	ldr	r3, [pc, #296]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800274c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002750:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002758:	4946      	ldr	r1, [pc, #280]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800276c:	4b41      	ldr	r3, [pc, #260]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002772:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277a:	493e      	ldr	r1, [pc, #248]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00a      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800278e:	4b39      	ldr	r3, [pc, #228]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002794:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800279c:	4935      	ldr	r1, [pc, #212]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00a      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027b0:	4b30      	ldr	r3, [pc, #192]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027be:	492d      	ldr	r1, [pc, #180]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d011      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027d2:	4b28      	ldr	r3, [pc, #160]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027e0:	4924      	ldr	r1, [pc, #144]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027f0:	d101      	bne.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80027f2:	2301      	movs	r3, #1
 80027f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002802:	2301      	movs	r3, #1
 8002804:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00a      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002812:	4b18      	ldr	r3, [pc, #96]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002818:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002820:	4914      	ldr	r1, [pc, #80]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00b      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002834:	4b0f      	ldr	r3, [pc, #60]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002844:	490b      	ldr	r1, [pc, #44]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00f      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002858:	4b06      	ldr	r3, [pc, #24]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800285e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002868:	4902      	ldr	r1, [pc, #8]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002870:	e002      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00b      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002884:	4b8a      	ldr	r3, [pc, #552]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002886:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800288a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002894:	4986      	ldr	r1, [pc, #536]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00b      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80028a8:	4b81      	ldr	r3, [pc, #516]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028ae:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028b8:	497d      	ldr	r1, [pc, #500]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d006      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 80d6 	beq.w	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028d4:	4b76      	ldr	r3, [pc, #472]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a75      	ldr	r2, [pc, #468]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80028de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e0:	f7fe fa10 	bl	8000d04 <HAL_GetTick>
 80028e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028e8:	f7fe fa0c 	bl	8000d04 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	@ 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e195      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028fa:	4b6d      	ldr	r3, [pc, #436]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d021      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002916:	2b00      	cmp	r3, #0
 8002918:	d11d      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800291a:	4b65      	ldr	r3, [pc, #404]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800291c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002920:	0c1b      	lsrs	r3, r3, #16
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002928:	4b61      	ldr	r3, [pc, #388]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800292a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800292e:	0e1b      	lsrs	r3, r3, #24
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	019a      	lsls	r2, r3, #6
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	041b      	lsls	r3, r3, #16
 8002940:	431a      	orrs	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	061b      	lsls	r3, r3, #24
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	071b      	lsls	r3, r3, #28
 800294e:	4958      	ldr	r1, [pc, #352]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d004      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800296a:	d00a      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002974:	2b00      	cmp	r3, #0
 8002976:	d02e      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002980:	d129      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002982:	4b4b      	ldr	r3, [pc, #300]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002984:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002988:	0c1b      	lsrs	r3, r3, #16
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002990:	4b47      	ldr	r3, [pc, #284]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002996:	0f1b      	lsrs	r3, r3, #28
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	019a      	lsls	r2, r3, #6
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	041b      	lsls	r3, r3, #16
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	061b      	lsls	r3, r3, #24
 80029b0:	431a      	orrs	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	071b      	lsls	r3, r3, #28
 80029b6:	493e      	ldr	r1, [pc, #248]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80029be:	4b3c      	ldr	r3, [pc, #240]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029c4:	f023 021f 	bic.w	r2, r3, #31
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029cc:	3b01      	subs	r3, #1
 80029ce:	4938      	ldr	r1, [pc, #224]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d01d      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029e2:	4b33      	ldr	r3, [pc, #204]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029e8:	0e1b      	lsrs	r3, r3, #24
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029f0:	4b2f      	ldr	r3, [pc, #188]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029f6:	0f1b      	lsrs	r3, r3, #28
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	019a      	lsls	r2, r3, #6
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	041b      	lsls	r3, r3, #16
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	061b      	lsls	r3, r3, #24
 8002a10:	431a      	orrs	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	071b      	lsls	r3, r3, #28
 8002a16:	4926      	ldr	r1, [pc, #152]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d011      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	019a      	lsls	r2, r3, #6
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	041b      	lsls	r3, r3, #16
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	061b      	lsls	r3, r3, #24
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	071b      	lsls	r3, r3, #28
 8002a46:	491a      	ldr	r1, [pc, #104]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a4e:	4b18      	ldr	r3, [pc, #96]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a17      	ldr	r2, [pc, #92]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a5a:	f7fe f953 	bl	8000d04 <HAL_GetTick>
 8002a5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a60:	e008      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a62:	f7fe f94f 	bl	8000d04 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b64      	cmp	r3, #100	@ 0x64
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e0d8      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a74:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	f040 80ce 	bne.w	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a88:	4b09      	ldr	r3, [pc, #36]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a08      	ldr	r2, [pc, #32]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a94:	f7fe f936 	bl	8000d04 <HAL_GetTick>
 8002a98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a9a:	e00b      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a9c:	f7fe f932 	bl	8000d04 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b64      	cmp	r3, #100	@ 0x64
 8002aa8:	d904      	bls.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e0bb      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ab4:	4b5e      	ldr	r3, [pc, #376]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002abc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ac0:	d0ec      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d02e      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d12a      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002aea:	4b51      	ldr	r3, [pc, #324]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af0:	0c1b      	lsrs	r3, r3, #16
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002af8:	4b4d      	ldr	r3, [pc, #308]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afe:	0f1b      	lsrs	r3, r3, #28
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	019a      	lsls	r2, r3, #6
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	041b      	lsls	r3, r3, #16
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	061b      	lsls	r3, r3, #24
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	071b      	lsls	r3, r3, #28
 8002b1e:	4944      	ldr	r1, [pc, #272]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b26:	4b42      	ldr	r3, [pc, #264]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b2c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b34:	3b01      	subs	r3, #1
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	493d      	ldr	r1, [pc, #244]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d022      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b54:	d11d      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b56:	4b36      	ldr	r3, [pc, #216]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5c:	0e1b      	lsrs	r3, r3, #24
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b64:	4b32      	ldr	r3, [pc, #200]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6a:	0f1b      	lsrs	r3, r3, #28
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	019a      	lsls	r2, r3, #6
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	041b      	lsls	r3, r3, #16
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	061b      	lsls	r3, r3, #24
 8002b84:	431a      	orrs	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	071b      	lsls	r3, r3, #28
 8002b8a:	4929      	ldr	r1, [pc, #164]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d028      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b9e:	4b24      	ldr	r3, [pc, #144]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba4:	0e1b      	lsrs	r3, r3, #24
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bac:	4b20      	ldr	r3, [pc, #128]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb2:	0c1b      	lsrs	r3, r3, #16
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	019a      	lsls	r2, r3, #6
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	041b      	lsls	r3, r3, #16
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	061b      	lsls	r3, r3, #24
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	071b      	lsls	r3, r3, #28
 8002bd2:	4917      	ldr	r1, [pc, #92]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002bda:	4b15      	ldr	r3, [pc, #84]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002be0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be8:	4911      	ldr	r1, [pc, #68]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a0e      	ldr	r2, [pc, #56]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bfc:	f7fe f882 	bl	8000d04 <HAL_GetTick>
 8002c00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c04:	f7fe f87e 	bl	8000d04 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b64      	cmp	r3, #100	@ 0x64
 8002c10:	d901      	bls.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e007      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c16:	4b06      	ldr	r3, [pc, #24]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c22:	d1ef      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3720      	adds	r7, #32
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800

08002c34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e040      	b.n	8002cc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fd ff7a 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2224      	movs	r2, #36	@ 0x24
 8002c60:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0201 	bic.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fb16 	bl	80032ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f8af 	bl	8002de4 <UART_SetConfig>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e01b      	b.n	8002cc8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0201 	orr.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 fb95 	bl	80033f0 <UART_CheckIdleState>
 8002cc6:	4603      	mov	r3, r0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	@ 0x28
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ce4:	2b20      	cmp	r3, #32
 8002ce6:	d177      	bne.n	8002dd8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <HAL_UART_Transmit+0x24>
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e070      	b.n	8002dda <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2221      	movs	r2, #33	@ 0x21
 8002d04:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d06:	f7fd fffd 	bl	8000d04 <HAL_GetTick>
 8002d0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	88fa      	ldrh	r2, [r7, #6]
 8002d10:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	88fa      	ldrh	r2, [r7, #6]
 8002d18:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d24:	d108      	bne.n	8002d38 <HAL_UART_Transmit+0x68>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d104      	bne.n	8002d38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	e003      	b.n	8002d40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d40:	e02f      	b.n	8002da2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2180      	movs	r1, #128	@ 0x80
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fbf7 	bl	8003540 <UART_WaitOnFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d004      	beq.n	8002d62 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e03b      	b.n	8002dda <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10b      	bne.n	8002d80 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d76:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	3302      	adds	r3, #2
 8002d7c:	61bb      	str	r3, [r7, #24]
 8002d7e:	e007      	b.n	8002d90 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	781a      	ldrb	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1c9      	bne.n	8002d42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2200      	movs	r2, #0
 8002db6:	2140      	movs	r1, #64	@ 0x40
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 fbc1 	bl	8003540 <UART_WaitOnFlagUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d004      	beq.n	8002dce <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e005      	b.n	8002dda <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	e000      	b.n	8002dda <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002dd8:	2302      	movs	r3, #2
  }
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3720      	adds	r7, #32
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	4ba6      	ldr	r3, [pc, #664]	@ (80030a8 <UART_SetConfig+0x2c4>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6812      	ldr	r2, [r2, #0]
 8002e16:	6979      	ldr	r1, [r7, #20]
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a94      	ldr	r2, [pc, #592]	@ (80030ac <UART_SetConfig+0x2c8>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d120      	bne.n	8002ea2 <UART_SetConfig+0xbe>
 8002e60:	4b93      	ldr	r3, [pc, #588]	@ (80030b0 <UART_SetConfig+0x2cc>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d816      	bhi.n	8002e9c <UART_SetConfig+0xb8>
 8002e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e74 <UART_SetConfig+0x90>)
 8002e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e74:	08002e85 	.word	0x08002e85
 8002e78:	08002e91 	.word	0x08002e91
 8002e7c:	08002e8b 	.word	0x08002e8b
 8002e80:	08002e97 	.word	0x08002e97
 8002e84:	2301      	movs	r3, #1
 8002e86:	77fb      	strb	r3, [r7, #31]
 8002e88:	e150      	b.n	800312c <UART_SetConfig+0x348>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	77fb      	strb	r3, [r7, #31]
 8002e8e:	e14d      	b.n	800312c <UART_SetConfig+0x348>
 8002e90:	2304      	movs	r3, #4
 8002e92:	77fb      	strb	r3, [r7, #31]
 8002e94:	e14a      	b.n	800312c <UART_SetConfig+0x348>
 8002e96:	2308      	movs	r3, #8
 8002e98:	77fb      	strb	r3, [r7, #31]
 8002e9a:	e147      	b.n	800312c <UART_SetConfig+0x348>
 8002e9c:	2310      	movs	r3, #16
 8002e9e:	77fb      	strb	r3, [r7, #31]
 8002ea0:	e144      	b.n	800312c <UART_SetConfig+0x348>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a83      	ldr	r2, [pc, #524]	@ (80030b4 <UART_SetConfig+0x2d0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d132      	bne.n	8002f12 <UART_SetConfig+0x12e>
 8002eac:	4b80      	ldr	r3, [pc, #512]	@ (80030b0 <UART_SetConfig+0x2cc>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	2b0c      	cmp	r3, #12
 8002eb8:	d828      	bhi.n	8002f0c <UART_SetConfig+0x128>
 8002eba:	a201      	add	r2, pc, #4	@ (adr r2, 8002ec0 <UART_SetConfig+0xdc>)
 8002ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec0:	08002ef5 	.word	0x08002ef5
 8002ec4:	08002f0d 	.word	0x08002f0d
 8002ec8:	08002f0d 	.word	0x08002f0d
 8002ecc:	08002f0d 	.word	0x08002f0d
 8002ed0:	08002f01 	.word	0x08002f01
 8002ed4:	08002f0d 	.word	0x08002f0d
 8002ed8:	08002f0d 	.word	0x08002f0d
 8002edc:	08002f0d 	.word	0x08002f0d
 8002ee0:	08002efb 	.word	0x08002efb
 8002ee4:	08002f0d 	.word	0x08002f0d
 8002ee8:	08002f0d 	.word	0x08002f0d
 8002eec:	08002f0d 	.word	0x08002f0d
 8002ef0:	08002f07 	.word	0x08002f07
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	77fb      	strb	r3, [r7, #31]
 8002ef8:	e118      	b.n	800312c <UART_SetConfig+0x348>
 8002efa:	2302      	movs	r3, #2
 8002efc:	77fb      	strb	r3, [r7, #31]
 8002efe:	e115      	b.n	800312c <UART_SetConfig+0x348>
 8002f00:	2304      	movs	r3, #4
 8002f02:	77fb      	strb	r3, [r7, #31]
 8002f04:	e112      	b.n	800312c <UART_SetConfig+0x348>
 8002f06:	2308      	movs	r3, #8
 8002f08:	77fb      	strb	r3, [r7, #31]
 8002f0a:	e10f      	b.n	800312c <UART_SetConfig+0x348>
 8002f0c:	2310      	movs	r3, #16
 8002f0e:	77fb      	strb	r3, [r7, #31]
 8002f10:	e10c      	b.n	800312c <UART_SetConfig+0x348>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a68      	ldr	r2, [pc, #416]	@ (80030b8 <UART_SetConfig+0x2d4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d120      	bne.n	8002f5e <UART_SetConfig+0x17a>
 8002f1c:	4b64      	ldr	r3, [pc, #400]	@ (80030b0 <UART_SetConfig+0x2cc>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f22:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002f26:	2b30      	cmp	r3, #48	@ 0x30
 8002f28:	d013      	beq.n	8002f52 <UART_SetConfig+0x16e>
 8002f2a:	2b30      	cmp	r3, #48	@ 0x30
 8002f2c:	d814      	bhi.n	8002f58 <UART_SetConfig+0x174>
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	d009      	beq.n	8002f46 <UART_SetConfig+0x162>
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d810      	bhi.n	8002f58 <UART_SetConfig+0x174>
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <UART_SetConfig+0x15c>
 8002f3a:	2b10      	cmp	r3, #16
 8002f3c:	d006      	beq.n	8002f4c <UART_SetConfig+0x168>
 8002f3e:	e00b      	b.n	8002f58 <UART_SetConfig+0x174>
 8002f40:	2300      	movs	r3, #0
 8002f42:	77fb      	strb	r3, [r7, #31]
 8002f44:	e0f2      	b.n	800312c <UART_SetConfig+0x348>
 8002f46:	2302      	movs	r3, #2
 8002f48:	77fb      	strb	r3, [r7, #31]
 8002f4a:	e0ef      	b.n	800312c <UART_SetConfig+0x348>
 8002f4c:	2304      	movs	r3, #4
 8002f4e:	77fb      	strb	r3, [r7, #31]
 8002f50:	e0ec      	b.n	800312c <UART_SetConfig+0x348>
 8002f52:	2308      	movs	r3, #8
 8002f54:	77fb      	strb	r3, [r7, #31]
 8002f56:	e0e9      	b.n	800312c <UART_SetConfig+0x348>
 8002f58:	2310      	movs	r3, #16
 8002f5a:	77fb      	strb	r3, [r7, #31]
 8002f5c:	e0e6      	b.n	800312c <UART_SetConfig+0x348>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a56      	ldr	r2, [pc, #344]	@ (80030bc <UART_SetConfig+0x2d8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d120      	bne.n	8002faa <UART_SetConfig+0x1c6>
 8002f68:	4b51      	ldr	r3, [pc, #324]	@ (80030b0 <UART_SetConfig+0x2cc>)
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f6e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002f72:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f74:	d013      	beq.n	8002f9e <UART_SetConfig+0x1ba>
 8002f76:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f78:	d814      	bhi.n	8002fa4 <UART_SetConfig+0x1c0>
 8002f7a:	2b80      	cmp	r3, #128	@ 0x80
 8002f7c:	d009      	beq.n	8002f92 <UART_SetConfig+0x1ae>
 8002f7e:	2b80      	cmp	r3, #128	@ 0x80
 8002f80:	d810      	bhi.n	8002fa4 <UART_SetConfig+0x1c0>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <UART_SetConfig+0x1a8>
 8002f86:	2b40      	cmp	r3, #64	@ 0x40
 8002f88:	d006      	beq.n	8002f98 <UART_SetConfig+0x1b4>
 8002f8a:	e00b      	b.n	8002fa4 <UART_SetConfig+0x1c0>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	77fb      	strb	r3, [r7, #31]
 8002f90:	e0cc      	b.n	800312c <UART_SetConfig+0x348>
 8002f92:	2302      	movs	r3, #2
 8002f94:	77fb      	strb	r3, [r7, #31]
 8002f96:	e0c9      	b.n	800312c <UART_SetConfig+0x348>
 8002f98:	2304      	movs	r3, #4
 8002f9a:	77fb      	strb	r3, [r7, #31]
 8002f9c:	e0c6      	b.n	800312c <UART_SetConfig+0x348>
 8002f9e:	2308      	movs	r3, #8
 8002fa0:	77fb      	strb	r3, [r7, #31]
 8002fa2:	e0c3      	b.n	800312c <UART_SetConfig+0x348>
 8002fa4:	2310      	movs	r3, #16
 8002fa6:	77fb      	strb	r3, [r7, #31]
 8002fa8:	e0c0      	b.n	800312c <UART_SetConfig+0x348>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a44      	ldr	r2, [pc, #272]	@ (80030c0 <UART_SetConfig+0x2dc>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d125      	bne.n	8003000 <UART_SetConfig+0x21c>
 8002fb4:	4b3e      	ldr	r3, [pc, #248]	@ (80030b0 <UART_SetConfig+0x2cc>)
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fc2:	d017      	beq.n	8002ff4 <UART_SetConfig+0x210>
 8002fc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fc8:	d817      	bhi.n	8002ffa <UART_SetConfig+0x216>
 8002fca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fce:	d00b      	beq.n	8002fe8 <UART_SetConfig+0x204>
 8002fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fd4:	d811      	bhi.n	8002ffa <UART_SetConfig+0x216>
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <UART_SetConfig+0x1fe>
 8002fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fde:	d006      	beq.n	8002fee <UART_SetConfig+0x20a>
 8002fe0:	e00b      	b.n	8002ffa <UART_SetConfig+0x216>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	77fb      	strb	r3, [r7, #31]
 8002fe6:	e0a1      	b.n	800312c <UART_SetConfig+0x348>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	77fb      	strb	r3, [r7, #31]
 8002fec:	e09e      	b.n	800312c <UART_SetConfig+0x348>
 8002fee:	2304      	movs	r3, #4
 8002ff0:	77fb      	strb	r3, [r7, #31]
 8002ff2:	e09b      	b.n	800312c <UART_SetConfig+0x348>
 8002ff4:	2308      	movs	r3, #8
 8002ff6:	77fb      	strb	r3, [r7, #31]
 8002ff8:	e098      	b.n	800312c <UART_SetConfig+0x348>
 8002ffa:	2310      	movs	r3, #16
 8002ffc:	77fb      	strb	r3, [r7, #31]
 8002ffe:	e095      	b.n	800312c <UART_SetConfig+0x348>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a2f      	ldr	r2, [pc, #188]	@ (80030c4 <UART_SetConfig+0x2e0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d125      	bne.n	8003056 <UART_SetConfig+0x272>
 800300a:	4b29      	ldr	r3, [pc, #164]	@ (80030b0 <UART_SetConfig+0x2cc>)
 800300c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003010:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003014:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003018:	d017      	beq.n	800304a <UART_SetConfig+0x266>
 800301a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800301e:	d817      	bhi.n	8003050 <UART_SetConfig+0x26c>
 8003020:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003024:	d00b      	beq.n	800303e <UART_SetConfig+0x25a>
 8003026:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800302a:	d811      	bhi.n	8003050 <UART_SetConfig+0x26c>
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <UART_SetConfig+0x254>
 8003030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003034:	d006      	beq.n	8003044 <UART_SetConfig+0x260>
 8003036:	e00b      	b.n	8003050 <UART_SetConfig+0x26c>
 8003038:	2301      	movs	r3, #1
 800303a:	77fb      	strb	r3, [r7, #31]
 800303c:	e076      	b.n	800312c <UART_SetConfig+0x348>
 800303e:	2302      	movs	r3, #2
 8003040:	77fb      	strb	r3, [r7, #31]
 8003042:	e073      	b.n	800312c <UART_SetConfig+0x348>
 8003044:	2304      	movs	r3, #4
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e070      	b.n	800312c <UART_SetConfig+0x348>
 800304a:	2308      	movs	r3, #8
 800304c:	77fb      	strb	r3, [r7, #31]
 800304e:	e06d      	b.n	800312c <UART_SetConfig+0x348>
 8003050:	2310      	movs	r3, #16
 8003052:	77fb      	strb	r3, [r7, #31]
 8003054:	e06a      	b.n	800312c <UART_SetConfig+0x348>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1b      	ldr	r2, [pc, #108]	@ (80030c8 <UART_SetConfig+0x2e4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d138      	bne.n	80030d2 <UART_SetConfig+0x2ee>
 8003060:	4b13      	ldr	r3, [pc, #76]	@ (80030b0 <UART_SetConfig+0x2cc>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003066:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800306a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800306e:	d017      	beq.n	80030a0 <UART_SetConfig+0x2bc>
 8003070:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003074:	d82a      	bhi.n	80030cc <UART_SetConfig+0x2e8>
 8003076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800307a:	d00b      	beq.n	8003094 <UART_SetConfig+0x2b0>
 800307c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003080:	d824      	bhi.n	80030cc <UART_SetConfig+0x2e8>
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <UART_SetConfig+0x2aa>
 8003086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800308a:	d006      	beq.n	800309a <UART_SetConfig+0x2b6>
 800308c:	e01e      	b.n	80030cc <UART_SetConfig+0x2e8>
 800308e:	2300      	movs	r3, #0
 8003090:	77fb      	strb	r3, [r7, #31]
 8003092:	e04b      	b.n	800312c <UART_SetConfig+0x348>
 8003094:	2302      	movs	r3, #2
 8003096:	77fb      	strb	r3, [r7, #31]
 8003098:	e048      	b.n	800312c <UART_SetConfig+0x348>
 800309a:	2304      	movs	r3, #4
 800309c:	77fb      	strb	r3, [r7, #31]
 800309e:	e045      	b.n	800312c <UART_SetConfig+0x348>
 80030a0:	2308      	movs	r3, #8
 80030a2:	77fb      	strb	r3, [r7, #31]
 80030a4:	e042      	b.n	800312c <UART_SetConfig+0x348>
 80030a6:	bf00      	nop
 80030a8:	efff69f3 	.word	0xefff69f3
 80030ac:	40011000 	.word	0x40011000
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40004400 	.word	0x40004400
 80030b8:	40004800 	.word	0x40004800
 80030bc:	40004c00 	.word	0x40004c00
 80030c0:	40005000 	.word	0x40005000
 80030c4:	40011400 	.word	0x40011400
 80030c8:	40007800 	.word	0x40007800
 80030cc:	2310      	movs	r3, #16
 80030ce:	77fb      	strb	r3, [r7, #31]
 80030d0:	e02c      	b.n	800312c <UART_SetConfig+0x348>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a72      	ldr	r2, [pc, #456]	@ (80032a0 <UART_SetConfig+0x4bc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d125      	bne.n	8003128 <UART_SetConfig+0x344>
 80030dc:	4b71      	ldr	r3, [pc, #452]	@ (80032a4 <UART_SetConfig+0x4c0>)
 80030de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80030e6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80030ea:	d017      	beq.n	800311c <UART_SetConfig+0x338>
 80030ec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80030f0:	d817      	bhi.n	8003122 <UART_SetConfig+0x33e>
 80030f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030f6:	d00b      	beq.n	8003110 <UART_SetConfig+0x32c>
 80030f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030fc:	d811      	bhi.n	8003122 <UART_SetConfig+0x33e>
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <UART_SetConfig+0x326>
 8003102:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003106:	d006      	beq.n	8003116 <UART_SetConfig+0x332>
 8003108:	e00b      	b.n	8003122 <UART_SetConfig+0x33e>
 800310a:	2300      	movs	r3, #0
 800310c:	77fb      	strb	r3, [r7, #31]
 800310e:	e00d      	b.n	800312c <UART_SetConfig+0x348>
 8003110:	2302      	movs	r3, #2
 8003112:	77fb      	strb	r3, [r7, #31]
 8003114:	e00a      	b.n	800312c <UART_SetConfig+0x348>
 8003116:	2304      	movs	r3, #4
 8003118:	77fb      	strb	r3, [r7, #31]
 800311a:	e007      	b.n	800312c <UART_SetConfig+0x348>
 800311c:	2308      	movs	r3, #8
 800311e:	77fb      	strb	r3, [r7, #31]
 8003120:	e004      	b.n	800312c <UART_SetConfig+0x348>
 8003122:	2310      	movs	r3, #16
 8003124:	77fb      	strb	r3, [r7, #31]
 8003126:	e001      	b.n	800312c <UART_SetConfig+0x348>
 8003128:	2310      	movs	r3, #16
 800312a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003134:	d15b      	bne.n	80031ee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003136:	7ffb      	ldrb	r3, [r7, #31]
 8003138:	2b08      	cmp	r3, #8
 800313a:	d828      	bhi.n	800318e <UART_SetConfig+0x3aa>
 800313c:	a201      	add	r2, pc, #4	@ (adr r2, 8003144 <UART_SetConfig+0x360>)
 800313e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003142:	bf00      	nop
 8003144:	08003169 	.word	0x08003169
 8003148:	08003171 	.word	0x08003171
 800314c:	08003179 	.word	0x08003179
 8003150:	0800318f 	.word	0x0800318f
 8003154:	0800317f 	.word	0x0800317f
 8003158:	0800318f 	.word	0x0800318f
 800315c:	0800318f 	.word	0x0800318f
 8003160:	0800318f 	.word	0x0800318f
 8003164:	08003187 	.word	0x08003187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003168:	f7ff f914 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 800316c:	61b8      	str	r0, [r7, #24]
        break;
 800316e:	e013      	b.n	8003198 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003170:	f7ff f924 	bl	80023bc <HAL_RCC_GetPCLK2Freq>
 8003174:	61b8      	str	r0, [r7, #24]
        break;
 8003176:	e00f      	b.n	8003198 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003178:	4b4b      	ldr	r3, [pc, #300]	@ (80032a8 <UART_SetConfig+0x4c4>)
 800317a:	61bb      	str	r3, [r7, #24]
        break;
 800317c:	e00c      	b.n	8003198 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800317e:	f7ff f837 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 8003182:	61b8      	str	r0, [r7, #24]
        break;
 8003184:	e008      	b.n	8003198 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003186:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800318a:	61bb      	str	r3, [r7, #24]
        break;
 800318c:	e004      	b.n	8003198 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	77bb      	strb	r3, [r7, #30]
        break;
 8003196:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d074      	beq.n	8003288 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	005a      	lsls	r2, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	085b      	lsrs	r3, r3, #1
 80031a8:	441a      	add	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	2b0f      	cmp	r3, #15
 80031b8:	d916      	bls.n	80031e8 <UART_SetConfig+0x404>
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031c0:	d212      	bcs.n	80031e8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	f023 030f 	bic.w	r3, r3, #15
 80031ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	085b      	lsrs	r3, r3, #1
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	89fb      	ldrh	r3, [r7, #14]
 80031da:	4313      	orrs	r3, r2
 80031dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	89fa      	ldrh	r2, [r7, #14]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	e04f      	b.n	8003288 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	77bb      	strb	r3, [r7, #30]
 80031ec:	e04c      	b.n	8003288 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031ee:	7ffb      	ldrb	r3, [r7, #31]
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d828      	bhi.n	8003246 <UART_SetConfig+0x462>
 80031f4:	a201      	add	r2, pc, #4	@ (adr r2, 80031fc <UART_SetConfig+0x418>)
 80031f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fa:	bf00      	nop
 80031fc:	08003221 	.word	0x08003221
 8003200:	08003229 	.word	0x08003229
 8003204:	08003231 	.word	0x08003231
 8003208:	08003247 	.word	0x08003247
 800320c:	08003237 	.word	0x08003237
 8003210:	08003247 	.word	0x08003247
 8003214:	08003247 	.word	0x08003247
 8003218:	08003247 	.word	0x08003247
 800321c:	0800323f 	.word	0x0800323f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003220:	f7ff f8b8 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 8003224:	61b8      	str	r0, [r7, #24]
        break;
 8003226:	e013      	b.n	8003250 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003228:	f7ff f8c8 	bl	80023bc <HAL_RCC_GetPCLK2Freq>
 800322c:	61b8      	str	r0, [r7, #24]
        break;
 800322e:	e00f      	b.n	8003250 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003230:	4b1d      	ldr	r3, [pc, #116]	@ (80032a8 <UART_SetConfig+0x4c4>)
 8003232:	61bb      	str	r3, [r7, #24]
        break;
 8003234:	e00c      	b.n	8003250 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003236:	f7fe ffdb 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 800323a:	61b8      	str	r0, [r7, #24]
        break;
 800323c:	e008      	b.n	8003250 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800323e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003242:	61bb      	str	r3, [r7, #24]
        break;
 8003244:	e004      	b.n	8003250 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	77bb      	strb	r3, [r7, #30]
        break;
 800324e:	bf00      	nop
    }

    if (pclk != 0U)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d018      	beq.n	8003288 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	085a      	lsrs	r2, r3, #1
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	441a      	add	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	fbb2 f3f3 	udiv	r3, r2, r3
 8003268:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b0f      	cmp	r3, #15
 800326e:	d909      	bls.n	8003284 <UART_SetConfig+0x4a0>
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003276:	d205      	bcs.n	8003284 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	b29a      	uxth	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	e001      	b.n	8003288 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003294:	7fbb      	ldrb	r3, [r7, #30]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40007c00 	.word	0x40007c00
 80032a4:	40023800 	.word	0x40023800
 80032a8:	00f42400 	.word	0x00f42400

080032ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003388:	2b00      	cmp	r3, #0
 800338a:	d01a      	beq.n	80033c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033aa:	d10a      	bne.n	80033c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]
  }
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b098      	sub	sp, #96	@ 0x60
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003400:	f7fd fc80 	bl	8000d04 <HAL_GetTick>
 8003404:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b08      	cmp	r3, #8
 8003412:	d12e      	bne.n	8003472 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003414:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800341c:	2200      	movs	r2, #0
 800341e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f88c 	bl	8003540 <UART_WaitOnFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d021      	beq.n	8003472 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003436:	e853 3f00 	ldrex	r3, [r3]
 800343a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800343c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800343e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003442:	653b      	str	r3, [r7, #80]	@ 0x50
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	461a      	mov	r2, r3
 800344a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800344c:	647b      	str	r3, [r7, #68]	@ 0x44
 800344e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003450:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003452:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003454:	e841 2300 	strex	r3, r2, [r1]
 8003458:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800345a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1e6      	bne.n	800342e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e062      	b.n	8003538 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b04      	cmp	r3, #4
 800347e:	d149      	bne.n	8003514 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003480:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003488:	2200      	movs	r2, #0
 800348a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f856 	bl	8003540 <UART_WaitOnFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d03c      	beq.n	8003514 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	623b      	str	r3, [r7, #32]
   return(result);
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	461a      	mov	r2, r3
 80034b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80034ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034c0:	e841 2300 	strex	r3, r2, [r1]
 80034c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1e6      	bne.n	800349a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3308      	adds	r3, #8
 80034d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	e853 3f00 	ldrex	r3, [r3]
 80034da:	60fb      	str	r3, [r7, #12]
   return(result);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0301 	bic.w	r3, r3, #1
 80034e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3308      	adds	r3, #8
 80034ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034ec:	61fa      	str	r2, [r7, #28]
 80034ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f0:	69b9      	ldr	r1, [r7, #24]
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	e841 2300 	strex	r3, r2, [r1]
 80034f8:	617b      	str	r3, [r7, #20]
   return(result);
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e5      	bne.n	80034cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e011      	b.n	8003538 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2220      	movs	r2, #32
 800351e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3758      	adds	r7, #88	@ 0x58
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	603b      	str	r3, [r7, #0]
 800354c:	4613      	mov	r3, r2
 800354e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003550:	e04f      	b.n	80035f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003558:	d04b      	beq.n	80035f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355a:	f7fd fbd3 	bl	8000d04 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	429a      	cmp	r2, r3
 8003568:	d302      	bcc.n	8003570 <UART_WaitOnFlagUntilTimeout+0x30>
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e04e      	b.n	8003612 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b00      	cmp	r3, #0
 8003580:	d037      	beq.n	80035f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b80      	cmp	r3, #128	@ 0x80
 8003586:	d034      	beq.n	80035f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b40      	cmp	r3, #64	@ 0x40
 800358c:	d031      	beq.n	80035f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b08      	cmp	r3, #8
 800359a:	d110      	bne.n	80035be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2208      	movs	r2, #8
 80035a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f838 	bl	800361a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2208      	movs	r2, #8
 80035ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e029      	b.n	8003612 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035cc:	d111      	bne.n	80035f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f81e 	bl	800361a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e00f      	b.n	8003612 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69da      	ldr	r2, [r3, #28]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4013      	ands	r3, r2
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	429a      	cmp	r2, r3
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	429a      	cmp	r2, r3
 800360e:	d0a0      	beq.n	8003552 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800361a:	b480      	push	{r7}
 800361c:	b095      	sub	sp, #84	@ 0x54
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800362a:	e853 3f00 	ldrex	r3, [r3]
 800362e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003632:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003636:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003640:	643b      	str	r3, [r7, #64]	@ 0x40
 8003642:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003644:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003646:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003648:	e841 2300 	strex	r3, r2, [r1]
 800364c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800364e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1e6      	bne.n	8003622 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	3308      	adds	r3, #8
 800365a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	e853 3f00 	ldrex	r3, [r3]
 8003662:	61fb      	str	r3, [r7, #28]
   return(result);
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f023 0301 	bic.w	r3, r3, #1
 800366a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3308      	adds	r3, #8
 8003672:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003674:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003676:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003678:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800367a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800367c:	e841 2300 	strex	r3, r2, [r1]
 8003680:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e5      	bne.n	8003654 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800368c:	2b01      	cmp	r3, #1
 800368e:	d118      	bne.n	80036c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	e853 3f00 	ldrex	r3, [r3]
 800369c:	60bb      	str	r3, [r7, #8]
   return(result);
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f023 0310 	bic.w	r3, r3, #16
 80036a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036ae:	61bb      	str	r3, [r7, #24]
 80036b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b2:	6979      	ldr	r1, [r7, #20]
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	e841 2300 	strex	r3, r2, [r1]
 80036ba:	613b      	str	r3, [r7, #16]
   return(result);
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1e6      	bne.n	8003690 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80036d6:	bf00      	nop
 80036d8:	3754      	adds	r7, #84	@ 0x54
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
	...

080036e4 <sniprintf>:
 80036e4:	b40c      	push	{r2, r3}
 80036e6:	b530      	push	{r4, r5, lr}
 80036e8:	4b17      	ldr	r3, [pc, #92]	@ (8003748 <sniprintf+0x64>)
 80036ea:	1e0c      	subs	r4, r1, #0
 80036ec:	681d      	ldr	r5, [r3, #0]
 80036ee:	b09d      	sub	sp, #116	@ 0x74
 80036f0:	da08      	bge.n	8003704 <sniprintf+0x20>
 80036f2:	238b      	movs	r3, #139	@ 0x8b
 80036f4:	602b      	str	r3, [r5, #0]
 80036f6:	f04f 30ff 	mov.w	r0, #4294967295
 80036fa:	b01d      	add	sp, #116	@ 0x74
 80036fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003700:	b002      	add	sp, #8
 8003702:	4770      	bx	lr
 8003704:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003708:	f8ad 3014 	strh.w	r3, [sp, #20]
 800370c:	bf14      	ite	ne
 800370e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003712:	4623      	moveq	r3, r4
 8003714:	9304      	str	r3, [sp, #16]
 8003716:	9307      	str	r3, [sp, #28]
 8003718:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800371c:	9002      	str	r0, [sp, #8]
 800371e:	9006      	str	r0, [sp, #24]
 8003720:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003724:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003726:	ab21      	add	r3, sp, #132	@ 0x84
 8003728:	a902      	add	r1, sp, #8
 800372a:	4628      	mov	r0, r5
 800372c:	9301      	str	r3, [sp, #4]
 800372e:	f000 f995 	bl	8003a5c <_svfiprintf_r>
 8003732:	1c43      	adds	r3, r0, #1
 8003734:	bfbc      	itt	lt
 8003736:	238b      	movlt	r3, #139	@ 0x8b
 8003738:	602b      	strlt	r3, [r5, #0]
 800373a:	2c00      	cmp	r4, #0
 800373c:	d0dd      	beq.n	80036fa <sniprintf+0x16>
 800373e:	9b02      	ldr	r3, [sp, #8]
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
 8003744:	e7d9      	b.n	80036fa <sniprintf+0x16>
 8003746:	bf00      	nop
 8003748:	2000000c 	.word	0x2000000c

0800374c <memset>:
 800374c:	4402      	add	r2, r0
 800374e:	4603      	mov	r3, r0
 8003750:	4293      	cmp	r3, r2
 8003752:	d100      	bne.n	8003756 <memset+0xa>
 8003754:	4770      	bx	lr
 8003756:	f803 1b01 	strb.w	r1, [r3], #1
 800375a:	e7f9      	b.n	8003750 <memset+0x4>

0800375c <__errno>:
 800375c:	4b01      	ldr	r3, [pc, #4]	@ (8003764 <__errno+0x8>)
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	2000000c 	.word	0x2000000c

08003768 <__libc_init_array>:
 8003768:	b570      	push	{r4, r5, r6, lr}
 800376a:	4d0d      	ldr	r5, [pc, #52]	@ (80037a0 <__libc_init_array+0x38>)
 800376c:	4c0d      	ldr	r4, [pc, #52]	@ (80037a4 <__libc_init_array+0x3c>)
 800376e:	1b64      	subs	r4, r4, r5
 8003770:	10a4      	asrs	r4, r4, #2
 8003772:	2600      	movs	r6, #0
 8003774:	42a6      	cmp	r6, r4
 8003776:	d109      	bne.n	800378c <__libc_init_array+0x24>
 8003778:	4d0b      	ldr	r5, [pc, #44]	@ (80037a8 <__libc_init_array+0x40>)
 800377a:	4c0c      	ldr	r4, [pc, #48]	@ (80037ac <__libc_init_array+0x44>)
 800377c:	f000 fc66 	bl	800404c <_init>
 8003780:	1b64      	subs	r4, r4, r5
 8003782:	10a4      	asrs	r4, r4, #2
 8003784:	2600      	movs	r6, #0
 8003786:	42a6      	cmp	r6, r4
 8003788:	d105      	bne.n	8003796 <__libc_init_array+0x2e>
 800378a:	bd70      	pop	{r4, r5, r6, pc}
 800378c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003790:	4798      	blx	r3
 8003792:	3601      	adds	r6, #1
 8003794:	e7ee      	b.n	8003774 <__libc_init_array+0xc>
 8003796:	f855 3b04 	ldr.w	r3, [r5], #4
 800379a:	4798      	blx	r3
 800379c:	3601      	adds	r6, #1
 800379e:	e7f2      	b.n	8003786 <__libc_init_array+0x1e>
 80037a0:	080040d4 	.word	0x080040d4
 80037a4:	080040d4 	.word	0x080040d4
 80037a8:	080040d4 	.word	0x080040d4
 80037ac:	080040d8 	.word	0x080040d8

080037b0 <__retarget_lock_acquire_recursive>:
 80037b0:	4770      	bx	lr

080037b2 <__retarget_lock_release_recursive>:
 80037b2:	4770      	bx	lr

080037b4 <_free_r>:
 80037b4:	b538      	push	{r3, r4, r5, lr}
 80037b6:	4605      	mov	r5, r0
 80037b8:	2900      	cmp	r1, #0
 80037ba:	d041      	beq.n	8003840 <_free_r+0x8c>
 80037bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037c0:	1f0c      	subs	r4, r1, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	bfb8      	it	lt
 80037c6:	18e4      	addlt	r4, r4, r3
 80037c8:	f000 f8e0 	bl	800398c <__malloc_lock>
 80037cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003844 <_free_r+0x90>)
 80037ce:	6813      	ldr	r3, [r2, #0]
 80037d0:	b933      	cbnz	r3, 80037e0 <_free_r+0x2c>
 80037d2:	6063      	str	r3, [r4, #4]
 80037d4:	6014      	str	r4, [r2, #0]
 80037d6:	4628      	mov	r0, r5
 80037d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037dc:	f000 b8dc 	b.w	8003998 <__malloc_unlock>
 80037e0:	42a3      	cmp	r3, r4
 80037e2:	d908      	bls.n	80037f6 <_free_r+0x42>
 80037e4:	6820      	ldr	r0, [r4, #0]
 80037e6:	1821      	adds	r1, r4, r0
 80037e8:	428b      	cmp	r3, r1
 80037ea:	bf01      	itttt	eq
 80037ec:	6819      	ldreq	r1, [r3, #0]
 80037ee:	685b      	ldreq	r3, [r3, #4]
 80037f0:	1809      	addeq	r1, r1, r0
 80037f2:	6021      	streq	r1, [r4, #0]
 80037f4:	e7ed      	b.n	80037d2 <_free_r+0x1e>
 80037f6:	461a      	mov	r2, r3
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	b10b      	cbz	r3, 8003800 <_free_r+0x4c>
 80037fc:	42a3      	cmp	r3, r4
 80037fe:	d9fa      	bls.n	80037f6 <_free_r+0x42>
 8003800:	6811      	ldr	r1, [r2, #0]
 8003802:	1850      	adds	r0, r2, r1
 8003804:	42a0      	cmp	r0, r4
 8003806:	d10b      	bne.n	8003820 <_free_r+0x6c>
 8003808:	6820      	ldr	r0, [r4, #0]
 800380a:	4401      	add	r1, r0
 800380c:	1850      	adds	r0, r2, r1
 800380e:	4283      	cmp	r3, r0
 8003810:	6011      	str	r1, [r2, #0]
 8003812:	d1e0      	bne.n	80037d6 <_free_r+0x22>
 8003814:	6818      	ldr	r0, [r3, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	6053      	str	r3, [r2, #4]
 800381a:	4408      	add	r0, r1
 800381c:	6010      	str	r0, [r2, #0]
 800381e:	e7da      	b.n	80037d6 <_free_r+0x22>
 8003820:	d902      	bls.n	8003828 <_free_r+0x74>
 8003822:	230c      	movs	r3, #12
 8003824:	602b      	str	r3, [r5, #0]
 8003826:	e7d6      	b.n	80037d6 <_free_r+0x22>
 8003828:	6820      	ldr	r0, [r4, #0]
 800382a:	1821      	adds	r1, r4, r0
 800382c:	428b      	cmp	r3, r1
 800382e:	bf04      	itt	eq
 8003830:	6819      	ldreq	r1, [r3, #0]
 8003832:	685b      	ldreq	r3, [r3, #4]
 8003834:	6063      	str	r3, [r4, #4]
 8003836:	bf04      	itt	eq
 8003838:	1809      	addeq	r1, r1, r0
 800383a:	6021      	streq	r1, [r4, #0]
 800383c:	6054      	str	r4, [r2, #4]
 800383e:	e7ca      	b.n	80037d6 <_free_r+0x22>
 8003840:	bd38      	pop	{r3, r4, r5, pc}
 8003842:	bf00      	nop
 8003844:	20000310 	.word	0x20000310

08003848 <sbrk_aligned>:
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	4e0f      	ldr	r6, [pc, #60]	@ (8003888 <sbrk_aligned+0x40>)
 800384c:	460c      	mov	r4, r1
 800384e:	6831      	ldr	r1, [r6, #0]
 8003850:	4605      	mov	r5, r0
 8003852:	b911      	cbnz	r1, 800385a <sbrk_aligned+0x12>
 8003854:	f000 fba6 	bl	8003fa4 <_sbrk_r>
 8003858:	6030      	str	r0, [r6, #0]
 800385a:	4621      	mov	r1, r4
 800385c:	4628      	mov	r0, r5
 800385e:	f000 fba1 	bl	8003fa4 <_sbrk_r>
 8003862:	1c43      	adds	r3, r0, #1
 8003864:	d103      	bne.n	800386e <sbrk_aligned+0x26>
 8003866:	f04f 34ff 	mov.w	r4, #4294967295
 800386a:	4620      	mov	r0, r4
 800386c:	bd70      	pop	{r4, r5, r6, pc}
 800386e:	1cc4      	adds	r4, r0, #3
 8003870:	f024 0403 	bic.w	r4, r4, #3
 8003874:	42a0      	cmp	r0, r4
 8003876:	d0f8      	beq.n	800386a <sbrk_aligned+0x22>
 8003878:	1a21      	subs	r1, r4, r0
 800387a:	4628      	mov	r0, r5
 800387c:	f000 fb92 	bl	8003fa4 <_sbrk_r>
 8003880:	3001      	adds	r0, #1
 8003882:	d1f2      	bne.n	800386a <sbrk_aligned+0x22>
 8003884:	e7ef      	b.n	8003866 <sbrk_aligned+0x1e>
 8003886:	bf00      	nop
 8003888:	2000030c 	.word	0x2000030c

0800388c <_malloc_r>:
 800388c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003890:	1ccd      	adds	r5, r1, #3
 8003892:	f025 0503 	bic.w	r5, r5, #3
 8003896:	3508      	adds	r5, #8
 8003898:	2d0c      	cmp	r5, #12
 800389a:	bf38      	it	cc
 800389c:	250c      	movcc	r5, #12
 800389e:	2d00      	cmp	r5, #0
 80038a0:	4606      	mov	r6, r0
 80038a2:	db01      	blt.n	80038a8 <_malloc_r+0x1c>
 80038a4:	42a9      	cmp	r1, r5
 80038a6:	d904      	bls.n	80038b2 <_malloc_r+0x26>
 80038a8:	230c      	movs	r3, #12
 80038aa:	6033      	str	r3, [r6, #0]
 80038ac:	2000      	movs	r0, #0
 80038ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003988 <_malloc_r+0xfc>
 80038b6:	f000 f869 	bl	800398c <__malloc_lock>
 80038ba:	f8d8 3000 	ldr.w	r3, [r8]
 80038be:	461c      	mov	r4, r3
 80038c0:	bb44      	cbnz	r4, 8003914 <_malloc_r+0x88>
 80038c2:	4629      	mov	r1, r5
 80038c4:	4630      	mov	r0, r6
 80038c6:	f7ff ffbf 	bl	8003848 <sbrk_aligned>
 80038ca:	1c43      	adds	r3, r0, #1
 80038cc:	4604      	mov	r4, r0
 80038ce:	d158      	bne.n	8003982 <_malloc_r+0xf6>
 80038d0:	f8d8 4000 	ldr.w	r4, [r8]
 80038d4:	4627      	mov	r7, r4
 80038d6:	2f00      	cmp	r7, #0
 80038d8:	d143      	bne.n	8003962 <_malloc_r+0xd6>
 80038da:	2c00      	cmp	r4, #0
 80038dc:	d04b      	beq.n	8003976 <_malloc_r+0xea>
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	4639      	mov	r1, r7
 80038e2:	4630      	mov	r0, r6
 80038e4:	eb04 0903 	add.w	r9, r4, r3
 80038e8:	f000 fb5c 	bl	8003fa4 <_sbrk_r>
 80038ec:	4581      	cmp	r9, r0
 80038ee:	d142      	bne.n	8003976 <_malloc_r+0xea>
 80038f0:	6821      	ldr	r1, [r4, #0]
 80038f2:	1a6d      	subs	r5, r5, r1
 80038f4:	4629      	mov	r1, r5
 80038f6:	4630      	mov	r0, r6
 80038f8:	f7ff ffa6 	bl	8003848 <sbrk_aligned>
 80038fc:	3001      	adds	r0, #1
 80038fe:	d03a      	beq.n	8003976 <_malloc_r+0xea>
 8003900:	6823      	ldr	r3, [r4, #0]
 8003902:	442b      	add	r3, r5
 8003904:	6023      	str	r3, [r4, #0]
 8003906:	f8d8 3000 	ldr.w	r3, [r8]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	bb62      	cbnz	r2, 8003968 <_malloc_r+0xdc>
 800390e:	f8c8 7000 	str.w	r7, [r8]
 8003912:	e00f      	b.n	8003934 <_malloc_r+0xa8>
 8003914:	6822      	ldr	r2, [r4, #0]
 8003916:	1b52      	subs	r2, r2, r5
 8003918:	d420      	bmi.n	800395c <_malloc_r+0xd0>
 800391a:	2a0b      	cmp	r2, #11
 800391c:	d917      	bls.n	800394e <_malloc_r+0xc2>
 800391e:	1961      	adds	r1, r4, r5
 8003920:	42a3      	cmp	r3, r4
 8003922:	6025      	str	r5, [r4, #0]
 8003924:	bf18      	it	ne
 8003926:	6059      	strne	r1, [r3, #4]
 8003928:	6863      	ldr	r3, [r4, #4]
 800392a:	bf08      	it	eq
 800392c:	f8c8 1000 	streq.w	r1, [r8]
 8003930:	5162      	str	r2, [r4, r5]
 8003932:	604b      	str	r3, [r1, #4]
 8003934:	4630      	mov	r0, r6
 8003936:	f000 f82f 	bl	8003998 <__malloc_unlock>
 800393a:	f104 000b 	add.w	r0, r4, #11
 800393e:	1d23      	adds	r3, r4, #4
 8003940:	f020 0007 	bic.w	r0, r0, #7
 8003944:	1ac2      	subs	r2, r0, r3
 8003946:	bf1c      	itt	ne
 8003948:	1a1b      	subne	r3, r3, r0
 800394a:	50a3      	strne	r3, [r4, r2]
 800394c:	e7af      	b.n	80038ae <_malloc_r+0x22>
 800394e:	6862      	ldr	r2, [r4, #4]
 8003950:	42a3      	cmp	r3, r4
 8003952:	bf0c      	ite	eq
 8003954:	f8c8 2000 	streq.w	r2, [r8]
 8003958:	605a      	strne	r2, [r3, #4]
 800395a:	e7eb      	b.n	8003934 <_malloc_r+0xa8>
 800395c:	4623      	mov	r3, r4
 800395e:	6864      	ldr	r4, [r4, #4]
 8003960:	e7ae      	b.n	80038c0 <_malloc_r+0x34>
 8003962:	463c      	mov	r4, r7
 8003964:	687f      	ldr	r7, [r7, #4]
 8003966:	e7b6      	b.n	80038d6 <_malloc_r+0x4a>
 8003968:	461a      	mov	r2, r3
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	42a3      	cmp	r3, r4
 800396e:	d1fb      	bne.n	8003968 <_malloc_r+0xdc>
 8003970:	2300      	movs	r3, #0
 8003972:	6053      	str	r3, [r2, #4]
 8003974:	e7de      	b.n	8003934 <_malloc_r+0xa8>
 8003976:	230c      	movs	r3, #12
 8003978:	6033      	str	r3, [r6, #0]
 800397a:	4630      	mov	r0, r6
 800397c:	f000 f80c 	bl	8003998 <__malloc_unlock>
 8003980:	e794      	b.n	80038ac <_malloc_r+0x20>
 8003982:	6005      	str	r5, [r0, #0]
 8003984:	e7d6      	b.n	8003934 <_malloc_r+0xa8>
 8003986:	bf00      	nop
 8003988:	20000310 	.word	0x20000310

0800398c <__malloc_lock>:
 800398c:	4801      	ldr	r0, [pc, #4]	@ (8003994 <__malloc_lock+0x8>)
 800398e:	f7ff bf0f 	b.w	80037b0 <__retarget_lock_acquire_recursive>
 8003992:	bf00      	nop
 8003994:	20000308 	.word	0x20000308

08003998 <__malloc_unlock>:
 8003998:	4801      	ldr	r0, [pc, #4]	@ (80039a0 <__malloc_unlock+0x8>)
 800399a:	f7ff bf0a 	b.w	80037b2 <__retarget_lock_release_recursive>
 800399e:	bf00      	nop
 80039a0:	20000308 	.word	0x20000308

080039a4 <__ssputs_r>:
 80039a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039a8:	688e      	ldr	r6, [r1, #8]
 80039aa:	461f      	mov	r7, r3
 80039ac:	42be      	cmp	r6, r7
 80039ae:	680b      	ldr	r3, [r1, #0]
 80039b0:	4682      	mov	sl, r0
 80039b2:	460c      	mov	r4, r1
 80039b4:	4690      	mov	r8, r2
 80039b6:	d82d      	bhi.n	8003a14 <__ssputs_r+0x70>
 80039b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80039c0:	d026      	beq.n	8003a10 <__ssputs_r+0x6c>
 80039c2:	6965      	ldr	r5, [r4, #20]
 80039c4:	6909      	ldr	r1, [r1, #16]
 80039c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039ca:	eba3 0901 	sub.w	r9, r3, r1
 80039ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039d2:	1c7b      	adds	r3, r7, #1
 80039d4:	444b      	add	r3, r9
 80039d6:	106d      	asrs	r5, r5, #1
 80039d8:	429d      	cmp	r5, r3
 80039da:	bf38      	it	cc
 80039dc:	461d      	movcc	r5, r3
 80039de:	0553      	lsls	r3, r2, #21
 80039e0:	d527      	bpl.n	8003a32 <__ssputs_r+0x8e>
 80039e2:	4629      	mov	r1, r5
 80039e4:	f7ff ff52 	bl	800388c <_malloc_r>
 80039e8:	4606      	mov	r6, r0
 80039ea:	b360      	cbz	r0, 8003a46 <__ssputs_r+0xa2>
 80039ec:	6921      	ldr	r1, [r4, #16]
 80039ee:	464a      	mov	r2, r9
 80039f0:	f000 fae8 	bl	8003fc4 <memcpy>
 80039f4:	89a3      	ldrh	r3, [r4, #12]
 80039f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80039fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039fe:	81a3      	strh	r3, [r4, #12]
 8003a00:	6126      	str	r6, [r4, #16]
 8003a02:	6165      	str	r5, [r4, #20]
 8003a04:	444e      	add	r6, r9
 8003a06:	eba5 0509 	sub.w	r5, r5, r9
 8003a0a:	6026      	str	r6, [r4, #0]
 8003a0c:	60a5      	str	r5, [r4, #8]
 8003a0e:	463e      	mov	r6, r7
 8003a10:	42be      	cmp	r6, r7
 8003a12:	d900      	bls.n	8003a16 <__ssputs_r+0x72>
 8003a14:	463e      	mov	r6, r7
 8003a16:	6820      	ldr	r0, [r4, #0]
 8003a18:	4632      	mov	r2, r6
 8003a1a:	4641      	mov	r1, r8
 8003a1c:	f000 faa8 	bl	8003f70 <memmove>
 8003a20:	68a3      	ldr	r3, [r4, #8]
 8003a22:	1b9b      	subs	r3, r3, r6
 8003a24:	60a3      	str	r3, [r4, #8]
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	4433      	add	r3, r6
 8003a2a:	6023      	str	r3, [r4, #0]
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a32:	462a      	mov	r2, r5
 8003a34:	f000 fad4 	bl	8003fe0 <_realloc_r>
 8003a38:	4606      	mov	r6, r0
 8003a3a:	2800      	cmp	r0, #0
 8003a3c:	d1e0      	bne.n	8003a00 <__ssputs_r+0x5c>
 8003a3e:	6921      	ldr	r1, [r4, #16]
 8003a40:	4650      	mov	r0, sl
 8003a42:	f7ff feb7 	bl	80037b4 <_free_r>
 8003a46:	230c      	movs	r3, #12
 8003a48:	f8ca 3000 	str.w	r3, [sl]
 8003a4c:	89a3      	ldrh	r3, [r4, #12]
 8003a4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a52:	81a3      	strh	r3, [r4, #12]
 8003a54:	f04f 30ff 	mov.w	r0, #4294967295
 8003a58:	e7e9      	b.n	8003a2e <__ssputs_r+0x8a>
	...

08003a5c <_svfiprintf_r>:
 8003a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a60:	4698      	mov	r8, r3
 8003a62:	898b      	ldrh	r3, [r1, #12]
 8003a64:	061b      	lsls	r3, r3, #24
 8003a66:	b09d      	sub	sp, #116	@ 0x74
 8003a68:	4607      	mov	r7, r0
 8003a6a:	460d      	mov	r5, r1
 8003a6c:	4614      	mov	r4, r2
 8003a6e:	d510      	bpl.n	8003a92 <_svfiprintf_r+0x36>
 8003a70:	690b      	ldr	r3, [r1, #16]
 8003a72:	b973      	cbnz	r3, 8003a92 <_svfiprintf_r+0x36>
 8003a74:	2140      	movs	r1, #64	@ 0x40
 8003a76:	f7ff ff09 	bl	800388c <_malloc_r>
 8003a7a:	6028      	str	r0, [r5, #0]
 8003a7c:	6128      	str	r0, [r5, #16]
 8003a7e:	b930      	cbnz	r0, 8003a8e <_svfiprintf_r+0x32>
 8003a80:	230c      	movs	r3, #12
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	f04f 30ff 	mov.w	r0, #4294967295
 8003a88:	b01d      	add	sp, #116	@ 0x74
 8003a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a8e:	2340      	movs	r3, #64	@ 0x40
 8003a90:	616b      	str	r3, [r5, #20]
 8003a92:	2300      	movs	r3, #0
 8003a94:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a96:	2320      	movs	r3, #32
 8003a98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003aa0:	2330      	movs	r3, #48	@ 0x30
 8003aa2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003c40 <_svfiprintf_r+0x1e4>
 8003aa6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003aaa:	f04f 0901 	mov.w	r9, #1
 8003aae:	4623      	mov	r3, r4
 8003ab0:	469a      	mov	sl, r3
 8003ab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ab6:	b10a      	cbz	r2, 8003abc <_svfiprintf_r+0x60>
 8003ab8:	2a25      	cmp	r2, #37	@ 0x25
 8003aba:	d1f9      	bne.n	8003ab0 <_svfiprintf_r+0x54>
 8003abc:	ebba 0b04 	subs.w	fp, sl, r4
 8003ac0:	d00b      	beq.n	8003ada <_svfiprintf_r+0x7e>
 8003ac2:	465b      	mov	r3, fp
 8003ac4:	4622      	mov	r2, r4
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	4638      	mov	r0, r7
 8003aca:	f7ff ff6b 	bl	80039a4 <__ssputs_r>
 8003ace:	3001      	adds	r0, #1
 8003ad0:	f000 80a7 	beq.w	8003c22 <_svfiprintf_r+0x1c6>
 8003ad4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ad6:	445a      	add	r2, fp
 8003ad8:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ada:	f89a 3000 	ldrb.w	r3, [sl]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 809f 	beq.w	8003c22 <_svfiprintf_r+0x1c6>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003aee:	f10a 0a01 	add.w	sl, sl, #1
 8003af2:	9304      	str	r3, [sp, #16]
 8003af4:	9307      	str	r3, [sp, #28]
 8003af6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003afa:	931a      	str	r3, [sp, #104]	@ 0x68
 8003afc:	4654      	mov	r4, sl
 8003afe:	2205      	movs	r2, #5
 8003b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b04:	484e      	ldr	r0, [pc, #312]	@ (8003c40 <_svfiprintf_r+0x1e4>)
 8003b06:	f7fc fba3 	bl	8000250 <memchr>
 8003b0a:	9a04      	ldr	r2, [sp, #16]
 8003b0c:	b9d8      	cbnz	r0, 8003b46 <_svfiprintf_r+0xea>
 8003b0e:	06d0      	lsls	r0, r2, #27
 8003b10:	bf44      	itt	mi
 8003b12:	2320      	movmi	r3, #32
 8003b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b18:	0711      	lsls	r1, r2, #28
 8003b1a:	bf44      	itt	mi
 8003b1c:	232b      	movmi	r3, #43	@ 0x2b
 8003b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b22:	f89a 3000 	ldrb.w	r3, [sl]
 8003b26:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b28:	d015      	beq.n	8003b56 <_svfiprintf_r+0xfa>
 8003b2a:	9a07      	ldr	r2, [sp, #28]
 8003b2c:	4654      	mov	r4, sl
 8003b2e:	2000      	movs	r0, #0
 8003b30:	f04f 0c0a 	mov.w	ip, #10
 8003b34:	4621      	mov	r1, r4
 8003b36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b3a:	3b30      	subs	r3, #48	@ 0x30
 8003b3c:	2b09      	cmp	r3, #9
 8003b3e:	d94b      	bls.n	8003bd8 <_svfiprintf_r+0x17c>
 8003b40:	b1b0      	cbz	r0, 8003b70 <_svfiprintf_r+0x114>
 8003b42:	9207      	str	r2, [sp, #28]
 8003b44:	e014      	b.n	8003b70 <_svfiprintf_r+0x114>
 8003b46:	eba0 0308 	sub.w	r3, r0, r8
 8003b4a:	fa09 f303 	lsl.w	r3, r9, r3
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	9304      	str	r3, [sp, #16]
 8003b52:	46a2      	mov	sl, r4
 8003b54:	e7d2      	b.n	8003afc <_svfiprintf_r+0xa0>
 8003b56:	9b03      	ldr	r3, [sp, #12]
 8003b58:	1d19      	adds	r1, r3, #4
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	9103      	str	r1, [sp, #12]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	bfbb      	ittet	lt
 8003b62:	425b      	neglt	r3, r3
 8003b64:	f042 0202 	orrlt.w	r2, r2, #2
 8003b68:	9307      	strge	r3, [sp, #28]
 8003b6a:	9307      	strlt	r3, [sp, #28]
 8003b6c:	bfb8      	it	lt
 8003b6e:	9204      	strlt	r2, [sp, #16]
 8003b70:	7823      	ldrb	r3, [r4, #0]
 8003b72:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b74:	d10a      	bne.n	8003b8c <_svfiprintf_r+0x130>
 8003b76:	7863      	ldrb	r3, [r4, #1]
 8003b78:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b7a:	d132      	bne.n	8003be2 <_svfiprintf_r+0x186>
 8003b7c:	9b03      	ldr	r3, [sp, #12]
 8003b7e:	1d1a      	adds	r2, r3, #4
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	9203      	str	r2, [sp, #12]
 8003b84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b88:	3402      	adds	r4, #2
 8003b8a:	9305      	str	r3, [sp, #20]
 8003b8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003c50 <_svfiprintf_r+0x1f4>
 8003b90:	7821      	ldrb	r1, [r4, #0]
 8003b92:	2203      	movs	r2, #3
 8003b94:	4650      	mov	r0, sl
 8003b96:	f7fc fb5b 	bl	8000250 <memchr>
 8003b9a:	b138      	cbz	r0, 8003bac <_svfiprintf_r+0x150>
 8003b9c:	9b04      	ldr	r3, [sp, #16]
 8003b9e:	eba0 000a 	sub.w	r0, r0, sl
 8003ba2:	2240      	movs	r2, #64	@ 0x40
 8003ba4:	4082      	lsls	r2, r0
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	3401      	adds	r4, #1
 8003baa:	9304      	str	r3, [sp, #16]
 8003bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bb0:	4824      	ldr	r0, [pc, #144]	@ (8003c44 <_svfiprintf_r+0x1e8>)
 8003bb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003bb6:	2206      	movs	r2, #6
 8003bb8:	f7fc fb4a 	bl	8000250 <memchr>
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	d036      	beq.n	8003c2e <_svfiprintf_r+0x1d2>
 8003bc0:	4b21      	ldr	r3, [pc, #132]	@ (8003c48 <_svfiprintf_r+0x1ec>)
 8003bc2:	bb1b      	cbnz	r3, 8003c0c <_svfiprintf_r+0x1b0>
 8003bc4:	9b03      	ldr	r3, [sp, #12]
 8003bc6:	3307      	adds	r3, #7
 8003bc8:	f023 0307 	bic.w	r3, r3, #7
 8003bcc:	3308      	adds	r3, #8
 8003bce:	9303      	str	r3, [sp, #12]
 8003bd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bd2:	4433      	add	r3, r6
 8003bd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bd6:	e76a      	b.n	8003aae <_svfiprintf_r+0x52>
 8003bd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bdc:	460c      	mov	r4, r1
 8003bde:	2001      	movs	r0, #1
 8003be0:	e7a8      	b.n	8003b34 <_svfiprintf_r+0xd8>
 8003be2:	2300      	movs	r3, #0
 8003be4:	3401      	adds	r4, #1
 8003be6:	9305      	str	r3, [sp, #20]
 8003be8:	4619      	mov	r1, r3
 8003bea:	f04f 0c0a 	mov.w	ip, #10
 8003bee:	4620      	mov	r0, r4
 8003bf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bf4:	3a30      	subs	r2, #48	@ 0x30
 8003bf6:	2a09      	cmp	r2, #9
 8003bf8:	d903      	bls.n	8003c02 <_svfiprintf_r+0x1a6>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0c6      	beq.n	8003b8c <_svfiprintf_r+0x130>
 8003bfe:	9105      	str	r1, [sp, #20]
 8003c00:	e7c4      	b.n	8003b8c <_svfiprintf_r+0x130>
 8003c02:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c06:	4604      	mov	r4, r0
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e7f0      	b.n	8003bee <_svfiprintf_r+0x192>
 8003c0c:	ab03      	add	r3, sp, #12
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	462a      	mov	r2, r5
 8003c12:	4b0e      	ldr	r3, [pc, #56]	@ (8003c4c <_svfiprintf_r+0x1f0>)
 8003c14:	a904      	add	r1, sp, #16
 8003c16:	4638      	mov	r0, r7
 8003c18:	f3af 8000 	nop.w
 8003c1c:	1c42      	adds	r2, r0, #1
 8003c1e:	4606      	mov	r6, r0
 8003c20:	d1d6      	bne.n	8003bd0 <_svfiprintf_r+0x174>
 8003c22:	89ab      	ldrh	r3, [r5, #12]
 8003c24:	065b      	lsls	r3, r3, #25
 8003c26:	f53f af2d 	bmi.w	8003a84 <_svfiprintf_r+0x28>
 8003c2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c2c:	e72c      	b.n	8003a88 <_svfiprintf_r+0x2c>
 8003c2e:	ab03      	add	r3, sp, #12
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	462a      	mov	r2, r5
 8003c34:	4b05      	ldr	r3, [pc, #20]	@ (8003c4c <_svfiprintf_r+0x1f0>)
 8003c36:	a904      	add	r1, sp, #16
 8003c38:	4638      	mov	r0, r7
 8003c3a:	f000 f879 	bl	8003d30 <_printf_i>
 8003c3e:	e7ed      	b.n	8003c1c <_svfiprintf_r+0x1c0>
 8003c40:	08004098 	.word	0x08004098
 8003c44:	080040a2 	.word	0x080040a2
 8003c48:	00000000 	.word	0x00000000
 8003c4c:	080039a5 	.word	0x080039a5
 8003c50:	0800409e 	.word	0x0800409e

08003c54 <_printf_common>:
 8003c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c58:	4616      	mov	r6, r2
 8003c5a:	4698      	mov	r8, r3
 8003c5c:	688a      	ldr	r2, [r1, #8]
 8003c5e:	690b      	ldr	r3, [r1, #16]
 8003c60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c64:	4293      	cmp	r3, r2
 8003c66:	bfb8      	it	lt
 8003c68:	4613      	movlt	r3, r2
 8003c6a:	6033      	str	r3, [r6, #0]
 8003c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c70:	4607      	mov	r7, r0
 8003c72:	460c      	mov	r4, r1
 8003c74:	b10a      	cbz	r2, 8003c7a <_printf_common+0x26>
 8003c76:	3301      	adds	r3, #1
 8003c78:	6033      	str	r3, [r6, #0]
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	0699      	lsls	r1, r3, #26
 8003c7e:	bf42      	ittt	mi
 8003c80:	6833      	ldrmi	r3, [r6, #0]
 8003c82:	3302      	addmi	r3, #2
 8003c84:	6033      	strmi	r3, [r6, #0]
 8003c86:	6825      	ldr	r5, [r4, #0]
 8003c88:	f015 0506 	ands.w	r5, r5, #6
 8003c8c:	d106      	bne.n	8003c9c <_printf_common+0x48>
 8003c8e:	f104 0a19 	add.w	sl, r4, #25
 8003c92:	68e3      	ldr	r3, [r4, #12]
 8003c94:	6832      	ldr	r2, [r6, #0]
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	42ab      	cmp	r3, r5
 8003c9a:	dc26      	bgt.n	8003cea <_printf_common+0x96>
 8003c9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ca0:	6822      	ldr	r2, [r4, #0]
 8003ca2:	3b00      	subs	r3, #0
 8003ca4:	bf18      	it	ne
 8003ca6:	2301      	movne	r3, #1
 8003ca8:	0692      	lsls	r2, r2, #26
 8003caa:	d42b      	bmi.n	8003d04 <_printf_common+0xb0>
 8003cac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003cb0:	4641      	mov	r1, r8
 8003cb2:	4638      	mov	r0, r7
 8003cb4:	47c8      	blx	r9
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	d01e      	beq.n	8003cf8 <_printf_common+0xa4>
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	6922      	ldr	r2, [r4, #16]
 8003cbe:	f003 0306 	and.w	r3, r3, #6
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	bf02      	ittt	eq
 8003cc6:	68e5      	ldreq	r5, [r4, #12]
 8003cc8:	6833      	ldreq	r3, [r6, #0]
 8003cca:	1aed      	subeq	r5, r5, r3
 8003ccc:	68a3      	ldr	r3, [r4, #8]
 8003cce:	bf0c      	ite	eq
 8003cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cd4:	2500      	movne	r5, #0
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	bfc4      	itt	gt
 8003cda:	1a9b      	subgt	r3, r3, r2
 8003cdc:	18ed      	addgt	r5, r5, r3
 8003cde:	2600      	movs	r6, #0
 8003ce0:	341a      	adds	r4, #26
 8003ce2:	42b5      	cmp	r5, r6
 8003ce4:	d11a      	bne.n	8003d1c <_printf_common+0xc8>
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	e008      	b.n	8003cfc <_printf_common+0xa8>
 8003cea:	2301      	movs	r3, #1
 8003cec:	4652      	mov	r2, sl
 8003cee:	4641      	mov	r1, r8
 8003cf0:	4638      	mov	r0, r7
 8003cf2:	47c8      	blx	r9
 8003cf4:	3001      	adds	r0, #1
 8003cf6:	d103      	bne.n	8003d00 <_printf_common+0xac>
 8003cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d00:	3501      	adds	r5, #1
 8003d02:	e7c6      	b.n	8003c92 <_printf_common+0x3e>
 8003d04:	18e1      	adds	r1, r4, r3
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	2030      	movs	r0, #48	@ 0x30
 8003d0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d0e:	4422      	add	r2, r4
 8003d10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d18:	3302      	adds	r3, #2
 8003d1a:	e7c7      	b.n	8003cac <_printf_common+0x58>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	4622      	mov	r2, r4
 8003d20:	4641      	mov	r1, r8
 8003d22:	4638      	mov	r0, r7
 8003d24:	47c8      	blx	r9
 8003d26:	3001      	adds	r0, #1
 8003d28:	d0e6      	beq.n	8003cf8 <_printf_common+0xa4>
 8003d2a:	3601      	adds	r6, #1
 8003d2c:	e7d9      	b.n	8003ce2 <_printf_common+0x8e>
	...

08003d30 <_printf_i>:
 8003d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d34:	7e0f      	ldrb	r7, [r1, #24]
 8003d36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d38:	2f78      	cmp	r7, #120	@ 0x78
 8003d3a:	4691      	mov	r9, r2
 8003d3c:	4680      	mov	r8, r0
 8003d3e:	460c      	mov	r4, r1
 8003d40:	469a      	mov	sl, r3
 8003d42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d46:	d807      	bhi.n	8003d58 <_printf_i+0x28>
 8003d48:	2f62      	cmp	r7, #98	@ 0x62
 8003d4a:	d80a      	bhi.n	8003d62 <_printf_i+0x32>
 8003d4c:	2f00      	cmp	r7, #0
 8003d4e:	f000 80d2 	beq.w	8003ef6 <_printf_i+0x1c6>
 8003d52:	2f58      	cmp	r7, #88	@ 0x58
 8003d54:	f000 80b9 	beq.w	8003eca <_printf_i+0x19a>
 8003d58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d60:	e03a      	b.n	8003dd8 <_printf_i+0xa8>
 8003d62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d66:	2b15      	cmp	r3, #21
 8003d68:	d8f6      	bhi.n	8003d58 <_printf_i+0x28>
 8003d6a:	a101      	add	r1, pc, #4	@ (adr r1, 8003d70 <_printf_i+0x40>)
 8003d6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d70:	08003dc9 	.word	0x08003dc9
 8003d74:	08003ddd 	.word	0x08003ddd
 8003d78:	08003d59 	.word	0x08003d59
 8003d7c:	08003d59 	.word	0x08003d59
 8003d80:	08003d59 	.word	0x08003d59
 8003d84:	08003d59 	.word	0x08003d59
 8003d88:	08003ddd 	.word	0x08003ddd
 8003d8c:	08003d59 	.word	0x08003d59
 8003d90:	08003d59 	.word	0x08003d59
 8003d94:	08003d59 	.word	0x08003d59
 8003d98:	08003d59 	.word	0x08003d59
 8003d9c:	08003edd 	.word	0x08003edd
 8003da0:	08003e07 	.word	0x08003e07
 8003da4:	08003e97 	.word	0x08003e97
 8003da8:	08003d59 	.word	0x08003d59
 8003dac:	08003d59 	.word	0x08003d59
 8003db0:	08003eff 	.word	0x08003eff
 8003db4:	08003d59 	.word	0x08003d59
 8003db8:	08003e07 	.word	0x08003e07
 8003dbc:	08003d59 	.word	0x08003d59
 8003dc0:	08003d59 	.word	0x08003d59
 8003dc4:	08003e9f 	.word	0x08003e9f
 8003dc8:	6833      	ldr	r3, [r6, #0]
 8003dca:	1d1a      	adds	r2, r3, #4
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6032      	str	r2, [r6, #0]
 8003dd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003dd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e09d      	b.n	8003f18 <_printf_i+0x1e8>
 8003ddc:	6833      	ldr	r3, [r6, #0]
 8003dde:	6820      	ldr	r0, [r4, #0]
 8003de0:	1d19      	adds	r1, r3, #4
 8003de2:	6031      	str	r1, [r6, #0]
 8003de4:	0606      	lsls	r6, r0, #24
 8003de6:	d501      	bpl.n	8003dec <_printf_i+0xbc>
 8003de8:	681d      	ldr	r5, [r3, #0]
 8003dea:	e003      	b.n	8003df4 <_printf_i+0xc4>
 8003dec:	0645      	lsls	r5, r0, #25
 8003dee:	d5fb      	bpl.n	8003de8 <_printf_i+0xb8>
 8003df0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003df4:	2d00      	cmp	r5, #0
 8003df6:	da03      	bge.n	8003e00 <_printf_i+0xd0>
 8003df8:	232d      	movs	r3, #45	@ 0x2d
 8003dfa:	426d      	negs	r5, r5
 8003dfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e00:	4859      	ldr	r0, [pc, #356]	@ (8003f68 <_printf_i+0x238>)
 8003e02:	230a      	movs	r3, #10
 8003e04:	e011      	b.n	8003e2a <_printf_i+0xfa>
 8003e06:	6821      	ldr	r1, [r4, #0]
 8003e08:	6833      	ldr	r3, [r6, #0]
 8003e0a:	0608      	lsls	r0, r1, #24
 8003e0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e10:	d402      	bmi.n	8003e18 <_printf_i+0xe8>
 8003e12:	0649      	lsls	r1, r1, #25
 8003e14:	bf48      	it	mi
 8003e16:	b2ad      	uxthmi	r5, r5
 8003e18:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e1a:	4853      	ldr	r0, [pc, #332]	@ (8003f68 <_printf_i+0x238>)
 8003e1c:	6033      	str	r3, [r6, #0]
 8003e1e:	bf14      	ite	ne
 8003e20:	230a      	movne	r3, #10
 8003e22:	2308      	moveq	r3, #8
 8003e24:	2100      	movs	r1, #0
 8003e26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e2a:	6866      	ldr	r6, [r4, #4]
 8003e2c:	60a6      	str	r6, [r4, #8]
 8003e2e:	2e00      	cmp	r6, #0
 8003e30:	bfa2      	ittt	ge
 8003e32:	6821      	ldrge	r1, [r4, #0]
 8003e34:	f021 0104 	bicge.w	r1, r1, #4
 8003e38:	6021      	strge	r1, [r4, #0]
 8003e3a:	b90d      	cbnz	r5, 8003e40 <_printf_i+0x110>
 8003e3c:	2e00      	cmp	r6, #0
 8003e3e:	d04b      	beq.n	8003ed8 <_printf_i+0x1a8>
 8003e40:	4616      	mov	r6, r2
 8003e42:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e46:	fb03 5711 	mls	r7, r3, r1, r5
 8003e4a:	5dc7      	ldrb	r7, [r0, r7]
 8003e4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e50:	462f      	mov	r7, r5
 8003e52:	42bb      	cmp	r3, r7
 8003e54:	460d      	mov	r5, r1
 8003e56:	d9f4      	bls.n	8003e42 <_printf_i+0x112>
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d10b      	bne.n	8003e74 <_printf_i+0x144>
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	07df      	lsls	r7, r3, #31
 8003e60:	d508      	bpl.n	8003e74 <_printf_i+0x144>
 8003e62:	6923      	ldr	r3, [r4, #16]
 8003e64:	6861      	ldr	r1, [r4, #4]
 8003e66:	4299      	cmp	r1, r3
 8003e68:	bfde      	ittt	le
 8003e6a:	2330      	movle	r3, #48	@ 0x30
 8003e6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e74:	1b92      	subs	r2, r2, r6
 8003e76:	6122      	str	r2, [r4, #16]
 8003e78:	f8cd a000 	str.w	sl, [sp]
 8003e7c:	464b      	mov	r3, r9
 8003e7e:	aa03      	add	r2, sp, #12
 8003e80:	4621      	mov	r1, r4
 8003e82:	4640      	mov	r0, r8
 8003e84:	f7ff fee6 	bl	8003c54 <_printf_common>
 8003e88:	3001      	adds	r0, #1
 8003e8a:	d14a      	bne.n	8003f22 <_printf_i+0x1f2>
 8003e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e90:	b004      	add	sp, #16
 8003e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	f043 0320 	orr.w	r3, r3, #32
 8003e9c:	6023      	str	r3, [r4, #0]
 8003e9e:	4833      	ldr	r0, [pc, #204]	@ (8003f6c <_printf_i+0x23c>)
 8003ea0:	2778      	movs	r7, #120	@ 0x78
 8003ea2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	6831      	ldr	r1, [r6, #0]
 8003eaa:	061f      	lsls	r7, r3, #24
 8003eac:	f851 5b04 	ldr.w	r5, [r1], #4
 8003eb0:	d402      	bmi.n	8003eb8 <_printf_i+0x188>
 8003eb2:	065f      	lsls	r7, r3, #25
 8003eb4:	bf48      	it	mi
 8003eb6:	b2ad      	uxthmi	r5, r5
 8003eb8:	6031      	str	r1, [r6, #0]
 8003eba:	07d9      	lsls	r1, r3, #31
 8003ebc:	bf44      	itt	mi
 8003ebe:	f043 0320 	orrmi.w	r3, r3, #32
 8003ec2:	6023      	strmi	r3, [r4, #0]
 8003ec4:	b11d      	cbz	r5, 8003ece <_printf_i+0x19e>
 8003ec6:	2310      	movs	r3, #16
 8003ec8:	e7ac      	b.n	8003e24 <_printf_i+0xf4>
 8003eca:	4827      	ldr	r0, [pc, #156]	@ (8003f68 <_printf_i+0x238>)
 8003ecc:	e7e9      	b.n	8003ea2 <_printf_i+0x172>
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	f023 0320 	bic.w	r3, r3, #32
 8003ed4:	6023      	str	r3, [r4, #0]
 8003ed6:	e7f6      	b.n	8003ec6 <_printf_i+0x196>
 8003ed8:	4616      	mov	r6, r2
 8003eda:	e7bd      	b.n	8003e58 <_printf_i+0x128>
 8003edc:	6833      	ldr	r3, [r6, #0]
 8003ede:	6825      	ldr	r5, [r4, #0]
 8003ee0:	6961      	ldr	r1, [r4, #20]
 8003ee2:	1d18      	adds	r0, r3, #4
 8003ee4:	6030      	str	r0, [r6, #0]
 8003ee6:	062e      	lsls	r6, r5, #24
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	d501      	bpl.n	8003ef0 <_printf_i+0x1c0>
 8003eec:	6019      	str	r1, [r3, #0]
 8003eee:	e002      	b.n	8003ef6 <_printf_i+0x1c6>
 8003ef0:	0668      	lsls	r0, r5, #25
 8003ef2:	d5fb      	bpl.n	8003eec <_printf_i+0x1bc>
 8003ef4:	8019      	strh	r1, [r3, #0]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	6123      	str	r3, [r4, #16]
 8003efa:	4616      	mov	r6, r2
 8003efc:	e7bc      	b.n	8003e78 <_printf_i+0x148>
 8003efe:	6833      	ldr	r3, [r6, #0]
 8003f00:	1d1a      	adds	r2, r3, #4
 8003f02:	6032      	str	r2, [r6, #0]
 8003f04:	681e      	ldr	r6, [r3, #0]
 8003f06:	6862      	ldr	r2, [r4, #4]
 8003f08:	2100      	movs	r1, #0
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	f7fc f9a0 	bl	8000250 <memchr>
 8003f10:	b108      	cbz	r0, 8003f16 <_printf_i+0x1e6>
 8003f12:	1b80      	subs	r0, r0, r6
 8003f14:	6060      	str	r0, [r4, #4]
 8003f16:	6863      	ldr	r3, [r4, #4]
 8003f18:	6123      	str	r3, [r4, #16]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f20:	e7aa      	b.n	8003e78 <_printf_i+0x148>
 8003f22:	6923      	ldr	r3, [r4, #16]
 8003f24:	4632      	mov	r2, r6
 8003f26:	4649      	mov	r1, r9
 8003f28:	4640      	mov	r0, r8
 8003f2a:	47d0      	blx	sl
 8003f2c:	3001      	adds	r0, #1
 8003f2e:	d0ad      	beq.n	8003e8c <_printf_i+0x15c>
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	079b      	lsls	r3, r3, #30
 8003f34:	d413      	bmi.n	8003f5e <_printf_i+0x22e>
 8003f36:	68e0      	ldr	r0, [r4, #12]
 8003f38:	9b03      	ldr	r3, [sp, #12]
 8003f3a:	4298      	cmp	r0, r3
 8003f3c:	bfb8      	it	lt
 8003f3e:	4618      	movlt	r0, r3
 8003f40:	e7a6      	b.n	8003e90 <_printf_i+0x160>
 8003f42:	2301      	movs	r3, #1
 8003f44:	4632      	mov	r2, r6
 8003f46:	4649      	mov	r1, r9
 8003f48:	4640      	mov	r0, r8
 8003f4a:	47d0      	blx	sl
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	d09d      	beq.n	8003e8c <_printf_i+0x15c>
 8003f50:	3501      	adds	r5, #1
 8003f52:	68e3      	ldr	r3, [r4, #12]
 8003f54:	9903      	ldr	r1, [sp, #12]
 8003f56:	1a5b      	subs	r3, r3, r1
 8003f58:	42ab      	cmp	r3, r5
 8003f5a:	dcf2      	bgt.n	8003f42 <_printf_i+0x212>
 8003f5c:	e7eb      	b.n	8003f36 <_printf_i+0x206>
 8003f5e:	2500      	movs	r5, #0
 8003f60:	f104 0619 	add.w	r6, r4, #25
 8003f64:	e7f5      	b.n	8003f52 <_printf_i+0x222>
 8003f66:	bf00      	nop
 8003f68:	080040a9 	.word	0x080040a9
 8003f6c:	080040ba 	.word	0x080040ba

08003f70 <memmove>:
 8003f70:	4288      	cmp	r0, r1
 8003f72:	b510      	push	{r4, lr}
 8003f74:	eb01 0402 	add.w	r4, r1, r2
 8003f78:	d902      	bls.n	8003f80 <memmove+0x10>
 8003f7a:	4284      	cmp	r4, r0
 8003f7c:	4623      	mov	r3, r4
 8003f7e:	d807      	bhi.n	8003f90 <memmove+0x20>
 8003f80:	1e43      	subs	r3, r0, #1
 8003f82:	42a1      	cmp	r1, r4
 8003f84:	d008      	beq.n	8003f98 <memmove+0x28>
 8003f86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f8e:	e7f8      	b.n	8003f82 <memmove+0x12>
 8003f90:	4402      	add	r2, r0
 8003f92:	4601      	mov	r1, r0
 8003f94:	428a      	cmp	r2, r1
 8003f96:	d100      	bne.n	8003f9a <memmove+0x2a>
 8003f98:	bd10      	pop	{r4, pc}
 8003f9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fa2:	e7f7      	b.n	8003f94 <memmove+0x24>

08003fa4 <_sbrk_r>:
 8003fa4:	b538      	push	{r3, r4, r5, lr}
 8003fa6:	4d06      	ldr	r5, [pc, #24]	@ (8003fc0 <_sbrk_r+0x1c>)
 8003fa8:	2300      	movs	r3, #0
 8003faa:	4604      	mov	r4, r0
 8003fac:	4608      	mov	r0, r1
 8003fae:	602b      	str	r3, [r5, #0]
 8003fb0:	f7fc fd56 	bl	8000a60 <_sbrk>
 8003fb4:	1c43      	adds	r3, r0, #1
 8003fb6:	d102      	bne.n	8003fbe <_sbrk_r+0x1a>
 8003fb8:	682b      	ldr	r3, [r5, #0]
 8003fba:	b103      	cbz	r3, 8003fbe <_sbrk_r+0x1a>
 8003fbc:	6023      	str	r3, [r4, #0]
 8003fbe:	bd38      	pop	{r3, r4, r5, pc}
 8003fc0:	20000304 	.word	0x20000304

08003fc4 <memcpy>:
 8003fc4:	440a      	add	r2, r1
 8003fc6:	4291      	cmp	r1, r2
 8003fc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fcc:	d100      	bne.n	8003fd0 <memcpy+0xc>
 8003fce:	4770      	bx	lr
 8003fd0:	b510      	push	{r4, lr}
 8003fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fda:	4291      	cmp	r1, r2
 8003fdc:	d1f9      	bne.n	8003fd2 <memcpy+0xe>
 8003fde:	bd10      	pop	{r4, pc}

08003fe0 <_realloc_r>:
 8003fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe4:	4680      	mov	r8, r0
 8003fe6:	4615      	mov	r5, r2
 8003fe8:	460c      	mov	r4, r1
 8003fea:	b921      	cbnz	r1, 8003ff6 <_realloc_r+0x16>
 8003fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff0:	4611      	mov	r1, r2
 8003ff2:	f7ff bc4b 	b.w	800388c <_malloc_r>
 8003ff6:	b92a      	cbnz	r2, 8004004 <_realloc_r+0x24>
 8003ff8:	f7ff fbdc 	bl	80037b4 <_free_r>
 8003ffc:	2400      	movs	r4, #0
 8003ffe:	4620      	mov	r0, r4
 8004000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004004:	f000 f81a 	bl	800403c <_malloc_usable_size_r>
 8004008:	4285      	cmp	r5, r0
 800400a:	4606      	mov	r6, r0
 800400c:	d802      	bhi.n	8004014 <_realloc_r+0x34>
 800400e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004012:	d8f4      	bhi.n	8003ffe <_realloc_r+0x1e>
 8004014:	4629      	mov	r1, r5
 8004016:	4640      	mov	r0, r8
 8004018:	f7ff fc38 	bl	800388c <_malloc_r>
 800401c:	4607      	mov	r7, r0
 800401e:	2800      	cmp	r0, #0
 8004020:	d0ec      	beq.n	8003ffc <_realloc_r+0x1c>
 8004022:	42b5      	cmp	r5, r6
 8004024:	462a      	mov	r2, r5
 8004026:	4621      	mov	r1, r4
 8004028:	bf28      	it	cs
 800402a:	4632      	movcs	r2, r6
 800402c:	f7ff ffca 	bl	8003fc4 <memcpy>
 8004030:	4621      	mov	r1, r4
 8004032:	4640      	mov	r0, r8
 8004034:	f7ff fbbe 	bl	80037b4 <_free_r>
 8004038:	463c      	mov	r4, r7
 800403a:	e7e0      	b.n	8003ffe <_realloc_r+0x1e>

0800403c <_malloc_usable_size_r>:
 800403c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004040:	1f18      	subs	r0, r3, #4
 8004042:	2b00      	cmp	r3, #0
 8004044:	bfbc      	itt	lt
 8004046:	580b      	ldrlt	r3, [r1, r0]
 8004048:	18c0      	addlt	r0, r0, r3
 800404a:	4770      	bx	lr

0800404c <_init>:
 800404c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404e:	bf00      	nop
 8004050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004052:	bc08      	pop	{r3}
 8004054:	469e      	mov	lr, r3
 8004056:	4770      	bx	lr

08004058 <_fini>:
 8004058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405a:	bf00      	nop
 800405c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405e:	bc08      	pop	{r3}
 8004060:	469e      	mov	lr, r3
 8004062:	4770      	bx	lr
