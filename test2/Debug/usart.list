
usart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e34  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800302c  0800302c  0000402c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030f0  080030f0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080030f0  080030f0  000040f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030f8  080030f8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030f8  080030f8  000040f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030fc  080030fc  000040fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003100  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  0800310c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  0800310c  000050b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094ee  00000000  00000000  0000503a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000171d  00000000  00000000  0000e528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  0000fc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000546  00000000  00000000  00010338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026919  00000000  00000000  0001087e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a38b  00000000  00000000  00037197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0387  00000000  00000000  00041522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001318a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ad0  00000000  00000000  001318ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001333bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003014 	.word	0x08003014

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003014 	.word	0x08003014

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96a 	b.w	8000534 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	460c      	mov	r4, r1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d14e      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000284:	4694      	mov	ip, r2
 8000286:	458c      	cmp	ip, r1
 8000288:	4686      	mov	lr, r0
 800028a:	fab2 f282 	clz	r2, r2
 800028e:	d962      	bls.n	8000356 <__udivmoddi4+0xde>
 8000290:	b14a      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000292:	f1c2 0320 	rsb	r3, r2, #32
 8000296:	4091      	lsls	r1, r2
 8000298:	fa20 f303 	lsr.w	r3, r0, r3
 800029c:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a0:	4319      	orrs	r1, r3
 80002a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002aa:	fa1f f68c 	uxth.w	r6, ip
 80002ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80002b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b6:	fb07 1114 	mls	r1, r7, r4, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb04 f106 	mul.w	r1, r4, r6
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ce:	f080 8112 	bcs.w	80004f6 <__udivmoddi4+0x27e>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 810f 	bls.w	80004f6 <__udivmoddi4+0x27e>
 80002d8:	3c02      	subs	r4, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a59      	subs	r1, r3, r1
 80002de:	fa1f f38e 	uxth.w	r3, lr
 80002e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ee:	fb00 f606 	mul.w	r6, r0, r6
 80002f2:	429e      	cmp	r6, r3
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x94>
 80002f6:	eb1c 0303 	adds.w	r3, ip, r3
 80002fa:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fe:	f080 80fc 	bcs.w	80004fa <__udivmoddi4+0x282>
 8000302:	429e      	cmp	r6, r3
 8000304:	f240 80f9 	bls.w	80004fa <__udivmoddi4+0x282>
 8000308:	4463      	add	r3, ip
 800030a:	3802      	subs	r0, #2
 800030c:	1b9b      	subs	r3, r3, r6
 800030e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000312:	2100      	movs	r1, #0
 8000314:	b11d      	cbz	r5, 800031e <__udivmoddi4+0xa6>
 8000316:	40d3      	lsrs	r3, r2
 8000318:	2200      	movs	r2, #0
 800031a:	e9c5 3200 	strd	r3, r2, [r5]
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d905      	bls.n	8000332 <__udivmoddi4+0xba>
 8000326:	b10d      	cbz	r5, 800032c <__udivmoddi4+0xb4>
 8000328:	e9c5 0100 	strd	r0, r1, [r5]
 800032c:	2100      	movs	r1, #0
 800032e:	4608      	mov	r0, r1
 8000330:	e7f5      	b.n	800031e <__udivmoddi4+0xa6>
 8000332:	fab3 f183 	clz	r1, r3
 8000336:	2900      	cmp	r1, #0
 8000338:	d146      	bne.n	80003c8 <__udivmoddi4+0x150>
 800033a:	42a3      	cmp	r3, r4
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xcc>
 800033e:	4290      	cmp	r0, r2
 8000340:	f0c0 80f0 	bcc.w	8000524 <__udivmoddi4+0x2ac>
 8000344:	1a86      	subs	r6, r0, r2
 8000346:	eb64 0303 	sbc.w	r3, r4, r3
 800034a:	2001      	movs	r0, #1
 800034c:	2d00      	cmp	r5, #0
 800034e:	d0e6      	beq.n	800031e <__udivmoddi4+0xa6>
 8000350:	e9c5 6300 	strd	r6, r3, [r5]
 8000354:	e7e3      	b.n	800031e <__udivmoddi4+0xa6>
 8000356:	2a00      	cmp	r2, #0
 8000358:	f040 8090 	bne.w	800047c <__udivmoddi4+0x204>
 800035c:	eba1 040c 	sub.w	r4, r1, ip
 8000360:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000364:	fa1f f78c 	uxth.w	r7, ip
 8000368:	2101      	movs	r1, #1
 800036a:	fbb4 f6f8 	udiv	r6, r4, r8
 800036e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000372:	fb08 4416 	mls	r4, r8, r6, r4
 8000376:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037a:	fb07 f006 	mul.w	r0, r7, r6
 800037e:	4298      	cmp	r0, r3
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x11c>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f106 34ff 	add.w	r4, r6, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x11a>
 800038c:	4298      	cmp	r0, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2b4>
 8000392:	4626      	mov	r6, r4
 8000394:	1a1c      	subs	r4, r3, r0
 8000396:	fa1f f38e 	uxth.w	r3, lr
 800039a:	fbb4 f0f8 	udiv	r0, r4, r8
 800039e:	fb08 4410 	mls	r4, r8, r0, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb00 f707 	mul.w	r7, r0, r7
 80003aa:	429f      	cmp	r7, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x148>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x146>
 80003b8:	429f      	cmp	r7, r3
 80003ba:	f200 80b0 	bhi.w	800051e <__udivmoddi4+0x2a6>
 80003be:	4620      	mov	r0, r4
 80003c0:	1bdb      	subs	r3, r3, r7
 80003c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003c6:	e7a5      	b.n	8000314 <__udivmoddi4+0x9c>
 80003c8:	f1c1 0620 	rsb	r6, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 f706 	lsr.w	r7, r2, r6
 80003d2:	431f      	orrs	r7, r3
 80003d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d8:	fa04 f301 	lsl.w	r3, r4, r1
 80003dc:	ea43 030c 	orr.w	r3, r3, ip
 80003e0:	40f4      	lsrs	r4, r6
 80003e2:	fa00 f801 	lsl.w	r8, r0, r1
 80003e6:	0c38      	lsrs	r0, r7, #16
 80003e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ec:	fbb4 fef0 	udiv	lr, r4, r0
 80003f0:	fa1f fc87 	uxth.w	ip, r7
 80003f4:	fb00 441e 	mls	r4, r0, lr, r4
 80003f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000400:	45a1      	cmp	r9, r4
 8000402:	fa02 f201 	lsl.w	r2, r2, r1
 8000406:	d90a      	bls.n	800041e <__udivmoddi4+0x1a6>
 8000408:	193c      	adds	r4, r7, r4
 800040a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800040e:	f080 8084 	bcs.w	800051a <__udivmoddi4+0x2a2>
 8000412:	45a1      	cmp	r9, r4
 8000414:	f240 8081 	bls.w	800051a <__udivmoddi4+0x2a2>
 8000418:	f1ae 0e02 	sub.w	lr, lr, #2
 800041c:	443c      	add	r4, r7
 800041e:	eba4 0409 	sub.w	r4, r4, r9
 8000422:	fa1f f983 	uxth.w	r9, r3
 8000426:	fbb4 f3f0 	udiv	r3, r4, r0
 800042a:	fb00 4413 	mls	r4, r0, r3, r4
 800042e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000432:	fb03 fc0c 	mul.w	ip, r3, ip
 8000436:	45a4      	cmp	ip, r4
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x1d2>
 800043a:	193c      	adds	r4, r7, r4
 800043c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000440:	d267      	bcs.n	8000512 <__udivmoddi4+0x29a>
 8000442:	45a4      	cmp	ip, r4
 8000444:	d965      	bls.n	8000512 <__udivmoddi4+0x29a>
 8000446:	3b02      	subs	r3, #2
 8000448:	443c      	add	r4, r7
 800044a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800044e:	fba0 9302 	umull	r9, r3, r0, r2
 8000452:	eba4 040c 	sub.w	r4, r4, ip
 8000456:	429c      	cmp	r4, r3
 8000458:	46ce      	mov	lr, r9
 800045a:	469c      	mov	ip, r3
 800045c:	d351      	bcc.n	8000502 <__udivmoddi4+0x28a>
 800045e:	d04e      	beq.n	80004fe <__udivmoddi4+0x286>
 8000460:	b155      	cbz	r5, 8000478 <__udivmoddi4+0x200>
 8000462:	ebb8 030e 	subs.w	r3, r8, lr
 8000466:	eb64 040c 	sbc.w	r4, r4, ip
 800046a:	fa04 f606 	lsl.w	r6, r4, r6
 800046e:	40cb      	lsrs	r3, r1
 8000470:	431e      	orrs	r6, r3
 8000472:	40cc      	lsrs	r4, r1
 8000474:	e9c5 6400 	strd	r6, r4, [r5]
 8000478:	2100      	movs	r1, #0
 800047a:	e750      	b.n	800031e <__udivmoddi4+0xa6>
 800047c:	f1c2 0320 	rsb	r3, r2, #32
 8000480:	fa20 f103 	lsr.w	r1, r0, r3
 8000484:	fa0c fc02 	lsl.w	ip, ip, r2
 8000488:	fa24 f303 	lsr.w	r3, r4, r3
 800048c:	4094      	lsls	r4, r2
 800048e:	430c      	orrs	r4, r1
 8000490:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000494:	fa00 fe02 	lsl.w	lr, r0, r2
 8000498:	fa1f f78c 	uxth.w	r7, ip
 800049c:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a0:	fb08 3110 	mls	r1, r8, r0, r3
 80004a4:	0c23      	lsrs	r3, r4, #16
 80004a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004aa:	fb00 f107 	mul.w	r1, r0, r7
 80004ae:	4299      	cmp	r1, r3
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x24c>
 80004b2:	eb1c 0303 	adds.w	r3, ip, r3
 80004b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004ba:	d22c      	bcs.n	8000516 <__udivmoddi4+0x29e>
 80004bc:	4299      	cmp	r1, r3
 80004be:	d92a      	bls.n	8000516 <__udivmoddi4+0x29e>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	1a5b      	subs	r3, r3, r1
 80004c6:	b2a4      	uxth	r4, r4
 80004c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004cc:	fb08 3311 	mls	r3, r8, r1, r3
 80004d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d4:	fb01 f307 	mul.w	r3, r1, r7
 80004d8:	42a3      	cmp	r3, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x276>
 80004dc:	eb1c 0404 	adds.w	r4, ip, r4
 80004e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004e4:	d213      	bcs.n	800050e <__udivmoddi4+0x296>
 80004e6:	42a3      	cmp	r3, r4
 80004e8:	d911      	bls.n	800050e <__udivmoddi4+0x296>
 80004ea:	3902      	subs	r1, #2
 80004ec:	4464      	add	r4, ip
 80004ee:	1ae4      	subs	r4, r4, r3
 80004f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004f4:	e739      	b.n	800036a <__udivmoddi4+0xf2>
 80004f6:	4604      	mov	r4, r0
 80004f8:	e6f0      	b.n	80002dc <__udivmoddi4+0x64>
 80004fa:	4608      	mov	r0, r1
 80004fc:	e706      	b.n	800030c <__udivmoddi4+0x94>
 80004fe:	45c8      	cmp	r8, r9
 8000500:	d2ae      	bcs.n	8000460 <__udivmoddi4+0x1e8>
 8000502:	ebb9 0e02 	subs.w	lr, r9, r2
 8000506:	eb63 0c07 	sbc.w	ip, r3, r7
 800050a:	3801      	subs	r0, #1
 800050c:	e7a8      	b.n	8000460 <__udivmoddi4+0x1e8>
 800050e:	4631      	mov	r1, r6
 8000510:	e7ed      	b.n	80004ee <__udivmoddi4+0x276>
 8000512:	4603      	mov	r3, r0
 8000514:	e799      	b.n	800044a <__udivmoddi4+0x1d2>
 8000516:	4630      	mov	r0, r6
 8000518:	e7d4      	b.n	80004c4 <__udivmoddi4+0x24c>
 800051a:	46d6      	mov	lr, sl
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1a6>
 800051e:	4463      	add	r3, ip
 8000520:	3802      	subs	r0, #2
 8000522:	e74d      	b.n	80003c0 <__udivmoddi4+0x148>
 8000524:	4606      	mov	r6, r0
 8000526:	4623      	mov	r3, r4
 8000528:	4608      	mov	r0, r1
 800052a:	e70f      	b.n	800034c <__udivmoddi4+0xd4>
 800052c:	3e02      	subs	r6, #2
 800052e:	4463      	add	r3, ip
 8000530:	e730      	b.n	8000394 <__udivmoddi4+0x11c>
 8000532:	bf00      	nop

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053e:	f107 030c 	add.w	r3, r7, #12
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
 800054c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800054e:	4b17      	ldr	r3, [pc, #92]	@ (80005ac <MX_GPIO_Init+0x74>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000552:	4a16      	ldr	r2, [pc, #88]	@ (80005ac <MX_GPIO_Init+0x74>)
 8000554:	f043 0310 	orr.w	r3, r3, #16
 8000558:	6313      	str	r3, [r2, #48]	@ 0x30
 800055a:	4b14      	ldr	r3, [pc, #80]	@ (80005ac <MX_GPIO_Init+0x74>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	f003 0310 	and.w	r3, r3, #16
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000566:	4b11      	ldr	r3, [pc, #68]	@ (80005ac <MX_GPIO_Init+0x74>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	4a10      	ldr	r2, [pc, #64]	@ (80005ac <MX_GPIO_Init+0x74>)
 800056c:	f043 0308 	orr.w	r3, r3, #8
 8000570:	6313      	str	r3, [r2, #48]	@ 0x30
 8000572:	4b0e      	ldr	r3, [pc, #56]	@ (80005ac <MX_GPIO_Init+0x74>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	f003 0308 	and.w	r3, r3, #8
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2104      	movs	r1, #4
 8000582:	480b      	ldr	r0, [pc, #44]	@ (80005b0 <MX_GPIO_Init+0x78>)
 8000584:	f000 fe24 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000588:	2304      	movs	r3, #4
 800058a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058c:	2301      	movs	r3, #1
 800058e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000594:	2300      	movs	r3, #0
 8000596:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	4619      	mov	r1, r3
 800059e:	4804      	ldr	r0, [pc, #16]	@ (80005b0 <MX_GPIO_Init+0x78>)
 80005a0:	f000 fc6a 	bl	8000e78 <HAL_GPIO_Init>

}
 80005a4:	bf00      	nop
 80005a6:	3720      	adds	r7, #32
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40021000 	.word	0x40021000

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b09c      	sub	sp, #112	@ 0x70
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005ba:	f000 f92d 	bl	8000818 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 fa7c 	bl	8000aba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f8cd 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f7ff ffb7 	bl	8000538 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ca:	f000 f9bd 	bl	8000948 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  char send1[] = "Hello WOrld";
 80005ce:	4a59      	ldr	r2, [pc, #356]	@ (8000734 <main+0x180>)
 80005d0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80005d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80005d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  char receivedChar;

  char send2[] = "Display Blinking LED PRESS (1,2) \n\r";
 80005da:	4b57      	ldr	r3, [pc, #348]	@ (8000738 <main+0x184>)
 80005dc:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80005e0:	461d      	mov	r5, r3
 80005e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ea:	682b      	ldr	r3, [r5, #0]
 80005ec:	6023      	str	r3, [r4, #0]
  char send3[] = "Display Group Members PRESS m \n\r";
 80005ee:	4b53      	ldr	r3, [pc, #332]	@ (800073c <main+0x188>)
 80005f0:	f107 0414 	add.w	r4, r7, #20
 80005f4:	461d      	mov	r5, r3
 80005f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fe:	682b      	ldr	r3, [r5, #0]
 8000600:	7023      	strb	r3, [r4, #0]
  char send4[] = "QUIT PRESS q \n\r";
 8000602:	4b4f      	ldr	r3, [pc, #316]	@ (8000740 <main+0x18c>)
 8000604:	1d3c      	adds	r4, r7, #4
 8000606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000608:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  HAL_UART_Transmit(&huart3, (uint8_t*)send2, strlen(send2), HAL_MAX_DELAY);
 800060c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff fe11 	bl	8000238 <strlen>
 8000616:	4603      	mov	r3, r0
 8000618:	b29a      	uxth	r2, r3
 800061a:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	4848      	ldr	r0, [pc, #288]	@ (8000744 <main+0x190>)
 8000624:	f001 fef8 	bl	8002418 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, (uint8_t*)send3, strlen(send3), HAL_MAX_DELAY);
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff fe03 	bl	8000238 <strlen>
 8000632:	4603      	mov	r3, r0
 8000634:	b29a      	uxth	r2, r3
 8000636:	f107 0114 	add.w	r1, r7, #20
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	4841      	ldr	r0, [pc, #260]	@ (8000744 <main+0x190>)
 8000640:	f001 feea 	bl	8002418 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, (uint8_t*)send4, strlen(send4), HAL_MAX_DELAY);
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fdf6 	bl	8000238 <strlen>
 800064c:	4603      	mov	r3, r0
 800064e:	b29a      	uxth	r2, r3
 8000650:	1d39      	adds	r1, r7, #4
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	483b      	ldr	r0, [pc, #236]	@ (8000744 <main+0x190>)
 8000658:	f001 fede 	bl	8002418 <HAL_UART_Transmit>
//	  HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", strlen("\r\n"), HAL_MAX_DELAY);
//	  HAL_Delay(5000);



	  HAL_UART_Transmit(&huart3, (uint8_t*)"INPUT => ", strlen("INPUT => "), HAL_MAX_DELAY);
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
 8000660:	2209      	movs	r2, #9
 8000662:	4939      	ldr	r1, [pc, #228]	@ (8000748 <main+0x194>)
 8000664:	4837      	ldr	r0, [pc, #220]	@ (8000744 <main+0x190>)
 8000666:	f001 fed7 	bl	8002418 <HAL_UART_Transmit>
	  if (HAL_UART_Receive(&huart3, (uint8_t*)&receivedChar, 1, HAL_MAX_DELAY) == HAL_OK){
 800066a:	f107 015f 	add.w	r1, r7, #95	@ 0x5f
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
 8000672:	2201      	movs	r2, #1
 8000674:	4833      	ldr	r0, [pc, #204]	@ (8000744 <main+0x190>)
 8000676:	f001 ff58 	bl	800252a <HAL_UART_Receive>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1ed      	bne.n	800065c <main+0xa8>
		  HAL_UART_Transmit(&huart3, (uint8_t*)&receivedChar, 1, HAL_MAX_DELAY);
 8000680:	f107 015f 	add.w	r1, r7, #95	@ 0x5f
 8000684:	f04f 33ff 	mov.w	r3, #4294967295
 8000688:	2201      	movs	r2, #1
 800068a:	482e      	ldr	r0, [pc, #184]	@ (8000744 <main+0x190>)
 800068c:	f001 fec4 	bl	8002418 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", strlen("\r\n"), HAL_MAX_DELAY);
 8000690:	f04f 33ff 	mov.w	r3, #4294967295
 8000694:	2202      	movs	r2, #2
 8000696:	492d      	ldr	r1, [pc, #180]	@ (800074c <main+0x198>)
 8000698:	482a      	ldr	r0, [pc, #168]	@ (8000744 <main+0x190>)
 800069a:	f001 febd 	bl	8002418 <HAL_UART_Transmit>
		  if(receivedChar == 'q'){
 800069e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80006a2:	2b71      	cmp	r3, #113	@ 0x71
 80006a4:	d107      	bne.n	80006b6 <main+0x102>
			  HAL_UART_Transmit(&huart3, (uint8_t*)"QUIT", strlen("QUIT"), HAL_MAX_DELAY);
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
 80006aa:	2204      	movs	r2, #4
 80006ac:	4928      	ldr	r1, [pc, #160]	@ (8000750 <main+0x19c>)
 80006ae:	4825      	ldr	r0, [pc, #148]	@ (8000744 <main+0x190>)
 80006b0:	f001 feb2 	bl	8002418 <HAL_UART_Transmit>
			  break;
 80006b4:	e039      	b.n	800072a <main+0x176>
		  }
		  if(receivedChar == '1'){
 80006b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80006ba:	2b31      	cmp	r3, #49	@ 0x31
 80006bc:	d121      	bne.n	8000702 <main+0x14e>
			  HAL_UART_Transmit(&huart3, (uint8_t*)"LED will blink 3 times \r\n", strlen("LED will blink 3 times \r\n"), HAL_MAX_DELAY);
 80006be:	f04f 33ff 	mov.w	r3, #4294967295
 80006c2:	2219      	movs	r2, #25
 80006c4:	4923      	ldr	r1, [pc, #140]	@ (8000754 <main+0x1a0>)
 80006c6:	481f      	ldr	r0, [pc, #124]	@ (8000744 <main+0x190>)
 80006c8:	f001 fea6 	bl	8002418 <HAL_UART_Transmit>
			  for(int i=0; i<=2; i++){
 80006cc:	2300      	movs	r3, #0
 80006ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80006d0:	e014      	b.n	80006fc <main+0x148>
				  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2104      	movs	r1, #4
 80006d6:	4820      	ldr	r0, [pc, #128]	@ (8000758 <main+0x1a4>)
 80006d8:	f000 fd7a 	bl	80011d0 <HAL_GPIO_WritePin>
				  HAL_Delay(1000);
 80006dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006e0:	f000 fa48 	bl	8000b74 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2104      	movs	r1, #4
 80006e8:	481b      	ldr	r0, [pc, #108]	@ (8000758 <main+0x1a4>)
 80006ea:	f000 fd71 	bl	80011d0 <HAL_GPIO_WritePin>
				  HAL_Delay(1000);
 80006ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006f2:	f000 fa3f 	bl	8000b74 <HAL_Delay>
			  for(int i=0; i<=2; i++){
 80006f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80006f8:	3301      	adds	r3, #1
 80006fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80006fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80006fe:	2b02      	cmp	r3, #2
 8000700:	dde7      	ble.n	80006d2 <main+0x11e>
			  }

		  }
		  if(receivedChar != '1' && receivedChar != '2' && receivedChar != 'q'){
 8000702:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000706:	2b31      	cmp	r3, #49	@ 0x31
 8000708:	d0a8      	beq.n	800065c <main+0xa8>
 800070a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800070e:	2b32      	cmp	r3, #50	@ 0x32
 8000710:	d0a4      	beq.n	800065c <main+0xa8>
 8000712:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000716:	2b71      	cmp	r3, #113	@ 0x71
 8000718:	d0a0      	beq.n	800065c <main+0xa8>
			  HAL_UART_Transmit(&huart3, (uint8_t*)"Unknown Command\r\n", strlen("Unknown Command\r\n"), HAL_MAX_DELAY);
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
 800071e:	2211      	movs	r2, #17
 8000720:	490e      	ldr	r1, [pc, #56]	@ (800075c <main+0x1a8>)
 8000722:	4808      	ldr	r0, [pc, #32]	@ (8000744 <main+0x190>)
 8000724:	f001 fe78 	bl	8002418 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, (uint8_t*)"INPUT => ", strlen("INPUT => "), HAL_MAX_DELAY);
 8000728:	e798      	b.n	800065c <main+0xa8>
 800072a:	2300      	movs	r3, #0
	  }

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800072c:	4618      	mov	r0, r3
 800072e:	3770      	adds	r7, #112	@ 0x70
 8000730:	46bd      	mov	sp, r7
 8000732:	bdb0      	pop	{r4, r5, r7, pc}
 8000734:	08003074 	.word	0x08003074
 8000738:	08003080 	.word	0x08003080
 800073c:	080030a4 	.word	0x080030a4
 8000740:	080030c8 	.word	0x080030c8
 8000744:	20000028 	.word	0x20000028
 8000748:	0800302c 	.word	0x0800302c
 800074c:	08003038 	.word	0x08003038
 8000750:	0800303c 	.word	0x0800303c
 8000754:	08003044 	.word	0x08003044
 8000758:	40021000 	.word	0x40021000
 800075c:	08003060 	.word	0x08003060

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	@ 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2234      	movs	r2, #52	@ 0x34
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f002 fc23 	bl	8002fba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	4b22      	ldr	r3, [pc, #136]	@ (8000810 <SystemClock_Config+0xb0>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000788:	4a21      	ldr	r2, [pc, #132]	@ (8000810 <SystemClock_Config+0xb0>)
 800078a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800078e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000790:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <SystemClock_Config+0xb0>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800079c:	4b1d      	ldr	r3, [pc, #116]	@ (8000814 <SystemClock_Config+0xb4>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000814 <SystemClock_Config+0xb4>)
 80007a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b19      	ldr	r3, [pc, #100]	@ (8000814 <SystemClock_Config+0xb4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b8:	2302      	movs	r3, #2
 80007ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007bc:	2301      	movs	r3, #1
 80007be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c0:	2310      	movs	r3, #16
 80007c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 fd19 	bl	8001204 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80007d8:	f000 f84a 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f0:	f107 0308 	add.w	r3, r7, #8
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 ffb2 	bl	8001760 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000802:	f000 f835 	bl	8000870 <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3750      	adds	r7, #80	@ 0x50
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800081e:	463b      	mov	r3, r7
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800082a:	f000 faad 	bl	8000d88 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800082e:	2301      	movs	r3, #1
 8000830:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000832:	2300      	movs	r3, #0
 8000834:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800083a:	231f      	movs	r3, #31
 800083c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800083e:	2387      	movs	r3, #135	@ 0x87
 8000840:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000842:	2300      	movs	r3, #0
 8000844:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000846:	2300      	movs	r3, #0
 8000848:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800084a:	2301      	movs	r3, #1
 800084c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800084e:	2301      	movs	r3, #1
 8000850:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800085a:	463b      	mov	r3, r7
 800085c:	4618      	mov	r0, r3
 800085e:	f000 facb 	bl	8000df8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000862:	2004      	movs	r0, #4
 8000864:	f000 faa8 	bl	8000db8 <HAL_MPU_Enable>

}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <Error_Handler+0x8>

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <HAL_MspInit+0x44>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000886:	4a0e      	ldr	r2, [pc, #56]	@ (80008c0 <HAL_MspInit+0x44>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800088c:	6413      	str	r3, [r2, #64]	@ 0x40
 800088e:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <HAL_MspInit+0x44>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <HAL_MspInit+0x44>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089e:	4a08      	ldr	r2, [pc, #32]	@ (80008c0 <HAL_MspInit+0x44>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <HAL_MspInit+0x44>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <NMI_Handler+0x4>

080008cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <MemManage_Handler+0x4>

080008dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091a:	f000 f90b 	bl	8000b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <SystemInit+0x20>)
 800092a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800092e:	4a05      	ldr	r2, [pc, #20]	@ (8000944 <SystemInit+0x20>)
 8000930:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000934:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800094c:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <MX_USART3_UART_Init+0x58>)
 800094e:	4a15      	ldr	r2, [pc, #84]	@ (80009a4 <MX_USART3_UART_Init+0x5c>)
 8000950:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <MX_USART3_UART_Init+0x58>)
 8000954:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000958:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <MX_USART3_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <MX_USART3_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <MX_USART3_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <MX_USART3_UART_Init+0x58>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <MX_USART3_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <MX_USART3_UART_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097e:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <MX_USART3_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <MX_USART3_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_USART3_UART_Init+0x58>)
 800098c:	f001 fcf6 	bl	800237c <HAL_UART_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000996:	f7ff ff6b 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000028 	.word	0x20000028
 80009a4:	40004800 	.word	0x40004800

080009a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b0ae      	sub	sp, #184	@ 0xb8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2290      	movs	r2, #144	@ 0x90
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f002 faf6 	bl	8002fba <memset>
  if(uartHandle->Instance==USART3)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a22      	ldr	r2, [pc, #136]	@ (8000a5c <HAL_UART_MspInit+0xb4>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d13c      	bne.n	8000a52 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009dc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009de:	2300      	movs	r3, #0
 80009e0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4618      	mov	r0, r3
 80009e8:	f001 f8a0 	bl	8001b2c <HAL_RCCEx_PeriphCLKConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009f2:	f7ff ff3d 	bl	8000870 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <HAL_UART_MspInit+0xb8>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fa:	4a19      	ldr	r2, [pc, #100]	@ (8000a60 <HAL_UART_MspInit+0xb8>)
 80009fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a02:	4b17      	ldr	r3, [pc, #92]	@ (8000a60 <HAL_UART_MspInit+0xb8>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0e:	4b14      	ldr	r3, [pc, #80]	@ (8000a60 <HAL_UART_MspInit+0xb8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a13      	ldr	r2, [pc, #76]	@ (8000a60 <HAL_UART_MspInit+0xb8>)
 8000a14:	f043 0308 	orr.w	r3, r3, #8
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <HAL_UART_MspInit+0xb8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0308 	and.w	r3, r3, #8
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a26:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a40:	2307      	movs	r3, #7
 8000a42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a46:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <HAL_UART_MspInit+0xbc>)
 8000a4e:	f000 fa13 	bl	8000e78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000a52:	bf00      	nop
 8000a54:	37b8      	adds	r7, #184	@ 0xb8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40004800 	.word	0x40004800
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020c00 	.word	0x40020c00

08000a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aa0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a6c:	f7ff ff5a 	bl	8000924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a70:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a72:	490d      	ldr	r1, [pc, #52]	@ (8000aa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a74:	4a0d      	ldr	r2, [pc, #52]	@ (8000aac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a88:	4c0a      	ldr	r4, [pc, #40]	@ (8000ab4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a96:	f002 fa99 	bl	8002fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9a:	f7ff fd8b 	bl	80005b4 <main>
  bx  lr    
 8000a9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000aa0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aac:	08003100 	.word	0x08003100
  ldr r2, =_sbss
 8000ab0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ab4:	200000b4 	.word	0x200000b4

08000ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC_IRQHandler>

08000aba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abe:	2003      	movs	r0, #3
 8000ac0:	f000 f92e 	bl	8000d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac4:	200f      	movs	r0, #15
 8000ac6:	f000 f805 	bl	8000ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aca:	f7ff fed7 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000adc:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <HAL_InitTick+0x54>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <HAL_InitTick+0x58>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f93b 	bl	8000d6e <HAL_SYSTICK_Config>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00e      	b.n	8000b20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b0f      	cmp	r3, #15
 8000b06:	d80a      	bhi.n	8000b1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f000 f911 	bl	8000d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b14:	4a06      	ldr	r2, [pc, #24]	@ (8000b30 <HAL_InitTick+0x5c>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e000      	b.n	8000b20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	20000004 	.word	0x20000004

08000b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_IncTick+0x20>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_IncTick+0x24>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	4a04      	ldr	r2, [pc, #16]	@ (8000b58 <HAL_IncTick+0x24>)
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000008 	.word	0x20000008
 8000b58:	200000b0 	.word	0x200000b0

08000b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b03      	ldr	r3, [pc, #12]	@ (8000b70 <HAL_GetTick+0x14>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	200000b0 	.word	0x200000b0

08000b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b7c:	f7ff ffee 	bl	8000b5c <HAL_GetTick>
 8000b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b8c:	d005      	beq.n	8000b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <HAL_Delay+0x44>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4413      	add	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9a:	bf00      	nop
 8000b9c:	f7ff ffde 	bl	8000b5c <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d8f7      	bhi.n	8000b9c <HAL_Delay+0x28>
  {
  }
}
 8000bac:	bf00      	nop
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000008 	.word	0x20000008

08000bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <__NVIC_SetPriorityGrouping+0x40>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	4313      	orrs	r3, r2
 8000be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bea:	4a04      	ldr	r2, [pc, #16]	@ (8000bfc <__NVIC_SetPriorityGrouping+0x40>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00
 8000c00:	05fa0000 	.word	0x05fa0000

08000c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c08:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <__NVIC_GetPriorityGrouping+0x18>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	f003 0307 	and.w	r3, r3, #7
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db0a      	blt.n	8000c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	490c      	ldr	r1, [pc, #48]	@ (8000c6c <__NVIC_SetPriority+0x4c>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	0112      	lsls	r2, r2, #4
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	440b      	add	r3, r1
 8000c44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c48:	e00a      	b.n	8000c60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4908      	ldr	r1, [pc, #32]	@ (8000c70 <__NVIC_SetPriority+0x50>)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	3b04      	subs	r3, #4
 8000c58:	0112      	lsls	r2, r2, #4
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	761a      	strb	r2, [r3, #24]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000e100 	.word	0xe000e100
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	@ 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f1c3 0307 	rsb	r3, r3, #7
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	bf28      	it	cs
 8000c92:	2304      	movcs	r3, #4
 8000c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d902      	bls.n	8000ca4 <NVIC_EncodePriority+0x30>
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3b03      	subs	r3, #3
 8000ca2:	e000      	b.n	8000ca6 <NVIC_EncodePriority+0x32>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	43d9      	mvns	r1, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	4313      	orrs	r3, r2
         );
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3724      	adds	r7, #36	@ 0x24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cec:	d301      	bcc.n	8000cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00f      	b.n	8000d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <SysTick_Config+0x40>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	f7ff ff8e 	bl	8000c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d04:	4b05      	ldr	r3, [pc, #20]	@ (8000d1c <SysTick_Config+0x40>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0a:	4b04      	ldr	r3, [pc, #16]	@ (8000d1c <SysTick_Config+0x40>)
 8000d0c:	2207      	movs	r2, #7
 8000d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	e000e010 	.word	0xe000e010

08000d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ff47 	bl	8000bbc <__NVIC_SetPriorityGrouping>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
 8000d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d48:	f7ff ff5c 	bl	8000c04 <__NVIC_GetPriorityGrouping>
 8000d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	68b9      	ldr	r1, [r7, #8]
 8000d52:	6978      	ldr	r0, [r7, #20]
 8000d54:	f7ff ff8e 	bl	8000c74 <NVIC_EncodePriority>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff5d 	bl	8000c20 <__NVIC_SetPriority>
}
 8000d66:	bf00      	nop
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff ffb0 	bl	8000cdc <SysTick_Config>
 8000d7c:	4603      	mov	r3, r0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000d8c:	f3bf 8f5f 	dmb	sy
}
 8000d90:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000d92:	4b07      	ldr	r3, [pc, #28]	@ (8000db0 <HAL_MPU_Disable+0x28>)
 8000d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d96:	4a06      	ldr	r2, [pc, #24]	@ (8000db0 <HAL_MPU_Disable+0x28>)
 8000d98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d9c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000d9e:	4b05      	ldr	r3, [pc, #20]	@ (8000db4 <HAL_MPU_Disable+0x2c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	605a      	str	r2, [r3, #4]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00
 8000db4:	e000ed90 	.word	0xe000ed90

08000db8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8000df0 <HAL_MPU_Enable+0x38>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000dca:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <HAL_MPU_Enable+0x3c>)
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dce:	4a09      	ldr	r2, [pc, #36]	@ (8000df4 <HAL_MPU_Enable+0x3c>)
 8000dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dd4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd6:	f3bf 8f4f 	dsb	sy
}
 8000dda:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ddc:	f3bf 8f6f 	isb	sy
}
 8000de0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed90 	.word	0xe000ed90
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	785a      	ldrb	r2, [r3, #1]
 8000e04:	4b1b      	ldr	r3, [pc, #108]	@ (8000e74 <HAL_MPU_ConfigRegion+0x7c>)
 8000e06:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000e08:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <HAL_MPU_ConfigRegion+0x7c>)
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	4a19      	ldr	r2, [pc, #100]	@ (8000e74 <HAL_MPU_ConfigRegion+0x7c>)
 8000e0e:	f023 0301 	bic.w	r3, r3, #1
 8000e12:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000e14:	4a17      	ldr	r2, [pc, #92]	@ (8000e74 <HAL_MPU_ConfigRegion+0x7c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7b1b      	ldrb	r3, [r3, #12]
 8000e20:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	7adb      	ldrb	r3, [r3, #11]
 8000e26:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	7a9b      	ldrb	r3, [r3, #10]
 8000e2e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	7b5b      	ldrb	r3, [r3, #13]
 8000e36:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	7b9b      	ldrb	r3, [r3, #14]
 8000e3e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7bdb      	ldrb	r3, [r3, #15]
 8000e46:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	7a5b      	ldrb	r3, [r3, #9]
 8000e4e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	7a1b      	ldrb	r3, [r3, #8]
 8000e56:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e58:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	7812      	ldrb	r2, [r2, #0]
 8000e5e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e60:	4a04      	ldr	r2, [pc, #16]	@ (8000e74 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e62:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e64:	6113      	str	r3, [r2, #16]
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed90 	.word	0xe000ed90

08000e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	@ 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
 8000e96:	e175      	b.n	8001184 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e98:	2201      	movs	r2, #1
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	f040 8164 	bne.w	800117e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0303 	and.w	r3, r3, #3
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d005      	beq.n	8000ece <HAL_GPIO_Init+0x56>
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d130      	bne.n	8000f30 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	2203      	movs	r2, #3
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f04:	2201      	movs	r2, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	091b      	lsrs	r3, r3, #4
 8000f1a:	f003 0201 	and.w	r2, r3, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d017      	beq.n	8000f6c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d123      	bne.n	8000fc0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	08da      	lsrs	r2, r3, #3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3208      	adds	r2, #8
 8000f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	220f      	movs	r2, #15
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	691a      	ldr	r2, [r3, #16]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	69b9      	ldr	r1, [r7, #24]
 8000fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0203 	and.w	r2, r3, #3
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 80be 	beq.w	800117e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	4b66      	ldr	r3, [pc, #408]	@ (800119c <HAL_GPIO_Init+0x324>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001006:	4a65      	ldr	r2, [pc, #404]	@ (800119c <HAL_GPIO_Init+0x324>)
 8001008:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800100c:	6453      	str	r3, [r2, #68]	@ 0x44
 800100e:	4b63      	ldr	r3, [pc, #396]	@ (800119c <HAL_GPIO_Init+0x324>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800101a:	4a61      	ldr	r2, [pc, #388]	@ (80011a0 <HAL_GPIO_Init+0x328>)
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	089b      	lsrs	r3, r3, #2
 8001020:	3302      	adds	r3, #2
 8001022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	220f      	movs	r2, #15
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a58      	ldr	r2, [pc, #352]	@ (80011a4 <HAL_GPIO_Init+0x32c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d037      	beq.n	80010b6 <HAL_GPIO_Init+0x23e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a57      	ldr	r2, [pc, #348]	@ (80011a8 <HAL_GPIO_Init+0x330>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d031      	beq.n	80010b2 <HAL_GPIO_Init+0x23a>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a56      	ldr	r2, [pc, #344]	@ (80011ac <HAL_GPIO_Init+0x334>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d02b      	beq.n	80010ae <HAL_GPIO_Init+0x236>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a55      	ldr	r2, [pc, #340]	@ (80011b0 <HAL_GPIO_Init+0x338>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d025      	beq.n	80010aa <HAL_GPIO_Init+0x232>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a54      	ldr	r2, [pc, #336]	@ (80011b4 <HAL_GPIO_Init+0x33c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d01f      	beq.n	80010a6 <HAL_GPIO_Init+0x22e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a53      	ldr	r2, [pc, #332]	@ (80011b8 <HAL_GPIO_Init+0x340>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d019      	beq.n	80010a2 <HAL_GPIO_Init+0x22a>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a52      	ldr	r2, [pc, #328]	@ (80011bc <HAL_GPIO_Init+0x344>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d013      	beq.n	800109e <HAL_GPIO_Init+0x226>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a51      	ldr	r2, [pc, #324]	@ (80011c0 <HAL_GPIO_Init+0x348>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d00d      	beq.n	800109a <HAL_GPIO_Init+0x222>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a50      	ldr	r2, [pc, #320]	@ (80011c4 <HAL_GPIO_Init+0x34c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d007      	beq.n	8001096 <HAL_GPIO_Init+0x21e>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4f      	ldr	r2, [pc, #316]	@ (80011c8 <HAL_GPIO_Init+0x350>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d101      	bne.n	8001092 <HAL_GPIO_Init+0x21a>
 800108e:	2309      	movs	r3, #9
 8001090:	e012      	b.n	80010b8 <HAL_GPIO_Init+0x240>
 8001092:	230a      	movs	r3, #10
 8001094:	e010      	b.n	80010b8 <HAL_GPIO_Init+0x240>
 8001096:	2308      	movs	r3, #8
 8001098:	e00e      	b.n	80010b8 <HAL_GPIO_Init+0x240>
 800109a:	2307      	movs	r3, #7
 800109c:	e00c      	b.n	80010b8 <HAL_GPIO_Init+0x240>
 800109e:	2306      	movs	r3, #6
 80010a0:	e00a      	b.n	80010b8 <HAL_GPIO_Init+0x240>
 80010a2:	2305      	movs	r3, #5
 80010a4:	e008      	b.n	80010b8 <HAL_GPIO_Init+0x240>
 80010a6:	2304      	movs	r3, #4
 80010a8:	e006      	b.n	80010b8 <HAL_GPIO_Init+0x240>
 80010aa:	2303      	movs	r3, #3
 80010ac:	e004      	b.n	80010b8 <HAL_GPIO_Init+0x240>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e002      	b.n	80010b8 <HAL_GPIO_Init+0x240>
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <HAL_GPIO_Init+0x240>
 80010b6:	2300      	movs	r3, #0
 80010b8:	69fa      	ldr	r2, [r7, #28]
 80010ba:	f002 0203 	and.w	r2, r2, #3
 80010be:	0092      	lsls	r2, r2, #2
 80010c0:	4093      	lsls	r3, r2
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010c8:	4935      	ldr	r1, [pc, #212]	@ (80011a0 <HAL_GPIO_Init+0x328>)
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3302      	adds	r3, #2
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d6:	4b3d      	ldr	r3, [pc, #244]	@ (80011cc <HAL_GPIO_Init+0x354>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010fa:	4a34      	ldr	r2, [pc, #208]	@ (80011cc <HAL_GPIO_Init+0x354>)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001100:	4b32      	ldr	r3, [pc, #200]	@ (80011cc <HAL_GPIO_Init+0x354>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001124:	4a29      	ldr	r2, [pc, #164]	@ (80011cc <HAL_GPIO_Init+0x354>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800112a:	4b28      	ldr	r3, [pc, #160]	@ (80011cc <HAL_GPIO_Init+0x354>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800114e:	4a1f      	ldr	r2, [pc, #124]	@ (80011cc <HAL_GPIO_Init+0x354>)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001154:	4b1d      	ldr	r3, [pc, #116]	@ (80011cc <HAL_GPIO_Init+0x354>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001178:	4a14      	ldr	r2, [pc, #80]	@ (80011cc <HAL_GPIO_Init+0x354>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3301      	adds	r3, #1
 8001182:	61fb      	str	r3, [r7, #28]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	2b0f      	cmp	r3, #15
 8001188:	f67f ae86 	bls.w	8000e98 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3724      	adds	r7, #36	@ 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40013800 	.word	0x40013800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	40020400 	.word	0x40020400
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020c00 	.word	0x40020c00
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40021400 	.word	0x40021400
 80011bc:	40021800 	.word	0x40021800
 80011c0:	40021c00 	.word	0x40021c00
 80011c4:	40022000 	.word	0x40022000
 80011c8:	40022400 	.word	0x40022400
 80011cc:	40013c00 	.word	0x40013c00

080011d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
 80011dc:	4613      	mov	r3, r2
 80011de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011e0:	787b      	ldrb	r3, [r7, #1]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80011ec:	e003      	b.n	80011f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	041a      	lsls	r2, r3, #16
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	619a      	str	r2, [r3, #24]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e29b      	b.n	8001752 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 8087 	beq.w	8001336 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001228:	4b96      	ldr	r3, [pc, #600]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b04      	cmp	r3, #4
 8001232:	d00c      	beq.n	800124e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001234:	4b93      	ldr	r3, [pc, #588]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 030c 	and.w	r3, r3, #12
 800123c:	2b08      	cmp	r3, #8
 800123e:	d112      	bne.n	8001266 <HAL_RCC_OscConfig+0x62>
 8001240:	4b90      	ldr	r3, [pc, #576]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001248:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800124c:	d10b      	bne.n	8001266 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124e:	4b8d      	ldr	r3, [pc, #564]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d06c      	beq.n	8001334 <HAL_RCC_OscConfig+0x130>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d168      	bne.n	8001334 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e275      	b.n	8001752 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800126e:	d106      	bne.n	800127e <HAL_RCC_OscConfig+0x7a>
 8001270:	4b84      	ldr	r3, [pc, #528]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a83      	ldr	r2, [pc, #524]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 8001276:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	e02e      	b.n	80012dc <HAL_RCC_OscConfig+0xd8>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x9c>
 8001286:	4b7f      	ldr	r3, [pc, #508]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a7e      	ldr	r2, [pc, #504]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 800128c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	4b7c      	ldr	r3, [pc, #496]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a7b      	ldr	r2, [pc, #492]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 8001298:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e01d      	b.n	80012dc <HAL_RCC_OscConfig+0xd8>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012a8:	d10c      	bne.n	80012c4 <HAL_RCC_OscConfig+0xc0>
 80012aa:	4b76      	ldr	r3, [pc, #472]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a75      	ldr	r2, [pc, #468]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 80012b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	4b73      	ldr	r3, [pc, #460]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a72      	ldr	r2, [pc, #456]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 80012bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e00b      	b.n	80012dc <HAL_RCC_OscConfig+0xd8>
 80012c4:	4b6f      	ldr	r3, [pc, #444]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a6e      	ldr	r2, [pc, #440]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 80012ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4b6c      	ldr	r3, [pc, #432]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a6b      	ldr	r2, [pc, #428]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 80012d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d013      	beq.n	800130c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e4:	f7ff fc3a 	bl	8000b5c <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fc36 	bl	8000b5c <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	@ 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e229      	b.n	8001752 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fe:	4b61      	ldr	r3, [pc, #388]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0xe8>
 800130a:	e014      	b.n	8001336 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130c:	f7ff fc26 	bl	8000b5c <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff fc22 	bl	8000b5c <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	@ 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e215      	b.n	8001752 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001326:	4b57      	ldr	r3, [pc, #348]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0x110>
 8001332:	e000      	b.n	8001336 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d069      	beq.n	8001416 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001342:	4b50      	ldr	r3, [pc, #320]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00b      	beq.n	8001366 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800134e:	4b4d      	ldr	r3, [pc, #308]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b08      	cmp	r3, #8
 8001358:	d11c      	bne.n	8001394 <HAL_RCC_OscConfig+0x190>
 800135a:	4b4a      	ldr	r3, [pc, #296]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d116      	bne.n	8001394 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001366:	4b47      	ldr	r3, [pc, #284]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d005      	beq.n	800137e <HAL_RCC_OscConfig+0x17a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d001      	beq.n	800137e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e1e9      	b.n	8001752 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137e:	4b41      	ldr	r3, [pc, #260]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	493d      	ldr	r1, [pc, #244]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 800138e:	4313      	orrs	r3, r2
 8001390:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001392:	e040      	b.n	8001416 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d023      	beq.n	80013e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800139c:	4b39      	ldr	r3, [pc, #228]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a38      	ldr	r2, [pc, #224]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a8:	f7ff fbd8 	bl	8000b5c <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b0:	f7ff fbd4 	bl	8000b5c <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e1c7      	b.n	8001752 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c2:	4b30      	ldr	r3, [pc, #192]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	4929      	ldr	r1, [pc, #164]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]
 80013e2:	e018      	b.n	8001416 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e4:	4b27      	ldr	r3, [pc, #156]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a26      	ldr	r2, [pc, #152]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 80013ea:	f023 0301 	bic.w	r3, r3, #1
 80013ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff fbb4 	bl	8000b5c <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f8:	f7ff fbb0 	bl	8000b5c <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e1a3      	b.n	8001752 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	4b1e      	ldr	r3, [pc, #120]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d038      	beq.n	8001494 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d019      	beq.n	800145e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142a:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 800142c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800142e:	4a15      	ldr	r2, [pc, #84]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001436:	f7ff fb91 	bl	8000b5c <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143e:	f7ff fb8d 	bl	8000b5c <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e180      	b.n	8001752 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001450:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 8001452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x23a>
 800145c:	e01a      	b.n	8001494 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145e:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 8001460:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001462:	4a08      	ldr	r2, [pc, #32]	@ (8001484 <HAL_RCC_OscConfig+0x280>)
 8001464:	f023 0301 	bic.w	r3, r3, #1
 8001468:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800146a:	f7ff fb77 	bl	8000b5c <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001470:	e00a      	b.n	8001488 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001472:	f7ff fb73 	bl	8000b5c <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d903      	bls.n	8001488 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e166      	b.n	8001752 <HAL_RCC_OscConfig+0x54e>
 8001484:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001488:	4b92      	ldr	r3, [pc, #584]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 800148a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1ee      	bne.n	8001472 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 80a4 	beq.w	80015ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a2:	4b8c      	ldr	r3, [pc, #560]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10d      	bne.n	80014ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	4b89      	ldr	r3, [pc, #548]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	4a88      	ldr	r2, [pc, #544]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ba:	4b86      	ldr	r3, [pc, #536]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c6:	2301      	movs	r3, #1
 80014c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ca:	4b83      	ldr	r3, [pc, #524]	@ (80016d8 <HAL_RCC_OscConfig+0x4d4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d118      	bne.n	8001508 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80014d6:	4b80      	ldr	r3, [pc, #512]	@ (80016d8 <HAL_RCC_OscConfig+0x4d4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a7f      	ldr	r2, [pc, #508]	@ (80016d8 <HAL_RCC_OscConfig+0x4d4>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fb3b 	bl	8000b5c <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ea:	f7ff fb37 	bl	8000b5c <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b64      	cmp	r3, #100	@ 0x64
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e12a      	b.n	8001752 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014fc:	4b76      	ldr	r3, [pc, #472]	@ (80016d8 <HAL_RCC_OscConfig+0x4d4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d106      	bne.n	800151e <HAL_RCC_OscConfig+0x31a>
 8001510:	4b70      	ldr	r3, [pc, #448]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001514:	4a6f      	ldr	r2, [pc, #444]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6713      	str	r3, [r2, #112]	@ 0x70
 800151c:	e02d      	b.n	800157a <HAL_RCC_OscConfig+0x376>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10c      	bne.n	8001540 <HAL_RCC_OscConfig+0x33c>
 8001526:	4b6b      	ldr	r3, [pc, #428]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800152a:	4a6a      	ldr	r2, [pc, #424]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	6713      	str	r3, [r2, #112]	@ 0x70
 8001532:	4b68      	ldr	r3, [pc, #416]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001536:	4a67      	ldr	r2, [pc, #412]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 8001538:	f023 0304 	bic.w	r3, r3, #4
 800153c:	6713      	str	r3, [r2, #112]	@ 0x70
 800153e:	e01c      	b.n	800157a <HAL_RCC_OscConfig+0x376>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2b05      	cmp	r3, #5
 8001546:	d10c      	bne.n	8001562 <HAL_RCC_OscConfig+0x35e>
 8001548:	4b62      	ldr	r3, [pc, #392]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800154c:	4a61      	ldr	r2, [pc, #388]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	6713      	str	r3, [r2, #112]	@ 0x70
 8001554:	4b5f      	ldr	r3, [pc, #380]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 8001556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001558:	4a5e      	ldr	r2, [pc, #376]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001560:	e00b      	b.n	800157a <HAL_RCC_OscConfig+0x376>
 8001562:	4b5c      	ldr	r3, [pc, #368]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 8001564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001566:	4a5b      	ldr	r2, [pc, #364]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 8001568:	f023 0301 	bic.w	r3, r3, #1
 800156c:	6713      	str	r3, [r2, #112]	@ 0x70
 800156e:	4b59      	ldr	r3, [pc, #356]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001572:	4a58      	ldr	r2, [pc, #352]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 8001574:	f023 0304 	bic.w	r3, r3, #4
 8001578:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d015      	beq.n	80015ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001582:	f7ff faeb 	bl	8000b5c <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001588:	e00a      	b.n	80015a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800158a:	f7ff fae7 	bl	8000b5c <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001598:	4293      	cmp	r3, r2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e0d8      	b.n	8001752 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a0:	4b4c      	ldr	r3, [pc, #304]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0ee      	beq.n	800158a <HAL_RCC_OscConfig+0x386>
 80015ac:	e014      	b.n	80015d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ae:	f7ff fad5 	bl	8000b5c <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b4:	e00a      	b.n	80015cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b6:	f7ff fad1 	bl	8000b5c <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e0c2      	b.n	8001752 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015cc:	4b41      	ldr	r3, [pc, #260]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 80015ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1ee      	bne.n	80015b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d105      	bne.n	80015ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015de:	4b3d      	ldr	r3, [pc, #244]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e2:	4a3c      	ldr	r2, [pc, #240]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 80015e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015e8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 80ae 	beq.w	8001750 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015f4:	4b37      	ldr	r3, [pc, #220]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 030c 	and.w	r3, r3, #12
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d06d      	beq.n	80016dc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d14b      	bne.n	80016a0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001608:	4b32      	ldr	r3, [pc, #200]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a31      	ldr	r2, [pc, #196]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 800160e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001614:	f7ff faa2 	bl	8000b5c <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161c:	f7ff fa9e 	bl	8000b5c <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e091      	b.n	8001752 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162e:	4b29      	ldr	r3, [pc, #164]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69da      	ldr	r2, [r3, #28]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001648:	019b      	lsls	r3, r3, #6
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001650:	085b      	lsrs	r3, r3, #1
 8001652:	3b01      	subs	r3, #1
 8001654:	041b      	lsls	r3, r3, #16
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800165c:	061b      	lsls	r3, r3, #24
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001664:	071b      	lsls	r3, r3, #28
 8001666:	491b      	ldr	r1, [pc, #108]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800166c:	4b19      	ldr	r3, [pc, #100]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a18      	ldr	r2, [pc, #96]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 8001672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff fa70 	bl	8000b5c <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff fa6c 	bl	8000b5c <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e05f      	b.n	8001752 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001692:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0x47c>
 800169e:	e057      	b.n	8001750 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a0:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0b      	ldr	r2, [pc, #44]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 80016a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ac:	f7ff fa56 	bl	8000b5c <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff fa52 	bl	8000b5c <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e045      	b.n	8001752 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c6:	4b03      	ldr	r3, [pc, #12]	@ (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4b0>
 80016d2:	e03d      	b.n	8001750 <HAL_RCC_OscConfig+0x54c>
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80016dc:	4b1f      	ldr	r3, [pc, #124]	@ (800175c <HAL_RCC_OscConfig+0x558>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d030      	beq.n	800174c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d129      	bne.n	800174c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001702:	429a      	cmp	r2, r3
 8001704:	d122      	bne.n	800174c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800170c:	4013      	ands	r3, r2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001712:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001714:	4293      	cmp	r3, r2
 8001716:	d119      	bne.n	800174c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001722:	085b      	lsrs	r3, r3, #1
 8001724:	3b01      	subs	r3, #1
 8001726:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d10f      	bne.n	800174c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001736:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d107      	bne.n	800174c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e000      	b.n	8001752 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800

08001760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0d0      	b.n	800191a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001778:	4b6a      	ldr	r3, [pc, #424]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 030f 	and.w	r3, r3, #15
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d910      	bls.n	80017a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b67      	ldr	r3, [pc, #412]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 020f 	bic.w	r2, r3, #15
 800178e:	4965      	ldr	r1, [pc, #404]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	4313      	orrs	r3, r2
 8001794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001796:	4b63      	ldr	r3, [pc, #396]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0b8      	b.n	800191a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d020      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c0:	4b59      	ldr	r3, [pc, #356]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	4a58      	ldr	r2, [pc, #352]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 80017c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d8:	4b53      	ldr	r3, [pc, #332]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4a52      	ldr	r2, [pc, #328]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 80017de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e4:	4b50      	ldr	r3, [pc, #320]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	494d      	ldr	r1, [pc, #308]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d040      	beq.n	8001884 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d107      	bne.n	800181a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	4b47      	ldr	r3, [pc, #284]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d115      	bne.n	8001842 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e07f      	b.n	800191a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d107      	bne.n	8001832 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001822:	4b41      	ldr	r3, [pc, #260]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e073      	b.n	800191a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001832:	4b3d      	ldr	r3, [pc, #244]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e06b      	b.n	800191a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001842:	4b39      	ldr	r3, [pc, #228]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f023 0203 	bic.w	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4936      	ldr	r1, [pc, #216]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 8001850:	4313      	orrs	r3, r2
 8001852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001854:	f7ff f982 	bl	8000b5c <HAL_GetTick>
 8001858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	e00a      	b.n	8001872 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185c:	f7ff f97e 	bl	8000b5c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e053      	b.n	800191a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001872:	4b2d      	ldr	r3, [pc, #180]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 020c 	and.w	r2, r3, #12
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	429a      	cmp	r2, r3
 8001882:	d1eb      	bne.n	800185c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001884:	4b27      	ldr	r3, [pc, #156]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 030f 	and.w	r3, r3, #15
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d210      	bcs.n	80018b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b24      	ldr	r3, [pc, #144]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 020f 	bic.w	r2, r3, #15
 800189a:	4922      	ldr	r1, [pc, #136]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a2:	4b20      	ldr	r3, [pc, #128]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e032      	b.n	800191a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d008      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c0:	4b19      	ldr	r3, [pc, #100]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	4916      	ldr	r1, [pc, #88]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d009      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018de:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	490e      	ldr	r1, [pc, #56]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018f2:	f000 f821 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 80018f6:	4602      	mov	r2, r0
 80018f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	490a      	ldr	r1, [pc, #40]	@ (800192c <HAL_RCC_ClockConfig+0x1cc>)
 8001904:	5ccb      	ldrb	r3, [r1, r3]
 8001906:	fa22 f303 	lsr.w	r3, r2, r3
 800190a:	4a09      	ldr	r2, [pc, #36]	@ (8001930 <HAL_RCC_ClockConfig+0x1d0>)
 800190c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800190e:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <HAL_RCC_ClockConfig+0x1d4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff f8de 	bl	8000ad4 <HAL_InitTick>

  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023c00 	.word	0x40023c00
 8001928:	40023800 	.word	0x40023800
 800192c:	080030d8 	.word	0x080030d8
 8001930:	20000000 	.word	0x20000000
 8001934:	20000004 	.word	0x20000004

08001938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800193c:	b090      	sub	sp, #64	@ 0x40
 800193e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	637b      	str	r3, [r7, #52]	@ 0x34
 8001944:	2300      	movs	r3, #0
 8001946:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001948:	2300      	movs	r3, #0
 800194a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001950:	4b59      	ldr	r3, [pc, #356]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b08      	cmp	r3, #8
 800195a:	d00d      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x40>
 800195c:	2b08      	cmp	r3, #8
 800195e:	f200 80a1 	bhi.w	8001aa4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x34>
 8001966:	2b04      	cmp	r3, #4
 8001968:	d003      	beq.n	8001972 <HAL_RCC_GetSysClockFreq+0x3a>
 800196a:	e09b      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800196c:	4b53      	ldr	r3, [pc, #332]	@ (8001abc <HAL_RCC_GetSysClockFreq+0x184>)
 800196e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001970:	e09b      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001972:	4b53      	ldr	r3, [pc, #332]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001974:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001976:	e098      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001978:	4b4f      	ldr	r3, [pc, #316]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x180>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001980:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001982:	4b4d      	ldr	r3, [pc, #308]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d028      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	099b      	lsrs	r3, r3, #6
 8001994:	2200      	movs	r2, #0
 8001996:	623b      	str	r3, [r7, #32]
 8001998:	627a      	str	r2, [r7, #36]	@ 0x24
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019a0:	2100      	movs	r1, #0
 80019a2:	4b47      	ldr	r3, [pc, #284]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x188>)
 80019a4:	fb03 f201 	mul.w	r2, r3, r1
 80019a8:	2300      	movs	r3, #0
 80019aa:	fb00 f303 	mul.w	r3, r0, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	4a43      	ldr	r2, [pc, #268]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x188>)
 80019b2:	fba0 1202 	umull	r1, r2, r0, r2
 80019b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019b8:	460a      	mov	r2, r1
 80019ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80019bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019be:	4413      	add	r3, r2
 80019c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019c4:	2200      	movs	r2, #0
 80019c6:	61bb      	str	r3, [r7, #24]
 80019c8:	61fa      	str	r2, [r7, #28]
 80019ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80019d2:	f7fe fc39 	bl	8000248 <__aeabi_uldivmod>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4613      	mov	r3, r2
 80019dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019de:	e053      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e0:	4b35      	ldr	r3, [pc, #212]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x180>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	099b      	lsrs	r3, r3, #6
 80019e6:	2200      	movs	r2, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	617a      	str	r2, [r7, #20]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019f2:	f04f 0b00 	mov.w	fp, #0
 80019f6:	4652      	mov	r2, sl
 80019f8:	465b      	mov	r3, fp
 80019fa:	f04f 0000 	mov.w	r0, #0
 80019fe:	f04f 0100 	mov.w	r1, #0
 8001a02:	0159      	lsls	r1, r3, #5
 8001a04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a08:	0150      	lsls	r0, r2, #5
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	ebb2 080a 	subs.w	r8, r2, sl
 8001a12:	eb63 090b 	sbc.w	r9, r3, fp
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a2a:	ebb2 0408 	subs.w	r4, r2, r8
 8001a2e:	eb63 0509 	sbc.w	r5, r3, r9
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	00eb      	lsls	r3, r5, #3
 8001a3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a40:	00e2      	lsls	r2, r4, #3
 8001a42:	4614      	mov	r4, r2
 8001a44:	461d      	mov	r5, r3
 8001a46:	eb14 030a 	adds.w	r3, r4, sl
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	eb45 030b 	adc.w	r3, r5, fp
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a5e:	4629      	mov	r1, r5
 8001a60:	028b      	lsls	r3, r1, #10
 8001a62:	4621      	mov	r1, r4
 8001a64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a68:	4621      	mov	r1, r4
 8001a6a:	028a      	lsls	r2, r1, #10
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a72:	2200      	movs	r2, #0
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	60fa      	str	r2, [r7, #12]
 8001a78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a7c:	f7fe fbe4 	bl	8000248 <__aeabi_uldivmod>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4613      	mov	r3, r2
 8001a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001a88:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	0c1b      	lsrs	r3, r3, #16
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	3301      	adds	r3, #1
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001a98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001aa2:	e002      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aa4:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <HAL_RCC_GetSysClockFreq+0x184>)
 8001aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3740      	adds	r7, #64	@ 0x40
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	00f42400 	.word	0x00f42400
 8001ac0:	017d7840 	.word	0x017d7840

08001ac4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac8:	4b03      	ldr	r3, [pc, #12]	@ (8001ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	20000000 	.word	0x20000000

08001adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ae0:	f7ff fff0 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	0a9b      	lsrs	r3, r3, #10
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	4903      	ldr	r1, [pc, #12]	@ (8001b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001af2:	5ccb      	ldrb	r3, [r1, r3]
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40023800 	.word	0x40023800
 8001b00:	080030e8 	.word	0x080030e8

08001b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b08:	f7ff ffdc 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	0b5b      	lsrs	r3, r3, #13
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	4903      	ldr	r1, [pc, #12]	@ (8001b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b1a:	5ccb      	ldrb	r3, [r1, r3]
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40023800 	.word	0x40023800
 8001b28:	080030e8 	.word	0x080030e8

08001b2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d012      	beq.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b54:	4b69      	ldr	r3, [pc, #420]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	4a68      	ldr	r2, [pc, #416]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b5a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001b5e:	6093      	str	r3, [r2, #8]
 8001b60:	4b66      	ldr	r3, [pc, #408]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b68:	4964      	ldr	r1, [pc, #400]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001b76:	2301      	movs	r3, #1
 8001b78:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d017      	beq.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b86:	4b5d      	ldr	r3, [pc, #372]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b8c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b94:	4959      	ldr	r1, [pc, #356]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ba4:	d101      	bne.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d017      	beq.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001bc2:	4b4e      	ldr	r3, [pc, #312]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bc8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	494a      	ldr	r1, [pc, #296]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001be0:	d101      	bne.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001be2:	2301      	movs	r3, #1
 8001be4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0320 	and.w	r3, r3, #32
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 808b 	beq.w	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c10:	4b3a      	ldr	r3, [pc, #232]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	4a39      	ldr	r2, [pc, #228]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1c:	4b37      	ldr	r3, [pc, #220]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c28:	4b35      	ldr	r3, [pc, #212]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a34      	ldr	r2, [pc, #208]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c34:	f7fe ff92 	bl	8000b5c <HAL_GetTick>
 8001c38:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3c:	f7fe ff8e 	bl	8000b5c <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	@ 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e38f      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c5a:	4b28      	ldr	r3, [pc, #160]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c62:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d035      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d02e      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c78:	4b20      	ldr	r3, [pc, #128]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c80:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c82:	4b1e      	ldr	r3, [pc, #120]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c86:	4a1d      	ldr	r2, [pc, #116]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c8c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c92:	4a1a      	ldr	r2, [pc, #104]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c98:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001c9a:	4a18      	ldr	r2, [pc, #96]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ca0:	4b16      	ldr	r3, [pc, #88]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d114      	bne.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cac:	f7fe ff56 	bl	8000b5c <HAL_GetTick>
 8001cb0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb2:	e00a      	b.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb4:	f7fe ff52 	bl	8000b5c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e351      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cca:	4b0c      	ldr	r3, [pc, #48]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0ee      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001ce2:	d111      	bne.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001ce4:	4b05      	ldr	r3, [pc, #20]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cf0:	4b04      	ldr	r3, [pc, #16]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001cf2:	400b      	ands	r3, r1
 8001cf4:	4901      	ldr	r1, [pc, #4]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	608b      	str	r3, [r1, #8]
 8001cfa:	e00b      	b.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40007000 	.word	0x40007000
 8001d04:	0ffffcff 	.word	0x0ffffcff
 8001d08:	4bac      	ldr	r3, [pc, #688]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4aab      	ldr	r2, [pc, #684]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d0e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001d12:	6093      	str	r3, [r2, #8]
 8001d14:	4ba9      	ldr	r3, [pc, #676]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d16:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d20:	49a6      	ldr	r1, [pc, #664]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0310 	and.w	r3, r3, #16
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d010      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d32:	4ba2      	ldr	r3, [pc, #648]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d38:	4aa0      	ldr	r2, [pc, #640]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d42:	4b9e      	ldr	r3, [pc, #632]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d44:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d4c:	499b      	ldr	r1, [pc, #620]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00a      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d60:	4b96      	ldr	r3, [pc, #600]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d66:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d6e:	4993      	ldr	r1, [pc, #588]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00a      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d82:	4b8e      	ldr	r3, [pc, #568]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d88:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d90:	498a      	ldr	r1, [pc, #552]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00a      	beq.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001da4:	4b85      	ldr	r3, [pc, #532]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001daa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001db2:	4982      	ldr	r1, [pc, #520]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00a      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001dc6:	4b7d      	ldr	r3, [pc, #500]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dcc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd4:	4979      	ldr	r1, [pc, #484]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00a      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001de8:	4b74      	ldr	r3, [pc, #464]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dee:	f023 0203 	bic.w	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df6:	4971      	ldr	r1, [pc, #452]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00a      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e0a:	4b6c      	ldr	r3, [pc, #432]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e10:	f023 020c 	bic.w	r2, r3, #12
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e18:	4968      	ldr	r1, [pc, #416]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00a      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e2c:	4b63      	ldr	r3, [pc, #396]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e32:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3a:	4960      	ldr	r1, [pc, #384]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00a      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e4e:	4b5b      	ldr	r3, [pc, #364]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e54:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e5c:	4957      	ldr	r1, [pc, #348]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00a      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e70:	4b52      	ldr	r3, [pc, #328]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e76:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7e:	494f      	ldr	r1, [pc, #316]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00a      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001e92:	4b4a      	ldr	r3, [pc, #296]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e98:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea0:	4946      	ldr	r1, [pc, #280]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00a      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001eb4:	4b41      	ldr	r3, [pc, #260]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eba:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec2:	493e      	ldr	r1, [pc, #248]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001ed6:	4b39      	ldr	r3, [pc, #228]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001edc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ee4:	4935      	ldr	r1, [pc, #212]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00a      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ef8:	4b30      	ldr	r3, [pc, #192]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001efe:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f06:	492d      	ldr	r1, [pc, #180]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d011      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001f1a:	4b28      	ldr	r3, [pc, #160]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f20:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f28:	4924      	ldr	r1, [pc, #144]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001f38:	d101      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f5a:	4b18      	ldr	r3, [pc, #96]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f60:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f68:	4914      	ldr	r1, [pc, #80]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00b      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f82:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f8c:	490b      	ldr	r1, [pc, #44]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00f      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001fa0:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fb0:	4902      	ldr	r1, [pc, #8]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001fb8:	e002      	b.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00b      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001fcc:	4b8a      	ldr	r3, [pc, #552]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fd2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fdc:	4986      	ldr	r1, [pc, #536]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00b      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001ff0:	4b81      	ldr	r3, [pc, #516]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ff6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002000:	497d      	ldr	r1, [pc, #500]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d006      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 80d6 	beq.w	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800201c:	4b76      	ldr	r3, [pc, #472]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a75      	ldr	r2, [pc, #468]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002022:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002028:	f7fe fd98 	bl	8000b5c <HAL_GetTick>
 800202c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002030:	f7fe fd94 	bl	8000b5c <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b64      	cmp	r3, #100	@ 0x64
 800203c:	d901      	bls.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e195      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002042:	4b6d      	ldr	r3, [pc, #436]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d021      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800205e:	2b00      	cmp	r3, #0
 8002060:	d11d      	bne.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002062:	4b65      	ldr	r3, [pc, #404]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002064:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002068:	0c1b      	lsrs	r3, r3, #16
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002070:	4b61      	ldr	r3, [pc, #388]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002072:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002076:	0e1b      	lsrs	r3, r3, #24
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	019a      	lsls	r2, r3, #6
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	041b      	lsls	r3, r3, #16
 8002088:	431a      	orrs	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	061b      	lsls	r3, r3, #24
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	071b      	lsls	r3, r3, #28
 8002096:	4958      	ldr	r1, [pc, #352]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d004      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020b2:	d00a      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d02e      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020c8:	d129      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80020ca:	4b4b      	ldr	r3, [pc, #300]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020d0:	0c1b      	lsrs	r3, r3, #16
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020d8:	4b47      	ldr	r3, [pc, #284]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020de:	0f1b      	lsrs	r3, r3, #28
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	019a      	lsls	r2, r3, #6
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	041b      	lsls	r3, r3, #16
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	061b      	lsls	r3, r3, #24
 80020f8:	431a      	orrs	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	071b      	lsls	r3, r3, #28
 80020fe:	493e      	ldr	r1, [pc, #248]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002106:	4b3c      	ldr	r3, [pc, #240]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002108:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800210c:	f023 021f 	bic.w	r2, r3, #31
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002114:	3b01      	subs	r3, #1
 8002116:	4938      	ldr	r1, [pc, #224]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d01d      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800212a:	4b33      	ldr	r3, [pc, #204]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800212c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002130:	0e1b      	lsrs	r3, r3, #24
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002138:	4b2f      	ldr	r3, [pc, #188]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800213a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800213e:	0f1b      	lsrs	r3, r3, #28
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	019a      	lsls	r2, r3, #6
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	041b      	lsls	r3, r3, #16
 8002152:	431a      	orrs	r2, r3
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	061b      	lsls	r3, r3, #24
 8002158:	431a      	orrs	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	071b      	lsls	r3, r3, #28
 800215e:	4926      	ldr	r1, [pc, #152]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002160:	4313      	orrs	r3, r2
 8002162:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d011      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	019a      	lsls	r2, r3, #6
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	041b      	lsls	r3, r3, #16
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	061b      	lsls	r3, r3, #24
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	071b      	lsls	r3, r3, #28
 800218e:	491a      	ldr	r1, [pc, #104]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002190:	4313      	orrs	r3, r2
 8002192:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002196:	4b18      	ldr	r3, [pc, #96]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a17      	ldr	r2, [pc, #92]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800219c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80021a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021a2:	f7fe fcdb 	bl	8000b5c <HAL_GetTick>
 80021a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021aa:	f7fe fcd7 	bl	8000b5c <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b64      	cmp	r3, #100	@ 0x64
 80021b6:	d901      	bls.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e0d8      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021bc:	4b0e      	ldr	r3, [pc, #56]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	f040 80ce 	bne.w	800236c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80021d0:	4b09      	ldr	r3, [pc, #36]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a08      	ldr	r2, [pc, #32]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021dc:	f7fe fcbe 	bl	8000b5c <HAL_GetTick>
 80021e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021e2:	e00b      	b.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80021e4:	f7fe fcba 	bl	8000b5c <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	@ 0x64
 80021f0:	d904      	bls.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e0bb      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002204:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002208:	d0ec      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800221a:	2b00      	cmp	r3, #0
 800221c:	d009      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002226:	2b00      	cmp	r3, #0
 8002228:	d02e      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d12a      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002232:	4b51      	ldr	r3, [pc, #324]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002238:	0c1b      	lsrs	r3, r3, #16
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002240:	4b4d      	ldr	r3, [pc, #308]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002246:	0f1b      	lsrs	r3, r3, #28
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	019a      	lsls	r2, r3, #6
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	041b      	lsls	r3, r3, #16
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	061b      	lsls	r3, r3, #24
 8002260:	431a      	orrs	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	071b      	lsls	r3, r3, #28
 8002266:	4944      	ldr	r1, [pc, #272]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800226e:	4b42      	ldr	r3, [pc, #264]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002270:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002274:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227c:	3b01      	subs	r3, #1
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	493d      	ldr	r1, [pc, #244]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d022      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002298:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800229c:	d11d      	bne.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800229e:	4b36      	ldr	r3, [pc, #216]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a4:	0e1b      	lsrs	r3, r3, #24
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80022ac:	4b32      	ldr	r3, [pc, #200]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b2:	0f1b      	lsrs	r3, r3, #28
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	019a      	lsls	r2, r3, #6
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	041b      	lsls	r3, r3, #16
 80022c6:	431a      	orrs	r2, r3
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	061b      	lsls	r3, r3, #24
 80022cc:	431a      	orrs	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	071b      	lsls	r3, r3, #28
 80022d2:	4929      	ldr	r1, [pc, #164]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d028      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80022e6:	4b24      	ldr	r3, [pc, #144]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ec:	0e1b      	lsrs	r3, r3, #24
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80022f4:	4b20      	ldr	r3, [pc, #128]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fa:	0c1b      	lsrs	r3, r3, #16
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	019a      	lsls	r2, r3, #6
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	041b      	lsls	r3, r3, #16
 800230c:	431a      	orrs	r2, r3
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	061b      	lsls	r3, r3, #24
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	071b      	lsls	r3, r3, #28
 800231a:	4917      	ldr	r1, [pc, #92]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002322:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002328:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002330:	4911      	ldr	r1, [pc, #68]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002338:	4b0f      	ldr	r3, [pc, #60]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0e      	ldr	r2, [pc, #56]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800233e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002342:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002344:	f7fe fc0a 	bl	8000b5c <HAL_GetTick>
 8002348:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800234a:	e008      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800234c:	f7fe fc06 	bl	8000b5c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	@ 0x64
 8002358:	d901      	bls.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e007      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800235e:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002366:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800236a:	d1ef      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800

0800237c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e040      	b.n	8002410 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe fb02 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2224      	movs	r2, #36	@ 0x24
 80023a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0201 	bic.w	r2, r2, #1
 80023b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 fbde 	bl	8002b84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f977 	bl	80026bc <UART_SetConfig>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e01b      	b.n	8002410 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 fc5d 	bl	8002cc8 <UART_CheckIdleState>
 800240e:	4603      	mov	r3, r0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	@ 0x28
 800241c:	af02      	add	r7, sp, #8
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	4613      	mov	r3, r2
 8002426:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800242c:	2b20      	cmp	r3, #32
 800242e:	d177      	bne.n	8002520 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <HAL_UART_Transmit+0x24>
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e070      	b.n	8002522 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2221      	movs	r2, #33	@ 0x21
 800244c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800244e:	f7fe fb85 	bl	8000b5c <HAL_GetTick>
 8002452:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	88fa      	ldrh	r2, [r7, #6]
 8002458:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	88fa      	ldrh	r2, [r7, #6]
 8002460:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800246c:	d108      	bne.n	8002480 <HAL_UART_Transmit+0x68>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d104      	bne.n	8002480 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	e003      	b.n	8002488 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002484:	2300      	movs	r3, #0
 8002486:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002488:	e02f      	b.n	80024ea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2200      	movs	r2, #0
 8002492:	2180      	movs	r1, #128	@ 0x80
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 fcbf 	bl	8002e18 <UART_WaitOnFlagUntilTimeout>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d004      	beq.n	80024aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2220      	movs	r2, #32
 80024a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e03b      	b.n	8002522 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10b      	bne.n	80024c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	3302      	adds	r3, #2
 80024c4:	61bb      	str	r3, [r7, #24]
 80024c6:	e007      	b.n	80024d8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	781a      	ldrb	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3301      	adds	r3, #1
 80024d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80024de:	b29b      	uxth	r3, r3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1c9      	bne.n	800248a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2200      	movs	r2, #0
 80024fe:	2140      	movs	r1, #64	@ 0x40
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 fc89 	bl	8002e18 <UART_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d004      	beq.n	8002516 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2220      	movs	r2, #32
 8002510:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e005      	b.n	8002522 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	e000      	b.n	8002522 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002520:	2302      	movs	r3, #2
  }
}
 8002522:	4618      	mov	r0, r3
 8002524:	3720      	adds	r7, #32
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b08a      	sub	sp, #40	@ 0x28
 800252e:	af02      	add	r7, sp, #8
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	4613      	mov	r3, r2
 8002538:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002540:	2b20      	cmp	r3, #32
 8002542:	f040 80b5 	bne.w	80026b0 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <HAL_UART_Receive+0x28>
 800254c:	88fb      	ldrh	r3, [r7, #6]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e0ad      	b.n	80026b2 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2222      	movs	r2, #34	@ 0x22
 8002562:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800256c:	f7fe faf6 	bl	8000b5c <HAL_GetTick>
 8002570:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	88fa      	ldrh	r2, [r7, #6]
 8002576:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	88fa      	ldrh	r2, [r7, #6]
 800257e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800258a:	d10e      	bne.n	80025aa <HAL_UART_Receive+0x80>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d105      	bne.n	80025a0 <HAL_UART_Receive+0x76>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800259a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800259e:	e02d      	b.n	80025fc <HAL_UART_Receive+0xd2>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	22ff      	movs	r2, #255	@ 0xff
 80025a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80025a8:	e028      	b.n	80025fc <HAL_UART_Receive+0xd2>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10d      	bne.n	80025ce <HAL_UART_Receive+0xa4>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d104      	bne.n	80025c4 <HAL_UART_Receive+0x9a>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	22ff      	movs	r2, #255	@ 0xff
 80025be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80025c2:	e01b      	b.n	80025fc <HAL_UART_Receive+0xd2>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	227f      	movs	r2, #127	@ 0x7f
 80025c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80025cc:	e016      	b.n	80025fc <HAL_UART_Receive+0xd2>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025d6:	d10d      	bne.n	80025f4 <HAL_UART_Receive+0xca>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d104      	bne.n	80025ea <HAL_UART_Receive+0xc0>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	227f      	movs	r2, #127	@ 0x7f
 80025e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80025e8:	e008      	b.n	80025fc <HAL_UART_Receive+0xd2>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	223f      	movs	r2, #63	@ 0x3f
 80025ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80025f2:	e003      	b.n	80025fc <HAL_UART_Receive+0xd2>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002602:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800260c:	d108      	bne.n	8002620 <HAL_UART_Receive+0xf6>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d104      	bne.n	8002620 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	e003      	b.n	8002628 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002624:	2300      	movs	r3, #0
 8002626:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002628:	e036      	b.n	8002698 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2200      	movs	r2, #0
 8002632:	2120      	movs	r1, #32
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 fbef 	bl	8002e18 <UART_WaitOnFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2220      	movs	r2, #32
 8002644:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e032      	b.n	80026b2 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10c      	bne.n	800266c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002658:	b29a      	uxth	r2, r3
 800265a:	8a7b      	ldrh	r3, [r7, #18]
 800265c:	4013      	ands	r3, r2
 800265e:	b29a      	uxth	r2, r3
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	3302      	adds	r3, #2
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	e00c      	b.n	8002686 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	b2da      	uxtb	r2, r3
 8002674:	8a7b      	ldrh	r3, [r7, #18]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	4013      	ands	r3, r2
 800267a:	b2da      	uxtb	r2, r3
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	3301      	adds	r3, #1
 8002684:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800268c:	b29b      	uxth	r3, r3
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800269e:	b29b      	uxth	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1c2      	bne.n	800262a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2220      	movs	r2, #32
 80026a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	e000      	b.n	80026b2 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80026b0:	2302      	movs	r3, #2
  }
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3720      	adds	r7, #32
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	4ba6      	ldr	r3, [pc, #664]	@ (8002980 <UART_SetConfig+0x2c4>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	6979      	ldr	r1, [r7, #20]
 80026f0:	430b      	orrs	r3, r1
 80026f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	4313      	orrs	r3, r2
 8002718:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	430a      	orrs	r2, r1
 800272c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a94      	ldr	r2, [pc, #592]	@ (8002984 <UART_SetConfig+0x2c8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d120      	bne.n	800277a <UART_SetConfig+0xbe>
 8002738:	4b93      	ldr	r3, [pc, #588]	@ (8002988 <UART_SetConfig+0x2cc>)
 800273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b03      	cmp	r3, #3
 8002744:	d816      	bhi.n	8002774 <UART_SetConfig+0xb8>
 8002746:	a201      	add	r2, pc, #4	@ (adr r2, 800274c <UART_SetConfig+0x90>)
 8002748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274c:	0800275d 	.word	0x0800275d
 8002750:	08002769 	.word	0x08002769
 8002754:	08002763 	.word	0x08002763
 8002758:	0800276f 	.word	0x0800276f
 800275c:	2301      	movs	r3, #1
 800275e:	77fb      	strb	r3, [r7, #31]
 8002760:	e150      	b.n	8002a04 <UART_SetConfig+0x348>
 8002762:	2302      	movs	r3, #2
 8002764:	77fb      	strb	r3, [r7, #31]
 8002766:	e14d      	b.n	8002a04 <UART_SetConfig+0x348>
 8002768:	2304      	movs	r3, #4
 800276a:	77fb      	strb	r3, [r7, #31]
 800276c:	e14a      	b.n	8002a04 <UART_SetConfig+0x348>
 800276e:	2308      	movs	r3, #8
 8002770:	77fb      	strb	r3, [r7, #31]
 8002772:	e147      	b.n	8002a04 <UART_SetConfig+0x348>
 8002774:	2310      	movs	r3, #16
 8002776:	77fb      	strb	r3, [r7, #31]
 8002778:	e144      	b.n	8002a04 <UART_SetConfig+0x348>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a83      	ldr	r2, [pc, #524]	@ (800298c <UART_SetConfig+0x2d0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d132      	bne.n	80027ea <UART_SetConfig+0x12e>
 8002784:	4b80      	ldr	r3, [pc, #512]	@ (8002988 <UART_SetConfig+0x2cc>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b0c      	cmp	r3, #12
 8002790:	d828      	bhi.n	80027e4 <UART_SetConfig+0x128>
 8002792:	a201      	add	r2, pc, #4	@ (adr r2, 8002798 <UART_SetConfig+0xdc>)
 8002794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002798:	080027cd 	.word	0x080027cd
 800279c:	080027e5 	.word	0x080027e5
 80027a0:	080027e5 	.word	0x080027e5
 80027a4:	080027e5 	.word	0x080027e5
 80027a8:	080027d9 	.word	0x080027d9
 80027ac:	080027e5 	.word	0x080027e5
 80027b0:	080027e5 	.word	0x080027e5
 80027b4:	080027e5 	.word	0x080027e5
 80027b8:	080027d3 	.word	0x080027d3
 80027bc:	080027e5 	.word	0x080027e5
 80027c0:	080027e5 	.word	0x080027e5
 80027c4:	080027e5 	.word	0x080027e5
 80027c8:	080027df 	.word	0x080027df
 80027cc:	2300      	movs	r3, #0
 80027ce:	77fb      	strb	r3, [r7, #31]
 80027d0:	e118      	b.n	8002a04 <UART_SetConfig+0x348>
 80027d2:	2302      	movs	r3, #2
 80027d4:	77fb      	strb	r3, [r7, #31]
 80027d6:	e115      	b.n	8002a04 <UART_SetConfig+0x348>
 80027d8:	2304      	movs	r3, #4
 80027da:	77fb      	strb	r3, [r7, #31]
 80027dc:	e112      	b.n	8002a04 <UART_SetConfig+0x348>
 80027de:	2308      	movs	r3, #8
 80027e0:	77fb      	strb	r3, [r7, #31]
 80027e2:	e10f      	b.n	8002a04 <UART_SetConfig+0x348>
 80027e4:	2310      	movs	r3, #16
 80027e6:	77fb      	strb	r3, [r7, #31]
 80027e8:	e10c      	b.n	8002a04 <UART_SetConfig+0x348>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a68      	ldr	r2, [pc, #416]	@ (8002990 <UART_SetConfig+0x2d4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d120      	bne.n	8002836 <UART_SetConfig+0x17a>
 80027f4:	4b64      	ldr	r3, [pc, #400]	@ (8002988 <UART_SetConfig+0x2cc>)
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027fa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80027fe:	2b30      	cmp	r3, #48	@ 0x30
 8002800:	d013      	beq.n	800282a <UART_SetConfig+0x16e>
 8002802:	2b30      	cmp	r3, #48	@ 0x30
 8002804:	d814      	bhi.n	8002830 <UART_SetConfig+0x174>
 8002806:	2b20      	cmp	r3, #32
 8002808:	d009      	beq.n	800281e <UART_SetConfig+0x162>
 800280a:	2b20      	cmp	r3, #32
 800280c:	d810      	bhi.n	8002830 <UART_SetConfig+0x174>
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <UART_SetConfig+0x15c>
 8002812:	2b10      	cmp	r3, #16
 8002814:	d006      	beq.n	8002824 <UART_SetConfig+0x168>
 8002816:	e00b      	b.n	8002830 <UART_SetConfig+0x174>
 8002818:	2300      	movs	r3, #0
 800281a:	77fb      	strb	r3, [r7, #31]
 800281c:	e0f2      	b.n	8002a04 <UART_SetConfig+0x348>
 800281e:	2302      	movs	r3, #2
 8002820:	77fb      	strb	r3, [r7, #31]
 8002822:	e0ef      	b.n	8002a04 <UART_SetConfig+0x348>
 8002824:	2304      	movs	r3, #4
 8002826:	77fb      	strb	r3, [r7, #31]
 8002828:	e0ec      	b.n	8002a04 <UART_SetConfig+0x348>
 800282a:	2308      	movs	r3, #8
 800282c:	77fb      	strb	r3, [r7, #31]
 800282e:	e0e9      	b.n	8002a04 <UART_SetConfig+0x348>
 8002830:	2310      	movs	r3, #16
 8002832:	77fb      	strb	r3, [r7, #31]
 8002834:	e0e6      	b.n	8002a04 <UART_SetConfig+0x348>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a56      	ldr	r2, [pc, #344]	@ (8002994 <UART_SetConfig+0x2d8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d120      	bne.n	8002882 <UART_SetConfig+0x1c6>
 8002840:	4b51      	ldr	r3, [pc, #324]	@ (8002988 <UART_SetConfig+0x2cc>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002846:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800284a:	2bc0      	cmp	r3, #192	@ 0xc0
 800284c:	d013      	beq.n	8002876 <UART_SetConfig+0x1ba>
 800284e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002850:	d814      	bhi.n	800287c <UART_SetConfig+0x1c0>
 8002852:	2b80      	cmp	r3, #128	@ 0x80
 8002854:	d009      	beq.n	800286a <UART_SetConfig+0x1ae>
 8002856:	2b80      	cmp	r3, #128	@ 0x80
 8002858:	d810      	bhi.n	800287c <UART_SetConfig+0x1c0>
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <UART_SetConfig+0x1a8>
 800285e:	2b40      	cmp	r3, #64	@ 0x40
 8002860:	d006      	beq.n	8002870 <UART_SetConfig+0x1b4>
 8002862:	e00b      	b.n	800287c <UART_SetConfig+0x1c0>
 8002864:	2300      	movs	r3, #0
 8002866:	77fb      	strb	r3, [r7, #31]
 8002868:	e0cc      	b.n	8002a04 <UART_SetConfig+0x348>
 800286a:	2302      	movs	r3, #2
 800286c:	77fb      	strb	r3, [r7, #31]
 800286e:	e0c9      	b.n	8002a04 <UART_SetConfig+0x348>
 8002870:	2304      	movs	r3, #4
 8002872:	77fb      	strb	r3, [r7, #31]
 8002874:	e0c6      	b.n	8002a04 <UART_SetConfig+0x348>
 8002876:	2308      	movs	r3, #8
 8002878:	77fb      	strb	r3, [r7, #31]
 800287a:	e0c3      	b.n	8002a04 <UART_SetConfig+0x348>
 800287c:	2310      	movs	r3, #16
 800287e:	77fb      	strb	r3, [r7, #31]
 8002880:	e0c0      	b.n	8002a04 <UART_SetConfig+0x348>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a44      	ldr	r2, [pc, #272]	@ (8002998 <UART_SetConfig+0x2dc>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d125      	bne.n	80028d8 <UART_SetConfig+0x21c>
 800288c:	4b3e      	ldr	r3, [pc, #248]	@ (8002988 <UART_SetConfig+0x2cc>)
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002892:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002896:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800289a:	d017      	beq.n	80028cc <UART_SetConfig+0x210>
 800289c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80028a0:	d817      	bhi.n	80028d2 <UART_SetConfig+0x216>
 80028a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028a6:	d00b      	beq.n	80028c0 <UART_SetConfig+0x204>
 80028a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028ac:	d811      	bhi.n	80028d2 <UART_SetConfig+0x216>
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <UART_SetConfig+0x1fe>
 80028b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028b6:	d006      	beq.n	80028c6 <UART_SetConfig+0x20a>
 80028b8:	e00b      	b.n	80028d2 <UART_SetConfig+0x216>
 80028ba:	2300      	movs	r3, #0
 80028bc:	77fb      	strb	r3, [r7, #31]
 80028be:	e0a1      	b.n	8002a04 <UART_SetConfig+0x348>
 80028c0:	2302      	movs	r3, #2
 80028c2:	77fb      	strb	r3, [r7, #31]
 80028c4:	e09e      	b.n	8002a04 <UART_SetConfig+0x348>
 80028c6:	2304      	movs	r3, #4
 80028c8:	77fb      	strb	r3, [r7, #31]
 80028ca:	e09b      	b.n	8002a04 <UART_SetConfig+0x348>
 80028cc:	2308      	movs	r3, #8
 80028ce:	77fb      	strb	r3, [r7, #31]
 80028d0:	e098      	b.n	8002a04 <UART_SetConfig+0x348>
 80028d2:	2310      	movs	r3, #16
 80028d4:	77fb      	strb	r3, [r7, #31]
 80028d6:	e095      	b.n	8002a04 <UART_SetConfig+0x348>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a2f      	ldr	r2, [pc, #188]	@ (800299c <UART_SetConfig+0x2e0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d125      	bne.n	800292e <UART_SetConfig+0x272>
 80028e2:	4b29      	ldr	r3, [pc, #164]	@ (8002988 <UART_SetConfig+0x2cc>)
 80028e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80028ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80028f0:	d017      	beq.n	8002922 <UART_SetConfig+0x266>
 80028f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80028f6:	d817      	bhi.n	8002928 <UART_SetConfig+0x26c>
 80028f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028fc:	d00b      	beq.n	8002916 <UART_SetConfig+0x25a>
 80028fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002902:	d811      	bhi.n	8002928 <UART_SetConfig+0x26c>
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <UART_SetConfig+0x254>
 8002908:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800290c:	d006      	beq.n	800291c <UART_SetConfig+0x260>
 800290e:	e00b      	b.n	8002928 <UART_SetConfig+0x26c>
 8002910:	2301      	movs	r3, #1
 8002912:	77fb      	strb	r3, [r7, #31]
 8002914:	e076      	b.n	8002a04 <UART_SetConfig+0x348>
 8002916:	2302      	movs	r3, #2
 8002918:	77fb      	strb	r3, [r7, #31]
 800291a:	e073      	b.n	8002a04 <UART_SetConfig+0x348>
 800291c:	2304      	movs	r3, #4
 800291e:	77fb      	strb	r3, [r7, #31]
 8002920:	e070      	b.n	8002a04 <UART_SetConfig+0x348>
 8002922:	2308      	movs	r3, #8
 8002924:	77fb      	strb	r3, [r7, #31]
 8002926:	e06d      	b.n	8002a04 <UART_SetConfig+0x348>
 8002928:	2310      	movs	r3, #16
 800292a:	77fb      	strb	r3, [r7, #31]
 800292c:	e06a      	b.n	8002a04 <UART_SetConfig+0x348>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1b      	ldr	r2, [pc, #108]	@ (80029a0 <UART_SetConfig+0x2e4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d138      	bne.n	80029aa <UART_SetConfig+0x2ee>
 8002938:	4b13      	ldr	r3, [pc, #76]	@ (8002988 <UART_SetConfig+0x2cc>)
 800293a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800293e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002942:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002946:	d017      	beq.n	8002978 <UART_SetConfig+0x2bc>
 8002948:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800294c:	d82a      	bhi.n	80029a4 <UART_SetConfig+0x2e8>
 800294e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002952:	d00b      	beq.n	800296c <UART_SetConfig+0x2b0>
 8002954:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002958:	d824      	bhi.n	80029a4 <UART_SetConfig+0x2e8>
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <UART_SetConfig+0x2aa>
 800295e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002962:	d006      	beq.n	8002972 <UART_SetConfig+0x2b6>
 8002964:	e01e      	b.n	80029a4 <UART_SetConfig+0x2e8>
 8002966:	2300      	movs	r3, #0
 8002968:	77fb      	strb	r3, [r7, #31]
 800296a:	e04b      	b.n	8002a04 <UART_SetConfig+0x348>
 800296c:	2302      	movs	r3, #2
 800296e:	77fb      	strb	r3, [r7, #31]
 8002970:	e048      	b.n	8002a04 <UART_SetConfig+0x348>
 8002972:	2304      	movs	r3, #4
 8002974:	77fb      	strb	r3, [r7, #31]
 8002976:	e045      	b.n	8002a04 <UART_SetConfig+0x348>
 8002978:	2308      	movs	r3, #8
 800297a:	77fb      	strb	r3, [r7, #31]
 800297c:	e042      	b.n	8002a04 <UART_SetConfig+0x348>
 800297e:	bf00      	nop
 8002980:	efff69f3 	.word	0xefff69f3
 8002984:	40011000 	.word	0x40011000
 8002988:	40023800 	.word	0x40023800
 800298c:	40004400 	.word	0x40004400
 8002990:	40004800 	.word	0x40004800
 8002994:	40004c00 	.word	0x40004c00
 8002998:	40005000 	.word	0x40005000
 800299c:	40011400 	.word	0x40011400
 80029a0:	40007800 	.word	0x40007800
 80029a4:	2310      	movs	r3, #16
 80029a6:	77fb      	strb	r3, [r7, #31]
 80029a8:	e02c      	b.n	8002a04 <UART_SetConfig+0x348>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a72      	ldr	r2, [pc, #456]	@ (8002b78 <UART_SetConfig+0x4bc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d125      	bne.n	8002a00 <UART_SetConfig+0x344>
 80029b4:	4b71      	ldr	r3, [pc, #452]	@ (8002b7c <UART_SetConfig+0x4c0>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80029be:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80029c2:	d017      	beq.n	80029f4 <UART_SetConfig+0x338>
 80029c4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80029c8:	d817      	bhi.n	80029fa <UART_SetConfig+0x33e>
 80029ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029ce:	d00b      	beq.n	80029e8 <UART_SetConfig+0x32c>
 80029d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029d4:	d811      	bhi.n	80029fa <UART_SetConfig+0x33e>
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <UART_SetConfig+0x326>
 80029da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029de:	d006      	beq.n	80029ee <UART_SetConfig+0x332>
 80029e0:	e00b      	b.n	80029fa <UART_SetConfig+0x33e>
 80029e2:	2300      	movs	r3, #0
 80029e4:	77fb      	strb	r3, [r7, #31]
 80029e6:	e00d      	b.n	8002a04 <UART_SetConfig+0x348>
 80029e8:	2302      	movs	r3, #2
 80029ea:	77fb      	strb	r3, [r7, #31]
 80029ec:	e00a      	b.n	8002a04 <UART_SetConfig+0x348>
 80029ee:	2304      	movs	r3, #4
 80029f0:	77fb      	strb	r3, [r7, #31]
 80029f2:	e007      	b.n	8002a04 <UART_SetConfig+0x348>
 80029f4:	2308      	movs	r3, #8
 80029f6:	77fb      	strb	r3, [r7, #31]
 80029f8:	e004      	b.n	8002a04 <UART_SetConfig+0x348>
 80029fa:	2310      	movs	r3, #16
 80029fc:	77fb      	strb	r3, [r7, #31]
 80029fe:	e001      	b.n	8002a04 <UART_SetConfig+0x348>
 8002a00:	2310      	movs	r3, #16
 8002a02:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a0c:	d15b      	bne.n	8002ac6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002a0e:	7ffb      	ldrb	r3, [r7, #31]
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d828      	bhi.n	8002a66 <UART_SetConfig+0x3aa>
 8002a14:	a201      	add	r2, pc, #4	@ (adr r2, 8002a1c <UART_SetConfig+0x360>)
 8002a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1a:	bf00      	nop
 8002a1c:	08002a41 	.word	0x08002a41
 8002a20:	08002a49 	.word	0x08002a49
 8002a24:	08002a51 	.word	0x08002a51
 8002a28:	08002a67 	.word	0x08002a67
 8002a2c:	08002a57 	.word	0x08002a57
 8002a30:	08002a67 	.word	0x08002a67
 8002a34:	08002a67 	.word	0x08002a67
 8002a38:	08002a67 	.word	0x08002a67
 8002a3c:	08002a5f 	.word	0x08002a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a40:	f7ff f84c 	bl	8001adc <HAL_RCC_GetPCLK1Freq>
 8002a44:	61b8      	str	r0, [r7, #24]
        break;
 8002a46:	e013      	b.n	8002a70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a48:	f7ff f85c 	bl	8001b04 <HAL_RCC_GetPCLK2Freq>
 8002a4c:	61b8      	str	r0, [r7, #24]
        break;
 8002a4e:	e00f      	b.n	8002a70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a50:	4b4b      	ldr	r3, [pc, #300]	@ (8002b80 <UART_SetConfig+0x4c4>)
 8002a52:	61bb      	str	r3, [r7, #24]
        break;
 8002a54:	e00c      	b.n	8002a70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a56:	f7fe ff6f 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 8002a5a:	61b8      	str	r0, [r7, #24]
        break;
 8002a5c:	e008      	b.n	8002a70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a62:	61bb      	str	r3, [r7, #24]
        break;
 8002a64:	e004      	b.n	8002a70 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	77bb      	strb	r3, [r7, #30]
        break;
 8002a6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d074      	beq.n	8002b60 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	005a      	lsls	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	085b      	lsrs	r3, r3, #1
 8002a80:	441a      	add	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	2b0f      	cmp	r3, #15
 8002a90:	d916      	bls.n	8002ac0 <UART_SetConfig+0x404>
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a98:	d212      	bcs.n	8002ac0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	f023 030f 	bic.w	r3, r3, #15
 8002aa2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	085b      	lsrs	r3, r3, #1
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	89fb      	ldrh	r3, [r7, #14]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	89fa      	ldrh	r2, [r7, #14]
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	e04f      	b.n	8002b60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	77bb      	strb	r3, [r7, #30]
 8002ac4:	e04c      	b.n	8002b60 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ac6:	7ffb      	ldrb	r3, [r7, #31]
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d828      	bhi.n	8002b1e <UART_SetConfig+0x462>
 8002acc:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad4 <UART_SetConfig+0x418>)
 8002ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad2:	bf00      	nop
 8002ad4:	08002af9 	.word	0x08002af9
 8002ad8:	08002b01 	.word	0x08002b01
 8002adc:	08002b09 	.word	0x08002b09
 8002ae0:	08002b1f 	.word	0x08002b1f
 8002ae4:	08002b0f 	.word	0x08002b0f
 8002ae8:	08002b1f 	.word	0x08002b1f
 8002aec:	08002b1f 	.word	0x08002b1f
 8002af0:	08002b1f 	.word	0x08002b1f
 8002af4:	08002b17 	.word	0x08002b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002af8:	f7fe fff0 	bl	8001adc <HAL_RCC_GetPCLK1Freq>
 8002afc:	61b8      	str	r0, [r7, #24]
        break;
 8002afe:	e013      	b.n	8002b28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b00:	f7ff f800 	bl	8001b04 <HAL_RCC_GetPCLK2Freq>
 8002b04:	61b8      	str	r0, [r7, #24]
        break;
 8002b06:	e00f      	b.n	8002b28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b08:	4b1d      	ldr	r3, [pc, #116]	@ (8002b80 <UART_SetConfig+0x4c4>)
 8002b0a:	61bb      	str	r3, [r7, #24]
        break;
 8002b0c:	e00c      	b.n	8002b28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b0e:	f7fe ff13 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 8002b12:	61b8      	str	r0, [r7, #24]
        break;
 8002b14:	e008      	b.n	8002b28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b1a:	61bb      	str	r3, [r7, #24]
        break;
 8002b1c:	e004      	b.n	8002b28 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	77bb      	strb	r3, [r7, #30]
        break;
 8002b26:	bf00      	nop
    }

    if (pclk != 0U)
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d018      	beq.n	8002b60 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	085a      	lsrs	r2, r3, #1
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	441a      	add	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	2b0f      	cmp	r3, #15
 8002b46:	d909      	bls.n	8002b5c <UART_SetConfig+0x4a0>
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b4e:	d205      	bcs.n	8002b5c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	e001      	b.n	8002b60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002b6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3720      	adds	r7, #32
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40007c00 	.word	0x40007c00
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	00f42400 	.word	0x00f42400

08002b84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00a      	beq.n	8002bae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00a      	beq.n	8002bf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00a      	beq.n	8002c36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d01a      	beq.n	8002c9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c82:	d10a      	bne.n	8002c9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	605a      	str	r2, [r3, #4]
  }
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b098      	sub	sp, #96	@ 0x60
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cd8:	f7fd ff40 	bl	8000b5c <HAL_GetTick>
 8002cdc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d12e      	bne.n	8002d4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f88c 	bl	8002e18 <UART_WaitOnFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d021      	beq.n	8002d4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d0e:	e853 3f00 	ldrex	r3, [r3]
 8002d12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d24:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d26:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d2c:	e841 2300 	strex	r3, r2, [r1]
 8002d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1e6      	bne.n	8002d06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e062      	b.n	8002e10 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d149      	bne.n	8002dec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d60:	2200      	movs	r2, #0
 8002d62:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f856 	bl	8002e18 <UART_WaitOnFlagUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d03c      	beq.n	8002dec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7a:	e853 3f00 	ldrex	r3, [r3]
 8002d7e:	623b      	str	r3, [r7, #32]
   return(result);
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d90:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d92:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d98:	e841 2300 	strex	r3, r2, [r1]
 8002d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1e6      	bne.n	8002d72 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3308      	adds	r3, #8
 8002daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	e853 3f00 	ldrex	r3, [r3]
 8002db2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3308      	adds	r3, #8
 8002dc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002dc4:	61fa      	str	r2, [r7, #28]
 8002dc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc8:	69b9      	ldr	r1, [r7, #24]
 8002dca:	69fa      	ldr	r2, [r7, #28]
 8002dcc:	e841 2300 	strex	r3, r2, [r1]
 8002dd0:	617b      	str	r3, [r7, #20]
   return(result);
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1e5      	bne.n	8002da4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e011      	b.n	8002e10 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2220      	movs	r2, #32
 8002df0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3758      	adds	r7, #88	@ 0x58
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	4613      	mov	r3, r2
 8002e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e28:	e04f      	b.n	8002eca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d04b      	beq.n	8002eca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e32:	f7fd fe93 	bl	8000b5c <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d302      	bcc.n	8002e48 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e04e      	b.n	8002eea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d037      	beq.n	8002eca <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b80      	cmp	r3, #128	@ 0x80
 8002e5e:	d034      	beq.n	8002eca <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b40      	cmp	r3, #64	@ 0x40
 8002e64:	d031      	beq.n	8002eca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d110      	bne.n	8002e96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2208      	movs	r2, #8
 8002e7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 f838 	bl	8002ef2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2208      	movs	r2, #8
 8002e86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e029      	b.n	8002eea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ea0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ea4:	d111      	bne.n	8002eca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002eae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f81e 	bl	8002ef2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e00f      	b.n	8002eea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	69da      	ldr	r2, [r3, #28]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	bf0c      	ite	eq
 8002eda:	2301      	moveq	r3, #1
 8002edc:	2300      	movne	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d0a0      	beq.n	8002e2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b095      	sub	sp, #84	@ 0x54
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f02:	e853 3f00 	ldrex	r3, [r3]
 8002f06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f18:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f1a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f20:	e841 2300 	strex	r3, r2, [r1]
 8002f24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1e6      	bne.n	8002efa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3308      	adds	r3, #8
 8002f32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	e853 3f00 	ldrex	r3, [r3]
 8002f3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f023 0301 	bic.w	r3, r3, #1
 8002f42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3308      	adds	r3, #8
 8002f4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f54:	e841 2300 	strex	r3, r2, [r1]
 8002f58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1e5      	bne.n	8002f2c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d118      	bne.n	8002f9a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	e853 3f00 	ldrex	r3, [r3]
 8002f74:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f023 0310 	bic.w	r3, r3, #16
 8002f7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f86:	61bb      	str	r3, [r7, #24]
 8002f88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8a:	6979      	ldr	r1, [r7, #20]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	e841 2300 	strex	r3, r2, [r1]
 8002f92:	613b      	str	r3, [r7, #16]
   return(result);
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1e6      	bne.n	8002f68 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002fae:	bf00      	nop
 8002fb0:	3754      	adds	r7, #84	@ 0x54
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <memset>:
 8002fba:	4402      	add	r2, r0
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d100      	bne.n	8002fc4 <memset+0xa>
 8002fc2:	4770      	bx	lr
 8002fc4:	f803 1b01 	strb.w	r1, [r3], #1
 8002fc8:	e7f9      	b.n	8002fbe <memset+0x4>
	...

08002fcc <__libc_init_array>:
 8002fcc:	b570      	push	{r4, r5, r6, lr}
 8002fce:	4d0d      	ldr	r5, [pc, #52]	@ (8003004 <__libc_init_array+0x38>)
 8002fd0:	4c0d      	ldr	r4, [pc, #52]	@ (8003008 <__libc_init_array+0x3c>)
 8002fd2:	1b64      	subs	r4, r4, r5
 8002fd4:	10a4      	asrs	r4, r4, #2
 8002fd6:	2600      	movs	r6, #0
 8002fd8:	42a6      	cmp	r6, r4
 8002fda:	d109      	bne.n	8002ff0 <__libc_init_array+0x24>
 8002fdc:	4d0b      	ldr	r5, [pc, #44]	@ (800300c <__libc_init_array+0x40>)
 8002fde:	4c0c      	ldr	r4, [pc, #48]	@ (8003010 <__libc_init_array+0x44>)
 8002fe0:	f000 f818 	bl	8003014 <_init>
 8002fe4:	1b64      	subs	r4, r4, r5
 8002fe6:	10a4      	asrs	r4, r4, #2
 8002fe8:	2600      	movs	r6, #0
 8002fea:	42a6      	cmp	r6, r4
 8002fec:	d105      	bne.n	8002ffa <__libc_init_array+0x2e>
 8002fee:	bd70      	pop	{r4, r5, r6, pc}
 8002ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff4:	4798      	blx	r3
 8002ff6:	3601      	adds	r6, #1
 8002ff8:	e7ee      	b.n	8002fd8 <__libc_init_array+0xc>
 8002ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ffe:	4798      	blx	r3
 8003000:	3601      	adds	r6, #1
 8003002:	e7f2      	b.n	8002fea <__libc_init_array+0x1e>
 8003004:	080030f8 	.word	0x080030f8
 8003008:	080030f8 	.word	0x080030f8
 800300c:	080030f8 	.word	0x080030f8
 8003010:	080030fc 	.word	0x080030fc

08003014 <_init>:
 8003014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003016:	bf00      	nop
 8003018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301a:	bc08      	pop	{r3}
 800301c:	469e      	mov	lr, r3
 800301e:	4770      	bx	lr

08003020 <_fini>:
 8003020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003022:	bf00      	nop
 8003024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003026:	bc08      	pop	{r3}
 8003028:	469e      	mov	lr, r3
 800302a:	4770      	bx	lr
