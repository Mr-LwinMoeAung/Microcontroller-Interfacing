
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e2c  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003024  08003024  00004024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003044  08003044  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003044  08003044  00004044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800304c  0800304c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800304c  0800304c  0000404c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003050  08003050  00004050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003054  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08003060  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08003060  000050b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1e5  00000000  00000000  0000503a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019cc  00000000  00000000  0000f21f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  00010bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b7  00000000  00000000  00011378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002624d  00000000  00000000  0001192f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac54  00000000  00000000  00037b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed40b  00000000  00000000  000427d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012fbdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ce4  00000000  00000000  0012fc20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00131904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800300c 	.word	0x0800300c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800300c 	.word	0x0800300c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <MX_GPIO_Init>:
/** Configure pins
     PF6   ------> UART7_RX
     PF7   ------> UART7_TX
*/
void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08a      	sub	sp, #40	@ 0x28
 800052c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053e:	4b48      	ldr	r3, [pc, #288]	@ (8000660 <MX_GPIO_Init+0x138>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	4a47      	ldr	r2, [pc, #284]	@ (8000660 <MX_GPIO_Init+0x138>)
 8000544:	f043 0304 	orr.w	r3, r3, #4
 8000548:	6313      	str	r3, [r2, #48]	@ 0x30
 800054a:	4b45      	ldr	r3, [pc, #276]	@ (8000660 <MX_GPIO_Init+0x138>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	f003 0304 	and.w	r3, r3, #4
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000556:	4b42      	ldr	r3, [pc, #264]	@ (8000660 <MX_GPIO_Init+0x138>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a41      	ldr	r2, [pc, #260]	@ (8000660 <MX_GPIO_Init+0x138>)
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b3f      	ldr	r3, [pc, #252]	@ (8000660 <MX_GPIO_Init+0x138>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0320 	and.w	r3, r3, #32
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	4b3c      	ldr	r3, [pc, #240]	@ (8000660 <MX_GPIO_Init+0x138>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	4a3b      	ldr	r2, [pc, #236]	@ (8000660 <MX_GPIO_Init+0x138>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6313      	str	r3, [r2, #48]	@ 0x30
 800057a:	4b39      	ldr	r3, [pc, #228]	@ (8000660 <MX_GPIO_Init+0x138>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	4b36      	ldr	r3, [pc, #216]	@ (8000660 <MX_GPIO_Init+0x138>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a35      	ldr	r2, [pc, #212]	@ (8000660 <MX_GPIO_Init+0x138>)
 800058c:	f043 0302 	orr.w	r3, r3, #2
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b33      	ldr	r3, [pc, #204]	@ (8000660 <MX_GPIO_Init+0x138>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800059e:	4b30      	ldr	r3, [pc, #192]	@ (8000660 <MX_GPIO_Init+0x138>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4a2f      	ldr	r2, [pc, #188]	@ (8000660 <MX_GPIO_Init+0x138>)
 80005a4:	f043 0308 	orr.w	r3, r3, #8
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000660 <MX_GPIO_Init+0x138>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	f003 0308 	and.w	r3, r3, #8
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80005bc:	4829      	ldr	r0, [pc, #164]	@ (8000664 <MX_GPIO_Init+0x13c>)
 80005be:	f000 fe49 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	4823      	ldr	r0, [pc, #140]	@ (8000668 <MX_GPIO_Init+0x140>)
 80005da:	f000 fc8f 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005de:	23c0      	movs	r3, #192	@ 0xc0
 80005e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e2:	2302      	movs	r3, #2
 80005e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80005ee:	2308      	movs	r3, #8
 80005f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	481c      	ldr	r0, [pc, #112]	@ (800066c <MX_GPIO_Init+0x144>)
 80005fa:	f000 fc7f 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005fe:	2301      	movs	r3, #1
 8000600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000602:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	4817      	ldr	r0, [pc, #92]	@ (8000670 <MX_GPIO_Init+0x148>)
 8000614:	f000 fc72 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000618:	f244 0381 	movw	r3, #16513	@ 0x4081
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	480c      	ldr	r0, [pc, #48]	@ (8000664 <MX_GPIO_Init+0x13c>)
 8000632:	f000 fc63 	bl	8000efc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 1);
 8000636:	2201      	movs	r2, #1
 8000638:	2103      	movs	r1, #3
 800063a:	2006      	movs	r0, #6
 800063c:	f000 fbaf 	bl	8000d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000640:	2006      	movs	r0, #6
 8000642:	f000 fbc8 	bl	8000dd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 3);
 8000646:	2203      	movs	r2, #3
 8000648:	2102      	movs	r1, #2
 800064a:	2028      	movs	r0, #40	@ 0x28
 800064c:	f000 fba7 	bl	8000d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000650:	2028      	movs	r0, #40	@ 0x28
 8000652:	f000 fbc0 	bl	8000dd6 <HAL_NVIC_EnableIRQ>

}
 8000656:	bf00      	nop
 8000658:	3728      	adds	r7, #40	@ 0x28
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40020400 	.word	0x40020400
 8000668:	40020800 	.word	0x40020800
 800066c:	40021400 	.word	0x40021400
 8000670:	40020000 	.word	0x40020000

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800067a:	f000 f8cb 	bl	8000814 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f000 fa32 	bl	8000ae6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f81d 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f7ff ff4f 	bl	8000528 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800068a:	f000 f973 	bl	8000974 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char dot[] = ".";
 800068e:	232e      	movs	r3, #46	@ 0x2e
 8000690:	80bb      	strh	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET) {}
 8000692:	bf00      	nop
 8000694:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <main+0x48>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800069e:	2b40      	cmp	r3, #64	@ 0x40
 80006a0:	d1f8      	bne.n	8000694 <main+0x20>
	  HAL_UART_Transmit(&huart3, (uint8_t*)&dot, 1, 400);
 80006a2:	1d39      	adds	r1, r7, #4
 80006a4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80006a8:	2201      	movs	r2, #1
 80006aa:	4804      	ldr	r0, [pc, #16]	@ (80006bc <main+0x48>)
 80006ac:	f001 ff78 	bl	80025a0 <HAL_UART_Transmit>
	  HAL_Delay(400);
 80006b0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80006b4:	f000 fa74 	bl	8000ba0 <HAL_Delay>
	  while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET) {}
 80006b8:	e7eb      	b.n	8000692 <main+0x1e>
 80006ba:	bf00      	nop
 80006bc:	20000028 	.word	0x20000028

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	@ 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	2234      	movs	r2, #52	@ 0x34
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fc6f 	bl	8002fb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000794 <SystemClock_Config+0xd4>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e8:	4a2a      	ldr	r2, [pc, #168]	@ (8000794 <SystemClock_Config+0xd4>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f0:	4b28      	ldr	r3, [pc, #160]	@ (8000794 <SystemClock_Config+0xd4>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	4b26      	ldr	r3, [pc, #152]	@ (8000798 <SystemClock_Config+0xd8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a25      	ldr	r2, [pc, #148]	@ (8000798 <SystemClock_Config+0xd8>)
 8000702:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b23      	ldr	r3, [pc, #140]	@ (8000798 <SystemClock_Config+0xd8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2310      	movs	r3, #16
 800071e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000724:	2300      	movs	r3, #0
 8000726:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000728:	2308      	movs	r3, #8
 800072a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800072c:	23d8      	movs	r3, #216	@ 0xd8
 800072e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000734:	2302      	movs	r3, #2
 8000736:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fe23 	bl	800138c <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800074c:	f000 f88e 	bl	800086c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000750:	f000 fdcc 	bl	80012ec <HAL_PWREx_EnableOverDrive>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800075a:	f000 f887 	bl	800086c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	230f      	movs	r3, #15
 8000760:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2302      	movs	r3, #2
 8000764:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800076e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000770:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000774:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	2107      	movs	r1, #7
 800077c:	4618      	mov	r0, r3
 800077e:	f001 f8b3 	bl	80018e8 <HAL_RCC_ClockConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000788:	f000 f870 	bl	800086c <Error_Handler>
  }
}
 800078c:	bf00      	nop
 800078e:	3750      	adds	r7, #80	@ 0x50
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	80fb      	strh	r3, [r7, #6]
////			HAL_UART_Transmit(&huart3,(uint8_t *) "B", 1, 100);
////			HAL_Delay(200);
////		}
//	}

	if (GPIO_Pin == GPIO_PIN_13)
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007ac:	d126      	bne.n	80007fc <HAL_GPIO_EXTI_Callback+0x60>
	{


		HAL_UART_Transmit(&huart3, (uint8_t *) "---", 3, 100);
 80007ae:	2364      	movs	r3, #100	@ 0x64
 80007b0:	2203      	movs	r2, #3
 80007b2:	4914      	ldr	r1, [pc, #80]	@ (8000804 <HAL_GPIO_EXTI_Callback+0x68>)
 80007b4:	4814      	ldr	r0, [pc, #80]	@ (8000808 <HAL_GPIO_EXTI_Callback+0x6c>)
 80007b6:	f001 fef3 	bl	80025a0 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007c0:	4812      	ldr	r0, [pc, #72]	@ (800080c <HAL_GPIO_EXTI_Callback+0x70>)
 80007c2:	f000 fd47 	bl	8001254 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80007c6:	20c8      	movs	r0, #200	@ 0xc8
 80007c8:	f000 f9ea 	bl	8000ba0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007d2:	480e      	ldr	r0, [pc, #56]	@ (800080c <HAL_GPIO_EXTI_Callback+0x70>)
 80007d4:	f000 fd3e 	bl	8001254 <HAL_GPIO_WritePin>
		for (int i = 0; i < 20; i++) {
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	e00b      	b.n	80007f6 <HAL_GPIO_EXTI_Callback+0x5a>
			  HAL_UART_Transmit(&huart3, (uint8_t*)"B", 1, 100);
 80007de:	2364      	movs	r3, #100	@ 0x64
 80007e0:	2201      	movs	r2, #1
 80007e2:	490b      	ldr	r1, [pc, #44]	@ (8000810 <HAL_GPIO_EXTI_Callback+0x74>)
 80007e4:	4808      	ldr	r0, [pc, #32]	@ (8000808 <HAL_GPIO_EXTI_Callback+0x6c>)
 80007e6:	f001 fedb 	bl	80025a0 <HAL_UART_Transmit>
			  HAL_Delay(100);
 80007ea:	2064      	movs	r0, #100	@ 0x64
 80007ec:	f000 f9d8 	bl	8000ba0 <HAL_Delay>
		for (int i = 0; i < 20; i++) {
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3301      	adds	r3, #1
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2b13      	cmp	r3, #19
 80007fa:	ddf0      	ble.n	80007de <HAL_GPIO_EXTI_Callback+0x42>
//		{
//			HAL_UART_Transmit(&huart3,(uint8_t *) "B", 1, 100);
//			HAL_Delay(200);
//		}
	}
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	08003024 	.word	0x08003024
 8000808:	20000028 	.word	0x20000028
 800080c:	40020400 	.word	0x40020400
 8000810:	08003028 	.word	0x08003028

08000814 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800081a:	463b      	mov	r3, r7
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000826:	f000 faf1 	bl	8000e0c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800082a:	2301      	movs	r3, #1
 800082c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800082e:	2300      	movs	r3, #0
 8000830:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000836:	231f      	movs	r3, #31
 8000838:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800083a:	2387      	movs	r3, #135	@ 0x87
 800083c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800083e:	2300      	movs	r3, #0
 8000840:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000842:	2300      	movs	r3, #0
 8000844:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000846:	2301      	movs	r3, #1
 8000848:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800084a:	2301      	movs	r3, #1
 800084c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000856:	463b      	mov	r3, r7
 8000858:	4618      	mov	r0, r3
 800085a:	f000 fb0f 	bl	8000e7c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800085e:	2004      	movs	r0, #4
 8000860:	f000 faec 	bl	8000e3c <HAL_MPU_Enable>

}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
}
 8000872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <Error_Handler+0x8>

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <HAL_MspInit+0x44>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000882:	4a0e      	ldr	r2, [pc, #56]	@ (80008bc <HAL_MspInit+0x44>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000888:	6413      	str	r3, [r2, #64]	@ 0x40
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <HAL_MspInit+0x44>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <HAL_MspInit+0x44>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089a:	4a08      	ldr	r2, [pc, #32]	@ (80008bc <HAL_MspInit+0x44>)
 800089c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <HAL_MspInit+0x44>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80008ae:	2005      	movs	r0, #5
 80008b0:	f000 fa6a 	bl	8000d88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <NMI_Handler+0x4>

080008c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <MemManage_Handler+0x4>

080008d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000916:	f000 f923 	bl	8000b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}

0800091e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_Delay(100);
 8000922:	2064      	movs	r0, #100	@ 0x64
 8000924:	f000 f93c 	bl	8000ba0 <HAL_Delay>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000928:	2001      	movs	r0, #1
 800092a:	f000 fcc7 	bl	80012bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000938:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800093c:	f000 fcbe 	bl	80012bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000940:	2101      	movs	r1, #1
 8000942:	4802      	ldr	r0, [pc, #8]	@ (800094c <EXTI15_10_IRQHandler+0x18>)
 8000944:	f000 fc9f 	bl	8001286 <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40020400 	.word	0x40020400

08000950 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <SystemInit+0x20>)
 8000956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800095a:	4a05      	ldr	r2, [pc, #20]	@ (8000970 <SystemInit+0x20>)
 800095c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000960:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000978:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <MX_USART3_UART_Init+0x58>)
 800097a:	4a15      	ldr	r2, [pc, #84]	@ (80009d0 <MX_USART3_UART_Init+0x5c>)
 800097c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800097e:	4b13      	ldr	r3, [pc, #76]	@ (80009cc <MX_USART3_UART_Init+0x58>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <MX_USART3_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <MX_USART3_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <MX_USART3_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <MX_USART3_UART_Init+0x58>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <MX_USART3_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <MX_USART3_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <MX_USART3_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <MX_USART3_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_USART3_UART_Init+0x58>)
 80009b8:	f001 fda4 	bl	8002504 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009c2:	f7ff ff53 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000028 	.word	0x20000028
 80009d0:	40004800 	.word	0x40004800

080009d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b0ae      	sub	sp, #184	@ 0xb8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2290      	movs	r2, #144	@ 0x90
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f002 fadc 	bl	8002fb2 <memset>
  if(uartHandle->Instance==USART3)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a22      	ldr	r2, [pc, #136]	@ (8000a88 <HAL_UART_MspInit+0xb4>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d13c      	bne.n	8000a7e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a08:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4618      	mov	r0, r3
 8000a14:	f001 f94e 	bl	8001cb4 <HAL_RCCEx_PeriphCLKConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a1e:	f7ff ff25 	bl	800086c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a22:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <HAL_UART_MspInit+0xb8>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a26:	4a19      	ldr	r2, [pc, #100]	@ (8000a8c <HAL_UART_MspInit+0xb8>)
 8000a28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2e:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <HAL_UART_MspInit+0xb8>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3a:	4b14      	ldr	r3, [pc, #80]	@ (8000a8c <HAL_UART_MspInit+0xb8>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a13      	ldr	r2, [pc, #76]	@ (8000a8c <HAL_UART_MspInit+0xb8>)
 8000a40:	f043 0308 	orr.w	r3, r3, #8
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <HAL_UART_MspInit+0xb8>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0308 	and.w	r3, r3, #8
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a52:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a6c:	2307      	movs	r3, #7
 8000a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a72:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	@ (8000a90 <HAL_UART_MspInit+0xbc>)
 8000a7a:	f000 fa3f 	bl	8000efc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000a7e:	bf00      	nop
 8000a80:	37b8      	adds	r7, #184	@ 0xb8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40004800 	.word	0x40004800
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020c00 	.word	0x40020c00

08000a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000acc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a98:	f7ff ff5a 	bl	8000950 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a9c:	480c      	ldr	r0, [pc, #48]	@ (8000ad0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a9e:	490d      	ldr	r1, [pc, #52]	@ (8000ad4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f002 fa7f 	bl	8002fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac6:	f7ff fdd5 	bl	8000674 <main>
  bx  lr    
 8000aca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000acc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ad8:	08003054 	.word	0x08003054
  ldr r2, =_sbss
 8000adc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ae0:	200000b4 	.word	0x200000b4

08000ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC_IRQHandler>

08000ae6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aea:	2003      	movs	r0, #3
 8000aec:	f000 f94c 	bl	8000d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af0:	200f      	movs	r0, #15
 8000af2:	f000 f805 	bl	8000b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af6:	f7ff febf 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b08:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <HAL_InitTick+0x54>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <HAL_InitTick+0x58>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4619      	mov	r1, r3
 8000b12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f967 	bl	8000df2 <HAL_SYSTICK_Config>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00e      	b.n	8000b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b0f      	cmp	r3, #15
 8000b32:	d80a      	bhi.n	8000b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b34:	2200      	movs	r2, #0
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	f000 f92f 	bl	8000d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b40:	4a06      	ldr	r2, [pc, #24]	@ (8000b5c <HAL_InitTick+0x5c>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	e000      	b.n	8000b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000000 	.word	0x20000000
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000004 	.word	0x20000004

08000b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_IncTick+0x20>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <HAL_IncTick+0x24>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a04      	ldr	r2, [pc, #16]	@ (8000b84 <HAL_IncTick+0x24>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000008 	.word	0x20000008
 8000b84:	200000b0 	.word	0x200000b0

08000b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	@ (8000b9c <HAL_GetTick+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	200000b0 	.word	0x200000b0

08000ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba8:	f7ff ffee 	bl	8000b88 <HAL_GetTick>
 8000bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb8:	d005      	beq.n	8000bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bba:	4b0a      	ldr	r3, [pc, #40]	@ (8000be4 <HAL_Delay+0x44>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bc6:	bf00      	nop
 8000bc8:	f7ff ffde 	bl	8000b88 <HAL_GetTick>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d8f7      	bhi.n	8000bc8 <HAL_Delay+0x28>
  {
  }
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000008 	.word	0x20000008

08000be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <__NVIC_SetPriorityGrouping+0x40>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c04:	4013      	ands	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000c12:	4313      	orrs	r3, r2
 8000c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c16:	4a04      	ldr	r2, [pc, #16]	@ (8000c28 <__NVIC_SetPriorityGrouping+0x40>)
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	60d3      	str	r3, [r2, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00
 8000c2c:	05fa0000 	.word	0x05fa0000

08000c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c34:	4b04      	ldr	r3, [pc, #16]	@ (8000c48 <__NVIC_GetPriorityGrouping+0x18>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	f003 0307 	and.w	r3, r3, #7
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db0b      	blt.n	8000c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f003 021f 	and.w	r2, r3, #31
 8000c64:	4907      	ldr	r1, [pc, #28]	@ (8000c84 <__NVIC_EnableIRQ+0x38>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	095b      	lsrs	r3, r3, #5
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db0a      	blt.n	8000cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	490c      	ldr	r1, [pc, #48]	@ (8000cd4 <__NVIC_SetPriority+0x4c>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	0112      	lsls	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb0:	e00a      	b.n	8000cc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	@ (8000cd8 <__NVIC_SetPriority+0x50>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	761a      	strb	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	@ 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f1c3 0307 	rsb	r3, r3, #7
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	bf28      	it	cs
 8000cfa:	2304      	movcs	r3, #4
 8000cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2b06      	cmp	r3, #6
 8000d04:	d902      	bls.n	8000d0c <NVIC_EncodePriority+0x30>
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3b03      	subs	r3, #3
 8000d0a:	e000      	b.n	8000d0e <NVIC_EncodePriority+0x32>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	f04f 32ff 	mov.w	r2, #4294967295
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	401a      	ands	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d24:	f04f 31ff 	mov.w	r1, #4294967295
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43d9      	mvns	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	4313      	orrs	r3, r2
         );
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3724      	adds	r7, #36	@ 0x24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d54:	d301      	bcc.n	8000d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00f      	b.n	8000d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d84 <SysTick_Config+0x40>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d62:	210f      	movs	r1, #15
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f7ff ff8e 	bl	8000c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d6c:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <SysTick_Config+0x40>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d72:	4b04      	ldr	r3, [pc, #16]	@ (8000d84 <SysTick_Config+0x40>)
 8000d74:	2207      	movs	r2, #7
 8000d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	e000e010 	.word	0xe000e010

08000d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ff29 	bl	8000be8 <__NVIC_SetPriorityGrouping>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
 8000daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db0:	f7ff ff3e 	bl	8000c30 <__NVIC_GetPriorityGrouping>
 8000db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	6978      	ldr	r0, [r7, #20]
 8000dbc:	f7ff ff8e 	bl	8000cdc <NVIC_EncodePriority>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff5d 	bl	8000c88 <__NVIC_SetPriority>
}
 8000dce:	bf00      	nop
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff31 	bl	8000c4c <__NVIC_EnableIRQ>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ffa2 	bl	8000d44 <SysTick_Config>
 8000e00:	4603      	mov	r3, r0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000e10:	f3bf 8f5f 	dmb	sy
}
 8000e14:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000e16:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <HAL_MPU_Disable+0x28>)
 8000e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e1a:	4a06      	ldr	r2, [pc, #24]	@ (8000e34 <HAL_MPU_Disable+0x28>)
 8000e1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e20:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000e22:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <HAL_MPU_Disable+0x2c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	605a      	str	r2, [r3, #4]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00
 8000e38:	e000ed90 	.word	0xe000ed90

08000e3c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000e44:	4a0b      	ldr	r2, [pc, #44]	@ (8000e74 <HAL_MPU_Enable+0x38>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <HAL_MPU_Enable+0x3c>)
 8000e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e52:	4a09      	ldr	r2, [pc, #36]	@ (8000e78 <HAL_MPU_Enable+0x3c>)
 8000e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e58:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000e5a:	f3bf 8f4f 	dsb	sy
}
 8000e5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e60:	f3bf 8f6f 	isb	sy
}
 8000e64:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed90 	.word	0xe000ed90
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	785a      	ldrb	r2, [r3, #1]
 8000e88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <HAL_MPU_ConfigRegion+0x7c>)
 8000e8a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef8 <HAL_MPU_ConfigRegion+0x7c>)
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	4a19      	ldr	r2, [pc, #100]	@ (8000ef8 <HAL_MPU_ConfigRegion+0x7c>)
 8000e92:	f023 0301 	bic.w	r3, r3, #1
 8000e96:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000e98:	4a17      	ldr	r2, [pc, #92]	@ (8000ef8 <HAL_MPU_ConfigRegion+0x7c>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	7b1b      	ldrb	r3, [r3, #12]
 8000ea4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	7adb      	ldrb	r3, [r3, #11]
 8000eaa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000eac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7a9b      	ldrb	r3, [r3, #10]
 8000eb2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000eb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	7b5b      	ldrb	r3, [r3, #13]
 8000eba:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ebc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	7b9b      	ldrb	r3, [r3, #14]
 8000ec2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000ec4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7bdb      	ldrb	r3, [r3, #15]
 8000eca:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ecc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7a5b      	ldrb	r3, [r3, #9]
 8000ed2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000ed4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7a1b      	ldrb	r3, [r3, #8]
 8000eda:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000edc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	7812      	ldrb	r2, [r2, #0]
 8000ee2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ee4:	4a04      	ldr	r2, [pc, #16]	@ (8000ef8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ee6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ee8:	6113      	str	r3, [r2, #16]
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed90 	.word	0xe000ed90

08000efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	@ 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	e175      	b.n	8001208 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	f040 8164 	bne.w	8001202 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d005      	beq.n	8000f52 <HAL_GPIO_Init+0x56>
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d130      	bne.n	8000fb4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	68da      	ldr	r2, [r3, #12]
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f88:	2201      	movs	r2, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	091b      	lsrs	r3, r3, #4
 8000f9e:	f003 0201 	and.w	r2, r3, #1
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d017      	beq.n	8000ff0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d123      	bne.n	8001044 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	08da      	lsrs	r2, r3, #3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3208      	adds	r2, #8
 8001004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	220f      	movs	r2, #15
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	691a      	ldr	r2, [r3, #16]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	08da      	lsrs	r2, r3, #3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3208      	adds	r2, #8
 800103e:	69b9      	ldr	r1, [r7, #24]
 8001040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0203 	and.w	r2, r3, #3
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001080:	2b00      	cmp	r3, #0
 8001082:	f000 80be 	beq.w	8001202 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	4b66      	ldr	r3, [pc, #408]	@ (8001220 <HAL_GPIO_Init+0x324>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108a:	4a65      	ldr	r2, [pc, #404]	@ (8001220 <HAL_GPIO_Init+0x324>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001090:	6453      	str	r3, [r2, #68]	@ 0x44
 8001092:	4b63      	ldr	r3, [pc, #396]	@ (8001220 <HAL_GPIO_Init+0x324>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800109e:	4a61      	ldr	r2, [pc, #388]	@ (8001224 <HAL_GPIO_Init+0x328>)
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	3302      	adds	r3, #2
 80010a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	220f      	movs	r2, #15
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a58      	ldr	r2, [pc, #352]	@ (8001228 <HAL_GPIO_Init+0x32c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d037      	beq.n	800113a <HAL_GPIO_Init+0x23e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a57      	ldr	r2, [pc, #348]	@ (800122c <HAL_GPIO_Init+0x330>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d031      	beq.n	8001136 <HAL_GPIO_Init+0x23a>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a56      	ldr	r2, [pc, #344]	@ (8001230 <HAL_GPIO_Init+0x334>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d02b      	beq.n	8001132 <HAL_GPIO_Init+0x236>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a55      	ldr	r2, [pc, #340]	@ (8001234 <HAL_GPIO_Init+0x338>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d025      	beq.n	800112e <HAL_GPIO_Init+0x232>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a54      	ldr	r2, [pc, #336]	@ (8001238 <HAL_GPIO_Init+0x33c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d01f      	beq.n	800112a <HAL_GPIO_Init+0x22e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a53      	ldr	r2, [pc, #332]	@ (800123c <HAL_GPIO_Init+0x340>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d019      	beq.n	8001126 <HAL_GPIO_Init+0x22a>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a52      	ldr	r2, [pc, #328]	@ (8001240 <HAL_GPIO_Init+0x344>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d013      	beq.n	8001122 <HAL_GPIO_Init+0x226>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a51      	ldr	r2, [pc, #324]	@ (8001244 <HAL_GPIO_Init+0x348>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d00d      	beq.n	800111e <HAL_GPIO_Init+0x222>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a50      	ldr	r2, [pc, #320]	@ (8001248 <HAL_GPIO_Init+0x34c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d007      	beq.n	800111a <HAL_GPIO_Init+0x21e>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4f      	ldr	r2, [pc, #316]	@ (800124c <HAL_GPIO_Init+0x350>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d101      	bne.n	8001116 <HAL_GPIO_Init+0x21a>
 8001112:	2309      	movs	r3, #9
 8001114:	e012      	b.n	800113c <HAL_GPIO_Init+0x240>
 8001116:	230a      	movs	r3, #10
 8001118:	e010      	b.n	800113c <HAL_GPIO_Init+0x240>
 800111a:	2308      	movs	r3, #8
 800111c:	e00e      	b.n	800113c <HAL_GPIO_Init+0x240>
 800111e:	2307      	movs	r3, #7
 8001120:	e00c      	b.n	800113c <HAL_GPIO_Init+0x240>
 8001122:	2306      	movs	r3, #6
 8001124:	e00a      	b.n	800113c <HAL_GPIO_Init+0x240>
 8001126:	2305      	movs	r3, #5
 8001128:	e008      	b.n	800113c <HAL_GPIO_Init+0x240>
 800112a:	2304      	movs	r3, #4
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x240>
 800112e:	2303      	movs	r3, #3
 8001130:	e004      	b.n	800113c <HAL_GPIO_Init+0x240>
 8001132:	2302      	movs	r3, #2
 8001134:	e002      	b.n	800113c <HAL_GPIO_Init+0x240>
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <HAL_GPIO_Init+0x240>
 800113a:	2300      	movs	r3, #0
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	f002 0203 	and.w	r2, r2, #3
 8001142:	0092      	lsls	r2, r2, #2
 8001144:	4093      	lsls	r3, r2
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800114c:	4935      	ldr	r1, [pc, #212]	@ (8001224 <HAL_GPIO_Init+0x328>)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115a:	4b3d      	ldr	r3, [pc, #244]	@ (8001250 <HAL_GPIO_Init+0x354>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800117e:	4a34      	ldr	r2, [pc, #208]	@ (8001250 <HAL_GPIO_Init+0x354>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001184:	4b32      	ldr	r3, [pc, #200]	@ (8001250 <HAL_GPIO_Init+0x354>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a8:	4a29      	ldr	r2, [pc, #164]	@ (8001250 <HAL_GPIO_Init+0x354>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ae:	4b28      	ldr	r3, [pc, #160]	@ (8001250 <HAL_GPIO_Init+0x354>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001250 <HAL_GPIO_Init+0x354>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001250 <HAL_GPIO_Init+0x354>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011fc:	4a14      	ldr	r2, [pc, #80]	@ (8001250 <HAL_GPIO_Init+0x354>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3301      	adds	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	f67f ae86 	bls.w	8000f1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3724      	adds	r7, #36	@ 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40013800 	.word	0x40013800
 8001228:	40020000 	.word	0x40020000
 800122c:	40020400 	.word	0x40020400
 8001230:	40020800 	.word	0x40020800
 8001234:	40020c00 	.word	0x40020c00
 8001238:	40021000 	.word	0x40021000
 800123c:	40021400 	.word	0x40021400
 8001240:	40021800 	.word	0x40021800
 8001244:	40021c00 	.word	0x40021c00
 8001248:	40022000 	.word	0x40022000
 800124c:	40022400 	.word	0x40022400
 8001250:	40013c00 	.word	0x40013c00

08001254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
 8001260:	4613      	mov	r3, r2
 8001262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001264:	787b      	ldrb	r3, [r7, #1]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001270:	e003      	b.n	800127a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	041a      	lsls	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	619a      	str	r2, [r3, #24]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001286:	b480      	push	{r7}
 8001288:	b085      	sub	sp, #20
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	460b      	mov	r3, r1
 8001290:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001298:	887a      	ldrh	r2, [r7, #2]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4013      	ands	r3, r2
 800129e:	041a      	lsls	r2, r3, #16
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	400b      	ands	r3, r1
 80012a8:	431a      	orrs	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	619a      	str	r2, [r3, #24]
}
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012c8:	695a      	ldr	r2, [r3, #20]
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d006      	beq.n	80012e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012d2:	4a05      	ldr	r2, [pc, #20]	@ (80012e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fa5e 	bl	800079c <HAL_GPIO_EXTI_Callback>
  }
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40013c00 	.word	0x40013c00

080012ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	4b23      	ldr	r3, [pc, #140]	@ (8001384 <HAL_PWREx_EnableOverDrive+0x98>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fa:	4a22      	ldr	r2, [pc, #136]	@ (8001384 <HAL_PWREx_EnableOverDrive+0x98>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001300:	6413      	str	r3, [r2, #64]	@ 0x40
 8001302:	4b20      	ldr	r3, [pc, #128]	@ (8001384 <HAL_PWREx_EnableOverDrive+0x98>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800130e:	4b1e      	ldr	r3, [pc, #120]	@ (8001388 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a1d      	ldr	r2, [pc, #116]	@ (8001388 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001318:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800131a:	f7ff fc35 	bl	8000b88 <HAL_GetTick>
 800131e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001320:	e009      	b.n	8001336 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001322:	f7ff fc31 	bl	8000b88 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001330:	d901      	bls.n	8001336 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e022      	b.n	800137c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001336:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800133e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001342:	d1ee      	bne.n	8001322 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001344:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0f      	ldr	r2, [pc, #60]	@ (8001388 <HAL_PWREx_EnableOverDrive+0x9c>)
 800134a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800134e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001350:	f7ff fc1a 	bl	8000b88 <HAL_GetTick>
 8001354:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001356:	e009      	b.n	800136c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001358:	f7ff fc16 	bl	8000b88 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001366:	d901      	bls.n	800136c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e007      	b.n	800137c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <HAL_PWREx_EnableOverDrive+0x9c>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001374:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001378:	d1ee      	bne.n	8001358 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40023800 	.word	0x40023800
 8001388:	40007000 	.word	0x40007000

0800138c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e29b      	b.n	80018da <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 8087 	beq.w	80014be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013b0:	4b96      	ldr	r3, [pc, #600]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 030c 	and.w	r3, r3, #12
 80013b8:	2b04      	cmp	r3, #4
 80013ba:	d00c      	beq.n	80013d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013bc:	4b93      	ldr	r3, [pc, #588]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f003 030c 	and.w	r3, r3, #12
 80013c4:	2b08      	cmp	r3, #8
 80013c6:	d112      	bne.n	80013ee <HAL_RCC_OscConfig+0x62>
 80013c8:	4b90      	ldr	r3, [pc, #576]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013d4:	d10b      	bne.n	80013ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d6:	4b8d      	ldr	r3, [pc, #564]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d06c      	beq.n	80014bc <HAL_RCC_OscConfig+0x130>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d168      	bne.n	80014bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e275      	b.n	80018da <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013f6:	d106      	bne.n	8001406 <HAL_RCC_OscConfig+0x7a>
 80013f8:	4b84      	ldr	r3, [pc, #528]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a83      	ldr	r2, [pc, #524]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 80013fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	e02e      	b.n	8001464 <HAL_RCC_OscConfig+0xd8>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10c      	bne.n	8001428 <HAL_RCC_OscConfig+0x9c>
 800140e:	4b7f      	ldr	r3, [pc, #508]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a7e      	ldr	r2, [pc, #504]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 8001414:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	4b7c      	ldr	r3, [pc, #496]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a7b      	ldr	r2, [pc, #492]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 8001420:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e01d      	b.n	8001464 <HAL_RCC_OscConfig+0xd8>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001430:	d10c      	bne.n	800144c <HAL_RCC_OscConfig+0xc0>
 8001432:	4b76      	ldr	r3, [pc, #472]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a75      	ldr	r2, [pc, #468]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 8001438:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	4b73      	ldr	r3, [pc, #460]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a72      	ldr	r2, [pc, #456]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 8001444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e00b      	b.n	8001464 <HAL_RCC_OscConfig+0xd8>
 800144c:	4b6f      	ldr	r3, [pc, #444]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a6e      	ldr	r2, [pc, #440]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 8001452:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b6c      	ldr	r3, [pc, #432]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a6b      	ldr	r2, [pc, #428]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 800145e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d013      	beq.n	8001494 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146c:	f7ff fb8c 	bl	8000b88 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001474:	f7ff fb88 	bl	8000b88 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b64      	cmp	r3, #100	@ 0x64
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e229      	b.n	80018da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001486:	4b61      	ldr	r3, [pc, #388]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0xe8>
 8001492:	e014      	b.n	80014be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001494:	f7ff fb78 	bl	8000b88 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800149c:	f7ff fb74 	bl	8000b88 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b64      	cmp	r3, #100	@ 0x64
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e215      	b.n	80018da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ae:	4b57      	ldr	r3, [pc, #348]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0x110>
 80014ba:	e000      	b.n	80014be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d069      	beq.n	800159e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ca:	4b50      	ldr	r3, [pc, #320]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00b      	beq.n	80014ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014d6:	4b4d      	ldr	r3, [pc, #308]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d11c      	bne.n	800151c <HAL_RCC_OscConfig+0x190>
 80014e2:	4b4a      	ldr	r3, [pc, #296]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d116      	bne.n	800151c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ee:	4b47      	ldr	r3, [pc, #284]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d005      	beq.n	8001506 <HAL_RCC_OscConfig+0x17a>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d001      	beq.n	8001506 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e1e9      	b.n	80018da <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001506:	4b41      	ldr	r3, [pc, #260]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	493d      	ldr	r1, [pc, #244]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151a:	e040      	b.n	800159e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d023      	beq.n	800156c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001524:	4b39      	ldr	r3, [pc, #228]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a38      	ldr	r2, [pc, #224]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001530:	f7ff fb2a 	bl	8000b88 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001538:	f7ff fb26 	bl	8000b88 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e1c7      	b.n	80018da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154a:	4b30      	ldr	r3, [pc, #192]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	4b2d      	ldr	r3, [pc, #180]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4929      	ldr	r1, [pc, #164]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
 800156a:	e018      	b.n	800159e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800156c:	4b27      	ldr	r3, [pc, #156]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a26      	ldr	r2, [pc, #152]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 8001572:	f023 0301 	bic.w	r3, r3, #1
 8001576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001578:	f7ff fb06 	bl	8000b88 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001580:	f7ff fb02 	bl	8000b88 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e1a3      	b.n	80018da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001592:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d038      	beq.n	800161c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d019      	beq.n	80015e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b2:	4b16      	ldr	r3, [pc, #88]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 80015b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015b6:	4a15      	ldr	r2, [pc, #84]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015be:	f7ff fae3 	bl	8000b88 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c6:	f7ff fadf 	bl	8000b88 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e180      	b.n	80018da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 80015da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x23a>
 80015e4:	e01a      	b.n	800161c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e6:	4b09      	ldr	r3, [pc, #36]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 80015e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015ea:	4a08      	ldr	r2, [pc, #32]	@ (800160c <HAL_RCC_OscConfig+0x280>)
 80015ec:	f023 0301 	bic.w	r3, r3, #1
 80015f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f2:	f7ff fac9 	bl	8000b88 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f8:	e00a      	b.n	8001610 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015fa:	f7ff fac5 	bl	8000b88 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d903      	bls.n	8001610 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e166      	b.n	80018da <HAL_RCC_OscConfig+0x54e>
 800160c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001610:	4b92      	ldr	r3, [pc, #584]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 8001612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1ee      	bne.n	80015fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80a4 	beq.w	8001772 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800162a:	4b8c      	ldr	r3, [pc, #560]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10d      	bne.n	8001652 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	4b89      	ldr	r3, [pc, #548]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	4a88      	ldr	r2, [pc, #544]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 800163c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001640:	6413      	str	r3, [r2, #64]	@ 0x40
 8001642:	4b86      	ldr	r3, [pc, #536]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800164e:	2301      	movs	r3, #1
 8001650:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001652:	4b83      	ldr	r3, [pc, #524]	@ (8001860 <HAL_RCC_OscConfig+0x4d4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800165a:	2b00      	cmp	r3, #0
 800165c:	d118      	bne.n	8001690 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800165e:	4b80      	ldr	r3, [pc, #512]	@ (8001860 <HAL_RCC_OscConfig+0x4d4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a7f      	ldr	r2, [pc, #508]	@ (8001860 <HAL_RCC_OscConfig+0x4d4>)
 8001664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166a:	f7ff fa8d 	bl	8000b88 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001672:	f7ff fa89 	bl	8000b88 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b64      	cmp	r3, #100	@ 0x64
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e12a      	b.n	80018da <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001684:	4b76      	ldr	r3, [pc, #472]	@ (8001860 <HAL_RCC_OscConfig+0x4d4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f0      	beq.n	8001672 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d106      	bne.n	80016a6 <HAL_RCC_OscConfig+0x31a>
 8001698:	4b70      	ldr	r3, [pc, #448]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 800169a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800169c:	4a6f      	ldr	r2, [pc, #444]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016a4:	e02d      	b.n	8001702 <HAL_RCC_OscConfig+0x376>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10c      	bne.n	80016c8 <HAL_RCC_OscConfig+0x33c>
 80016ae:	4b6b      	ldr	r3, [pc, #428]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 80016b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b2:	4a6a      	ldr	r2, [pc, #424]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ba:	4b68      	ldr	r3, [pc, #416]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 80016bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016be:	4a67      	ldr	r2, [pc, #412]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 80016c0:	f023 0304 	bic.w	r3, r3, #4
 80016c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80016c6:	e01c      	b.n	8001702 <HAL_RCC_OscConfig+0x376>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b05      	cmp	r3, #5
 80016ce:	d10c      	bne.n	80016ea <HAL_RCC_OscConfig+0x35e>
 80016d0:	4b62      	ldr	r3, [pc, #392]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 80016d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d4:	4a61      	ldr	r2, [pc, #388]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 80016d6:	f043 0304 	orr.w	r3, r3, #4
 80016da:	6713      	str	r3, [r2, #112]	@ 0x70
 80016dc:	4b5f      	ldr	r3, [pc, #380]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 80016de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016e0:	4a5e      	ldr	r2, [pc, #376]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016e8:	e00b      	b.n	8001702 <HAL_RCC_OscConfig+0x376>
 80016ea:	4b5c      	ldr	r3, [pc, #368]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 80016ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ee:	4a5b      	ldr	r2, [pc, #364]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 80016f0:	f023 0301 	bic.w	r3, r3, #1
 80016f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80016f6:	4b59      	ldr	r3, [pc, #356]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016fa:	4a58      	ldr	r2, [pc, #352]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 80016fc:	f023 0304 	bic.w	r3, r3, #4
 8001700:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d015      	beq.n	8001736 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170a:	f7ff fa3d 	bl	8000b88 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001710:	e00a      	b.n	8001728 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001712:	f7ff fa39 	bl	8000b88 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001720:	4293      	cmp	r3, r2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e0d8      	b.n	80018da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001728:	4b4c      	ldr	r3, [pc, #304]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 800172a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0ee      	beq.n	8001712 <HAL_RCC_OscConfig+0x386>
 8001734:	e014      	b.n	8001760 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001736:	f7ff fa27 	bl	8000b88 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800173c:	e00a      	b.n	8001754 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173e:	f7ff fa23 	bl	8000b88 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	f241 3288 	movw	r2, #5000	@ 0x1388
 800174c:	4293      	cmp	r3, r2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e0c2      	b.n	80018da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001754:	4b41      	ldr	r3, [pc, #260]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 8001756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1ee      	bne.n	800173e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001760:	7dfb      	ldrb	r3, [r7, #23]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d105      	bne.n	8001772 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001766:	4b3d      	ldr	r3, [pc, #244]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	4a3c      	ldr	r2, [pc, #240]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 800176c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001770:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 80ae 	beq.w	80018d8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800177c:	4b37      	ldr	r3, [pc, #220]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 030c 	and.w	r3, r3, #12
 8001784:	2b08      	cmp	r3, #8
 8001786:	d06d      	beq.n	8001864 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	2b02      	cmp	r3, #2
 800178e:	d14b      	bne.n	8001828 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001790:	4b32      	ldr	r3, [pc, #200]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a31      	ldr	r2, [pc, #196]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 8001796:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800179a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff f9f4 	bl	8000b88 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a4:	f7ff f9f0 	bl	8000b88 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e091      	b.n	80018da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b6:	4b29      	ldr	r3, [pc, #164]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69da      	ldr	r2, [r3, #28]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d0:	019b      	lsls	r3, r3, #6
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d8:	085b      	lsrs	r3, r3, #1
 80017da:	3b01      	subs	r3, #1
 80017dc:	041b      	lsls	r3, r3, #16
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e4:	061b      	lsls	r3, r3, #24
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ec:	071b      	lsls	r3, r3, #28
 80017ee:	491b      	ldr	r1, [pc, #108]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017f4:	4b19      	ldr	r3, [pc, #100]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a18      	ldr	r2, [pc, #96]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 80017fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff f9c2 	bl	8000b88 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001808:	f7ff f9be 	bl	8000b88 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e05f      	b.n	80018da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181a:	4b10      	ldr	r3, [pc, #64]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x47c>
 8001826:	e057      	b.n	80018d8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001828:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0b      	ldr	r2, [pc, #44]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 800182e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001834:	f7ff f9a8 	bl	8000b88 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183c:	f7ff f9a4 	bl	8000b88 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e045      	b.n	80018da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184e:	4b03      	ldr	r3, [pc, #12]	@ (800185c <HAL_RCC_OscConfig+0x4d0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x4b0>
 800185a:	e03d      	b.n	80018d8 <HAL_RCC_OscConfig+0x54c>
 800185c:	40023800 	.word	0x40023800
 8001860:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001864:	4b1f      	ldr	r3, [pc, #124]	@ (80018e4 <HAL_RCC_OscConfig+0x558>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d030      	beq.n	80018d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d129      	bne.n	80018d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188a:	429a      	cmp	r2, r3
 800188c:	d122      	bne.n	80018d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001894:	4013      	ands	r3, r2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800189a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800189c:	4293      	cmp	r3, r2
 800189e:	d119      	bne.n	80018d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018aa:	085b      	lsrs	r3, r3, #1
 80018ac:	3b01      	subs	r3, #1
 80018ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d10f      	bne.n	80018d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d107      	bne.n	80018d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800

080018e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0d0      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001900:	4b6a      	ldr	r3, [pc, #424]	@ (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 030f 	and.w	r3, r3, #15
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d910      	bls.n	8001930 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190e:	4b67      	ldr	r3, [pc, #412]	@ (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f023 020f 	bic.w	r2, r3, #15
 8001916:	4965      	ldr	r1, [pc, #404]	@ (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	4313      	orrs	r3, r2
 800191c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b63      	ldr	r3, [pc, #396]	@ (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0b8      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d020      	beq.n	800197e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001948:	4b59      	ldr	r3, [pc, #356]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	4a58      	ldr	r2, [pc, #352]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800194e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001952:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001960:	4b53      	ldr	r3, [pc, #332]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4a52      	ldr	r2, [pc, #328]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8001966:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800196a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800196c:	4b50      	ldr	r3, [pc, #320]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	494d      	ldr	r1, [pc, #308]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800197a:	4313      	orrs	r3, r2
 800197c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d040      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d107      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	4b47      	ldr	r3, [pc, #284]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d115      	bne.n	80019ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e07f      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019aa:	4b41      	ldr	r3, [pc, #260]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d109      	bne.n	80019ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e073      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ba:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e06b      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ca:	4b39      	ldr	r3, [pc, #228]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f023 0203 	bic.w	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4936      	ldr	r1, [pc, #216]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019dc:	f7ff f8d4 	bl	8000b88 <HAL_GetTick>
 80019e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e2:	e00a      	b.n	80019fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e4:	f7ff f8d0 	bl	8000b88 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e053      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fa:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 020c 	and.w	r2, r3, #12
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d1eb      	bne.n	80019e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a0c:	4b27      	ldr	r3, [pc, #156]	@ (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 030f 	and.w	r3, r3, #15
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d210      	bcs.n	8001a3c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	4b24      	ldr	r3, [pc, #144]	@ (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 020f 	bic.w	r2, r3, #15
 8001a22:	4922      	ldr	r1, [pc, #136]	@ (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2a:	4b20      	ldr	r3, [pc, #128]	@ (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e032      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d008      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a48:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	4916      	ldr	r1, [pc, #88]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d009      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a66:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	490e      	ldr	r1, [pc, #56]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a7a:	f000 f821 	bl	8001ac0 <HAL_RCC_GetSysClockFreq>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	490a      	ldr	r1, [pc, #40]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1cc>)
 8001a8c:	5ccb      	ldrb	r3, [r1, r3]
 8001a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a92:	4a09      	ldr	r2, [pc, #36]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1d0>)
 8001a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a96:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <HAL_RCC_ClockConfig+0x1d4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff f830 	bl	8000b00 <HAL_InitTick>

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023c00 	.word	0x40023c00
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	0800302c 	.word	0x0800302c
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	20000004 	.word	0x20000004

08001ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ac4:	b090      	sub	sp, #64	@ 0x40
 8001ac6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	637b      	str	r3, [r7, #52]	@ 0x34
 8001acc:	2300      	movs	r3, #0
 8001ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ad8:	4b59      	ldr	r3, [pc, #356]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 030c 	and.w	r3, r3, #12
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d00d      	beq.n	8001b00 <HAL_RCC_GetSysClockFreq+0x40>
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	f200 80a1 	bhi.w	8001c2c <HAL_RCC_GetSysClockFreq+0x16c>
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <HAL_RCC_GetSysClockFreq+0x34>
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d003      	beq.n	8001afa <HAL_RCC_GetSysClockFreq+0x3a>
 8001af2:	e09b      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001af4:	4b53      	ldr	r3, [pc, #332]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x184>)
 8001af6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001af8:	e09b      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001afa:	4b53      	ldr	r3, [pc, #332]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x188>)
 8001afc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001afe:	e098      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b00:	4b4f      	ldr	r3, [pc, #316]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b08:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b0a:	4b4d      	ldr	r3, [pc, #308]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d028      	beq.n	8001b68 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b16:	4b4a      	ldr	r3, [pc, #296]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	099b      	lsrs	r3, r3, #6
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	623b      	str	r3, [r7, #32]
 8001b20:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4b47      	ldr	r3, [pc, #284]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b2c:	fb03 f201 	mul.w	r2, r3, r1
 8001b30:	2300      	movs	r3, #0
 8001b32:	fb00 f303 	mul.w	r3, r0, r3
 8001b36:	4413      	add	r3, r2
 8001b38:	4a43      	ldr	r2, [pc, #268]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b3a:	fba0 1202 	umull	r1, r2, r0, r2
 8001b3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b40:	460a      	mov	r2, r1
 8001b42:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001b44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b46:	4413      	add	r3, r2
 8001b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	61bb      	str	r3, [r7, #24]
 8001b50:	61fa      	str	r2, [r7, #28]
 8001b52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b5a:	f7fe fb6d 	bl	8000238 <__aeabi_uldivmod>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4613      	mov	r3, r2
 8001b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b66:	e053      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b68:	4b35      	ldr	r3, [pc, #212]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	099b      	lsrs	r3, r3, #6
 8001b6e:	2200      	movs	r2, #0
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	617a      	str	r2, [r7, #20]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b7a:	f04f 0b00 	mov.w	fp, #0
 8001b7e:	4652      	mov	r2, sl
 8001b80:	465b      	mov	r3, fp
 8001b82:	f04f 0000 	mov.w	r0, #0
 8001b86:	f04f 0100 	mov.w	r1, #0
 8001b8a:	0159      	lsls	r1, r3, #5
 8001b8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b90:	0150      	lsls	r0, r2, #5
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	ebb2 080a 	subs.w	r8, r2, sl
 8001b9a:	eb63 090b 	sbc.w	r9, r3, fp
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001baa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001bb2:	ebb2 0408 	subs.w	r4, r2, r8
 8001bb6:	eb63 0509 	sbc.w	r5, r3, r9
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	00eb      	lsls	r3, r5, #3
 8001bc4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bc8:	00e2      	lsls	r2, r4, #3
 8001bca:	4614      	mov	r4, r2
 8001bcc:	461d      	mov	r5, r3
 8001bce:	eb14 030a 	adds.w	r3, r4, sl
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	eb45 030b 	adc.w	r3, r5, fp
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001be6:	4629      	mov	r1, r5
 8001be8:	028b      	lsls	r3, r1, #10
 8001bea:	4621      	mov	r1, r4
 8001bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bf0:	4621      	mov	r1, r4
 8001bf2:	028a      	lsls	r2, r1, #10
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	60fa      	str	r2, [r7, #12]
 8001c00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c04:	f7fe fb18 	bl	8000238 <__aeabi_uldivmod>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c10:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	0c1b      	lsrs	r3, r3, #16
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001c20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c28:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c2a:	e002      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c2c:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3740      	adds	r7, #64	@ 0x40
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	00f42400 	.word	0x00f42400
 8001c48:	017d7840 	.word	0x017d7840

08001c4c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c50:	4b03      	ldr	r3, [pc, #12]	@ (8001c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000000 	.word	0x20000000

08001c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c68:	f7ff fff0 	bl	8001c4c <HAL_RCC_GetHCLKFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	0a9b      	lsrs	r3, r3, #10
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	4903      	ldr	r1, [pc, #12]	@ (8001c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40023800 	.word	0x40023800
 8001c88:	0800303c 	.word	0x0800303c

08001c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c90:	f7ff ffdc 	bl	8001c4c <HAL_RCC_GetHCLKFreq>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	0b5b      	lsrs	r3, r3, #13
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	4903      	ldr	r1, [pc, #12]	@ (8001cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ca2:	5ccb      	ldrb	r3, [r1, r3]
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	0800303c 	.word	0x0800303c

08001cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d012      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001cdc:	4b69      	ldr	r3, [pc, #420]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	4a68      	ldr	r2, [pc, #416]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001ce6:	6093      	str	r3, [r2, #8]
 8001ce8:	4b66      	ldr	r3, [pc, #408]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cf0:	4964      	ldr	r1, [pc, #400]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d017      	beq.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d14:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d1c:	4959      	ldr	r1, [pc, #356]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d017      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d4a:	4b4e      	ldr	r3, [pc, #312]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d50:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d58:	494a      	ldr	r1, [pc, #296]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d68:	d101      	bne.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001d76:	2301      	movs	r3, #1
 8001d78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001d86:	2301      	movs	r3, #1
 8001d88:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0320 	and.w	r3, r3, #32
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 808b 	beq.w	8001eae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d98:	4b3a      	ldr	r3, [pc, #232]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9c:	4a39      	ldr	r2, [pc, #228]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001da4:	4b37      	ldr	r3, [pc, #220]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001db0:	4b35      	ldr	r3, [pc, #212]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a34      	ldr	r2, [pc, #208]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dbc:	f7fe fee4 	bl	8000b88 <HAL_GetTick>
 8001dc0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc4:	f7fe fee0 	bl	8000b88 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	@ 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e38f      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001de2:	4b28      	ldr	r3, [pc, #160]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d035      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d02e      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e00:	4b20      	ldr	r3, [pc, #128]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e08:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e0e:	4a1d      	ldr	r2, [pc, #116]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e14:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e16:	4b1b      	ldr	r3, [pc, #108]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e1a:	4a1a      	ldr	r2, [pc, #104]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e20:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001e22:	4a18      	ldr	r2, [pc, #96]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e28:	4b16      	ldr	r3, [pc, #88]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d114      	bne.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7fe fea8 	bl	8000b88 <HAL_GetTick>
 8001e38:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3a:	e00a      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e3c:	f7fe fea4 	bl	8000b88 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e351      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e52:	4b0c      	ldr	r3, [pc, #48]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0ee      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e6a:	d111      	bne.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001e6c:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e78:	4b04      	ldr	r3, [pc, #16]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001e7a:	400b      	ands	r3, r1
 8001e7c:	4901      	ldr	r1, [pc, #4]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	608b      	str	r3, [r1, #8]
 8001e82:	e00b      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40007000 	.word	0x40007000
 8001e8c:	0ffffcff 	.word	0x0ffffcff
 8001e90:	4bac      	ldr	r3, [pc, #688]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	4aab      	ldr	r2, [pc, #684]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e96:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001e9a:	6093      	str	r3, [r2, #8]
 8001e9c:	4ba9      	ldr	r3, [pc, #676]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea8:	49a6      	ldr	r1, [pc, #664]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d010      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001eba:	4ba2      	ldr	r3, [pc, #648]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ec0:	4aa0      	ldr	r2, [pc, #640]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ec2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ec6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001eca:	4b9e      	ldr	r3, [pc, #632]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ecc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ed4:	499b      	ldr	r1, [pc, #620]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00a      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ee8:	4b96      	ldr	r3, [pc, #600]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ef6:	4993      	ldr	r1, [pc, #588]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00a      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f0a:	4b8e      	ldr	r3, [pc, #568]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f10:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f18:	498a      	ldr	r1, [pc, #552]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00a      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f2c:	4b85      	ldr	r3, [pc, #532]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f3a:	4982      	ldr	r1, [pc, #520]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f4e:	4b7d      	ldr	r3, [pc, #500]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f54:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f5c:	4979      	ldr	r1, [pc, #484]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00a      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f70:	4b74      	ldr	r3, [pc, #464]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f76:	f023 0203 	bic.w	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7e:	4971      	ldr	r1, [pc, #452]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f92:	4b6c      	ldr	r3, [pc, #432]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f98:	f023 020c 	bic.w	r2, r3, #12
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fa0:	4968      	ldr	r1, [pc, #416]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00a      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fb4:	4b63      	ldr	r3, [pc, #396]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fba:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc2:	4960      	ldr	r1, [pc, #384]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00a      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fd6:	4b5b      	ldr	r3, [pc, #364]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fdc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fe4:	4957      	ldr	r1, [pc, #348]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00a      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001ff8:	4b52      	ldr	r3, [pc, #328]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ffe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002006:	494f      	ldr	r1, [pc, #316]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002008:	4313      	orrs	r3, r2
 800200a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00a      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800201a:	4b4a      	ldr	r3, [pc, #296]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800201c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002020:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002028:	4946      	ldr	r1, [pc, #280]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800202a:	4313      	orrs	r3, r2
 800202c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00a      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800203c:	4b41      	ldr	r3, [pc, #260]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002042:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204a:	493e      	ldr	r1, [pc, #248]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800205e:	4b39      	ldr	r3, [pc, #228]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002064:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800206c:	4935      	ldr	r1, [pc, #212]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00a      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002080:	4b30      	ldr	r3, [pc, #192]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002086:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800208e:	492d      	ldr	r1, [pc, #180]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d011      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80020a2:	4b28      	ldr	r3, [pc, #160]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020b0:	4924      	ldr	r1, [pc, #144]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020c0:	d101      	bne.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80020c2:	2301      	movs	r3, #1
 80020c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80020d2:	2301      	movs	r3, #1
 80020d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020e2:	4b18      	ldr	r3, [pc, #96]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020f0:	4914      	ldr	r1, [pc, #80]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00b      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002104:	4b0f      	ldr	r3, [pc, #60]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800210a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002114:	490b      	ldr	r1, [pc, #44]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00f      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002128:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800212e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002138:	4902      	ldr	r1, [pc, #8]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800213a:	4313      	orrs	r3, r2
 800213c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002140:	e002      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00b      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002154:	4b8a      	ldr	r3, [pc, #552]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002156:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800215a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002164:	4986      	ldr	r1, [pc, #536]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00b      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002178:	4b81      	ldr	r3, [pc, #516]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800217a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800217e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002188:	497d      	ldr	r1, [pc, #500]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d006      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 80d6 	beq.w	8002350 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80021a4:	4b76      	ldr	r3, [pc, #472]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a75      	ldr	r2, [pc, #468]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80021ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021b0:	f7fe fcea 	bl	8000b88 <HAL_GetTick>
 80021b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021b8:	f7fe fce6 	bl	8000b88 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	@ 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e195      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d021      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d11d      	bne.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021ea:	4b65      	ldr	r3, [pc, #404]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021f0:	0c1b      	lsrs	r3, r3, #16
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021f8:	4b61      	ldr	r3, [pc, #388]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021fe:	0e1b      	lsrs	r3, r3, #24
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	019a      	lsls	r2, r3, #6
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	041b      	lsls	r3, r3, #16
 8002210:	431a      	orrs	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	061b      	lsls	r3, r3, #24
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	071b      	lsls	r3, r3, #28
 800221e:	4958      	ldr	r1, [pc, #352]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d004      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002236:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800223a:	d00a      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002244:	2b00      	cmp	r3, #0
 8002246:	d02e      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002250:	d129      	bne.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002252:	4b4b      	ldr	r3, [pc, #300]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002254:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002258:	0c1b      	lsrs	r3, r3, #16
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002260:	4b47      	ldr	r3, [pc, #284]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002262:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002266:	0f1b      	lsrs	r3, r3, #28
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	019a      	lsls	r2, r3, #6
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	041b      	lsls	r3, r3, #16
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	061b      	lsls	r3, r3, #24
 8002280:	431a      	orrs	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	071b      	lsls	r3, r3, #28
 8002286:	493e      	ldr	r1, [pc, #248]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800228e:	4b3c      	ldr	r3, [pc, #240]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002290:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002294:	f023 021f 	bic.w	r2, r3, #31
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229c:	3b01      	subs	r3, #1
 800229e:	4938      	ldr	r1, [pc, #224]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d01d      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022b2:	4b33      	ldr	r3, [pc, #204]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022b8:	0e1b      	lsrs	r3, r3, #24
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022c6:	0f1b      	lsrs	r3, r3, #28
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	019a      	lsls	r2, r3, #6
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	041b      	lsls	r3, r3, #16
 80022da:	431a      	orrs	r2, r3
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	061b      	lsls	r3, r3, #24
 80022e0:	431a      	orrs	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	071b      	lsls	r3, r3, #28
 80022e6:	4926      	ldr	r1, [pc, #152]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d011      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	019a      	lsls	r2, r3, #6
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	041b      	lsls	r3, r3, #16
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	061b      	lsls	r3, r3, #24
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	071b      	lsls	r3, r3, #28
 8002316:	491a      	ldr	r1, [pc, #104]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800231e:	4b18      	ldr	r3, [pc, #96]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a17      	ldr	r2, [pc, #92]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002324:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800232a:	f7fe fc2d 	bl	8000b88 <HAL_GetTick>
 800232e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002332:	f7fe fc29 	bl	8000b88 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b64      	cmp	r3, #100	@ 0x64
 800233e:	d901      	bls.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e0d8      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002344:	4b0e      	ldr	r3, [pc, #56]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	2b01      	cmp	r3, #1
 8002354:	f040 80ce 	bne.w	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002358:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a08      	ldr	r2, [pc, #32]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800235e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002362:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002364:	f7fe fc10 	bl	8000b88 <HAL_GetTick>
 8002368:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800236a:	e00b      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800236c:	f7fe fc0c 	bl	8000b88 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b64      	cmp	r3, #100	@ 0x64
 8002378:	d904      	bls.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e0bb      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002384:	4b5e      	ldr	r3, [pc, #376]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800238c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002390:	d0ec      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d009      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d02e      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d12a      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80023ba:	4b51      	ldr	r3, [pc, #324]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ce:	0f1b      	lsrs	r3, r3, #28
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	019a      	lsls	r2, r3, #6
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	041b      	lsls	r3, r3, #16
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	061b      	lsls	r3, r3, #24
 80023e8:	431a      	orrs	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	071b      	lsls	r3, r3, #28
 80023ee:	4944      	ldr	r1, [pc, #272]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80023f6:	4b42      	ldr	r3, [pc, #264]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023fc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002404:	3b01      	subs	r3, #1
 8002406:	021b      	lsls	r3, r3, #8
 8002408:	493d      	ldr	r1, [pc, #244]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d022      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002420:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002424:	d11d      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002426:	4b36      	ldr	r3, [pc, #216]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800242c:	0e1b      	lsrs	r3, r3, #24
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002434:	4b32      	ldr	r3, [pc, #200]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243a:	0f1b      	lsrs	r3, r3, #28
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	019a      	lsls	r2, r3, #6
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	041b      	lsls	r3, r3, #16
 800244e:	431a      	orrs	r2, r3
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	061b      	lsls	r3, r3, #24
 8002454:	431a      	orrs	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	071b      	lsls	r3, r3, #28
 800245a:	4929      	ldr	r1, [pc, #164]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d028      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800246e:	4b24      	ldr	r3, [pc, #144]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002474:	0e1b      	lsrs	r3, r3, #24
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800247c:	4b20      	ldr	r3, [pc, #128]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002482:	0c1b      	lsrs	r3, r3, #16
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	019a      	lsls	r2, r3, #6
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	041b      	lsls	r3, r3, #16
 8002494:	431a      	orrs	r2, r3
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	061b      	lsls	r3, r3, #24
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	071b      	lsls	r3, r3, #28
 80024a2:	4917      	ldr	r1, [pc, #92]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80024aa:	4b15      	ldr	r3, [pc, #84]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b8:	4911      	ldr	r1, [pc, #68]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80024c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a0e      	ldr	r2, [pc, #56]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024cc:	f7fe fb5c 	bl	8000b88 <HAL_GetTick>
 80024d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024d4:	f7fe fb58 	bl	8000b88 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	@ 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e007      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024e6:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024f2:	d1ef      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3720      	adds	r7, #32
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800

08002504 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e040      	b.n	8002598 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe fa54 	bl	80009d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2224      	movs	r2, #36	@ 0x24
 8002530:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0201 	bic.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fb16 	bl	8002b7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f8af 	bl	80026b4 <UART_SetConfig>
 8002556:	4603      	mov	r3, r0
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e01b      	b.n	8002598 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800256e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800257e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 fb95 	bl	8002cc0 <UART_CheckIdleState>
 8002596:	4603      	mov	r3, r0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08a      	sub	sp, #40	@ 0x28
 80025a4:	af02      	add	r7, sp, #8
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	603b      	str	r3, [r7, #0]
 80025ac:	4613      	mov	r3, r2
 80025ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025b4:	2b20      	cmp	r3, #32
 80025b6:	d177      	bne.n	80026a8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <HAL_UART_Transmit+0x24>
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e070      	b.n	80026aa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2221      	movs	r2, #33	@ 0x21
 80025d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025d6:	f7fe fad7 	bl	8000b88 <HAL_GetTick>
 80025da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	88fa      	ldrh	r2, [r7, #6]
 80025e0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	88fa      	ldrh	r2, [r7, #6]
 80025e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025f4:	d108      	bne.n	8002608 <HAL_UART_Transmit+0x68>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d104      	bne.n	8002608 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	e003      	b.n	8002610 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800260c:	2300      	movs	r3, #0
 800260e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002610:	e02f      	b.n	8002672 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2200      	movs	r2, #0
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 fbf7 	bl	8002e10 <UART_WaitOnFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d004      	beq.n	8002632 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2220      	movs	r2, #32
 800262c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e03b      	b.n	80026aa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10b      	bne.n	8002650 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002646:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	3302      	adds	r3, #2
 800264c:	61bb      	str	r3, [r7, #24]
 800264e:	e007      	b.n	8002660 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	781a      	ldrb	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3301      	adds	r3, #1
 800265e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1c9      	bne.n	8002612 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2200      	movs	r2, #0
 8002686:	2140      	movs	r1, #64	@ 0x40
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 fbc1 	bl	8002e10 <UART_WaitOnFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d004      	beq.n	800269e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e005      	b.n	80026aa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2220      	movs	r2, #32
 80026a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	e000      	b.n	80026aa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80026a8:	2302      	movs	r3, #2
  }
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3720      	adds	r7, #32
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	4ba6      	ldr	r3, [pc, #664]	@ (8002978 <UART_SetConfig+0x2c4>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	6979      	ldr	r1, [r7, #20]
 80026e8:	430b      	orrs	r3, r1
 80026ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	4313      	orrs	r3, r2
 8002710:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	430a      	orrs	r2, r1
 8002724:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a94      	ldr	r2, [pc, #592]	@ (800297c <UART_SetConfig+0x2c8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d120      	bne.n	8002772 <UART_SetConfig+0xbe>
 8002730:	4b93      	ldr	r3, [pc, #588]	@ (8002980 <UART_SetConfig+0x2cc>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b03      	cmp	r3, #3
 800273c:	d816      	bhi.n	800276c <UART_SetConfig+0xb8>
 800273e:	a201      	add	r2, pc, #4	@ (adr r2, 8002744 <UART_SetConfig+0x90>)
 8002740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002744:	08002755 	.word	0x08002755
 8002748:	08002761 	.word	0x08002761
 800274c:	0800275b 	.word	0x0800275b
 8002750:	08002767 	.word	0x08002767
 8002754:	2301      	movs	r3, #1
 8002756:	77fb      	strb	r3, [r7, #31]
 8002758:	e150      	b.n	80029fc <UART_SetConfig+0x348>
 800275a:	2302      	movs	r3, #2
 800275c:	77fb      	strb	r3, [r7, #31]
 800275e:	e14d      	b.n	80029fc <UART_SetConfig+0x348>
 8002760:	2304      	movs	r3, #4
 8002762:	77fb      	strb	r3, [r7, #31]
 8002764:	e14a      	b.n	80029fc <UART_SetConfig+0x348>
 8002766:	2308      	movs	r3, #8
 8002768:	77fb      	strb	r3, [r7, #31]
 800276a:	e147      	b.n	80029fc <UART_SetConfig+0x348>
 800276c:	2310      	movs	r3, #16
 800276e:	77fb      	strb	r3, [r7, #31]
 8002770:	e144      	b.n	80029fc <UART_SetConfig+0x348>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a83      	ldr	r2, [pc, #524]	@ (8002984 <UART_SetConfig+0x2d0>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d132      	bne.n	80027e2 <UART_SetConfig+0x12e>
 800277c:	4b80      	ldr	r3, [pc, #512]	@ (8002980 <UART_SetConfig+0x2cc>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b0c      	cmp	r3, #12
 8002788:	d828      	bhi.n	80027dc <UART_SetConfig+0x128>
 800278a:	a201      	add	r2, pc, #4	@ (adr r2, 8002790 <UART_SetConfig+0xdc>)
 800278c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002790:	080027c5 	.word	0x080027c5
 8002794:	080027dd 	.word	0x080027dd
 8002798:	080027dd 	.word	0x080027dd
 800279c:	080027dd 	.word	0x080027dd
 80027a0:	080027d1 	.word	0x080027d1
 80027a4:	080027dd 	.word	0x080027dd
 80027a8:	080027dd 	.word	0x080027dd
 80027ac:	080027dd 	.word	0x080027dd
 80027b0:	080027cb 	.word	0x080027cb
 80027b4:	080027dd 	.word	0x080027dd
 80027b8:	080027dd 	.word	0x080027dd
 80027bc:	080027dd 	.word	0x080027dd
 80027c0:	080027d7 	.word	0x080027d7
 80027c4:	2300      	movs	r3, #0
 80027c6:	77fb      	strb	r3, [r7, #31]
 80027c8:	e118      	b.n	80029fc <UART_SetConfig+0x348>
 80027ca:	2302      	movs	r3, #2
 80027cc:	77fb      	strb	r3, [r7, #31]
 80027ce:	e115      	b.n	80029fc <UART_SetConfig+0x348>
 80027d0:	2304      	movs	r3, #4
 80027d2:	77fb      	strb	r3, [r7, #31]
 80027d4:	e112      	b.n	80029fc <UART_SetConfig+0x348>
 80027d6:	2308      	movs	r3, #8
 80027d8:	77fb      	strb	r3, [r7, #31]
 80027da:	e10f      	b.n	80029fc <UART_SetConfig+0x348>
 80027dc:	2310      	movs	r3, #16
 80027de:	77fb      	strb	r3, [r7, #31]
 80027e0:	e10c      	b.n	80029fc <UART_SetConfig+0x348>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a68      	ldr	r2, [pc, #416]	@ (8002988 <UART_SetConfig+0x2d4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d120      	bne.n	800282e <UART_SetConfig+0x17a>
 80027ec:	4b64      	ldr	r3, [pc, #400]	@ (8002980 <UART_SetConfig+0x2cc>)
 80027ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80027f6:	2b30      	cmp	r3, #48	@ 0x30
 80027f8:	d013      	beq.n	8002822 <UART_SetConfig+0x16e>
 80027fa:	2b30      	cmp	r3, #48	@ 0x30
 80027fc:	d814      	bhi.n	8002828 <UART_SetConfig+0x174>
 80027fe:	2b20      	cmp	r3, #32
 8002800:	d009      	beq.n	8002816 <UART_SetConfig+0x162>
 8002802:	2b20      	cmp	r3, #32
 8002804:	d810      	bhi.n	8002828 <UART_SetConfig+0x174>
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <UART_SetConfig+0x15c>
 800280a:	2b10      	cmp	r3, #16
 800280c:	d006      	beq.n	800281c <UART_SetConfig+0x168>
 800280e:	e00b      	b.n	8002828 <UART_SetConfig+0x174>
 8002810:	2300      	movs	r3, #0
 8002812:	77fb      	strb	r3, [r7, #31]
 8002814:	e0f2      	b.n	80029fc <UART_SetConfig+0x348>
 8002816:	2302      	movs	r3, #2
 8002818:	77fb      	strb	r3, [r7, #31]
 800281a:	e0ef      	b.n	80029fc <UART_SetConfig+0x348>
 800281c:	2304      	movs	r3, #4
 800281e:	77fb      	strb	r3, [r7, #31]
 8002820:	e0ec      	b.n	80029fc <UART_SetConfig+0x348>
 8002822:	2308      	movs	r3, #8
 8002824:	77fb      	strb	r3, [r7, #31]
 8002826:	e0e9      	b.n	80029fc <UART_SetConfig+0x348>
 8002828:	2310      	movs	r3, #16
 800282a:	77fb      	strb	r3, [r7, #31]
 800282c:	e0e6      	b.n	80029fc <UART_SetConfig+0x348>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a56      	ldr	r2, [pc, #344]	@ (800298c <UART_SetConfig+0x2d8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d120      	bne.n	800287a <UART_SetConfig+0x1c6>
 8002838:	4b51      	ldr	r3, [pc, #324]	@ (8002980 <UART_SetConfig+0x2cc>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002842:	2bc0      	cmp	r3, #192	@ 0xc0
 8002844:	d013      	beq.n	800286e <UART_SetConfig+0x1ba>
 8002846:	2bc0      	cmp	r3, #192	@ 0xc0
 8002848:	d814      	bhi.n	8002874 <UART_SetConfig+0x1c0>
 800284a:	2b80      	cmp	r3, #128	@ 0x80
 800284c:	d009      	beq.n	8002862 <UART_SetConfig+0x1ae>
 800284e:	2b80      	cmp	r3, #128	@ 0x80
 8002850:	d810      	bhi.n	8002874 <UART_SetConfig+0x1c0>
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <UART_SetConfig+0x1a8>
 8002856:	2b40      	cmp	r3, #64	@ 0x40
 8002858:	d006      	beq.n	8002868 <UART_SetConfig+0x1b4>
 800285a:	e00b      	b.n	8002874 <UART_SetConfig+0x1c0>
 800285c:	2300      	movs	r3, #0
 800285e:	77fb      	strb	r3, [r7, #31]
 8002860:	e0cc      	b.n	80029fc <UART_SetConfig+0x348>
 8002862:	2302      	movs	r3, #2
 8002864:	77fb      	strb	r3, [r7, #31]
 8002866:	e0c9      	b.n	80029fc <UART_SetConfig+0x348>
 8002868:	2304      	movs	r3, #4
 800286a:	77fb      	strb	r3, [r7, #31]
 800286c:	e0c6      	b.n	80029fc <UART_SetConfig+0x348>
 800286e:	2308      	movs	r3, #8
 8002870:	77fb      	strb	r3, [r7, #31]
 8002872:	e0c3      	b.n	80029fc <UART_SetConfig+0x348>
 8002874:	2310      	movs	r3, #16
 8002876:	77fb      	strb	r3, [r7, #31]
 8002878:	e0c0      	b.n	80029fc <UART_SetConfig+0x348>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a44      	ldr	r2, [pc, #272]	@ (8002990 <UART_SetConfig+0x2dc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d125      	bne.n	80028d0 <UART_SetConfig+0x21c>
 8002884:	4b3e      	ldr	r3, [pc, #248]	@ (8002980 <UART_SetConfig+0x2cc>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800288e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002892:	d017      	beq.n	80028c4 <UART_SetConfig+0x210>
 8002894:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002898:	d817      	bhi.n	80028ca <UART_SetConfig+0x216>
 800289a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800289e:	d00b      	beq.n	80028b8 <UART_SetConfig+0x204>
 80028a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028a4:	d811      	bhi.n	80028ca <UART_SetConfig+0x216>
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <UART_SetConfig+0x1fe>
 80028aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028ae:	d006      	beq.n	80028be <UART_SetConfig+0x20a>
 80028b0:	e00b      	b.n	80028ca <UART_SetConfig+0x216>
 80028b2:	2300      	movs	r3, #0
 80028b4:	77fb      	strb	r3, [r7, #31]
 80028b6:	e0a1      	b.n	80029fc <UART_SetConfig+0x348>
 80028b8:	2302      	movs	r3, #2
 80028ba:	77fb      	strb	r3, [r7, #31]
 80028bc:	e09e      	b.n	80029fc <UART_SetConfig+0x348>
 80028be:	2304      	movs	r3, #4
 80028c0:	77fb      	strb	r3, [r7, #31]
 80028c2:	e09b      	b.n	80029fc <UART_SetConfig+0x348>
 80028c4:	2308      	movs	r3, #8
 80028c6:	77fb      	strb	r3, [r7, #31]
 80028c8:	e098      	b.n	80029fc <UART_SetConfig+0x348>
 80028ca:	2310      	movs	r3, #16
 80028cc:	77fb      	strb	r3, [r7, #31]
 80028ce:	e095      	b.n	80029fc <UART_SetConfig+0x348>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a2f      	ldr	r2, [pc, #188]	@ (8002994 <UART_SetConfig+0x2e0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d125      	bne.n	8002926 <UART_SetConfig+0x272>
 80028da:	4b29      	ldr	r3, [pc, #164]	@ (8002980 <UART_SetConfig+0x2cc>)
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80028e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80028e8:	d017      	beq.n	800291a <UART_SetConfig+0x266>
 80028ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80028ee:	d817      	bhi.n	8002920 <UART_SetConfig+0x26c>
 80028f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028f4:	d00b      	beq.n	800290e <UART_SetConfig+0x25a>
 80028f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028fa:	d811      	bhi.n	8002920 <UART_SetConfig+0x26c>
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <UART_SetConfig+0x254>
 8002900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002904:	d006      	beq.n	8002914 <UART_SetConfig+0x260>
 8002906:	e00b      	b.n	8002920 <UART_SetConfig+0x26c>
 8002908:	2301      	movs	r3, #1
 800290a:	77fb      	strb	r3, [r7, #31]
 800290c:	e076      	b.n	80029fc <UART_SetConfig+0x348>
 800290e:	2302      	movs	r3, #2
 8002910:	77fb      	strb	r3, [r7, #31]
 8002912:	e073      	b.n	80029fc <UART_SetConfig+0x348>
 8002914:	2304      	movs	r3, #4
 8002916:	77fb      	strb	r3, [r7, #31]
 8002918:	e070      	b.n	80029fc <UART_SetConfig+0x348>
 800291a:	2308      	movs	r3, #8
 800291c:	77fb      	strb	r3, [r7, #31]
 800291e:	e06d      	b.n	80029fc <UART_SetConfig+0x348>
 8002920:	2310      	movs	r3, #16
 8002922:	77fb      	strb	r3, [r7, #31]
 8002924:	e06a      	b.n	80029fc <UART_SetConfig+0x348>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a1b      	ldr	r2, [pc, #108]	@ (8002998 <UART_SetConfig+0x2e4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d138      	bne.n	80029a2 <UART_SetConfig+0x2ee>
 8002930:	4b13      	ldr	r3, [pc, #76]	@ (8002980 <UART_SetConfig+0x2cc>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002936:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800293a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800293e:	d017      	beq.n	8002970 <UART_SetConfig+0x2bc>
 8002940:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002944:	d82a      	bhi.n	800299c <UART_SetConfig+0x2e8>
 8002946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800294a:	d00b      	beq.n	8002964 <UART_SetConfig+0x2b0>
 800294c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002950:	d824      	bhi.n	800299c <UART_SetConfig+0x2e8>
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <UART_SetConfig+0x2aa>
 8002956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800295a:	d006      	beq.n	800296a <UART_SetConfig+0x2b6>
 800295c:	e01e      	b.n	800299c <UART_SetConfig+0x2e8>
 800295e:	2300      	movs	r3, #0
 8002960:	77fb      	strb	r3, [r7, #31]
 8002962:	e04b      	b.n	80029fc <UART_SetConfig+0x348>
 8002964:	2302      	movs	r3, #2
 8002966:	77fb      	strb	r3, [r7, #31]
 8002968:	e048      	b.n	80029fc <UART_SetConfig+0x348>
 800296a:	2304      	movs	r3, #4
 800296c:	77fb      	strb	r3, [r7, #31]
 800296e:	e045      	b.n	80029fc <UART_SetConfig+0x348>
 8002970:	2308      	movs	r3, #8
 8002972:	77fb      	strb	r3, [r7, #31]
 8002974:	e042      	b.n	80029fc <UART_SetConfig+0x348>
 8002976:	bf00      	nop
 8002978:	efff69f3 	.word	0xefff69f3
 800297c:	40011000 	.word	0x40011000
 8002980:	40023800 	.word	0x40023800
 8002984:	40004400 	.word	0x40004400
 8002988:	40004800 	.word	0x40004800
 800298c:	40004c00 	.word	0x40004c00
 8002990:	40005000 	.word	0x40005000
 8002994:	40011400 	.word	0x40011400
 8002998:	40007800 	.word	0x40007800
 800299c:	2310      	movs	r3, #16
 800299e:	77fb      	strb	r3, [r7, #31]
 80029a0:	e02c      	b.n	80029fc <UART_SetConfig+0x348>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a72      	ldr	r2, [pc, #456]	@ (8002b70 <UART_SetConfig+0x4bc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d125      	bne.n	80029f8 <UART_SetConfig+0x344>
 80029ac:	4b71      	ldr	r3, [pc, #452]	@ (8002b74 <UART_SetConfig+0x4c0>)
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80029b6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80029ba:	d017      	beq.n	80029ec <UART_SetConfig+0x338>
 80029bc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80029c0:	d817      	bhi.n	80029f2 <UART_SetConfig+0x33e>
 80029c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029c6:	d00b      	beq.n	80029e0 <UART_SetConfig+0x32c>
 80029c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029cc:	d811      	bhi.n	80029f2 <UART_SetConfig+0x33e>
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <UART_SetConfig+0x326>
 80029d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029d6:	d006      	beq.n	80029e6 <UART_SetConfig+0x332>
 80029d8:	e00b      	b.n	80029f2 <UART_SetConfig+0x33e>
 80029da:	2300      	movs	r3, #0
 80029dc:	77fb      	strb	r3, [r7, #31]
 80029de:	e00d      	b.n	80029fc <UART_SetConfig+0x348>
 80029e0:	2302      	movs	r3, #2
 80029e2:	77fb      	strb	r3, [r7, #31]
 80029e4:	e00a      	b.n	80029fc <UART_SetConfig+0x348>
 80029e6:	2304      	movs	r3, #4
 80029e8:	77fb      	strb	r3, [r7, #31]
 80029ea:	e007      	b.n	80029fc <UART_SetConfig+0x348>
 80029ec:	2308      	movs	r3, #8
 80029ee:	77fb      	strb	r3, [r7, #31]
 80029f0:	e004      	b.n	80029fc <UART_SetConfig+0x348>
 80029f2:	2310      	movs	r3, #16
 80029f4:	77fb      	strb	r3, [r7, #31]
 80029f6:	e001      	b.n	80029fc <UART_SetConfig+0x348>
 80029f8:	2310      	movs	r3, #16
 80029fa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a04:	d15b      	bne.n	8002abe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002a06:	7ffb      	ldrb	r3, [r7, #31]
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d828      	bhi.n	8002a5e <UART_SetConfig+0x3aa>
 8002a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a14 <UART_SetConfig+0x360>)
 8002a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a12:	bf00      	nop
 8002a14:	08002a39 	.word	0x08002a39
 8002a18:	08002a41 	.word	0x08002a41
 8002a1c:	08002a49 	.word	0x08002a49
 8002a20:	08002a5f 	.word	0x08002a5f
 8002a24:	08002a4f 	.word	0x08002a4f
 8002a28:	08002a5f 	.word	0x08002a5f
 8002a2c:	08002a5f 	.word	0x08002a5f
 8002a30:	08002a5f 	.word	0x08002a5f
 8002a34:	08002a57 	.word	0x08002a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a38:	f7ff f914 	bl	8001c64 <HAL_RCC_GetPCLK1Freq>
 8002a3c:	61b8      	str	r0, [r7, #24]
        break;
 8002a3e:	e013      	b.n	8002a68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a40:	f7ff f924 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 8002a44:	61b8      	str	r0, [r7, #24]
        break;
 8002a46:	e00f      	b.n	8002a68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a48:	4b4b      	ldr	r3, [pc, #300]	@ (8002b78 <UART_SetConfig+0x4c4>)
 8002a4a:	61bb      	str	r3, [r7, #24]
        break;
 8002a4c:	e00c      	b.n	8002a68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a4e:	f7ff f837 	bl	8001ac0 <HAL_RCC_GetSysClockFreq>
 8002a52:	61b8      	str	r0, [r7, #24]
        break;
 8002a54:	e008      	b.n	8002a68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a5a:	61bb      	str	r3, [r7, #24]
        break;
 8002a5c:	e004      	b.n	8002a68 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	77bb      	strb	r3, [r7, #30]
        break;
 8002a66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d074      	beq.n	8002b58 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	005a      	lsls	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	085b      	lsrs	r3, r3, #1
 8002a78:	441a      	add	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	2b0f      	cmp	r3, #15
 8002a88:	d916      	bls.n	8002ab8 <UART_SetConfig+0x404>
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a90:	d212      	bcs.n	8002ab8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	f023 030f 	bic.w	r3, r3, #15
 8002a9a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	085b      	lsrs	r3, r3, #1
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	89fb      	ldrh	r3, [r7, #14]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	89fa      	ldrh	r2, [r7, #14]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	e04f      	b.n	8002b58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	77bb      	strb	r3, [r7, #30]
 8002abc:	e04c      	b.n	8002b58 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002abe:	7ffb      	ldrb	r3, [r7, #31]
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d828      	bhi.n	8002b16 <UART_SetConfig+0x462>
 8002ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8002acc <UART_SetConfig+0x418>)
 8002ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aca:	bf00      	nop
 8002acc:	08002af1 	.word	0x08002af1
 8002ad0:	08002af9 	.word	0x08002af9
 8002ad4:	08002b01 	.word	0x08002b01
 8002ad8:	08002b17 	.word	0x08002b17
 8002adc:	08002b07 	.word	0x08002b07
 8002ae0:	08002b17 	.word	0x08002b17
 8002ae4:	08002b17 	.word	0x08002b17
 8002ae8:	08002b17 	.word	0x08002b17
 8002aec:	08002b0f 	.word	0x08002b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002af0:	f7ff f8b8 	bl	8001c64 <HAL_RCC_GetPCLK1Freq>
 8002af4:	61b8      	str	r0, [r7, #24]
        break;
 8002af6:	e013      	b.n	8002b20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002af8:	f7ff f8c8 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 8002afc:	61b8      	str	r0, [r7, #24]
        break;
 8002afe:	e00f      	b.n	8002b20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b00:	4b1d      	ldr	r3, [pc, #116]	@ (8002b78 <UART_SetConfig+0x4c4>)
 8002b02:	61bb      	str	r3, [r7, #24]
        break;
 8002b04:	e00c      	b.n	8002b20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b06:	f7fe ffdb 	bl	8001ac0 <HAL_RCC_GetSysClockFreq>
 8002b0a:	61b8      	str	r0, [r7, #24]
        break;
 8002b0c:	e008      	b.n	8002b20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b12:	61bb      	str	r3, [r7, #24]
        break;
 8002b14:	e004      	b.n	8002b20 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	77bb      	strb	r3, [r7, #30]
        break;
 8002b1e:	bf00      	nop
    }

    if (pclk != 0U)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d018      	beq.n	8002b58 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	085a      	lsrs	r2, r3, #1
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	441a      	add	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	2b0f      	cmp	r3, #15
 8002b3e:	d909      	bls.n	8002b54 <UART_SetConfig+0x4a0>
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b46:	d205      	bcs.n	8002b54 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	e001      	b.n	8002b58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002b64:	7fbb      	ldrb	r3, [r7, #30]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3720      	adds	r7, #32
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40007c00 	.word	0x40007c00
 8002b74:	40023800 	.word	0x40023800
 8002b78:	00f42400 	.word	0x00f42400

08002b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00a      	beq.n	8002ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01a      	beq.n	8002c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c7a:	d10a      	bne.n	8002c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	605a      	str	r2, [r3, #4]
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b098      	sub	sp, #96	@ 0x60
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cd0:	f7fd ff5a 	bl	8000b88 <HAL_GetTick>
 8002cd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d12e      	bne.n	8002d42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ce4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cec:	2200      	movs	r2, #0
 8002cee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f88c 	bl	8002e10 <UART_WaitOnFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d021      	beq.n	8002d42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d06:	e853 3f00 	ldrex	r3, [r3]
 8002d0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d12:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d1e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d24:	e841 2300 	strex	r3, r2, [r1]
 8002d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e6      	bne.n	8002cfe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e062      	b.n	8002e08 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d149      	bne.n	8002de4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f856 	bl	8002e10 <UART_WaitOnFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d03c      	beq.n	8002de4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	e853 3f00 	ldrex	r3, [r3]
 8002d76:	623b      	str	r3, [r7, #32]
   return(result);
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d88:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d90:	e841 2300 	strex	r3, r2, [r1]
 8002d94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e6      	bne.n	8002d6a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3308      	adds	r3, #8
 8002da2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	e853 3f00 	ldrex	r3, [r3]
 8002daa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0301 	bic.w	r3, r3, #1
 8002db2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3308      	adds	r3, #8
 8002dba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002dbc:	61fa      	str	r2, [r7, #28]
 8002dbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc0:	69b9      	ldr	r1, [r7, #24]
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	e841 2300 	strex	r3, r2, [r1]
 8002dc8:	617b      	str	r3, [r7, #20]
   return(result);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1e5      	bne.n	8002d9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e011      	b.n	8002e08 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3758      	adds	r7, #88	@ 0x58
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e20:	e04f      	b.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e28:	d04b      	beq.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2a:	f7fd fead 	bl	8000b88 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d302      	bcc.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e04e      	b.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d037      	beq.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b80      	cmp	r3, #128	@ 0x80
 8002e56:	d034      	beq.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b40      	cmp	r3, #64	@ 0x40
 8002e5c:	d031      	beq.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d110      	bne.n	8002e8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2208      	movs	r2, #8
 8002e72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f838 	bl	8002eea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2208      	movs	r2, #8
 8002e7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e029      	b.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e9c:	d111      	bne.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ea6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 f81e 	bl	8002eea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e00f      	b.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	69da      	ldr	r2, [r3, #28]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	bf0c      	ite	eq
 8002ed2:	2301      	moveq	r3, #1
 8002ed4:	2300      	movne	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d0a0      	beq.n	8002e22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b095      	sub	sp, #84	@ 0x54
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002efa:	e853 3f00 	ldrex	r3, [r3]
 8002efe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f10:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f18:	e841 2300 	strex	r3, r2, [r1]
 8002f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1e6      	bne.n	8002ef2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3308      	adds	r3, #8
 8002f2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	e853 3f00 	ldrex	r3, [r3]
 8002f32:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f023 0301 	bic.w	r3, r3, #1
 8002f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	3308      	adds	r3, #8
 8002f42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f4c:	e841 2300 	strex	r3, r2, [r1]
 8002f50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e5      	bne.n	8002f24 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d118      	bne.n	8002f92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	e853 3f00 	ldrex	r3, [r3]
 8002f6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f023 0310 	bic.w	r3, r3, #16
 8002f74:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f7e:	61bb      	str	r3, [r7, #24]
 8002f80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f82:	6979      	ldr	r1, [r7, #20]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	e841 2300 	strex	r3, r2, [r1]
 8002f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1e6      	bne.n	8002f60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002fa6:	bf00      	nop
 8002fa8:	3754      	adds	r7, #84	@ 0x54
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <memset>:
 8002fb2:	4402      	add	r2, r0
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d100      	bne.n	8002fbc <memset+0xa>
 8002fba:	4770      	bx	lr
 8002fbc:	f803 1b01 	strb.w	r1, [r3], #1
 8002fc0:	e7f9      	b.n	8002fb6 <memset+0x4>
	...

08002fc4 <__libc_init_array>:
 8002fc4:	b570      	push	{r4, r5, r6, lr}
 8002fc6:	4d0d      	ldr	r5, [pc, #52]	@ (8002ffc <__libc_init_array+0x38>)
 8002fc8:	4c0d      	ldr	r4, [pc, #52]	@ (8003000 <__libc_init_array+0x3c>)
 8002fca:	1b64      	subs	r4, r4, r5
 8002fcc:	10a4      	asrs	r4, r4, #2
 8002fce:	2600      	movs	r6, #0
 8002fd0:	42a6      	cmp	r6, r4
 8002fd2:	d109      	bne.n	8002fe8 <__libc_init_array+0x24>
 8002fd4:	4d0b      	ldr	r5, [pc, #44]	@ (8003004 <__libc_init_array+0x40>)
 8002fd6:	4c0c      	ldr	r4, [pc, #48]	@ (8003008 <__libc_init_array+0x44>)
 8002fd8:	f000 f818 	bl	800300c <_init>
 8002fdc:	1b64      	subs	r4, r4, r5
 8002fde:	10a4      	asrs	r4, r4, #2
 8002fe0:	2600      	movs	r6, #0
 8002fe2:	42a6      	cmp	r6, r4
 8002fe4:	d105      	bne.n	8002ff2 <__libc_init_array+0x2e>
 8002fe6:	bd70      	pop	{r4, r5, r6, pc}
 8002fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fec:	4798      	blx	r3
 8002fee:	3601      	adds	r6, #1
 8002ff0:	e7ee      	b.n	8002fd0 <__libc_init_array+0xc>
 8002ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff6:	4798      	blx	r3
 8002ff8:	3601      	adds	r6, #1
 8002ffa:	e7f2      	b.n	8002fe2 <__libc_init_array+0x1e>
 8002ffc:	0800304c 	.word	0x0800304c
 8003000:	0800304c 	.word	0x0800304c
 8003004:	0800304c 	.word	0x0800304c
 8003008:	08003050 	.word	0x08003050

0800300c <_init>:
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300e:	bf00      	nop
 8003010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003012:	bc08      	pop	{r3}
 8003014:	469e      	mov	lr, r3
 8003016:	4770      	bx	lr

08003018 <_fini>:
 8003018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301a:	bf00      	nop
 800301c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301e:	bc08      	pop	{r3}
 8003020:	469e      	mov	lr, r3
 8003022:	4770      	bx	lr
