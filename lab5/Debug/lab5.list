
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f00  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004100  08004100  00005100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004154  08004154  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004154  08004154  00005154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800415c  0800415c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800415c  0800415c  0000515c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004160  08004160  00005160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004164  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000005c  080041c0  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  080041c0  0000629c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b58f  00000000  00000000  0000608a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d92  00000000  00000000  00011619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  000133b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000693  00000000  00000000  00013c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bbd  00000000  00000000  000142f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d017  00000000  00000000  0003beb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6527  00000000  00000000  00048ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f3ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002694  00000000  00000000  0013f434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00141ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	080040e8 	.word	0x080040e8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	080040e8 	.word	0x080040e8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005f2:	4b21      	ldr	r3, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x98>)
 80005f4:	4a21      	ldr	r2, [pc, #132]	@ (800067c <MX_ADC1_Init+0x9c>)
 80005f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000678 <MX_ADC1_Init+0x98>)
 80005fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000600:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000606:	4b1c      	ldr	r3, [pc, #112]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800060c:	4b1a      	ldr	r3, [pc, #104]	@ (8000678 <MX_ADC1_Init+0x98>)
 800060e:	2201      	movs	r2, #1
 8000610:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000612:	4b19      	ldr	r3, [pc, #100]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061a:	4b17      	ldr	r3, [pc, #92]	@ (8000678 <MX_ADC1_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000620:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000622:	4a17      	ldr	r2, [pc, #92]	@ (8000680 <MX_ADC1_Init+0xa0>)
 8000624:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000626:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800062c:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <MX_ADC1_Init+0x98>)
 800062e:	2201      	movs	r2, #1
 8000630:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000632:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800063a:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000640:	480d      	ldr	r0, [pc, #52]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000642:	f000 fb49 	bl	8000cd8 <HAL_ADC_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800064c:	f000 f968 	bl	8000920 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000650:	230a      	movs	r3, #10
 8000652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000654:	2301      	movs	r3, #1
 8000656:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	4619      	mov	r1, r3
 8000660:	4805      	ldr	r0, [pc, #20]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000662:	f000 fce3 	bl	800102c <HAL_ADC_ConfigChannel>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800066c:	f000 f958 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000078 	.word	0x20000078
 800067c:	40012000 	.word	0x40012000
 8000680:	0f000001 	.word	0x0f000001

08000684 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	@ 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a15      	ldr	r2, [pc, #84]	@ (80006f8 <HAL_ADC_MspInit+0x74>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d123      	bne.n	80006ee <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a6:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006aa:	4a14      	ldr	r2, [pc, #80]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80006b2:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a0e      	ldr	r2, [pc, #56]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d6:	2301      	movs	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006da:	2303      	movs	r3, #3
 80006dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4619      	mov	r1, r3
 80006e8:	4805      	ldr	r0, [pc, #20]	@ (8000700 <HAL_ADC_MspInit+0x7c>)
 80006ea:	f001 f84d 	bl	8001788 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	@ 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40012000 	.word	0x40012000
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020800 	.word	0x40020800

08000704 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <MX_GPIO_Init+0x44>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a0e      	ldr	r2, [pc, #56]	@ (8000748 <MX_GPIO_Init+0x44>)
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <MX_GPIO_Init+0x44>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0304 	and.w	r3, r3, #4
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000722:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <MX_GPIO_Init+0x44>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a08      	ldr	r2, [pc, #32]	@ (8000748 <MX_GPIO_Init+0x44>)
 8000728:	f043 0308 	orr.w	r3, r3, #8
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_GPIO_Init+0x44>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0308 	and.w	r3, r3, #8
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]

}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800

0800074c <displayHEX>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint32_t adc_val = 0;  // Variable to store ADC value

void displayHEX(uint32_t value) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
    char hexString[11];  // Buffer to hold "0x" + 8 hex digits + null terminator

    // Format the integer as a hexadecimal string
    sprintf(hexString, "0x%08X", value);
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	490b      	ldr	r1, [pc, #44]	@ (8000788 <displayHEX+0x3c>)
 800075c:	4618      	mov	r0, r3
 800075e:	f003 f823 	bl	80037a8 <siprintf>

    // Transmit the string over UART3
    HAL_UART_Transmit(&huart3, (uint8_t*)hexString, strlen(hexString), HAL_MAX_DELAY);
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fd6a 	bl	8000240 <strlen>
 800076c:	4603      	mov	r3, r0
 800076e:	b29a      	uxth	r2, r3
 8000770:	f107 010c 	add.w	r1, r7, #12
 8000774:	f04f 33ff 	mov.w	r3, #4294967295
 8000778:	4804      	ldr	r0, [pc, #16]	@ (800078c <displayHEX+0x40>)
 800077a:	f002 fb0b 	bl	8002d94 <HAL_UART_Transmit>
}
 800077e:	bf00      	nop
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	08004100 	.word	0x08004100
 800078c:	200000c8 	.word	0x200000c8

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000794:	f000 f898 	bl	80008c8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000798:	f000 fa1d 	bl	8000bd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079c:	f000 f826 	bl	80007ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a0:	f7ff ffb0 	bl	8000704 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007a4:	f7ff ff1c 	bl	80005e0 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80007a8:	f000 f95c 	bl	8000a64 <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1); // Start the ADC
 80007ac:	480d      	ldr	r0, [pc, #52]	@ (80007e4 <main+0x54>)
 80007ae:	f000 fad7 	bl	8000d60 <HAL_ADC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    while (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 80007b2:	e00e      	b.n	80007d2 <main+0x42>
        adc_val = HAL_ADC_GetValue(&hadc1);
 80007b4:	480b      	ldr	r0, [pc, #44]	@ (80007e4 <main+0x54>)
 80007b6:	f000 fc2c 	bl	8001012 <HAL_ADC_GetValue>
 80007ba:	4603      	mov	r3, r0
 80007bc:	4a0a      	ldr	r2, [pc, #40]	@ (80007e8 <main+0x58>)
 80007be:	6013      	str	r3, [r2, #0]
        displayHEX(adc_val);
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <main+0x58>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ffc1 	bl	800074c <displayHEX>
        HAL_Delay(1000);  // Wait for 1 second
 80007ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007ce:	f000 fa5f 	bl	8000c90 <HAL_Delay>
    while (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 80007d2:	2164      	movs	r1, #100	@ 0x64
 80007d4:	4803      	ldr	r0, [pc, #12]	@ (80007e4 <main+0x54>)
 80007d6:	f000 fb91 	bl	8000efc <HAL_ADC_PollForConversion>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d0e9      	beq.n	80007b4 <main+0x24>
 80007e0:	e7f7      	b.n	80007d2 <main+0x42>
 80007e2:	bf00      	nop
 80007e4:	20000078 	.word	0x20000078
 80007e8:	200000c0 	.word	0x200000c0

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b094      	sub	sp, #80	@ 0x50
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	2234      	movs	r2, #52	@ 0x34
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f002 fff4 	bl	80037e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	f107 0308 	add.w	r3, r7, #8
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000810:	4b2b      	ldr	r3, [pc, #172]	@ (80008c0 <SystemClock_Config+0xd4>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000814:	4a2a      	ldr	r2, [pc, #168]	@ (80008c0 <SystemClock_Config+0xd4>)
 8000816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800081a:	6413      	str	r3, [r2, #64]	@ 0x40
 800081c:	4b28      	ldr	r3, [pc, #160]	@ (80008c0 <SystemClock_Config+0xd4>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000828:	4b26      	ldr	r3, [pc, #152]	@ (80008c4 <SystemClock_Config+0xd8>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a25      	ldr	r2, [pc, #148]	@ (80008c4 <SystemClock_Config+0xd8>)
 800082e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000832:	6013      	str	r3, [r2, #0]
 8000834:	4b23      	ldr	r3, [pc, #140]	@ (80008c4 <SystemClock_Config+0xd8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000840:	2302      	movs	r3, #2
 8000842:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000844:	2301      	movs	r3, #1
 8000846:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000848:	2310      	movs	r3, #16
 800084a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084c:	2302      	movs	r3, #2
 800084e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000850:	2300      	movs	r3, #0
 8000852:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000854:	2308      	movs	r3, #8
 8000856:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000858:	23d8      	movs	r3, #216	@ 0xd8
 800085a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800085c:	2302      	movs	r3, #2
 800085e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000860:	2302      	movs	r3, #2
 8000862:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000864:	2302      	movs	r3, #2
 8000866:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4618      	mov	r0, r3
 800086e:	f001 f987 	bl	8001b80 <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000878:	f000 f852 	bl	8000920 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800087c:	f001 f930 	bl	8001ae0 <HAL_PWREx_EnableOverDrive>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000886:	f000 f84b 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088a:	230f      	movs	r3, #15
 800088c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088e:	2302      	movs	r3, #2
 8000890:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000896:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800089a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800089c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008a2:	f107 0308 	add.w	r3, r7, #8
 80008a6:	2107      	movs	r1, #7
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fc17 	bl	80020dc <HAL_RCC_ClockConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80008b4:	f000 f834 	bl	8000920 <Error_Handler>
  }
}
 80008b8:	bf00      	nop
 80008ba:	3750      	adds	r7, #80	@ 0x50
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40007000 	.word	0x40007000

080008c8 <MPU_Config>:

/* MPU Configuration */

void MPU_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008ce:	463b      	mov	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008da:	f000 fedd 	bl	8001698 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008de:	2301      	movs	r3, #1
 80008e0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008ea:	231f      	movs	r3, #31
 80008ec:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008ee:	2387      	movs	r3, #135	@ 0x87
 80008f0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008f6:	2300      	movs	r3, #0
 80008f8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008fa:	2301      	movs	r3, #1
 80008fc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008fe:	2301      	movs	r3, #1
 8000900:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800090a:	463b      	mov	r3, r7
 800090c:	4618      	mov	r0, r3
 800090e:	f000 fefb 	bl	8001708 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000912:	2004      	movs	r0, #4
 8000914:	f000 fed8 	bl	80016c8 <HAL_MPU_Enable>
}
 8000918:	bf00      	nop
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <Error_Handler+0x8>

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <HAL_MspInit+0x44>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000936:	4a0e      	ldr	r2, [pc, #56]	@ (8000970 <HAL_MspInit+0x44>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	@ 0x40
 800093e:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <HAL_MspInit+0x44>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <HAL_MspInit+0x44>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094e:	4a08      	ldr	r2, [pc, #32]	@ (8000970 <HAL_MspInit+0x44>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000954:	6453      	str	r3, [r2, #68]	@ 0x44
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_MspInit+0x44>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <NMI_Handler+0x4>

0800097c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <MemManage_Handler+0x4>

0800098c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <UsageFault_Handler+0x4>

0800099c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ca:	f000 f941 	bl	8000c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009dc:	4a14      	ldr	r2, [pc, #80]	@ (8000a30 <_sbrk+0x5c>)
 80009de:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <_sbrk+0x60>)
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e8:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <_sbrk+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <_sbrk+0x64>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	@ (8000a3c <_sbrk+0x68>)
 80009f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d207      	bcs.n	8000a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a04:	f002 fef8 	bl	80037f8 <__errno>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a12:	e009      	b.n	8000a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a14:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <_sbrk+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	4a05      	ldr	r2, [pc, #20]	@ (8000a38 <_sbrk+0x64>)
 8000a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a26:	68fb      	ldr	r3, [r7, #12]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20080000 	.word	0x20080000
 8000a34:	00000400 	.word	0x00000400
 8000a38:	200000c4 	.word	0x200000c4
 8000a3c:	200002a0 	.word	0x200002a0

08000a40 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <SystemInit+0x20>)
 8000a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a4a:	4a05      	ldr	r2, [pc, #20]	@ (8000a60 <SystemInit+0x20>)
 8000a4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a68:	4b14      	ldr	r3, [pc, #80]	@ (8000abc <MX_USART3_UART_Init+0x58>)
 8000a6a:	4a15      	ldr	r2, [pc, #84]	@ (8000ac0 <MX_USART3_UART_Init+0x5c>)
 8000a6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <MX_USART3_UART_Init+0x58>)
 8000a70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <MX_USART3_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <MX_USART3_UART_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <MX_USART3_UART_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <MX_USART3_UART_Init+0x58>)
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <MX_USART3_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a94:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <MX_USART3_UART_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <MX_USART3_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <MX_USART3_UART_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	@ (8000abc <MX_USART3_UART_Init+0x58>)
 8000aa8:	f002 f926 	bl	8002cf8 <HAL_UART_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ab2:	f7ff ff35 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200000c8 	.word	0x200000c8
 8000ac0:	40004800 	.word	0x40004800

08000ac4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b0ae      	sub	sp, #184	@ 0xb8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	2290      	movs	r2, #144	@ 0x90
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f002 fe7f 	bl	80037e8 <memset>
  if(uartHandle->Instance==USART3)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a22      	ldr	r2, [pc, #136]	@ (8000b78 <HAL_UART_MspInit+0xb4>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d13c      	bne.n	8000b6e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000af4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000af8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4618      	mov	r0, r3
 8000b04:	f001 fcd0 	bl	80024a8 <HAL_RCCEx_PeriphCLKConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b0e:	f7ff ff07 	bl	8000920 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b12:	4b1a      	ldr	r3, [pc, #104]	@ (8000b7c <HAL_UART_MspInit+0xb8>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <HAL_UART_MspInit+0xb8>)
 8000b18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1e:	4b17      	ldr	r3, [pc, #92]	@ (8000b7c <HAL_UART_MspInit+0xb8>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2a:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <HAL_UART_MspInit+0xb8>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a13      	ldr	r2, [pc, #76]	@ (8000b7c <HAL_UART_MspInit+0xb8>)
 8000b30:	f043 0308 	orr.w	r3, r3, #8
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <HAL_UART_MspInit+0xb8>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b42:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b5c:	2307      	movs	r3, #7
 8000b5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b62:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	@ (8000b80 <HAL_UART_MspInit+0xbc>)
 8000b6a:	f000 fe0d 	bl	8001788 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b6e:	bf00      	nop
 8000b70:	37b8      	adds	r7, #184	@ 0xb8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40004800 	.word	0x40004800
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020c00 	.word	0x40020c00

08000b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b88:	f7ff ff5a 	bl	8000a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b8c:	480c      	ldr	r0, [pc, #48]	@ (8000bc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b8e:	490d      	ldr	r1, [pc, #52]	@ (8000bc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b90:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ba4:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bb2:	f002 fe27 	bl	8003804 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bb6:	f7ff fdeb 	bl	8000790 <main>
  bx  lr    
 8000bba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bbc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bc8:	08004164 	.word	0x08004164
  ldr r2, =_sbss
 8000bcc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bd0:	2000029c 	.word	0x2000029c

08000bd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC_IRQHandler>

08000bd6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bda:	2003      	movs	r0, #3
 8000bdc:	f000 fd28 	bl	8001630 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be0:	200f      	movs	r0, #15
 8000be2:	f000 f805 	bl	8000bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be6:	f7ff fea1 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf8:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <HAL_InitTick+0x54>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <HAL_InitTick+0x58>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4619      	mov	r1, r3
 8000c02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 fd35 	bl	800167e <HAL_SYSTICK_Config>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e00e      	b.n	8000c3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b0f      	cmp	r3, #15
 8000c22:	d80a      	bhi.n	8000c3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c24:	2200      	movs	r2, #0
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2c:	f000 fd0b 	bl	8001646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c30:	4a06      	ldr	r2, [pc, #24]	@ (8000c4c <HAL_InitTick+0x5c>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	e000      	b.n	8000c3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	20000004 	.word	0x20000004

08000c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_IncTick+0x20>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <HAL_IncTick+0x24>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	4a04      	ldr	r2, [pc, #16]	@ (8000c74 <HAL_IncTick+0x24>)
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000008 	.word	0x20000008
 8000c74:	20000150 	.word	0x20000150

08000c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c7c:	4b03      	ldr	r3, [pc, #12]	@ (8000c8c <HAL_GetTick+0x14>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000150 	.word	0x20000150

08000c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c98:	f7ff ffee 	bl	8000c78 <HAL_GetTick>
 8000c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca8:	d005      	beq.n	8000cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000caa:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <HAL_Delay+0x44>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cb6:	bf00      	nop
 8000cb8:	f7ff ffde 	bl	8000c78 <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d8f7      	bhi.n	8000cb8 <HAL_Delay+0x28>
  {
  }
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000008 	.word	0x20000008

08000cd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e031      	b.n	8000d52 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d109      	bne.n	8000d0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff fcc4 	bl	8000684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	f003 0310 	and.w	r3, r3, #16
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d116      	bne.n	8000d44 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d1a:	4b10      	ldr	r3, [pc, #64]	@ (8000d5c <HAL_ADC_Init+0x84>)
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	f043 0202 	orr.w	r2, r3, #2
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f000 fad6 	bl	80012d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	f023 0303 	bic.w	r3, r3, #3
 8000d3a:	f043 0201 	orr.w	r2, r3, #1
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d42:	e001      	b.n	8000d48 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	ffffeefd 	.word	0xffffeefd

08000d60 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d101      	bne.n	8000d7a <HAL_ADC_Start+0x1a>
 8000d76:	2302      	movs	r3, #2
 8000d78:	e0ad      	b.n	8000ed6 <HAL_ADC_Start+0x176>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d018      	beq.n	8000dc2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f042 0201 	orr.w	r2, r2, #1
 8000d9e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000da0:	4b50      	ldr	r3, [pc, #320]	@ (8000ee4 <HAL_ADC_Start+0x184>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a50      	ldr	r2, [pc, #320]	@ (8000ee8 <HAL_ADC_Start+0x188>)
 8000da6:	fba2 2303 	umull	r2, r3, r2, r3
 8000daa:	0c9a      	lsrs	r2, r3, #18
 8000dac:	4613      	mov	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000db4:	e002      	b.n	8000dbc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f9      	bne.n	8000db6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d175      	bne.n	8000ebc <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dd4:	4b45      	ldr	r3, [pc, #276]	@ (8000eec <HAL_ADC_Start+0x18c>)
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d007      	beq.n	8000dfe <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000df6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e0a:	d106      	bne.n	8000e1a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e10:	f023 0206 	bic.w	r2, r3, #6
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	645a      	str	r2, [r3, #68]	@ 0x44
 8000e18:	e002      	b.n	8000e20 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000e30:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000e32:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef0 <HAL_ADC_Start+0x190>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 031f 	and.w	r3, r3, #31
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10f      	bne.n	8000e5e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d143      	bne.n	8000ed4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	e03a      	b.n	8000ed4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a24      	ldr	r2, [pc, #144]	@ (8000ef4 <HAL_ADC_Start+0x194>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d10e      	bne.n	8000e86 <HAL_ADC_Start+0x126>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d107      	bne.n	8000e86 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000e84:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8000e86:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <HAL_ADC_Start+0x190>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0310 	and.w	r3, r3, #16
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d120      	bne.n	8000ed4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a18      	ldr	r2, [pc, #96]	@ (8000ef8 <HAL_ADC_Start+0x198>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d11b      	bne.n	8000ed4 <HAL_ADC_Start+0x174>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d114      	bne.n	8000ed4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	e00b      	b.n	8000ed4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec0:	f043 0210 	orr.w	r2, r3, #16
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ecc:	f043 0201 	orr.w	r2, r3, #1
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	431bde83 	.word	0x431bde83
 8000eec:	fffff8fe 	.word	0xfffff8fe
 8000ef0:	40012300 	.word	0x40012300
 8000ef4:	40012000 	.word	0x40012000
 8000ef8:	40012200 	.word	0x40012200

08000efc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f18:	d113      	bne.n	8000f42 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f28:	d10b      	bne.n	8000f42 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	f043 0220 	orr.w	r2, r3, #32
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e063      	b.n	800100a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000f42:	f7ff fe99 	bl	8000c78 <HAL_GetTick>
 8000f46:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f48:	e021      	b.n	8000f8e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f50:	d01d      	beq.n	8000f8e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d007      	beq.n	8000f68 <HAL_ADC_PollForConversion+0x6c>
 8000f58:	f7ff fe8e 	bl	8000c78 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	683a      	ldr	r2, [r7, #0]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d212      	bcs.n	8000f8e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d00b      	beq.n	8000f8e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	f043 0204 	orr.w	r2, r3, #4
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e03d      	b.n	800100a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d1d6      	bne.n	8000f4a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f06f 0212 	mvn.w	r2, #18
 8000fa4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d123      	bne.n	8001008 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d11f      	bne.n	8001008 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fce:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d006      	beq.n	8000fe4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d111      	bne.n	8001008 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d105      	bne.n	8001008 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001000:	f043 0201 	orr.w	r2, r3, #1
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001040:	2b01      	cmp	r3, #1
 8001042:	d101      	bne.n	8001048 <HAL_ADC_ConfigChannel+0x1c>
 8001044:	2302      	movs	r3, #2
 8001046:	e136      	b.n	80012b6 <HAL_ADC_ConfigChannel+0x28a>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2201      	movs	r2, #1
 800104c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b09      	cmp	r3, #9
 8001056:	d93a      	bls.n	80010ce <HAL_ADC_ConfigChannel+0xa2>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001060:	d035      	beq.n	80010ce <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	68d9      	ldr	r1, [r3, #12]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	b29b      	uxth	r3, r3
 800106e:	461a      	mov	r2, r3
 8001070:	4613      	mov	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	4413      	add	r3, r2
 8001076:	3b1e      	subs	r3, #30
 8001078:	2207      	movs	r2, #7
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	400a      	ands	r2, r1
 8001086:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a8d      	ldr	r2, [pc, #564]	@ (80012c4 <HAL_ADC_ConfigChannel+0x298>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d10a      	bne.n	80010a8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68d9      	ldr	r1, [r3, #12]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	061a      	lsls	r2, r3, #24
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	430a      	orrs	r2, r1
 80010a4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010a6:	e035      	b.n	8001114 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68d9      	ldr	r1, [r3, #12]
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	4603      	mov	r3, r0
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	4403      	add	r3, r0
 80010c0:	3b1e      	subs	r3, #30
 80010c2:	409a      	lsls	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	430a      	orrs	r2, r1
 80010ca:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010cc:	e022      	b.n	8001114 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6919      	ldr	r1, [r3, #16]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	461a      	mov	r2, r3
 80010dc:	4613      	mov	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	4413      	add	r3, r2
 80010e2:	2207      	movs	r2, #7
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43da      	mvns	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	400a      	ands	r2, r1
 80010f0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6919      	ldr	r1, [r3, #16]
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	b29b      	uxth	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	4603      	mov	r3, r0
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	4403      	add	r3, r0
 800110a:	409a      	lsls	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	430a      	orrs	r2, r1
 8001112:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b06      	cmp	r3, #6
 800111a:	d824      	bhi.n	8001166 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	3b05      	subs	r3, #5
 800112e:	221f      	movs	r2, #31
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43da      	mvns	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	400a      	ands	r2, r1
 800113c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	b29b      	uxth	r3, r3
 800114a:	4618      	mov	r0, r3
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	3b05      	subs	r3, #5
 8001158:	fa00 f203 	lsl.w	r2, r0, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	635a      	str	r2, [r3, #52]	@ 0x34
 8001164:	e04c      	b.n	8001200 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b0c      	cmp	r3, #12
 800116c:	d824      	bhi.n	80011b8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	4613      	mov	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	3b23      	subs	r3, #35	@ 0x23
 8001180:	221f      	movs	r2, #31
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	400a      	ands	r2, r1
 800118e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4618      	mov	r0, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	3b23      	subs	r3, #35	@ 0x23
 80011aa:	fa00 f203 	lsl.w	r2, r0, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80011b6:	e023      	b.n	8001200 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	3b41      	subs	r3, #65	@ 0x41
 80011ca:	221f      	movs	r2, #31
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43da      	mvns	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	400a      	ands	r2, r1
 80011d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	3b41      	subs	r3, #65	@ 0x41
 80011f4:	fa00 f203 	lsl.w	r2, r0, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	430a      	orrs	r2, r1
 80011fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a30      	ldr	r2, [pc, #192]	@ (80012c8 <HAL_ADC_ConfigChannel+0x29c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d10a      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x1f4>
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001212:	d105      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001214:	4b2d      	ldr	r3, [pc, #180]	@ (80012cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	4a2c      	ldr	r2, [pc, #176]	@ (80012cc <HAL_ADC_ConfigChannel+0x2a0>)
 800121a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800121e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a28      	ldr	r2, [pc, #160]	@ (80012c8 <HAL_ADC_ConfigChannel+0x29c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d10f      	bne.n	800124a <HAL_ADC_ConfigChannel+0x21e>
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b12      	cmp	r3, #18
 8001230:	d10b      	bne.n	800124a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001232:	4b26      	ldr	r3, [pc, #152]	@ (80012cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4a25      	ldr	r2, [pc, #148]	@ (80012cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001238:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800123c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800123e:	4b23      	ldr	r3, [pc, #140]	@ (80012cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	4a22      	ldr	r2, [pc, #136]	@ (80012cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001244:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001248:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a1e      	ldr	r2, [pc, #120]	@ (80012c8 <HAL_ADC_ConfigChannel+0x29c>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d12b      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x280>
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a1a      	ldr	r2, [pc, #104]	@ (80012c4 <HAL_ADC_ConfigChannel+0x298>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d003      	beq.n	8001266 <HAL_ADC_ConfigChannel+0x23a>
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b11      	cmp	r3, #17
 8001264:	d122      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001266:	4b19      	ldr	r3, [pc, #100]	@ (80012cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4a18      	ldr	r2, [pc, #96]	@ (80012cc <HAL_ADC_ConfigChannel+0x2a0>)
 800126c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001270:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001272:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4a15      	ldr	r2, [pc, #84]	@ (80012cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001278:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800127c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a10      	ldr	r2, [pc, #64]	@ (80012c4 <HAL_ADC_ConfigChannel+0x298>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d111      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001288:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <HAL_ADC_ConfigChannel+0x2a4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a11      	ldr	r2, [pc, #68]	@ (80012d4 <HAL_ADC_ConfigChannel+0x2a8>)
 800128e:	fba2 2303 	umull	r2, r3, r2, r3
 8001292:	0c9a      	lsrs	r2, r3, #18
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800129e:	e002      	b.n	80012a6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1f9      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	10000012 	.word	0x10000012
 80012c8:	40012000 	.word	0x40012000
 80012cc:	40012300 	.word	0x40012300
 80012d0:	20000000 	.word	0x20000000
 80012d4:	431bde83 	.word	0x431bde83

080012d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80012e0:	4b78      	ldr	r3, [pc, #480]	@ (80014c4 <ADC_Init+0x1ec>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	4a77      	ldr	r2, [pc, #476]	@ (80014c4 <ADC_Init+0x1ec>)
 80012e6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80012ea:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80012ec:	4b75      	ldr	r3, [pc, #468]	@ (80014c4 <ADC_Init+0x1ec>)
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	4973      	ldr	r1, [pc, #460]	@ (80014c4 <ADC_Init+0x1ec>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001308:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6859      	ldr	r1, [r3, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	021a      	lsls	r2, r3, #8
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800132c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6859      	ldr	r1, [r3, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800134e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6899      	ldr	r1, [r3, #8]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	430a      	orrs	r2, r1
 8001360:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001366:	4a58      	ldr	r2, [pc, #352]	@ (80014c8 <ADC_Init+0x1f0>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d022      	beq.n	80013b2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800137a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6899      	ldr	r1, [r3, #8]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800139c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6899      	ldr	r1, [r3, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	430a      	orrs	r2, r1
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	e00f      	b.n	80013d2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80013d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0202 	bic.w	r2, r2, #2
 80013e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6899      	ldr	r1, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	005a      	lsls	r2, r3, #1
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d01b      	beq.n	8001438 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800140e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800141e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6859      	ldr	r1, [r3, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142a:	3b01      	subs	r3, #1
 800142c:	035a      	lsls	r2, r3, #13
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	e007      	b.n	8001448 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001446:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001456:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	3b01      	subs	r3, #1
 8001464:	051a      	lsls	r2, r3, #20
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800147c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6899      	ldr	r1, [r3, #8]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800148a:	025a      	lsls	r2, r3, #9
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6899      	ldr	r1, [r3, #8]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	029a      	lsls	r2, r3, #10
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	609a      	str	r2, [r3, #8]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	40012300 	.word	0x40012300
 80014c8:	0f000001 	.word	0x0f000001

080014cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014dc:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <__NVIC_SetPriorityGrouping+0x40>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014e8:	4013      	ands	r3, r2
 80014ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fa:	4a04      	ldr	r2, [pc, #16]	@ (800150c <__NVIC_SetPriorityGrouping+0x40>)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	60d3      	str	r3, [r2, #12]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00
 8001510:	05fa0000 	.word	0x05fa0000

08001514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001518:	4b04      	ldr	r3, [pc, #16]	@ (800152c <__NVIC_GetPriorityGrouping+0x18>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	0a1b      	lsrs	r3, r3, #8
 800151e:	f003 0307 	and.w	r3, r3, #7
}
 8001522:	4618      	mov	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	2b00      	cmp	r3, #0
 8001542:	db0a      	blt.n	800155a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	b2da      	uxtb	r2, r3
 8001548:	490c      	ldr	r1, [pc, #48]	@ (800157c <__NVIC_SetPriority+0x4c>)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	0112      	lsls	r2, r2, #4
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	440b      	add	r3, r1
 8001554:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001558:	e00a      	b.n	8001570 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4908      	ldr	r1, [pc, #32]	@ (8001580 <__NVIC_SetPriority+0x50>)
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	3b04      	subs	r3, #4
 8001568:	0112      	lsls	r2, r2, #4
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	440b      	add	r3, r1
 800156e:	761a      	strb	r2, [r3, #24]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000e100 	.word	0xe000e100
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001584:	b480      	push	{r7}
 8001586:	b089      	sub	sp, #36	@ 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f1c3 0307 	rsb	r3, r3, #7
 800159e:	2b04      	cmp	r3, #4
 80015a0:	bf28      	it	cs
 80015a2:	2304      	movcs	r3, #4
 80015a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3304      	adds	r3, #4
 80015aa:	2b06      	cmp	r3, #6
 80015ac:	d902      	bls.n	80015b4 <NVIC_EncodePriority+0x30>
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3b03      	subs	r3, #3
 80015b2:	e000      	b.n	80015b6 <NVIC_EncodePriority+0x32>
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43da      	mvns	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	401a      	ands	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015cc:	f04f 31ff 	mov.w	r1, #4294967295
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	43d9      	mvns	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	4313      	orrs	r3, r2
         );
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3724      	adds	r7, #36	@ 0x24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015fc:	d301      	bcc.n	8001602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015fe:	2301      	movs	r3, #1
 8001600:	e00f      	b.n	8001622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001602:	4a0a      	ldr	r2, [pc, #40]	@ (800162c <SysTick_Config+0x40>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160a:	210f      	movs	r1, #15
 800160c:	f04f 30ff 	mov.w	r0, #4294967295
 8001610:	f7ff ff8e 	bl	8001530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001614:	4b05      	ldr	r3, [pc, #20]	@ (800162c <SysTick_Config+0x40>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161a:	4b04      	ldr	r3, [pc, #16]	@ (800162c <SysTick_Config+0x40>)
 800161c:	2207      	movs	r2, #7
 800161e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	e000e010 	.word	0xe000e010

08001630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ff47 	bl	80014cc <__NVIC_SetPriorityGrouping>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001646:	b580      	push	{r7, lr}
 8001648:	b086      	sub	sp, #24
 800164a:	af00      	add	r7, sp, #0
 800164c:	4603      	mov	r3, r0
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001658:	f7ff ff5c 	bl	8001514 <__NVIC_GetPriorityGrouping>
 800165c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	6978      	ldr	r0, [r7, #20]
 8001664:	f7ff ff8e 	bl	8001584 <NVIC_EncodePriority>
 8001668:	4602      	mov	r2, r0
 800166a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166e:	4611      	mov	r1, r2
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff5d 	bl	8001530 <__NVIC_SetPriority>
}
 8001676:	bf00      	nop
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ffb0 	bl	80015ec <SysTick_Config>
 800168c:	4603      	mov	r3, r0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800169c:	f3bf 8f5f 	dmb	sy
}
 80016a0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80016a2:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <HAL_MPU_Disable+0x28>)
 80016a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a6:	4a06      	ldr	r2, [pc, #24]	@ (80016c0 <HAL_MPU_Disable+0x28>)
 80016a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016ac:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80016ae:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <HAL_MPU_Disable+0x2c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	605a      	str	r2, [r3, #4]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00
 80016c4:	e000ed90 	.word	0xe000ed90

080016c8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80016d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001700 <HAL_MPU_Enable+0x38>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80016da:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <HAL_MPU_Enable+0x3c>)
 80016dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016de:	4a09      	ldr	r2, [pc, #36]	@ (8001704 <HAL_MPU_Enable+0x3c>)
 80016e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80016e6:	f3bf 8f4f 	dsb	sy
}
 80016ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016ec:	f3bf 8f6f 	isb	sy
}
 80016f0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000ed90 	.word	0xe000ed90
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	785a      	ldrb	r2, [r3, #1]
 8001714:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <HAL_MPU_ConfigRegion+0x7c>)
 8001716:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001718:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <HAL_MPU_ConfigRegion+0x7c>)
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	4a19      	ldr	r2, [pc, #100]	@ (8001784 <HAL_MPU_ConfigRegion+0x7c>)
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001724:	4a17      	ldr	r2, [pc, #92]	@ (8001784 <HAL_MPU_ConfigRegion+0x7c>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7b1b      	ldrb	r3, [r3, #12]
 8001730:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	7adb      	ldrb	r3, [r3, #11]
 8001736:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001738:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7a9b      	ldrb	r3, [r3, #10]
 800173e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001740:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	7b5b      	ldrb	r3, [r3, #13]
 8001746:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001748:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	7b9b      	ldrb	r3, [r3, #14]
 800174e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001750:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	7bdb      	ldrb	r3, [r3, #15]
 8001756:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001758:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	7a5b      	ldrb	r3, [r3, #9]
 800175e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001760:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7a1b      	ldrb	r3, [r3, #8]
 8001766:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001768:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	7812      	ldrb	r2, [r2, #0]
 800176e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001770:	4a04      	ldr	r2, [pc, #16]	@ (8001784 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001772:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001774:	6113      	str	r3, [r2, #16]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000ed90 	.word	0xe000ed90

08001788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	@ 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800179e:	2300      	movs	r3, #0
 80017a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
 80017a6:	e175      	b.n	8001a94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80017a8:	2201      	movs	r2, #1
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	f040 8164 	bne.w	8001a8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d005      	beq.n	80017de <HAL_GPIO_Init+0x56>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d130      	bne.n	8001840 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	2203      	movs	r2, #3
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4013      	ands	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	68da      	ldr	r2, [r3, #12]
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001814:	2201      	movs	r2, #1
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	091b      	lsrs	r3, r3, #4
 800182a:	f003 0201 	and.w	r2, r3, #1
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b03      	cmp	r3, #3
 800184a:	d017      	beq.n	800187c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	2203      	movs	r2, #3
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d123      	bne.n	80018d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	08da      	lsrs	r2, r3, #3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3208      	adds	r2, #8
 8001890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	220f      	movs	r2, #15
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	691a      	ldr	r2, [r3, #16]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	08da      	lsrs	r2, r3, #3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3208      	adds	r2, #8
 80018ca:	69b9      	ldr	r1, [r7, #24]
 80018cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	2203      	movs	r2, #3
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 0203 	and.w	r2, r3, #3
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 80be 	beq.w	8001a8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001912:	4b66      	ldr	r3, [pc, #408]	@ (8001aac <HAL_GPIO_Init+0x324>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001916:	4a65      	ldr	r2, [pc, #404]	@ (8001aac <HAL_GPIO_Init+0x324>)
 8001918:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800191c:	6453      	str	r3, [r2, #68]	@ 0x44
 800191e:	4b63      	ldr	r3, [pc, #396]	@ (8001aac <HAL_GPIO_Init+0x324>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800192a:	4a61      	ldr	r2, [pc, #388]	@ (8001ab0 <HAL_GPIO_Init+0x328>)
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3302      	adds	r3, #2
 8001932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	220f      	movs	r2, #15
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a58      	ldr	r2, [pc, #352]	@ (8001ab4 <HAL_GPIO_Init+0x32c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d037      	beq.n	80019c6 <HAL_GPIO_Init+0x23e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a57      	ldr	r2, [pc, #348]	@ (8001ab8 <HAL_GPIO_Init+0x330>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d031      	beq.n	80019c2 <HAL_GPIO_Init+0x23a>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a56      	ldr	r2, [pc, #344]	@ (8001abc <HAL_GPIO_Init+0x334>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d02b      	beq.n	80019be <HAL_GPIO_Init+0x236>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a55      	ldr	r2, [pc, #340]	@ (8001ac0 <HAL_GPIO_Init+0x338>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d025      	beq.n	80019ba <HAL_GPIO_Init+0x232>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a54      	ldr	r2, [pc, #336]	@ (8001ac4 <HAL_GPIO_Init+0x33c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d01f      	beq.n	80019b6 <HAL_GPIO_Init+0x22e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a53      	ldr	r2, [pc, #332]	@ (8001ac8 <HAL_GPIO_Init+0x340>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d019      	beq.n	80019b2 <HAL_GPIO_Init+0x22a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a52      	ldr	r2, [pc, #328]	@ (8001acc <HAL_GPIO_Init+0x344>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d013      	beq.n	80019ae <HAL_GPIO_Init+0x226>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a51      	ldr	r2, [pc, #324]	@ (8001ad0 <HAL_GPIO_Init+0x348>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d00d      	beq.n	80019aa <HAL_GPIO_Init+0x222>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a50      	ldr	r2, [pc, #320]	@ (8001ad4 <HAL_GPIO_Init+0x34c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d007      	beq.n	80019a6 <HAL_GPIO_Init+0x21e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4f      	ldr	r2, [pc, #316]	@ (8001ad8 <HAL_GPIO_Init+0x350>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d101      	bne.n	80019a2 <HAL_GPIO_Init+0x21a>
 800199e:	2309      	movs	r3, #9
 80019a0:	e012      	b.n	80019c8 <HAL_GPIO_Init+0x240>
 80019a2:	230a      	movs	r3, #10
 80019a4:	e010      	b.n	80019c8 <HAL_GPIO_Init+0x240>
 80019a6:	2308      	movs	r3, #8
 80019a8:	e00e      	b.n	80019c8 <HAL_GPIO_Init+0x240>
 80019aa:	2307      	movs	r3, #7
 80019ac:	e00c      	b.n	80019c8 <HAL_GPIO_Init+0x240>
 80019ae:	2306      	movs	r3, #6
 80019b0:	e00a      	b.n	80019c8 <HAL_GPIO_Init+0x240>
 80019b2:	2305      	movs	r3, #5
 80019b4:	e008      	b.n	80019c8 <HAL_GPIO_Init+0x240>
 80019b6:	2304      	movs	r3, #4
 80019b8:	e006      	b.n	80019c8 <HAL_GPIO_Init+0x240>
 80019ba:	2303      	movs	r3, #3
 80019bc:	e004      	b.n	80019c8 <HAL_GPIO_Init+0x240>
 80019be:	2302      	movs	r3, #2
 80019c0:	e002      	b.n	80019c8 <HAL_GPIO_Init+0x240>
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <HAL_GPIO_Init+0x240>
 80019c6:	2300      	movs	r3, #0
 80019c8:	69fa      	ldr	r2, [r7, #28]
 80019ca:	f002 0203 	and.w	r2, r2, #3
 80019ce:	0092      	lsls	r2, r2, #2
 80019d0:	4093      	lsls	r3, r2
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019d8:	4935      	ldr	r1, [pc, #212]	@ (8001ab0 <HAL_GPIO_Init+0x328>)
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	089b      	lsrs	r3, r3, #2
 80019de:	3302      	adds	r3, #2
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019e6:	4b3d      	ldr	r3, [pc, #244]	@ (8001adc <HAL_GPIO_Init+0x354>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a0a:	4a34      	ldr	r2, [pc, #208]	@ (8001adc <HAL_GPIO_Init+0x354>)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a10:	4b32      	ldr	r3, [pc, #200]	@ (8001adc <HAL_GPIO_Init+0x354>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a34:	4a29      	ldr	r2, [pc, #164]	@ (8001adc <HAL_GPIO_Init+0x354>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a3a:	4b28      	ldr	r3, [pc, #160]	@ (8001adc <HAL_GPIO_Init+0x354>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8001adc <HAL_GPIO_Init+0x354>)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a64:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <HAL_GPIO_Init+0x354>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a88:	4a14      	ldr	r2, [pc, #80]	@ (8001adc <HAL_GPIO_Init+0x354>)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3301      	adds	r3, #1
 8001a92:	61fb      	str	r3, [r7, #28]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	2b0f      	cmp	r3, #15
 8001a98:	f67f ae86 	bls.w	80017a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3724      	adds	r7, #36	@ 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40013800 	.word	0x40013800
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	40020400 	.word	0x40020400
 8001abc:	40020800 	.word	0x40020800
 8001ac0:	40020c00 	.word	0x40020c00
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40021400 	.word	0x40021400
 8001acc:	40021800 	.word	0x40021800
 8001ad0:	40021c00 	.word	0x40021c00
 8001ad4:	40022000 	.word	0x40022000
 8001ad8:	40022400 	.word	0x40022400
 8001adc:	40013c00 	.word	0x40013c00

08001ae0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	4b23      	ldr	r3, [pc, #140]	@ (8001b78 <HAL_PWREx_EnableOverDrive+0x98>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	4a22      	ldr	r2, [pc, #136]	@ (8001b78 <HAL_PWREx_EnableOverDrive+0x98>)
 8001af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001af6:	4b20      	ldr	r3, [pc, #128]	@ (8001b78 <HAL_PWREx_EnableOverDrive+0x98>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b02:	4b1e      	ldr	r3, [pc, #120]	@ (8001b7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a1d      	ldr	r2, [pc, #116]	@ (8001b7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b0c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b0e:	f7ff f8b3 	bl	8000c78 <HAL_GetTick>
 8001b12:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b14:	e009      	b.n	8001b2a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b16:	f7ff f8af 	bl	8000c78 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b24:	d901      	bls.n	8001b2a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e022      	b.n	8001b70 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b2a:	4b14      	ldr	r3, [pc, #80]	@ (8001b7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b36:	d1ee      	bne.n	8001b16 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b38:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0f      	ldr	r2, [pc, #60]	@ (8001b7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b42:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b44:	f7ff f898 	bl	8000c78 <HAL_GetTick>
 8001b48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b4a:	e009      	b.n	8001b60 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b4c:	f7ff f894 	bl	8000c78 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b5a:	d901      	bls.n	8001b60 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e007      	b.n	8001b70 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b60:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b6c:	d1ee      	bne.n	8001b4c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40007000 	.word	0x40007000

08001b80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e29b      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 8087 	beq.w	8001cb2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ba4:	4b96      	ldr	r3, [pc, #600]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d00c      	beq.n	8001bca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bb0:	4b93      	ldr	r3, [pc, #588]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d112      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62>
 8001bbc:	4b90      	ldr	r3, [pc, #576]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bc8:	d10b      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bca:	4b8d      	ldr	r3, [pc, #564]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d06c      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x130>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d168      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e275      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bea:	d106      	bne.n	8001bfa <HAL_RCC_OscConfig+0x7a>
 8001bec:	4b84      	ldr	r3, [pc, #528]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a83      	ldr	r2, [pc, #524]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001bf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	e02e      	b.n	8001c58 <HAL_RCC_OscConfig+0xd8>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10c      	bne.n	8001c1c <HAL_RCC_OscConfig+0x9c>
 8001c02:	4b7f      	ldr	r3, [pc, #508]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a7e      	ldr	r2, [pc, #504]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a7b      	ldr	r2, [pc, #492]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	e01d      	b.n	8001c58 <HAL_RCC_OscConfig+0xd8>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c24:	d10c      	bne.n	8001c40 <HAL_RCC_OscConfig+0xc0>
 8001c26:	4b76      	ldr	r3, [pc, #472]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a75      	ldr	r2, [pc, #468]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	4b73      	ldr	r3, [pc, #460]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a72      	ldr	r2, [pc, #456]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	e00b      	b.n	8001c58 <HAL_RCC_OscConfig+0xd8>
 8001c40:	4b6f      	ldr	r3, [pc, #444]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a6e      	ldr	r2, [pc, #440]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	4b6c      	ldr	r3, [pc, #432]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a6b      	ldr	r2, [pc, #428]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d013      	beq.n	8001c88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7ff f80a 	bl	8000c78 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c68:	f7ff f806 	bl	8000c78 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b64      	cmp	r3, #100	@ 0x64
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e229      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	4b61      	ldr	r3, [pc, #388]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0xe8>
 8001c86:	e014      	b.n	8001cb2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7fe fff6 	bl	8000c78 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c90:	f7fe fff2 	bl	8000c78 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b64      	cmp	r3, #100	@ 0x64
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e215      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca2:	4b57      	ldr	r3, [pc, #348]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x110>
 8001cae:	e000      	b.n	8001cb2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d069      	beq.n	8001d92 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cbe:	4b50      	ldr	r3, [pc, #320]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00b      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cca:	4b4d      	ldr	r3, [pc, #308]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d11c      	bne.n	8001d10 <HAL_RCC_OscConfig+0x190>
 8001cd6:	4b4a      	ldr	r3, [pc, #296]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d116      	bne.n	8001d10 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce2:	4b47      	ldr	r3, [pc, #284]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d005      	beq.n	8001cfa <HAL_RCC_OscConfig+0x17a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d001      	beq.n	8001cfa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e1e9      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfa:	4b41      	ldr	r3, [pc, #260]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	493d      	ldr	r1, [pc, #244]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0e:	e040      	b.n	8001d92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d023      	beq.n	8001d60 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d18:	4b39      	ldr	r3, [pc, #228]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a38      	ldr	r2, [pc, #224]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7fe ffa8 	bl	8000c78 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2c:	f7fe ffa4 	bl	8000c78 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e1c7      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3e:	4b30      	ldr	r3, [pc, #192]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4929      	ldr	r1, [pc, #164]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]
 8001d5e:	e018      	b.n	8001d92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d60:	4b27      	ldr	r3, [pc, #156]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a26      	ldr	r2, [pc, #152]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001d66:	f023 0301 	bic.w	r3, r3, #1
 8001d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7fe ff84 	bl	8000c78 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d74:	f7fe ff80 	bl	8000c78 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e1a3      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d86:	4b1e      	ldr	r3, [pc, #120]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d038      	beq.n	8001e10 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d019      	beq.n	8001dda <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da6:	4b16      	ldr	r3, [pc, #88]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001daa:	4a15      	ldr	r2, [pc, #84]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db2:	f7fe ff61 	bl	8000c78 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dba:	f7fe ff5d 	bl	8000c78 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e180      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001dce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x23a>
 8001dd8:	e01a      	b.n	8001e10 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dda:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dde:	4a08      	ldr	r2, [pc, #32]	@ (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001de0:	f023 0301 	bic.w	r3, r3, #1
 8001de4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de6:	f7fe ff47 	bl	8000c78 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dec:	e00a      	b.n	8001e04 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dee:	f7fe ff43 	bl	8000c78 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d903      	bls.n	8001e04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e166      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
 8001e00:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e04:	4b92      	ldr	r3, [pc, #584]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001e06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1ee      	bne.n	8001dee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 80a4 	beq.w	8001f66 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e1e:	4b8c      	ldr	r3, [pc, #560]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10d      	bne.n	8001e46 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2a:	4b89      	ldr	r3, [pc, #548]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	4a88      	ldr	r2, [pc, #544]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e36:	4b86      	ldr	r3, [pc, #536]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e42:	2301      	movs	r3, #1
 8001e44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e46:	4b83      	ldr	r3, [pc, #524]	@ (8002054 <HAL_RCC_OscConfig+0x4d4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d118      	bne.n	8001e84 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001e52:	4b80      	ldr	r3, [pc, #512]	@ (8002054 <HAL_RCC_OscConfig+0x4d4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a7f      	ldr	r2, [pc, #508]	@ (8002054 <HAL_RCC_OscConfig+0x4d4>)
 8001e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e5e:	f7fe ff0b 	bl	8000c78 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e66:	f7fe ff07 	bl	8000c78 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b64      	cmp	r3, #100	@ 0x64
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e12a      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e78:	4b76      	ldr	r3, [pc, #472]	@ (8002054 <HAL_RCC_OscConfig+0x4d4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f0      	beq.n	8001e66 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d106      	bne.n	8001e9a <HAL_RCC_OscConfig+0x31a>
 8001e8c:	4b70      	ldr	r3, [pc, #448]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e90:	4a6f      	ldr	r2, [pc, #444]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e98:	e02d      	b.n	8001ef6 <HAL_RCC_OscConfig+0x376>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10c      	bne.n	8001ebc <HAL_RCC_OscConfig+0x33c>
 8001ea2:	4b6b      	ldr	r3, [pc, #428]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea6:	4a6a      	ldr	r2, [pc, #424]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001ea8:	f023 0301 	bic.w	r3, r3, #1
 8001eac:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eae:	4b68      	ldr	r3, [pc, #416]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb2:	4a67      	ldr	r2, [pc, #412]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001eb4:	f023 0304 	bic.w	r3, r3, #4
 8001eb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eba:	e01c      	b.n	8001ef6 <HAL_RCC_OscConfig+0x376>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2b05      	cmp	r3, #5
 8001ec2:	d10c      	bne.n	8001ede <HAL_RCC_OscConfig+0x35e>
 8001ec4:	4b62      	ldr	r3, [pc, #392]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec8:	4a61      	ldr	r2, [pc, #388]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001eca:	f043 0304 	orr.w	r3, r3, #4
 8001ece:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ed0:	4b5f      	ldr	r3, [pc, #380]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed4:	4a5e      	ldr	r2, [pc, #376]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8001edc:	e00b      	b.n	8001ef6 <HAL_RCC_OscConfig+0x376>
 8001ede:	4b5c      	ldr	r3, [pc, #368]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee2:	4a5b      	ldr	r2, [pc, #364]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001ee4:	f023 0301 	bic.w	r3, r3, #1
 8001ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eea:	4b59      	ldr	r3, [pc, #356]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eee:	4a58      	ldr	r2, [pc, #352]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001ef0:	f023 0304 	bic.w	r3, r3, #4
 8001ef4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d015      	beq.n	8001f2a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001efe:	f7fe febb 	bl	8000c78 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f04:	e00a      	b.n	8001f1c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f06:	f7fe feb7 	bl	8000c78 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e0d8      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1c:	4b4c      	ldr	r3, [pc, #304]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0ee      	beq.n	8001f06 <HAL_RCC_OscConfig+0x386>
 8001f28:	e014      	b.n	8001f54 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2a:	f7fe fea5 	bl	8000c78 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f30:	e00a      	b.n	8001f48 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f32:	f7fe fea1 	bl	8000c78 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e0c2      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f48:	4b41      	ldr	r3, [pc, #260]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1ee      	bne.n	8001f32 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f54:	7dfb      	ldrb	r3, [r7, #23]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d105      	bne.n	8001f66 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f5a:	4b3d      	ldr	r3, [pc, #244]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	4a3c      	ldr	r2, [pc, #240]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001f60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f64:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 80ae 	beq.w	80020cc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f70:	4b37      	ldr	r3, [pc, #220]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 030c 	and.w	r3, r3, #12
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d06d      	beq.n	8002058 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d14b      	bne.n	800201c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f84:	4b32      	ldr	r3, [pc, #200]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a31      	ldr	r2, [pc, #196]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001f8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f90:	f7fe fe72 	bl	8000c78 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f98:	f7fe fe6e 	bl	8000c78 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e091      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001faa:	4b29      	ldr	r3, [pc, #164]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69da      	ldr	r2, [r3, #28]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc4:	019b      	lsls	r3, r3, #6
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fcc:	085b      	lsrs	r3, r3, #1
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	041b      	lsls	r3, r3, #16
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd8:	061b      	lsls	r3, r3, #24
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe0:	071b      	lsls	r3, r3, #28
 8001fe2:	491b      	ldr	r1, [pc, #108]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fe8:	4b19      	ldr	r3, [pc, #100]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a18      	ldr	r2, [pc, #96]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8001fee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7fe fe40 	bl	8000c78 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7fe fe3c 	bl	8000c78 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e05f      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200e:	4b10      	ldr	r3, [pc, #64]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0x47c>
 800201a:	e057      	b.n	80020cc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a0b      	ldr	r2, [pc, #44]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8002022:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002028:	f7fe fe26 	bl	8000c78 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002030:	f7fe fe22 	bl	8000c78 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e045      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002042:	4b03      	ldr	r3, [pc, #12]	@ (8002050 <HAL_RCC_OscConfig+0x4d0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x4b0>
 800204e:	e03d      	b.n	80020cc <HAL_RCC_OscConfig+0x54c>
 8002050:	40023800 	.word	0x40023800
 8002054:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002058:	4b1f      	ldr	r3, [pc, #124]	@ (80020d8 <HAL_RCC_OscConfig+0x558>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d030      	beq.n	80020c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002070:	429a      	cmp	r2, r3
 8002072:	d129      	bne.n	80020c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207e:	429a      	cmp	r2, r3
 8002080:	d122      	bne.n	80020c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002088:	4013      	ands	r3, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800208e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002090:	4293      	cmp	r3, r2
 8002092:	d119      	bne.n	80020c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209e:	085b      	lsrs	r3, r3, #1
 80020a0:	3b01      	subs	r3, #1
 80020a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d10f      	bne.n	80020c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d107      	bne.n	80020c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e000      	b.n	80020ce <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800

080020dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0d0      	b.n	8002296 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020f4:	4b6a      	ldr	r3, [pc, #424]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d910      	bls.n	8002124 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b67      	ldr	r3, [pc, #412]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 020f 	bic.w	r2, r3, #15
 800210a:	4965      	ldr	r1, [pc, #404]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b63      	ldr	r3, [pc, #396]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0b8      	b.n	8002296 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d020      	beq.n	8002172 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800213c:	4b59      	ldr	r3, [pc, #356]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	4a58      	ldr	r2, [pc, #352]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002142:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002146:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002154:	4b53      	ldr	r3, [pc, #332]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	4a52      	ldr	r2, [pc, #328]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 800215a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800215e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002160:	4b50      	ldr	r3, [pc, #320]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	494d      	ldr	r1, [pc, #308]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 800216e:	4313      	orrs	r3, r2
 8002170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d040      	beq.n	8002200 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d107      	bne.n	8002196 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002186:	4b47      	ldr	r3, [pc, #284]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d115      	bne.n	80021be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e07f      	b.n	8002296 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d107      	bne.n	80021ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219e:	4b41      	ldr	r3, [pc, #260]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d109      	bne.n	80021be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e073      	b.n	8002296 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ae:	4b3d      	ldr	r3, [pc, #244]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e06b      	b.n	8002296 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021be:	4b39      	ldr	r3, [pc, #228]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f023 0203 	bic.w	r2, r3, #3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4936      	ldr	r1, [pc, #216]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021d0:	f7fe fd52 	bl	8000c78 <HAL_GetTick>
 80021d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d8:	f7fe fd4e 	bl	8000c78 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e053      	b.n	8002296 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ee:	4b2d      	ldr	r3, [pc, #180]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 020c 	and.w	r2, r3, #12
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d1eb      	bne.n	80021d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002200:	4b27      	ldr	r3, [pc, #156]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 030f 	and.w	r3, r3, #15
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d210      	bcs.n	8002230 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b24      	ldr	r3, [pc, #144]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 020f 	bic.w	r2, r3, #15
 8002216:	4922      	ldr	r1, [pc, #136]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221e:	4b20      	ldr	r3, [pc, #128]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d001      	beq.n	8002230 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e032      	b.n	8002296 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800223c:	4b19      	ldr	r3, [pc, #100]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4916      	ldr	r1, [pc, #88]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 800224a:	4313      	orrs	r3, r2
 800224c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d009      	beq.n	800226e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800225a:	4b12      	ldr	r3, [pc, #72]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	490e      	ldr	r1, [pc, #56]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 800226a:	4313      	orrs	r3, r2
 800226c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800226e:	f000 f821 	bl	80022b4 <HAL_RCC_GetSysClockFreq>
 8002272:	4602      	mov	r2, r0
 8002274:	4b0b      	ldr	r3, [pc, #44]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	490a      	ldr	r1, [pc, #40]	@ (80022a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002280:	5ccb      	ldrb	r3, [r1, r3]
 8002282:	fa22 f303 	lsr.w	r3, r2, r3
 8002286:	4a09      	ldr	r2, [pc, #36]	@ (80022ac <HAL_RCC_ClockConfig+0x1d0>)
 8002288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800228a:	4b09      	ldr	r3, [pc, #36]	@ (80022b0 <HAL_RCC_ClockConfig+0x1d4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe fcae 	bl	8000bf0 <HAL_InitTick>

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40023c00 	.word	0x40023c00
 80022a4:	40023800 	.word	0x40023800
 80022a8:	08004108 	.word	0x08004108
 80022ac:	20000000 	.word	0x20000000
 80022b0:	20000004 	.word	0x20000004

080022b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022b8:	b090      	sub	sp, #64	@ 0x40
 80022ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	637b      	str	r3, [r7, #52]	@ 0x34
 80022c0:	2300      	movs	r3, #0
 80022c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022c4:	2300      	movs	r3, #0
 80022c6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022cc:	4b59      	ldr	r3, [pc, #356]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x180>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 030c 	and.w	r3, r3, #12
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d00d      	beq.n	80022f4 <HAL_RCC_GetSysClockFreq+0x40>
 80022d8:	2b08      	cmp	r3, #8
 80022da:	f200 80a1 	bhi.w	8002420 <HAL_RCC_GetSysClockFreq+0x16c>
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <HAL_RCC_GetSysClockFreq+0x34>
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d003      	beq.n	80022ee <HAL_RCC_GetSysClockFreq+0x3a>
 80022e6:	e09b      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022e8:	4b53      	ldr	r3, [pc, #332]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x184>)
 80022ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022ec:	e09b      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022ee:	4b53      	ldr	r3, [pc, #332]	@ (800243c <HAL_RCC_GetSysClockFreq+0x188>)
 80022f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022f2:	e098      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x180>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80022fe:	4b4d      	ldr	r3, [pc, #308]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x180>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d028      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800230a:	4b4a      	ldr	r3, [pc, #296]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x180>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	099b      	lsrs	r3, r3, #6
 8002310:	2200      	movs	r2, #0
 8002312:	623b      	str	r3, [r7, #32]
 8002314:	627a      	str	r2, [r7, #36]	@ 0x24
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800231c:	2100      	movs	r1, #0
 800231e:	4b47      	ldr	r3, [pc, #284]	@ (800243c <HAL_RCC_GetSysClockFreq+0x188>)
 8002320:	fb03 f201 	mul.w	r2, r3, r1
 8002324:	2300      	movs	r3, #0
 8002326:	fb00 f303 	mul.w	r3, r0, r3
 800232a:	4413      	add	r3, r2
 800232c:	4a43      	ldr	r2, [pc, #268]	@ (800243c <HAL_RCC_GetSysClockFreq+0x188>)
 800232e:	fba0 1202 	umull	r1, r2, r0, r2
 8002332:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002334:	460a      	mov	r2, r1
 8002336:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002338:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800233a:	4413      	add	r3, r2
 800233c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800233e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002340:	2200      	movs	r2, #0
 8002342:	61bb      	str	r3, [r7, #24]
 8002344:	61fa      	str	r2, [r7, #28]
 8002346:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800234a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800234e:	f7fd ffcf 	bl	80002f0 <__aeabi_uldivmod>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4613      	mov	r3, r2
 8002358:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800235a:	e053      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235c:	4b35      	ldr	r3, [pc, #212]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x180>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	099b      	lsrs	r3, r3, #6
 8002362:	2200      	movs	r2, #0
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	617a      	str	r2, [r7, #20]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800236e:	f04f 0b00 	mov.w	fp, #0
 8002372:	4652      	mov	r2, sl
 8002374:	465b      	mov	r3, fp
 8002376:	f04f 0000 	mov.w	r0, #0
 800237a:	f04f 0100 	mov.w	r1, #0
 800237e:	0159      	lsls	r1, r3, #5
 8002380:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002384:	0150      	lsls	r0, r2, #5
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	ebb2 080a 	subs.w	r8, r2, sl
 800238e:	eb63 090b 	sbc.w	r9, r3, fp
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800239e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023a6:	ebb2 0408 	subs.w	r4, r2, r8
 80023aa:	eb63 0509 	sbc.w	r5, r3, r9
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	00eb      	lsls	r3, r5, #3
 80023b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023bc:	00e2      	lsls	r2, r4, #3
 80023be:	4614      	mov	r4, r2
 80023c0:	461d      	mov	r5, r3
 80023c2:	eb14 030a 	adds.w	r3, r4, sl
 80023c6:	603b      	str	r3, [r7, #0]
 80023c8:	eb45 030b 	adc.w	r3, r5, fp
 80023cc:	607b      	str	r3, [r7, #4]
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023da:	4629      	mov	r1, r5
 80023dc:	028b      	lsls	r3, r1, #10
 80023de:	4621      	mov	r1, r4
 80023e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023e4:	4621      	mov	r1, r4
 80023e6:	028a      	lsls	r2, r1, #10
 80023e8:	4610      	mov	r0, r2
 80023ea:	4619      	mov	r1, r3
 80023ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ee:	2200      	movs	r2, #0
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	60fa      	str	r2, [r7, #12]
 80023f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023f8:	f7fd ff7a 	bl	80002f0 <__aeabi_uldivmod>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4613      	mov	r3, r2
 8002402:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002404:	4b0b      	ldr	r3, [pc, #44]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x180>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	0c1b      	lsrs	r3, r3, #16
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	3301      	adds	r3, #1
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002414:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002418:	fbb2 f3f3 	udiv	r3, r2, r3
 800241c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800241e:	e002      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002420:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x184>)
 8002422:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002428:	4618      	mov	r0, r3
 800242a:	3740      	adds	r7, #64	@ 0x40
 800242c:	46bd      	mov	sp, r7
 800242e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800
 8002438:	00f42400 	.word	0x00f42400
 800243c:	017d7840 	.word	0x017d7840

08002440 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002444:	4b03      	ldr	r3, [pc, #12]	@ (8002454 <HAL_RCC_GetHCLKFreq+0x14>)
 8002446:	681b      	ldr	r3, [r3, #0]
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	20000000 	.word	0x20000000

08002458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800245c:	f7ff fff0 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 8002460:	4602      	mov	r2, r0
 8002462:	4b05      	ldr	r3, [pc, #20]	@ (8002478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	0a9b      	lsrs	r3, r3, #10
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	4903      	ldr	r1, [pc, #12]	@ (800247c <HAL_RCC_GetPCLK1Freq+0x24>)
 800246e:	5ccb      	ldrb	r3, [r1, r3]
 8002470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40023800 	.word	0x40023800
 800247c:	08004118 	.word	0x08004118

08002480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002484:	f7ff ffdc 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 8002488:	4602      	mov	r2, r0
 800248a:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	0b5b      	lsrs	r3, r3, #13
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	4903      	ldr	r1, [pc, #12]	@ (80024a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002496:	5ccb      	ldrb	r3, [r1, r3]
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800249c:	4618      	mov	r0, r3
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40023800 	.word	0x40023800
 80024a4:	08004118 	.word	0x08004118

080024a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d012      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024d0:	4b69      	ldr	r3, [pc, #420]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4a68      	ldr	r2, [pc, #416]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80024da:	6093      	str	r3, [r2, #8]
 80024dc:	4b66      	ldr	r3, [pc, #408]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e4:	4964      	ldr	r1, [pc, #400]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80024f2:	2301      	movs	r3, #1
 80024f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d017      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002502:	4b5d      	ldr	r3, [pc, #372]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002504:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002508:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002510:	4959      	ldr	r1, [pc, #356]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800251c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002520:	d101      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002522:	2301      	movs	r3, #1
 8002524:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800252e:	2301      	movs	r3, #1
 8002530:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d017      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800253e:	4b4e      	ldr	r3, [pc, #312]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002540:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002544:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254c:	494a      	ldr	r1, [pc, #296]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800255c:	d101      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800255e:	2301      	movs	r3, #1
 8002560:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800256a:	2301      	movs	r3, #1
 800256c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800257a:	2301      	movs	r3, #1
 800257c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 808b 	beq.w	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800258c:	4b3a      	ldr	r3, [pc, #232]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800258e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002590:	4a39      	ldr	r2, [pc, #228]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002596:	6413      	str	r3, [r2, #64]	@ 0x40
 8002598:	4b37      	ldr	r3, [pc, #220]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80025a4:	4b35      	ldr	r3, [pc, #212]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a34      	ldr	r2, [pc, #208]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b0:	f7fe fb62 	bl	8000c78 <HAL_GetTick>
 80025b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b8:	f7fe fb5e 	bl	8000c78 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	@ 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e38f      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025ca:	4b2c      	ldr	r3, [pc, #176]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025d6:	4b28      	ldr	r3, [pc, #160]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d035      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d02e      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025f4:	4b20      	ldr	r3, [pc, #128]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002602:	4a1d      	ldr	r2, [pc, #116]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002608:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800260a:	4b1b      	ldr	r3, [pc, #108]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800260e:	4a1a      	ldr	r2, [pc, #104]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002610:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002614:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002616:	4a18      	ldr	r2, [pc, #96]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800261c:	4b16      	ldr	r3, [pc, #88]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b01      	cmp	r3, #1
 8002626:	d114      	bne.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002628:	f7fe fb26 	bl	8000c78 <HAL_GetTick>
 800262c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262e:	e00a      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002630:	f7fe fb22 	bl	8000c78 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e351      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002646:	4b0c      	ldr	r3, [pc, #48]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0ee      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800265a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800265e:	d111      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002660:	4b05      	ldr	r3, [pc, #20]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800266c:	4b04      	ldr	r3, [pc, #16]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800266e:	400b      	ands	r3, r1
 8002670:	4901      	ldr	r1, [pc, #4]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
 8002676:	e00b      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002678:	40023800 	.word	0x40023800
 800267c:	40007000 	.word	0x40007000
 8002680:	0ffffcff 	.word	0x0ffffcff
 8002684:	4bac      	ldr	r3, [pc, #688]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	4aab      	ldr	r2, [pc, #684]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800268a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800268e:	6093      	str	r3, [r2, #8]
 8002690:	4ba9      	ldr	r3, [pc, #676]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002692:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269c:	49a6      	ldr	r1, [pc, #664]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0310 	and.w	r3, r3, #16
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d010      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80026ae:	4ba2      	ldr	r3, [pc, #648]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026b4:	4aa0      	ldr	r2, [pc, #640]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026be:	4b9e      	ldr	r3, [pc, #632]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c8:	499b      	ldr	r1, [pc, #620]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026dc:	4b96      	ldr	r3, [pc, #600]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026ea:	4993      	ldr	r1, [pc, #588]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026fe:	4b8e      	ldr	r3, [pc, #568]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002704:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800270c:	498a      	ldr	r1, [pc, #552]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00a      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002720:	4b85      	ldr	r3, [pc, #532]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002726:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800272e:	4982      	ldr	r1, [pc, #520]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002742:	4b7d      	ldr	r3, [pc, #500]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002748:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002750:	4979      	ldr	r1, [pc, #484]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00a      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002764:	4b74      	ldr	r3, [pc, #464]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800276a:	f023 0203 	bic.w	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002772:	4971      	ldr	r1, [pc, #452]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002786:	4b6c      	ldr	r3, [pc, #432]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278c:	f023 020c 	bic.w	r2, r3, #12
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002794:	4968      	ldr	r1, [pc, #416]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00a      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027a8:	4b63      	ldr	r3, [pc, #396]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ae:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b6:	4960      	ldr	r1, [pc, #384]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027d8:	4957      	ldr	r1, [pc, #348]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00a      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027ec:	4b52      	ldr	r3, [pc, #328]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fa:	494f      	ldr	r1, [pc, #316]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800280e:	4b4a      	ldr	r3, [pc, #296]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002814:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281c:	4946      	ldr	r1, [pc, #280]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00a      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002830:	4b41      	ldr	r3, [pc, #260]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002836:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800283e:	493e      	ldr	r1, [pc, #248]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002852:	4b39      	ldr	r3, [pc, #228]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002858:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002860:	4935      	ldr	r1, [pc, #212]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00a      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002874:	4b30      	ldr	r3, [pc, #192]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002882:	492d      	ldr	r1, [pc, #180]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d011      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002896:	4b28      	ldr	r3, [pc, #160]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800289c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028a4:	4924      	ldr	r1, [pc, #144]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028b4:	d101      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80028b6:	2301      	movs	r3, #1
 80028b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80028c6:	2301      	movs	r3, #1
 80028c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028d6:	4b18      	ldr	r3, [pc, #96]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028dc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028e4:	4914      	ldr	r1, [pc, #80]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00b      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028fe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002908:	490b      	ldr	r1, [pc, #44]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00f      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800291c:	4b06      	ldr	r3, [pc, #24]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800291e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002922:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800292c:	4902      	ldr	r1, [pc, #8]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002934:	e002      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00b      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002948:	4b8a      	ldr	r3, [pc, #552]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800294a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800294e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002958:	4986      	ldr	r1, [pc, #536]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00b      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800296c:	4b81      	ldr	r3, [pc, #516]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800296e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002972:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800297c:	497d      	ldr	r1, [pc, #500]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d006      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 80d6 	beq.w	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002998:	4b76      	ldr	r3, [pc, #472]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a75      	ldr	r2, [pc, #468]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800299e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80029a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a4:	f7fe f968 	bl	8000c78 <HAL_GetTick>
 80029a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029ac:	f7fe f964 	bl	8000c78 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	@ 0x64
 80029b8:	d901      	bls.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e195      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029be:	4b6d      	ldr	r3, [pc, #436]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d021      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d11d      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029de:	4b65      	ldr	r3, [pc, #404]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029e4:	0c1b      	lsrs	r3, r3, #16
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029ec:	4b61      	ldr	r3, [pc, #388]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029f2:	0e1b      	lsrs	r3, r3, #24
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	019a      	lsls	r2, r3, #6
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	041b      	lsls	r3, r3, #16
 8002a04:	431a      	orrs	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	061b      	lsls	r3, r3, #24
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	071b      	lsls	r3, r3, #28
 8002a12:	4958      	ldr	r1, [pc, #352]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d004      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a2e:	d00a      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d02e      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a44:	d129      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a46:	4b4b      	ldr	r3, [pc, #300]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a4c:	0c1b      	lsrs	r3, r3, #16
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a54:	4b47      	ldr	r3, [pc, #284]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a5a:	0f1b      	lsrs	r3, r3, #28
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	019a      	lsls	r2, r3, #6
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	041b      	lsls	r3, r3, #16
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	061b      	lsls	r3, r3, #24
 8002a74:	431a      	orrs	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	071b      	lsls	r3, r3, #28
 8002a7a:	493e      	ldr	r1, [pc, #248]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a82:	4b3c      	ldr	r3, [pc, #240]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a88:	f023 021f 	bic.w	r2, r3, #31
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a90:	3b01      	subs	r3, #1
 8002a92:	4938      	ldr	r1, [pc, #224]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d01d      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002aa6:	4b33      	ldr	r3, [pc, #204]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aac:	0e1b      	lsrs	r3, r3, #24
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ab4:	4b2f      	ldr	r3, [pc, #188]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aba:	0f1b      	lsrs	r3, r3, #28
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	019a      	lsls	r2, r3, #6
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	041b      	lsls	r3, r3, #16
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	061b      	lsls	r3, r3, #24
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	071b      	lsls	r3, r3, #28
 8002ada:	4926      	ldr	r1, [pc, #152]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d011      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	019a      	lsls	r2, r3, #6
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	041b      	lsls	r3, r3, #16
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	061b      	lsls	r3, r3, #24
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	071b      	lsls	r3, r3, #28
 8002b0a:	491a      	ldr	r1, [pc, #104]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b12:	4b18      	ldr	r3, [pc, #96]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a17      	ldr	r2, [pc, #92]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b1e:	f7fe f8ab 	bl	8000c78 <HAL_GetTick>
 8002b22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b24:	e008      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b26:	f7fe f8a7 	bl	8000c78 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b64      	cmp	r3, #100	@ 0x64
 8002b32:	d901      	bls.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e0d8      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b38:	4b0e      	ldr	r3, [pc, #56]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0f0      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	f040 80ce 	bne.w	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b4c:	4b09      	ldr	r3, [pc, #36]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a08      	ldr	r2, [pc, #32]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b58:	f7fe f88e 	bl	8000c78 <HAL_GetTick>
 8002b5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b5e:	e00b      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b60:	f7fe f88a 	bl	8000c78 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	@ 0x64
 8002b6c:	d904      	bls.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e0bb      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b78:	4b5e      	ldr	r3, [pc, #376]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b84:	d0ec      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d009      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d02e      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d12a      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bae:	4b51      	ldr	r3, [pc, #324]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb4:	0c1b      	lsrs	r3, r3, #16
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002bbc:	4b4d      	ldr	r3, [pc, #308]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc2:	0f1b      	lsrs	r3, r3, #28
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	019a      	lsls	r2, r3, #6
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	041b      	lsls	r3, r3, #16
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	061b      	lsls	r3, r3, #24
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	071b      	lsls	r3, r3, #28
 8002be2:	4944      	ldr	r1, [pc, #272]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002bea:	4b42      	ldr	r3, [pc, #264]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bf0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	493d      	ldr	r1, [pc, #244]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d022      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c18:	d11d      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c1a:	4b36      	ldr	r3, [pc, #216]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c20:	0e1b      	lsrs	r3, r3, #24
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c28:	4b32      	ldr	r3, [pc, #200]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c2e:	0f1b      	lsrs	r3, r3, #28
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	019a      	lsls	r2, r3, #6
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	431a      	orrs	r2, r3
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	061b      	lsls	r3, r3, #24
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	071b      	lsls	r3, r3, #28
 8002c4e:	4929      	ldr	r1, [pc, #164]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d028      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c62:	4b24      	ldr	r3, [pc, #144]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c68:	0e1b      	lsrs	r3, r3, #24
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c70:	4b20      	ldr	r3, [pc, #128]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c76:	0c1b      	lsrs	r3, r3, #16
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	019a      	lsls	r2, r3, #6
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	041b      	lsls	r3, r3, #16
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	061b      	lsls	r3, r3, #24
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	071b      	lsls	r3, r3, #28
 8002c96:	4917      	ldr	r1, [pc, #92]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c9e:	4b15      	ldr	r3, [pc, #84]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ca4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cac:	4911      	ldr	r1, [pc, #68]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc0:	f7fd ffda 	bl	8000c78 <HAL_GetTick>
 8002cc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cc8:	f7fd ffd6 	bl	8000c78 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	@ 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e007      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cda:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ce2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ce6:	d1ef      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3720      	adds	r7, #32
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800

08002cf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e040      	b.n	8002d8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fd fed2 	bl	8000ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2224      	movs	r2, #36	@ 0x24
 8002d24:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0201 	bic.w	r2, r2, #1
 8002d34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fb16 	bl	8003370 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f8af 	bl	8002ea8 <UART_SetConfig>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e01b      	b.n	8002d8c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fb95 	bl	80034b4 <UART_CheckIdleState>
 8002d8a:	4603      	mov	r3, r0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08a      	sub	sp, #40	@ 0x28
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	4613      	mov	r3, r2
 8002da2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d177      	bne.n	8002e9c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_UART_Transmit+0x24>
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e070      	b.n	8002e9e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2221      	movs	r2, #33	@ 0x21
 8002dc8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dca:	f7fd ff55 	bl	8000c78 <HAL_GetTick>
 8002dce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	88fa      	ldrh	r2, [r7, #6]
 8002dd4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	88fa      	ldrh	r2, [r7, #6]
 8002ddc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002de8:	d108      	bne.n	8002dfc <HAL_UART_Transmit+0x68>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d104      	bne.n	8002dfc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	e003      	b.n	8002e04 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e04:	e02f      	b.n	8002e66 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2180      	movs	r1, #128	@ 0x80
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 fbf7 	bl	8003604 <UART_WaitOnFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d004      	beq.n	8002e26 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e03b      	b.n	8002e9e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10b      	bne.n	8002e44 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e3a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	3302      	adds	r3, #2
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	e007      	b.n	8002e54 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	781a      	ldrb	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	3301      	adds	r3, #1
 8002e52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1c9      	bne.n	8002e06 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2140      	movs	r1, #64	@ 0x40
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 fbc1 	bl	8003604 <UART_WaitOnFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d004      	beq.n	8002e92 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e005      	b.n	8002e9e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2220      	movs	r2, #32
 8002e96:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	e000      	b.n	8002e9e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002e9c:	2302      	movs	r3, #2
  }
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3720      	adds	r7, #32
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
	...

08002ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	4ba6      	ldr	r3, [pc, #664]	@ (800316c <UART_SetConfig+0x2c4>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6812      	ldr	r2, [r2, #0]
 8002eda:	6979      	ldr	r1, [r7, #20]
 8002edc:	430b      	orrs	r3, r1
 8002ede:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a94      	ldr	r2, [pc, #592]	@ (8003170 <UART_SetConfig+0x2c8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d120      	bne.n	8002f66 <UART_SetConfig+0xbe>
 8002f24:	4b93      	ldr	r3, [pc, #588]	@ (8003174 <UART_SetConfig+0x2cc>)
 8002f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d816      	bhi.n	8002f60 <UART_SetConfig+0xb8>
 8002f32:	a201      	add	r2, pc, #4	@ (adr r2, 8002f38 <UART_SetConfig+0x90>)
 8002f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f38:	08002f49 	.word	0x08002f49
 8002f3c:	08002f55 	.word	0x08002f55
 8002f40:	08002f4f 	.word	0x08002f4f
 8002f44:	08002f5b 	.word	0x08002f5b
 8002f48:	2301      	movs	r3, #1
 8002f4a:	77fb      	strb	r3, [r7, #31]
 8002f4c:	e150      	b.n	80031f0 <UART_SetConfig+0x348>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	77fb      	strb	r3, [r7, #31]
 8002f52:	e14d      	b.n	80031f0 <UART_SetConfig+0x348>
 8002f54:	2304      	movs	r3, #4
 8002f56:	77fb      	strb	r3, [r7, #31]
 8002f58:	e14a      	b.n	80031f0 <UART_SetConfig+0x348>
 8002f5a:	2308      	movs	r3, #8
 8002f5c:	77fb      	strb	r3, [r7, #31]
 8002f5e:	e147      	b.n	80031f0 <UART_SetConfig+0x348>
 8002f60:	2310      	movs	r3, #16
 8002f62:	77fb      	strb	r3, [r7, #31]
 8002f64:	e144      	b.n	80031f0 <UART_SetConfig+0x348>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a83      	ldr	r2, [pc, #524]	@ (8003178 <UART_SetConfig+0x2d0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d132      	bne.n	8002fd6 <UART_SetConfig+0x12e>
 8002f70:	4b80      	ldr	r3, [pc, #512]	@ (8003174 <UART_SetConfig+0x2cc>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	2b0c      	cmp	r3, #12
 8002f7c:	d828      	bhi.n	8002fd0 <UART_SetConfig+0x128>
 8002f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f84 <UART_SetConfig+0xdc>)
 8002f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f84:	08002fb9 	.word	0x08002fb9
 8002f88:	08002fd1 	.word	0x08002fd1
 8002f8c:	08002fd1 	.word	0x08002fd1
 8002f90:	08002fd1 	.word	0x08002fd1
 8002f94:	08002fc5 	.word	0x08002fc5
 8002f98:	08002fd1 	.word	0x08002fd1
 8002f9c:	08002fd1 	.word	0x08002fd1
 8002fa0:	08002fd1 	.word	0x08002fd1
 8002fa4:	08002fbf 	.word	0x08002fbf
 8002fa8:	08002fd1 	.word	0x08002fd1
 8002fac:	08002fd1 	.word	0x08002fd1
 8002fb0:	08002fd1 	.word	0x08002fd1
 8002fb4:	08002fcb 	.word	0x08002fcb
 8002fb8:	2300      	movs	r3, #0
 8002fba:	77fb      	strb	r3, [r7, #31]
 8002fbc:	e118      	b.n	80031f0 <UART_SetConfig+0x348>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	77fb      	strb	r3, [r7, #31]
 8002fc2:	e115      	b.n	80031f0 <UART_SetConfig+0x348>
 8002fc4:	2304      	movs	r3, #4
 8002fc6:	77fb      	strb	r3, [r7, #31]
 8002fc8:	e112      	b.n	80031f0 <UART_SetConfig+0x348>
 8002fca:	2308      	movs	r3, #8
 8002fcc:	77fb      	strb	r3, [r7, #31]
 8002fce:	e10f      	b.n	80031f0 <UART_SetConfig+0x348>
 8002fd0:	2310      	movs	r3, #16
 8002fd2:	77fb      	strb	r3, [r7, #31]
 8002fd4:	e10c      	b.n	80031f0 <UART_SetConfig+0x348>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a68      	ldr	r2, [pc, #416]	@ (800317c <UART_SetConfig+0x2d4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d120      	bne.n	8003022 <UART_SetConfig+0x17a>
 8002fe0:	4b64      	ldr	r3, [pc, #400]	@ (8003174 <UART_SetConfig+0x2cc>)
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002fea:	2b30      	cmp	r3, #48	@ 0x30
 8002fec:	d013      	beq.n	8003016 <UART_SetConfig+0x16e>
 8002fee:	2b30      	cmp	r3, #48	@ 0x30
 8002ff0:	d814      	bhi.n	800301c <UART_SetConfig+0x174>
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d009      	beq.n	800300a <UART_SetConfig+0x162>
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	d810      	bhi.n	800301c <UART_SetConfig+0x174>
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <UART_SetConfig+0x15c>
 8002ffe:	2b10      	cmp	r3, #16
 8003000:	d006      	beq.n	8003010 <UART_SetConfig+0x168>
 8003002:	e00b      	b.n	800301c <UART_SetConfig+0x174>
 8003004:	2300      	movs	r3, #0
 8003006:	77fb      	strb	r3, [r7, #31]
 8003008:	e0f2      	b.n	80031f0 <UART_SetConfig+0x348>
 800300a:	2302      	movs	r3, #2
 800300c:	77fb      	strb	r3, [r7, #31]
 800300e:	e0ef      	b.n	80031f0 <UART_SetConfig+0x348>
 8003010:	2304      	movs	r3, #4
 8003012:	77fb      	strb	r3, [r7, #31]
 8003014:	e0ec      	b.n	80031f0 <UART_SetConfig+0x348>
 8003016:	2308      	movs	r3, #8
 8003018:	77fb      	strb	r3, [r7, #31]
 800301a:	e0e9      	b.n	80031f0 <UART_SetConfig+0x348>
 800301c:	2310      	movs	r3, #16
 800301e:	77fb      	strb	r3, [r7, #31]
 8003020:	e0e6      	b.n	80031f0 <UART_SetConfig+0x348>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a56      	ldr	r2, [pc, #344]	@ (8003180 <UART_SetConfig+0x2d8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d120      	bne.n	800306e <UART_SetConfig+0x1c6>
 800302c:	4b51      	ldr	r3, [pc, #324]	@ (8003174 <UART_SetConfig+0x2cc>)
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003032:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003036:	2bc0      	cmp	r3, #192	@ 0xc0
 8003038:	d013      	beq.n	8003062 <UART_SetConfig+0x1ba>
 800303a:	2bc0      	cmp	r3, #192	@ 0xc0
 800303c:	d814      	bhi.n	8003068 <UART_SetConfig+0x1c0>
 800303e:	2b80      	cmp	r3, #128	@ 0x80
 8003040:	d009      	beq.n	8003056 <UART_SetConfig+0x1ae>
 8003042:	2b80      	cmp	r3, #128	@ 0x80
 8003044:	d810      	bhi.n	8003068 <UART_SetConfig+0x1c0>
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <UART_SetConfig+0x1a8>
 800304a:	2b40      	cmp	r3, #64	@ 0x40
 800304c:	d006      	beq.n	800305c <UART_SetConfig+0x1b4>
 800304e:	e00b      	b.n	8003068 <UART_SetConfig+0x1c0>
 8003050:	2300      	movs	r3, #0
 8003052:	77fb      	strb	r3, [r7, #31]
 8003054:	e0cc      	b.n	80031f0 <UART_SetConfig+0x348>
 8003056:	2302      	movs	r3, #2
 8003058:	77fb      	strb	r3, [r7, #31]
 800305a:	e0c9      	b.n	80031f0 <UART_SetConfig+0x348>
 800305c:	2304      	movs	r3, #4
 800305e:	77fb      	strb	r3, [r7, #31]
 8003060:	e0c6      	b.n	80031f0 <UART_SetConfig+0x348>
 8003062:	2308      	movs	r3, #8
 8003064:	77fb      	strb	r3, [r7, #31]
 8003066:	e0c3      	b.n	80031f0 <UART_SetConfig+0x348>
 8003068:	2310      	movs	r3, #16
 800306a:	77fb      	strb	r3, [r7, #31]
 800306c:	e0c0      	b.n	80031f0 <UART_SetConfig+0x348>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a44      	ldr	r2, [pc, #272]	@ (8003184 <UART_SetConfig+0x2dc>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d125      	bne.n	80030c4 <UART_SetConfig+0x21c>
 8003078:	4b3e      	ldr	r3, [pc, #248]	@ (8003174 <UART_SetConfig+0x2cc>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800307e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003082:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003086:	d017      	beq.n	80030b8 <UART_SetConfig+0x210>
 8003088:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800308c:	d817      	bhi.n	80030be <UART_SetConfig+0x216>
 800308e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003092:	d00b      	beq.n	80030ac <UART_SetConfig+0x204>
 8003094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003098:	d811      	bhi.n	80030be <UART_SetConfig+0x216>
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <UART_SetConfig+0x1fe>
 800309e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030a2:	d006      	beq.n	80030b2 <UART_SetConfig+0x20a>
 80030a4:	e00b      	b.n	80030be <UART_SetConfig+0x216>
 80030a6:	2300      	movs	r3, #0
 80030a8:	77fb      	strb	r3, [r7, #31]
 80030aa:	e0a1      	b.n	80031f0 <UART_SetConfig+0x348>
 80030ac:	2302      	movs	r3, #2
 80030ae:	77fb      	strb	r3, [r7, #31]
 80030b0:	e09e      	b.n	80031f0 <UART_SetConfig+0x348>
 80030b2:	2304      	movs	r3, #4
 80030b4:	77fb      	strb	r3, [r7, #31]
 80030b6:	e09b      	b.n	80031f0 <UART_SetConfig+0x348>
 80030b8:	2308      	movs	r3, #8
 80030ba:	77fb      	strb	r3, [r7, #31]
 80030bc:	e098      	b.n	80031f0 <UART_SetConfig+0x348>
 80030be:	2310      	movs	r3, #16
 80030c0:	77fb      	strb	r3, [r7, #31]
 80030c2:	e095      	b.n	80031f0 <UART_SetConfig+0x348>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a2f      	ldr	r2, [pc, #188]	@ (8003188 <UART_SetConfig+0x2e0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d125      	bne.n	800311a <UART_SetConfig+0x272>
 80030ce:	4b29      	ldr	r3, [pc, #164]	@ (8003174 <UART_SetConfig+0x2cc>)
 80030d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80030d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030dc:	d017      	beq.n	800310e <UART_SetConfig+0x266>
 80030de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030e2:	d817      	bhi.n	8003114 <UART_SetConfig+0x26c>
 80030e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030e8:	d00b      	beq.n	8003102 <UART_SetConfig+0x25a>
 80030ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030ee:	d811      	bhi.n	8003114 <UART_SetConfig+0x26c>
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <UART_SetConfig+0x254>
 80030f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030f8:	d006      	beq.n	8003108 <UART_SetConfig+0x260>
 80030fa:	e00b      	b.n	8003114 <UART_SetConfig+0x26c>
 80030fc:	2301      	movs	r3, #1
 80030fe:	77fb      	strb	r3, [r7, #31]
 8003100:	e076      	b.n	80031f0 <UART_SetConfig+0x348>
 8003102:	2302      	movs	r3, #2
 8003104:	77fb      	strb	r3, [r7, #31]
 8003106:	e073      	b.n	80031f0 <UART_SetConfig+0x348>
 8003108:	2304      	movs	r3, #4
 800310a:	77fb      	strb	r3, [r7, #31]
 800310c:	e070      	b.n	80031f0 <UART_SetConfig+0x348>
 800310e:	2308      	movs	r3, #8
 8003110:	77fb      	strb	r3, [r7, #31]
 8003112:	e06d      	b.n	80031f0 <UART_SetConfig+0x348>
 8003114:	2310      	movs	r3, #16
 8003116:	77fb      	strb	r3, [r7, #31]
 8003118:	e06a      	b.n	80031f0 <UART_SetConfig+0x348>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a1b      	ldr	r2, [pc, #108]	@ (800318c <UART_SetConfig+0x2e4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d138      	bne.n	8003196 <UART_SetConfig+0x2ee>
 8003124:	4b13      	ldr	r3, [pc, #76]	@ (8003174 <UART_SetConfig+0x2cc>)
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800312e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003132:	d017      	beq.n	8003164 <UART_SetConfig+0x2bc>
 8003134:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003138:	d82a      	bhi.n	8003190 <UART_SetConfig+0x2e8>
 800313a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800313e:	d00b      	beq.n	8003158 <UART_SetConfig+0x2b0>
 8003140:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003144:	d824      	bhi.n	8003190 <UART_SetConfig+0x2e8>
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <UART_SetConfig+0x2aa>
 800314a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800314e:	d006      	beq.n	800315e <UART_SetConfig+0x2b6>
 8003150:	e01e      	b.n	8003190 <UART_SetConfig+0x2e8>
 8003152:	2300      	movs	r3, #0
 8003154:	77fb      	strb	r3, [r7, #31]
 8003156:	e04b      	b.n	80031f0 <UART_SetConfig+0x348>
 8003158:	2302      	movs	r3, #2
 800315a:	77fb      	strb	r3, [r7, #31]
 800315c:	e048      	b.n	80031f0 <UART_SetConfig+0x348>
 800315e:	2304      	movs	r3, #4
 8003160:	77fb      	strb	r3, [r7, #31]
 8003162:	e045      	b.n	80031f0 <UART_SetConfig+0x348>
 8003164:	2308      	movs	r3, #8
 8003166:	77fb      	strb	r3, [r7, #31]
 8003168:	e042      	b.n	80031f0 <UART_SetConfig+0x348>
 800316a:	bf00      	nop
 800316c:	efff69f3 	.word	0xefff69f3
 8003170:	40011000 	.word	0x40011000
 8003174:	40023800 	.word	0x40023800
 8003178:	40004400 	.word	0x40004400
 800317c:	40004800 	.word	0x40004800
 8003180:	40004c00 	.word	0x40004c00
 8003184:	40005000 	.word	0x40005000
 8003188:	40011400 	.word	0x40011400
 800318c:	40007800 	.word	0x40007800
 8003190:	2310      	movs	r3, #16
 8003192:	77fb      	strb	r3, [r7, #31]
 8003194:	e02c      	b.n	80031f0 <UART_SetConfig+0x348>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a72      	ldr	r2, [pc, #456]	@ (8003364 <UART_SetConfig+0x4bc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d125      	bne.n	80031ec <UART_SetConfig+0x344>
 80031a0:	4b71      	ldr	r3, [pc, #452]	@ (8003368 <UART_SetConfig+0x4c0>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80031aa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80031ae:	d017      	beq.n	80031e0 <UART_SetConfig+0x338>
 80031b0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80031b4:	d817      	bhi.n	80031e6 <UART_SetConfig+0x33e>
 80031b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031ba:	d00b      	beq.n	80031d4 <UART_SetConfig+0x32c>
 80031bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031c0:	d811      	bhi.n	80031e6 <UART_SetConfig+0x33e>
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <UART_SetConfig+0x326>
 80031c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031ca:	d006      	beq.n	80031da <UART_SetConfig+0x332>
 80031cc:	e00b      	b.n	80031e6 <UART_SetConfig+0x33e>
 80031ce:	2300      	movs	r3, #0
 80031d0:	77fb      	strb	r3, [r7, #31]
 80031d2:	e00d      	b.n	80031f0 <UART_SetConfig+0x348>
 80031d4:	2302      	movs	r3, #2
 80031d6:	77fb      	strb	r3, [r7, #31]
 80031d8:	e00a      	b.n	80031f0 <UART_SetConfig+0x348>
 80031da:	2304      	movs	r3, #4
 80031dc:	77fb      	strb	r3, [r7, #31]
 80031de:	e007      	b.n	80031f0 <UART_SetConfig+0x348>
 80031e0:	2308      	movs	r3, #8
 80031e2:	77fb      	strb	r3, [r7, #31]
 80031e4:	e004      	b.n	80031f0 <UART_SetConfig+0x348>
 80031e6:	2310      	movs	r3, #16
 80031e8:	77fb      	strb	r3, [r7, #31]
 80031ea:	e001      	b.n	80031f0 <UART_SetConfig+0x348>
 80031ec:	2310      	movs	r3, #16
 80031ee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031f8:	d15b      	bne.n	80032b2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80031fa:	7ffb      	ldrb	r3, [r7, #31]
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d828      	bhi.n	8003252 <UART_SetConfig+0x3aa>
 8003200:	a201      	add	r2, pc, #4	@ (adr r2, 8003208 <UART_SetConfig+0x360>)
 8003202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003206:	bf00      	nop
 8003208:	0800322d 	.word	0x0800322d
 800320c:	08003235 	.word	0x08003235
 8003210:	0800323d 	.word	0x0800323d
 8003214:	08003253 	.word	0x08003253
 8003218:	08003243 	.word	0x08003243
 800321c:	08003253 	.word	0x08003253
 8003220:	08003253 	.word	0x08003253
 8003224:	08003253 	.word	0x08003253
 8003228:	0800324b 	.word	0x0800324b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800322c:	f7ff f914 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 8003230:	61b8      	str	r0, [r7, #24]
        break;
 8003232:	e013      	b.n	800325c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003234:	f7ff f924 	bl	8002480 <HAL_RCC_GetPCLK2Freq>
 8003238:	61b8      	str	r0, [r7, #24]
        break;
 800323a:	e00f      	b.n	800325c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800323c:	4b4b      	ldr	r3, [pc, #300]	@ (800336c <UART_SetConfig+0x4c4>)
 800323e:	61bb      	str	r3, [r7, #24]
        break;
 8003240:	e00c      	b.n	800325c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003242:	f7ff f837 	bl	80022b4 <HAL_RCC_GetSysClockFreq>
 8003246:	61b8      	str	r0, [r7, #24]
        break;
 8003248:	e008      	b.n	800325c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800324a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800324e:	61bb      	str	r3, [r7, #24]
        break;
 8003250:	e004      	b.n	800325c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	77bb      	strb	r3, [r7, #30]
        break;
 800325a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d074      	beq.n	800334c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	005a      	lsls	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	085b      	lsrs	r3, r3, #1
 800326c:	441a      	add	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	fbb2 f3f3 	udiv	r3, r2, r3
 8003276:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	2b0f      	cmp	r3, #15
 800327c:	d916      	bls.n	80032ac <UART_SetConfig+0x404>
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003284:	d212      	bcs.n	80032ac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	b29b      	uxth	r3, r3
 800328a:	f023 030f 	bic.w	r3, r3, #15
 800328e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	085b      	lsrs	r3, r3, #1
 8003294:	b29b      	uxth	r3, r3
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	b29a      	uxth	r2, r3
 800329c:	89fb      	ldrh	r3, [r7, #14]
 800329e:	4313      	orrs	r3, r2
 80032a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	89fa      	ldrh	r2, [r7, #14]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	e04f      	b.n	800334c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	77bb      	strb	r3, [r7, #30]
 80032b0:	e04c      	b.n	800334c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032b2:	7ffb      	ldrb	r3, [r7, #31]
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d828      	bhi.n	800330a <UART_SetConfig+0x462>
 80032b8:	a201      	add	r2, pc, #4	@ (adr r2, 80032c0 <UART_SetConfig+0x418>)
 80032ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032be:	bf00      	nop
 80032c0:	080032e5 	.word	0x080032e5
 80032c4:	080032ed 	.word	0x080032ed
 80032c8:	080032f5 	.word	0x080032f5
 80032cc:	0800330b 	.word	0x0800330b
 80032d0:	080032fb 	.word	0x080032fb
 80032d4:	0800330b 	.word	0x0800330b
 80032d8:	0800330b 	.word	0x0800330b
 80032dc:	0800330b 	.word	0x0800330b
 80032e0:	08003303 	.word	0x08003303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032e4:	f7ff f8b8 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 80032e8:	61b8      	str	r0, [r7, #24]
        break;
 80032ea:	e013      	b.n	8003314 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032ec:	f7ff f8c8 	bl	8002480 <HAL_RCC_GetPCLK2Freq>
 80032f0:	61b8      	str	r0, [r7, #24]
        break;
 80032f2:	e00f      	b.n	8003314 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032f4:	4b1d      	ldr	r3, [pc, #116]	@ (800336c <UART_SetConfig+0x4c4>)
 80032f6:	61bb      	str	r3, [r7, #24]
        break;
 80032f8:	e00c      	b.n	8003314 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032fa:	f7fe ffdb 	bl	80022b4 <HAL_RCC_GetSysClockFreq>
 80032fe:	61b8      	str	r0, [r7, #24]
        break;
 8003300:	e008      	b.n	8003314 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003306:	61bb      	str	r3, [r7, #24]
        break;
 8003308:	e004      	b.n	8003314 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	77bb      	strb	r3, [r7, #30]
        break;
 8003312:	bf00      	nop
    }

    if (pclk != 0U)
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d018      	beq.n	800334c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	085a      	lsrs	r2, r3, #1
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	441a      	add	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	fbb2 f3f3 	udiv	r3, r2, r3
 800332c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b0f      	cmp	r3, #15
 8003332:	d909      	bls.n	8003348 <UART_SetConfig+0x4a0>
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800333a:	d205      	bcs.n	8003348 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	b29a      	uxth	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	60da      	str	r2, [r3, #12]
 8003346:	e001      	b.n	800334c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003358:	7fbb      	ldrb	r3, [r7, #30]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40007c00 	.word	0x40007c00
 8003368:	40023800 	.word	0x40023800
 800336c:	00f42400 	.word	0x00f42400

08003370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01a      	beq.n	8003486 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800346e:	d10a      	bne.n	8003486 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	605a      	str	r2, [r3, #4]
  }
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b098      	sub	sp, #96	@ 0x60
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034c4:	f7fd fbd8 	bl	8000c78 <HAL_GetTick>
 80034c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d12e      	bne.n	8003536 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e0:	2200      	movs	r2, #0
 80034e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f88c 	bl	8003604 <UART_WaitOnFlagUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d021      	beq.n	8003536 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034fa:	e853 3f00 	ldrex	r3, [r3]
 80034fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003502:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003506:	653b      	str	r3, [r7, #80]	@ 0x50
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	461a      	mov	r2, r3
 800350e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003510:	647b      	str	r3, [r7, #68]	@ 0x44
 8003512:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003514:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003516:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003518:	e841 2300 	strex	r3, r2, [r1]
 800351c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800351e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1e6      	bne.n	80034f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e062      	b.n	80035fc <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b04      	cmp	r3, #4
 8003542:	d149      	bne.n	80035d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003544:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800354c:	2200      	movs	r2, #0
 800354e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f856 	bl	8003604 <UART_WaitOnFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d03c      	beq.n	80035d8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003566:	e853 3f00 	ldrex	r3, [r3]
 800356a:	623b      	str	r3, [r7, #32]
   return(result);
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003572:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800357c:	633b      	str	r3, [r7, #48]	@ 0x30
 800357e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003580:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003584:	e841 2300 	strex	r3, r2, [r1]
 8003588:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800358a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1e6      	bne.n	800355e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3308      	adds	r3, #8
 8003596:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	e853 3f00 	ldrex	r3, [r3]
 800359e:	60fb      	str	r3, [r7, #12]
   return(result);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0301 	bic.w	r3, r3, #1
 80035a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	3308      	adds	r3, #8
 80035ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035b0:	61fa      	str	r2, [r7, #28]
 80035b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b4:	69b9      	ldr	r1, [r7, #24]
 80035b6:	69fa      	ldr	r2, [r7, #28]
 80035b8:	e841 2300 	strex	r3, r2, [r1]
 80035bc:	617b      	str	r3, [r7, #20]
   return(result);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e5      	bne.n	8003590 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e011      	b.n	80035fc <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2220      	movs	r2, #32
 80035dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3758      	adds	r7, #88	@ 0x58
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	4613      	mov	r3, r2
 8003612:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003614:	e04f      	b.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361c:	d04b      	beq.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361e:	f7fd fb2b 	bl	8000c78 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	429a      	cmp	r2, r3
 800362c:	d302      	bcc.n	8003634 <UART_WaitOnFlagUntilTimeout+0x30>
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e04e      	b.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b00      	cmp	r3, #0
 8003644:	d037      	beq.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b80      	cmp	r3, #128	@ 0x80
 800364a:	d034      	beq.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b40      	cmp	r3, #64	@ 0x40
 8003650:	d031      	beq.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b08      	cmp	r3, #8
 800365e:	d110      	bne.n	8003682 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2208      	movs	r2, #8
 8003666:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 f838 	bl	80036de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2208      	movs	r2, #8
 8003672:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e029      	b.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800368c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003690:	d111      	bne.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800369a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f81e 	bl	80036de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e00f      	b.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69da      	ldr	r2, [r3, #28]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4013      	ands	r3, r2
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	bf0c      	ite	eq
 80036c6:	2301      	moveq	r3, #1
 80036c8:	2300      	movne	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d0a0      	beq.n	8003616 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036de:	b480      	push	{r7}
 80036e0:	b095      	sub	sp, #84	@ 0x54
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ee:	e853 3f00 	ldrex	r3, [r3]
 80036f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	461a      	mov	r2, r3
 8003702:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003704:	643b      	str	r3, [r7, #64]	@ 0x40
 8003706:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003708:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800370a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800370c:	e841 2300 	strex	r3, r2, [r1]
 8003710:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1e6      	bne.n	80036e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3308      	adds	r3, #8
 800371e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	e853 3f00 	ldrex	r3, [r3]
 8003726:	61fb      	str	r3, [r7, #28]
   return(result);
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f023 0301 	bic.w	r3, r3, #1
 800372e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3308      	adds	r3, #8
 8003736:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003738:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800373a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800373e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003740:	e841 2300 	strex	r3, r2, [r1]
 8003744:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e5      	bne.n	8003718 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003750:	2b01      	cmp	r3, #1
 8003752:	d118      	bne.n	8003786 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	e853 3f00 	ldrex	r3, [r3]
 8003760:	60bb      	str	r3, [r7, #8]
   return(result);
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f023 0310 	bic.w	r3, r3, #16
 8003768:	647b      	str	r3, [r7, #68]	@ 0x44
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003772:	61bb      	str	r3, [r7, #24]
 8003774:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	6979      	ldr	r1, [r7, #20]
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	e841 2300 	strex	r3, r2, [r1]
 800377e:	613b      	str	r3, [r7, #16]
   return(result);
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e6      	bne.n	8003754 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2220      	movs	r2, #32
 800378a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800379a:	bf00      	nop
 800379c:	3754      	adds	r7, #84	@ 0x54
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
	...

080037a8 <siprintf>:
 80037a8:	b40e      	push	{r1, r2, r3}
 80037aa:	b500      	push	{lr}
 80037ac:	b09c      	sub	sp, #112	@ 0x70
 80037ae:	ab1d      	add	r3, sp, #116	@ 0x74
 80037b0:	9002      	str	r0, [sp, #8]
 80037b2:	9006      	str	r0, [sp, #24]
 80037b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80037b8:	4809      	ldr	r0, [pc, #36]	@ (80037e0 <siprintf+0x38>)
 80037ba:	9107      	str	r1, [sp, #28]
 80037bc:	9104      	str	r1, [sp, #16]
 80037be:	4909      	ldr	r1, [pc, #36]	@ (80037e4 <siprintf+0x3c>)
 80037c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80037c4:	9105      	str	r1, [sp, #20]
 80037c6:	6800      	ldr	r0, [r0, #0]
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	a902      	add	r1, sp, #8
 80037cc:	f000 f994 	bl	8003af8 <_svfiprintf_r>
 80037d0:	9b02      	ldr	r3, [sp, #8]
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	b01c      	add	sp, #112	@ 0x70
 80037d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80037dc:	b003      	add	sp, #12
 80037de:	4770      	bx	lr
 80037e0:	2000000c 	.word	0x2000000c
 80037e4:	ffff0208 	.word	0xffff0208

080037e8 <memset>:
 80037e8:	4402      	add	r2, r0
 80037ea:	4603      	mov	r3, r0
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d100      	bne.n	80037f2 <memset+0xa>
 80037f0:	4770      	bx	lr
 80037f2:	f803 1b01 	strb.w	r1, [r3], #1
 80037f6:	e7f9      	b.n	80037ec <memset+0x4>

080037f8 <__errno>:
 80037f8:	4b01      	ldr	r3, [pc, #4]	@ (8003800 <__errno+0x8>)
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	2000000c 	.word	0x2000000c

08003804 <__libc_init_array>:
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	4d0d      	ldr	r5, [pc, #52]	@ (800383c <__libc_init_array+0x38>)
 8003808:	4c0d      	ldr	r4, [pc, #52]	@ (8003840 <__libc_init_array+0x3c>)
 800380a:	1b64      	subs	r4, r4, r5
 800380c:	10a4      	asrs	r4, r4, #2
 800380e:	2600      	movs	r6, #0
 8003810:	42a6      	cmp	r6, r4
 8003812:	d109      	bne.n	8003828 <__libc_init_array+0x24>
 8003814:	4d0b      	ldr	r5, [pc, #44]	@ (8003844 <__libc_init_array+0x40>)
 8003816:	4c0c      	ldr	r4, [pc, #48]	@ (8003848 <__libc_init_array+0x44>)
 8003818:	f000 fc66 	bl	80040e8 <_init>
 800381c:	1b64      	subs	r4, r4, r5
 800381e:	10a4      	asrs	r4, r4, #2
 8003820:	2600      	movs	r6, #0
 8003822:	42a6      	cmp	r6, r4
 8003824:	d105      	bne.n	8003832 <__libc_init_array+0x2e>
 8003826:	bd70      	pop	{r4, r5, r6, pc}
 8003828:	f855 3b04 	ldr.w	r3, [r5], #4
 800382c:	4798      	blx	r3
 800382e:	3601      	adds	r6, #1
 8003830:	e7ee      	b.n	8003810 <__libc_init_array+0xc>
 8003832:	f855 3b04 	ldr.w	r3, [r5], #4
 8003836:	4798      	blx	r3
 8003838:	3601      	adds	r6, #1
 800383a:	e7f2      	b.n	8003822 <__libc_init_array+0x1e>
 800383c:	0800415c 	.word	0x0800415c
 8003840:	0800415c 	.word	0x0800415c
 8003844:	0800415c 	.word	0x0800415c
 8003848:	08004160 	.word	0x08004160

0800384c <__retarget_lock_acquire_recursive>:
 800384c:	4770      	bx	lr

0800384e <__retarget_lock_release_recursive>:
 800384e:	4770      	bx	lr

08003850 <_free_r>:
 8003850:	b538      	push	{r3, r4, r5, lr}
 8003852:	4605      	mov	r5, r0
 8003854:	2900      	cmp	r1, #0
 8003856:	d041      	beq.n	80038dc <_free_r+0x8c>
 8003858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800385c:	1f0c      	subs	r4, r1, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	bfb8      	it	lt
 8003862:	18e4      	addlt	r4, r4, r3
 8003864:	f000 f8e0 	bl	8003a28 <__malloc_lock>
 8003868:	4a1d      	ldr	r2, [pc, #116]	@ (80038e0 <_free_r+0x90>)
 800386a:	6813      	ldr	r3, [r2, #0]
 800386c:	b933      	cbnz	r3, 800387c <_free_r+0x2c>
 800386e:	6063      	str	r3, [r4, #4]
 8003870:	6014      	str	r4, [r2, #0]
 8003872:	4628      	mov	r0, r5
 8003874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003878:	f000 b8dc 	b.w	8003a34 <__malloc_unlock>
 800387c:	42a3      	cmp	r3, r4
 800387e:	d908      	bls.n	8003892 <_free_r+0x42>
 8003880:	6820      	ldr	r0, [r4, #0]
 8003882:	1821      	adds	r1, r4, r0
 8003884:	428b      	cmp	r3, r1
 8003886:	bf01      	itttt	eq
 8003888:	6819      	ldreq	r1, [r3, #0]
 800388a:	685b      	ldreq	r3, [r3, #4]
 800388c:	1809      	addeq	r1, r1, r0
 800388e:	6021      	streq	r1, [r4, #0]
 8003890:	e7ed      	b.n	800386e <_free_r+0x1e>
 8003892:	461a      	mov	r2, r3
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	b10b      	cbz	r3, 800389c <_free_r+0x4c>
 8003898:	42a3      	cmp	r3, r4
 800389a:	d9fa      	bls.n	8003892 <_free_r+0x42>
 800389c:	6811      	ldr	r1, [r2, #0]
 800389e:	1850      	adds	r0, r2, r1
 80038a0:	42a0      	cmp	r0, r4
 80038a2:	d10b      	bne.n	80038bc <_free_r+0x6c>
 80038a4:	6820      	ldr	r0, [r4, #0]
 80038a6:	4401      	add	r1, r0
 80038a8:	1850      	adds	r0, r2, r1
 80038aa:	4283      	cmp	r3, r0
 80038ac:	6011      	str	r1, [r2, #0]
 80038ae:	d1e0      	bne.n	8003872 <_free_r+0x22>
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	6053      	str	r3, [r2, #4]
 80038b6:	4408      	add	r0, r1
 80038b8:	6010      	str	r0, [r2, #0]
 80038ba:	e7da      	b.n	8003872 <_free_r+0x22>
 80038bc:	d902      	bls.n	80038c4 <_free_r+0x74>
 80038be:	230c      	movs	r3, #12
 80038c0:	602b      	str	r3, [r5, #0]
 80038c2:	e7d6      	b.n	8003872 <_free_r+0x22>
 80038c4:	6820      	ldr	r0, [r4, #0]
 80038c6:	1821      	adds	r1, r4, r0
 80038c8:	428b      	cmp	r3, r1
 80038ca:	bf04      	itt	eq
 80038cc:	6819      	ldreq	r1, [r3, #0]
 80038ce:	685b      	ldreq	r3, [r3, #4]
 80038d0:	6063      	str	r3, [r4, #4]
 80038d2:	bf04      	itt	eq
 80038d4:	1809      	addeq	r1, r1, r0
 80038d6:	6021      	streq	r1, [r4, #0]
 80038d8:	6054      	str	r4, [r2, #4]
 80038da:	e7ca      	b.n	8003872 <_free_r+0x22>
 80038dc:	bd38      	pop	{r3, r4, r5, pc}
 80038de:	bf00      	nop
 80038e0:	20000298 	.word	0x20000298

080038e4 <sbrk_aligned>:
 80038e4:	b570      	push	{r4, r5, r6, lr}
 80038e6:	4e0f      	ldr	r6, [pc, #60]	@ (8003924 <sbrk_aligned+0x40>)
 80038e8:	460c      	mov	r4, r1
 80038ea:	6831      	ldr	r1, [r6, #0]
 80038ec:	4605      	mov	r5, r0
 80038ee:	b911      	cbnz	r1, 80038f6 <sbrk_aligned+0x12>
 80038f0:	f000 fba6 	bl	8004040 <_sbrk_r>
 80038f4:	6030      	str	r0, [r6, #0]
 80038f6:	4621      	mov	r1, r4
 80038f8:	4628      	mov	r0, r5
 80038fa:	f000 fba1 	bl	8004040 <_sbrk_r>
 80038fe:	1c43      	adds	r3, r0, #1
 8003900:	d103      	bne.n	800390a <sbrk_aligned+0x26>
 8003902:	f04f 34ff 	mov.w	r4, #4294967295
 8003906:	4620      	mov	r0, r4
 8003908:	bd70      	pop	{r4, r5, r6, pc}
 800390a:	1cc4      	adds	r4, r0, #3
 800390c:	f024 0403 	bic.w	r4, r4, #3
 8003910:	42a0      	cmp	r0, r4
 8003912:	d0f8      	beq.n	8003906 <sbrk_aligned+0x22>
 8003914:	1a21      	subs	r1, r4, r0
 8003916:	4628      	mov	r0, r5
 8003918:	f000 fb92 	bl	8004040 <_sbrk_r>
 800391c:	3001      	adds	r0, #1
 800391e:	d1f2      	bne.n	8003906 <sbrk_aligned+0x22>
 8003920:	e7ef      	b.n	8003902 <sbrk_aligned+0x1e>
 8003922:	bf00      	nop
 8003924:	20000294 	.word	0x20000294

08003928 <_malloc_r>:
 8003928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800392c:	1ccd      	adds	r5, r1, #3
 800392e:	f025 0503 	bic.w	r5, r5, #3
 8003932:	3508      	adds	r5, #8
 8003934:	2d0c      	cmp	r5, #12
 8003936:	bf38      	it	cc
 8003938:	250c      	movcc	r5, #12
 800393a:	2d00      	cmp	r5, #0
 800393c:	4606      	mov	r6, r0
 800393e:	db01      	blt.n	8003944 <_malloc_r+0x1c>
 8003940:	42a9      	cmp	r1, r5
 8003942:	d904      	bls.n	800394e <_malloc_r+0x26>
 8003944:	230c      	movs	r3, #12
 8003946:	6033      	str	r3, [r6, #0]
 8003948:	2000      	movs	r0, #0
 800394a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800394e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a24 <_malloc_r+0xfc>
 8003952:	f000 f869 	bl	8003a28 <__malloc_lock>
 8003956:	f8d8 3000 	ldr.w	r3, [r8]
 800395a:	461c      	mov	r4, r3
 800395c:	bb44      	cbnz	r4, 80039b0 <_malloc_r+0x88>
 800395e:	4629      	mov	r1, r5
 8003960:	4630      	mov	r0, r6
 8003962:	f7ff ffbf 	bl	80038e4 <sbrk_aligned>
 8003966:	1c43      	adds	r3, r0, #1
 8003968:	4604      	mov	r4, r0
 800396a:	d158      	bne.n	8003a1e <_malloc_r+0xf6>
 800396c:	f8d8 4000 	ldr.w	r4, [r8]
 8003970:	4627      	mov	r7, r4
 8003972:	2f00      	cmp	r7, #0
 8003974:	d143      	bne.n	80039fe <_malloc_r+0xd6>
 8003976:	2c00      	cmp	r4, #0
 8003978:	d04b      	beq.n	8003a12 <_malloc_r+0xea>
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	4639      	mov	r1, r7
 800397e:	4630      	mov	r0, r6
 8003980:	eb04 0903 	add.w	r9, r4, r3
 8003984:	f000 fb5c 	bl	8004040 <_sbrk_r>
 8003988:	4581      	cmp	r9, r0
 800398a:	d142      	bne.n	8003a12 <_malloc_r+0xea>
 800398c:	6821      	ldr	r1, [r4, #0]
 800398e:	1a6d      	subs	r5, r5, r1
 8003990:	4629      	mov	r1, r5
 8003992:	4630      	mov	r0, r6
 8003994:	f7ff ffa6 	bl	80038e4 <sbrk_aligned>
 8003998:	3001      	adds	r0, #1
 800399a:	d03a      	beq.n	8003a12 <_malloc_r+0xea>
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	442b      	add	r3, r5
 80039a0:	6023      	str	r3, [r4, #0]
 80039a2:	f8d8 3000 	ldr.w	r3, [r8]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	bb62      	cbnz	r2, 8003a04 <_malloc_r+0xdc>
 80039aa:	f8c8 7000 	str.w	r7, [r8]
 80039ae:	e00f      	b.n	80039d0 <_malloc_r+0xa8>
 80039b0:	6822      	ldr	r2, [r4, #0]
 80039b2:	1b52      	subs	r2, r2, r5
 80039b4:	d420      	bmi.n	80039f8 <_malloc_r+0xd0>
 80039b6:	2a0b      	cmp	r2, #11
 80039b8:	d917      	bls.n	80039ea <_malloc_r+0xc2>
 80039ba:	1961      	adds	r1, r4, r5
 80039bc:	42a3      	cmp	r3, r4
 80039be:	6025      	str	r5, [r4, #0]
 80039c0:	bf18      	it	ne
 80039c2:	6059      	strne	r1, [r3, #4]
 80039c4:	6863      	ldr	r3, [r4, #4]
 80039c6:	bf08      	it	eq
 80039c8:	f8c8 1000 	streq.w	r1, [r8]
 80039cc:	5162      	str	r2, [r4, r5]
 80039ce:	604b      	str	r3, [r1, #4]
 80039d0:	4630      	mov	r0, r6
 80039d2:	f000 f82f 	bl	8003a34 <__malloc_unlock>
 80039d6:	f104 000b 	add.w	r0, r4, #11
 80039da:	1d23      	adds	r3, r4, #4
 80039dc:	f020 0007 	bic.w	r0, r0, #7
 80039e0:	1ac2      	subs	r2, r0, r3
 80039e2:	bf1c      	itt	ne
 80039e4:	1a1b      	subne	r3, r3, r0
 80039e6:	50a3      	strne	r3, [r4, r2]
 80039e8:	e7af      	b.n	800394a <_malloc_r+0x22>
 80039ea:	6862      	ldr	r2, [r4, #4]
 80039ec:	42a3      	cmp	r3, r4
 80039ee:	bf0c      	ite	eq
 80039f0:	f8c8 2000 	streq.w	r2, [r8]
 80039f4:	605a      	strne	r2, [r3, #4]
 80039f6:	e7eb      	b.n	80039d0 <_malloc_r+0xa8>
 80039f8:	4623      	mov	r3, r4
 80039fa:	6864      	ldr	r4, [r4, #4]
 80039fc:	e7ae      	b.n	800395c <_malloc_r+0x34>
 80039fe:	463c      	mov	r4, r7
 8003a00:	687f      	ldr	r7, [r7, #4]
 8003a02:	e7b6      	b.n	8003972 <_malloc_r+0x4a>
 8003a04:	461a      	mov	r2, r3
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	42a3      	cmp	r3, r4
 8003a0a:	d1fb      	bne.n	8003a04 <_malloc_r+0xdc>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	6053      	str	r3, [r2, #4]
 8003a10:	e7de      	b.n	80039d0 <_malloc_r+0xa8>
 8003a12:	230c      	movs	r3, #12
 8003a14:	6033      	str	r3, [r6, #0]
 8003a16:	4630      	mov	r0, r6
 8003a18:	f000 f80c 	bl	8003a34 <__malloc_unlock>
 8003a1c:	e794      	b.n	8003948 <_malloc_r+0x20>
 8003a1e:	6005      	str	r5, [r0, #0]
 8003a20:	e7d6      	b.n	80039d0 <_malloc_r+0xa8>
 8003a22:	bf00      	nop
 8003a24:	20000298 	.word	0x20000298

08003a28 <__malloc_lock>:
 8003a28:	4801      	ldr	r0, [pc, #4]	@ (8003a30 <__malloc_lock+0x8>)
 8003a2a:	f7ff bf0f 	b.w	800384c <__retarget_lock_acquire_recursive>
 8003a2e:	bf00      	nop
 8003a30:	20000290 	.word	0x20000290

08003a34 <__malloc_unlock>:
 8003a34:	4801      	ldr	r0, [pc, #4]	@ (8003a3c <__malloc_unlock+0x8>)
 8003a36:	f7ff bf0a 	b.w	800384e <__retarget_lock_release_recursive>
 8003a3a:	bf00      	nop
 8003a3c:	20000290 	.word	0x20000290

08003a40 <__ssputs_r>:
 8003a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a44:	688e      	ldr	r6, [r1, #8]
 8003a46:	461f      	mov	r7, r3
 8003a48:	42be      	cmp	r6, r7
 8003a4a:	680b      	ldr	r3, [r1, #0]
 8003a4c:	4682      	mov	sl, r0
 8003a4e:	460c      	mov	r4, r1
 8003a50:	4690      	mov	r8, r2
 8003a52:	d82d      	bhi.n	8003ab0 <__ssputs_r+0x70>
 8003a54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003a5c:	d026      	beq.n	8003aac <__ssputs_r+0x6c>
 8003a5e:	6965      	ldr	r5, [r4, #20]
 8003a60:	6909      	ldr	r1, [r1, #16]
 8003a62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a66:	eba3 0901 	sub.w	r9, r3, r1
 8003a6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a6e:	1c7b      	adds	r3, r7, #1
 8003a70:	444b      	add	r3, r9
 8003a72:	106d      	asrs	r5, r5, #1
 8003a74:	429d      	cmp	r5, r3
 8003a76:	bf38      	it	cc
 8003a78:	461d      	movcc	r5, r3
 8003a7a:	0553      	lsls	r3, r2, #21
 8003a7c:	d527      	bpl.n	8003ace <__ssputs_r+0x8e>
 8003a7e:	4629      	mov	r1, r5
 8003a80:	f7ff ff52 	bl	8003928 <_malloc_r>
 8003a84:	4606      	mov	r6, r0
 8003a86:	b360      	cbz	r0, 8003ae2 <__ssputs_r+0xa2>
 8003a88:	6921      	ldr	r1, [r4, #16]
 8003a8a:	464a      	mov	r2, r9
 8003a8c:	f000 fae8 	bl	8004060 <memcpy>
 8003a90:	89a3      	ldrh	r3, [r4, #12]
 8003a92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003a96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a9a:	81a3      	strh	r3, [r4, #12]
 8003a9c:	6126      	str	r6, [r4, #16]
 8003a9e:	6165      	str	r5, [r4, #20]
 8003aa0:	444e      	add	r6, r9
 8003aa2:	eba5 0509 	sub.w	r5, r5, r9
 8003aa6:	6026      	str	r6, [r4, #0]
 8003aa8:	60a5      	str	r5, [r4, #8]
 8003aaa:	463e      	mov	r6, r7
 8003aac:	42be      	cmp	r6, r7
 8003aae:	d900      	bls.n	8003ab2 <__ssputs_r+0x72>
 8003ab0:	463e      	mov	r6, r7
 8003ab2:	6820      	ldr	r0, [r4, #0]
 8003ab4:	4632      	mov	r2, r6
 8003ab6:	4641      	mov	r1, r8
 8003ab8:	f000 faa8 	bl	800400c <memmove>
 8003abc:	68a3      	ldr	r3, [r4, #8]
 8003abe:	1b9b      	subs	r3, r3, r6
 8003ac0:	60a3      	str	r3, [r4, #8]
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	4433      	add	r3, r6
 8003ac6:	6023      	str	r3, [r4, #0]
 8003ac8:	2000      	movs	r0, #0
 8003aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ace:	462a      	mov	r2, r5
 8003ad0:	f000 fad4 	bl	800407c <_realloc_r>
 8003ad4:	4606      	mov	r6, r0
 8003ad6:	2800      	cmp	r0, #0
 8003ad8:	d1e0      	bne.n	8003a9c <__ssputs_r+0x5c>
 8003ada:	6921      	ldr	r1, [r4, #16]
 8003adc:	4650      	mov	r0, sl
 8003ade:	f7ff feb7 	bl	8003850 <_free_r>
 8003ae2:	230c      	movs	r3, #12
 8003ae4:	f8ca 3000 	str.w	r3, [sl]
 8003ae8:	89a3      	ldrh	r3, [r4, #12]
 8003aea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003aee:	81a3      	strh	r3, [r4, #12]
 8003af0:	f04f 30ff 	mov.w	r0, #4294967295
 8003af4:	e7e9      	b.n	8003aca <__ssputs_r+0x8a>
	...

08003af8 <_svfiprintf_r>:
 8003af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003afc:	4698      	mov	r8, r3
 8003afe:	898b      	ldrh	r3, [r1, #12]
 8003b00:	061b      	lsls	r3, r3, #24
 8003b02:	b09d      	sub	sp, #116	@ 0x74
 8003b04:	4607      	mov	r7, r0
 8003b06:	460d      	mov	r5, r1
 8003b08:	4614      	mov	r4, r2
 8003b0a:	d510      	bpl.n	8003b2e <_svfiprintf_r+0x36>
 8003b0c:	690b      	ldr	r3, [r1, #16]
 8003b0e:	b973      	cbnz	r3, 8003b2e <_svfiprintf_r+0x36>
 8003b10:	2140      	movs	r1, #64	@ 0x40
 8003b12:	f7ff ff09 	bl	8003928 <_malloc_r>
 8003b16:	6028      	str	r0, [r5, #0]
 8003b18:	6128      	str	r0, [r5, #16]
 8003b1a:	b930      	cbnz	r0, 8003b2a <_svfiprintf_r+0x32>
 8003b1c:	230c      	movs	r3, #12
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	f04f 30ff 	mov.w	r0, #4294967295
 8003b24:	b01d      	add	sp, #116	@ 0x74
 8003b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b2a:	2340      	movs	r3, #64	@ 0x40
 8003b2c:	616b      	str	r3, [r5, #20]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b32:	2320      	movs	r3, #32
 8003b34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b38:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b3c:	2330      	movs	r3, #48	@ 0x30
 8003b3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003cdc <_svfiprintf_r+0x1e4>
 8003b42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b46:	f04f 0901 	mov.w	r9, #1
 8003b4a:	4623      	mov	r3, r4
 8003b4c:	469a      	mov	sl, r3
 8003b4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b52:	b10a      	cbz	r2, 8003b58 <_svfiprintf_r+0x60>
 8003b54:	2a25      	cmp	r2, #37	@ 0x25
 8003b56:	d1f9      	bne.n	8003b4c <_svfiprintf_r+0x54>
 8003b58:	ebba 0b04 	subs.w	fp, sl, r4
 8003b5c:	d00b      	beq.n	8003b76 <_svfiprintf_r+0x7e>
 8003b5e:	465b      	mov	r3, fp
 8003b60:	4622      	mov	r2, r4
 8003b62:	4629      	mov	r1, r5
 8003b64:	4638      	mov	r0, r7
 8003b66:	f7ff ff6b 	bl	8003a40 <__ssputs_r>
 8003b6a:	3001      	adds	r0, #1
 8003b6c:	f000 80a7 	beq.w	8003cbe <_svfiprintf_r+0x1c6>
 8003b70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b72:	445a      	add	r2, fp
 8003b74:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b76:	f89a 3000 	ldrb.w	r3, [sl]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 809f 	beq.w	8003cbe <_svfiprintf_r+0x1c6>
 8003b80:	2300      	movs	r3, #0
 8003b82:	f04f 32ff 	mov.w	r2, #4294967295
 8003b86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b8a:	f10a 0a01 	add.w	sl, sl, #1
 8003b8e:	9304      	str	r3, [sp, #16]
 8003b90:	9307      	str	r3, [sp, #28]
 8003b92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b96:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b98:	4654      	mov	r4, sl
 8003b9a:	2205      	movs	r2, #5
 8003b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ba0:	484e      	ldr	r0, [pc, #312]	@ (8003cdc <_svfiprintf_r+0x1e4>)
 8003ba2:	f7fc fb55 	bl	8000250 <memchr>
 8003ba6:	9a04      	ldr	r2, [sp, #16]
 8003ba8:	b9d8      	cbnz	r0, 8003be2 <_svfiprintf_r+0xea>
 8003baa:	06d0      	lsls	r0, r2, #27
 8003bac:	bf44      	itt	mi
 8003bae:	2320      	movmi	r3, #32
 8003bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bb4:	0711      	lsls	r1, r2, #28
 8003bb6:	bf44      	itt	mi
 8003bb8:	232b      	movmi	r3, #43	@ 0x2b
 8003bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8003bc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bc4:	d015      	beq.n	8003bf2 <_svfiprintf_r+0xfa>
 8003bc6:	9a07      	ldr	r2, [sp, #28]
 8003bc8:	4654      	mov	r4, sl
 8003bca:	2000      	movs	r0, #0
 8003bcc:	f04f 0c0a 	mov.w	ip, #10
 8003bd0:	4621      	mov	r1, r4
 8003bd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bd6:	3b30      	subs	r3, #48	@ 0x30
 8003bd8:	2b09      	cmp	r3, #9
 8003bda:	d94b      	bls.n	8003c74 <_svfiprintf_r+0x17c>
 8003bdc:	b1b0      	cbz	r0, 8003c0c <_svfiprintf_r+0x114>
 8003bde:	9207      	str	r2, [sp, #28]
 8003be0:	e014      	b.n	8003c0c <_svfiprintf_r+0x114>
 8003be2:	eba0 0308 	sub.w	r3, r0, r8
 8003be6:	fa09 f303 	lsl.w	r3, r9, r3
 8003bea:	4313      	orrs	r3, r2
 8003bec:	9304      	str	r3, [sp, #16]
 8003bee:	46a2      	mov	sl, r4
 8003bf0:	e7d2      	b.n	8003b98 <_svfiprintf_r+0xa0>
 8003bf2:	9b03      	ldr	r3, [sp, #12]
 8003bf4:	1d19      	adds	r1, r3, #4
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	9103      	str	r1, [sp, #12]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	bfbb      	ittet	lt
 8003bfe:	425b      	neglt	r3, r3
 8003c00:	f042 0202 	orrlt.w	r2, r2, #2
 8003c04:	9307      	strge	r3, [sp, #28]
 8003c06:	9307      	strlt	r3, [sp, #28]
 8003c08:	bfb8      	it	lt
 8003c0a:	9204      	strlt	r2, [sp, #16]
 8003c0c:	7823      	ldrb	r3, [r4, #0]
 8003c0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c10:	d10a      	bne.n	8003c28 <_svfiprintf_r+0x130>
 8003c12:	7863      	ldrb	r3, [r4, #1]
 8003c14:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c16:	d132      	bne.n	8003c7e <_svfiprintf_r+0x186>
 8003c18:	9b03      	ldr	r3, [sp, #12]
 8003c1a:	1d1a      	adds	r2, r3, #4
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	9203      	str	r2, [sp, #12]
 8003c20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c24:	3402      	adds	r4, #2
 8003c26:	9305      	str	r3, [sp, #20]
 8003c28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003cec <_svfiprintf_r+0x1f4>
 8003c2c:	7821      	ldrb	r1, [r4, #0]
 8003c2e:	2203      	movs	r2, #3
 8003c30:	4650      	mov	r0, sl
 8003c32:	f7fc fb0d 	bl	8000250 <memchr>
 8003c36:	b138      	cbz	r0, 8003c48 <_svfiprintf_r+0x150>
 8003c38:	9b04      	ldr	r3, [sp, #16]
 8003c3a:	eba0 000a 	sub.w	r0, r0, sl
 8003c3e:	2240      	movs	r2, #64	@ 0x40
 8003c40:	4082      	lsls	r2, r0
 8003c42:	4313      	orrs	r3, r2
 8003c44:	3401      	adds	r4, #1
 8003c46:	9304      	str	r3, [sp, #16]
 8003c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c4c:	4824      	ldr	r0, [pc, #144]	@ (8003ce0 <_svfiprintf_r+0x1e8>)
 8003c4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c52:	2206      	movs	r2, #6
 8003c54:	f7fc fafc 	bl	8000250 <memchr>
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	d036      	beq.n	8003cca <_svfiprintf_r+0x1d2>
 8003c5c:	4b21      	ldr	r3, [pc, #132]	@ (8003ce4 <_svfiprintf_r+0x1ec>)
 8003c5e:	bb1b      	cbnz	r3, 8003ca8 <_svfiprintf_r+0x1b0>
 8003c60:	9b03      	ldr	r3, [sp, #12]
 8003c62:	3307      	adds	r3, #7
 8003c64:	f023 0307 	bic.w	r3, r3, #7
 8003c68:	3308      	adds	r3, #8
 8003c6a:	9303      	str	r3, [sp, #12]
 8003c6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c6e:	4433      	add	r3, r6
 8003c70:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c72:	e76a      	b.n	8003b4a <_svfiprintf_r+0x52>
 8003c74:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c78:	460c      	mov	r4, r1
 8003c7a:	2001      	movs	r0, #1
 8003c7c:	e7a8      	b.n	8003bd0 <_svfiprintf_r+0xd8>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	3401      	adds	r4, #1
 8003c82:	9305      	str	r3, [sp, #20]
 8003c84:	4619      	mov	r1, r3
 8003c86:	f04f 0c0a 	mov.w	ip, #10
 8003c8a:	4620      	mov	r0, r4
 8003c8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c90:	3a30      	subs	r2, #48	@ 0x30
 8003c92:	2a09      	cmp	r2, #9
 8003c94:	d903      	bls.n	8003c9e <_svfiprintf_r+0x1a6>
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0c6      	beq.n	8003c28 <_svfiprintf_r+0x130>
 8003c9a:	9105      	str	r1, [sp, #20]
 8003c9c:	e7c4      	b.n	8003c28 <_svfiprintf_r+0x130>
 8003c9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ca2:	4604      	mov	r4, r0
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e7f0      	b.n	8003c8a <_svfiprintf_r+0x192>
 8003ca8:	ab03      	add	r3, sp, #12
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	462a      	mov	r2, r5
 8003cae:	4b0e      	ldr	r3, [pc, #56]	@ (8003ce8 <_svfiprintf_r+0x1f0>)
 8003cb0:	a904      	add	r1, sp, #16
 8003cb2:	4638      	mov	r0, r7
 8003cb4:	f3af 8000 	nop.w
 8003cb8:	1c42      	adds	r2, r0, #1
 8003cba:	4606      	mov	r6, r0
 8003cbc:	d1d6      	bne.n	8003c6c <_svfiprintf_r+0x174>
 8003cbe:	89ab      	ldrh	r3, [r5, #12]
 8003cc0:	065b      	lsls	r3, r3, #25
 8003cc2:	f53f af2d 	bmi.w	8003b20 <_svfiprintf_r+0x28>
 8003cc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003cc8:	e72c      	b.n	8003b24 <_svfiprintf_r+0x2c>
 8003cca:	ab03      	add	r3, sp, #12
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	462a      	mov	r2, r5
 8003cd0:	4b05      	ldr	r3, [pc, #20]	@ (8003ce8 <_svfiprintf_r+0x1f0>)
 8003cd2:	a904      	add	r1, sp, #16
 8003cd4:	4638      	mov	r0, r7
 8003cd6:	f000 f879 	bl	8003dcc <_printf_i>
 8003cda:	e7ed      	b.n	8003cb8 <_svfiprintf_r+0x1c0>
 8003cdc:	08004120 	.word	0x08004120
 8003ce0:	0800412a 	.word	0x0800412a
 8003ce4:	00000000 	.word	0x00000000
 8003ce8:	08003a41 	.word	0x08003a41
 8003cec:	08004126 	.word	0x08004126

08003cf0 <_printf_common>:
 8003cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf4:	4616      	mov	r6, r2
 8003cf6:	4698      	mov	r8, r3
 8003cf8:	688a      	ldr	r2, [r1, #8]
 8003cfa:	690b      	ldr	r3, [r1, #16]
 8003cfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d00:	4293      	cmp	r3, r2
 8003d02:	bfb8      	it	lt
 8003d04:	4613      	movlt	r3, r2
 8003d06:	6033      	str	r3, [r6, #0]
 8003d08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d0c:	4607      	mov	r7, r0
 8003d0e:	460c      	mov	r4, r1
 8003d10:	b10a      	cbz	r2, 8003d16 <_printf_common+0x26>
 8003d12:	3301      	adds	r3, #1
 8003d14:	6033      	str	r3, [r6, #0]
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	0699      	lsls	r1, r3, #26
 8003d1a:	bf42      	ittt	mi
 8003d1c:	6833      	ldrmi	r3, [r6, #0]
 8003d1e:	3302      	addmi	r3, #2
 8003d20:	6033      	strmi	r3, [r6, #0]
 8003d22:	6825      	ldr	r5, [r4, #0]
 8003d24:	f015 0506 	ands.w	r5, r5, #6
 8003d28:	d106      	bne.n	8003d38 <_printf_common+0x48>
 8003d2a:	f104 0a19 	add.w	sl, r4, #25
 8003d2e:	68e3      	ldr	r3, [r4, #12]
 8003d30:	6832      	ldr	r2, [r6, #0]
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	42ab      	cmp	r3, r5
 8003d36:	dc26      	bgt.n	8003d86 <_printf_common+0x96>
 8003d38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d3c:	6822      	ldr	r2, [r4, #0]
 8003d3e:	3b00      	subs	r3, #0
 8003d40:	bf18      	it	ne
 8003d42:	2301      	movne	r3, #1
 8003d44:	0692      	lsls	r2, r2, #26
 8003d46:	d42b      	bmi.n	8003da0 <_printf_common+0xb0>
 8003d48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d4c:	4641      	mov	r1, r8
 8003d4e:	4638      	mov	r0, r7
 8003d50:	47c8      	blx	r9
 8003d52:	3001      	adds	r0, #1
 8003d54:	d01e      	beq.n	8003d94 <_printf_common+0xa4>
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	6922      	ldr	r2, [r4, #16]
 8003d5a:	f003 0306 	and.w	r3, r3, #6
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	bf02      	ittt	eq
 8003d62:	68e5      	ldreq	r5, [r4, #12]
 8003d64:	6833      	ldreq	r3, [r6, #0]
 8003d66:	1aed      	subeq	r5, r5, r3
 8003d68:	68a3      	ldr	r3, [r4, #8]
 8003d6a:	bf0c      	ite	eq
 8003d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d70:	2500      	movne	r5, #0
 8003d72:	4293      	cmp	r3, r2
 8003d74:	bfc4      	itt	gt
 8003d76:	1a9b      	subgt	r3, r3, r2
 8003d78:	18ed      	addgt	r5, r5, r3
 8003d7a:	2600      	movs	r6, #0
 8003d7c:	341a      	adds	r4, #26
 8003d7e:	42b5      	cmp	r5, r6
 8003d80:	d11a      	bne.n	8003db8 <_printf_common+0xc8>
 8003d82:	2000      	movs	r0, #0
 8003d84:	e008      	b.n	8003d98 <_printf_common+0xa8>
 8003d86:	2301      	movs	r3, #1
 8003d88:	4652      	mov	r2, sl
 8003d8a:	4641      	mov	r1, r8
 8003d8c:	4638      	mov	r0, r7
 8003d8e:	47c8      	blx	r9
 8003d90:	3001      	adds	r0, #1
 8003d92:	d103      	bne.n	8003d9c <_printf_common+0xac>
 8003d94:	f04f 30ff 	mov.w	r0, #4294967295
 8003d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d9c:	3501      	adds	r5, #1
 8003d9e:	e7c6      	b.n	8003d2e <_printf_common+0x3e>
 8003da0:	18e1      	adds	r1, r4, r3
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	2030      	movs	r0, #48	@ 0x30
 8003da6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003daa:	4422      	add	r2, r4
 8003dac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003db0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003db4:	3302      	adds	r3, #2
 8003db6:	e7c7      	b.n	8003d48 <_printf_common+0x58>
 8003db8:	2301      	movs	r3, #1
 8003dba:	4622      	mov	r2, r4
 8003dbc:	4641      	mov	r1, r8
 8003dbe:	4638      	mov	r0, r7
 8003dc0:	47c8      	blx	r9
 8003dc2:	3001      	adds	r0, #1
 8003dc4:	d0e6      	beq.n	8003d94 <_printf_common+0xa4>
 8003dc6:	3601      	adds	r6, #1
 8003dc8:	e7d9      	b.n	8003d7e <_printf_common+0x8e>
	...

08003dcc <_printf_i>:
 8003dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd0:	7e0f      	ldrb	r7, [r1, #24]
 8003dd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003dd4:	2f78      	cmp	r7, #120	@ 0x78
 8003dd6:	4691      	mov	r9, r2
 8003dd8:	4680      	mov	r8, r0
 8003dda:	460c      	mov	r4, r1
 8003ddc:	469a      	mov	sl, r3
 8003dde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003de2:	d807      	bhi.n	8003df4 <_printf_i+0x28>
 8003de4:	2f62      	cmp	r7, #98	@ 0x62
 8003de6:	d80a      	bhi.n	8003dfe <_printf_i+0x32>
 8003de8:	2f00      	cmp	r7, #0
 8003dea:	f000 80d2 	beq.w	8003f92 <_printf_i+0x1c6>
 8003dee:	2f58      	cmp	r7, #88	@ 0x58
 8003df0:	f000 80b9 	beq.w	8003f66 <_printf_i+0x19a>
 8003df4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003df8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003dfc:	e03a      	b.n	8003e74 <_printf_i+0xa8>
 8003dfe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e02:	2b15      	cmp	r3, #21
 8003e04:	d8f6      	bhi.n	8003df4 <_printf_i+0x28>
 8003e06:	a101      	add	r1, pc, #4	@ (adr r1, 8003e0c <_printf_i+0x40>)
 8003e08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e0c:	08003e65 	.word	0x08003e65
 8003e10:	08003e79 	.word	0x08003e79
 8003e14:	08003df5 	.word	0x08003df5
 8003e18:	08003df5 	.word	0x08003df5
 8003e1c:	08003df5 	.word	0x08003df5
 8003e20:	08003df5 	.word	0x08003df5
 8003e24:	08003e79 	.word	0x08003e79
 8003e28:	08003df5 	.word	0x08003df5
 8003e2c:	08003df5 	.word	0x08003df5
 8003e30:	08003df5 	.word	0x08003df5
 8003e34:	08003df5 	.word	0x08003df5
 8003e38:	08003f79 	.word	0x08003f79
 8003e3c:	08003ea3 	.word	0x08003ea3
 8003e40:	08003f33 	.word	0x08003f33
 8003e44:	08003df5 	.word	0x08003df5
 8003e48:	08003df5 	.word	0x08003df5
 8003e4c:	08003f9b 	.word	0x08003f9b
 8003e50:	08003df5 	.word	0x08003df5
 8003e54:	08003ea3 	.word	0x08003ea3
 8003e58:	08003df5 	.word	0x08003df5
 8003e5c:	08003df5 	.word	0x08003df5
 8003e60:	08003f3b 	.word	0x08003f3b
 8003e64:	6833      	ldr	r3, [r6, #0]
 8003e66:	1d1a      	adds	r2, r3, #4
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6032      	str	r2, [r6, #0]
 8003e6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e74:	2301      	movs	r3, #1
 8003e76:	e09d      	b.n	8003fb4 <_printf_i+0x1e8>
 8003e78:	6833      	ldr	r3, [r6, #0]
 8003e7a:	6820      	ldr	r0, [r4, #0]
 8003e7c:	1d19      	adds	r1, r3, #4
 8003e7e:	6031      	str	r1, [r6, #0]
 8003e80:	0606      	lsls	r6, r0, #24
 8003e82:	d501      	bpl.n	8003e88 <_printf_i+0xbc>
 8003e84:	681d      	ldr	r5, [r3, #0]
 8003e86:	e003      	b.n	8003e90 <_printf_i+0xc4>
 8003e88:	0645      	lsls	r5, r0, #25
 8003e8a:	d5fb      	bpl.n	8003e84 <_printf_i+0xb8>
 8003e8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e90:	2d00      	cmp	r5, #0
 8003e92:	da03      	bge.n	8003e9c <_printf_i+0xd0>
 8003e94:	232d      	movs	r3, #45	@ 0x2d
 8003e96:	426d      	negs	r5, r5
 8003e98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e9c:	4859      	ldr	r0, [pc, #356]	@ (8004004 <_printf_i+0x238>)
 8003e9e:	230a      	movs	r3, #10
 8003ea0:	e011      	b.n	8003ec6 <_printf_i+0xfa>
 8003ea2:	6821      	ldr	r1, [r4, #0]
 8003ea4:	6833      	ldr	r3, [r6, #0]
 8003ea6:	0608      	lsls	r0, r1, #24
 8003ea8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003eac:	d402      	bmi.n	8003eb4 <_printf_i+0xe8>
 8003eae:	0649      	lsls	r1, r1, #25
 8003eb0:	bf48      	it	mi
 8003eb2:	b2ad      	uxthmi	r5, r5
 8003eb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003eb6:	4853      	ldr	r0, [pc, #332]	@ (8004004 <_printf_i+0x238>)
 8003eb8:	6033      	str	r3, [r6, #0]
 8003eba:	bf14      	ite	ne
 8003ebc:	230a      	movne	r3, #10
 8003ebe:	2308      	moveq	r3, #8
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ec6:	6866      	ldr	r6, [r4, #4]
 8003ec8:	60a6      	str	r6, [r4, #8]
 8003eca:	2e00      	cmp	r6, #0
 8003ecc:	bfa2      	ittt	ge
 8003ece:	6821      	ldrge	r1, [r4, #0]
 8003ed0:	f021 0104 	bicge.w	r1, r1, #4
 8003ed4:	6021      	strge	r1, [r4, #0]
 8003ed6:	b90d      	cbnz	r5, 8003edc <_printf_i+0x110>
 8003ed8:	2e00      	cmp	r6, #0
 8003eda:	d04b      	beq.n	8003f74 <_printf_i+0x1a8>
 8003edc:	4616      	mov	r6, r2
 8003ede:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ee2:	fb03 5711 	mls	r7, r3, r1, r5
 8003ee6:	5dc7      	ldrb	r7, [r0, r7]
 8003ee8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003eec:	462f      	mov	r7, r5
 8003eee:	42bb      	cmp	r3, r7
 8003ef0:	460d      	mov	r5, r1
 8003ef2:	d9f4      	bls.n	8003ede <_printf_i+0x112>
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d10b      	bne.n	8003f10 <_printf_i+0x144>
 8003ef8:	6823      	ldr	r3, [r4, #0]
 8003efa:	07df      	lsls	r7, r3, #31
 8003efc:	d508      	bpl.n	8003f10 <_printf_i+0x144>
 8003efe:	6923      	ldr	r3, [r4, #16]
 8003f00:	6861      	ldr	r1, [r4, #4]
 8003f02:	4299      	cmp	r1, r3
 8003f04:	bfde      	ittt	le
 8003f06:	2330      	movle	r3, #48	@ 0x30
 8003f08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f10:	1b92      	subs	r2, r2, r6
 8003f12:	6122      	str	r2, [r4, #16]
 8003f14:	f8cd a000 	str.w	sl, [sp]
 8003f18:	464b      	mov	r3, r9
 8003f1a:	aa03      	add	r2, sp, #12
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	4640      	mov	r0, r8
 8003f20:	f7ff fee6 	bl	8003cf0 <_printf_common>
 8003f24:	3001      	adds	r0, #1
 8003f26:	d14a      	bne.n	8003fbe <_printf_i+0x1f2>
 8003f28:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2c:	b004      	add	sp, #16
 8003f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	f043 0320 	orr.w	r3, r3, #32
 8003f38:	6023      	str	r3, [r4, #0]
 8003f3a:	4833      	ldr	r0, [pc, #204]	@ (8004008 <_printf_i+0x23c>)
 8003f3c:	2778      	movs	r7, #120	@ 0x78
 8003f3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	6831      	ldr	r1, [r6, #0]
 8003f46:	061f      	lsls	r7, r3, #24
 8003f48:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f4c:	d402      	bmi.n	8003f54 <_printf_i+0x188>
 8003f4e:	065f      	lsls	r7, r3, #25
 8003f50:	bf48      	it	mi
 8003f52:	b2ad      	uxthmi	r5, r5
 8003f54:	6031      	str	r1, [r6, #0]
 8003f56:	07d9      	lsls	r1, r3, #31
 8003f58:	bf44      	itt	mi
 8003f5a:	f043 0320 	orrmi.w	r3, r3, #32
 8003f5e:	6023      	strmi	r3, [r4, #0]
 8003f60:	b11d      	cbz	r5, 8003f6a <_printf_i+0x19e>
 8003f62:	2310      	movs	r3, #16
 8003f64:	e7ac      	b.n	8003ec0 <_printf_i+0xf4>
 8003f66:	4827      	ldr	r0, [pc, #156]	@ (8004004 <_printf_i+0x238>)
 8003f68:	e7e9      	b.n	8003f3e <_printf_i+0x172>
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	f023 0320 	bic.w	r3, r3, #32
 8003f70:	6023      	str	r3, [r4, #0]
 8003f72:	e7f6      	b.n	8003f62 <_printf_i+0x196>
 8003f74:	4616      	mov	r6, r2
 8003f76:	e7bd      	b.n	8003ef4 <_printf_i+0x128>
 8003f78:	6833      	ldr	r3, [r6, #0]
 8003f7a:	6825      	ldr	r5, [r4, #0]
 8003f7c:	6961      	ldr	r1, [r4, #20]
 8003f7e:	1d18      	adds	r0, r3, #4
 8003f80:	6030      	str	r0, [r6, #0]
 8003f82:	062e      	lsls	r6, r5, #24
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	d501      	bpl.n	8003f8c <_printf_i+0x1c0>
 8003f88:	6019      	str	r1, [r3, #0]
 8003f8a:	e002      	b.n	8003f92 <_printf_i+0x1c6>
 8003f8c:	0668      	lsls	r0, r5, #25
 8003f8e:	d5fb      	bpl.n	8003f88 <_printf_i+0x1bc>
 8003f90:	8019      	strh	r1, [r3, #0]
 8003f92:	2300      	movs	r3, #0
 8003f94:	6123      	str	r3, [r4, #16]
 8003f96:	4616      	mov	r6, r2
 8003f98:	e7bc      	b.n	8003f14 <_printf_i+0x148>
 8003f9a:	6833      	ldr	r3, [r6, #0]
 8003f9c:	1d1a      	adds	r2, r3, #4
 8003f9e:	6032      	str	r2, [r6, #0]
 8003fa0:	681e      	ldr	r6, [r3, #0]
 8003fa2:	6862      	ldr	r2, [r4, #4]
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	f7fc f952 	bl	8000250 <memchr>
 8003fac:	b108      	cbz	r0, 8003fb2 <_printf_i+0x1e6>
 8003fae:	1b80      	subs	r0, r0, r6
 8003fb0:	6060      	str	r0, [r4, #4]
 8003fb2:	6863      	ldr	r3, [r4, #4]
 8003fb4:	6123      	str	r3, [r4, #16]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fbc:	e7aa      	b.n	8003f14 <_printf_i+0x148>
 8003fbe:	6923      	ldr	r3, [r4, #16]
 8003fc0:	4632      	mov	r2, r6
 8003fc2:	4649      	mov	r1, r9
 8003fc4:	4640      	mov	r0, r8
 8003fc6:	47d0      	blx	sl
 8003fc8:	3001      	adds	r0, #1
 8003fca:	d0ad      	beq.n	8003f28 <_printf_i+0x15c>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	079b      	lsls	r3, r3, #30
 8003fd0:	d413      	bmi.n	8003ffa <_printf_i+0x22e>
 8003fd2:	68e0      	ldr	r0, [r4, #12]
 8003fd4:	9b03      	ldr	r3, [sp, #12]
 8003fd6:	4298      	cmp	r0, r3
 8003fd8:	bfb8      	it	lt
 8003fda:	4618      	movlt	r0, r3
 8003fdc:	e7a6      	b.n	8003f2c <_printf_i+0x160>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	4632      	mov	r2, r6
 8003fe2:	4649      	mov	r1, r9
 8003fe4:	4640      	mov	r0, r8
 8003fe6:	47d0      	blx	sl
 8003fe8:	3001      	adds	r0, #1
 8003fea:	d09d      	beq.n	8003f28 <_printf_i+0x15c>
 8003fec:	3501      	adds	r5, #1
 8003fee:	68e3      	ldr	r3, [r4, #12]
 8003ff0:	9903      	ldr	r1, [sp, #12]
 8003ff2:	1a5b      	subs	r3, r3, r1
 8003ff4:	42ab      	cmp	r3, r5
 8003ff6:	dcf2      	bgt.n	8003fde <_printf_i+0x212>
 8003ff8:	e7eb      	b.n	8003fd2 <_printf_i+0x206>
 8003ffa:	2500      	movs	r5, #0
 8003ffc:	f104 0619 	add.w	r6, r4, #25
 8004000:	e7f5      	b.n	8003fee <_printf_i+0x222>
 8004002:	bf00      	nop
 8004004:	08004131 	.word	0x08004131
 8004008:	08004142 	.word	0x08004142

0800400c <memmove>:
 800400c:	4288      	cmp	r0, r1
 800400e:	b510      	push	{r4, lr}
 8004010:	eb01 0402 	add.w	r4, r1, r2
 8004014:	d902      	bls.n	800401c <memmove+0x10>
 8004016:	4284      	cmp	r4, r0
 8004018:	4623      	mov	r3, r4
 800401a:	d807      	bhi.n	800402c <memmove+0x20>
 800401c:	1e43      	subs	r3, r0, #1
 800401e:	42a1      	cmp	r1, r4
 8004020:	d008      	beq.n	8004034 <memmove+0x28>
 8004022:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004026:	f803 2f01 	strb.w	r2, [r3, #1]!
 800402a:	e7f8      	b.n	800401e <memmove+0x12>
 800402c:	4402      	add	r2, r0
 800402e:	4601      	mov	r1, r0
 8004030:	428a      	cmp	r2, r1
 8004032:	d100      	bne.n	8004036 <memmove+0x2a>
 8004034:	bd10      	pop	{r4, pc}
 8004036:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800403a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800403e:	e7f7      	b.n	8004030 <memmove+0x24>

08004040 <_sbrk_r>:
 8004040:	b538      	push	{r3, r4, r5, lr}
 8004042:	4d06      	ldr	r5, [pc, #24]	@ (800405c <_sbrk_r+0x1c>)
 8004044:	2300      	movs	r3, #0
 8004046:	4604      	mov	r4, r0
 8004048:	4608      	mov	r0, r1
 800404a:	602b      	str	r3, [r5, #0]
 800404c:	f7fc fcc2 	bl	80009d4 <_sbrk>
 8004050:	1c43      	adds	r3, r0, #1
 8004052:	d102      	bne.n	800405a <_sbrk_r+0x1a>
 8004054:	682b      	ldr	r3, [r5, #0]
 8004056:	b103      	cbz	r3, 800405a <_sbrk_r+0x1a>
 8004058:	6023      	str	r3, [r4, #0]
 800405a:	bd38      	pop	{r3, r4, r5, pc}
 800405c:	2000028c 	.word	0x2000028c

08004060 <memcpy>:
 8004060:	440a      	add	r2, r1
 8004062:	4291      	cmp	r1, r2
 8004064:	f100 33ff 	add.w	r3, r0, #4294967295
 8004068:	d100      	bne.n	800406c <memcpy+0xc>
 800406a:	4770      	bx	lr
 800406c:	b510      	push	{r4, lr}
 800406e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004072:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004076:	4291      	cmp	r1, r2
 8004078:	d1f9      	bne.n	800406e <memcpy+0xe>
 800407a:	bd10      	pop	{r4, pc}

0800407c <_realloc_r>:
 800407c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004080:	4680      	mov	r8, r0
 8004082:	4615      	mov	r5, r2
 8004084:	460c      	mov	r4, r1
 8004086:	b921      	cbnz	r1, 8004092 <_realloc_r+0x16>
 8004088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800408c:	4611      	mov	r1, r2
 800408e:	f7ff bc4b 	b.w	8003928 <_malloc_r>
 8004092:	b92a      	cbnz	r2, 80040a0 <_realloc_r+0x24>
 8004094:	f7ff fbdc 	bl	8003850 <_free_r>
 8004098:	2400      	movs	r4, #0
 800409a:	4620      	mov	r0, r4
 800409c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040a0:	f000 f81a 	bl	80040d8 <_malloc_usable_size_r>
 80040a4:	4285      	cmp	r5, r0
 80040a6:	4606      	mov	r6, r0
 80040a8:	d802      	bhi.n	80040b0 <_realloc_r+0x34>
 80040aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80040ae:	d8f4      	bhi.n	800409a <_realloc_r+0x1e>
 80040b0:	4629      	mov	r1, r5
 80040b2:	4640      	mov	r0, r8
 80040b4:	f7ff fc38 	bl	8003928 <_malloc_r>
 80040b8:	4607      	mov	r7, r0
 80040ba:	2800      	cmp	r0, #0
 80040bc:	d0ec      	beq.n	8004098 <_realloc_r+0x1c>
 80040be:	42b5      	cmp	r5, r6
 80040c0:	462a      	mov	r2, r5
 80040c2:	4621      	mov	r1, r4
 80040c4:	bf28      	it	cs
 80040c6:	4632      	movcs	r2, r6
 80040c8:	f7ff ffca 	bl	8004060 <memcpy>
 80040cc:	4621      	mov	r1, r4
 80040ce:	4640      	mov	r0, r8
 80040d0:	f7ff fbbe 	bl	8003850 <_free_r>
 80040d4:	463c      	mov	r4, r7
 80040d6:	e7e0      	b.n	800409a <_realloc_r+0x1e>

080040d8 <_malloc_usable_size_r>:
 80040d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040dc:	1f18      	subs	r0, r3, #4
 80040de:	2b00      	cmp	r3, #0
 80040e0:	bfbc      	itt	lt
 80040e2:	580b      	ldrlt	r3, [r1, r0]
 80040e4:	18c0      	addlt	r0, r0, r3
 80040e6:	4770      	bx	lr

080040e8 <_init>:
 80040e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ea:	bf00      	nop
 80040ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ee:	bc08      	pop	{r3}
 80040f0:	469e      	mov	lr, r3
 80040f2:	4770      	bx	lr

080040f4 <_fini>:
 80040f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f6:	bf00      	nop
 80040f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040fa:	bc08      	pop	{r3}
 80040fc:	469e      	mov	lr, r3
 80040fe:	4770      	bx	lr
