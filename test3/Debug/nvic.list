
nvic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d7c  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002f74  08002f74  00003f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f94  08002f94  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f94  08002f94  00003f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f9c  08002f9c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f9c  08002f9c  00003f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002fa0  08002fa0  00003fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002fa4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08002fb0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002fb0  000040b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0a5  00000000  00000000  0000403a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000195c  00000000  00000000  0000e0df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  0000fa40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b1  00000000  00000000  000101c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b00  00000000  00000000  00010771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad7d  00000000  00000000  00037271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0538  00000000  00000000  00041fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132526  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cc8  00000000  00000000  0013256c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00134234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002f5c 	.word	0x08002f5c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002f5c 	.word	0x08002f5c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08a      	sub	sp, #40	@ 0x28
 800052c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053e:	4b36      	ldr	r3, [pc, #216]	@ (8000618 <MX_GPIO_Init+0xf0>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	4a35      	ldr	r2, [pc, #212]	@ (8000618 <MX_GPIO_Init+0xf0>)
 8000544:	f043 0304 	orr.w	r3, r3, #4
 8000548:	6313      	str	r3, [r2, #48]	@ 0x30
 800054a:	4b33      	ldr	r3, [pc, #204]	@ (8000618 <MX_GPIO_Init+0xf0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	f003 0304 	and.w	r3, r3, #4
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b30      	ldr	r3, [pc, #192]	@ (8000618 <MX_GPIO_Init+0xf0>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a2f      	ldr	r2, [pc, #188]	@ (8000618 <MX_GPIO_Init+0xf0>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b2d      	ldr	r3, [pc, #180]	@ (8000618 <MX_GPIO_Init+0xf0>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b2a      	ldr	r3, [pc, #168]	@ (8000618 <MX_GPIO_Init+0xf0>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	4a29      	ldr	r2, [pc, #164]	@ (8000618 <MX_GPIO_Init+0xf0>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	6313      	str	r3, [r2, #48]	@ 0x30
 800057a:	4b27      	ldr	r3, [pc, #156]	@ (8000618 <MX_GPIO_Init+0xf0>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000586:	4b24      	ldr	r3, [pc, #144]	@ (8000618 <MX_GPIO_Init+0xf0>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a23      	ldr	r2, [pc, #140]	@ (8000618 <MX_GPIO_Init+0xf0>)
 800058c:	f043 0308 	orr.w	r3, r3, #8
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b21      	ldr	r3, [pc, #132]	@ (8000618 <MX_GPIO_Init+0xf0>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0308 	and.w	r3, r3, #8
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80005a4:	481d      	ldr	r0, [pc, #116]	@ (800061c <MX_GPIO_Init+0xf4>)
 80005a6:	f000 fe17 	bl	80011d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4619      	mov	r1, r3
 80005c0:	4817      	ldr	r0, [pc, #92]	@ (8000620 <MX_GPIO_Init+0xf8>)
 80005c2:	f000 fc5d 	bl	8000e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005c6:	2301      	movs	r3, #1
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4619      	mov	r1, r3
 80005da:	4812      	ldr	r0, [pc, #72]	@ (8000624 <MX_GPIO_Init+0xfc>)
 80005dc:	f000 fc50 	bl	8000e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80005e0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80005e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e6:	2301      	movs	r3, #1
 80005e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	4808      	ldr	r0, [pc, #32]	@ (800061c <MX_GPIO_Init+0xf4>)
 80005fa:	f000 fc41 	bl	8000e80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80005fe:	2200      	movs	r2, #0
 8000600:	2101      	movs	r1, #1
 8000602:	2028      	movs	r0, #40	@ 0x28
 8000604:	f000 fb8d 	bl	8000d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000608:	2028      	movs	r0, #40	@ 0x28
 800060a:	f000 fba6 	bl	8000d5a <HAL_NVIC_EnableIRQ>

}
 800060e:	bf00      	nop
 8000610:	3728      	adds	r7, #40	@ 0x28
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40020400 	.word	0x40020400
 8000620:	40020800 	.word	0x40020800
 8000624:	40020000 	.word	0x40020000

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800062e:	f000 f8c3 	bl	80007b8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f000 fa1a 	bl	8000a6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f815 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f7ff ff75 	bl	8000528 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800063e:	f000 f95b 	bl	80008f8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  char dot[] = ".";
 8000642:	232e      	movs	r3, #46	@ 0x2e
 8000644:	80bb      	strh	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart3, (uint8_t*)dot, 1, 400);
 8000646:	1d39      	adds	r1, r7, #4
 8000648:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800064c:	2201      	movs	r2, #1
 800064e:	4804      	ldr	r0, [pc, #16]	@ (8000660 <main+0x38>)
 8000650:	f001 ff4e 	bl	80024f0 <HAL_UART_Transmit>
	  HAL_Delay(400);
 8000654:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000658:	f000 fa64 	bl	8000b24 <HAL_Delay>
	  HAL_UART_Transmit(&huart3, (uint8_t*)dot, 1, 400);
 800065c:	bf00      	nop
 800065e:	e7f2      	b.n	8000646 <main+0x1e>
 8000660:	20000028 	.word	0x20000028

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	@ 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	2234      	movs	r2, #52	@ 0x34
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fc45 	bl	8002f02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	4b2b      	ldr	r3, [pc, #172]	@ (8000738 <SystemClock_Config+0xd4>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	4a2a      	ldr	r2, [pc, #168]	@ (8000738 <SystemClock_Config+0xd4>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	@ 0x40
 8000694:	4b28      	ldr	r3, [pc, #160]	@ (8000738 <SystemClock_Config+0xd4>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	4b26      	ldr	r3, [pc, #152]	@ (800073c <SystemClock_Config+0xd8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a25      	ldr	r2, [pc, #148]	@ (800073c <SystemClock_Config+0xd8>)
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b23      	ldr	r3, [pc, #140]	@ (800073c <SystemClock_Config+0xd8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006cc:	2308      	movs	r3, #8
 80006ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006d0:	23d8      	movs	r3, #216	@ 0xd8
 80006d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006dc:	2302      	movs	r3, #2
 80006de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fdf9 	bl	80012dc <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006f0:	f000 f88e 	bl	8000810 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006f4:	f000 fda2 	bl	800123c <HAL_PWREx_EnableOverDrive>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006fe:	f000 f887 	bl	8000810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	230f      	movs	r3, #15
 8000704:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2302      	movs	r3, #2
 8000708:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000714:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000718:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800071a:	f107 0308 	add.w	r3, r7, #8
 800071e:	2107      	movs	r1, #7
 8000720:	4618      	mov	r0, r3
 8000722:	f001 f889 	bl	8001838 <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800072c:	f000 f870 	bl	8000810 <Error_Handler>
  }
}
 8000730:	bf00      	nop
 8000732:	3750      	adds	r7, #80	@ 0x50
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13){
 800074a:	88fb      	ldrh	r3, [r7, #6]
 800074c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000750:	d126      	bne.n	80007a0 <HAL_GPIO_EXTI_Callback+0x60>
		HAL_UART_Transmit(&huart3, (uint8_t *) "---", 3, 100);
 8000752:	2364      	movs	r3, #100	@ 0x64
 8000754:	2203      	movs	r2, #3
 8000756:	4914      	ldr	r1, [pc, #80]	@ (80007a8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000758:	4814      	ldr	r0, [pc, #80]	@ (80007ac <HAL_GPIO_EXTI_Callback+0x6c>)
 800075a:	f001 fec9 	bl	80024f0 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000764:	4812      	ldr	r0, [pc, #72]	@ (80007b0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000766:	f000 fd37 	bl	80011d8 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 800076a:	20c8      	movs	r0, #200	@ 0xc8
 800076c:	f000 f9da 	bl	8000b24 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000776:	480e      	ldr	r0, [pc, #56]	@ (80007b0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000778:	f000 fd2e 	bl	80011d8 <HAL_GPIO_WritePin>
		for (int i = 0; i < 20; i++) {
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	e00b      	b.n	800079a <HAL_GPIO_EXTI_Callback+0x5a>
			  HAL_UART_Transmit(&huart3, (uint8_t*)"B", 1, 100);
 8000782:	2364      	movs	r3, #100	@ 0x64
 8000784:	2201      	movs	r2, #1
 8000786:	490b      	ldr	r1, [pc, #44]	@ (80007b4 <HAL_GPIO_EXTI_Callback+0x74>)
 8000788:	4808      	ldr	r0, [pc, #32]	@ (80007ac <HAL_GPIO_EXTI_Callback+0x6c>)
 800078a:	f001 feb1 	bl	80024f0 <HAL_UART_Transmit>
			  HAL_Delay(100);
 800078e:	2064      	movs	r0, #100	@ 0x64
 8000790:	f000 f9c8 	bl	8000b24 <HAL_Delay>
		for (int i = 0; i < 20; i++) {
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	3301      	adds	r3, #1
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	2b13      	cmp	r3, #19
 800079e:	ddf0      	ble.n	8000782 <HAL_GPIO_EXTI_Callback+0x42>
		}
	}
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	08002f74 	.word	0x08002f74
 80007ac:	20000028 	.word	0x20000028
 80007b0:	40020400 	.word	0x40020400
 80007b4:	08002f78 	.word	0x08002f78

080007b8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80007ca:	f000 fae1 	bl	8000d90 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007ce:	2301      	movs	r3, #1
 80007d0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80007da:	231f      	movs	r3, #31
 80007dc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80007de:	2387      	movs	r3, #135	@ 0x87
 80007e0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80007e6:	2300      	movs	r3, #0
 80007e8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007ea:	2301      	movs	r3, #1
 80007ec:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80007ee:	2301      	movs	r3, #1
 80007f0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007fa:	463b      	mov	r3, r7
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 faff 	bl	8000e00 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000802:	2004      	movs	r0, #4
 8000804:	f000 fadc 	bl	8000dc0 <HAL_MPU_Enable>

}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <Error_Handler+0x8>

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <HAL_MspInit+0x44>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000826:	4a0e      	ldr	r2, [pc, #56]	@ (8000860 <HAL_MspInit+0x44>)
 8000828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800082c:	6413      	str	r3, [r2, #64]	@ 0x40
 800082e:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <HAL_MspInit+0x44>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <HAL_MspInit+0x44>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083e:	4a08      	ldr	r2, [pc, #32]	@ (8000860 <HAL_MspInit+0x44>)
 8000840:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000844:	6453      	str	r3, [r2, #68]	@ 0x44
 8000846:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <HAL_MspInit+0x44>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000852:	2005      	movs	r0, #5
 8000854:	f000 fa5a 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40023800 	.word	0x40023800

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <NMI_Handler+0x4>

0800086c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <MemManage_Handler+0x4>

0800087c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <BusFault_Handler+0x4>

08000884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <UsageFault_Handler+0x4>

0800088c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ba:	f000 f913 	bl	8000ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80008c6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80008ca:	f000 fc9f 	bl	800120c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <SystemInit+0x20>)
 80008da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008de:	4a05      	ldr	r2, [pc, #20]	@ (80008f4 <SystemInit+0x20>)
 80008e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008fc:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 80008fe:	4a15      	ldr	r2, [pc, #84]	@ (8000954 <MX_USART3_UART_Init+0x5c>)
 8000900:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000902:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092e:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_USART3_UART_Init+0x58>)
 800093c:	f001 fd8a 	bl	8002454 <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000946:	f7ff ff63 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000028 	.word	0x20000028
 8000954:	40004800 	.word	0x40004800

08000958 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b0ae      	sub	sp, #184	@ 0xb8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2290      	movs	r2, #144	@ 0x90
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f002 fac2 	bl	8002f02 <memset>
  if(uartHandle->Instance==USART3)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a22      	ldr	r2, [pc, #136]	@ (8000a0c <HAL_UART_MspInit+0xb4>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d13c      	bne.n	8000a02 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000988:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800098c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800098e:	2300      	movs	r3, #0
 8000990:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4618      	mov	r0, r3
 8000998:	f001 f934 	bl	8001c04 <HAL_RCCEx_PeriphCLKConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009a2:	f7ff ff35 	bl	8000810 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <HAL_UART_MspInit+0xb8>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009aa:	4a19      	ldr	r2, [pc, #100]	@ (8000a10 <HAL_UART_MspInit+0xb8>)
 80009ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b2:	4b17      	ldr	r3, [pc, #92]	@ (8000a10 <HAL_UART_MspInit+0xb8>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <HAL_UART_MspInit+0xb8>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a13      	ldr	r2, [pc, #76]	@ (8000a10 <HAL_UART_MspInit+0xb8>)
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <HAL_UART_MspInit+0xb8>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009f0:	2307      	movs	r3, #7
 80009f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <HAL_UART_MspInit+0xbc>)
 80009fe:	f000 fa3f 	bl	8000e80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000a02:	bf00      	nop
 8000a04:	37b8      	adds	r7, #184	@ 0xb8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40004800 	.word	0x40004800
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020c00 	.word	0x40020c00

08000a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a1c:	f7ff ff5a 	bl	80008d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a20:	480c      	ldr	r0, [pc, #48]	@ (8000a54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a22:	490d      	ldr	r1, [pc, #52]	@ (8000a58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a24:	4a0d      	ldr	r2, [pc, #52]	@ (8000a5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a28:	e002      	b.n	8000a30 <LoopCopyDataInit>

08000a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2e:	3304      	adds	r3, #4

08000a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a34:	d3f9      	bcc.n	8000a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a36:	4a0a      	ldr	r2, [pc, #40]	@ (8000a60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a38:	4c0a      	ldr	r4, [pc, #40]	@ (8000a64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a3c:	e001      	b.n	8000a42 <LoopFillZerobss>

08000a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a40:	3204      	adds	r2, #4

08000a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a44:	d3fb      	bcc.n	8000a3e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a46:	f002 fa65 	bl	8002f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a4a:	f7ff fded 	bl	8000628 <main>
  bx  lr    
 8000a4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a50:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a5c:	08002fa4 	.word	0x08002fa4
  ldr r2, =_sbss
 8000a60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a64:	200000b4 	.word	0x200000b4

08000a68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC_IRQHandler>

08000a6a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6e:	2003      	movs	r0, #3
 8000a70:	f000 f94c 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a74:	2000      	movs	r0, #0
 8000a76:	f000 f805 	bl	8000a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a7a:	f7ff fecf 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <HAL_InitTick+0x54>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <HAL_InitTick+0x58>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4619      	mov	r1, r3
 8000a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f967 	bl	8000d76 <HAL_SYSTICK_Config>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e00e      	b.n	8000ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b0f      	cmp	r3, #15
 8000ab6:	d80a      	bhi.n	8000ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	6879      	ldr	r1, [r7, #4]
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	f000 f92f 	bl	8000d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac4:	4a06      	ldr	r2, [pc, #24]	@ (8000ae0 <HAL_InitTick+0x5c>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	e000      	b.n	8000ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <HAL_IncTick+0x20>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <HAL_IncTick+0x24>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4413      	add	r3, r2
 8000af4:	4a04      	ldr	r2, [pc, #16]	@ (8000b08 <HAL_IncTick+0x24>)
 8000af6:	6013      	str	r3, [r2, #0]
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000008 	.word	0x20000008
 8000b08:	200000b0 	.word	0x200000b0

08000b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b10:	4b03      	ldr	r3, [pc, #12]	@ (8000b20 <HAL_GetTick+0x14>)
 8000b12:	681b      	ldr	r3, [r3, #0]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	200000b0 	.word	0x200000b0

08000b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b2c:	f7ff ffee 	bl	8000b0c <HAL_GetTick>
 8000b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b3c:	d005      	beq.n	8000b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b68 <HAL_Delay+0x44>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	461a      	mov	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4413      	add	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b4a:	bf00      	nop
 8000b4c:	f7ff ffde 	bl	8000b0c <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d8f7      	bhi.n	8000b4c <HAL_Delay+0x28>
  {
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000008 	.word	0x20000008

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <__NVIC_SetPriorityGrouping+0x40>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b96:	4313      	orrs	r3, r2
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	@ (8000bac <__NVIC_SetPriorityGrouping+0x40>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00
 8000bb0:	05fa0000 	.word	0x05fa0000

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	@ (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db0b      	blt.n	8000bfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 021f 	and.w	r2, r3, #31
 8000be8:	4907      	ldr	r1, [pc, #28]	@ (8000c08 <__NVIC_EnableIRQ+0x38>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	@ (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	@ (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	@ 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	@ 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cd8:	d301      	bcc.n	8000cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00f      	b.n	8000cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <SysTick_Config+0x40>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f7ff ff8e 	bl	8000c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf0:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <SysTick_Config+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf6:	4b04      	ldr	r3, [pc, #16]	@ (8000d08 <SysTick_Config+0x40>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e000e010 	.word	0xe000e010

08000d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ff29 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d34:	f7ff ff3e 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	68b9      	ldr	r1, [r7, #8]
 8000d3e:	6978      	ldr	r0, [r7, #20]
 8000d40:	f7ff ff8e 	bl	8000c60 <NVIC_EncodePriority>
 8000d44:	4602      	mov	r2, r0
 8000d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff5d 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff31 	bl	8000bd0 <__NVIC_EnableIRQ>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff ffa2 	bl	8000cc8 <SysTick_Config>
 8000d84:	4603      	mov	r3, r0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000d94:	f3bf 8f5f 	dmb	sy
}
 8000d98:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000d9a:	4b07      	ldr	r3, [pc, #28]	@ (8000db8 <HAL_MPU_Disable+0x28>)
 8000d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d9e:	4a06      	ldr	r2, [pc, #24]	@ (8000db8 <HAL_MPU_Disable+0x28>)
 8000da0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000da4:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000da6:	4b05      	ldr	r3, [pc, #20]	@ (8000dbc <HAL_MPU_Disable+0x2c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	605a      	str	r2, [r3, #4]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00
 8000dbc:	e000ed90 	.word	0xe000ed90

08000dc0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000df8 <HAL_MPU_Enable+0x38>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <HAL_MPU_Enable+0x3c>)
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd6:	4a09      	ldr	r2, [pc, #36]	@ (8000dfc <HAL_MPU_Enable+0x3c>)
 8000dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ddc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000dde:	f3bf 8f4f 	dsb	sy
}
 8000de2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000de4:	f3bf 8f6f 	isb	sy
}
 8000de8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed90 	.word	0xe000ed90
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	785a      	ldrb	r2, [r3, #1]
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <HAL_MPU_ConfigRegion+0x7c>)
 8000e0e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000e10:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <HAL_MPU_ConfigRegion+0x7c>)
 8000e12:	691b      	ldr	r3, [r3, #16]
 8000e14:	4a19      	ldr	r2, [pc, #100]	@ (8000e7c <HAL_MPU_ConfigRegion+0x7c>)
 8000e16:	f023 0301 	bic.w	r3, r3, #1
 8000e1a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000e1c:	4a17      	ldr	r2, [pc, #92]	@ (8000e7c <HAL_MPU_ConfigRegion+0x7c>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	7b1b      	ldrb	r3, [r3, #12]
 8000e28:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	7adb      	ldrb	r3, [r3, #11]
 8000e2e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	7a9b      	ldrb	r3, [r3, #10]
 8000e36:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	7b5b      	ldrb	r3, [r3, #13]
 8000e3e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7b9b      	ldrb	r3, [r3, #14]
 8000e46:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	7bdb      	ldrb	r3, [r3, #15]
 8000e4e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	7a5b      	ldrb	r3, [r3, #9]
 8000e56:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7a1b      	ldrb	r3, [r3, #8]
 8000e5e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e60:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	7812      	ldrb	r2, [r2, #0]
 8000e66:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e68:	4a04      	ldr	r2, [pc, #16]	@ (8000e7c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e6a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e6c:	6113      	str	r3, [r2, #16]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed90 	.word	0xe000ed90

08000e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	@ 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
 8000e9e:	e175      	b.n	800118c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	f040 8164 	bne.w	8001186 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d005      	beq.n	8000ed6 <HAL_GPIO_Init+0x56>
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d130      	bne.n	8000f38 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	68da      	ldr	r2, [r3, #12]
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	091b      	lsrs	r3, r3, #4
 8000f22:	f003 0201 	and.w	r2, r3, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b03      	cmp	r3, #3
 8000f42:	d017      	beq.n	8000f74 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d123      	bne.n	8000fc8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	08da      	lsrs	r2, r3, #3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3208      	adds	r2, #8
 8000f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	f003 0307 	and.w	r3, r3, #7
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	220f      	movs	r2, #15
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	691a      	ldr	r2, [r3, #16]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	08da      	lsrs	r2, r3, #3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3208      	adds	r2, #8
 8000fc2:	69b9      	ldr	r1, [r7, #24]
 8000fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0203 	and.w	r2, r3, #3
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001004:	2b00      	cmp	r3, #0
 8001006:	f000 80be 	beq.w	8001186 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	4b66      	ldr	r3, [pc, #408]	@ (80011a4 <HAL_GPIO_Init+0x324>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100e:	4a65      	ldr	r2, [pc, #404]	@ (80011a4 <HAL_GPIO_Init+0x324>)
 8001010:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001014:	6453      	str	r3, [r2, #68]	@ 0x44
 8001016:	4b63      	ldr	r3, [pc, #396]	@ (80011a4 <HAL_GPIO_Init+0x324>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001022:	4a61      	ldr	r2, [pc, #388]	@ (80011a8 <HAL_GPIO_Init+0x328>)
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	089b      	lsrs	r3, r3, #2
 8001028:	3302      	adds	r3, #2
 800102a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	220f      	movs	r2, #15
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a58      	ldr	r2, [pc, #352]	@ (80011ac <HAL_GPIO_Init+0x32c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d037      	beq.n	80010be <HAL_GPIO_Init+0x23e>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a57      	ldr	r2, [pc, #348]	@ (80011b0 <HAL_GPIO_Init+0x330>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d031      	beq.n	80010ba <HAL_GPIO_Init+0x23a>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a56      	ldr	r2, [pc, #344]	@ (80011b4 <HAL_GPIO_Init+0x334>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d02b      	beq.n	80010b6 <HAL_GPIO_Init+0x236>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a55      	ldr	r2, [pc, #340]	@ (80011b8 <HAL_GPIO_Init+0x338>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d025      	beq.n	80010b2 <HAL_GPIO_Init+0x232>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a54      	ldr	r2, [pc, #336]	@ (80011bc <HAL_GPIO_Init+0x33c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d01f      	beq.n	80010ae <HAL_GPIO_Init+0x22e>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a53      	ldr	r2, [pc, #332]	@ (80011c0 <HAL_GPIO_Init+0x340>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d019      	beq.n	80010aa <HAL_GPIO_Init+0x22a>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a52      	ldr	r2, [pc, #328]	@ (80011c4 <HAL_GPIO_Init+0x344>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d013      	beq.n	80010a6 <HAL_GPIO_Init+0x226>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a51      	ldr	r2, [pc, #324]	@ (80011c8 <HAL_GPIO_Init+0x348>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d00d      	beq.n	80010a2 <HAL_GPIO_Init+0x222>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a50      	ldr	r2, [pc, #320]	@ (80011cc <HAL_GPIO_Init+0x34c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d007      	beq.n	800109e <HAL_GPIO_Init+0x21e>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a4f      	ldr	r2, [pc, #316]	@ (80011d0 <HAL_GPIO_Init+0x350>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d101      	bne.n	800109a <HAL_GPIO_Init+0x21a>
 8001096:	2309      	movs	r3, #9
 8001098:	e012      	b.n	80010c0 <HAL_GPIO_Init+0x240>
 800109a:	230a      	movs	r3, #10
 800109c:	e010      	b.n	80010c0 <HAL_GPIO_Init+0x240>
 800109e:	2308      	movs	r3, #8
 80010a0:	e00e      	b.n	80010c0 <HAL_GPIO_Init+0x240>
 80010a2:	2307      	movs	r3, #7
 80010a4:	e00c      	b.n	80010c0 <HAL_GPIO_Init+0x240>
 80010a6:	2306      	movs	r3, #6
 80010a8:	e00a      	b.n	80010c0 <HAL_GPIO_Init+0x240>
 80010aa:	2305      	movs	r3, #5
 80010ac:	e008      	b.n	80010c0 <HAL_GPIO_Init+0x240>
 80010ae:	2304      	movs	r3, #4
 80010b0:	e006      	b.n	80010c0 <HAL_GPIO_Init+0x240>
 80010b2:	2303      	movs	r3, #3
 80010b4:	e004      	b.n	80010c0 <HAL_GPIO_Init+0x240>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_Init+0x240>
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_Init+0x240>
 80010be:	2300      	movs	r3, #0
 80010c0:	69fa      	ldr	r2, [r7, #28]
 80010c2:	f002 0203 	and.w	r2, r2, #3
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	4093      	lsls	r3, r2
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010d0:	4935      	ldr	r1, [pc, #212]	@ (80011a8 <HAL_GPIO_Init+0x328>)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010de:	4b3d      	ldr	r3, [pc, #244]	@ (80011d4 <HAL_GPIO_Init+0x354>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001102:	4a34      	ldr	r2, [pc, #208]	@ (80011d4 <HAL_GPIO_Init+0x354>)
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001108:	4b32      	ldr	r3, [pc, #200]	@ (80011d4 <HAL_GPIO_Init+0x354>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800112c:	4a29      	ldr	r2, [pc, #164]	@ (80011d4 <HAL_GPIO_Init+0x354>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001132:	4b28      	ldr	r3, [pc, #160]	@ (80011d4 <HAL_GPIO_Init+0x354>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001156:	4a1f      	ldr	r2, [pc, #124]	@ (80011d4 <HAL_GPIO_Init+0x354>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800115c:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <HAL_GPIO_Init+0x354>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001180:	4a14      	ldr	r2, [pc, #80]	@ (80011d4 <HAL_GPIO_Init+0x354>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3301      	adds	r3, #1
 800118a:	61fb      	str	r3, [r7, #28]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	2b0f      	cmp	r3, #15
 8001190:	f67f ae86 	bls.w	8000ea0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3724      	adds	r7, #36	@ 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40013800 	.word	0x40013800
 80011ac:	40020000 	.word	0x40020000
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020c00 	.word	0x40020c00
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40021400 	.word	0x40021400
 80011c4:	40021800 	.word	0x40021800
 80011c8:	40021c00 	.word	0x40021c00
 80011cc:	40022000 	.word	0x40022000
 80011d0:	40022400 	.word	0x40022400
 80011d4:	40013c00 	.word	0x40013c00

080011d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]
 80011e4:	4613      	mov	r3, r2
 80011e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011e8:	787b      	ldrb	r3, [r7, #1]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80011f4:	e003      	b.n	80011fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	041a      	lsls	r2, r3, #16
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	619a      	str	r2, [r3, #24]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001216:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001218:	695a      	ldr	r2, [r3, #20]
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	4013      	ands	r3, r2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d006      	beq.n	8001230 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001222:	4a05      	ldr	r2, [pc, #20]	@ (8001238 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fa88 	bl	8000740 <HAL_GPIO_EXTI_Callback>
  }
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40013c00 	.word	0x40013c00

0800123c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001246:	4b23      	ldr	r3, [pc, #140]	@ (80012d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124a:	4a22      	ldr	r2, [pc, #136]	@ (80012d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800124c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001250:	6413      	str	r3, [r2, #64]	@ 0x40
 8001252:	4b20      	ldr	r3, [pc, #128]	@ (80012d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800125e:	4b1e      	ldr	r3, [pc, #120]	@ (80012d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a1d      	ldr	r2, [pc, #116]	@ (80012d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001268:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800126a:	f7ff fc4f 	bl	8000b0c <HAL_GetTick>
 800126e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001270:	e009      	b.n	8001286 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001272:	f7ff fc4b 	bl	8000b0c <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001280:	d901      	bls.n	8001286 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e022      	b.n	80012cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001286:	4b14      	ldr	r3, [pc, #80]	@ (80012d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800128e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001292:	d1ee      	bne.n	8001272 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001294:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0f      	ldr	r2, [pc, #60]	@ (80012d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800129a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800129e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012a0:	f7ff fc34 	bl	8000b0c <HAL_GetTick>
 80012a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012a6:	e009      	b.n	80012bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012a8:	f7ff fc30 	bl	8000b0c <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012b6:	d901      	bls.n	80012bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e007      	b.n	80012cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80012c8:	d1ee      	bne.n	80012a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40007000 	.word	0x40007000

080012dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80012e4:	2300      	movs	r3, #0
 80012e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e29b      	b.n	800182a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 8087 	beq.w	800140e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001300:	4b96      	ldr	r3, [pc, #600]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 030c 	and.w	r3, r3, #12
 8001308:	2b04      	cmp	r3, #4
 800130a:	d00c      	beq.n	8001326 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800130c:	4b93      	ldr	r3, [pc, #588]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 030c 	and.w	r3, r3, #12
 8001314:	2b08      	cmp	r3, #8
 8001316:	d112      	bne.n	800133e <HAL_RCC_OscConfig+0x62>
 8001318:	4b90      	ldr	r3, [pc, #576]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001320:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001324:	d10b      	bne.n	800133e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001326:	4b8d      	ldr	r3, [pc, #564]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d06c      	beq.n	800140c <HAL_RCC_OscConfig+0x130>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d168      	bne.n	800140c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e275      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001346:	d106      	bne.n	8001356 <HAL_RCC_OscConfig+0x7a>
 8001348:	4b84      	ldr	r3, [pc, #528]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a83      	ldr	r2, [pc, #524]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 800134e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	e02e      	b.n	80013b4 <HAL_RCC_OscConfig+0xd8>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0x9c>
 800135e:	4b7f      	ldr	r3, [pc, #508]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a7e      	ldr	r2, [pc, #504]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	4b7c      	ldr	r3, [pc, #496]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a7b      	ldr	r2, [pc, #492]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001370:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e01d      	b.n	80013b4 <HAL_RCC_OscConfig+0xd8>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001380:	d10c      	bne.n	800139c <HAL_RCC_OscConfig+0xc0>
 8001382:	4b76      	ldr	r3, [pc, #472]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a75      	ldr	r2, [pc, #468]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001388:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b73      	ldr	r3, [pc, #460]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a72      	ldr	r2, [pc, #456]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e00b      	b.n	80013b4 <HAL_RCC_OscConfig+0xd8>
 800139c:	4b6f      	ldr	r3, [pc, #444]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a6e      	ldr	r2, [pc, #440]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 80013a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b6c      	ldr	r3, [pc, #432]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a6b      	ldr	r2, [pc, #428]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 80013ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d013      	beq.n	80013e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013bc:	f7ff fba6 	bl	8000b0c <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c4:	f7ff fba2 	bl	8000b0c <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b64      	cmp	r3, #100	@ 0x64
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e229      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	4b61      	ldr	r3, [pc, #388]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0xe8>
 80013e2:	e014      	b.n	800140e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e4:	f7ff fb92 	bl	8000b0c <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ec:	f7ff fb8e 	bl	8000b0c <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b64      	cmp	r3, #100	@ 0x64
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e215      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	4b57      	ldr	r3, [pc, #348]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x110>
 800140a:	e000      	b.n	800140e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d069      	beq.n	80014ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800141a:	4b50      	ldr	r3, [pc, #320]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00b      	beq.n	800143e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001426:	4b4d      	ldr	r3, [pc, #308]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b08      	cmp	r3, #8
 8001430:	d11c      	bne.n	800146c <HAL_RCC_OscConfig+0x190>
 8001432:	4b4a      	ldr	r3, [pc, #296]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d116      	bne.n	800146c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143e:	4b47      	ldr	r3, [pc, #284]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d005      	beq.n	8001456 <HAL_RCC_OscConfig+0x17a>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d001      	beq.n	8001456 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e1e9      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001456:	4b41      	ldr	r3, [pc, #260]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	493d      	ldr	r1, [pc, #244]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146a:	e040      	b.n	80014ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d023      	beq.n	80014bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001474:	4b39      	ldr	r3, [pc, #228]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a38      	ldr	r2, [pc, #224]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fb44 	bl	8000b0c <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001488:	f7ff fb40 	bl	8000b0c <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e1c7      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149a:	4b30      	ldr	r3, [pc, #192]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a6:	4b2d      	ldr	r3, [pc, #180]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4929      	ldr	r1, [pc, #164]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]
 80014ba:	e018      	b.n	80014ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014bc:	4b27      	ldr	r3, [pc, #156]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a26      	ldr	r2, [pc, #152]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 80014c2:	f023 0301 	bic.w	r3, r3, #1
 80014c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff fb20 	bl	8000b0c <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d0:	f7ff fb1c 	bl	8000b0c <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e1a3      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e2:	4b1e      	ldr	r3, [pc, #120]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d038      	beq.n	800156c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d019      	beq.n	8001536 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001502:	4b16      	ldr	r3, [pc, #88]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150e:	f7ff fafd 	bl	8000b0c <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001516:	f7ff faf9 	bl	8000b0c <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e180      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001528:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 800152a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x23a>
 8001534:	e01a      	b.n	800156c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001536:	4b09      	ldr	r3, [pc, #36]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 8001538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800153a:	4a08      	ldr	r2, [pc, #32]	@ (800155c <HAL_RCC_OscConfig+0x280>)
 800153c:	f023 0301 	bic.w	r3, r3, #1
 8001540:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001542:	f7ff fae3 	bl	8000b0c <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001548:	e00a      	b.n	8001560 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800154a:	f7ff fadf 	bl	8000b0c <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d903      	bls.n	8001560 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e166      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
 800155c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001560:	4b92      	ldr	r3, [pc, #584]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1ee      	bne.n	800154a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 80a4 	beq.w	80016c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800157a:	4b8c      	ldr	r3, [pc, #560]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10d      	bne.n	80015a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	4b89      	ldr	r3, [pc, #548]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	4a88      	ldr	r2, [pc, #544]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001590:	6413      	str	r3, [r2, #64]	@ 0x40
 8001592:	4b86      	ldr	r3, [pc, #536]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800159e:	2301      	movs	r3, #1
 80015a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015a2:	4b83      	ldr	r3, [pc, #524]	@ (80017b0 <HAL_RCC_OscConfig+0x4d4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d118      	bne.n	80015e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80015ae:	4b80      	ldr	r3, [pc, #512]	@ (80017b0 <HAL_RCC_OscConfig+0x4d4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a7f      	ldr	r2, [pc, #508]	@ (80017b0 <HAL_RCC_OscConfig+0x4d4>)
 80015b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ba:	f7ff faa7 	bl	8000b0c <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c2:	f7ff faa3 	bl	8000b0c <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b64      	cmp	r3, #100	@ 0x64
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e12a      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d4:	4b76      	ldr	r3, [pc, #472]	@ (80017b0 <HAL_RCC_OscConfig+0x4d4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d106      	bne.n	80015f6 <HAL_RCC_OscConfig+0x31a>
 80015e8:	4b70      	ldr	r3, [pc, #448]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ec:	4a6f      	ldr	r2, [pc, #444]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015f4:	e02d      	b.n	8001652 <HAL_RCC_OscConfig+0x376>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10c      	bne.n	8001618 <HAL_RCC_OscConfig+0x33c>
 80015fe:	4b6b      	ldr	r3, [pc, #428]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001602:	4a6a      	ldr	r2, [pc, #424]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	6713      	str	r3, [r2, #112]	@ 0x70
 800160a:	4b68      	ldr	r3, [pc, #416]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 800160c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800160e:	4a67      	ldr	r2, [pc, #412]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001610:	f023 0304 	bic.w	r3, r3, #4
 8001614:	6713      	str	r3, [r2, #112]	@ 0x70
 8001616:	e01c      	b.n	8001652 <HAL_RCC_OscConfig+0x376>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b05      	cmp	r3, #5
 800161e:	d10c      	bne.n	800163a <HAL_RCC_OscConfig+0x35e>
 8001620:	4b62      	ldr	r3, [pc, #392]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001624:	4a61      	ldr	r2, [pc, #388]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	6713      	str	r3, [r2, #112]	@ 0x70
 800162c:	4b5f      	ldr	r3, [pc, #380]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 800162e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001630:	4a5e      	ldr	r2, [pc, #376]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6713      	str	r3, [r2, #112]	@ 0x70
 8001638:	e00b      	b.n	8001652 <HAL_RCC_OscConfig+0x376>
 800163a:	4b5c      	ldr	r3, [pc, #368]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800163e:	4a5b      	ldr	r2, [pc, #364]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	6713      	str	r3, [r2, #112]	@ 0x70
 8001646:	4b59      	ldr	r3, [pc, #356]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800164a:	4a58      	ldr	r2, [pc, #352]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 800164c:	f023 0304 	bic.w	r3, r3, #4
 8001650:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d015      	beq.n	8001686 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165a:	f7ff fa57 	bl	8000b0c <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001660:	e00a      	b.n	8001678 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001662:	f7ff fa53 	bl	8000b0c <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001670:	4293      	cmp	r3, r2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e0d8      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001678:	4b4c      	ldr	r3, [pc, #304]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0ee      	beq.n	8001662 <HAL_RCC_OscConfig+0x386>
 8001684:	e014      	b.n	80016b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001686:	f7ff fa41 	bl	8000b0c <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168c:	e00a      	b.n	80016a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168e:	f7ff fa3d 	bl	8000b0c <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	f241 3288 	movw	r2, #5000	@ 0x1388
 800169c:	4293      	cmp	r3, r2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e0c2      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a4:	4b41      	ldr	r3, [pc, #260]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 80016a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1ee      	bne.n	800168e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d105      	bne.n	80016c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b6:	4b3d      	ldr	r3, [pc, #244]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	4a3c      	ldr	r2, [pc, #240]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 80016bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016c0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 80ae 	beq.w	8001828 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016cc:	4b37      	ldr	r3, [pc, #220]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d06d      	beq.n	80017b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d14b      	bne.n	8001778 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e0:	4b32      	ldr	r3, [pc, #200]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a31      	ldr	r2, [pc, #196]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 80016e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff fa0e 	bl	8000b0c <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f4:	f7ff fa0a 	bl	8000b0c <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e091      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001706:	4b29      	ldr	r3, [pc, #164]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69da      	ldr	r2, [r3, #28]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001720:	019b      	lsls	r3, r3, #6
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001728:	085b      	lsrs	r3, r3, #1
 800172a:	3b01      	subs	r3, #1
 800172c:	041b      	lsls	r3, r3, #16
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001734:	061b      	lsls	r3, r3, #24
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173c:	071b      	lsls	r3, r3, #28
 800173e:	491b      	ldr	r1, [pc, #108]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001744:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a18      	ldr	r2, [pc, #96]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 800174a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800174e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff f9dc 	bl	8000b0c <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001758:	f7ff f9d8 	bl	8000b0c <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e05f      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x47c>
 8001776:	e057      	b.n	8001828 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001778:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0b      	ldr	r2, [pc, #44]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 800177e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff f9c2 	bl	8000b0c <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178c:	f7ff f9be 	bl	8000b0c <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e045      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179e:	4b03      	ldr	r3, [pc, #12]	@ (80017ac <HAL_RCC_OscConfig+0x4d0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x4b0>
 80017aa:	e03d      	b.n	8001828 <HAL_RCC_OscConfig+0x54c>
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80017b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001834 <HAL_RCC_OscConfig+0x558>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d030      	beq.n	8001824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d129      	bne.n	8001824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017da:	429a      	cmp	r2, r3
 80017dc:	d122      	bne.n	8001824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80017e4:	4013      	ands	r3, r2
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d119      	bne.n	8001824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017fa:	085b      	lsrs	r3, r3, #1
 80017fc:	3b01      	subs	r3, #1
 80017fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d10f      	bne.n	8001824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001810:	429a      	cmp	r2, r3
 8001812:	d107      	bne.n	8001824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800

08001838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0d0      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001850:	4b6a      	ldr	r3, [pc, #424]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 030f 	and.w	r3, r3, #15
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d910      	bls.n	8001880 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185e:	4b67      	ldr	r3, [pc, #412]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 020f 	bic.w	r2, r3, #15
 8001866:	4965      	ldr	r1, [pc, #404]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186e:	4b63      	ldr	r3, [pc, #396]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d001      	beq.n	8001880 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0b8      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d020      	beq.n	80018ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001898:	4b59      	ldr	r3, [pc, #356]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	4a58      	ldr	r2, [pc, #352]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 800189e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b0:	4b53      	ldr	r3, [pc, #332]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	4a52      	ldr	r2, [pc, #328]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80018b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018bc:	4b50      	ldr	r3, [pc, #320]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	494d      	ldr	r1, [pc, #308]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d040      	beq.n	800195c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d107      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	4b47      	ldr	r3, [pc, #284]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d115      	bne.n	800191a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e07f      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d107      	bne.n	800190a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fa:	4b41      	ldr	r3, [pc, #260]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d109      	bne.n	800191a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e073      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e06b      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800191a:	4b39      	ldr	r3, [pc, #228]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f023 0203 	bic.w	r2, r3, #3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4936      	ldr	r1, [pc, #216]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 8001928:	4313      	orrs	r3, r2
 800192a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800192c:	f7ff f8ee 	bl	8000b0c <HAL_GetTick>
 8001930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001932:	e00a      	b.n	800194a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001934:	f7ff f8ea 	bl	8000b0c <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e053      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 020c 	and.w	r2, r3, #12
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	429a      	cmp	r2, r3
 800195a:	d1eb      	bne.n	8001934 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800195c:	4b27      	ldr	r3, [pc, #156]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 030f 	and.w	r3, r3, #15
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d210      	bcs.n	800198c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196a:	4b24      	ldr	r3, [pc, #144]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 020f 	bic.w	r2, r3, #15
 8001972:	4922      	ldr	r1, [pc, #136]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b20      	ldr	r3, [pc, #128]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e032      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d008      	beq.n	80019aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001998:	4b19      	ldr	r3, [pc, #100]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4916      	ldr	r1, [pc, #88]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d009      	beq.n	80019ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019b6:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	490e      	ldr	r1, [pc, #56]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019ca:	f000 f821 	bl	8001a10 <HAL_RCC_GetSysClockFreq>
 80019ce:	4602      	mov	r2, r0
 80019d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	490a      	ldr	r1, [pc, #40]	@ (8001a04 <HAL_RCC_ClockConfig+0x1cc>)
 80019dc:	5ccb      	ldrb	r3, [r1, r3]
 80019de:	fa22 f303 	lsr.w	r3, r2, r3
 80019e2:	4a09      	ldr	r2, [pc, #36]	@ (8001a08 <HAL_RCC_ClockConfig+0x1d0>)
 80019e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <HAL_RCC_ClockConfig+0x1d4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff f84a 	bl	8000a84 <HAL_InitTick>

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023c00 	.word	0x40023c00
 8001a00:	40023800 	.word	0x40023800
 8001a04:	08002f7c 	.word	0x08002f7c
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	20000004 	.word	0x20000004

08001a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a14:	b090      	sub	sp, #64	@ 0x40
 8001a16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a20:	2300      	movs	r3, #0
 8001a22:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a28:	4b59      	ldr	r3, [pc, #356]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d00d      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0x40>
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	f200 80a1 	bhi.w	8001b7c <HAL_RCC_GetSysClockFreq+0x16c>
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <HAL_RCC_GetSysClockFreq+0x34>
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d003      	beq.n	8001a4a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a42:	e09b      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a44:	4b53      	ldr	r3, [pc, #332]	@ (8001b94 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a48:	e09b      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a4a:	4b53      	ldr	r3, [pc, #332]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a4e:	e098      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a50:	4b4f      	ldr	r3, [pc, #316]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a58:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a5a:	4b4d      	ldr	r3, [pc, #308]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d028      	beq.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a66:	4b4a      	ldr	r3, [pc, #296]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	099b      	lsrs	r3, r3, #6
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	623b      	str	r3, [r7, #32]
 8001a70:	627a      	str	r2, [r7, #36]	@ 0x24
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4b47      	ldr	r3, [pc, #284]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a7c:	fb03 f201 	mul.w	r2, r3, r1
 8001a80:	2300      	movs	r3, #0
 8001a82:	fb00 f303 	mul.w	r3, r0, r3
 8001a86:	4413      	add	r3, r2
 8001a88:	4a43      	ldr	r2, [pc, #268]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a8a:	fba0 1202 	umull	r1, r2, r0, r2
 8001a8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a90:	460a      	mov	r2, r1
 8001a92:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001a94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a96:	4413      	add	r3, r2
 8001a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	61bb      	str	r3, [r7, #24]
 8001aa0:	61fa      	str	r2, [r7, #28]
 8001aa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aa6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001aaa:	f7fe fbc5 	bl	8000238 <__aeabi_uldivmod>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ab6:	e053      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ab8:	4b35      	ldr	r3, [pc, #212]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	099b      	lsrs	r3, r3, #6
 8001abe:	2200      	movs	r2, #0
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	617a      	str	r2, [r7, #20]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001aca:	f04f 0b00 	mov.w	fp, #0
 8001ace:	4652      	mov	r2, sl
 8001ad0:	465b      	mov	r3, fp
 8001ad2:	f04f 0000 	mov.w	r0, #0
 8001ad6:	f04f 0100 	mov.w	r1, #0
 8001ada:	0159      	lsls	r1, r3, #5
 8001adc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ae0:	0150      	lsls	r0, r2, #5
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	ebb2 080a 	subs.w	r8, r2, sl
 8001aea:	eb63 090b 	sbc.w	r9, r3, fp
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001afa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001afe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b02:	ebb2 0408 	subs.w	r4, r2, r8
 8001b06:	eb63 0509 	sbc.w	r5, r3, r9
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	00eb      	lsls	r3, r5, #3
 8001b14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b18:	00e2      	lsls	r2, r4, #3
 8001b1a:	4614      	mov	r4, r2
 8001b1c:	461d      	mov	r5, r3
 8001b1e:	eb14 030a 	adds.w	r3, r4, sl
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	eb45 030b 	adc.w	r3, r5, fp
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b36:	4629      	mov	r1, r5
 8001b38:	028b      	lsls	r3, r1, #10
 8001b3a:	4621      	mov	r1, r4
 8001b3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b40:	4621      	mov	r1, r4
 8001b42:	028a      	lsls	r2, r1, #10
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	60fa      	str	r2, [r7, #12]
 8001b50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b54:	f7fe fb70 	bl	8000238 <__aeabi_uldivmod>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001b60:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	0c1b      	lsrs	r3, r3, #16
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001b70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b78:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b7a:	e002      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b7c:	4b05      	ldr	r3, [pc, #20]	@ (8001b94 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3740      	adds	r7, #64	@ 0x40
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	00f42400 	.word	0x00f42400
 8001b98:	017d7840 	.word	0x017d7840

08001b9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba0:	4b03      	ldr	r3, [pc, #12]	@ (8001bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	20000000 	.word	0x20000000

08001bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bb8:	f7ff fff0 	bl	8001b9c <HAL_RCC_GetHCLKFreq>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	4b05      	ldr	r3, [pc, #20]	@ (8001bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	0a9b      	lsrs	r3, r3, #10
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	4903      	ldr	r1, [pc, #12]	@ (8001bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bca:	5ccb      	ldrb	r3, [r1, r3]
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	08002f8c 	.word	0x08002f8c

08001bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001be0:	f7ff ffdc 	bl	8001b9c <HAL_RCC_GetHCLKFreq>
 8001be4:	4602      	mov	r2, r0
 8001be6:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	0b5b      	lsrs	r3, r3, #13
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	4903      	ldr	r1, [pc, #12]	@ (8001c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bf2:	5ccb      	ldrb	r3, [r1, r3]
 8001bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	08002f8c 	.word	0x08002f8c

08001c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d012      	beq.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c2c:	4b69      	ldr	r3, [pc, #420]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4a68      	ldr	r2, [pc, #416]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c32:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001c36:	6093      	str	r3, [r2, #8]
 8001c38:	4b66      	ldr	r3, [pc, #408]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c40:	4964      	ldr	r1, [pc, #400]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d017      	beq.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c64:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c6c:	4959      	ldr	r1, [pc, #356]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d017      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c9a:	4b4e      	ldr	r3, [pc, #312]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ca0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca8:	494a      	ldr	r1, [pc, #296]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cb8:	d101      	bne.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0320 	and.w	r3, r3, #32
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 808b 	beq.w	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	4b3a      	ldr	r3, [pc, #232]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cec:	4a39      	ldr	r2, [pc, #228]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf4:	4b37      	ldr	r3, [pc, #220]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d00:	4b35      	ldr	r3, [pc, #212]	@ (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a34      	ldr	r2, [pc, #208]	@ (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d0c:	f7fe fefe 	bl	8000b0c <HAL_GetTick>
 8001d10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d14:	f7fe fefa 	bl	8000b0c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	@ 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e38f      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d26:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d32:	4b28      	ldr	r3, [pc, #160]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d035      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d02e      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d50:	4b20      	ldr	r3, [pc, #128]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d64:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d66:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6a:	4a1a      	ldr	r2, [pc, #104]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d70:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001d72:	4a18      	ldr	r2, [pc, #96]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d78:	4b16      	ldr	r3, [pc, #88]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d114      	bne.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7fe fec2 	bl	8000b0c <HAL_GetTick>
 8001d88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8a:	e00a      	b.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d8c:	f7fe febe 	bl	8000b0c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e351      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da2:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0ee      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001db6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001dba:	d111      	bne.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001dbc:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001dc8:	4b04      	ldr	r3, [pc, #16]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001dca:	400b      	ands	r3, r1
 8001dcc:	4901      	ldr	r1, [pc, #4]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	608b      	str	r3, [r1, #8]
 8001dd2:	e00b      	b.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40007000 	.word	0x40007000
 8001ddc:	0ffffcff 	.word	0x0ffffcff
 8001de0:	4bac      	ldr	r3, [pc, #688]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4aab      	ldr	r2, [pc, #684]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001de6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001dea:	6093      	str	r3, [r2, #8]
 8001dec:	4ba9      	ldr	r3, [pc, #676]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df8:	49a6      	ldr	r1, [pc, #664]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d010      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e0a:	4ba2      	ldr	r3, [pc, #648]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e10:	4aa0      	ldr	r2, [pc, #640]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e1a:	4b9e      	ldr	r3, [pc, #632]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e24:	499b      	ldr	r1, [pc, #620]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00a      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e38:	4b96      	ldr	r3, [pc, #600]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e3e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e46:	4993      	ldr	r1, [pc, #588]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00a      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e5a:	4b8e      	ldr	r3, [pc, #568]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e68:	498a      	ldr	r1, [pc, #552]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00a      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e7c:	4b85      	ldr	r3, [pc, #532]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e8a:	4982      	ldr	r1, [pc, #520]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00a      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e9e:	4b7d      	ldr	r3, [pc, #500]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eac:	4979      	ldr	r1, [pc, #484]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00a      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ec0:	4b74      	ldr	r3, [pc, #464]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec6:	f023 0203 	bic.w	r2, r3, #3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ece:	4971      	ldr	r1, [pc, #452]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ee2:	4b6c      	ldr	r3, [pc, #432]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee8:	f023 020c 	bic.w	r2, r3, #12
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef0:	4968      	ldr	r1, [pc, #416]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00a      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f04:	4b63      	ldr	r3, [pc, #396]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f12:	4960      	ldr	r1, [pc, #384]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f26:	4b5b      	ldr	r3, [pc, #364]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f2c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f34:	4957      	ldr	r1, [pc, #348]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00a      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f48:	4b52      	ldr	r3, [pc, #328]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f56:	494f      	ldr	r1, [pc, #316]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00a      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001f6a:	4b4a      	ldr	r3, [pc, #296]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f70:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f78:	4946      	ldr	r1, [pc, #280]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00a      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001f8c:	4b41      	ldr	r3, [pc, #260]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f92:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9a:	493e      	ldr	r1, [pc, #248]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00a      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001fae:	4b39      	ldr	r3, [pc, #228]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fbc:	4935      	ldr	r1, [pc, #212]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00a      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fd0:	4b30      	ldr	r3, [pc, #192]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001fde:	492d      	ldr	r1, [pc, #180]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d011      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001ff2:	4b28      	ldr	r3, [pc, #160]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002000:	4924      	ldr	r1, [pc, #144]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800200c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002010:	d101      	bne.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002012:	2301      	movs	r3, #1
 8002014:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002022:	2301      	movs	r3, #1
 8002024:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002032:	4b18      	ldr	r3, [pc, #96]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002038:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002040:	4914      	ldr	r1, [pc, #80]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00b      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002054:	4b0f      	ldr	r3, [pc, #60]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800205a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002064:	490b      	ldr	r1, [pc, #44]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002066:	4313      	orrs	r3, r2
 8002068:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00f      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002078:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002088:	4902      	ldr	r1, [pc, #8]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002090:	e002      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00b      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80020a4:	4b8a      	ldr	r3, [pc, #552]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020aa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b4:	4986      	ldr	r1, [pc, #536]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00b      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80020c8:	4b81      	ldr	r3, [pc, #516]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020ce:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020d8:	497d      	ldr	r1, [pc, #500]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d006      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 80d6 	beq.w	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80020f4:	4b76      	ldr	r3, [pc, #472]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a75      	ldr	r2, [pc, #468]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80020fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002100:	f7fe fd04 	bl	8000b0c <HAL_GetTick>
 8002104:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002108:	f7fe fd00 	bl	8000b0c <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b64      	cmp	r3, #100	@ 0x64
 8002114:	d901      	bls.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e195      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800211a:	4b6d      	ldr	r3, [pc, #436]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d021      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002136:	2b00      	cmp	r3, #0
 8002138:	d11d      	bne.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800213a:	4b65      	ldr	r3, [pc, #404]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800213c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002140:	0c1b      	lsrs	r3, r3, #16
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002148:	4b61      	ldr	r3, [pc, #388]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800214a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800214e:	0e1b      	lsrs	r3, r3, #24
 8002150:	f003 030f 	and.w	r3, r3, #15
 8002154:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	019a      	lsls	r2, r3, #6
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	041b      	lsls	r3, r3, #16
 8002160:	431a      	orrs	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	061b      	lsls	r3, r3, #24
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	071b      	lsls	r3, r3, #28
 800216e:	4958      	ldr	r1, [pc, #352]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d004      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002186:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800218a:	d00a      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002194:	2b00      	cmp	r3, #0
 8002196:	d02e      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021a0:	d129      	bne.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021a2:	4b4b      	ldr	r3, [pc, #300]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021a8:	0c1b      	lsrs	r3, r3, #16
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021b0:	4b47      	ldr	r3, [pc, #284]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021b6:	0f1b      	lsrs	r3, r3, #28
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	019a      	lsls	r2, r3, #6
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	041b      	lsls	r3, r3, #16
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	061b      	lsls	r3, r3, #24
 80021d0:	431a      	orrs	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	071b      	lsls	r3, r3, #28
 80021d6:	493e      	ldr	r1, [pc, #248]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80021de:	4b3c      	ldr	r3, [pc, #240]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021e4:	f023 021f 	bic.w	r2, r3, #31
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ec:	3b01      	subs	r3, #1
 80021ee:	4938      	ldr	r1, [pc, #224]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d01d      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002202:	4b33      	ldr	r3, [pc, #204]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002204:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002208:	0e1b      	lsrs	r3, r3, #24
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002210:	4b2f      	ldr	r3, [pc, #188]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002216:	0f1b      	lsrs	r3, r3, #28
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	019a      	lsls	r2, r3, #6
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	041b      	lsls	r3, r3, #16
 800222a:	431a      	orrs	r2, r3
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	061b      	lsls	r3, r3, #24
 8002230:	431a      	orrs	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	071b      	lsls	r3, r3, #28
 8002236:	4926      	ldr	r1, [pc, #152]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d011      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	019a      	lsls	r2, r3, #6
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	041b      	lsls	r3, r3, #16
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	061b      	lsls	r3, r3, #24
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	071b      	lsls	r3, r3, #28
 8002266:	491a      	ldr	r1, [pc, #104]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800226e:	4b18      	ldr	r3, [pc, #96]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a17      	ldr	r2, [pc, #92]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002274:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002278:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800227a:	f7fe fc47 	bl	8000b0c <HAL_GetTick>
 800227e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002282:	f7fe fc43 	bl	8000b0c <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b64      	cmp	r3, #100	@ 0x64
 800228e:	d901      	bls.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e0d8      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002294:	4b0e      	ldr	r3, [pc, #56]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	f040 80ce 	bne.w	8002444 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80022a8:	4b09      	ldr	r3, [pc, #36]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a08      	ldr	r2, [pc, #32]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022b4:	f7fe fc2a 	bl	8000b0c <HAL_GetTick>
 80022b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022ba:	e00b      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80022bc:	f7fe fc26 	bl	8000b0c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b64      	cmp	r3, #100	@ 0x64
 80022c8:	d904      	bls.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e0bb      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022d4:	4b5e      	ldr	r3, [pc, #376]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022e0:	d0ec      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d009      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d02e      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	2b00      	cmp	r3, #0
 8002308:	d12a      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800230a:	4b51      	ldr	r3, [pc, #324]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002310:	0c1b      	lsrs	r3, r3, #16
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002318:	4b4d      	ldr	r3, [pc, #308]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231e:	0f1b      	lsrs	r3, r3, #28
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	019a      	lsls	r2, r3, #6
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	041b      	lsls	r3, r3, #16
 8002330:	431a      	orrs	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	061b      	lsls	r3, r3, #24
 8002338:	431a      	orrs	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	071b      	lsls	r3, r3, #28
 800233e:	4944      	ldr	r1, [pc, #272]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002346:	4b42      	ldr	r3, [pc, #264]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800234c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002354:	3b01      	subs	r3, #1
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	493d      	ldr	r1, [pc, #244]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d022      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002370:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002374:	d11d      	bne.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002376:	4b36      	ldr	r3, [pc, #216]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237c:	0e1b      	lsrs	r3, r3, #24
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002384:	4b32      	ldr	r3, [pc, #200]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800238a:	0f1b      	lsrs	r3, r3, #28
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	019a      	lsls	r2, r3, #6
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	041b      	lsls	r3, r3, #16
 800239e:	431a      	orrs	r2, r3
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	061b      	lsls	r3, r3, #24
 80023a4:	431a      	orrs	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	071b      	lsls	r3, r3, #28
 80023aa:	4929      	ldr	r1, [pc, #164]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d028      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023be:	4b24      	ldr	r3, [pc, #144]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c4:	0e1b      	lsrs	r3, r3, #24
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80023cc:	4b20      	ldr	r3, [pc, #128]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d2:	0c1b      	lsrs	r3, r3, #16
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	019a      	lsls	r2, r3, #6
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	041b      	lsls	r3, r3, #16
 80023e4:	431a      	orrs	r2, r3
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	061b      	lsls	r3, r3, #24
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	071b      	lsls	r3, r3, #28
 80023f2:	4917      	ldr	r1, [pc, #92]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80023fa:	4b15      	ldr	r3, [pc, #84]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002400:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002408:	4911      	ldr	r1, [pc, #68]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002410:	4b0f      	ldr	r3, [pc, #60]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a0e      	ldr	r2, [pc, #56]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002416:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800241a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800241c:	f7fe fb76 	bl	8000b0c <HAL_GetTick>
 8002420:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002424:	f7fe fb72 	bl	8000b0c <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	@ 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e007      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002436:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800243e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002442:	d1ef      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3720      	adds	r7, #32
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800

08002454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e040      	b.n	80024e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fe fa6e 	bl	8000958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2224      	movs	r2, #36	@ 0x24
 8002480:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0201 	bic.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fb16 	bl	8002acc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f8af 	bl	8002604 <UART_SetConfig>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e01b      	b.n	80024e8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 fb95 	bl	8002c10 <UART_CheckIdleState>
 80024e6:	4603      	mov	r3, r0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	@ 0x28
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	4613      	mov	r3, r2
 80024fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002504:	2b20      	cmp	r3, #32
 8002506:	d177      	bne.n	80025f8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <HAL_UART_Transmit+0x24>
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e070      	b.n	80025fa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2221      	movs	r2, #33	@ 0x21
 8002524:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002526:	f7fe faf1 	bl	8000b0c <HAL_GetTick>
 800252a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	88fa      	ldrh	r2, [r7, #6]
 8002530:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	88fa      	ldrh	r2, [r7, #6]
 8002538:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002544:	d108      	bne.n	8002558 <HAL_UART_Transmit+0x68>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d104      	bne.n	8002558 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	e003      	b.n	8002560 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800255c:	2300      	movs	r3, #0
 800255e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002560:	e02f      	b.n	80025c2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2200      	movs	r2, #0
 800256a:	2180      	movs	r1, #128	@ 0x80
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 fbf7 	bl	8002d60 <UART_WaitOnFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d004      	beq.n	8002582 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2220      	movs	r2, #32
 800257c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e03b      	b.n	80025fa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10b      	bne.n	80025a0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002596:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	3302      	adds	r3, #2
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	e007      	b.n	80025b0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3301      	adds	r3, #1
 80025ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1c9      	bne.n	8002562 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2200      	movs	r2, #0
 80025d6:	2140      	movs	r1, #64	@ 0x40
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 fbc1 	bl	8002d60 <UART_WaitOnFlagUntilTimeout>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d004      	beq.n	80025ee <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2220      	movs	r2, #32
 80025e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e005      	b.n	80025fa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2220      	movs	r2, #32
 80025f2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	e000      	b.n	80025fa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80025f8:	2302      	movs	r3, #2
  }
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4ba6      	ldr	r3, [pc, #664]	@ (80028c8 <UART_SetConfig+0x2c4>)
 8002630:	4013      	ands	r3, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	6979      	ldr	r1, [r7, #20]
 8002638:	430b      	orrs	r3, r1
 800263a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	4313      	orrs	r3, r2
 8002660:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	430a      	orrs	r2, r1
 8002674:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a94      	ldr	r2, [pc, #592]	@ (80028cc <UART_SetConfig+0x2c8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d120      	bne.n	80026c2 <UART_SetConfig+0xbe>
 8002680:	4b93      	ldr	r3, [pc, #588]	@ (80028d0 <UART_SetConfig+0x2cc>)
 8002682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	2b03      	cmp	r3, #3
 800268c:	d816      	bhi.n	80026bc <UART_SetConfig+0xb8>
 800268e:	a201      	add	r2, pc, #4	@ (adr r2, 8002694 <UART_SetConfig+0x90>)
 8002690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002694:	080026a5 	.word	0x080026a5
 8002698:	080026b1 	.word	0x080026b1
 800269c:	080026ab 	.word	0x080026ab
 80026a0:	080026b7 	.word	0x080026b7
 80026a4:	2301      	movs	r3, #1
 80026a6:	77fb      	strb	r3, [r7, #31]
 80026a8:	e150      	b.n	800294c <UART_SetConfig+0x348>
 80026aa:	2302      	movs	r3, #2
 80026ac:	77fb      	strb	r3, [r7, #31]
 80026ae:	e14d      	b.n	800294c <UART_SetConfig+0x348>
 80026b0:	2304      	movs	r3, #4
 80026b2:	77fb      	strb	r3, [r7, #31]
 80026b4:	e14a      	b.n	800294c <UART_SetConfig+0x348>
 80026b6:	2308      	movs	r3, #8
 80026b8:	77fb      	strb	r3, [r7, #31]
 80026ba:	e147      	b.n	800294c <UART_SetConfig+0x348>
 80026bc:	2310      	movs	r3, #16
 80026be:	77fb      	strb	r3, [r7, #31]
 80026c0:	e144      	b.n	800294c <UART_SetConfig+0x348>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a83      	ldr	r2, [pc, #524]	@ (80028d4 <UART_SetConfig+0x2d0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d132      	bne.n	8002732 <UART_SetConfig+0x12e>
 80026cc:	4b80      	ldr	r3, [pc, #512]	@ (80028d0 <UART_SetConfig+0x2cc>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d2:	f003 030c 	and.w	r3, r3, #12
 80026d6:	2b0c      	cmp	r3, #12
 80026d8:	d828      	bhi.n	800272c <UART_SetConfig+0x128>
 80026da:	a201      	add	r2, pc, #4	@ (adr r2, 80026e0 <UART_SetConfig+0xdc>)
 80026dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e0:	08002715 	.word	0x08002715
 80026e4:	0800272d 	.word	0x0800272d
 80026e8:	0800272d 	.word	0x0800272d
 80026ec:	0800272d 	.word	0x0800272d
 80026f0:	08002721 	.word	0x08002721
 80026f4:	0800272d 	.word	0x0800272d
 80026f8:	0800272d 	.word	0x0800272d
 80026fc:	0800272d 	.word	0x0800272d
 8002700:	0800271b 	.word	0x0800271b
 8002704:	0800272d 	.word	0x0800272d
 8002708:	0800272d 	.word	0x0800272d
 800270c:	0800272d 	.word	0x0800272d
 8002710:	08002727 	.word	0x08002727
 8002714:	2300      	movs	r3, #0
 8002716:	77fb      	strb	r3, [r7, #31]
 8002718:	e118      	b.n	800294c <UART_SetConfig+0x348>
 800271a:	2302      	movs	r3, #2
 800271c:	77fb      	strb	r3, [r7, #31]
 800271e:	e115      	b.n	800294c <UART_SetConfig+0x348>
 8002720:	2304      	movs	r3, #4
 8002722:	77fb      	strb	r3, [r7, #31]
 8002724:	e112      	b.n	800294c <UART_SetConfig+0x348>
 8002726:	2308      	movs	r3, #8
 8002728:	77fb      	strb	r3, [r7, #31]
 800272a:	e10f      	b.n	800294c <UART_SetConfig+0x348>
 800272c:	2310      	movs	r3, #16
 800272e:	77fb      	strb	r3, [r7, #31]
 8002730:	e10c      	b.n	800294c <UART_SetConfig+0x348>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a68      	ldr	r2, [pc, #416]	@ (80028d8 <UART_SetConfig+0x2d4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d120      	bne.n	800277e <UART_SetConfig+0x17a>
 800273c:	4b64      	ldr	r3, [pc, #400]	@ (80028d0 <UART_SetConfig+0x2cc>)
 800273e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002742:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002746:	2b30      	cmp	r3, #48	@ 0x30
 8002748:	d013      	beq.n	8002772 <UART_SetConfig+0x16e>
 800274a:	2b30      	cmp	r3, #48	@ 0x30
 800274c:	d814      	bhi.n	8002778 <UART_SetConfig+0x174>
 800274e:	2b20      	cmp	r3, #32
 8002750:	d009      	beq.n	8002766 <UART_SetConfig+0x162>
 8002752:	2b20      	cmp	r3, #32
 8002754:	d810      	bhi.n	8002778 <UART_SetConfig+0x174>
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <UART_SetConfig+0x15c>
 800275a:	2b10      	cmp	r3, #16
 800275c:	d006      	beq.n	800276c <UART_SetConfig+0x168>
 800275e:	e00b      	b.n	8002778 <UART_SetConfig+0x174>
 8002760:	2300      	movs	r3, #0
 8002762:	77fb      	strb	r3, [r7, #31]
 8002764:	e0f2      	b.n	800294c <UART_SetConfig+0x348>
 8002766:	2302      	movs	r3, #2
 8002768:	77fb      	strb	r3, [r7, #31]
 800276a:	e0ef      	b.n	800294c <UART_SetConfig+0x348>
 800276c:	2304      	movs	r3, #4
 800276e:	77fb      	strb	r3, [r7, #31]
 8002770:	e0ec      	b.n	800294c <UART_SetConfig+0x348>
 8002772:	2308      	movs	r3, #8
 8002774:	77fb      	strb	r3, [r7, #31]
 8002776:	e0e9      	b.n	800294c <UART_SetConfig+0x348>
 8002778:	2310      	movs	r3, #16
 800277a:	77fb      	strb	r3, [r7, #31]
 800277c:	e0e6      	b.n	800294c <UART_SetConfig+0x348>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a56      	ldr	r2, [pc, #344]	@ (80028dc <UART_SetConfig+0x2d8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d120      	bne.n	80027ca <UART_SetConfig+0x1c6>
 8002788:	4b51      	ldr	r3, [pc, #324]	@ (80028d0 <UART_SetConfig+0x2cc>)
 800278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002792:	2bc0      	cmp	r3, #192	@ 0xc0
 8002794:	d013      	beq.n	80027be <UART_SetConfig+0x1ba>
 8002796:	2bc0      	cmp	r3, #192	@ 0xc0
 8002798:	d814      	bhi.n	80027c4 <UART_SetConfig+0x1c0>
 800279a:	2b80      	cmp	r3, #128	@ 0x80
 800279c:	d009      	beq.n	80027b2 <UART_SetConfig+0x1ae>
 800279e:	2b80      	cmp	r3, #128	@ 0x80
 80027a0:	d810      	bhi.n	80027c4 <UART_SetConfig+0x1c0>
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <UART_SetConfig+0x1a8>
 80027a6:	2b40      	cmp	r3, #64	@ 0x40
 80027a8:	d006      	beq.n	80027b8 <UART_SetConfig+0x1b4>
 80027aa:	e00b      	b.n	80027c4 <UART_SetConfig+0x1c0>
 80027ac:	2300      	movs	r3, #0
 80027ae:	77fb      	strb	r3, [r7, #31]
 80027b0:	e0cc      	b.n	800294c <UART_SetConfig+0x348>
 80027b2:	2302      	movs	r3, #2
 80027b4:	77fb      	strb	r3, [r7, #31]
 80027b6:	e0c9      	b.n	800294c <UART_SetConfig+0x348>
 80027b8:	2304      	movs	r3, #4
 80027ba:	77fb      	strb	r3, [r7, #31]
 80027bc:	e0c6      	b.n	800294c <UART_SetConfig+0x348>
 80027be:	2308      	movs	r3, #8
 80027c0:	77fb      	strb	r3, [r7, #31]
 80027c2:	e0c3      	b.n	800294c <UART_SetConfig+0x348>
 80027c4:	2310      	movs	r3, #16
 80027c6:	77fb      	strb	r3, [r7, #31]
 80027c8:	e0c0      	b.n	800294c <UART_SetConfig+0x348>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a44      	ldr	r2, [pc, #272]	@ (80028e0 <UART_SetConfig+0x2dc>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d125      	bne.n	8002820 <UART_SetConfig+0x21c>
 80027d4:	4b3e      	ldr	r3, [pc, #248]	@ (80028d0 <UART_SetConfig+0x2cc>)
 80027d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027e2:	d017      	beq.n	8002814 <UART_SetConfig+0x210>
 80027e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027e8:	d817      	bhi.n	800281a <UART_SetConfig+0x216>
 80027ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027ee:	d00b      	beq.n	8002808 <UART_SetConfig+0x204>
 80027f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027f4:	d811      	bhi.n	800281a <UART_SetConfig+0x216>
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <UART_SetConfig+0x1fe>
 80027fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027fe:	d006      	beq.n	800280e <UART_SetConfig+0x20a>
 8002800:	e00b      	b.n	800281a <UART_SetConfig+0x216>
 8002802:	2300      	movs	r3, #0
 8002804:	77fb      	strb	r3, [r7, #31]
 8002806:	e0a1      	b.n	800294c <UART_SetConfig+0x348>
 8002808:	2302      	movs	r3, #2
 800280a:	77fb      	strb	r3, [r7, #31]
 800280c:	e09e      	b.n	800294c <UART_SetConfig+0x348>
 800280e:	2304      	movs	r3, #4
 8002810:	77fb      	strb	r3, [r7, #31]
 8002812:	e09b      	b.n	800294c <UART_SetConfig+0x348>
 8002814:	2308      	movs	r3, #8
 8002816:	77fb      	strb	r3, [r7, #31]
 8002818:	e098      	b.n	800294c <UART_SetConfig+0x348>
 800281a:	2310      	movs	r3, #16
 800281c:	77fb      	strb	r3, [r7, #31]
 800281e:	e095      	b.n	800294c <UART_SetConfig+0x348>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a2f      	ldr	r2, [pc, #188]	@ (80028e4 <UART_SetConfig+0x2e0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d125      	bne.n	8002876 <UART_SetConfig+0x272>
 800282a:	4b29      	ldr	r3, [pc, #164]	@ (80028d0 <UART_SetConfig+0x2cc>)
 800282c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002830:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002834:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002838:	d017      	beq.n	800286a <UART_SetConfig+0x266>
 800283a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800283e:	d817      	bhi.n	8002870 <UART_SetConfig+0x26c>
 8002840:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002844:	d00b      	beq.n	800285e <UART_SetConfig+0x25a>
 8002846:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800284a:	d811      	bhi.n	8002870 <UART_SetConfig+0x26c>
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <UART_SetConfig+0x254>
 8002850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002854:	d006      	beq.n	8002864 <UART_SetConfig+0x260>
 8002856:	e00b      	b.n	8002870 <UART_SetConfig+0x26c>
 8002858:	2301      	movs	r3, #1
 800285a:	77fb      	strb	r3, [r7, #31]
 800285c:	e076      	b.n	800294c <UART_SetConfig+0x348>
 800285e:	2302      	movs	r3, #2
 8002860:	77fb      	strb	r3, [r7, #31]
 8002862:	e073      	b.n	800294c <UART_SetConfig+0x348>
 8002864:	2304      	movs	r3, #4
 8002866:	77fb      	strb	r3, [r7, #31]
 8002868:	e070      	b.n	800294c <UART_SetConfig+0x348>
 800286a:	2308      	movs	r3, #8
 800286c:	77fb      	strb	r3, [r7, #31]
 800286e:	e06d      	b.n	800294c <UART_SetConfig+0x348>
 8002870:	2310      	movs	r3, #16
 8002872:	77fb      	strb	r3, [r7, #31]
 8002874:	e06a      	b.n	800294c <UART_SetConfig+0x348>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1b      	ldr	r2, [pc, #108]	@ (80028e8 <UART_SetConfig+0x2e4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d138      	bne.n	80028f2 <UART_SetConfig+0x2ee>
 8002880:	4b13      	ldr	r3, [pc, #76]	@ (80028d0 <UART_SetConfig+0x2cc>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002886:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800288a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800288e:	d017      	beq.n	80028c0 <UART_SetConfig+0x2bc>
 8002890:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002894:	d82a      	bhi.n	80028ec <UART_SetConfig+0x2e8>
 8002896:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800289a:	d00b      	beq.n	80028b4 <UART_SetConfig+0x2b0>
 800289c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028a0:	d824      	bhi.n	80028ec <UART_SetConfig+0x2e8>
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <UART_SetConfig+0x2aa>
 80028a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028aa:	d006      	beq.n	80028ba <UART_SetConfig+0x2b6>
 80028ac:	e01e      	b.n	80028ec <UART_SetConfig+0x2e8>
 80028ae:	2300      	movs	r3, #0
 80028b0:	77fb      	strb	r3, [r7, #31]
 80028b2:	e04b      	b.n	800294c <UART_SetConfig+0x348>
 80028b4:	2302      	movs	r3, #2
 80028b6:	77fb      	strb	r3, [r7, #31]
 80028b8:	e048      	b.n	800294c <UART_SetConfig+0x348>
 80028ba:	2304      	movs	r3, #4
 80028bc:	77fb      	strb	r3, [r7, #31]
 80028be:	e045      	b.n	800294c <UART_SetConfig+0x348>
 80028c0:	2308      	movs	r3, #8
 80028c2:	77fb      	strb	r3, [r7, #31]
 80028c4:	e042      	b.n	800294c <UART_SetConfig+0x348>
 80028c6:	bf00      	nop
 80028c8:	efff69f3 	.word	0xefff69f3
 80028cc:	40011000 	.word	0x40011000
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40004400 	.word	0x40004400
 80028d8:	40004800 	.word	0x40004800
 80028dc:	40004c00 	.word	0x40004c00
 80028e0:	40005000 	.word	0x40005000
 80028e4:	40011400 	.word	0x40011400
 80028e8:	40007800 	.word	0x40007800
 80028ec:	2310      	movs	r3, #16
 80028ee:	77fb      	strb	r3, [r7, #31]
 80028f0:	e02c      	b.n	800294c <UART_SetConfig+0x348>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a72      	ldr	r2, [pc, #456]	@ (8002ac0 <UART_SetConfig+0x4bc>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d125      	bne.n	8002948 <UART_SetConfig+0x344>
 80028fc:	4b71      	ldr	r3, [pc, #452]	@ (8002ac4 <UART_SetConfig+0x4c0>)
 80028fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002902:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002906:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800290a:	d017      	beq.n	800293c <UART_SetConfig+0x338>
 800290c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002910:	d817      	bhi.n	8002942 <UART_SetConfig+0x33e>
 8002912:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002916:	d00b      	beq.n	8002930 <UART_SetConfig+0x32c>
 8002918:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800291c:	d811      	bhi.n	8002942 <UART_SetConfig+0x33e>
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <UART_SetConfig+0x326>
 8002922:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002926:	d006      	beq.n	8002936 <UART_SetConfig+0x332>
 8002928:	e00b      	b.n	8002942 <UART_SetConfig+0x33e>
 800292a:	2300      	movs	r3, #0
 800292c:	77fb      	strb	r3, [r7, #31]
 800292e:	e00d      	b.n	800294c <UART_SetConfig+0x348>
 8002930:	2302      	movs	r3, #2
 8002932:	77fb      	strb	r3, [r7, #31]
 8002934:	e00a      	b.n	800294c <UART_SetConfig+0x348>
 8002936:	2304      	movs	r3, #4
 8002938:	77fb      	strb	r3, [r7, #31]
 800293a:	e007      	b.n	800294c <UART_SetConfig+0x348>
 800293c:	2308      	movs	r3, #8
 800293e:	77fb      	strb	r3, [r7, #31]
 8002940:	e004      	b.n	800294c <UART_SetConfig+0x348>
 8002942:	2310      	movs	r3, #16
 8002944:	77fb      	strb	r3, [r7, #31]
 8002946:	e001      	b.n	800294c <UART_SetConfig+0x348>
 8002948:	2310      	movs	r3, #16
 800294a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002954:	d15b      	bne.n	8002a0e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002956:	7ffb      	ldrb	r3, [r7, #31]
 8002958:	2b08      	cmp	r3, #8
 800295a:	d828      	bhi.n	80029ae <UART_SetConfig+0x3aa>
 800295c:	a201      	add	r2, pc, #4	@ (adr r2, 8002964 <UART_SetConfig+0x360>)
 800295e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002962:	bf00      	nop
 8002964:	08002989 	.word	0x08002989
 8002968:	08002991 	.word	0x08002991
 800296c:	08002999 	.word	0x08002999
 8002970:	080029af 	.word	0x080029af
 8002974:	0800299f 	.word	0x0800299f
 8002978:	080029af 	.word	0x080029af
 800297c:	080029af 	.word	0x080029af
 8002980:	080029af 	.word	0x080029af
 8002984:	080029a7 	.word	0x080029a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002988:	f7ff f914 	bl	8001bb4 <HAL_RCC_GetPCLK1Freq>
 800298c:	61b8      	str	r0, [r7, #24]
        break;
 800298e:	e013      	b.n	80029b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002990:	f7ff f924 	bl	8001bdc <HAL_RCC_GetPCLK2Freq>
 8002994:	61b8      	str	r0, [r7, #24]
        break;
 8002996:	e00f      	b.n	80029b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002998:	4b4b      	ldr	r3, [pc, #300]	@ (8002ac8 <UART_SetConfig+0x4c4>)
 800299a:	61bb      	str	r3, [r7, #24]
        break;
 800299c:	e00c      	b.n	80029b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800299e:	f7ff f837 	bl	8001a10 <HAL_RCC_GetSysClockFreq>
 80029a2:	61b8      	str	r0, [r7, #24]
        break;
 80029a4:	e008      	b.n	80029b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029aa:	61bb      	str	r3, [r7, #24]
        break;
 80029ac:	e004      	b.n	80029b8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	77bb      	strb	r3, [r7, #30]
        break;
 80029b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d074      	beq.n	8002aa8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	005a      	lsls	r2, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	441a      	add	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	2b0f      	cmp	r3, #15
 80029d8:	d916      	bls.n	8002a08 <UART_SetConfig+0x404>
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029e0:	d212      	bcs.n	8002a08 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	f023 030f 	bic.w	r3, r3, #15
 80029ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	085b      	lsrs	r3, r3, #1
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	89fb      	ldrh	r3, [r7, #14]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	89fa      	ldrh	r2, [r7, #14]
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	e04f      	b.n	8002aa8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	77bb      	strb	r3, [r7, #30]
 8002a0c:	e04c      	b.n	8002aa8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a0e:	7ffb      	ldrb	r3, [r7, #31]
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d828      	bhi.n	8002a66 <UART_SetConfig+0x462>
 8002a14:	a201      	add	r2, pc, #4	@ (adr r2, 8002a1c <UART_SetConfig+0x418>)
 8002a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1a:	bf00      	nop
 8002a1c:	08002a41 	.word	0x08002a41
 8002a20:	08002a49 	.word	0x08002a49
 8002a24:	08002a51 	.word	0x08002a51
 8002a28:	08002a67 	.word	0x08002a67
 8002a2c:	08002a57 	.word	0x08002a57
 8002a30:	08002a67 	.word	0x08002a67
 8002a34:	08002a67 	.word	0x08002a67
 8002a38:	08002a67 	.word	0x08002a67
 8002a3c:	08002a5f 	.word	0x08002a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a40:	f7ff f8b8 	bl	8001bb4 <HAL_RCC_GetPCLK1Freq>
 8002a44:	61b8      	str	r0, [r7, #24]
        break;
 8002a46:	e013      	b.n	8002a70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a48:	f7ff f8c8 	bl	8001bdc <HAL_RCC_GetPCLK2Freq>
 8002a4c:	61b8      	str	r0, [r7, #24]
        break;
 8002a4e:	e00f      	b.n	8002a70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a50:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac8 <UART_SetConfig+0x4c4>)
 8002a52:	61bb      	str	r3, [r7, #24]
        break;
 8002a54:	e00c      	b.n	8002a70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a56:	f7fe ffdb 	bl	8001a10 <HAL_RCC_GetSysClockFreq>
 8002a5a:	61b8      	str	r0, [r7, #24]
        break;
 8002a5c:	e008      	b.n	8002a70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a62:	61bb      	str	r3, [r7, #24]
        break;
 8002a64:	e004      	b.n	8002a70 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	77bb      	strb	r3, [r7, #30]
        break;
 8002a6e:	bf00      	nop
    }

    if (pclk != 0U)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d018      	beq.n	8002aa8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	085a      	lsrs	r2, r3, #1
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	441a      	add	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	2b0f      	cmp	r3, #15
 8002a8e:	d909      	bls.n	8002aa4 <UART_SetConfig+0x4a0>
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a96:	d205      	bcs.n	8002aa4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	e001      	b.n	8002aa8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002ab4:	7fbb      	ldrb	r3, [r7, #30]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3720      	adds	r7, #32
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40007c00 	.word	0x40007c00
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	00f42400 	.word	0x00f42400

08002acc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d01a      	beq.n	8002be2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bca:	d10a      	bne.n	8002be2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	605a      	str	r2, [r3, #4]
  }
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b098      	sub	sp, #96	@ 0x60
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c20:	f7fd ff74 	bl	8000b0c <HAL_GetTick>
 8002c24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d12e      	bne.n	8002c92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f88c 	bl	8002d60 <UART_WaitOnFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d021      	beq.n	8002c92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c56:	e853 3f00 	ldrex	r3, [r3]
 8002c5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c62:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c6e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c74:	e841 2300 	strex	r3, r2, [r1]
 8002c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1e6      	bne.n	8002c4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2220      	movs	r2, #32
 8002c84:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e062      	b.n	8002d58 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d149      	bne.n	8002d34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ca0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f856 	bl	8002d60 <UART_WaitOnFlagUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d03c      	beq.n	8002d34 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc2:	e853 3f00 	ldrex	r3, [r3]
 8002cc6:	623b      	str	r3, [r7, #32]
   return(result);
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cda:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cdc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ce0:	e841 2300 	strex	r3, r2, [r1]
 8002ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1e6      	bne.n	8002cba <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3308      	adds	r3, #8
 8002cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	e853 3f00 	ldrex	r3, [r3]
 8002cfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0301 	bic.w	r3, r3, #1
 8002d02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3308      	adds	r3, #8
 8002d0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d0c:	61fa      	str	r2, [r7, #28]
 8002d0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d10:	69b9      	ldr	r1, [r7, #24]
 8002d12:	69fa      	ldr	r2, [r7, #28]
 8002d14:	e841 2300 	strex	r3, r2, [r1]
 8002d18:	617b      	str	r3, [r7, #20]
   return(result);
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1e5      	bne.n	8002cec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e011      	b.n	8002d58 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2220      	movs	r2, #32
 8002d38:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3758      	adds	r7, #88	@ 0x58
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d70:	e04f      	b.n	8002e12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d78:	d04b      	beq.n	8002e12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7a:	f7fd fec7 	bl	8000b0c <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d302      	bcc.n	8002d90 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e04e      	b.n	8002e32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d037      	beq.n	8002e12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2b80      	cmp	r3, #128	@ 0x80
 8002da6:	d034      	beq.n	8002e12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b40      	cmp	r3, #64	@ 0x40
 8002dac:	d031      	beq.n	8002e12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d110      	bne.n	8002dde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 f838 	bl	8002e3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2208      	movs	r2, #8
 8002dce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e029      	b.n	8002e32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002de8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dec:	d111      	bne.n	8002e12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002df6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 f81e 	bl	8002e3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e00f      	b.n	8002e32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69da      	ldr	r2, [r3, #28]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	bf0c      	ite	eq
 8002e22:	2301      	moveq	r3, #1
 8002e24:	2300      	movne	r3, #0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	461a      	mov	r2, r3
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d0a0      	beq.n	8002d72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b095      	sub	sp, #84	@ 0x54
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e4a:	e853 3f00 	ldrex	r3, [r3]
 8002e4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e60:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e68:	e841 2300 	strex	r3, r2, [r1]
 8002e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1e6      	bne.n	8002e42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3308      	adds	r3, #8
 8002e7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	e853 3f00 	ldrex	r3, [r3]
 8002e82:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f023 0301 	bic.w	r3, r3, #1
 8002e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3308      	adds	r3, #8
 8002e92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e9c:	e841 2300 	strex	r3, r2, [r1]
 8002ea0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1e5      	bne.n	8002e74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d118      	bne.n	8002ee2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	e853 3f00 	ldrex	r3, [r3]
 8002ebc:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f023 0310 	bic.w	r3, r3, #16
 8002ec4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed2:	6979      	ldr	r1, [r7, #20]
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	e841 2300 	strex	r3, r2, [r1]
 8002eda:	613b      	str	r3, [r7, #16]
   return(result);
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1e6      	bne.n	8002eb0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002ef6:	bf00      	nop
 8002ef8:	3754      	adds	r7, #84	@ 0x54
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <memset>:
 8002f02:	4402      	add	r2, r0
 8002f04:	4603      	mov	r3, r0
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d100      	bne.n	8002f0c <memset+0xa>
 8002f0a:	4770      	bx	lr
 8002f0c:	f803 1b01 	strb.w	r1, [r3], #1
 8002f10:	e7f9      	b.n	8002f06 <memset+0x4>
	...

08002f14 <__libc_init_array>:
 8002f14:	b570      	push	{r4, r5, r6, lr}
 8002f16:	4d0d      	ldr	r5, [pc, #52]	@ (8002f4c <__libc_init_array+0x38>)
 8002f18:	4c0d      	ldr	r4, [pc, #52]	@ (8002f50 <__libc_init_array+0x3c>)
 8002f1a:	1b64      	subs	r4, r4, r5
 8002f1c:	10a4      	asrs	r4, r4, #2
 8002f1e:	2600      	movs	r6, #0
 8002f20:	42a6      	cmp	r6, r4
 8002f22:	d109      	bne.n	8002f38 <__libc_init_array+0x24>
 8002f24:	4d0b      	ldr	r5, [pc, #44]	@ (8002f54 <__libc_init_array+0x40>)
 8002f26:	4c0c      	ldr	r4, [pc, #48]	@ (8002f58 <__libc_init_array+0x44>)
 8002f28:	f000 f818 	bl	8002f5c <_init>
 8002f2c:	1b64      	subs	r4, r4, r5
 8002f2e:	10a4      	asrs	r4, r4, #2
 8002f30:	2600      	movs	r6, #0
 8002f32:	42a6      	cmp	r6, r4
 8002f34:	d105      	bne.n	8002f42 <__libc_init_array+0x2e>
 8002f36:	bd70      	pop	{r4, r5, r6, pc}
 8002f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f3c:	4798      	blx	r3
 8002f3e:	3601      	adds	r6, #1
 8002f40:	e7ee      	b.n	8002f20 <__libc_init_array+0xc>
 8002f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f46:	4798      	blx	r3
 8002f48:	3601      	adds	r6, #1
 8002f4a:	e7f2      	b.n	8002f32 <__libc_init_array+0x1e>
 8002f4c:	08002f9c 	.word	0x08002f9c
 8002f50:	08002f9c 	.word	0x08002f9c
 8002f54:	08002f9c 	.word	0x08002f9c
 8002f58:	08002fa0 	.word	0x08002fa0

08002f5c <_init>:
 8002f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5e:	bf00      	nop
 8002f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f62:	bc08      	pop	{r3}
 8002f64:	469e      	mov	lr, r3
 8002f66:	4770      	bx	lr

08002f68 <_fini>:
 8002f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6a:	bf00      	nop
 8002f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f6e:	bc08      	pop	{r3}
 8002f70:	469e      	mov	lr, r3
 8002f72:	4770      	bx	lr
