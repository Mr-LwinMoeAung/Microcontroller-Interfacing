
lab7_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004050  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004248  08004248  00005248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004270  08004270  00006024  2**0
                  CONTENTS
  4 .ARM          00000008  08004270  08004270  00005270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004278  08004278  00006024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004278  08004278  00005278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800427c  0800427c  0000527c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08004280  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000024  080042a4  00006024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080042a4  00006128  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000edcf  00000000  00000000  00006052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fd4  00000000  00000000  00014e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00016df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a39  00000000  00000000  00017b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d0c  00000000  00000000  00018549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001121a  00000000  00000000  00040255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faacd  00000000  00000000  0005146f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014bf3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000364c  00000000  00000000  0014bf80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0014f5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000024 	.word	0x20000024
 8000214:	00000000 	.word	0x00000000
 8000218:	08004230 	.word	0x08004230

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000028 	.word	0x20000028
 8000234:	08004230 	.word	0x08004230

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96a 	b.w	8000534 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	460c      	mov	r4, r1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d14e      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000284:	4694      	mov	ip, r2
 8000286:	458c      	cmp	ip, r1
 8000288:	4686      	mov	lr, r0
 800028a:	fab2 f282 	clz	r2, r2
 800028e:	d962      	bls.n	8000356 <__udivmoddi4+0xde>
 8000290:	b14a      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000292:	f1c2 0320 	rsb	r3, r2, #32
 8000296:	4091      	lsls	r1, r2
 8000298:	fa20 f303 	lsr.w	r3, r0, r3
 800029c:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a0:	4319      	orrs	r1, r3
 80002a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002aa:	fa1f f68c 	uxth.w	r6, ip
 80002ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80002b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b6:	fb07 1114 	mls	r1, r7, r4, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb04 f106 	mul.w	r1, r4, r6
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ce:	f080 8112 	bcs.w	80004f6 <__udivmoddi4+0x27e>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 810f 	bls.w	80004f6 <__udivmoddi4+0x27e>
 80002d8:	3c02      	subs	r4, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a59      	subs	r1, r3, r1
 80002de:	fa1f f38e 	uxth.w	r3, lr
 80002e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ee:	fb00 f606 	mul.w	r6, r0, r6
 80002f2:	429e      	cmp	r6, r3
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x94>
 80002f6:	eb1c 0303 	adds.w	r3, ip, r3
 80002fa:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fe:	f080 80fc 	bcs.w	80004fa <__udivmoddi4+0x282>
 8000302:	429e      	cmp	r6, r3
 8000304:	f240 80f9 	bls.w	80004fa <__udivmoddi4+0x282>
 8000308:	4463      	add	r3, ip
 800030a:	3802      	subs	r0, #2
 800030c:	1b9b      	subs	r3, r3, r6
 800030e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000312:	2100      	movs	r1, #0
 8000314:	b11d      	cbz	r5, 800031e <__udivmoddi4+0xa6>
 8000316:	40d3      	lsrs	r3, r2
 8000318:	2200      	movs	r2, #0
 800031a:	e9c5 3200 	strd	r3, r2, [r5]
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d905      	bls.n	8000332 <__udivmoddi4+0xba>
 8000326:	b10d      	cbz	r5, 800032c <__udivmoddi4+0xb4>
 8000328:	e9c5 0100 	strd	r0, r1, [r5]
 800032c:	2100      	movs	r1, #0
 800032e:	4608      	mov	r0, r1
 8000330:	e7f5      	b.n	800031e <__udivmoddi4+0xa6>
 8000332:	fab3 f183 	clz	r1, r3
 8000336:	2900      	cmp	r1, #0
 8000338:	d146      	bne.n	80003c8 <__udivmoddi4+0x150>
 800033a:	42a3      	cmp	r3, r4
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xcc>
 800033e:	4290      	cmp	r0, r2
 8000340:	f0c0 80f0 	bcc.w	8000524 <__udivmoddi4+0x2ac>
 8000344:	1a86      	subs	r6, r0, r2
 8000346:	eb64 0303 	sbc.w	r3, r4, r3
 800034a:	2001      	movs	r0, #1
 800034c:	2d00      	cmp	r5, #0
 800034e:	d0e6      	beq.n	800031e <__udivmoddi4+0xa6>
 8000350:	e9c5 6300 	strd	r6, r3, [r5]
 8000354:	e7e3      	b.n	800031e <__udivmoddi4+0xa6>
 8000356:	2a00      	cmp	r2, #0
 8000358:	f040 8090 	bne.w	800047c <__udivmoddi4+0x204>
 800035c:	eba1 040c 	sub.w	r4, r1, ip
 8000360:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000364:	fa1f f78c 	uxth.w	r7, ip
 8000368:	2101      	movs	r1, #1
 800036a:	fbb4 f6f8 	udiv	r6, r4, r8
 800036e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000372:	fb08 4416 	mls	r4, r8, r6, r4
 8000376:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037a:	fb07 f006 	mul.w	r0, r7, r6
 800037e:	4298      	cmp	r0, r3
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x11c>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f106 34ff 	add.w	r4, r6, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x11a>
 800038c:	4298      	cmp	r0, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2b4>
 8000392:	4626      	mov	r6, r4
 8000394:	1a1c      	subs	r4, r3, r0
 8000396:	fa1f f38e 	uxth.w	r3, lr
 800039a:	fbb4 f0f8 	udiv	r0, r4, r8
 800039e:	fb08 4410 	mls	r4, r8, r0, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb00 f707 	mul.w	r7, r0, r7
 80003aa:	429f      	cmp	r7, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x148>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x146>
 80003b8:	429f      	cmp	r7, r3
 80003ba:	f200 80b0 	bhi.w	800051e <__udivmoddi4+0x2a6>
 80003be:	4620      	mov	r0, r4
 80003c0:	1bdb      	subs	r3, r3, r7
 80003c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003c6:	e7a5      	b.n	8000314 <__udivmoddi4+0x9c>
 80003c8:	f1c1 0620 	rsb	r6, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 f706 	lsr.w	r7, r2, r6
 80003d2:	431f      	orrs	r7, r3
 80003d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d8:	fa04 f301 	lsl.w	r3, r4, r1
 80003dc:	ea43 030c 	orr.w	r3, r3, ip
 80003e0:	40f4      	lsrs	r4, r6
 80003e2:	fa00 f801 	lsl.w	r8, r0, r1
 80003e6:	0c38      	lsrs	r0, r7, #16
 80003e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ec:	fbb4 fef0 	udiv	lr, r4, r0
 80003f0:	fa1f fc87 	uxth.w	ip, r7
 80003f4:	fb00 441e 	mls	r4, r0, lr, r4
 80003f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000400:	45a1      	cmp	r9, r4
 8000402:	fa02 f201 	lsl.w	r2, r2, r1
 8000406:	d90a      	bls.n	800041e <__udivmoddi4+0x1a6>
 8000408:	193c      	adds	r4, r7, r4
 800040a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800040e:	f080 8084 	bcs.w	800051a <__udivmoddi4+0x2a2>
 8000412:	45a1      	cmp	r9, r4
 8000414:	f240 8081 	bls.w	800051a <__udivmoddi4+0x2a2>
 8000418:	f1ae 0e02 	sub.w	lr, lr, #2
 800041c:	443c      	add	r4, r7
 800041e:	eba4 0409 	sub.w	r4, r4, r9
 8000422:	fa1f f983 	uxth.w	r9, r3
 8000426:	fbb4 f3f0 	udiv	r3, r4, r0
 800042a:	fb00 4413 	mls	r4, r0, r3, r4
 800042e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000432:	fb03 fc0c 	mul.w	ip, r3, ip
 8000436:	45a4      	cmp	ip, r4
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x1d2>
 800043a:	193c      	adds	r4, r7, r4
 800043c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000440:	d267      	bcs.n	8000512 <__udivmoddi4+0x29a>
 8000442:	45a4      	cmp	ip, r4
 8000444:	d965      	bls.n	8000512 <__udivmoddi4+0x29a>
 8000446:	3b02      	subs	r3, #2
 8000448:	443c      	add	r4, r7
 800044a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800044e:	fba0 9302 	umull	r9, r3, r0, r2
 8000452:	eba4 040c 	sub.w	r4, r4, ip
 8000456:	429c      	cmp	r4, r3
 8000458:	46ce      	mov	lr, r9
 800045a:	469c      	mov	ip, r3
 800045c:	d351      	bcc.n	8000502 <__udivmoddi4+0x28a>
 800045e:	d04e      	beq.n	80004fe <__udivmoddi4+0x286>
 8000460:	b155      	cbz	r5, 8000478 <__udivmoddi4+0x200>
 8000462:	ebb8 030e 	subs.w	r3, r8, lr
 8000466:	eb64 040c 	sbc.w	r4, r4, ip
 800046a:	fa04 f606 	lsl.w	r6, r4, r6
 800046e:	40cb      	lsrs	r3, r1
 8000470:	431e      	orrs	r6, r3
 8000472:	40cc      	lsrs	r4, r1
 8000474:	e9c5 6400 	strd	r6, r4, [r5]
 8000478:	2100      	movs	r1, #0
 800047a:	e750      	b.n	800031e <__udivmoddi4+0xa6>
 800047c:	f1c2 0320 	rsb	r3, r2, #32
 8000480:	fa20 f103 	lsr.w	r1, r0, r3
 8000484:	fa0c fc02 	lsl.w	ip, ip, r2
 8000488:	fa24 f303 	lsr.w	r3, r4, r3
 800048c:	4094      	lsls	r4, r2
 800048e:	430c      	orrs	r4, r1
 8000490:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000494:	fa00 fe02 	lsl.w	lr, r0, r2
 8000498:	fa1f f78c 	uxth.w	r7, ip
 800049c:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a0:	fb08 3110 	mls	r1, r8, r0, r3
 80004a4:	0c23      	lsrs	r3, r4, #16
 80004a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004aa:	fb00 f107 	mul.w	r1, r0, r7
 80004ae:	4299      	cmp	r1, r3
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x24c>
 80004b2:	eb1c 0303 	adds.w	r3, ip, r3
 80004b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004ba:	d22c      	bcs.n	8000516 <__udivmoddi4+0x29e>
 80004bc:	4299      	cmp	r1, r3
 80004be:	d92a      	bls.n	8000516 <__udivmoddi4+0x29e>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	1a5b      	subs	r3, r3, r1
 80004c6:	b2a4      	uxth	r4, r4
 80004c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004cc:	fb08 3311 	mls	r3, r8, r1, r3
 80004d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d4:	fb01 f307 	mul.w	r3, r1, r7
 80004d8:	42a3      	cmp	r3, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x276>
 80004dc:	eb1c 0404 	adds.w	r4, ip, r4
 80004e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004e4:	d213      	bcs.n	800050e <__udivmoddi4+0x296>
 80004e6:	42a3      	cmp	r3, r4
 80004e8:	d911      	bls.n	800050e <__udivmoddi4+0x296>
 80004ea:	3902      	subs	r1, #2
 80004ec:	4464      	add	r4, ip
 80004ee:	1ae4      	subs	r4, r4, r3
 80004f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004f4:	e739      	b.n	800036a <__udivmoddi4+0xf2>
 80004f6:	4604      	mov	r4, r0
 80004f8:	e6f0      	b.n	80002dc <__udivmoddi4+0x64>
 80004fa:	4608      	mov	r0, r1
 80004fc:	e706      	b.n	800030c <__udivmoddi4+0x94>
 80004fe:	45c8      	cmp	r8, r9
 8000500:	d2ae      	bcs.n	8000460 <__udivmoddi4+0x1e8>
 8000502:	ebb9 0e02 	subs.w	lr, r9, r2
 8000506:	eb63 0c07 	sbc.w	ip, r3, r7
 800050a:	3801      	subs	r0, #1
 800050c:	e7a8      	b.n	8000460 <__udivmoddi4+0x1e8>
 800050e:	4631      	mov	r1, r6
 8000510:	e7ed      	b.n	80004ee <__udivmoddi4+0x276>
 8000512:	4603      	mov	r3, r0
 8000514:	e799      	b.n	800044a <__udivmoddi4+0x1d2>
 8000516:	4630      	mov	r0, r6
 8000518:	e7d4      	b.n	80004c4 <__udivmoddi4+0x24c>
 800051a:	46d6      	mov	lr, sl
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1a6>
 800051e:	4463      	add	r3, ip
 8000520:	3802      	subs	r0, #2
 8000522:	e74d      	b.n	80003c0 <__udivmoddi4+0x148>
 8000524:	4606      	mov	r6, r0
 8000526:	4623      	mov	r3, r4
 8000528:	4608      	mov	r0, r1
 800052a:	e70f      	b.n	800034c <__udivmoddi4+0xd4>
 800052c:	3e02      	subs	r6, #2
 800052e:	4463      	add	r3, ip
 8000530:	e730      	b.n	8000394 <__udivmoddi4+0x11c>
 8000532:	bf00      	nop

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053e:	4b0f      	ldr	r3, [pc, #60]	@ (800057c <MX_GPIO_Init+0x44>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	4a0e      	ldr	r2, [pc, #56]	@ (800057c <MX_GPIO_Init+0x44>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6313      	str	r3, [r2, #48]	@ 0x30
 800054a:	4b0c      	ldr	r3, [pc, #48]	@ (800057c <MX_GPIO_Init+0x44>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000556:	4b09      	ldr	r3, [pc, #36]	@ (800057c <MX_GPIO_Init+0x44>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a08      	ldr	r2, [pc, #32]	@ (800057c <MX_GPIO_Init+0x44>)
 800055c:	f043 0308 	orr.w	r3, r3, #8
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b06      	ldr	r3, [pc, #24]	@ (800057c <MX_GPIO_Init+0x44>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0308 	and.w	r3, r3, #8
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]

}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40023800 	.word	0x40023800

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000586:	f000 f979 	bl	800087c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fbaa 	bl	8000ce2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f907 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f7ff ffd1 	bl	8000538 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000596:	f000 fa09 	bl	80009ac <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800059a:	f000 fae9 	bl	8000b70 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // Start PWM channels for red, green, blue
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);  // Red on TIM2_CH2
 800059e:	2104      	movs	r1, #4
 80005a0:	481e      	ldr	r0, [pc, #120]	@ (800061c <main+0x9c>)
 80005a2:	f002 f8c9 	bl	8002738 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  // Green on TIM2_CH3
 80005a6:	2108      	movs	r1, #8
 80005a8:	481c      	ldr	r0, [pc, #112]	@ (800061c <main+0x9c>)
 80005aa:	f002 f8c5 	bl	8002738 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);  // Blue on TIM2_CH4
 80005ae:	210c      	movs	r1, #12
 80005b0:	481a      	ldr	r0, [pc, #104]	@ (800061c <main+0x9c>)
 80005b2:	f002 f8c1 	bl	8002738 <HAL_TIM_PWM_Start>
  char received_char;
  char message[] = "Enter key: ";
 80005b6:	4a1a      	ldr	r2, [pc, #104]	@ (8000620 <main+0xa0>)
 80005b8:	463b      	mov	r3, r7
 80005ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80005bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80005c0:	463b      	mov	r3, r7
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fe38 	bl	8000238 <strlen>
 80005c8:	4603      	mov	r3, r0
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	4639      	mov	r1, r7
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
 80005d2:	4814      	ldr	r0, [pc, #80]	@ (8000624 <main+0xa4>)
 80005d4:	f003 f82e 	bl	8003634 <HAL_UART_Transmit>
	  if (HAL_UART_Receive(&huart3, (uint8_t *)&received_char, 1, HAL_MAX_DELAY) == HAL_OK) {
 80005d8:	f107 010f 	add.w	r1, r7, #15
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
 80005e0:	2201      	movs	r2, #1
 80005e2:	4810      	ldr	r0, [pc, #64]	@ (8000624 <main+0xa4>)
 80005e4:	f003 f8af 	bl	8003746 <HAL_UART_Receive>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d1e8      	bne.n	80005c0 <main+0x40>
		  HAL_UART_Transmit(&huart3, &received_char, 1, HAL_MAX_DELAY);
 80005ee:	f107 010f 	add.w	r1, r7, #15
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	2201      	movs	r2, #1
 80005f8:	480a      	ldr	r0, [pc, #40]	@ (8000624 <main+0xa4>)
 80005fa:	f003 f81b 	bl	8003634 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	2202      	movs	r2, #2
 8000604:	4908      	ldr	r1, [pc, #32]	@ (8000628 <main+0xa8>)
 8000606:	4807      	ldr	r0, [pc, #28]	@ (8000624 <main+0xa4>)
 8000608:	f003 f814 	bl	8003634 <HAL_UART_Transmit>
		  Handle_Key_Input(received_char);  // Handle 'r', 'g', 'b' keypress
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f874 	bl	80006fc <Handle_Key_Input>
	      Set_RGB_Brightness();  // Update brightness based on the latest values
 8000614:	f000 f80a 	bl	800062c <Set_RGB_Brightness>
	  HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000618:	e7d2      	b.n	80005c0 <main+0x40>
 800061a:	bf00      	nop
 800061c:	20000050 	.word	0x20000050
 8000620:	0800424c 	.word	0x0800424c
 8000624:	2000009c 	.word	0x2000009c
 8000628:	08004248 	.word	0x08004248

0800062c <Set_RGB_Brightness>:
  /* USER CODE END 3 */
}
}

  // Function to set the brightness of the RGB LED using PWM duty cycles
  void Set_RGB_Brightness(void) {
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
	  // Update the duty cycle of each color and store it in global variables
	  red_duty_cycle = brightness_levels[red_brightness];    // Red duty cycle
 8000630:	4b29      	ldr	r3, [pc, #164]	@ (80006d8 <Set_RGB_Brightness+0xac>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	4a29      	ldr	r2, [pc, #164]	@ (80006dc <Set_RGB_Brightness+0xb0>)
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	4413      	add	r3, r2
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a28      	ldr	r2, [pc, #160]	@ (80006e0 <Set_RGB_Brightness+0xb4>)
 800063e:	6013      	str	r3, [r2, #0]
	  green_duty_cycle = brightness_levels[green_brightness]; // Green duty cycle
 8000640:	4b28      	ldr	r3, [pc, #160]	@ (80006e4 <Set_RGB_Brightness+0xb8>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	4a25      	ldr	r2, [pc, #148]	@ (80006dc <Set_RGB_Brightness+0xb0>)
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	4413      	add	r3, r2
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a26      	ldr	r2, [pc, #152]	@ (80006e8 <Set_RGB_Brightness+0xbc>)
 800064e:	6013      	str	r3, [r2, #0]
	  blue_duty_cycle = brightness_levels[blue_brightness];   // Blue duty cycle
 8000650:	4b26      	ldr	r3, [pc, #152]	@ (80006ec <Set_RGB_Brightness+0xc0>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	4a21      	ldr	r2, [pc, #132]	@ (80006dc <Set_RGB_Brightness+0xb0>)
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	4413      	add	r3, r2
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a24      	ldr	r2, [pc, #144]	@ (80006f0 <Set_RGB_Brightness+0xc4>)
 800065e:	6013      	str	r3, [r2, #0]
	  // Update the duty cycle of each color based on brightness levels (0-100%)
      htim2.Instance->CCR2 = (10000 - 1) * brightness_levels[red_brightness];   // Red brightness (TIM2_CH2)
 8000660:	4b1d      	ldr	r3, [pc, #116]	@ (80006d8 <Set_RGB_Brightness+0xac>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4a1d      	ldr	r2, [pc, #116]	@ (80006dc <Set_RGB_Brightness+0xb0>)
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	4413      	add	r3, r2
 800066a:	edd3 7a00 	vldr	s15, [r3]
 800066e:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80006f4 <Set_RGB_Brightness+0xc8>
 8000672:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000676:	4b20      	ldr	r3, [pc, #128]	@ (80006f8 <Set_RGB_Brightness+0xcc>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800067e:	ee17 2a90 	vmov	r2, s15
 8000682:	639a      	str	r2, [r3, #56]	@ 0x38
      htim2.Instance->CCR3 = (10000 - 1) * brightness_levels[green_brightness]; // Green brightness (TIM2_CH3)
 8000684:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <Set_RGB_Brightness+0xb8>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	4a14      	ldr	r2, [pc, #80]	@ (80006dc <Set_RGB_Brightness+0xb0>)
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	4413      	add	r3, r2
 800068e:	edd3 7a00 	vldr	s15, [r3]
 8000692:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80006f4 <Set_RGB_Brightness+0xc8>
 8000696:	ee67 7a87 	vmul.f32	s15, s15, s14
 800069a:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <Set_RGB_Brightness+0xcc>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006a2:	ee17 2a90 	vmov	r2, s15
 80006a6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim2.Instance->CCR4 = (10000 - 1) * brightness_levels[blue_brightness];  // Blue brightness (TIM2_CH4)
 80006a8:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <Set_RGB_Brightness+0xc0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4a0b      	ldr	r2, [pc, #44]	@ (80006dc <Set_RGB_Brightness+0xb0>)
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	4413      	add	r3, r2
 80006b2:	edd3 7a00 	vldr	s15, [r3]
 80006b6:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80006f4 <Set_RGB_Brightness+0xc8>
 80006ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006be:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <Set_RGB_Brightness+0xcc>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006c6:	ee17 2a90 	vmov	r2, s15
 80006ca:	641a      	str	r2, [r3, #64]	@ 0x40
  }
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000040 	.word	0x20000040
 80006dc:	20000000 	.word	0x20000000
 80006e0:	20000044 	.word	0x20000044
 80006e4:	20000041 	.word	0x20000041
 80006e8:	20000048 	.word	0x20000048
 80006ec:	20000042 	.word	0x20000042
 80006f0:	2000004c 	.word	0x2000004c
 80006f4:	461c3c00 	.word	0x461c3c00
 80006f8:	20000050 	.word	0x20000050

080006fc <Handle_Key_Input>:

  // Function to handle key input and cycle through brightness levels
  void Handle_Key_Input(char key) {
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
      switch (key) {
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	2b72      	cmp	r3, #114	@ 0x72
 800070a:	d006      	beq.n	800071a <Handle_Key_Input+0x1e>
 800070c:	2b72      	cmp	r3, #114	@ 0x72
 800070e:	dc37      	bgt.n	8000780 <Handle_Key_Input+0x84>
 8000710:	2b62      	cmp	r3, #98	@ 0x62
 8000712:	d024      	beq.n	800075e <Handle_Key_Input+0x62>
 8000714:	2b67      	cmp	r3, #103	@ 0x67
 8000716:	d011      	beq.n	800073c <Handle_Key_Input+0x40>
          case 'b':  // Increase blue brightness
              blue_brightness = (blue_brightness + 1) % 6;
              break;
          default:
              // Ignore other keys
              break;
 8000718:	e032      	b.n	8000780 <Handle_Key_Input+0x84>
              red_brightness = (red_brightness + 1) % 6;  // Cycle from 0% to 100% and back to 0%
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <Handle_Key_Input+0x94>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	1c5a      	adds	r2, r3, #1
 8000720:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <Handle_Key_Input+0x98>)
 8000722:	fb83 3102 	smull	r3, r1, r3, r2
 8000726:	17d3      	asrs	r3, r2, #31
 8000728:	1ac9      	subs	r1, r1, r3
 800072a:	460b      	mov	r3, r1
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	440b      	add	r3, r1
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	1ad1      	subs	r1, r2, r3
 8000734:	b2ca      	uxtb	r2, r1
 8000736:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <Handle_Key_Input+0x94>)
 8000738:	701a      	strb	r2, [r3, #0]
              break;
 800073a:	e022      	b.n	8000782 <Handle_Key_Input+0x86>
              green_brightness = (green_brightness + 1) % 6;
 800073c:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <Handle_Key_Input+0x9c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	1c5a      	adds	r2, r3, #1
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <Handle_Key_Input+0x98>)
 8000744:	fb83 3102 	smull	r3, r1, r3, r2
 8000748:	17d3      	asrs	r3, r2, #31
 800074a:	1ac9      	subs	r1, r1, r3
 800074c:	460b      	mov	r3, r1
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	440b      	add	r3, r1
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	1ad1      	subs	r1, r2, r3
 8000756:	b2ca      	uxtb	r2, r1
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <Handle_Key_Input+0x9c>)
 800075a:	701a      	strb	r2, [r3, #0]
              break;
 800075c:	e011      	b.n	8000782 <Handle_Key_Input+0x86>
              blue_brightness = (blue_brightness + 1) % 6;
 800075e:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <Handle_Key_Input+0xa0>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	1c5a      	adds	r2, r3, #1
 8000764:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <Handle_Key_Input+0x98>)
 8000766:	fb83 3102 	smull	r3, r1, r3, r2
 800076a:	17d3      	asrs	r3, r2, #31
 800076c:	1ac9      	subs	r1, r1, r3
 800076e:	460b      	mov	r3, r1
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	440b      	add	r3, r1
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	1ad1      	subs	r1, r2, r3
 8000778:	b2ca      	uxtb	r2, r1
 800077a:	4b08      	ldr	r3, [pc, #32]	@ (800079c <Handle_Key_Input+0xa0>)
 800077c:	701a      	strb	r2, [r3, #0]
              break;
 800077e:	e000      	b.n	8000782 <Handle_Key_Input+0x86>
              break;
 8000780:	bf00      	nop
      }
  }
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000040 	.word	0x20000040
 8000794:	2aaaaaab 	.word	0x2aaaaaab
 8000798:	20000041 	.word	0x20000041
 800079c:	20000042 	.word	0x20000042

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b094      	sub	sp, #80	@ 0x50
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2234      	movs	r2, #52	@ 0x34
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 fd11 	bl	80041d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000874 <SystemClock_Config+0xd4>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c8:	4a2a      	ldr	r2, [pc, #168]	@ (8000874 <SystemClock_Config+0xd4>)
 80007ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d0:	4b28      	ldr	r3, [pc, #160]	@ (8000874 <SystemClock_Config+0xd4>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007dc:	4b26      	ldr	r3, [pc, #152]	@ (8000878 <SystemClock_Config+0xd8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a25      	ldr	r2, [pc, #148]	@ (8000878 <SystemClock_Config+0xd8>)
 80007e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007e6:	6013      	str	r3, [r2, #0]
 80007e8:	4b23      	ldr	r3, [pc, #140]	@ (8000878 <SystemClock_Config+0xd8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f4:	2302      	movs	r3, #2
 80007f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f8:	2301      	movs	r3, #1
 80007fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fc:	2310      	movs	r3, #16
 80007fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000800:	2302      	movs	r3, #2
 8000802:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000804:	2300      	movs	r3, #0
 8000806:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000808:	2308      	movs	r3, #8
 800080a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800080c:	23d8      	movs	r3, #216	@ 0xd8
 800080e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000810:	2302      	movs	r3, #2
 8000812:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000814:	2302      	movs	r3, #2
 8000816:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000818:	2302      	movs	r3, #2
 800081a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4618      	mov	r0, r3
 8000822:	f000 fe15 	bl	8001450 <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800082c:	f000 f852 	bl	80008d4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000830:	f000 fdbe 	bl	80013b0 <HAL_PWREx_EnableOverDrive>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800083a:	f000 f84b 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	230f      	movs	r3, #15
 8000840:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000842:	2302      	movs	r3, #2
 8000844:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800084a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800084e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000850:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000854:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000856:	f107 0308 	add.w	r3, r7, #8
 800085a:	2107      	movs	r1, #7
 800085c:	4618      	mov	r0, r3
 800085e:	f001 f8a5 	bl	80019ac <HAL_RCC_ClockConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000868:	f000 f834 	bl	80008d4 <Error_Handler>
  }
}
 800086c:	bf00      	nop
 800086e:	3750      	adds	r7, #80	@ 0x50
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40023800 	.word	0x40023800
 8000878:	40007000 	.word	0x40007000

0800087c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000882:	463b      	mov	r3, r7
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800088e:	f000 fb6b 	bl	8000f68 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000892:	2301      	movs	r3, #1
 8000894:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000896:	2300      	movs	r3, #0
 8000898:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800089e:	231f      	movs	r3, #31
 80008a0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008a2:	2387      	movs	r3, #135	@ 0x87
 80008a4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008aa:	2300      	movs	r3, #0
 80008ac:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008ae:	2301      	movs	r3, #1
 80008b0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008b2:	2301      	movs	r3, #1
 80008b4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008be:	463b      	mov	r3, r7
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 fb89 	bl	8000fd8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008c6:	2004      	movs	r0, #4
 80008c8:	f000 fb66 	bl	8000f98 <HAL_MPU_Enable>

}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <Error_Handler+0x8>

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <HAL_MspInit+0x44>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000924 <HAL_MspInit+0x44>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <HAL_MspInit+0x44>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <HAL_MspInit+0x44>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000902:	4a08      	ldr	r2, [pc, #32]	@ (8000924 <HAL_MspInit+0x44>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000908:	6453      	str	r3, [r2, #68]	@ 0x44
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_MspInit+0x44>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <NMI_Handler+0x4>

08000930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <MemManage_Handler+0x4>

08000940 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <UsageFault_Handler+0x4>

08000950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097e:	f000 f9ed 	bl	8000d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <SystemInit+0x20>)
 800098e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000992:	4a05      	ldr	r2, [pc, #20]	@ (80009a8 <SystemInit+0x20>)
 8000994:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000998:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08e      	sub	sp, #56	@ 0x38
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009cc:	463b      	mov	r3, r7
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]
 80009da:	615a      	str	r2, [r3, #20]
 80009dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009de:	4b39      	ldr	r3, [pc, #228]	@ (8000ac4 <MX_TIM2_Init+0x118>)
 80009e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler =0;
 80009e6:	4b37      	ldr	r3, [pc, #220]	@ (8000ac4 <MX_TIM2_Init+0x118>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ec:	4b35      	ldr	r3, [pc, #212]	@ (8000ac4 <MX_TIM2_Init+0x118>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80009f2:	4b34      	ldr	r3, [pc, #208]	@ (8000ac4 <MX_TIM2_Init+0x118>)
 80009f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fa:	4b32      	ldr	r3, [pc, #200]	@ (8000ac4 <MX_TIM2_Init+0x118>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a00:	4b30      	ldr	r3, [pc, #192]	@ (8000ac4 <MX_TIM2_Init+0x118>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a06:	482f      	ldr	r0, [pc, #188]	@ (8000ac4 <MX_TIM2_Init+0x118>)
 8000a08:	f001 fdde 	bl	80025c8 <HAL_TIM_Base_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a12:	f7ff ff5f 	bl	80008d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a20:	4619      	mov	r1, r3
 8000a22:	4828      	ldr	r0, [pc, #160]	@ (8000ac4 <MX_TIM2_Init+0x118>)
 8000a24:	f002 f896 	bl	8002b54 <HAL_TIM_ConfigClockSource>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000a2e:	f7ff ff51 	bl	80008d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a32:	4824      	ldr	r0, [pc, #144]	@ (8000ac4 <MX_TIM2_Init+0x118>)
 8000a34:	f001 fe1f 	bl	8002676 <HAL_TIM_PWM_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a3e:	f7ff ff49 	bl	80008d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	481c      	ldr	r0, [pc, #112]	@ (8000ac4 <MX_TIM2_Init+0x118>)
 8000a52:	f002 fd13 	bl	800347c <HAL_TIMEx_MasterConfigSynchronization>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a5c:	f7ff ff3a 	bl	80008d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a60:	2360      	movs	r3, #96	@ 0x60
 8000a62:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000/4-1;
 8000a64:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 8000a68:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a72:	463b      	mov	r3, r7
 8000a74:	2204      	movs	r2, #4
 8000a76:	4619      	mov	r1, r3
 8000a78:	4812      	ldr	r0, [pc, #72]	@ (8000ac4 <MX_TIM2_Init+0x118>)
 8000a7a:	f001 ff57 	bl	800292c <HAL_TIM_PWM_ConfigChannel>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000a84:	f7ff ff26 	bl	80008d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a88:	463b      	mov	r3, r7
 8000a8a:	2208      	movs	r2, #8
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480d      	ldr	r0, [pc, #52]	@ (8000ac4 <MX_TIM2_Init+0x118>)
 8000a90:	f001 ff4c 	bl	800292c <HAL_TIM_PWM_ConfigChannel>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000a9a:	f7ff ff1b 	bl	80008d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	220c      	movs	r2, #12
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4807      	ldr	r0, [pc, #28]	@ (8000ac4 <MX_TIM2_Init+0x118>)
 8000aa6:	f001 ff41 	bl	800292c <HAL_TIM_PWM_ConfigChannel>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000ab0:	f7ff ff10 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ab4:	4803      	ldr	r0, [pc, #12]	@ (8000ac4 <MX_TIM2_Init+0x118>)
 8000ab6:	f000 f825 	bl	8000b04 <HAL_TIM_MspPostInit>

}
 8000aba:	bf00      	nop
 8000abc:	3738      	adds	r7, #56	@ 0x38
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000050 	.word	0x20000050

08000ac8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ad8:	d10b      	bne.n	8000af2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ada:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <HAL_TIM_Base_MspInit+0x38>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	4a08      	ldr	r2, [pc, #32]	@ (8000b00 <HAL_TIM_Base_MspInit+0x38>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae6:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <HAL_TIM_Base_MspInit+0x38>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000af2:	bf00      	nop
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800

08000b04 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b24:	d11c      	bne.n	8000b60 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <HAL_TIM_MspPostInit+0x64>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b68 <HAL_TIM_MspPostInit+0x64>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <HAL_TIM_MspPostInit+0x64>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 8000b3e:	f640 4308 	movw	r3, #3080	@ 0xc08
 8000b42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4804      	ldr	r0, [pc, #16]	@ (8000b6c <HAL_TIM_MspPostInit+0x68>)
 8000b5c:	f000 fa7c 	bl	8001058 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b60:	bf00      	nop
 8000b62:	3720      	adds	r7, #32
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020400 	.word	0x40020400

08000b70 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b74:	4b14      	ldr	r3, [pc, #80]	@ (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b76:	4a15      	ldr	r2, [pc, #84]	@ (8000bcc <MX_USART3_UART_Init+0x5c>)
 8000b78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b82:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000bb4:	f002 fcf0 	bl	8003598 <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bbe:	f7ff fe89 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000009c 	.word	0x2000009c
 8000bcc:	40004800 	.word	0x40004800

08000bd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b0ae      	sub	sp, #184	@ 0xb8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2290      	movs	r2, #144	@ 0x90
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f003 faf0 	bl	80041d6 <memset>
  if(uartHandle->Instance==USART3)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a22      	ldr	r2, [pc, #136]	@ (8000c84 <HAL_UART_MspInit+0xb4>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d13c      	bne.n	8000c7a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c04:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f001 f8b2 	bl	8001d78 <HAL_RCCEx_PeriphCLKConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c1a:	f7ff fe5b 	bl	80008d4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <HAL_UART_MspInit+0xb8>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c22:	4a19      	ldr	r2, [pc, #100]	@ (8000c88 <HAL_UART_MspInit+0xb8>)
 8000c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c2a:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <HAL_UART_MspInit+0xb8>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c36:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <HAL_UART_MspInit+0xb8>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a13      	ldr	r2, [pc, #76]	@ (8000c88 <HAL_UART_MspInit+0xb8>)
 8000c3c:	f043 0308 	orr.w	r3, r3, #8
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <HAL_UART_MspInit+0xb8>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0308 	and.w	r3, r3, #8
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c4e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c68:	2307      	movs	r3, #7
 8000c6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c6e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	@ (8000c8c <HAL_UART_MspInit+0xbc>)
 8000c76:	f000 f9ef 	bl	8001058 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	37b8      	adds	r7, #184	@ 0xb8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40004800 	.word	0x40004800
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020c00 	.word	0x40020c00

08000c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cc8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c94:	f7ff fe78 	bl	8000988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c98:	480c      	ldr	r0, [pc, #48]	@ (8000ccc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c9a:	490d      	ldr	r1, [pc, #52]	@ (8000cd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f003 fa93 	bl	80041e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc2:	f7ff fc5d 	bl	8000580 <main>
  bx  lr    
 8000cc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cc8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000cd4:	08004280 	.word	0x08004280
  ldr r2, =_sbss
 8000cd8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000cdc:	20000128 	.word	0x20000128

08000ce0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC_IRQHandler>

08000ce2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce6:	2003      	movs	r0, #3
 8000ce8:	f000 f90a 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cec:	200f      	movs	r0, #15
 8000cee:	f000 f805 	bl	8000cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf2:	f7ff fdf5 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <HAL_InitTick+0x54>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <HAL_InitTick+0x58>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f917 	bl	8000f4e <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00e      	b.n	8000d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d80a      	bhi.n	8000d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f000 f8ed 	bl	8000f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d3c:	4a06      	ldr	r2, [pc, #24]	@ (8000d58 <HAL_InitTick+0x5c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000018 	.word	0x20000018
 8000d54:	20000020 	.word	0x20000020
 8000d58:	2000001c 	.word	0x2000001c

08000d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_IncTick+0x20>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_IncTick+0x24>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a04      	ldr	r2, [pc, #16]	@ (8000d80 <HAL_IncTick+0x24>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000020 	.word	0x20000020
 8000d80:	20000124 	.word	0x20000124

08000d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b03      	ldr	r3, [pc, #12]	@ (8000d98 <HAL_GetTick+0x14>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000124 	.word	0x20000124

08000d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <__NVIC_SetPriorityGrouping+0x40>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dca:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <__NVIC_SetPriorityGrouping+0x40>)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	60d3      	str	r3, [r2, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00
 8000de0:	05fa0000 	.word	0x05fa0000

08000de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de8:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <__NVIC_GetPriorityGrouping+0x18>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	f003 0307 	and.w	r3, r3, #7
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	@ (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	@ (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	@ 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	@ 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ecc:	d301      	bcc.n	8000ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00f      	b.n	8000ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <SysTick_Config+0x40>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eda:	210f      	movs	r1, #15
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f7ff ff8e 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <SysTick_Config+0x40>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	4b04      	ldr	r3, [pc, #16]	@ (8000efc <SysTick_Config+0x40>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff47 	bl	8000d9c <__NVIC_SetPriorityGrouping>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f28:	f7ff ff5c 	bl	8000de4 <__NVIC_GetPriorityGrouping>
 8000f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68b9      	ldr	r1, [r7, #8]
 8000f32:	6978      	ldr	r0, [r7, #20]
 8000f34:	f7ff ff8e 	bl	8000e54 <NVIC_EncodePriority>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff5d 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ffb0 	bl	8000ebc <SysTick_Config>
 8000f5c:	4603      	mov	r3, r0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000f6c:	f3bf 8f5f 	dmb	sy
}
 8000f70:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000f72:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <HAL_MPU_Disable+0x28>)
 8000f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f76:	4a06      	ldr	r2, [pc, #24]	@ (8000f90 <HAL_MPU_Disable+0x28>)
 8000f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f7c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000f7e:	4b05      	ldr	r3, [pc, #20]	@ (8000f94 <HAL_MPU_Disable+0x2c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	605a      	str	r2, [r3, #4]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00
 8000f94:	e000ed90 	.word	0xe000ed90

08000f98 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8000fd0 <HAL_MPU_Enable+0x38>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000faa:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <HAL_MPU_Enable+0x3c>)
 8000fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fae:	4a09      	ldr	r2, [pc, #36]	@ (8000fd4 <HAL_MPU_Enable+0x3c>)
 8000fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fb4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000fb6:	f3bf 8f4f 	dsb	sy
}
 8000fba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fbc:	f3bf 8f6f 	isb	sy
}
 8000fc0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed90 	.word	0xe000ed90
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	785a      	ldrb	r2, [r3, #1]
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <HAL_MPU_ConfigRegion+0x7c>)
 8000fe6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <HAL_MPU_ConfigRegion+0x7c>)
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	4a19      	ldr	r2, [pc, #100]	@ (8001054 <HAL_MPU_ConfigRegion+0x7c>)
 8000fee:	f023 0301 	bic.w	r3, r3, #1
 8000ff2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000ff4:	4a17      	ldr	r2, [pc, #92]	@ (8001054 <HAL_MPU_ConfigRegion+0x7c>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7b1b      	ldrb	r3, [r3, #12]
 8001000:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	7adb      	ldrb	r3, [r3, #11]
 8001006:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001008:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	7a9b      	ldrb	r3, [r3, #10]
 800100e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001010:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	7b5b      	ldrb	r3, [r3, #13]
 8001016:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001018:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7b9b      	ldrb	r3, [r3, #14]
 800101e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001020:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7bdb      	ldrb	r3, [r3, #15]
 8001026:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001028:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7a5b      	ldrb	r3, [r3, #9]
 800102e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001030:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	7a1b      	ldrb	r3, [r3, #8]
 8001036:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001038:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	7812      	ldrb	r2, [r2, #0]
 800103e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001040:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001042:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001044:	6113      	str	r3, [r2, #16]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed90 	.word	0xe000ed90

08001058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	@ 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
 8001076:	e175      	b.n	8001364 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001078:	2201      	movs	r2, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	429a      	cmp	r2, r3
 8001092:	f040 8164 	bne.w	800135e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d005      	beq.n	80010ae <HAL_GPIO_Init+0x56>
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d130      	bne.n	8001110 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	2203      	movs	r2, #3
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e4:	2201      	movs	r2, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	091b      	lsrs	r3, r3, #4
 80010fa:	f003 0201 	and.w	r2, r3, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	2b03      	cmp	r3, #3
 800111a:	d017      	beq.n	800114c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d123      	bne.n	80011a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	08da      	lsrs	r2, r3, #3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3208      	adds	r2, #8
 8001160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	220f      	movs	r2, #15
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	691a      	ldr	r2, [r3, #16]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	08da      	lsrs	r2, r3, #3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3208      	adds	r2, #8
 800119a:	69b9      	ldr	r1, [r7, #24]
 800119c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0203 	and.w	r2, r3, #3
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 80be 	beq.w	800135e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	4b66      	ldr	r3, [pc, #408]	@ (800137c <HAL_GPIO_Init+0x324>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e6:	4a65      	ldr	r2, [pc, #404]	@ (800137c <HAL_GPIO_Init+0x324>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ee:	4b63      	ldr	r3, [pc, #396]	@ (800137c <HAL_GPIO_Init+0x324>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80011fa:	4a61      	ldr	r2, [pc, #388]	@ (8001380 <HAL_GPIO_Init+0x328>)
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	3302      	adds	r3, #2
 8001202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	220f      	movs	r2, #15
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a58      	ldr	r2, [pc, #352]	@ (8001384 <HAL_GPIO_Init+0x32c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d037      	beq.n	8001296 <HAL_GPIO_Init+0x23e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a57      	ldr	r2, [pc, #348]	@ (8001388 <HAL_GPIO_Init+0x330>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d031      	beq.n	8001292 <HAL_GPIO_Init+0x23a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a56      	ldr	r2, [pc, #344]	@ (800138c <HAL_GPIO_Init+0x334>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d02b      	beq.n	800128e <HAL_GPIO_Init+0x236>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a55      	ldr	r2, [pc, #340]	@ (8001390 <HAL_GPIO_Init+0x338>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d025      	beq.n	800128a <HAL_GPIO_Init+0x232>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a54      	ldr	r2, [pc, #336]	@ (8001394 <HAL_GPIO_Init+0x33c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d01f      	beq.n	8001286 <HAL_GPIO_Init+0x22e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a53      	ldr	r2, [pc, #332]	@ (8001398 <HAL_GPIO_Init+0x340>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d019      	beq.n	8001282 <HAL_GPIO_Init+0x22a>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a52      	ldr	r2, [pc, #328]	@ (800139c <HAL_GPIO_Init+0x344>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d013      	beq.n	800127e <HAL_GPIO_Init+0x226>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a51      	ldr	r2, [pc, #324]	@ (80013a0 <HAL_GPIO_Init+0x348>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d00d      	beq.n	800127a <HAL_GPIO_Init+0x222>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a50      	ldr	r2, [pc, #320]	@ (80013a4 <HAL_GPIO_Init+0x34c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d007      	beq.n	8001276 <HAL_GPIO_Init+0x21e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4f      	ldr	r2, [pc, #316]	@ (80013a8 <HAL_GPIO_Init+0x350>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d101      	bne.n	8001272 <HAL_GPIO_Init+0x21a>
 800126e:	2309      	movs	r3, #9
 8001270:	e012      	b.n	8001298 <HAL_GPIO_Init+0x240>
 8001272:	230a      	movs	r3, #10
 8001274:	e010      	b.n	8001298 <HAL_GPIO_Init+0x240>
 8001276:	2308      	movs	r3, #8
 8001278:	e00e      	b.n	8001298 <HAL_GPIO_Init+0x240>
 800127a:	2307      	movs	r3, #7
 800127c:	e00c      	b.n	8001298 <HAL_GPIO_Init+0x240>
 800127e:	2306      	movs	r3, #6
 8001280:	e00a      	b.n	8001298 <HAL_GPIO_Init+0x240>
 8001282:	2305      	movs	r3, #5
 8001284:	e008      	b.n	8001298 <HAL_GPIO_Init+0x240>
 8001286:	2304      	movs	r3, #4
 8001288:	e006      	b.n	8001298 <HAL_GPIO_Init+0x240>
 800128a:	2303      	movs	r3, #3
 800128c:	e004      	b.n	8001298 <HAL_GPIO_Init+0x240>
 800128e:	2302      	movs	r3, #2
 8001290:	e002      	b.n	8001298 <HAL_GPIO_Init+0x240>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <HAL_GPIO_Init+0x240>
 8001296:	2300      	movs	r3, #0
 8001298:	69fa      	ldr	r2, [r7, #28]
 800129a:	f002 0203 	and.w	r2, r2, #3
 800129e:	0092      	lsls	r2, r2, #2
 80012a0:	4093      	lsls	r3, r2
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012a8:	4935      	ldr	r1, [pc, #212]	@ (8001380 <HAL_GPIO_Init+0x328>)
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	089b      	lsrs	r3, r3, #2
 80012ae:	3302      	adds	r3, #2
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b6:	4b3d      	ldr	r3, [pc, #244]	@ (80013ac <HAL_GPIO_Init+0x354>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012da:	4a34      	ldr	r2, [pc, #208]	@ (80013ac <HAL_GPIO_Init+0x354>)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012e0:	4b32      	ldr	r3, [pc, #200]	@ (80013ac <HAL_GPIO_Init+0x354>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001304:	4a29      	ldr	r2, [pc, #164]	@ (80013ac <HAL_GPIO_Init+0x354>)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800130a:	4b28      	ldr	r3, [pc, #160]	@ (80013ac <HAL_GPIO_Init+0x354>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800132e:	4a1f      	ldr	r2, [pc, #124]	@ (80013ac <HAL_GPIO_Init+0x354>)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001334:	4b1d      	ldr	r3, [pc, #116]	@ (80013ac <HAL_GPIO_Init+0x354>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001358:	4a14      	ldr	r2, [pc, #80]	@ (80013ac <HAL_GPIO_Init+0x354>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3301      	adds	r3, #1
 8001362:	61fb      	str	r3, [r7, #28]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	2b0f      	cmp	r3, #15
 8001368:	f67f ae86 	bls.w	8001078 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3724      	adds	r7, #36	@ 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	40013800 	.word	0x40013800
 8001384:	40020000 	.word	0x40020000
 8001388:	40020400 	.word	0x40020400
 800138c:	40020800 	.word	0x40020800
 8001390:	40020c00 	.word	0x40020c00
 8001394:	40021000 	.word	0x40021000
 8001398:	40021400 	.word	0x40021400
 800139c:	40021800 	.word	0x40021800
 80013a0:	40021c00 	.word	0x40021c00
 80013a4:	40022000 	.word	0x40022000
 80013a8:	40022400 	.word	0x40022400
 80013ac:	40013c00 	.word	0x40013c00

080013b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	4b23      	ldr	r3, [pc, #140]	@ (8001448 <HAL_PWREx_EnableOverDrive+0x98>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	4a22      	ldr	r2, [pc, #136]	@ (8001448 <HAL_PWREx_EnableOverDrive+0x98>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013c6:	4b20      	ldr	r3, [pc, #128]	@ (8001448 <HAL_PWREx_EnableOverDrive+0x98>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80013d2:	4b1e      	ldr	r3, [pc, #120]	@ (800144c <HAL_PWREx_EnableOverDrive+0x9c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a1d      	ldr	r2, [pc, #116]	@ (800144c <HAL_PWREx_EnableOverDrive+0x9c>)
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013de:	f7ff fcd1 	bl	8000d84 <HAL_GetTick>
 80013e2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013e4:	e009      	b.n	80013fa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013e6:	f7ff fccd 	bl	8000d84 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013f4:	d901      	bls.n	80013fa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e022      	b.n	8001440 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013fa:	4b14      	ldr	r3, [pc, #80]	@ (800144c <HAL_PWREx_EnableOverDrive+0x9c>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001402:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001406:	d1ee      	bne.n	80013e6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001408:	4b10      	ldr	r3, [pc, #64]	@ (800144c <HAL_PWREx_EnableOverDrive+0x9c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0f      	ldr	r2, [pc, #60]	@ (800144c <HAL_PWREx_EnableOverDrive+0x9c>)
 800140e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001412:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001414:	f7ff fcb6 	bl	8000d84 <HAL_GetTick>
 8001418:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800141a:	e009      	b.n	8001430 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800141c:	f7ff fcb2 	bl	8000d84 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800142a:	d901      	bls.n	8001430 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e007      	b.n	8001440 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001438:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800143c:	d1ee      	bne.n	800141c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40023800 	.word	0x40023800
 800144c:	40007000 	.word	0x40007000

08001450 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001458:	2300      	movs	r3, #0
 800145a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e29b      	b.n	800199e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 8087 	beq.w	8001582 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001474:	4b96      	ldr	r3, [pc, #600]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 030c 	and.w	r3, r3, #12
 800147c:	2b04      	cmp	r3, #4
 800147e:	d00c      	beq.n	800149a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001480:	4b93      	ldr	r3, [pc, #588]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 030c 	and.w	r3, r3, #12
 8001488:	2b08      	cmp	r3, #8
 800148a:	d112      	bne.n	80014b2 <HAL_RCC_OscConfig+0x62>
 800148c:	4b90      	ldr	r3, [pc, #576]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001494:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001498:	d10b      	bne.n	80014b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800149a:	4b8d      	ldr	r3, [pc, #564]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d06c      	beq.n	8001580 <HAL_RCC_OscConfig+0x130>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d168      	bne.n	8001580 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e275      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014ba:	d106      	bne.n	80014ca <HAL_RCC_OscConfig+0x7a>
 80014bc:	4b84      	ldr	r3, [pc, #528]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a83      	ldr	r2, [pc, #524]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80014c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	e02e      	b.n	8001528 <HAL_RCC_OscConfig+0xd8>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10c      	bne.n	80014ec <HAL_RCC_OscConfig+0x9c>
 80014d2:	4b7f      	ldr	r3, [pc, #508]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a7e      	ldr	r2, [pc, #504]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80014d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	4b7c      	ldr	r3, [pc, #496]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a7b      	ldr	r2, [pc, #492]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80014e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	e01d      	b.n	8001528 <HAL_RCC_OscConfig+0xd8>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014f4:	d10c      	bne.n	8001510 <HAL_RCC_OscConfig+0xc0>
 80014f6:	4b76      	ldr	r3, [pc, #472]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a75      	ldr	r2, [pc, #468]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80014fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	4b73      	ldr	r3, [pc, #460]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a72      	ldr	r2, [pc, #456]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	e00b      	b.n	8001528 <HAL_RCC_OscConfig+0xd8>
 8001510:	4b6f      	ldr	r3, [pc, #444]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a6e      	ldr	r2, [pc, #440]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001516:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b6c      	ldr	r3, [pc, #432]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a6b      	ldr	r2, [pc, #428]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001522:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d013      	beq.n	8001558 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001530:	f7ff fc28 	bl	8000d84 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff fc24 	bl	8000d84 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	@ 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e229      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154a:	4b61      	ldr	r3, [pc, #388]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0xe8>
 8001556:	e014      	b.n	8001582 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fc14 	bl	8000d84 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fc10 	bl	8000d84 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	@ 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e215      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001572:	4b57      	ldr	r3, [pc, #348]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x110>
 800157e:	e000      	b.n	8001582 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d069      	beq.n	8001662 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800158e:	4b50      	ldr	r3, [pc, #320]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00b      	beq.n	80015b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159a:	4b4d      	ldr	r3, [pc, #308]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d11c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x190>
 80015a6:	4b4a      	ldr	r3, [pc, #296]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d116      	bne.n	80015e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b2:	4b47      	ldr	r3, [pc, #284]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d005      	beq.n	80015ca <HAL_RCC_OscConfig+0x17a>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d001      	beq.n	80015ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e1e9      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ca:	4b41      	ldr	r3, [pc, #260]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	493d      	ldr	r1, [pc, #244]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015de:	e040      	b.n	8001662 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d023      	beq.n	8001630 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e8:	4b39      	ldr	r3, [pc, #228]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a38      	ldr	r2, [pc, #224]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f4:	f7ff fbc6 	bl	8000d84 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015fc:	f7ff fbc2 	bl	8000d84 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e1c7      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160e:	4b30      	ldr	r3, [pc, #192]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161a:	4b2d      	ldr	r3, [pc, #180]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4929      	ldr	r1, [pc, #164]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 800162a:	4313      	orrs	r3, r2
 800162c:	600b      	str	r3, [r1, #0]
 800162e:	e018      	b.n	8001662 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001630:	4b27      	ldr	r3, [pc, #156]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a26      	ldr	r2, [pc, #152]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001636:	f023 0301 	bic.w	r3, r3, #1
 800163a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff fba2 	bl	8000d84 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001644:	f7ff fb9e 	bl	8000d84 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e1a3      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001656:	4b1e      	ldr	r3, [pc, #120]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d038      	beq.n	80016e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d019      	beq.n	80016aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001676:	4b16      	ldr	r3, [pc, #88]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800167a:	4a15      	ldr	r2, [pc, #84]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001682:	f7ff fb7f 	bl	8000d84 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168a:	f7ff fb7b 	bl	8000d84 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e180      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 800169e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x23a>
 80016a8:	e01a      	b.n	80016e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016aa:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80016ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016ae:	4a08      	ldr	r2, [pc, #32]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b6:	f7ff fb65 	bl	8000d84 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016bc:	e00a      	b.n	80016d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016be:	f7ff fb61 	bl	8000d84 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d903      	bls.n	80016d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e166      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
 80016d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d4:	4b92      	ldr	r3, [pc, #584]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80016d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1ee      	bne.n	80016be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 80a4 	beq.w	8001836 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ee:	4b8c      	ldr	r3, [pc, #560]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10d      	bne.n	8001716 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fa:	4b89      	ldr	r3, [pc, #548]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	4a88      	ldr	r2, [pc, #544]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001704:	6413      	str	r3, [r2, #64]	@ 0x40
 8001706:	4b86      	ldr	r3, [pc, #536]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001712:	2301      	movs	r3, #1
 8001714:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001716:	4b83      	ldr	r3, [pc, #524]	@ (8001924 <HAL_RCC_OscConfig+0x4d4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800171e:	2b00      	cmp	r3, #0
 8001720:	d118      	bne.n	8001754 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001722:	4b80      	ldr	r3, [pc, #512]	@ (8001924 <HAL_RCC_OscConfig+0x4d4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a7f      	ldr	r2, [pc, #508]	@ (8001924 <HAL_RCC_OscConfig+0x4d4>)
 8001728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800172c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800172e:	f7ff fb29 	bl	8000d84 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001736:	f7ff fb25 	bl	8000d84 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b64      	cmp	r3, #100	@ 0x64
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e12a      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001748:	4b76      	ldr	r3, [pc, #472]	@ (8001924 <HAL_RCC_OscConfig+0x4d4>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d106      	bne.n	800176a <HAL_RCC_OscConfig+0x31a>
 800175c:	4b70      	ldr	r3, [pc, #448]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 800175e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001760:	4a6f      	ldr	r2, [pc, #444]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6713      	str	r3, [r2, #112]	@ 0x70
 8001768:	e02d      	b.n	80017c6 <HAL_RCC_OscConfig+0x376>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0x33c>
 8001772:	4b6b      	ldr	r3, [pc, #428]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001776:	4a6a      	ldr	r2, [pc, #424]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	6713      	str	r3, [r2, #112]	@ 0x70
 800177e:	4b68      	ldr	r3, [pc, #416]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001782:	4a67      	ldr	r2, [pc, #412]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001784:	f023 0304 	bic.w	r3, r3, #4
 8001788:	6713      	str	r3, [r2, #112]	@ 0x70
 800178a:	e01c      	b.n	80017c6 <HAL_RCC_OscConfig+0x376>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b05      	cmp	r3, #5
 8001792:	d10c      	bne.n	80017ae <HAL_RCC_OscConfig+0x35e>
 8001794:	4b62      	ldr	r3, [pc, #392]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001798:	4a61      	ldr	r2, [pc, #388]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 800179a:	f043 0304 	orr.w	r3, r3, #4
 800179e:	6713      	str	r3, [r2, #112]	@ 0x70
 80017a0:	4b5f      	ldr	r3, [pc, #380]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80017a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a4:	4a5e      	ldr	r2, [pc, #376]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ac:	e00b      	b.n	80017c6 <HAL_RCC_OscConfig+0x376>
 80017ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80017b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80017b4:	f023 0301 	bic.w	r3, r3, #1
 80017b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ba:	4b59      	ldr	r3, [pc, #356]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017be:	4a58      	ldr	r2, [pc, #352]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80017c0:	f023 0304 	bic.w	r3, r3, #4
 80017c4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d015      	beq.n	80017fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ce:	f7ff fad9 	bl	8000d84 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d4:	e00a      	b.n	80017ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d6:	f7ff fad5 	bl	8000d84 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e0d8      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ec:	4b4c      	ldr	r3, [pc, #304]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80017ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0ee      	beq.n	80017d6 <HAL_RCC_OscConfig+0x386>
 80017f8:	e014      	b.n	8001824 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fa:	f7ff fac3 	bl	8000d84 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001800:	e00a      	b.n	8001818 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001802:	f7ff fabf 	bl	8000d84 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001810:	4293      	cmp	r3, r2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e0c2      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001818:	4b41      	ldr	r3, [pc, #260]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 800181a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1ee      	bne.n	8001802 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001824:	7dfb      	ldrb	r3, [r7, #23]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d105      	bne.n	8001836 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800182a:	4b3d      	ldr	r3, [pc, #244]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182e:	4a3c      	ldr	r2, [pc, #240]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001830:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001834:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80ae 	beq.w	800199c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001840:	4b37      	ldr	r3, [pc, #220]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 030c 	and.w	r3, r3, #12
 8001848:	2b08      	cmp	r3, #8
 800184a:	d06d      	beq.n	8001928 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d14b      	bne.n	80018ec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001854:	4b32      	ldr	r3, [pc, #200]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a31      	ldr	r2, [pc, #196]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 800185a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800185e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff fa90 	bl	8000d84 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001868:	f7ff fa8c 	bl	8000d84 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e091      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187a:	4b29      	ldr	r3, [pc, #164]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69da      	ldr	r2, [r3, #28]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001894:	019b      	lsls	r3, r3, #6
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189c:	085b      	lsrs	r3, r3, #1
 800189e:	3b01      	subs	r3, #1
 80018a0:	041b      	lsls	r3, r3, #16
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a8:	061b      	lsls	r3, r3, #24
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b0:	071b      	lsls	r3, r3, #28
 80018b2:	491b      	ldr	r1, [pc, #108]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b8:	4b19      	ldr	r3, [pc, #100]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a18      	ldr	r2, [pc, #96]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80018be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff fa5e 	bl	8000d84 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018cc:	f7ff fa5a 	bl	8000d84 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e05f      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018de:	4b10      	ldr	r3, [pc, #64]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0x47c>
 80018ea:	e057      	b.n	800199c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 80018f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff fa44 	bl	8000d84 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff fa40 	bl	8000d84 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e045      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001912:	4b03      	ldr	r3, [pc, #12]	@ (8001920 <HAL_RCC_OscConfig+0x4d0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x4b0>
 800191e:	e03d      	b.n	800199c <HAL_RCC_OscConfig+0x54c>
 8001920:	40023800 	.word	0x40023800
 8001924:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001928:	4b1f      	ldr	r3, [pc, #124]	@ (80019a8 <HAL_RCC_OscConfig+0x558>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d030      	beq.n	8001998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001940:	429a      	cmp	r2, r3
 8001942:	d129      	bne.n	8001998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d122      	bne.n	8001998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001958:	4013      	ands	r3, r2
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800195e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001960:	4293      	cmp	r3, r2
 8001962:	d119      	bne.n	8001998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196e:	085b      	lsrs	r3, r3, #1
 8001970:	3b01      	subs	r3, #1
 8001972:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d10f      	bne.n	8001998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001982:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001984:	429a      	cmp	r2, r3
 8001986:	d107      	bne.n	8001998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800

080019ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0d0      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 030f 	and.w	r3, r3, #15
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d910      	bls.n	80019f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b67      	ldr	r3, [pc, #412]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 020f 	bic.w	r2, r3, #15
 80019da:	4965      	ldr	r1, [pc, #404]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b63      	ldr	r3, [pc, #396]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0b8      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a0c:	4b59      	ldr	r3, [pc, #356]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4a58      	ldr	r2, [pc, #352]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a24:	4b53      	ldr	r3, [pc, #332]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	4a52      	ldr	r2, [pc, #328]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a30:	4b50      	ldr	r3, [pc, #320]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	494d      	ldr	r1, [pc, #308]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d040      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	4b47      	ldr	r3, [pc, #284]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d115      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e07f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6e:	4b41      	ldr	r3, [pc, #260]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d109      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e073      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e06b      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8e:	4b39      	ldr	r3, [pc, #228]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f023 0203 	bic.w	r2, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4936      	ldr	r1, [pc, #216]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aa0:	f7ff f970 	bl	8000d84 <HAL_GetTick>
 8001aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa8:	f7ff f96c 	bl	8000d84 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e053      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	4b2d      	ldr	r3, [pc, #180]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 020c 	and.w	r2, r3, #12
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d1eb      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b27      	ldr	r3, [pc, #156]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d210      	bcs.n	8001b00 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b24      	ldr	r3, [pc, #144]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 020f 	bic.w	r2, r3, #15
 8001ae6:	4922      	ldr	r1, [pc, #136]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b20      	ldr	r3, [pc, #128]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e032      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0c:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4916      	ldr	r1, [pc, #88]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d009      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b2a:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	490e      	ldr	r1, [pc, #56]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b3e:	f000 f821 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8001b42:	4602      	mov	r2, r0
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	490a      	ldr	r1, [pc, #40]	@ (8001b78 <HAL_RCC_ClockConfig+0x1cc>)
 8001b50:	5ccb      	ldrb	r3, [r1, r3]
 8001b52:	fa22 f303 	lsr.w	r3, r2, r3
 8001b56:	4a09      	ldr	r2, [pc, #36]	@ (8001b7c <HAL_RCC_ClockConfig+0x1d0>)
 8001b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b5a:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <HAL_RCC_ClockConfig+0x1d4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f8cc 	bl	8000cfc <HAL_InitTick>

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023c00 	.word	0x40023c00
 8001b74:	40023800 	.word	0x40023800
 8001b78:	08004258 	.word	0x08004258
 8001b7c:	20000018 	.word	0x20000018
 8001b80:	2000001c 	.word	0x2000001c

08001b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b88:	b090      	sub	sp, #64	@ 0x40
 8001b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b90:	2300      	movs	r3, #0
 8001b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b94:	2300      	movs	r3, #0
 8001b96:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b9c:	4b59      	ldr	r3, [pc, #356]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d00d      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	f200 80a1 	bhi.w	8001cf0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d003      	beq.n	8001bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8001bb6:	e09b      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bb8:	4b53      	ldr	r3, [pc, #332]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bbc:	e09b      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bbe:	4b53      	ldr	r3, [pc, #332]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x188>)
 8001bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bc2:	e098      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bc4:	4b4f      	ldr	r3, [pc, #316]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bcc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001bce:	4b4d      	ldr	r3, [pc, #308]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d028      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bda:	4b4a      	ldr	r3, [pc, #296]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	099b      	lsrs	r3, r3, #6
 8001be0:	2200      	movs	r2, #0
 8001be2:	623b      	str	r3, [r7, #32]
 8001be4:	627a      	str	r2, [r7, #36]	@ 0x24
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bec:	2100      	movs	r1, #0
 8001bee:	4b47      	ldr	r3, [pc, #284]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x188>)
 8001bf0:	fb03 f201 	mul.w	r2, r3, r1
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	fb00 f303 	mul.w	r3, r0, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4a43      	ldr	r2, [pc, #268]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x188>)
 8001bfe:	fba0 1202 	umull	r1, r2, r0, r2
 8001c02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c04:	460a      	mov	r2, r1
 8001c06:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001c08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c0a:	4413      	add	r3, r2
 8001c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c10:	2200      	movs	r2, #0
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	61fa      	str	r2, [r7, #28]
 8001c16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c1e:	f7fe fb13 	bl	8000248 <__aeabi_uldivmod>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4613      	mov	r3, r2
 8001c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c2a:	e053      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2c:	4b35      	ldr	r3, [pc, #212]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	099b      	lsrs	r3, r3, #6
 8001c32:	2200      	movs	r2, #0
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	617a      	str	r2, [r7, #20]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c3e:	f04f 0b00 	mov.w	fp, #0
 8001c42:	4652      	mov	r2, sl
 8001c44:	465b      	mov	r3, fp
 8001c46:	f04f 0000 	mov.w	r0, #0
 8001c4a:	f04f 0100 	mov.w	r1, #0
 8001c4e:	0159      	lsls	r1, r3, #5
 8001c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c54:	0150      	lsls	r0, r2, #5
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	ebb2 080a 	subs.w	r8, r2, sl
 8001c5e:	eb63 090b 	sbc.w	r9, r3, fp
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c76:	ebb2 0408 	subs.w	r4, r2, r8
 8001c7a:	eb63 0509 	sbc.w	r5, r3, r9
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	00eb      	lsls	r3, r5, #3
 8001c88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c8c:	00e2      	lsls	r2, r4, #3
 8001c8e:	4614      	mov	r4, r2
 8001c90:	461d      	mov	r5, r3
 8001c92:	eb14 030a 	adds.w	r3, r4, sl
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	eb45 030b 	adc.w	r3, r5, fp
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001caa:	4629      	mov	r1, r5
 8001cac:	028b      	lsls	r3, r1, #10
 8001cae:	4621      	mov	r1, r4
 8001cb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cb4:	4621      	mov	r1, r4
 8001cb6:	028a      	lsls	r2, r1, #10
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	60fa      	str	r2, [r7, #12]
 8001cc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cc8:	f7fe fabe 	bl	8000248 <__aeabi_uldivmod>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	0c1b      	lsrs	r3, r3, #16
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001ce4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cee:	e002      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3740      	adds	r7, #64	@ 0x40
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	00f42400 	.word	0x00f42400
 8001d0c:	017d7840 	.word	0x017d7840

08001d10 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d14:	4b03      	ldr	r3, [pc, #12]	@ (8001d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000018 	.word	0x20000018

08001d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d2c:	f7ff fff0 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b05      	ldr	r3, [pc, #20]	@ (8001d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	0a9b      	lsrs	r3, r3, #10
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	4903      	ldr	r1, [pc, #12]	@ (8001d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d3e:	5ccb      	ldrb	r3, [r1, r3]
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	08004268 	.word	0x08004268

08001d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d54:	f7ff ffdc 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	0b5b      	lsrs	r3, r3, #13
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4903      	ldr	r1, [pc, #12]	@ (8001d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	08004268 	.word	0x08004268

08001d78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d012      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001da0:	4b69      	ldr	r3, [pc, #420]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	4a68      	ldr	r2, [pc, #416]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001daa:	6093      	str	r3, [r2, #8]
 8001dac:	4b66      	ldr	r3, [pc, #408]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001db4:	4964      	ldr	r1, [pc, #400]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d017      	beq.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dd2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dd8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de0:	4959      	ldr	r1, [pc, #356]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001df0:	d101      	bne.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001df2:	2301      	movs	r3, #1
 8001df4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d017      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e0e:	4b4e      	ldr	r3, [pc, #312]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e14:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1c:	494a      	ldr	r1, [pc, #296]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0320 	and.w	r3, r3, #32
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 808b 	beq.w	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e5c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e60:	4a39      	ldr	r2, [pc, #228]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e66:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e68:	4b37      	ldr	r3, [pc, #220]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e74:	4b35      	ldr	r3, [pc, #212]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a34      	ldr	r2, [pc, #208]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e80:	f7fe ff80 	bl	8000d84 <HAL_GetTick>
 8001e84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e88:	f7fe ff7c 	bl	8000d84 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	@ 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e38f      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ea6:	4b28      	ldr	r3, [pc, #160]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d035      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d02e      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ec4:	4b20      	ldr	r3, [pc, #128]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ecc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ece:	4b1e      	ldr	r3, [pc, #120]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eda:	4b1b      	ldr	r3, [pc, #108]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ede:	4a1a      	ldr	r2, [pc, #104]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ee4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001ee6:	4a18      	ldr	r2, [pc, #96]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001eec:	4b16      	ldr	r3, [pc, #88]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d114      	bne.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7fe ff44 	bl	8000d84 <HAL_GetTick>
 8001efc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efe:	e00a      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f00:	f7fe ff40 	bl	8000d84 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e351      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f16:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0ee      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001f2e:	d111      	bne.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001f30:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f3c:	4b04      	ldr	r3, [pc, #16]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f3e:	400b      	ands	r3, r1
 8001f40:	4901      	ldr	r1, [pc, #4]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	608b      	str	r3, [r1, #8]
 8001f46:	e00b      	b.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40007000 	.word	0x40007000
 8001f50:	0ffffcff 	.word	0x0ffffcff
 8001f54:	4bac      	ldr	r3, [pc, #688]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	4aab      	ldr	r2, [pc, #684]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f5a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001f5e:	6093      	str	r3, [r2, #8]
 8001f60:	4ba9      	ldr	r3, [pc, #676]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f6c:	49a6      	ldr	r1, [pc, #664]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d010      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f7e:	4ba2      	ldr	r3, [pc, #648]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f84:	4aa0      	ldr	r2, [pc, #640]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f8e:	4b9e      	ldr	r3, [pc, #632]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f90:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f98:	499b      	ldr	r1, [pc, #620]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00a      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fac:	4b96      	ldr	r3, [pc, #600]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fba:	4993      	ldr	r1, [pc, #588]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00a      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fce:	4b8e      	ldr	r3, [pc, #568]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fdc:	498a      	ldr	r1, [pc, #552]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00a      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ff0:	4b85      	ldr	r3, [pc, #532]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ffe:	4982      	ldr	r1, [pc, #520]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002000:	4313      	orrs	r3, r2
 8002002:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00a      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002012:	4b7d      	ldr	r3, [pc, #500]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002018:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002020:	4979      	ldr	r1, [pc, #484]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00a      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002034:	4b74      	ldr	r3, [pc, #464]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203a:	f023 0203 	bic.w	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002042:	4971      	ldr	r1, [pc, #452]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002044:	4313      	orrs	r3, r2
 8002046:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00a      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002056:	4b6c      	ldr	r3, [pc, #432]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800205c:	f023 020c 	bic.w	r2, r3, #12
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002064:	4968      	ldr	r1, [pc, #416]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002066:	4313      	orrs	r3, r2
 8002068:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00a      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002078:	4b63      	ldr	r3, [pc, #396]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002086:	4960      	ldr	r1, [pc, #384]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002088:	4313      	orrs	r3, r2
 800208a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800209a:	4b5b      	ldr	r3, [pc, #364]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020a8:	4957      	ldr	r1, [pc, #348]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020bc:	4b52      	ldr	r3, [pc, #328]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ca:	494f      	ldr	r1, [pc, #316]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00a      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80020de:	4b4a      	ldr	r3, [pc, #296]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ec:	4946      	ldr	r1, [pc, #280]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002100:	4b41      	ldr	r3, [pc, #260]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002106:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210e:	493e      	ldr	r1, [pc, #248]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002122:	4b39      	ldr	r3, [pc, #228]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002128:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002130:	4935      	ldr	r1, [pc, #212]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002144:	4b30      	ldr	r3, [pc, #192]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002152:	492d      	ldr	r1, [pc, #180]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d011      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002166:	4b28      	ldr	r3, [pc, #160]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800216c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002174:	4924      	ldr	r1, [pc, #144]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002180:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002184:	d101      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002186:	2301      	movs	r3, #1
 8002188:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002196:	2301      	movs	r3, #1
 8002198:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021a6:	4b18      	ldr	r3, [pc, #96]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ac:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021b4:	4914      	ldr	r1, [pc, #80]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00b      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ce:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021d8:	490b      	ldr	r1, [pc, #44]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00f      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80021ec:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021fc:	4902      	ldr	r1, [pc, #8]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002204:	e002      	b.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00b      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002218:	4b8a      	ldr	r3, [pc, #552]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800221a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800221e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002228:	4986      	ldr	r1, [pc, #536]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00b      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800223c:	4b81      	ldr	r3, [pc, #516]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800223e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002242:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800224c:	497d      	ldr	r1, [pc, #500]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d006      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 80d6 	beq.w	8002414 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002268:	4b76      	ldr	r3, [pc, #472]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a75      	ldr	r2, [pc, #468]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800226e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002272:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002274:	f7fe fd86 	bl	8000d84 <HAL_GetTick>
 8002278:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800227a:	e008      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800227c:	f7fe fd82 	bl	8000d84 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	@ 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e195      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800228e:	4b6d      	ldr	r3, [pc, #436]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d021      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x572>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d11d      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022ae:	4b65      	ldr	r3, [pc, #404]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022b4:	0c1b      	lsrs	r3, r3, #16
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022bc:	4b61      	ldr	r3, [pc, #388]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022c2:	0e1b      	lsrs	r3, r3, #24
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	019a      	lsls	r2, r3, #6
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	041b      	lsls	r3, r3, #16
 80022d4:	431a      	orrs	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	061b      	lsls	r3, r3, #24
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	071b      	lsls	r3, r3, #28
 80022e2:	4958      	ldr	r1, [pc, #352]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d004      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80022fe:	d00a      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002308:	2b00      	cmp	r3, #0
 800230a:	d02e      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002310:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002314:	d129      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002316:	4b4b      	ldr	r3, [pc, #300]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002318:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800231c:	0c1b      	lsrs	r3, r3, #16
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002324:	4b47      	ldr	r3, [pc, #284]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800232a:	0f1b      	lsrs	r3, r3, #28
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	019a      	lsls	r2, r3, #6
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	041b      	lsls	r3, r3, #16
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	061b      	lsls	r3, r3, #24
 8002344:	431a      	orrs	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	071b      	lsls	r3, r3, #28
 800234a:	493e      	ldr	r1, [pc, #248]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002352:	4b3c      	ldr	r3, [pc, #240]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002354:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002358:	f023 021f 	bic.w	r2, r3, #31
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002360:	3b01      	subs	r3, #1
 8002362:	4938      	ldr	r1, [pc, #224]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d01d      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002376:	4b33      	ldr	r3, [pc, #204]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002378:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800237c:	0e1b      	lsrs	r3, r3, #24
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002384:	4b2f      	ldr	r3, [pc, #188]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002386:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800238a:	0f1b      	lsrs	r3, r3, #28
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	019a      	lsls	r2, r3, #6
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	041b      	lsls	r3, r3, #16
 800239e:	431a      	orrs	r2, r3
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	061b      	lsls	r3, r3, #24
 80023a4:	431a      	orrs	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	071b      	lsls	r3, r3, #28
 80023aa:	4926      	ldr	r1, [pc, #152]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d011      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	019a      	lsls	r2, r3, #6
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	041b      	lsls	r3, r3, #16
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	061b      	lsls	r3, r3, #24
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	071b      	lsls	r3, r3, #28
 80023da:	491a      	ldr	r1, [pc, #104]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80023e2:	4b18      	ldr	r3, [pc, #96]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a17      	ldr	r2, [pc, #92]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ee:	f7fe fcc9 	bl	8000d84 <HAL_GetTick>
 80023f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023f4:	e008      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80023f6:	f7fe fcc5 	bl	8000d84 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b64      	cmp	r3, #100	@ 0x64
 8002402:	d901      	bls.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e0d8      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002408:	4b0e      	ldr	r3, [pc, #56]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2b01      	cmp	r3, #1
 8002418:	f040 80ce 	bne.w	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800241c:	4b09      	ldr	r3, [pc, #36]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a08      	ldr	r2, [pc, #32]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002422:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002426:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002428:	f7fe fcac 	bl	8000d84 <HAL_GetTick>
 800242c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800242e:	e00b      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002430:	f7fe fca8 	bl	8000d84 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	@ 0x64
 800243c:	d904      	bls.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e0bb      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002448:	4b5e      	ldr	r3, [pc, #376]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002450:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002454:	d0ec      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002466:	2b00      	cmp	r3, #0
 8002468:	d009      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002472:	2b00      	cmp	r3, #0
 8002474:	d02e      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	2b00      	cmp	r3, #0
 800247c:	d12a      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800247e:	4b51      	ldr	r3, [pc, #324]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002484:	0c1b      	lsrs	r3, r3, #16
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800248c:	4b4d      	ldr	r3, [pc, #308]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002492:	0f1b      	lsrs	r3, r3, #28
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	019a      	lsls	r2, r3, #6
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	041b      	lsls	r3, r3, #16
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	061b      	lsls	r3, r3, #24
 80024ac:	431a      	orrs	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	071b      	lsls	r3, r3, #28
 80024b2:	4944      	ldr	r1, [pc, #272]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024ba:	4b42      	ldr	r3, [pc, #264]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024c0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c8:	3b01      	subs	r3, #1
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	493d      	ldr	r1, [pc, #244]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d022      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024e8:	d11d      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024ea:	4b36      	ldr	r3, [pc, #216]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f0:	0e1b      	lsrs	r3, r3, #24
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024f8:	4b32      	ldr	r3, [pc, #200]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fe:	0f1b      	lsrs	r3, r3, #28
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	019a      	lsls	r2, r3, #6
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	041b      	lsls	r3, r3, #16
 8002512:	431a      	orrs	r2, r3
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	061b      	lsls	r3, r3, #24
 8002518:	431a      	orrs	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	071b      	lsls	r3, r3, #28
 800251e:	4929      	ldr	r1, [pc, #164]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d028      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002532:	4b24      	ldr	r3, [pc, #144]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002538:	0e1b      	lsrs	r3, r3, #24
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002540:	4b20      	ldr	r3, [pc, #128]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002546:	0c1b      	lsrs	r3, r3, #16
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	019a      	lsls	r2, r3, #6
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	041b      	lsls	r3, r3, #16
 8002558:	431a      	orrs	r2, r3
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	061b      	lsls	r3, r3, #24
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	071b      	lsls	r3, r3, #28
 8002566:	4917      	ldr	r1, [pc, #92]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800256e:	4b15      	ldr	r3, [pc, #84]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002570:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002574:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257c:	4911      	ldr	r1, [pc, #68]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002584:	4b0f      	ldr	r3, [pc, #60]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a0e      	ldr	r2, [pc, #56]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800258a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800258e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002590:	f7fe fbf8 	bl	8000d84 <HAL_GetTick>
 8002594:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002598:	f7fe fbf4 	bl	8000d84 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	@ 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e007      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025aa:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025b6:	d1ef      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3720      	adds	r7, #32
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800

080025c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e049      	b.n	800266e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe fa6a 	bl	8000ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3304      	adds	r3, #4
 8002604:	4619      	mov	r1, r3
 8002606:	4610      	mov	r0, r2
 8002608:	f000 fb6e 	bl	8002ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e049      	b.n	800271c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d106      	bne.n	80026a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f841 	bl	8002724 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2202      	movs	r2, #2
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3304      	adds	r3, #4
 80026b2:	4619      	mov	r1, r3
 80026b4:	4610      	mov	r0, r2
 80026b6:	f000 fb17 	bl	8002ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d109      	bne.n	800275c <HAL_TIM_PWM_Start+0x24>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b01      	cmp	r3, #1
 8002752:	bf14      	ite	ne
 8002754:	2301      	movne	r3, #1
 8002756:	2300      	moveq	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	e03c      	b.n	80027d6 <HAL_TIM_PWM_Start+0x9e>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	2b04      	cmp	r3, #4
 8002760:	d109      	bne.n	8002776 <HAL_TIM_PWM_Start+0x3e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b01      	cmp	r3, #1
 800276c:	bf14      	ite	ne
 800276e:	2301      	movne	r3, #1
 8002770:	2300      	moveq	r3, #0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	e02f      	b.n	80027d6 <HAL_TIM_PWM_Start+0x9e>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b08      	cmp	r3, #8
 800277a:	d109      	bne.n	8002790 <HAL_TIM_PWM_Start+0x58>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b01      	cmp	r3, #1
 8002786:	bf14      	ite	ne
 8002788:	2301      	movne	r3, #1
 800278a:	2300      	moveq	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	e022      	b.n	80027d6 <HAL_TIM_PWM_Start+0x9e>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	2b0c      	cmp	r3, #12
 8002794:	d109      	bne.n	80027aa <HAL_TIM_PWM_Start+0x72>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b01      	cmp	r3, #1
 80027a0:	bf14      	ite	ne
 80027a2:	2301      	movne	r3, #1
 80027a4:	2300      	moveq	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	e015      	b.n	80027d6 <HAL_TIM_PWM_Start+0x9e>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b10      	cmp	r3, #16
 80027ae:	d109      	bne.n	80027c4 <HAL_TIM_PWM_Start+0x8c>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	bf14      	ite	ne
 80027bc:	2301      	movne	r3, #1
 80027be:	2300      	moveq	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	e008      	b.n	80027d6 <HAL_TIM_PWM_Start+0x9e>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	bf14      	ite	ne
 80027d0:	2301      	movne	r3, #1
 80027d2:	2300      	moveq	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e092      	b.n	8002904 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d104      	bne.n	80027ee <HAL_TIM_PWM_Start+0xb6>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027ec:	e023      	b.n	8002836 <HAL_TIM_PWM_Start+0xfe>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d104      	bne.n	80027fe <HAL_TIM_PWM_Start+0xc6>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027fc:	e01b      	b.n	8002836 <HAL_TIM_PWM_Start+0xfe>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b08      	cmp	r3, #8
 8002802:	d104      	bne.n	800280e <HAL_TIM_PWM_Start+0xd6>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800280c:	e013      	b.n	8002836 <HAL_TIM_PWM_Start+0xfe>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b0c      	cmp	r3, #12
 8002812:	d104      	bne.n	800281e <HAL_TIM_PWM_Start+0xe6>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800281c:	e00b      	b.n	8002836 <HAL_TIM_PWM_Start+0xfe>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b10      	cmp	r3, #16
 8002822:	d104      	bne.n	800282e <HAL_TIM_PWM_Start+0xf6>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2202      	movs	r2, #2
 8002828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800282c:	e003      	b.n	8002836 <HAL_TIM_PWM_Start+0xfe>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2202      	movs	r2, #2
 8002832:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2201      	movs	r2, #1
 800283c:	6839      	ldr	r1, [r7, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fdf6 	bl	8003430 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a30      	ldr	r2, [pc, #192]	@ (800290c <HAL_TIM_PWM_Start+0x1d4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d004      	beq.n	8002858 <HAL_TIM_PWM_Start+0x120>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a2f      	ldr	r2, [pc, #188]	@ (8002910 <HAL_TIM_PWM_Start+0x1d8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d101      	bne.n	800285c <HAL_TIM_PWM_Start+0x124>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <HAL_TIM_PWM_Start+0x126>
 800285c:	2300      	movs	r3, #0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d007      	beq.n	8002872 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002870:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a25      	ldr	r2, [pc, #148]	@ (800290c <HAL_TIM_PWM_Start+0x1d4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d022      	beq.n	80028c2 <HAL_TIM_PWM_Start+0x18a>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002884:	d01d      	beq.n	80028c2 <HAL_TIM_PWM_Start+0x18a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a22      	ldr	r2, [pc, #136]	@ (8002914 <HAL_TIM_PWM_Start+0x1dc>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d018      	beq.n	80028c2 <HAL_TIM_PWM_Start+0x18a>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a20      	ldr	r2, [pc, #128]	@ (8002918 <HAL_TIM_PWM_Start+0x1e0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d013      	beq.n	80028c2 <HAL_TIM_PWM_Start+0x18a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a1f      	ldr	r2, [pc, #124]	@ (800291c <HAL_TIM_PWM_Start+0x1e4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d00e      	beq.n	80028c2 <HAL_TIM_PWM_Start+0x18a>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a19      	ldr	r2, [pc, #100]	@ (8002910 <HAL_TIM_PWM_Start+0x1d8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d009      	beq.n	80028c2 <HAL_TIM_PWM_Start+0x18a>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002920 <HAL_TIM_PWM_Start+0x1e8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d004      	beq.n	80028c2 <HAL_TIM_PWM_Start+0x18a>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a19      	ldr	r2, [pc, #100]	@ (8002924 <HAL_TIM_PWM_Start+0x1ec>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d115      	bne.n	80028ee <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	4b17      	ldr	r3, [pc, #92]	@ (8002928 <HAL_TIM_PWM_Start+0x1f0>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b06      	cmp	r3, #6
 80028d2:	d015      	beq.n	8002900 <HAL_TIM_PWM_Start+0x1c8>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028da:	d011      	beq.n	8002900 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0201 	orr.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ec:	e008      	b.n	8002900 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0201 	orr.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	e000      	b.n	8002902 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002900:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40010000 	.word	0x40010000
 8002910:	40010400 	.word	0x40010400
 8002914:	40000400 	.word	0x40000400
 8002918:	40000800 	.word	0x40000800
 800291c:	40000c00 	.word	0x40000c00
 8002920:	40014000 	.word	0x40014000
 8002924:	40001800 	.word	0x40001800
 8002928:	00010007 	.word	0x00010007

0800292c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002946:	2302      	movs	r3, #2
 8002948:	e0ff      	b.n	8002b4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b14      	cmp	r3, #20
 8002956:	f200 80f0 	bhi.w	8002b3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800295a:	a201      	add	r2, pc, #4	@ (adr r2, 8002960 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800295c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002960:	080029b5 	.word	0x080029b5
 8002964:	08002b3b 	.word	0x08002b3b
 8002968:	08002b3b 	.word	0x08002b3b
 800296c:	08002b3b 	.word	0x08002b3b
 8002970:	080029f5 	.word	0x080029f5
 8002974:	08002b3b 	.word	0x08002b3b
 8002978:	08002b3b 	.word	0x08002b3b
 800297c:	08002b3b 	.word	0x08002b3b
 8002980:	08002a37 	.word	0x08002a37
 8002984:	08002b3b 	.word	0x08002b3b
 8002988:	08002b3b 	.word	0x08002b3b
 800298c:	08002b3b 	.word	0x08002b3b
 8002990:	08002a77 	.word	0x08002a77
 8002994:	08002b3b 	.word	0x08002b3b
 8002998:	08002b3b 	.word	0x08002b3b
 800299c:	08002b3b 	.word	0x08002b3b
 80029a0:	08002ab9 	.word	0x08002ab9
 80029a4:	08002b3b 	.word	0x08002b3b
 80029a8:	08002b3b 	.word	0x08002b3b
 80029ac:	08002b3b 	.word	0x08002b3b
 80029b0:	08002af9 	.word	0x08002af9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 fa40 	bl	8002e40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699a      	ldr	r2, [r3, #24]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0208 	orr.w	r2, r2, #8
 80029ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0204 	bic.w	r2, r2, #4
 80029de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6999      	ldr	r1, [r3, #24]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	619a      	str	r2, [r3, #24]
      break;
 80029f2:	e0a5      	b.n	8002b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68b9      	ldr	r1, [r7, #8]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fa92 	bl	8002f24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699a      	ldr	r2, [r3, #24]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699a      	ldr	r2, [r3, #24]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6999      	ldr	r1, [r3, #24]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	021a      	lsls	r2, r3, #8
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	619a      	str	r2, [r3, #24]
      break;
 8002a34:	e084      	b.n	8002b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68b9      	ldr	r1, [r7, #8]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 fae9 	bl	8003014 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69da      	ldr	r2, [r3, #28]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0208 	orr.w	r2, r2, #8
 8002a50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	69da      	ldr	r2, [r3, #28]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0204 	bic.w	r2, r2, #4
 8002a60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	69d9      	ldr	r1, [r3, #28]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	61da      	str	r2, [r3, #28]
      break;
 8002a74:	e064      	b.n	8002b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68b9      	ldr	r1, [r7, #8]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 fb3f 	bl	8003100 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	69da      	ldr	r2, [r3, #28]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	69da      	ldr	r2, [r3, #28]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	69d9      	ldr	r1, [r3, #28]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	021a      	lsls	r2, r3, #8
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	61da      	str	r2, [r3, #28]
      break;
 8002ab6:	e043      	b.n	8002b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fb76 	bl	80031b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0208 	orr.w	r2, r2, #8
 8002ad2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0204 	bic.w	r2, r2, #4
 8002ae2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002af6:	e023      	b.n	8002b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fba8 	bl	8003254 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b12:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b22:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	021a      	lsls	r2, r3, #8
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002b38:	e002      	b.n	8002b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8002b3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop

08002b54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_TIM_ConfigClockSource+0x1c>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e0b4      	b.n	8002cda <HAL_TIM_ConfigClockSource+0x186>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	4b56      	ldr	r3, [pc, #344]	@ (8002ce4 <HAL_TIM_ConfigClockSource+0x190>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ba8:	d03e      	beq.n	8002c28 <HAL_TIM_ConfigClockSource+0xd4>
 8002baa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bae:	f200 8087 	bhi.w	8002cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bb6:	f000 8086 	beq.w	8002cc6 <HAL_TIM_ConfigClockSource+0x172>
 8002bba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bbe:	d87f      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc0:	2b70      	cmp	r3, #112	@ 0x70
 8002bc2:	d01a      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0xa6>
 8002bc4:	2b70      	cmp	r3, #112	@ 0x70
 8002bc6:	d87b      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc8:	2b60      	cmp	r3, #96	@ 0x60
 8002bca:	d050      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0x11a>
 8002bcc:	2b60      	cmp	r3, #96	@ 0x60
 8002bce:	d877      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd0:	2b50      	cmp	r3, #80	@ 0x50
 8002bd2:	d03c      	beq.n	8002c4e <HAL_TIM_ConfigClockSource+0xfa>
 8002bd4:	2b50      	cmp	r3, #80	@ 0x50
 8002bd6:	d873      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd8:	2b40      	cmp	r3, #64	@ 0x40
 8002bda:	d058      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x13a>
 8002bdc:	2b40      	cmp	r3, #64	@ 0x40
 8002bde:	d86f      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002be0:	2b30      	cmp	r3, #48	@ 0x30
 8002be2:	d064      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x15a>
 8002be4:	2b30      	cmp	r3, #48	@ 0x30
 8002be6:	d86b      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	d060      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x15a>
 8002bec:	2b20      	cmp	r3, #32
 8002bee:	d867      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d05c      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x15a>
 8002bf4:	2b10      	cmp	r3, #16
 8002bf6:	d05a      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x15a>
 8002bf8:	e062      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c0a:	f000 fbf1 	bl	80033f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	609a      	str	r2, [r3, #8]
      break;
 8002c26:	e04f      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c38:	f000 fbda 	bl	80033f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c4a:	609a      	str	r2, [r3, #8]
      break;
 8002c4c:	e03c      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f000 fb4e 	bl	80032fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2150      	movs	r1, #80	@ 0x50
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 fba7 	bl	80033ba <TIM_ITRx_SetConfig>
      break;
 8002c6c:	e02c      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f000 fb6d 	bl	800335a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2160      	movs	r1, #96	@ 0x60
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fb97 	bl	80033ba <TIM_ITRx_SetConfig>
      break;
 8002c8c:	e01c      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f000 fb2e 	bl	80032fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2140      	movs	r1, #64	@ 0x40
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 fb87 	bl	80033ba <TIM_ITRx_SetConfig>
      break;
 8002cac:	e00c      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4610      	mov	r0, r2
 8002cba:	f000 fb7e 	bl	80033ba <TIM_ITRx_SetConfig>
      break;
 8002cbe:	e003      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc4:	e000      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	fffeff88 	.word	0xfffeff88

08002ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a46      	ldr	r2, [pc, #280]	@ (8002e14 <TIM_Base_SetConfig+0x12c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d013      	beq.n	8002d28 <TIM_Base_SetConfig+0x40>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d06:	d00f      	beq.n	8002d28 <TIM_Base_SetConfig+0x40>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a43      	ldr	r2, [pc, #268]	@ (8002e18 <TIM_Base_SetConfig+0x130>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d00b      	beq.n	8002d28 <TIM_Base_SetConfig+0x40>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a42      	ldr	r2, [pc, #264]	@ (8002e1c <TIM_Base_SetConfig+0x134>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d007      	beq.n	8002d28 <TIM_Base_SetConfig+0x40>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a41      	ldr	r2, [pc, #260]	@ (8002e20 <TIM_Base_SetConfig+0x138>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d003      	beq.n	8002d28 <TIM_Base_SetConfig+0x40>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a40      	ldr	r2, [pc, #256]	@ (8002e24 <TIM_Base_SetConfig+0x13c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d108      	bne.n	8002d3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a35      	ldr	r2, [pc, #212]	@ (8002e14 <TIM_Base_SetConfig+0x12c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d02b      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d48:	d027      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a32      	ldr	r2, [pc, #200]	@ (8002e18 <TIM_Base_SetConfig+0x130>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d023      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a31      	ldr	r2, [pc, #196]	@ (8002e1c <TIM_Base_SetConfig+0x134>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d01f      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a30      	ldr	r2, [pc, #192]	@ (8002e20 <TIM_Base_SetConfig+0x138>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d01b      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a2f      	ldr	r2, [pc, #188]	@ (8002e24 <TIM_Base_SetConfig+0x13c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d017      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a2e      	ldr	r2, [pc, #184]	@ (8002e28 <TIM_Base_SetConfig+0x140>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a2d      	ldr	r2, [pc, #180]	@ (8002e2c <TIM_Base_SetConfig+0x144>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00f      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a2c      	ldr	r2, [pc, #176]	@ (8002e30 <TIM_Base_SetConfig+0x148>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00b      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a2b      	ldr	r2, [pc, #172]	@ (8002e34 <TIM_Base_SetConfig+0x14c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d007      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a2a      	ldr	r2, [pc, #168]	@ (8002e38 <TIM_Base_SetConfig+0x150>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d003      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a29      	ldr	r2, [pc, #164]	@ (8002e3c <TIM_Base_SetConfig+0x154>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d108      	bne.n	8002dac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a10      	ldr	r2, [pc, #64]	@ (8002e14 <TIM_Base_SetConfig+0x12c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d003      	beq.n	8002de0 <TIM_Base_SetConfig+0xf8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a12      	ldr	r2, [pc, #72]	@ (8002e24 <TIM_Base_SetConfig+0x13c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d103      	bne.n	8002de8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d105      	bne.n	8002e06 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f023 0201 	bic.w	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	611a      	str	r2, [r3, #16]
  }
}
 8002e06:	bf00      	nop
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40010000 	.word	0x40010000
 8002e18:	40000400 	.word	0x40000400
 8002e1c:	40000800 	.word	0x40000800
 8002e20:	40000c00 	.word	0x40000c00
 8002e24:	40010400 	.word	0x40010400
 8002e28:	40014000 	.word	0x40014000
 8002e2c:	40014400 	.word	0x40014400
 8002e30:	40014800 	.word	0x40014800
 8002e34:	40001800 	.word	0x40001800
 8002e38:	40001c00 	.word	0x40001c00
 8002e3c:	40002000 	.word	0x40002000

08002e40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f023 0201 	bic.w	r2, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4b2b      	ldr	r3, [pc, #172]	@ (8002f18 <TIM_OC1_SetConfig+0xd8>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0303 	bic.w	r3, r3, #3
 8002e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f023 0302 	bic.w	r3, r3, #2
 8002e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a21      	ldr	r2, [pc, #132]	@ (8002f1c <TIM_OC1_SetConfig+0xdc>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d003      	beq.n	8002ea4 <TIM_OC1_SetConfig+0x64>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a20      	ldr	r2, [pc, #128]	@ (8002f20 <TIM_OC1_SetConfig+0xe0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d10c      	bne.n	8002ebe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f023 0308 	bic.w	r3, r3, #8
 8002eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f023 0304 	bic.w	r3, r3, #4
 8002ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a16      	ldr	r2, [pc, #88]	@ (8002f1c <TIM_OC1_SetConfig+0xdc>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d003      	beq.n	8002ece <TIM_OC1_SetConfig+0x8e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a15      	ldr	r2, [pc, #84]	@ (8002f20 <TIM_OC1_SetConfig+0xe0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d111      	bne.n	8002ef2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	621a      	str	r2, [r3, #32]
}
 8002f0c:	bf00      	nop
 8002f0e:	371c      	adds	r7, #28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	fffeff8f 	.word	0xfffeff8f
 8002f1c:	40010000 	.word	0x40010000
 8002f20:	40010400 	.word	0x40010400

08002f24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	f023 0210 	bic.w	r2, r3, #16
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4b2e      	ldr	r3, [pc, #184]	@ (8003008 <TIM_OC2_SetConfig+0xe4>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	021b      	lsls	r3, r3, #8
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f023 0320 	bic.w	r3, r3, #32
 8002f6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a23      	ldr	r2, [pc, #140]	@ (800300c <TIM_OC2_SetConfig+0xe8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d003      	beq.n	8002f8c <TIM_OC2_SetConfig+0x68>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a22      	ldr	r2, [pc, #136]	@ (8003010 <TIM_OC2_SetConfig+0xec>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d10d      	bne.n	8002fa8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fa6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a18      	ldr	r2, [pc, #96]	@ (800300c <TIM_OC2_SetConfig+0xe8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d003      	beq.n	8002fb8 <TIM_OC2_SetConfig+0x94>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a17      	ldr	r2, [pc, #92]	@ (8003010 <TIM_OC2_SetConfig+0xec>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d113      	bne.n	8002fe0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002fbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	621a      	str	r2, [r3, #32]
}
 8002ffa:	bf00      	nop
 8002ffc:	371c      	adds	r7, #28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	feff8fff 	.word	0xfeff8fff
 800300c:	40010000 	.word	0x40010000
 8003010:	40010400 	.word	0x40010400

08003014 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4b2d      	ldr	r3, [pc, #180]	@ (80030f4 <TIM_OC3_SetConfig+0xe0>)
 8003040:	4013      	ands	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 0303 	bic.w	r3, r3, #3
 800304a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	4313      	orrs	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800305c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	021b      	lsls	r3, r3, #8
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a22      	ldr	r2, [pc, #136]	@ (80030f8 <TIM_OC3_SetConfig+0xe4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d003      	beq.n	800307a <TIM_OC3_SetConfig+0x66>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a21      	ldr	r2, [pc, #132]	@ (80030fc <TIM_OC3_SetConfig+0xe8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d10d      	bne.n	8003096 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003080:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003094:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a17      	ldr	r2, [pc, #92]	@ (80030f8 <TIM_OC3_SetConfig+0xe4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d003      	beq.n	80030a6 <TIM_OC3_SetConfig+0x92>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a16      	ldr	r2, [pc, #88]	@ (80030fc <TIM_OC3_SetConfig+0xe8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d113      	bne.n	80030ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80030b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	621a      	str	r2, [r3, #32]
}
 80030e8:	bf00      	nop
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	fffeff8f 	.word	0xfffeff8f
 80030f8:	40010000 	.word	0x40010000
 80030fc:	40010400 	.word	0x40010400

08003100 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4b1e      	ldr	r3, [pc, #120]	@ (80031a4 <TIM_OC4_SetConfig+0xa4>)
 800312c:	4013      	ands	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800314a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	031b      	lsls	r3, r3, #12
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a13      	ldr	r2, [pc, #76]	@ (80031a8 <TIM_OC4_SetConfig+0xa8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d003      	beq.n	8003168 <TIM_OC4_SetConfig+0x68>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a12      	ldr	r2, [pc, #72]	@ (80031ac <TIM_OC4_SetConfig+0xac>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d109      	bne.n	800317c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800316e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	019b      	lsls	r3, r3, #6
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	621a      	str	r2, [r3, #32]
}
 8003196:	bf00      	nop
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	feff8fff 	.word	0xfeff8fff
 80031a8:	40010000 	.word	0x40010000
 80031ac:	40010400 	.word	0x40010400

080031b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4b1b      	ldr	r3, [pc, #108]	@ (8003248 <TIM_OC5_SetConfig+0x98>)
 80031dc:	4013      	ands	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80031f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	041b      	lsls	r3, r3, #16
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a12      	ldr	r2, [pc, #72]	@ (800324c <TIM_OC5_SetConfig+0x9c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d003      	beq.n	800320e <TIM_OC5_SetConfig+0x5e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a11      	ldr	r2, [pc, #68]	@ (8003250 <TIM_OC5_SetConfig+0xa0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d109      	bne.n	8003222 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003214:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	021b      	lsls	r3, r3, #8
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	4313      	orrs	r3, r2
 8003220:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	621a      	str	r2, [r3, #32]
}
 800323c:	bf00      	nop
 800323e:	371c      	adds	r7, #28
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	fffeff8f 	.word	0xfffeff8f
 800324c:	40010000 	.word	0x40010000
 8003250:	40010400 	.word	0x40010400

08003254 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4b1c      	ldr	r3, [pc, #112]	@ (80032f0 <TIM_OC6_SetConfig+0x9c>)
 8003280:	4013      	ands	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4313      	orrs	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003296:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	051b      	lsls	r3, r3, #20
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a13      	ldr	r2, [pc, #76]	@ (80032f4 <TIM_OC6_SetConfig+0xa0>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d003      	beq.n	80032b4 <TIM_OC6_SetConfig+0x60>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a12      	ldr	r2, [pc, #72]	@ (80032f8 <TIM_OC6_SetConfig+0xa4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d109      	bne.n	80032c8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	029b      	lsls	r3, r3, #10
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	621a      	str	r2, [r3, #32]
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	feff8fff 	.word	0xfeff8fff
 80032f4:	40010000 	.word	0x40010000
 80032f8:	40010400 	.word	0x40010400

080032fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	f023 0201 	bic.w	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f023 030a 	bic.w	r3, r3, #10
 8003338:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4313      	orrs	r3, r2
 8003340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	621a      	str	r2, [r3, #32]
}
 800334e:	bf00      	nop
 8003350:	371c      	adds	r7, #28
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800335a:	b480      	push	{r7}
 800335c:	b087      	sub	sp, #28
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	f023 0210 	bic.w	r2, r3, #16
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003384:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	031b      	lsls	r3, r3, #12
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003396:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	4313      	orrs	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	621a      	str	r2, [r3, #32]
}
 80033ae:	bf00      	nop
 80033b0:	371c      	adds	r7, #28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b085      	sub	sp, #20
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f043 0307 	orr.w	r3, r3, #7
 80033dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	609a      	str	r2, [r3, #8]
}
 80033e4:	bf00      	nop
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800340a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	021a      	lsls	r2, r3, #8
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	431a      	orrs	r2, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	4313      	orrs	r3, r2
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	4313      	orrs	r3, r2
 800341c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	609a      	str	r2, [r3, #8]
}
 8003424:	bf00      	nop
 8003426:	371c      	adds	r7, #28
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	2201      	movs	r2, #1
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a1a      	ldr	r2, [r3, #32]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	43db      	mvns	r3, r3
 8003452:	401a      	ands	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a1a      	ldr	r2, [r3, #32]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	fa01 f303 	lsl.w	r3, r1, r3
 8003468:	431a      	orrs	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	621a      	str	r2, [r3, #32]
}
 800346e:	bf00      	nop
 8003470:	371c      	adds	r7, #28
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003490:	2302      	movs	r3, #2
 8003492:	e06d      	b.n	8003570 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a30      	ldr	r2, [pc, #192]	@ (800357c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d004      	beq.n	80034c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a2f      	ldr	r2, [pc, #188]	@ (8003580 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d108      	bne.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80034ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a20      	ldr	r2, [pc, #128]	@ (800357c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d022      	beq.n	8003544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003506:	d01d      	beq.n	8003544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1d      	ldr	r2, [pc, #116]	@ (8003584 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d018      	beq.n	8003544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1c      	ldr	r2, [pc, #112]	@ (8003588 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d013      	beq.n	8003544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1a      	ldr	r2, [pc, #104]	@ (800358c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00e      	beq.n	8003544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a15      	ldr	r2, [pc, #84]	@ (8003580 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d009      	beq.n	8003544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a16      	ldr	r2, [pc, #88]	@ (8003590 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d004      	beq.n	8003544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a15      	ldr	r2, [pc, #84]	@ (8003594 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d10c      	bne.n	800355e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800354a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	4313      	orrs	r3, r2
 8003554:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	40010000 	.word	0x40010000
 8003580:	40010400 	.word	0x40010400
 8003584:	40000400 	.word	0x40000400
 8003588:	40000800 	.word	0x40000800
 800358c:	40000c00 	.word	0x40000c00
 8003590:	40014000 	.word	0x40014000
 8003594:	40001800 	.word	0x40001800

08003598 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e040      	b.n	800362c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fd fb08 	bl	8000bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2224      	movs	r2, #36	@ 0x24
 80035c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0201 	bic.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fbde 	bl	8003da0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f977 	bl	80038d8 <UART_SetConfig>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d101      	bne.n	80035f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e01b      	b.n	800362c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003602:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003612:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fc5d 	bl	8003ee4 <UART_CheckIdleState>
 800362a:	4603      	mov	r3, r0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08a      	sub	sp, #40	@ 0x28
 8003638:	af02      	add	r7, sp, #8
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	4613      	mov	r3, r2
 8003642:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003648:	2b20      	cmp	r3, #32
 800364a:	d177      	bne.n	800373c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <HAL_UART_Transmit+0x24>
 8003652:	88fb      	ldrh	r3, [r7, #6]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e070      	b.n	800373e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2221      	movs	r2, #33	@ 0x21
 8003668:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800366a:	f7fd fb8b 	bl	8000d84 <HAL_GetTick>
 800366e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	88fa      	ldrh	r2, [r7, #6]
 8003674:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	88fa      	ldrh	r2, [r7, #6]
 800367c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003688:	d108      	bne.n	800369c <HAL_UART_Transmit+0x68>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d104      	bne.n	800369c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	e003      	b.n	80036a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036a4:	e02f      	b.n	8003706 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2200      	movs	r2, #0
 80036ae:	2180      	movs	r1, #128	@ 0x80
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 fcbf 	bl	8004034 <UART_WaitOnFlagUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d004      	beq.n	80036c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e03b      	b.n	800373e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10b      	bne.n	80036e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	3302      	adds	r3, #2
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	e007      	b.n	80036f4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	781a      	ldrb	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3301      	adds	r3, #1
 80036f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1c9      	bne.n	80036a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2200      	movs	r2, #0
 800371a:	2140      	movs	r1, #64	@ 0x40
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 fc89 	bl	8004034 <UART_WaitOnFlagUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d004      	beq.n	8003732 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e005      	b.n	800373e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2220      	movs	r2, #32
 8003736:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	e000      	b.n	800373e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800373c:	2302      	movs	r3, #2
  }
}
 800373e:	4618      	mov	r0, r3
 8003740:	3720      	adds	r7, #32
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b08a      	sub	sp, #40	@ 0x28
 800374a:	af02      	add	r7, sp, #8
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	603b      	str	r3, [r7, #0]
 8003752:	4613      	mov	r3, r2
 8003754:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800375c:	2b20      	cmp	r3, #32
 800375e:	f040 80b5 	bne.w	80038cc <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <HAL_UART_Receive+0x28>
 8003768:	88fb      	ldrh	r3, [r7, #6]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e0ad      	b.n	80038ce <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2222      	movs	r2, #34	@ 0x22
 800377e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003788:	f7fd fafc 	bl	8000d84 <HAL_GetTick>
 800378c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	88fa      	ldrh	r2, [r7, #6]
 8003792:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	88fa      	ldrh	r2, [r7, #6]
 800379a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a6:	d10e      	bne.n	80037c6 <HAL_UART_Receive+0x80>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d105      	bne.n	80037bc <HAL_UART_Receive+0x76>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80037b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80037ba:	e02d      	b.n	8003818 <HAL_UART_Receive+0xd2>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	22ff      	movs	r2, #255	@ 0xff
 80037c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80037c4:	e028      	b.n	8003818 <HAL_UART_Receive+0xd2>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10d      	bne.n	80037ea <HAL_UART_Receive+0xa4>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d104      	bne.n	80037e0 <HAL_UART_Receive+0x9a>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	22ff      	movs	r2, #255	@ 0xff
 80037da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80037de:	e01b      	b.n	8003818 <HAL_UART_Receive+0xd2>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	227f      	movs	r2, #127	@ 0x7f
 80037e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80037e8:	e016      	b.n	8003818 <HAL_UART_Receive+0xd2>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037f2:	d10d      	bne.n	8003810 <HAL_UART_Receive+0xca>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d104      	bne.n	8003806 <HAL_UART_Receive+0xc0>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	227f      	movs	r2, #127	@ 0x7f
 8003800:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003804:	e008      	b.n	8003818 <HAL_UART_Receive+0xd2>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	223f      	movs	r2, #63	@ 0x3f
 800380a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800380e:	e003      	b.n	8003818 <HAL_UART_Receive+0xd2>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800381e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003828:	d108      	bne.n	800383c <HAL_UART_Receive+0xf6>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d104      	bne.n	800383c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	61bb      	str	r3, [r7, #24]
 800383a:	e003      	b.n	8003844 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003840:	2300      	movs	r3, #0
 8003842:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003844:	e036      	b.n	80038b4 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2200      	movs	r2, #0
 800384e:	2120      	movs	r1, #32
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 fbef 	bl	8004034 <UART_WaitOnFlagUntilTimeout>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2220      	movs	r2, #32
 8003860:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e032      	b.n	80038ce <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10c      	bne.n	8003888 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003874:	b29a      	uxth	r2, r3
 8003876:	8a7b      	ldrh	r3, [r7, #18]
 8003878:	4013      	ands	r3, r2
 800387a:	b29a      	uxth	r2, r3
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	3302      	adds	r3, #2
 8003884:	61bb      	str	r3, [r7, #24]
 8003886:	e00c      	b.n	80038a2 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	b2da      	uxtb	r2, r3
 8003890:	8a7b      	ldrh	r3, [r7, #18]
 8003892:	b2db      	uxtb	r3, r3
 8003894:	4013      	ands	r3, r2
 8003896:	b2da      	uxtb	r2, r3
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	3301      	adds	r3, #1
 80038a0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1c2      	bne.n	8003846 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	e000      	b.n	80038ce <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80038cc:	2302      	movs	r3, #2
  }
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3720      	adds	r7, #32
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	4ba6      	ldr	r3, [pc, #664]	@ (8003b9c <UART_SetConfig+0x2c4>)
 8003904:	4013      	ands	r3, r2
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6812      	ldr	r2, [r2, #0]
 800390a:	6979      	ldr	r1, [r7, #20]
 800390c:	430b      	orrs	r3, r1
 800390e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	4313      	orrs	r3, r2
 8003934:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	430a      	orrs	r2, r1
 8003948:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a94      	ldr	r2, [pc, #592]	@ (8003ba0 <UART_SetConfig+0x2c8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d120      	bne.n	8003996 <UART_SetConfig+0xbe>
 8003954:	4b93      	ldr	r3, [pc, #588]	@ (8003ba4 <UART_SetConfig+0x2cc>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	2b03      	cmp	r3, #3
 8003960:	d816      	bhi.n	8003990 <UART_SetConfig+0xb8>
 8003962:	a201      	add	r2, pc, #4	@ (adr r2, 8003968 <UART_SetConfig+0x90>)
 8003964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003968:	08003979 	.word	0x08003979
 800396c:	08003985 	.word	0x08003985
 8003970:	0800397f 	.word	0x0800397f
 8003974:	0800398b 	.word	0x0800398b
 8003978:	2301      	movs	r3, #1
 800397a:	77fb      	strb	r3, [r7, #31]
 800397c:	e150      	b.n	8003c20 <UART_SetConfig+0x348>
 800397e:	2302      	movs	r3, #2
 8003980:	77fb      	strb	r3, [r7, #31]
 8003982:	e14d      	b.n	8003c20 <UART_SetConfig+0x348>
 8003984:	2304      	movs	r3, #4
 8003986:	77fb      	strb	r3, [r7, #31]
 8003988:	e14a      	b.n	8003c20 <UART_SetConfig+0x348>
 800398a:	2308      	movs	r3, #8
 800398c:	77fb      	strb	r3, [r7, #31]
 800398e:	e147      	b.n	8003c20 <UART_SetConfig+0x348>
 8003990:	2310      	movs	r3, #16
 8003992:	77fb      	strb	r3, [r7, #31]
 8003994:	e144      	b.n	8003c20 <UART_SetConfig+0x348>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a83      	ldr	r2, [pc, #524]	@ (8003ba8 <UART_SetConfig+0x2d0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d132      	bne.n	8003a06 <UART_SetConfig+0x12e>
 80039a0:	4b80      	ldr	r3, [pc, #512]	@ (8003ba4 <UART_SetConfig+0x2cc>)
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b0c      	cmp	r3, #12
 80039ac:	d828      	bhi.n	8003a00 <UART_SetConfig+0x128>
 80039ae:	a201      	add	r2, pc, #4	@ (adr r2, 80039b4 <UART_SetConfig+0xdc>)
 80039b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b4:	080039e9 	.word	0x080039e9
 80039b8:	08003a01 	.word	0x08003a01
 80039bc:	08003a01 	.word	0x08003a01
 80039c0:	08003a01 	.word	0x08003a01
 80039c4:	080039f5 	.word	0x080039f5
 80039c8:	08003a01 	.word	0x08003a01
 80039cc:	08003a01 	.word	0x08003a01
 80039d0:	08003a01 	.word	0x08003a01
 80039d4:	080039ef 	.word	0x080039ef
 80039d8:	08003a01 	.word	0x08003a01
 80039dc:	08003a01 	.word	0x08003a01
 80039e0:	08003a01 	.word	0x08003a01
 80039e4:	080039fb 	.word	0x080039fb
 80039e8:	2300      	movs	r3, #0
 80039ea:	77fb      	strb	r3, [r7, #31]
 80039ec:	e118      	b.n	8003c20 <UART_SetConfig+0x348>
 80039ee:	2302      	movs	r3, #2
 80039f0:	77fb      	strb	r3, [r7, #31]
 80039f2:	e115      	b.n	8003c20 <UART_SetConfig+0x348>
 80039f4:	2304      	movs	r3, #4
 80039f6:	77fb      	strb	r3, [r7, #31]
 80039f8:	e112      	b.n	8003c20 <UART_SetConfig+0x348>
 80039fa:	2308      	movs	r3, #8
 80039fc:	77fb      	strb	r3, [r7, #31]
 80039fe:	e10f      	b.n	8003c20 <UART_SetConfig+0x348>
 8003a00:	2310      	movs	r3, #16
 8003a02:	77fb      	strb	r3, [r7, #31]
 8003a04:	e10c      	b.n	8003c20 <UART_SetConfig+0x348>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a68      	ldr	r2, [pc, #416]	@ (8003bac <UART_SetConfig+0x2d4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d120      	bne.n	8003a52 <UART_SetConfig+0x17a>
 8003a10:	4b64      	ldr	r3, [pc, #400]	@ (8003ba4 <UART_SetConfig+0x2cc>)
 8003a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a16:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003a1a:	2b30      	cmp	r3, #48	@ 0x30
 8003a1c:	d013      	beq.n	8003a46 <UART_SetConfig+0x16e>
 8003a1e:	2b30      	cmp	r3, #48	@ 0x30
 8003a20:	d814      	bhi.n	8003a4c <UART_SetConfig+0x174>
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	d009      	beq.n	8003a3a <UART_SetConfig+0x162>
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d810      	bhi.n	8003a4c <UART_SetConfig+0x174>
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <UART_SetConfig+0x15c>
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d006      	beq.n	8003a40 <UART_SetConfig+0x168>
 8003a32:	e00b      	b.n	8003a4c <UART_SetConfig+0x174>
 8003a34:	2300      	movs	r3, #0
 8003a36:	77fb      	strb	r3, [r7, #31]
 8003a38:	e0f2      	b.n	8003c20 <UART_SetConfig+0x348>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	77fb      	strb	r3, [r7, #31]
 8003a3e:	e0ef      	b.n	8003c20 <UART_SetConfig+0x348>
 8003a40:	2304      	movs	r3, #4
 8003a42:	77fb      	strb	r3, [r7, #31]
 8003a44:	e0ec      	b.n	8003c20 <UART_SetConfig+0x348>
 8003a46:	2308      	movs	r3, #8
 8003a48:	77fb      	strb	r3, [r7, #31]
 8003a4a:	e0e9      	b.n	8003c20 <UART_SetConfig+0x348>
 8003a4c:	2310      	movs	r3, #16
 8003a4e:	77fb      	strb	r3, [r7, #31]
 8003a50:	e0e6      	b.n	8003c20 <UART_SetConfig+0x348>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a56      	ldr	r2, [pc, #344]	@ (8003bb0 <UART_SetConfig+0x2d8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d120      	bne.n	8003a9e <UART_SetConfig+0x1c6>
 8003a5c:	4b51      	ldr	r3, [pc, #324]	@ (8003ba4 <UART_SetConfig+0x2cc>)
 8003a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a62:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a66:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a68:	d013      	beq.n	8003a92 <UART_SetConfig+0x1ba>
 8003a6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a6c:	d814      	bhi.n	8003a98 <UART_SetConfig+0x1c0>
 8003a6e:	2b80      	cmp	r3, #128	@ 0x80
 8003a70:	d009      	beq.n	8003a86 <UART_SetConfig+0x1ae>
 8003a72:	2b80      	cmp	r3, #128	@ 0x80
 8003a74:	d810      	bhi.n	8003a98 <UART_SetConfig+0x1c0>
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <UART_SetConfig+0x1a8>
 8003a7a:	2b40      	cmp	r3, #64	@ 0x40
 8003a7c:	d006      	beq.n	8003a8c <UART_SetConfig+0x1b4>
 8003a7e:	e00b      	b.n	8003a98 <UART_SetConfig+0x1c0>
 8003a80:	2300      	movs	r3, #0
 8003a82:	77fb      	strb	r3, [r7, #31]
 8003a84:	e0cc      	b.n	8003c20 <UART_SetConfig+0x348>
 8003a86:	2302      	movs	r3, #2
 8003a88:	77fb      	strb	r3, [r7, #31]
 8003a8a:	e0c9      	b.n	8003c20 <UART_SetConfig+0x348>
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	77fb      	strb	r3, [r7, #31]
 8003a90:	e0c6      	b.n	8003c20 <UART_SetConfig+0x348>
 8003a92:	2308      	movs	r3, #8
 8003a94:	77fb      	strb	r3, [r7, #31]
 8003a96:	e0c3      	b.n	8003c20 <UART_SetConfig+0x348>
 8003a98:	2310      	movs	r3, #16
 8003a9a:	77fb      	strb	r3, [r7, #31]
 8003a9c:	e0c0      	b.n	8003c20 <UART_SetConfig+0x348>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a44      	ldr	r2, [pc, #272]	@ (8003bb4 <UART_SetConfig+0x2dc>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d125      	bne.n	8003af4 <UART_SetConfig+0x21c>
 8003aa8:	4b3e      	ldr	r3, [pc, #248]	@ (8003ba4 <UART_SetConfig+0x2cc>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ab2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ab6:	d017      	beq.n	8003ae8 <UART_SetConfig+0x210>
 8003ab8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003abc:	d817      	bhi.n	8003aee <UART_SetConfig+0x216>
 8003abe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ac2:	d00b      	beq.n	8003adc <UART_SetConfig+0x204>
 8003ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ac8:	d811      	bhi.n	8003aee <UART_SetConfig+0x216>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <UART_SetConfig+0x1fe>
 8003ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ad2:	d006      	beq.n	8003ae2 <UART_SetConfig+0x20a>
 8003ad4:	e00b      	b.n	8003aee <UART_SetConfig+0x216>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	77fb      	strb	r3, [r7, #31]
 8003ada:	e0a1      	b.n	8003c20 <UART_SetConfig+0x348>
 8003adc:	2302      	movs	r3, #2
 8003ade:	77fb      	strb	r3, [r7, #31]
 8003ae0:	e09e      	b.n	8003c20 <UART_SetConfig+0x348>
 8003ae2:	2304      	movs	r3, #4
 8003ae4:	77fb      	strb	r3, [r7, #31]
 8003ae6:	e09b      	b.n	8003c20 <UART_SetConfig+0x348>
 8003ae8:	2308      	movs	r3, #8
 8003aea:	77fb      	strb	r3, [r7, #31]
 8003aec:	e098      	b.n	8003c20 <UART_SetConfig+0x348>
 8003aee:	2310      	movs	r3, #16
 8003af0:	77fb      	strb	r3, [r7, #31]
 8003af2:	e095      	b.n	8003c20 <UART_SetConfig+0x348>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a2f      	ldr	r2, [pc, #188]	@ (8003bb8 <UART_SetConfig+0x2e0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d125      	bne.n	8003b4a <UART_SetConfig+0x272>
 8003afe:	4b29      	ldr	r3, [pc, #164]	@ (8003ba4 <UART_SetConfig+0x2cc>)
 8003b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b0c:	d017      	beq.n	8003b3e <UART_SetConfig+0x266>
 8003b0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b12:	d817      	bhi.n	8003b44 <UART_SetConfig+0x26c>
 8003b14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b18:	d00b      	beq.n	8003b32 <UART_SetConfig+0x25a>
 8003b1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b1e:	d811      	bhi.n	8003b44 <UART_SetConfig+0x26c>
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <UART_SetConfig+0x254>
 8003b24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b28:	d006      	beq.n	8003b38 <UART_SetConfig+0x260>
 8003b2a:	e00b      	b.n	8003b44 <UART_SetConfig+0x26c>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	77fb      	strb	r3, [r7, #31]
 8003b30:	e076      	b.n	8003c20 <UART_SetConfig+0x348>
 8003b32:	2302      	movs	r3, #2
 8003b34:	77fb      	strb	r3, [r7, #31]
 8003b36:	e073      	b.n	8003c20 <UART_SetConfig+0x348>
 8003b38:	2304      	movs	r3, #4
 8003b3a:	77fb      	strb	r3, [r7, #31]
 8003b3c:	e070      	b.n	8003c20 <UART_SetConfig+0x348>
 8003b3e:	2308      	movs	r3, #8
 8003b40:	77fb      	strb	r3, [r7, #31]
 8003b42:	e06d      	b.n	8003c20 <UART_SetConfig+0x348>
 8003b44:	2310      	movs	r3, #16
 8003b46:	77fb      	strb	r3, [r7, #31]
 8003b48:	e06a      	b.n	8003c20 <UART_SetConfig+0x348>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8003bbc <UART_SetConfig+0x2e4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d138      	bne.n	8003bc6 <UART_SetConfig+0x2ee>
 8003b54:	4b13      	ldr	r3, [pc, #76]	@ (8003ba4 <UART_SetConfig+0x2cc>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b5a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003b5e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b62:	d017      	beq.n	8003b94 <UART_SetConfig+0x2bc>
 8003b64:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b68:	d82a      	bhi.n	8003bc0 <UART_SetConfig+0x2e8>
 8003b6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b6e:	d00b      	beq.n	8003b88 <UART_SetConfig+0x2b0>
 8003b70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b74:	d824      	bhi.n	8003bc0 <UART_SetConfig+0x2e8>
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <UART_SetConfig+0x2aa>
 8003b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b7e:	d006      	beq.n	8003b8e <UART_SetConfig+0x2b6>
 8003b80:	e01e      	b.n	8003bc0 <UART_SetConfig+0x2e8>
 8003b82:	2300      	movs	r3, #0
 8003b84:	77fb      	strb	r3, [r7, #31]
 8003b86:	e04b      	b.n	8003c20 <UART_SetConfig+0x348>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	77fb      	strb	r3, [r7, #31]
 8003b8c:	e048      	b.n	8003c20 <UART_SetConfig+0x348>
 8003b8e:	2304      	movs	r3, #4
 8003b90:	77fb      	strb	r3, [r7, #31]
 8003b92:	e045      	b.n	8003c20 <UART_SetConfig+0x348>
 8003b94:	2308      	movs	r3, #8
 8003b96:	77fb      	strb	r3, [r7, #31]
 8003b98:	e042      	b.n	8003c20 <UART_SetConfig+0x348>
 8003b9a:	bf00      	nop
 8003b9c:	efff69f3 	.word	0xefff69f3
 8003ba0:	40011000 	.word	0x40011000
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	40004400 	.word	0x40004400
 8003bac:	40004800 	.word	0x40004800
 8003bb0:	40004c00 	.word	0x40004c00
 8003bb4:	40005000 	.word	0x40005000
 8003bb8:	40011400 	.word	0x40011400
 8003bbc:	40007800 	.word	0x40007800
 8003bc0:	2310      	movs	r3, #16
 8003bc2:	77fb      	strb	r3, [r7, #31]
 8003bc4:	e02c      	b.n	8003c20 <UART_SetConfig+0x348>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a72      	ldr	r2, [pc, #456]	@ (8003d94 <UART_SetConfig+0x4bc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d125      	bne.n	8003c1c <UART_SetConfig+0x344>
 8003bd0:	4b71      	ldr	r3, [pc, #452]	@ (8003d98 <UART_SetConfig+0x4c0>)
 8003bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003bda:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003bde:	d017      	beq.n	8003c10 <UART_SetConfig+0x338>
 8003be0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003be4:	d817      	bhi.n	8003c16 <UART_SetConfig+0x33e>
 8003be6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bea:	d00b      	beq.n	8003c04 <UART_SetConfig+0x32c>
 8003bec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bf0:	d811      	bhi.n	8003c16 <UART_SetConfig+0x33e>
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <UART_SetConfig+0x326>
 8003bf6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bfa:	d006      	beq.n	8003c0a <UART_SetConfig+0x332>
 8003bfc:	e00b      	b.n	8003c16 <UART_SetConfig+0x33e>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	77fb      	strb	r3, [r7, #31]
 8003c02:	e00d      	b.n	8003c20 <UART_SetConfig+0x348>
 8003c04:	2302      	movs	r3, #2
 8003c06:	77fb      	strb	r3, [r7, #31]
 8003c08:	e00a      	b.n	8003c20 <UART_SetConfig+0x348>
 8003c0a:	2304      	movs	r3, #4
 8003c0c:	77fb      	strb	r3, [r7, #31]
 8003c0e:	e007      	b.n	8003c20 <UART_SetConfig+0x348>
 8003c10:	2308      	movs	r3, #8
 8003c12:	77fb      	strb	r3, [r7, #31]
 8003c14:	e004      	b.n	8003c20 <UART_SetConfig+0x348>
 8003c16:	2310      	movs	r3, #16
 8003c18:	77fb      	strb	r3, [r7, #31]
 8003c1a:	e001      	b.n	8003c20 <UART_SetConfig+0x348>
 8003c1c:	2310      	movs	r3, #16
 8003c1e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c28:	d15b      	bne.n	8003ce2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003c2a:	7ffb      	ldrb	r3, [r7, #31]
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d828      	bhi.n	8003c82 <UART_SetConfig+0x3aa>
 8003c30:	a201      	add	r2, pc, #4	@ (adr r2, 8003c38 <UART_SetConfig+0x360>)
 8003c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c36:	bf00      	nop
 8003c38:	08003c5d 	.word	0x08003c5d
 8003c3c:	08003c65 	.word	0x08003c65
 8003c40:	08003c6d 	.word	0x08003c6d
 8003c44:	08003c83 	.word	0x08003c83
 8003c48:	08003c73 	.word	0x08003c73
 8003c4c:	08003c83 	.word	0x08003c83
 8003c50:	08003c83 	.word	0x08003c83
 8003c54:	08003c83 	.word	0x08003c83
 8003c58:	08003c7b 	.word	0x08003c7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c5c:	f7fe f864 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8003c60:	61b8      	str	r0, [r7, #24]
        break;
 8003c62:	e013      	b.n	8003c8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c64:	f7fe f874 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 8003c68:	61b8      	str	r0, [r7, #24]
        break;
 8003c6a:	e00f      	b.n	8003c8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c6c:	4b4b      	ldr	r3, [pc, #300]	@ (8003d9c <UART_SetConfig+0x4c4>)
 8003c6e:	61bb      	str	r3, [r7, #24]
        break;
 8003c70:	e00c      	b.n	8003c8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c72:	f7fd ff87 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8003c76:	61b8      	str	r0, [r7, #24]
        break;
 8003c78:	e008      	b.n	8003c8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c7e:	61bb      	str	r3, [r7, #24]
        break;
 8003c80:	e004      	b.n	8003c8c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	77bb      	strb	r3, [r7, #30]
        break;
 8003c8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d074      	beq.n	8003d7c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	005a      	lsls	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	085b      	lsrs	r3, r3, #1
 8003c9c:	441a      	add	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	2b0f      	cmp	r3, #15
 8003cac:	d916      	bls.n	8003cdc <UART_SetConfig+0x404>
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cb4:	d212      	bcs.n	8003cdc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	f023 030f 	bic.w	r3, r3, #15
 8003cbe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	085b      	lsrs	r3, r3, #1
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	89fb      	ldrh	r3, [r7, #14]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	89fa      	ldrh	r2, [r7, #14]
 8003cd8:	60da      	str	r2, [r3, #12]
 8003cda:	e04f      	b.n	8003d7c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	77bb      	strb	r3, [r7, #30]
 8003ce0:	e04c      	b.n	8003d7c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ce2:	7ffb      	ldrb	r3, [r7, #31]
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d828      	bhi.n	8003d3a <UART_SetConfig+0x462>
 8003ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf0 <UART_SetConfig+0x418>)
 8003cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cee:	bf00      	nop
 8003cf0:	08003d15 	.word	0x08003d15
 8003cf4:	08003d1d 	.word	0x08003d1d
 8003cf8:	08003d25 	.word	0x08003d25
 8003cfc:	08003d3b 	.word	0x08003d3b
 8003d00:	08003d2b 	.word	0x08003d2b
 8003d04:	08003d3b 	.word	0x08003d3b
 8003d08:	08003d3b 	.word	0x08003d3b
 8003d0c:	08003d3b 	.word	0x08003d3b
 8003d10:	08003d33 	.word	0x08003d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d14:	f7fe f808 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8003d18:	61b8      	str	r0, [r7, #24]
        break;
 8003d1a:	e013      	b.n	8003d44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d1c:	f7fe f818 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 8003d20:	61b8      	str	r0, [r7, #24]
        break;
 8003d22:	e00f      	b.n	8003d44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d24:	4b1d      	ldr	r3, [pc, #116]	@ (8003d9c <UART_SetConfig+0x4c4>)
 8003d26:	61bb      	str	r3, [r7, #24]
        break;
 8003d28:	e00c      	b.n	8003d44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d2a:	f7fd ff2b 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8003d2e:	61b8      	str	r0, [r7, #24]
        break;
 8003d30:	e008      	b.n	8003d44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d36:	61bb      	str	r3, [r7, #24]
        break;
 8003d38:	e004      	b.n	8003d44 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	77bb      	strb	r3, [r7, #30]
        break;
 8003d42:	bf00      	nop
    }

    if (pclk != 0U)
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d018      	beq.n	8003d7c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	085a      	lsrs	r2, r3, #1
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	441a      	add	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b0f      	cmp	r3, #15
 8003d62:	d909      	bls.n	8003d78 <UART_SetConfig+0x4a0>
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d6a:	d205      	bcs.n	8003d78 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	e001      	b.n	8003d7c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003d88:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3720      	adds	r7, #32
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	40007c00 	.word	0x40007c00
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	00f42400 	.word	0x00f42400

08003da0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e34:	f003 0310 	and.w	r3, r3, #16
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01a      	beq.n	8003eb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e9e:	d10a      	bne.n	8003eb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	605a      	str	r2, [r3, #4]
  }
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b098      	sub	sp, #96	@ 0x60
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ef4:	f7fc ff46 	bl	8000d84 <HAL_GetTick>
 8003ef8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d12e      	bne.n	8003f66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f10:	2200      	movs	r2, #0
 8003f12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f88c 	bl	8004034 <UART_WaitOnFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d021      	beq.n	8003f66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f2a:	e853 3f00 	ldrex	r3, [r3]
 8003f2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f36:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f40:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f42:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f48:	e841 2300 	strex	r3, r2, [r1]
 8003f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1e6      	bne.n	8003f22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2220      	movs	r2, #32
 8003f58:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e062      	b.n	800402c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d149      	bne.n	8004008 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f856 	bl	8004034 <UART_WaitOnFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d03c      	beq.n	8004008 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f96:	e853 3f00 	ldrex	r3, [r3]
 8003f9a:	623b      	str	r3, [r7, #32]
   return(result);
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fac:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fb4:	e841 2300 	strex	r3, r2, [r1]
 8003fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e6      	bne.n	8003f8e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	e853 3f00 	ldrex	r3, [r3]
 8003fce:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 0301 	bic.w	r3, r3, #1
 8003fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3308      	adds	r3, #8
 8003fde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fe0:	61fa      	str	r2, [r7, #28]
 8003fe2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	69b9      	ldr	r1, [r7, #24]
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	e841 2300 	strex	r3, r2, [r1]
 8003fec:	617b      	str	r3, [r7, #20]
   return(result);
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e5      	bne.n	8003fc0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e011      	b.n	800402c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2220      	movs	r2, #32
 8004012:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3758      	adds	r7, #88	@ 0x58
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	4613      	mov	r3, r2
 8004042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004044:	e04f      	b.n	80040e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404c:	d04b      	beq.n	80040e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404e:	f7fc fe99 	bl	8000d84 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	429a      	cmp	r2, r3
 800405c:	d302      	bcc.n	8004064 <UART_WaitOnFlagUntilTimeout+0x30>
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e04e      	b.n	8004106 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	d037      	beq.n	80040e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b80      	cmp	r3, #128	@ 0x80
 800407a:	d034      	beq.n	80040e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b40      	cmp	r3, #64	@ 0x40
 8004080:	d031      	beq.n	80040e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	2b08      	cmp	r3, #8
 800408e:	d110      	bne.n	80040b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2208      	movs	r2, #8
 8004096:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 f838 	bl	800410e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2208      	movs	r2, #8
 80040a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e029      	b.n	8004106 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040c0:	d111      	bne.n	80040e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 f81e 	bl	800410e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e00f      	b.n	8004106 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69da      	ldr	r2, [r3, #28]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4013      	ands	r3, r2
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	bf0c      	ite	eq
 80040f6:	2301      	moveq	r3, #1
 80040f8:	2300      	movne	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	429a      	cmp	r2, r3
 8004102:	d0a0      	beq.n	8004046 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800410e:	b480      	push	{r7}
 8004110:	b095      	sub	sp, #84	@ 0x54
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800411e:	e853 3f00 	ldrex	r3, [r3]
 8004122:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004126:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800412a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	461a      	mov	r2, r3
 8004132:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004134:	643b      	str	r3, [r7, #64]	@ 0x40
 8004136:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004138:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800413a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e6      	bne.n	8004116 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3308      	adds	r3, #8
 800414e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	e853 3f00 	ldrex	r3, [r3]
 8004156:	61fb      	str	r3, [r7, #28]
   return(result);
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f023 0301 	bic.w	r3, r3, #1
 800415e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3308      	adds	r3, #8
 8004166:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004168:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800416a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800416e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004170:	e841 2300 	strex	r3, r2, [r1]
 8004174:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1e5      	bne.n	8004148 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004180:	2b01      	cmp	r3, #1
 8004182:	d118      	bne.n	80041b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	60bb      	str	r3, [r7, #8]
   return(result);
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f023 0310 	bic.w	r3, r3, #16
 8004198:	647b      	str	r3, [r7, #68]	@ 0x44
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041a2:	61bb      	str	r3, [r7, #24]
 80041a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	6979      	ldr	r1, [r7, #20]
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	613b      	str	r3, [r7, #16]
   return(result);
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e6      	bne.n	8004184 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80041ca:	bf00      	nop
 80041cc:	3754      	adds	r7, #84	@ 0x54
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <memset>:
 80041d6:	4402      	add	r2, r0
 80041d8:	4603      	mov	r3, r0
 80041da:	4293      	cmp	r3, r2
 80041dc:	d100      	bne.n	80041e0 <memset+0xa>
 80041de:	4770      	bx	lr
 80041e0:	f803 1b01 	strb.w	r1, [r3], #1
 80041e4:	e7f9      	b.n	80041da <memset+0x4>
	...

080041e8 <__libc_init_array>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	4d0d      	ldr	r5, [pc, #52]	@ (8004220 <__libc_init_array+0x38>)
 80041ec:	4c0d      	ldr	r4, [pc, #52]	@ (8004224 <__libc_init_array+0x3c>)
 80041ee:	1b64      	subs	r4, r4, r5
 80041f0:	10a4      	asrs	r4, r4, #2
 80041f2:	2600      	movs	r6, #0
 80041f4:	42a6      	cmp	r6, r4
 80041f6:	d109      	bne.n	800420c <__libc_init_array+0x24>
 80041f8:	4d0b      	ldr	r5, [pc, #44]	@ (8004228 <__libc_init_array+0x40>)
 80041fa:	4c0c      	ldr	r4, [pc, #48]	@ (800422c <__libc_init_array+0x44>)
 80041fc:	f000 f818 	bl	8004230 <_init>
 8004200:	1b64      	subs	r4, r4, r5
 8004202:	10a4      	asrs	r4, r4, #2
 8004204:	2600      	movs	r6, #0
 8004206:	42a6      	cmp	r6, r4
 8004208:	d105      	bne.n	8004216 <__libc_init_array+0x2e>
 800420a:	bd70      	pop	{r4, r5, r6, pc}
 800420c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004210:	4798      	blx	r3
 8004212:	3601      	adds	r6, #1
 8004214:	e7ee      	b.n	80041f4 <__libc_init_array+0xc>
 8004216:	f855 3b04 	ldr.w	r3, [r5], #4
 800421a:	4798      	blx	r3
 800421c:	3601      	adds	r6, #1
 800421e:	e7f2      	b.n	8004206 <__libc_init_array+0x1e>
 8004220:	08004278 	.word	0x08004278
 8004224:	08004278 	.word	0x08004278
 8004228:	08004278 	.word	0x08004278
 800422c:	0800427c 	.word	0x0800427c

08004230 <_init>:
 8004230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004232:	bf00      	nop
 8004234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004236:	bc08      	pop	{r3}
 8004238:	469e      	mov	lr, r3
 800423a:	4770      	bx	lr

0800423c <_fini>:
 800423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423e:	bf00      	nop
 8004240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004242:	bc08      	pop	{r3}
 8004244:	469e      	mov	lr, r3
 8004246:	4770      	bx	lr
