
lab02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002540  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002738  08002738  00003738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002748  08002748  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002748  08002748  00003748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002750  08002750  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002750  08002750  00003750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002754  08002754  00003754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002758  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08002764  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08002764  00004030  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004639  00000000  00000000  0000403a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010c1  00000000  00000000  00008673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004a8  00000000  00000000  00009738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000035d  00000000  00000000  00009be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253fc  00000000  00000000  00009f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005cc0  00000000  00000000  0002f339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7996  00000000  00000000  00034ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c98f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010d8  00000000  00000000  0011c9d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0011daac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002720 	.word	0x08002720

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002720 	.word	0x08002720

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800052c:	f000 ff9e 	bl	800146c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000530:	f001 f85d 	bl	80015ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000534:	f000 fe7c 	bl	8001230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f000 fee8 	bl	800130c <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000542:	48cc      	ldr	r0, [pc, #816]	@ (8000874 <main+0x34c>)
 8000544:	f001 fbf6 	bl	8001d34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800054e:	48ca      	ldr	r0, [pc, #808]	@ (8000878 <main+0x350>)
 8000550:	f001 fbf0 	bl	8001d34 <HAL_GPIO_WritePin>
  		  			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000554:	2201      	movs	r2, #1
 8000556:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800055a:	48c7      	ldr	r0, [pc, #796]	@ (8000878 <main+0x350>)
 800055c:	f001 fbea 	bl	8001d34 <HAL_GPIO_WritePin>
  		  			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 8000560:	2201      	movs	r2, #1
 8000562:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000566:	48c3      	ldr	r0, [pc, #780]	@ (8000874 <main+0x34c>)
 8000568:	f001 fbe4 	bl	8001d34 <HAL_GPIO_WritePin>
  		  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000572:	48c2      	ldr	r0, [pc, #776]	@ (800087c <main+0x354>)
 8000574:	f001 fbde 	bl	8001d34 <HAL_GPIO_WritePin>
  		  			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 8000578:	2201      	movs	r2, #1
 800057a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800057e:	48bd      	ldr	r0, [pc, #756]	@ (8000874 <main+0x34c>)
 8000580:	f001 fbd8 	bl	8001d34 <HAL_GPIO_WritePin>
  		  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800058a:	48bc      	ldr	r0, [pc, #752]	@ (800087c <main+0x354>)
 800058c:	f001 fbd2 	bl	8001d34 <HAL_GPIO_WritePin>
  		  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000596:	48b9      	ldr	r0, [pc, #740]	@ (800087c <main+0x354>)
 8000598:	f001 fbcc 	bl	8001d34 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 800059c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a0:	48b7      	ldr	r0, [pc, #732]	@ (8000880 <main+0x358>)
 80005a2:	f001 fbaf 	bl	8001d04 <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	f040 80e1 	bne.w	8000770 <main+0x248>

//		  if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_9) == GPIO_PIN_RESET){
//
//		  }
		  if (num == 0){
 80005ae:	4bb5      	ldr	r3, [pc, #724]	@ (8000884 <main+0x35c>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d12f      	bne.n	8000616 <main+0xee>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005bc:	48ad      	ldr	r0, [pc, #692]	@ (8000874 <main+0x34c>)
 80005be:	f001 fbb9 	bl	8001d34 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005c8:	48ab      	ldr	r0, [pc, #684]	@ (8000878 <main+0x350>)
 80005ca:	f001 fbb3 	bl	8001d34 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005d4:	48a8      	ldr	r0, [pc, #672]	@ (8000878 <main+0x350>)
 80005d6:	f001 fbad 	bl	8001d34 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005e0:	48a4      	ldr	r0, [pc, #656]	@ (8000874 <main+0x34c>)
 80005e2:	f001 fba7 	bl	8001d34 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ec:	48a3      	ldr	r0, [pc, #652]	@ (800087c <main+0x354>)
 80005ee:	f001 fba1 	bl	8001d34 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005f8:	489e      	ldr	r0, [pc, #632]	@ (8000874 <main+0x34c>)
 80005fa:	f001 fb9b 	bl	8001d34 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000604:	489d      	ldr	r0, [pc, #628]	@ (800087c <main+0x354>)
 8000606:	f001 fb95 	bl	8001d34 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000610:	489a      	ldr	r0, [pc, #616]	@ (800087c <main+0x354>)
 8000612:	f001 fb8f 	bl	8001d34 <HAL_GPIO_WritePin>
		  }


		  	  	  	if (num == 1){
 8000616:	4b9b      	ldr	r3, [pc, #620]	@ (8000884 <main+0x35c>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d10f      	bne.n	800063e <main+0x116>
		                HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000624:	4893      	ldr	r0, [pc, #588]	@ (8000874 <main+0x34c>)
 8000626:	f001 fb85 	bl	8001d34 <HAL_GPIO_WritePin>
		                HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET); // led1
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000630:	4891      	ldr	r0, [pc, #580]	@ (8000878 <main+0x350>)
 8000632:	f001 fb7f 	bl	8001d34 <HAL_GPIO_WritePin>
		                HAL_Delay(300);
 8000636:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800063a:	f001 f835 	bl	80016a8 <HAL_Delay>
		            }
		            if (num == 2){
 800063e:	4b91      	ldr	r3, [pc, #580]	@ (8000884 <main+0x35c>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b02      	cmp	r3, #2
 8000644:	d10f      	bne.n	8000666 <main+0x13e>
		                 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8000646:	2201      	movs	r2, #1
 8000648:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800064c:	488a      	ldr	r0, [pc, #552]	@ (8000878 <main+0x350>)
 800064e:	f001 fb71 	bl	8001d34 <HAL_GPIO_WritePin>
		                 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET); //led2
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000658:	4887      	ldr	r0, [pc, #540]	@ (8000878 <main+0x350>)
 800065a:	f001 fb6b 	bl	8001d34 <HAL_GPIO_WritePin>
		                 HAL_Delay(300);
 800065e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000662:	f001 f821 	bl	80016a8 <HAL_Delay>
		            }
		            if (num == 3){
 8000666:	4b87      	ldr	r3, [pc, #540]	@ (8000884 <main+0x35c>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b03      	cmp	r3, #3
 800066c:	d10f      	bne.n	800068e <main+0x166>
		                HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000674:	4880      	ldr	r0, [pc, #512]	@ (8000878 <main+0x350>)
 8000676:	f001 fb5d 	bl	8001d34 <HAL_GPIO_WritePin>
		                HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET); //led3
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000680:	487c      	ldr	r0, [pc, #496]	@ (8000874 <main+0x34c>)
 8000682:	f001 fb57 	bl	8001d34 <HAL_GPIO_WritePin>
		                HAL_Delay(300);
 8000686:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800068a:	f001 f80d 	bl	80016a8 <HAL_Delay>
		            }

		            if (num == 4){
 800068e:	4b7d      	ldr	r3, [pc, #500]	@ (8000884 <main+0x35c>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b04      	cmp	r3, #4
 8000694:	d10f      	bne.n	80006b6 <main+0x18e>
		                HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800069c:	4875      	ldr	r0, [pc, #468]	@ (8000874 <main+0x34c>)
 800069e:	f001 fb49 	bl	8001d34 <HAL_GPIO_WritePin>
		                HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET); //led4
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006a8:	4874      	ldr	r0, [pc, #464]	@ (800087c <main+0x354>)
 80006aa:	f001 fb43 	bl	8001d34 <HAL_GPIO_WritePin>
		                HAL_Delay(300);
 80006ae:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80006b2:	f000 fff9 	bl	80016a8 <HAL_Delay>
		                      }
		            if (num == 5){
 80006b6:	4b73      	ldr	r3, [pc, #460]	@ (8000884 <main+0x35c>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b05      	cmp	r3, #5
 80006bc:	d10f      	bne.n	80006de <main+0x1b6>
		                HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006c4:	486d      	ldr	r0, [pc, #436]	@ (800087c <main+0x354>)
 80006c6:	f001 fb35 	bl	8001d34 <HAL_GPIO_WritePin>
		                HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET); //led5
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006d0:	4868      	ldr	r0, [pc, #416]	@ (8000874 <main+0x34c>)
 80006d2:	f001 fb2f 	bl	8001d34 <HAL_GPIO_WritePin>
		                HAL_Delay(300);
 80006d6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80006da:	f000 ffe5 	bl	80016a8 <HAL_Delay>
		                      }
		            if (num == 6){
 80006de:	4b69      	ldr	r3, [pc, #420]	@ (8000884 <main+0x35c>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b06      	cmp	r3, #6
 80006e4:	d10f      	bne.n	8000706 <main+0x1de>
		            	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006ec:	4861      	ldr	r0, [pc, #388]	@ (8000874 <main+0x34c>)
 80006ee:	f001 fb21 	bl	8001d34 <HAL_GPIO_WritePin>
		            	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET); //led6
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006f8:	4860      	ldr	r0, [pc, #384]	@ (800087c <main+0x354>)
 80006fa:	f001 fb1b 	bl	8001d34 <HAL_GPIO_WritePin>
		            	HAL_Delay(300);
 80006fe:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000702:	f000 ffd1 	bl	80016a8 <HAL_Delay>
						  }
		            if (num == 7){
 8000706:	4b5f      	ldr	r3, [pc, #380]	@ (8000884 <main+0x35c>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b07      	cmp	r3, #7
 800070c:	d10f      	bne.n	800072e <main+0x206>
		            	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 800070e:	2201      	movs	r2, #1
 8000710:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000714:	4859      	ldr	r0, [pc, #356]	@ (800087c <main+0x354>)
 8000716:	f001 fb0d 	bl	8001d34 <HAL_GPIO_WritePin>
		            	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET); //led7
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000720:	4856      	ldr	r0, [pc, #344]	@ (800087c <main+0x354>)
 8000722:	f001 fb07 	bl	8001d34 <HAL_GPIO_WritePin>
		            	HAL_Delay(300);
 8000726:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800072a:	f000 ffbd 	bl	80016a8 <HAL_Delay>
		            						  }
		            if (num == 8){
 800072e:	4b55      	ldr	r3, [pc, #340]	@ (8000884 <main+0x35c>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b08      	cmp	r3, #8
 8000734:	d10f      	bne.n	8000756 <main+0x22e>
		            	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800073c:	484f      	ldr	r0, [pc, #316]	@ (800087c <main+0x354>)
 800073e:	f001 faf9 	bl	8001d34 <HAL_GPIO_WritePin>
		            	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET); //led8
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000748:	484a      	ldr	r0, [pc, #296]	@ (8000874 <main+0x34c>)
 800074a:	f001 faf3 	bl	8001d34 <HAL_GPIO_WritePin>
		            	HAL_Delay(300);
 800074e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000752:	f000 ffa9 	bl	80016a8 <HAL_Delay>
		            						  }

		            if (num > 8){
 8000756:	4b4b      	ldr	r3, [pc, #300]	@ (8000884 <main+0x35c>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b08      	cmp	r3, #8
 800075c:	d902      	bls.n	8000764 <main+0x23c>
		                     num = 0;
 800075e:	4b49      	ldr	r3, [pc, #292]	@ (8000884 <main+0x35c>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
		                        }
		            num = num + 1;
 8000764:	4b47      	ldr	r3, [pc, #284]	@ (8000884 <main+0x35c>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	3301      	adds	r3, #1
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b45      	ldr	r3, [pc, #276]	@ (8000884 <main+0x35c>)
 800076e:	701a      	strb	r2, [r3, #0]
	  }


	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 8000770:	2101      	movs	r1, #1
 8000772:	4845      	ldr	r0, [pc, #276]	@ (8000888 <main+0x360>)
 8000774:	f001 fac6 	bl	8001d04 <HAL_GPIO_ReadPin>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	f47f af0e 	bne.w	800059c <main+0x74>
//		  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
//		  			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
//		  		  }


		  		  	  	  	if (num == 1){
 8000780:	4b40      	ldr	r3, [pc, #256]	@ (8000884 <main+0x35c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	f040 808e 	bne.w	80008a6 <main+0x37e>
		                HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 800078a:	2201      	movs	r2, #1
 800078c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000790:	4839      	ldr	r0, [pc, #228]	@ (8000878 <main+0x350>)
 8000792:	f001 facf 	bl	8001d34 <HAL_GPIO_WritePin>
		                HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800079c:	4835      	ldr	r0, [pc, #212]	@ (8000874 <main+0x34c>)
 800079e:	f001 fac9 	bl	8001d34 <HAL_GPIO_WritePin>
		                HAL_Delay(300);
 80007a2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80007a6:	f000 ff7f 	bl	80016a8 <HAL_Delay>
                    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007b0:	4830      	ldr	r0, [pc, #192]	@ (8000874 <main+0x34c>)
 80007b2:	f001 fabf 	bl	8001d34 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007bc:	482f      	ldr	r0, [pc, #188]	@ (800087c <main+0x354>)
 80007be:	f001 fab9 	bl	8001d34 <HAL_GPIO_WritePin>
                    HAL_Delay(300);
 80007c2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80007c6:	f000 ff6f 	bl	80016a8 <HAL_Delay>
                    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 80007ca:	2201      	movs	r2, #1
 80007cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007d0:	482a      	ldr	r0, [pc, #168]	@ (800087c <main+0x354>)
 80007d2:	f001 faaf 	bl	8001d34 <HAL_GPIO_WritePin>
		                HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007dc:	4827      	ldr	r0, [pc, #156]	@ (800087c <main+0x354>)
 80007de:	f001 faa9 	bl	8001d34 <HAL_GPIO_WritePin>
		                HAL_Delay(300);
 80007e2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80007e6:	f000 ff5f 	bl	80016a8 <HAL_Delay>
                    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007f0:	4822      	ldr	r0, [pc, #136]	@ (800087c <main+0x354>)
 80007f2:	f001 fa9f 	bl	8001d34 <HAL_GPIO_WritePin>
		                HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007fc:	481d      	ldr	r0, [pc, #116]	@ (8000874 <main+0x34c>)
 80007fe:	f001 fa99 	bl	8001d34 <HAL_GPIO_WritePin>
		                HAL_Delay(300);
 8000802:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000806:	f000 ff4f 	bl	80016a8 <HAL_Delay>
                    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000810:	4818      	ldr	r0, [pc, #96]	@ (8000874 <main+0x34c>)
 8000812:	f001 fa8f 	bl	8001d34 <HAL_GPIO_WritePin>
		                HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800081c:	4817      	ldr	r0, [pc, #92]	@ (800087c <main+0x354>)
 800081e:	f001 fa89 	bl	8001d34 <HAL_GPIO_WritePin>
		                HAL_Delay(300);
 8000822:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000826:	f000 ff3f 	bl	80016a8 <HAL_Delay>
                    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000830:	4812      	ldr	r0, [pc, #72]	@ (800087c <main+0x354>)
 8000832:	f001 fa7f 	bl	8001d34 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800083c:	480d      	ldr	r0, [pc, #52]	@ (8000874 <main+0x34c>)
 800083e:	f001 fa79 	bl	8001d34 <HAL_GPIO_WritePin>
                    HAL_Delay(300);
 8000842:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000846:	f000 ff2f 	bl	80016a8 <HAL_Delay>
                    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000850:	4808      	ldr	r0, [pc, #32]	@ (8000874 <main+0x34c>)
 8000852:	f001 fa6f 	bl	8001d34 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800085c:	4806      	ldr	r0, [pc, #24]	@ (8000878 <main+0x350>)
 800085e:	f001 fa69 	bl	8001d34 <HAL_GPIO_WritePin>
                    HAL_Delay(300);
 8000862:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000866:	f000 ff1f 	bl	80016a8 <HAL_Delay>
                    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000870:	e00c      	b.n	800088c <main+0x364>
 8000872:	bf00      	nop
 8000874:	40021400 	.word	0x40021400
 8000878:	40021800 	.word	0x40021800
 800087c:	40021000 	.word	0x40021000
 8000880:	40020800 	.word	0x40020800
 8000884:	20000028 	.word	0x20000028
 8000888:	40020000 	.word	0x40020000
 800088c:	48de      	ldr	r0, [pc, #888]	@ (8000c08 <main+0x6e0>)
 800088e:	f001 fa51 	bl	8001d34 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000898:	48db      	ldr	r0, [pc, #876]	@ (8000c08 <main+0x6e0>)
 800089a:	f001 fa4b 	bl	8001d34 <HAL_GPIO_WritePin>
                    HAL_Delay(300);
 800089e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80008a2:	f000 ff01 	bl	80016a8 <HAL_Delay>
//                    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
//		                HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
//		                HAL_Delay(300);
		            }
		            if (num == 2){
 80008a6:	4bd9      	ldr	r3, [pc, #868]	@ (8000c0c <main+0x6e4>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	f040 8090 	bne.w	80009d0 <main+0x4a8>
		            	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008b6:	48d4      	ldr	r0, [pc, #848]	@ (8000c08 <main+0x6e0>)
 80008b8:	f001 fa3c 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008c2:	48d1      	ldr	r0, [pc, #836]	@ (8000c08 <main+0x6e0>)
 80008c4:	f001 fa36 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 80008c8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80008cc:	f000 feec 	bl	80016a8 <HAL_Delay>
		            	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008d6:	48cc      	ldr	r0, [pc, #816]	@ (8000c08 <main+0x6e0>)
 80008d8:	f001 fa2c 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008e2:	48cb      	ldr	r0, [pc, #812]	@ (8000c10 <main+0x6e8>)
 80008e4:	f001 fa26 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 80008e8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80008ec:	f000 fedc 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008f6:	48c6      	ldr	r0, [pc, #792]	@ (8000c10 <main+0x6e8>)
 80008f8:	f001 fa1c 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000902:	48c4      	ldr	r0, [pc, #784]	@ (8000c14 <main+0x6ec>)
 8000904:	f001 fa16 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_Delay(300);
 8000908:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800090c:	f000 fecc 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000910:	2201      	movs	r2, #1
 8000912:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000916:	48bf      	ldr	r0, [pc, #764]	@ (8000c14 <main+0x6ec>)
 8000918:	f001 fa0c 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000922:	48bc      	ldr	r0, [pc, #752]	@ (8000c14 <main+0x6ec>)
 8000924:	f001 fa06 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000928:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800092c:	f000 febc 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000936:	48b7      	ldr	r0, [pc, #732]	@ (8000c14 <main+0x6ec>)
 8000938:	f001 f9fc 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000942:	48b3      	ldr	r0, [pc, #716]	@ (8000c10 <main+0x6e8>)
 8000944:	f001 f9f6 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000948:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800094c:	f000 feac 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 8000950:	2201      	movs	r2, #1
 8000952:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000956:	48ae      	ldr	r0, [pc, #696]	@ (8000c10 <main+0x6e8>)
 8000958:	f001 f9ec 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000962:	48ac      	ldr	r0, [pc, #688]	@ (8000c14 <main+0x6ec>)
 8000964:	f001 f9e6 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000968:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800096c:	f000 fe9c 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8000970:	2201      	movs	r2, #1
 8000972:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000976:	48a7      	ldr	r0, [pc, #668]	@ (8000c14 <main+0x6ec>)
 8000978:	f001 f9dc 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000982:	48a3      	ldr	r0, [pc, #652]	@ (8000c10 <main+0x6e8>)
 8000984:	f001 f9d6 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_Delay(300);
 8000988:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800098c:	f000 fe8c 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000996:	489e      	ldr	r0, [pc, #632]	@ (8000c10 <main+0x6e8>)
 8000998:	f001 f9cc 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009a2:	4899      	ldr	r0, [pc, #612]	@ (8000c08 <main+0x6e0>)
 80009a4:	f001 f9c6 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_Delay(300);
 80009a8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009ac:	f000 fe7c 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009b6:	4894      	ldr	r0, [pc, #592]	@ (8000c08 <main+0x6e0>)
 80009b8:	f001 f9bc 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009c2:	4891      	ldr	r0, [pc, #580]	@ (8000c08 <main+0x6e0>)
 80009c4:	f001 f9b6 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_Delay(300);
 80009c8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009cc:	f000 fe6c 	bl	80016a8 <HAL_Delay>

		            }
		            if (num == 3){
 80009d0:	4b8e      	ldr	r3, [pc, #568]	@ (8000c0c <main+0x6e4>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b03      	cmp	r3, #3
 80009d6:	f040 8090 	bne.w	8000afa <main+0x5d2>
		            	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 80009da:	2201      	movs	r2, #1
 80009dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009e0:	488b      	ldr	r0, [pc, #556]	@ (8000c10 <main+0x6e8>)
 80009e2:	f001 f9a7 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009ec:	4886      	ldr	r0, [pc, #536]	@ (8000c08 <main+0x6e0>)
 80009ee:	f001 f9a1 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 80009f2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009f6:	f000 fe57 	bl	80016a8 <HAL_Delay>
		            	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 80009fa:	2201      	movs	r2, #1
 80009fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a00:	4881      	ldr	r0, [pc, #516]	@ (8000c08 <main+0x6e0>)
 8000a02:	f001 f997 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a0c:	487e      	ldr	r0, [pc, #504]	@ (8000c08 <main+0x6e0>)
 8000a0e:	f001 f991 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000a12:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a16:	f000 fe47 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a20:	4879      	ldr	r0, [pc, #484]	@ (8000c08 <main+0x6e0>)
 8000a22:	f001 f987 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a2c:	4878      	ldr	r0, [pc, #480]	@ (8000c10 <main+0x6e8>)
 8000a2e:	f001 f981 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000a32:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a36:	f000 fe37 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a40:	4873      	ldr	r0, [pc, #460]	@ (8000c10 <main+0x6e8>)
 8000a42:	f001 f977 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a4c:	4871      	ldr	r0, [pc, #452]	@ (8000c14 <main+0x6ec>)
 8000a4e:	f001 f971 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_Delay(300);
 8000a52:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a56:	f000 fe27 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a60:	486c      	ldr	r0, [pc, #432]	@ (8000c14 <main+0x6ec>)
 8000a62:	f001 f967 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a6c:	4869      	ldr	r0, [pc, #420]	@ (8000c14 <main+0x6ec>)
 8000a6e:	f001 f961 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000a72:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a76:	f000 fe17 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a80:	4864      	ldr	r0, [pc, #400]	@ (8000c14 <main+0x6ec>)
 8000a82:	f001 f957 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a8c:	4860      	ldr	r0, [pc, #384]	@ (8000c10 <main+0x6e8>)
 8000a8e:	f001 f951 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000a92:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a96:	f000 fe07 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aa0:	485b      	ldr	r0, [pc, #364]	@ (8000c10 <main+0x6e8>)
 8000aa2:	f001 f947 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aac:	4859      	ldr	r0, [pc, #356]	@ (8000c14 <main+0x6ec>)
 8000aae:	f001 f941 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000ab2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000ab6:	f000 fdf7 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ac0:	4854      	ldr	r0, [pc, #336]	@ (8000c14 <main+0x6ec>)
 8000ac2:	f001 f937 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000acc:	4850      	ldr	r0, [pc, #320]	@ (8000c10 <main+0x6e8>)
 8000ace:	f001 f931 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_Delay(300);
 8000ad2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000ad6:	f000 fde7 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ae0:	484b      	ldr	r0, [pc, #300]	@ (8000c10 <main+0x6e8>)
 8000ae2:	f001 f927 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aec:	4846      	ldr	r0, [pc, #280]	@ (8000c08 <main+0x6e0>)
 8000aee:	f001 f921 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_Delay(300);
 8000af2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000af6:	f000 fdd7 	bl	80016a8 <HAL_Delay>
		            }

		            if (num == 4){
 8000afa:	4b44      	ldr	r3, [pc, #272]	@ (8000c0c <main+0x6e4>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	f040 8099 	bne.w	8000c36 <main+0x70e>
		            	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b0a:	4842      	ldr	r0, [pc, #264]	@ (8000c14 <main+0x6ec>)
 8000b0c:	f001 f912 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b16:	483e      	ldr	r0, [pc, #248]	@ (8000c10 <main+0x6e8>)
 8000b18:	f001 f90c 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000b1c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000b20:	f000 fdc2 	bl	80016a8 <HAL_Delay>
		            	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b2a:	4839      	ldr	r0, [pc, #228]	@ (8000c10 <main+0x6e8>)
 8000b2c:	f001 f902 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b36:	4834      	ldr	r0, [pc, #208]	@ (8000c08 <main+0x6e0>)
 8000b38:	f001 f8fc 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000b3c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000b40:	f000 fdb2 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b4a:	482f      	ldr	r0, [pc, #188]	@ (8000c08 <main+0x6e0>)
 8000b4c:	f001 f8f2 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b56:	482c      	ldr	r0, [pc, #176]	@ (8000c08 <main+0x6e0>)
 8000b58:	f001 f8ec 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000b5c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000b60:	f000 fda2 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b6a:	4827      	ldr	r0, [pc, #156]	@ (8000c08 <main+0x6e0>)
 8000b6c:	f001 f8e2 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b76:	4826      	ldr	r0, [pc, #152]	@ (8000c10 <main+0x6e8>)
 8000b78:	f001 f8dc 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000b7c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000b80:	f000 fd92 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b8a:	4821      	ldr	r0, [pc, #132]	@ (8000c10 <main+0x6e8>)
 8000b8c:	f001 f8d2 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b96:	481f      	ldr	r0, [pc, #124]	@ (8000c14 <main+0x6ec>)
 8000b98:	f001 f8cc 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_Delay(300);
 8000b9c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000ba0:	f000 fd82 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000baa:	481a      	ldr	r0, [pc, #104]	@ (8000c14 <main+0x6ec>)
 8000bac:	f001 f8c2 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bb6:	4817      	ldr	r0, [pc, #92]	@ (8000c14 <main+0x6ec>)
 8000bb8:	f001 f8bc 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000bbc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000bc0:	f000 fd72 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bca:	4812      	ldr	r0, [pc, #72]	@ (8000c14 <main+0x6ec>)
 8000bcc:	f001 f8b2 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bd6:	480e      	ldr	r0, [pc, #56]	@ (8000c10 <main+0x6e8>)
 8000bd8:	f001 f8ac 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000bdc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000be0:	f000 fd62 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bea:	4809      	ldr	r0, [pc, #36]	@ (8000c10 <main+0x6e8>)
 8000bec:	f001 f8a2 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bf6:	4807      	ldr	r0, [pc, #28]	@ (8000c14 <main+0x6ec>)
 8000bf8:	f001 f89c 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000bfc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c00:	f000 fd52 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8000c04:	2201      	movs	r2, #1
 8000c06:	e007      	b.n	8000c18 <main+0x6f0>
 8000c08:	40021800 	.word	0x40021800
 8000c0c:	20000028 	.word	0x20000028
 8000c10:	40021400 	.word	0x40021400
 8000c14:	40021000 	.word	0x40021000
 8000c18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c1c:	48de      	ldr	r0, [pc, #888]	@ (8000f98 <main+0xa70>)
 8000c1e:	f001 f889 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c28:	48dc      	ldr	r0, [pc, #880]	@ (8000f9c <main+0xa74>)
 8000c2a:	f001 f883 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_Delay(300);
 8000c2e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c32:	f000 fd39 	bl	80016a8 <HAL_Delay>

		                      }
		            if (num == 5){
 8000c36:	4bda      	ldr	r3, [pc, #872]	@ (8000fa0 <main+0xa78>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b05      	cmp	r3, #5
 8000c3c:	f040 8090 	bne.w	8000d60 <main+0x838>
		            	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c46:	48d5      	ldr	r0, [pc, #852]	@ (8000f9c <main+0xa74>)
 8000c48:	f001 f874 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c52:	48d1      	ldr	r0, [pc, #836]	@ (8000f98 <main+0xa70>)
 8000c54:	f001 f86e 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000c58:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c5c:	f000 fd24 	bl	80016a8 <HAL_Delay>
		            	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c66:	48cc      	ldr	r0, [pc, #816]	@ (8000f98 <main+0xa70>)
 8000c68:	f001 f864 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c72:	48ca      	ldr	r0, [pc, #808]	@ (8000f9c <main+0xa74>)
 8000c74:	f001 f85e 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000c78:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c7c:	f000 fd14 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 8000c80:	2201      	movs	r2, #1
 8000c82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c86:	48c5      	ldr	r0, [pc, #788]	@ (8000f9c <main+0xa74>)
 8000c88:	f001 f854 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c92:	48c4      	ldr	r0, [pc, #784]	@ (8000fa4 <main+0xa7c>)
 8000c94:	f001 f84e 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000c98:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c9c:	f000 fd04 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ca6:	48bf      	ldr	r0, [pc, #764]	@ (8000fa4 <main+0xa7c>)
 8000ca8:	f001 f844 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cb2:	48bc      	ldr	r0, [pc, #752]	@ (8000fa4 <main+0xa7c>)
 8000cb4:	f001 f83e 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000cb8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000cbc:	f000 fcf4 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cc6:	48b7      	ldr	r0, [pc, #732]	@ (8000fa4 <main+0xa7c>)
 8000cc8:	f001 f834 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cd2:	48b2      	ldr	r0, [pc, #712]	@ (8000f9c <main+0xa74>)
 8000cd4:	f001 f82e 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000cd8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000cdc:	f000 fce4 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ce6:	48ad      	ldr	r0, [pc, #692]	@ (8000f9c <main+0xa74>)
 8000ce8:	f001 f824 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cf2:	48a9      	ldr	r0, [pc, #676]	@ (8000f98 <main+0xa70>)
 8000cf4:	f001 f81e 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_Delay(300);
 8000cf8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000cfc:	f000 fcd4 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d06:	48a4      	ldr	r0, [pc, #656]	@ (8000f98 <main+0xa70>)
 8000d08:	f001 f814 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d12:	48a1      	ldr	r0, [pc, #644]	@ (8000f98 <main+0xa70>)
 8000d14:	f001 f80e 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000d18:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000d1c:	f000 fcc4 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d26:	489c      	ldr	r0, [pc, #624]	@ (8000f98 <main+0xa70>)
 8000d28:	f001 f804 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d32:	489a      	ldr	r0, [pc, #616]	@ (8000f9c <main+0xa74>)
 8000d34:	f000 fffe 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000d38:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000d3c:	f000 fcb4 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d46:	4895      	ldr	r0, [pc, #596]	@ (8000f9c <main+0xa74>)
 8000d48:	f000 fff4 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d52:	4891      	ldr	r0, [pc, #580]	@ (8000f98 <main+0xa70>)
 8000d54:	f000 ffee 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000d58:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000d5c:	f000 fca4 	bl	80016a8 <HAL_Delay>

		                      }
		            if (num == 6){
 8000d60:	4b8f      	ldr	r3, [pc, #572]	@ (8000fa0 <main+0xa78>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b06      	cmp	r3, #6
 8000d66:	f040 8090 	bne.w	8000e8a <main+0x962>
		            	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d70:	4889      	ldr	r0, [pc, #548]	@ (8000f98 <main+0xa70>)
 8000d72:	f000 ffdf 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d7c:	4887      	ldr	r0, [pc, #540]	@ (8000f9c <main+0xa74>)
 8000d7e:	f000 ffd9 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000d82:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000d86:	f000 fc8f 	bl	80016a8 <HAL_Delay>
		            	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d90:	4882      	ldr	r0, [pc, #520]	@ (8000f9c <main+0xa74>)
 8000d92:	f000 ffcf 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d9c:	487e      	ldr	r0, [pc, #504]	@ (8000f98 <main+0xa70>)
 8000d9e:	f000 ffc9 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000da2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000da6:	f000 fc7f 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000db0:	4879      	ldr	r0, [pc, #484]	@ (8000f98 <main+0xa70>)
 8000db2:	f000 ffbf 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dbc:	4877      	ldr	r0, [pc, #476]	@ (8000f9c <main+0xa74>)
 8000dbe:	f000 ffb9 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000dc2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000dc6:	f000 fc6f 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dd0:	4872      	ldr	r0, [pc, #456]	@ (8000f9c <main+0xa74>)
 8000dd2:	f000 ffaf 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ddc:	4871      	ldr	r0, [pc, #452]	@ (8000fa4 <main+0xa7c>)
 8000dde:	f000 ffa9 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000de2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000de6:	f000 fc5f 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000df0:	486c      	ldr	r0, [pc, #432]	@ (8000fa4 <main+0xa7c>)
 8000df2:	f000 ff9f 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dfc:	4869      	ldr	r0, [pc, #420]	@ (8000fa4 <main+0xa7c>)
 8000dfe:	f000 ff99 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000e02:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000e06:	f000 fc4f 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e10:	4864      	ldr	r0, [pc, #400]	@ (8000fa4 <main+0xa7c>)
 8000e12:	f000 ff8f 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e1c:	485f      	ldr	r0, [pc, #380]	@ (8000f9c <main+0xa74>)
 8000e1e:	f000 ff89 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000e22:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000e26:	f000 fc3f 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e30:	485a      	ldr	r0, [pc, #360]	@ (8000f9c <main+0xa74>)
 8000e32:	f000 ff7f 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e3c:	4856      	ldr	r0, [pc, #344]	@ (8000f98 <main+0xa70>)
 8000e3e:	f000 ff79 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_Delay(300);
 8000e42:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000e46:	f000 fc2f 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e50:	4851      	ldr	r0, [pc, #324]	@ (8000f98 <main+0xa70>)
 8000e52:	f000 ff6f 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e5c:	484e      	ldr	r0, [pc, #312]	@ (8000f98 <main+0xa70>)
 8000e5e:	f000 ff69 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000e62:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000e66:	f000 fc1f 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e70:	4849      	ldr	r0, [pc, #292]	@ (8000f98 <main+0xa70>)
 8000e72:	f000 ff5f 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e7c:	4847      	ldr	r0, [pc, #284]	@ (8000f9c <main+0xa74>)
 8000e7e:	f000 ff59 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000e82:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000e86:	f000 fc0f 	bl	80016a8 <HAL_Delay>

						  }
		            if (num == 7){
 8000e8a:	4b45      	ldr	r3, [pc, #276]	@ (8000fa0 <main+0xa78>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b07      	cmp	r3, #7
 8000e90:	f040 8099 	bne.w	8000fc6 <main+0xa9e>
		            	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e9a:	483f      	ldr	r0, [pc, #252]	@ (8000f98 <main+0xa70>)
 8000e9c:	f000 ff4a 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ea6:	483c      	ldr	r0, [pc, #240]	@ (8000f98 <main+0xa70>)
 8000ea8:	f000 ff44 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000eac:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000eb0:	f000 fbfa 	bl	80016a8 <HAL_Delay>
		            	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eba:	4837      	ldr	r0, [pc, #220]	@ (8000f98 <main+0xa70>)
 8000ebc:	f000 ff3a 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ec6:	4835      	ldr	r0, [pc, #212]	@ (8000f9c <main+0xa74>)
 8000ec8:	f000 ff34 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000ecc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000ed0:	f000 fbea 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000eda:	4830      	ldr	r0, [pc, #192]	@ (8000f9c <main+0xa74>)
 8000edc:	f000 ff2a 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ee6:	482c      	ldr	r0, [pc, #176]	@ (8000f98 <main+0xa70>)
 8000ee8:	f000 ff24 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000eec:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000ef0:	f000 fbda 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000efa:	4827      	ldr	r0, [pc, #156]	@ (8000f98 <main+0xa70>)
 8000efc:	f000 ff1a 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f06:	4825      	ldr	r0, [pc, #148]	@ (8000f9c <main+0xa74>)
 8000f08:	f000 ff14 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000f0c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000f10:	f000 fbca 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f1a:	4820      	ldr	r0, [pc, #128]	@ (8000f9c <main+0xa74>)
 8000f1c:	f000 ff0a 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f26:	481f      	ldr	r0, [pc, #124]	@ (8000fa4 <main+0xa7c>)
 8000f28:	f000 ff04 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000f2c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000f30:	f000 fbba 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000f34:	2201      	movs	r2, #1
 8000f36:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f3a:	481a      	ldr	r0, [pc, #104]	@ (8000fa4 <main+0xa7c>)
 8000f3c:	f000 fefa 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f46:	4817      	ldr	r0, [pc, #92]	@ (8000fa4 <main+0xa7c>)
 8000f48:	f000 fef4 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000f4c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000f50:	f000 fbaa 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f5a:	4812      	ldr	r0, [pc, #72]	@ (8000fa4 <main+0xa7c>)
 8000f5c:	f000 feea 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f66:	480d      	ldr	r0, [pc, #52]	@ (8000f9c <main+0xa74>)
 8000f68:	f000 fee4 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000f6c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000f70:	f000 fb9a 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f7a:	4808      	ldr	r0, [pc, #32]	@ (8000f9c <main+0xa74>)
 8000f7c:	f000 feda 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f86:	4804      	ldr	r0, [pc, #16]	@ (8000f98 <main+0xa70>)
 8000f88:	f000 fed4 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_Delay(300);
 8000f8c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000f90:	f000 fb8a 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	e007      	b.n	8000fa8 <main+0xa80>
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40021400 	.word	0x40021400
 8000fa0:	20000028 	.word	0x20000028
 8000fa4:	40021800 	.word	0x40021800
 8000fa8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fac:	489c      	ldr	r0, [pc, #624]	@ (8001220 <main+0xcf8>)
 8000fae:	f000 fec1 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fb8:	4899      	ldr	r0, [pc, #612]	@ (8001220 <main+0xcf8>)
 8000fba:	f000 febb 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000fbe:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000fc2:	f000 fb71 	bl	80016a8 <HAL_Delay>

		            						  }
		            if (num == 8){
 8000fc6:	4b97      	ldr	r3, [pc, #604]	@ (8001224 <main+0xcfc>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b08      	cmp	r3, #8
 8000fcc:	f040 8090 	bne.w	80010f0 <main+0xbc8>
		            	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fd6:	4894      	ldr	r0, [pc, #592]	@ (8001228 <main+0xd00>)
 8000fd8:	f000 feac 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fe2:	488f      	ldr	r0, [pc, #572]	@ (8001220 <main+0xcf8>)
 8000fe4:	f000 fea6 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8000fe8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000fec:	f000 fb5c 	bl	80016a8 <HAL_Delay>
		            	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ff6:	488a      	ldr	r0, [pc, #552]	@ (8001220 <main+0xcf8>)
 8000ff8:	f000 fe9c 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001002:	4887      	ldr	r0, [pc, #540]	@ (8001220 <main+0xcf8>)
 8001004:	f000 fe96 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8001008:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800100c:	f000 fb4c 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001016:	4882      	ldr	r0, [pc, #520]	@ (8001220 <main+0xcf8>)
 8001018:	f000 fe8c 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001022:	4881      	ldr	r0, [pc, #516]	@ (8001228 <main+0xd00>)
 8001024:	f000 fe86 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8001028:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800102c:	f000 fb3c 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001036:	487c      	ldr	r0, [pc, #496]	@ (8001228 <main+0xd00>)
 8001038:	f000 fe7c 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001042:	4877      	ldr	r0, [pc, #476]	@ (8001220 <main+0xcf8>)
 8001044:	f000 fe76 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8001048:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800104c:	f000 fb2c 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001056:	4872      	ldr	r0, [pc, #456]	@ (8001220 <main+0xcf8>)
 8001058:	f000 fe6c 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001062:	4871      	ldr	r0, [pc, #452]	@ (8001228 <main+0xd00>)
 8001064:	f000 fe66 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8001068:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800106c:	f000 fb1c 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001076:	486c      	ldr	r0, [pc, #432]	@ (8001228 <main+0xd00>)
 8001078:	f000 fe5c 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001082:	486a      	ldr	r0, [pc, #424]	@ (800122c <main+0xd04>)
 8001084:	f000 fe56 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8001088:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800108c:	f000 fb0c 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001096:	4865      	ldr	r0, [pc, #404]	@ (800122c <main+0xd04>)
 8001098:	f000 fe4c 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010a2:	4862      	ldr	r0, [pc, #392]	@ (800122c <main+0xd04>)
 80010a4:	f000 fe46 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 80010a8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80010ac:	f000 fafc 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010b6:	485d      	ldr	r0, [pc, #372]	@ (800122c <main+0xd04>)
 80010b8:	f000 fe3c 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010c2:	4859      	ldr	r0, [pc, #356]	@ (8001228 <main+0xd00>)
 80010c4:	f000 fe36 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 80010c8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80010cc:	f000 faec 	bl	80016a8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010d6:	4854      	ldr	r0, [pc, #336]	@ (8001228 <main+0xd00>)
 80010d8:	f000 fe2c 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010e2:	484f      	ldr	r0, [pc, #316]	@ (8001220 <main+0xcf8>)
 80010e4:	f000 fe26 	bl	8001d34 <HAL_GPIO_WritePin>
					HAL_Delay(300);
 80010e8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80010ec:	f000 fadc 	bl	80016a8 <HAL_Delay>

		            						  }
		            if ( num > 8){
 80010f0:	4b4c      	ldr	r3, [pc, #304]	@ (8001224 <main+0xcfc>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b08      	cmp	r3, #8
 80010f6:	f67f aa51 	bls.w	800059c <main+0x74>
		            	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 80010fa:	2201      	movs	r2, #1
 80010fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001100:	484a      	ldr	r0, [pc, #296]	@ (800122c <main+0xd04>)
 8001102:	f000 fe17 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800110c:	4846      	ldr	r0, [pc, #280]	@ (8001228 <main+0xd00>)
 800110e:	f000 fe11 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8001112:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001116:	f000 fac7 	bl	80016a8 <HAL_Delay>
		            	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 800111a:	2201      	movs	r2, #1
 800111c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001120:	4841      	ldr	r0, [pc, #260]	@ (8001228 <main+0xd00>)
 8001122:	f000 fe07 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800112c:	483c      	ldr	r0, [pc, #240]	@ (8001220 <main+0xcf8>)
 800112e:	f000 fe01 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8001132:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001136:	f000 fab7 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 800113a:	2201      	movs	r2, #1
 800113c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001140:	4837      	ldr	r0, [pc, #220]	@ (8001220 <main+0xcf8>)
 8001142:	f000 fdf7 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800114c:	4834      	ldr	r0, [pc, #208]	@ (8001220 <main+0xcf8>)
 800114e:	f000 fdf1 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8001152:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001156:	f000 faa7 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001160:	482f      	ldr	r0, [pc, #188]	@ (8001220 <main+0xcf8>)
 8001162:	f000 fde7 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800116c:	482e      	ldr	r0, [pc, #184]	@ (8001228 <main+0xd00>)
 800116e:	f000 fde1 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8001172:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001176:	f000 fa97 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 800117a:	2201      	movs	r2, #1
 800117c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001180:	4829      	ldr	r0, [pc, #164]	@ (8001228 <main+0xd00>)
 8001182:	f000 fdd7 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800118c:	4824      	ldr	r0, [pc, #144]	@ (8001220 <main+0xcf8>)
 800118e:	f000 fdd1 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8001192:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001196:	f000 fa87 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 800119a:	2201      	movs	r2, #1
 800119c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011a0:	481f      	ldr	r0, [pc, #124]	@ (8001220 <main+0xcf8>)
 80011a2:	f000 fdc7 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011ac:	481e      	ldr	r0, [pc, #120]	@ (8001228 <main+0xd00>)
 80011ae:	f000 fdc1 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 80011b2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011b6:	f000 fa77 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 80011ba:	2201      	movs	r2, #1
 80011bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011c0:	4819      	ldr	r0, [pc, #100]	@ (8001228 <main+0xd00>)
 80011c2:	f000 fdb7 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011cc:	4817      	ldr	r0, [pc, #92]	@ (800122c <main+0xd04>)
 80011ce:	f000 fdb1 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 80011d2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011d6:	f000 fa67 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011e0:	4812      	ldr	r0, [pc, #72]	@ (800122c <main+0xd04>)
 80011e2:	f000 fda7 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011ec:	480f      	ldr	r0, [pc, #60]	@ (800122c <main+0xd04>)
 80011ee:	f000 fda1 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 80011f2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011f6:	f000 fa57 	bl	80016a8 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001200:	480a      	ldr	r0, [pc, #40]	@ (800122c <main+0xd04>)
 8001202:	f000 fd97 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800120c:	4806      	ldr	r0, [pc, #24]	@ (8001228 <main+0xd00>)
 800120e:	f000 fd91 	bl	8001d34 <HAL_GPIO_WritePin>
						HAL_Delay(300);
 8001212:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001216:	f000 fa47 	bl	80016a8 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 800121a:	f7ff b9bf 	b.w	800059c <main+0x74>
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000
 8001224:	20000028 	.word	0x20000028
 8001228:	40021400 	.word	0x40021400
 800122c:	40021800 	.word	0x40021800

08001230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b094      	sub	sp, #80	@ 0x50
 8001234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	2234      	movs	r2, #52	@ 0x34
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f001 fa42 	bl	80026c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001244:	f107 0308 	add.w	r3, r7, #8
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001254:	4b2b      	ldr	r3, [pc, #172]	@ (8001304 <SystemClock_Config+0xd4>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001258:	4a2a      	ldr	r2, [pc, #168]	@ (8001304 <SystemClock_Config+0xd4>)
 800125a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800125e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001260:	4b28      	ldr	r3, [pc, #160]	@ (8001304 <SystemClock_Config+0xd4>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001264:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800126c:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <SystemClock_Config+0xd8>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a25      	ldr	r2, [pc, #148]	@ (8001308 <SystemClock_Config+0xd8>)
 8001272:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b23      	ldr	r3, [pc, #140]	@ (8001308 <SystemClock_Config+0xd8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001284:	2302      	movs	r3, #2
 8001286:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001288:	2301      	movs	r3, #1
 800128a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800128c:	2310      	movs	r3, #16
 800128e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001290:	2302      	movs	r3, #2
 8001292:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001294:	2300      	movs	r3, #0
 8001296:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001298:	2308      	movs	r3, #8
 800129a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800129c:	23d8      	movs	r3, #216	@ 0xd8
 800129e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a0:	2302      	movs	r3, #2
 80012a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012a4:	2302      	movs	r3, #2
 80012a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 fda9 	bl	8001e08 <HAL_RCC_OscConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80012bc:	f000 f902 	bl	80014c4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012c0:	f000 fd52 	bl	8001d68 <HAL_PWREx_EnableOverDrive>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80012ca:	f000 f8fb 	bl	80014c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ce:	230f      	movs	r3, #15
 80012d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d2:	2302      	movs	r3, #2
 80012d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012da:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	2107      	movs	r1, #7
 80012ec:	4618      	mov	r0, r3
 80012ee:	f001 f839 	bl	8002364 <HAL_RCC_ClockConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80012f8:	f000 f8e4 	bl	80014c4 <Error_Handler>
  }
}
 80012fc:	bf00      	nop
 80012fe:	3750      	adds	r7, #80	@ 0x50
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800
 8001308:	40007000 	.word	0x40007000

0800130c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	@ 0x28
 8001310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001322:	4b4c      	ldr	r3, [pc, #304]	@ (8001454 <MX_GPIO_Init+0x148>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a4b      	ldr	r2, [pc, #300]	@ (8001454 <MX_GPIO_Init+0x148>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b49      	ldr	r3, [pc, #292]	@ (8001454 <MX_GPIO_Init+0x148>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	4b46      	ldr	r3, [pc, #280]	@ (8001454 <MX_GPIO_Init+0x148>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a45      	ldr	r2, [pc, #276]	@ (8001454 <MX_GPIO_Init+0x148>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b43      	ldr	r3, [pc, #268]	@ (8001454 <MX_GPIO_Init+0x148>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001352:	4b40      	ldr	r3, [pc, #256]	@ (8001454 <MX_GPIO_Init+0x148>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a3f      	ldr	r2, [pc, #252]	@ (8001454 <MX_GPIO_Init+0x148>)
 8001358:	f043 0320 	orr.w	r3, r3, #32
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b3d      	ldr	r3, [pc, #244]	@ (8001454 <MX_GPIO_Init+0x148>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f003 0320 	and.w	r3, r3, #32
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800136a:	4b3a      	ldr	r3, [pc, #232]	@ (8001454 <MX_GPIO_Init+0x148>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4a39      	ldr	r2, [pc, #228]	@ (8001454 <MX_GPIO_Init+0x148>)
 8001370:	f043 0310 	orr.w	r3, r3, #16
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4b37      	ldr	r3, [pc, #220]	@ (8001454 <MX_GPIO_Init+0x148>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001382:	4b34      	ldr	r3, [pc, #208]	@ (8001454 <MX_GPIO_Init+0x148>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a33      	ldr	r2, [pc, #204]	@ (8001454 <MX_GPIO_Init+0x148>)
 8001388:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b31      	ldr	r3, [pc, #196]	@ (8001454 <MX_GPIO_Init+0x148>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80013a0:	482d      	ldr	r0, [pc, #180]	@ (8001458 <MX_GPIO_Init+0x14c>)
 80013a2:	f000 fcc7 	bl	8001d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 5128 	mov.w	r1, #10752	@ 0x2a00
 80013ac:	482b      	ldr	r0, [pc, #172]	@ (800145c <MX_GPIO_Init+0x150>)
 80013ae:	f000 fcc1 	bl	8001d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9|GPIO_PIN_14, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 80013b8:	4829      	ldr	r0, [pc, #164]	@ (8001460 <MX_GPIO_Init+0x154>)
 80013ba:	f000 fcbb 	bl	8001d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	4824      	ldr	r0, [pc, #144]	@ (8001464 <MX_GPIO_Init+0x158>)
 80013d4:	f000 faea 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013d8:	2301      	movs	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013dc:	2300      	movs	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4619      	mov	r1, r3
 80013ea:	481f      	ldr	r0, [pc, #124]	@ (8001468 <MX_GPIO_Init+0x15c>)
 80013ec:	f000 fade 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013f0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80013f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	4813      	ldr	r0, [pc, #76]	@ (8001458 <MX_GPIO_Init+0x14c>)
 800140a:	f000 facf 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 800140e:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	480d      	ldr	r0, [pc, #52]	@ (800145c <MX_GPIO_Init+0x150>)
 8001428:	f000 fac0 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 800142c:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001432:	2301      	movs	r3, #1
 8001434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	4806      	ldr	r0, [pc, #24]	@ (8001460 <MX_GPIO_Init+0x154>)
 8001446:	f000 fab1 	bl	80019ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800144a:	bf00      	nop
 800144c:	3728      	adds	r7, #40	@ 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800
 8001458:	40021400 	.word	0x40021400
 800145c:	40021000 	.word	0x40021000
 8001460:	40021800 	.word	0x40021800
 8001464:	40020800 	.word	0x40020800
 8001468:	40020000 	.word	0x40020000

0800146c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001472:	463b      	mov	r3, r7
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800147e:	f000 fa1d 	bl	80018bc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001482:	2301      	movs	r3, #1
 8001484:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001486:	2300      	movs	r3, #0
 8001488:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800148e:	231f      	movs	r3, #31
 8001490:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001492:	2387      	movs	r3, #135	@ 0x87
 8001494:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001496:	2300      	movs	r3, #0
 8001498:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800149a:	2300      	movs	r3, #0
 800149c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800149e:	2301      	movs	r3, #1
 80014a0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80014a2:	2301      	movs	r3, #1
 80014a4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80014ae:	463b      	mov	r3, r7
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 fa3b 	bl	800192c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80014b6:	2004      	movs	r0, #4
 80014b8:	f000 fa18 	bl	80018ec <HAL_MPU_Enable>

}
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c8:	b672      	cpsid	i
}
 80014ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <Error_Handler+0x8>

080014d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <HAL_MspInit+0x44>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014da:	4a0e      	ldr	r2, [pc, #56]	@ (8001514 <HAL_MspInit+0x44>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <HAL_MspInit+0x44>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <HAL_MspInit+0x44>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	4a08      	ldr	r2, [pc, #32]	@ (8001514 <HAL_MspInit+0x44>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_MspInit+0x44>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800

08001518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <NMI_Handler+0x4>

08001520 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <HardFault_Handler+0x4>

08001528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <MemManage_Handler+0x4>

08001530 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <BusFault_Handler+0x4>

08001538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <UsageFault_Handler+0x4>

08001540 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800156e:	f000 f87b 	bl	8001668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <SystemInit+0x20>)
 800157e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001582:	4a05      	ldr	r2, [pc, #20]	@ (8001598 <SystemInit+0x20>)
 8001584:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001588:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800159c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015a0:	f7ff ffea 	bl	8001578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015a4:	480c      	ldr	r0, [pc, #48]	@ (80015d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015a6:	490d      	ldr	r1, [pc, #52]	@ (80015dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015a8:	4a0d      	ldr	r2, [pc, #52]	@ (80015e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ac:	e002      	b.n	80015b4 <LoopCopyDataInit>

080015ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b2:	3304      	adds	r3, #4

080015b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b8:	d3f9      	bcc.n	80015ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ba:	4a0a      	ldr	r2, [pc, #40]	@ (80015e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015bc:	4c0a      	ldr	r4, [pc, #40]	@ (80015e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c0:	e001      	b.n	80015c6 <LoopFillZerobss>

080015c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c4:	3204      	adds	r2, #4

080015c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c8:	d3fb      	bcc.n	80015c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015ca:	f001 f885 	bl	80026d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ce:	f7fe ffab 	bl	8000528 <main>
  bx  lr    
 80015d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015d4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80015d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015e0:	08002758 	.word	0x08002758
  ldr r2, =_sbss
 80015e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015e8:	20000030 	.word	0x20000030

080015ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015ec:	e7fe      	b.n	80015ec <ADC_IRQHandler>

080015ee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f2:	2003      	movs	r0, #3
 80015f4:	f000 f92e 	bl	8001854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f8:	200f      	movs	r0, #15
 80015fa:	f000 f805 	bl	8001608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015fe:	f7ff ff67 	bl	80014d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001610:	4b12      	ldr	r3, [pc, #72]	@ (800165c <HAL_InitTick+0x54>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <HAL_InitTick+0x58>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800161e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f93b 	bl	80018a2 <HAL_SYSTICK_Config>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e00e      	b.n	8001654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d80a      	bhi.n	8001652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f000 f911 	bl	800186a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001648:	4a06      	ldr	r2, [pc, #24]	@ (8001664 <HAL_InitTick+0x5c>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	e000      	b.n	8001654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000000 	.word	0x20000000
 8001660:	20000008 	.word	0x20000008
 8001664:	20000004 	.word	0x20000004

08001668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800166c:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <HAL_IncTick+0x20>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <HAL_IncTick+0x24>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4413      	add	r3, r2
 8001678:	4a04      	ldr	r2, [pc, #16]	@ (800168c <HAL_IncTick+0x24>)
 800167a:	6013      	str	r3, [r2, #0]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000008 	.word	0x20000008
 800168c:	2000002c 	.word	0x2000002c

08001690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return uwTick;
 8001694:	4b03      	ldr	r3, [pc, #12]	@ (80016a4 <HAL_GetTick+0x14>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	2000002c 	.word	0x2000002c

080016a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b0:	f7ff ffee 	bl	8001690 <HAL_GetTick>
 80016b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c0:	d005      	beq.n	80016ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016c2:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <HAL_Delay+0x44>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ce:	bf00      	nop
 80016d0:	f7ff ffde 	bl	8001690 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d8f7      	bhi.n	80016d0 <HAL_Delay+0x28>
  {
  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000008 	.word	0x20000008

080016f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001700:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <__NVIC_SetPriorityGrouping+0x40>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001718:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 800171a:	4313      	orrs	r3, r2
 800171c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171e:	4a04      	ldr	r2, [pc, #16]	@ (8001730 <__NVIC_SetPriorityGrouping+0x40>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	60d3      	str	r3, [r2, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00
 8001734:	05fa0000 	.word	0x05fa0000

08001738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173c:	4b04      	ldr	r3, [pc, #16]	@ (8001750 <__NVIC_GetPriorityGrouping+0x18>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	f003 0307 	and.w	r3, r3, #7
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	db0a      	blt.n	800177e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	490c      	ldr	r1, [pc, #48]	@ (80017a0 <__NVIC_SetPriority+0x4c>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	0112      	lsls	r2, r2, #4
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	440b      	add	r3, r1
 8001778:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800177c:	e00a      	b.n	8001794 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4908      	ldr	r1, [pc, #32]	@ (80017a4 <__NVIC_SetPriority+0x50>)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	3b04      	subs	r3, #4
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	440b      	add	r3, r1
 8001792:	761a      	strb	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000e100 	.word	0xe000e100
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	@ 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f1c3 0307 	rsb	r3, r3, #7
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	bf28      	it	cs
 80017c6:	2304      	movcs	r3, #4
 80017c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d902      	bls.n	80017d8 <NVIC_EncodePriority+0x30>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3b03      	subs	r3, #3
 80017d6:	e000      	b.n	80017da <NVIC_EncodePriority+0x32>
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	4313      	orrs	r3, r2
         );
}
 8001802:	4618      	mov	r0, r3
 8001804:	3724      	adds	r7, #36	@ 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001820:	d301      	bcc.n	8001826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001822:	2301      	movs	r3, #1
 8001824:	e00f      	b.n	8001846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001826:	4a0a      	ldr	r2, [pc, #40]	@ (8001850 <SysTick_Config+0x40>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182e:	210f      	movs	r1, #15
 8001830:	f04f 30ff 	mov.w	r0, #4294967295
 8001834:	f7ff ff8e 	bl	8001754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <SysTick_Config+0x40>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183e:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <SysTick_Config+0x40>)
 8001840:	2207      	movs	r2, #7
 8001842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	e000e010 	.word	0xe000e010

08001854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ff47 	bl	80016f0 <__NVIC_SetPriorityGrouping>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800186a:	b580      	push	{r7, lr}
 800186c:	b086      	sub	sp, #24
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800187c:	f7ff ff5c 	bl	8001738 <__NVIC_GetPriorityGrouping>
 8001880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	68b9      	ldr	r1, [r7, #8]
 8001886:	6978      	ldr	r0, [r7, #20]
 8001888:	f7ff ff8e 	bl	80017a8 <NVIC_EncodePriority>
 800188c:	4602      	mov	r2, r0
 800188e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff5d 	bl	8001754 <__NVIC_SetPriority>
}
 800189a:	bf00      	nop
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ffb0 	bl	8001810 <SysTick_Config>
 80018b0:	4603      	mov	r3, r0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80018c0:	f3bf 8f5f 	dmb	sy
}
 80018c4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80018c6:	4b07      	ldr	r3, [pc, #28]	@ (80018e4 <HAL_MPU_Disable+0x28>)
 80018c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ca:	4a06      	ldr	r2, [pc, #24]	@ (80018e4 <HAL_MPU_Disable+0x28>)
 80018cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018d0:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80018d2:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <HAL_MPU_Disable+0x2c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	605a      	str	r2, [r3, #4]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00
 80018e8:	e000ed90 	.word	0xe000ed90

080018ec <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80018f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001924 <HAL_MPU_Enable+0x38>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_MPU_Enable+0x3c>)
 8001900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001902:	4a09      	ldr	r2, [pc, #36]	@ (8001928 <HAL_MPU_Enable+0x3c>)
 8001904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001908:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800190a:	f3bf 8f4f 	dsb	sy
}
 800190e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001910:	f3bf 8f6f 	isb	sy
}
 8001914:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000ed90 	.word	0xe000ed90
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	785a      	ldrb	r2, [r3, #1]
 8001938:	4b1b      	ldr	r3, [pc, #108]	@ (80019a8 <HAL_MPU_ConfigRegion+0x7c>)
 800193a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800193c:	4b1a      	ldr	r3, [pc, #104]	@ (80019a8 <HAL_MPU_ConfigRegion+0x7c>)
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	4a19      	ldr	r2, [pc, #100]	@ (80019a8 <HAL_MPU_ConfigRegion+0x7c>)
 8001942:	f023 0301 	bic.w	r3, r3, #1
 8001946:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001948:	4a17      	ldr	r2, [pc, #92]	@ (80019a8 <HAL_MPU_ConfigRegion+0x7c>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	7b1b      	ldrb	r3, [r3, #12]
 8001954:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	7adb      	ldrb	r3, [r3, #11]
 800195a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800195c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	7a9b      	ldrb	r3, [r3, #10]
 8001962:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001964:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	7b5b      	ldrb	r3, [r3, #13]
 800196a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800196c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7b9b      	ldrb	r3, [r3, #14]
 8001972:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001974:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7bdb      	ldrb	r3, [r3, #15]
 800197a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800197c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	7a5b      	ldrb	r3, [r3, #9]
 8001982:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001984:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	7a1b      	ldrb	r3, [r3, #8]
 800198a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800198c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	7812      	ldrb	r2, [r2, #0]
 8001992:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001994:	4a04      	ldr	r2, [pc, #16]	@ (80019a8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001996:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001998:	6113      	str	r3, [r2, #16]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed90 	.word	0xe000ed90

080019ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	@ 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
 80019ca:	e175      	b.n	8001cb8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019cc:	2201      	movs	r2, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	f040 8164 	bne.w	8001cb2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d005      	beq.n	8001a02 <HAL_GPIO_Init+0x56>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d130      	bne.n	8001a64 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 0201 	and.w	r2, r3, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d017      	beq.n	8001aa0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d123      	bne.n	8001af4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	08da      	lsrs	r2, r3, #3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3208      	adds	r2, #8
 8001ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	08da      	lsrs	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3208      	adds	r2, #8
 8001aee:	69b9      	ldr	r1, [r7, #24]
 8001af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0203 	and.w	r2, r3, #3
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80be 	beq.w	8001cb2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	4b66      	ldr	r3, [pc, #408]	@ (8001cd0 <HAL_GPIO_Init+0x324>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3a:	4a65      	ldr	r2, [pc, #404]	@ (8001cd0 <HAL_GPIO_Init+0x324>)
 8001b3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b42:	4b63      	ldr	r3, [pc, #396]	@ (8001cd0 <HAL_GPIO_Init+0x324>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b4e:	4a61      	ldr	r2, [pc, #388]	@ (8001cd4 <HAL_GPIO_Init+0x328>)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	3302      	adds	r3, #2
 8001b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	220f      	movs	r2, #15
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a58      	ldr	r2, [pc, #352]	@ (8001cd8 <HAL_GPIO_Init+0x32c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d037      	beq.n	8001bea <HAL_GPIO_Init+0x23e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a57      	ldr	r2, [pc, #348]	@ (8001cdc <HAL_GPIO_Init+0x330>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d031      	beq.n	8001be6 <HAL_GPIO_Init+0x23a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a56      	ldr	r2, [pc, #344]	@ (8001ce0 <HAL_GPIO_Init+0x334>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d02b      	beq.n	8001be2 <HAL_GPIO_Init+0x236>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a55      	ldr	r2, [pc, #340]	@ (8001ce4 <HAL_GPIO_Init+0x338>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d025      	beq.n	8001bde <HAL_GPIO_Init+0x232>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a54      	ldr	r2, [pc, #336]	@ (8001ce8 <HAL_GPIO_Init+0x33c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d01f      	beq.n	8001bda <HAL_GPIO_Init+0x22e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a53      	ldr	r2, [pc, #332]	@ (8001cec <HAL_GPIO_Init+0x340>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d019      	beq.n	8001bd6 <HAL_GPIO_Init+0x22a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a52      	ldr	r2, [pc, #328]	@ (8001cf0 <HAL_GPIO_Init+0x344>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d013      	beq.n	8001bd2 <HAL_GPIO_Init+0x226>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a51      	ldr	r2, [pc, #324]	@ (8001cf4 <HAL_GPIO_Init+0x348>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d00d      	beq.n	8001bce <HAL_GPIO_Init+0x222>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a50      	ldr	r2, [pc, #320]	@ (8001cf8 <HAL_GPIO_Init+0x34c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d007      	beq.n	8001bca <HAL_GPIO_Init+0x21e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4f      	ldr	r2, [pc, #316]	@ (8001cfc <HAL_GPIO_Init+0x350>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d101      	bne.n	8001bc6 <HAL_GPIO_Init+0x21a>
 8001bc2:	2309      	movs	r3, #9
 8001bc4:	e012      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bc6:	230a      	movs	r3, #10
 8001bc8:	e010      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bca:	2308      	movs	r3, #8
 8001bcc:	e00e      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bce:	2307      	movs	r3, #7
 8001bd0:	e00c      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bd2:	2306      	movs	r3, #6
 8001bd4:	e00a      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bd6:	2305      	movs	r3, #5
 8001bd8:	e008      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bda:	2304      	movs	r3, #4
 8001bdc:	e006      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bde:	2303      	movs	r3, #3
 8001be0:	e004      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e002      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bea:	2300      	movs	r3, #0
 8001bec:	69fa      	ldr	r2, [r7, #28]
 8001bee:	f002 0203 	and.w	r2, r2, #3
 8001bf2:	0092      	lsls	r2, r2, #2
 8001bf4:	4093      	lsls	r3, r2
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bfc:	4935      	ldr	r1, [pc, #212]	@ (8001cd4 <HAL_GPIO_Init+0x328>)
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	3302      	adds	r3, #2
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d00 <HAL_GPIO_Init+0x354>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c2e:	4a34      	ldr	r2, [pc, #208]	@ (8001d00 <HAL_GPIO_Init+0x354>)
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c34:	4b32      	ldr	r3, [pc, #200]	@ (8001d00 <HAL_GPIO_Init+0x354>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c58:	4a29      	ldr	r2, [pc, #164]	@ (8001d00 <HAL_GPIO_Init+0x354>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c5e:	4b28      	ldr	r3, [pc, #160]	@ (8001d00 <HAL_GPIO_Init+0x354>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c82:	4a1f      	ldr	r2, [pc, #124]	@ (8001d00 <HAL_GPIO_Init+0x354>)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c88:	4b1d      	ldr	r3, [pc, #116]	@ (8001d00 <HAL_GPIO_Init+0x354>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cac:	4a14      	ldr	r2, [pc, #80]	@ (8001d00 <HAL_GPIO_Init+0x354>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	61fb      	str	r3, [r7, #28]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	2b0f      	cmp	r3, #15
 8001cbc:	f67f ae86 	bls.w	80019cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3724      	adds	r7, #36	@ 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40013800 	.word	0x40013800
 8001cd8:	40020000 	.word	0x40020000
 8001cdc:	40020400 	.word	0x40020400
 8001ce0:	40020800 	.word	0x40020800
 8001ce4:	40020c00 	.word	0x40020c00
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40021400 	.word	0x40021400
 8001cf0:	40021800 	.word	0x40021800
 8001cf4:	40021c00 	.word	0x40021c00
 8001cf8:	40022000 	.word	0x40022000
 8001cfc:	40022400 	.word	0x40022400
 8001d00:	40013c00 	.word	0x40013c00

08001d04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	887b      	ldrh	r3, [r7, #2]
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	e001      	b.n	8001d26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	807b      	strh	r3, [r7, #2]
 8001d40:	4613      	mov	r3, r2
 8001d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d44:	787b      	ldrb	r3, [r7, #1]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d4a:	887a      	ldrh	r2, [r7, #2]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d50:	e003      	b.n	8001d5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d52:	887b      	ldrh	r3, [r7, #2]
 8001d54:	041a      	lsls	r2, r3, #16
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	619a      	str	r2, [r3, #24]
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	4b23      	ldr	r3, [pc, #140]	@ (8001e00 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	4a22      	ldr	r2, [pc, #136]	@ (8001e00 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d7e:	4b20      	ldr	r3, [pc, #128]	@ (8001e00 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1d      	ldr	r2, [pc, #116]	@ (8001e04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d94:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d96:	f7ff fc7b 	bl	8001690 <HAL_GetTick>
 8001d9a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d9c:	e009      	b.n	8001db2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d9e:	f7ff fc77 	bl	8001690 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001dac:	d901      	bls.n	8001db2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e022      	b.n	8001df8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001db2:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dbe:	d1ee      	bne.n	8001d9e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001dc0:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0f      	ldr	r2, [pc, #60]	@ (8001e04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dcc:	f7ff fc60 	bl	8001690 <HAL_GetTick>
 8001dd0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dd2:	e009      	b.n	8001de8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dd4:	f7ff fc5c 	bl	8001690 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001de2:	d901      	bls.n	8001de8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e007      	b.n	8001df8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001de8:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001df4:	d1ee      	bne.n	8001dd4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40007000 	.word	0x40007000

08001e08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e10:	2300      	movs	r3, #0
 8001e12:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e29b      	b.n	8002356 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 8087 	beq.w	8001f3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e2c:	4b96      	ldr	r3, [pc, #600]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d00c      	beq.n	8001e52 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e38:	4b93      	ldr	r3, [pc, #588]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 030c 	and.w	r3, r3, #12
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d112      	bne.n	8001e6a <HAL_RCC_OscConfig+0x62>
 8001e44:	4b90      	ldr	r3, [pc, #576]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e50:	d10b      	bne.n	8001e6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e52:	4b8d      	ldr	r3, [pc, #564]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d06c      	beq.n	8001f38 <HAL_RCC_OscConfig+0x130>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d168      	bne.n	8001f38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e275      	b.n	8002356 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e72:	d106      	bne.n	8001e82 <HAL_RCC_OscConfig+0x7a>
 8001e74:	4b84      	ldr	r3, [pc, #528]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a83      	ldr	r2, [pc, #524]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001e7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	e02e      	b.n	8001ee0 <HAL_RCC_OscConfig+0xd8>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x9c>
 8001e8a:	4b7f      	ldr	r3, [pc, #508]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a7e      	ldr	r2, [pc, #504]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001e90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b7c      	ldr	r3, [pc, #496]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a7b      	ldr	r2, [pc, #492]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001e9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	e01d      	b.n	8001ee0 <HAL_RCC_OscConfig+0xd8>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eac:	d10c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0xc0>
 8001eae:	4b76      	ldr	r3, [pc, #472]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a75      	ldr	r2, [pc, #468]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	4b73      	ldr	r3, [pc, #460]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a72      	ldr	r2, [pc, #456]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e00b      	b.n	8001ee0 <HAL_RCC_OscConfig+0xd8>
 8001ec8:	4b6f      	ldr	r3, [pc, #444]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a6e      	ldr	r2, [pc, #440]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	4b6c      	ldr	r3, [pc, #432]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a6b      	ldr	r2, [pc, #428]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d013      	beq.n	8001f10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7ff fbd2 	bl	8001690 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef0:	f7ff fbce 	bl	8001690 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	@ 0x64
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e229      	b.n	8002356 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	4b61      	ldr	r3, [pc, #388]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0xe8>
 8001f0e:	e014      	b.n	8001f3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f10:	f7ff fbbe 	bl	8001690 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f18:	f7ff fbba 	bl	8001690 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	@ 0x64
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e215      	b.n	8002356 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2a:	4b57      	ldr	r3, [pc, #348]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x110>
 8001f36:	e000      	b.n	8001f3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d069      	beq.n	800201a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f46:	4b50      	ldr	r3, [pc, #320]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00b      	beq.n	8001f6a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f52:	4b4d      	ldr	r3, [pc, #308]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d11c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x190>
 8001f5e:	4b4a      	ldr	r3, [pc, #296]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d116      	bne.n	8001f98 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6a:	4b47      	ldr	r3, [pc, #284]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d005      	beq.n	8001f82 <HAL_RCC_OscConfig+0x17a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d001      	beq.n	8001f82 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e1e9      	b.n	8002356 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f82:	4b41      	ldr	r3, [pc, #260]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	493d      	ldr	r1, [pc, #244]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f96:	e040      	b.n	800201a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d023      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa0:	4b39      	ldr	r3, [pc, #228]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a38      	ldr	r2, [pc, #224]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7ff fb70 	bl	8001690 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb4:	f7ff fb6c 	bl	8001690 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e1c7      	b.n	8002356 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc6:	4b30      	ldr	r3, [pc, #192]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd2:	4b2d      	ldr	r3, [pc, #180]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4929      	ldr	r1, [pc, #164]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
 8001fe6:	e018      	b.n	800201a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fe8:	4b27      	ldr	r3, [pc, #156]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a26      	ldr	r2, [pc, #152]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8001fee:	f023 0301 	bic.w	r3, r3, #1
 8001ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7ff fb4c 	bl	8001690 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffc:	f7ff fb48 	bl	8001690 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e1a3      	b.n	8002356 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200e:	4b1e      	ldr	r3, [pc, #120]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d038      	beq.n	8002098 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d019      	beq.n	8002062 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800202e:	4b16      	ldr	r3, [pc, #88]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8002030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002032:	4a15      	ldr	r2, [pc, #84]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203a:	f7ff fb29 	bl	8001690 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002042:	f7ff fb25 	bl	8001690 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e180      	b.n	8002356 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002054:	4b0c      	ldr	r3, [pc, #48]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8002056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f0      	beq.n	8002042 <HAL_RCC_OscConfig+0x23a>
 8002060:	e01a      	b.n	8002098 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002062:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8002064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002066:	4a08      	ldr	r2, [pc, #32]	@ (8002088 <HAL_RCC_OscConfig+0x280>)
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206e:	f7ff fb0f 	bl	8001690 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002076:	f7ff fb0b 	bl	8001690 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d903      	bls.n	800208c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e166      	b.n	8002356 <HAL_RCC_OscConfig+0x54e>
 8002088:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208c:	4b92      	ldr	r3, [pc, #584]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 800208e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1ee      	bne.n	8002076 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80a4 	beq.w	80021ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020a6:	4b8c      	ldr	r3, [pc, #560]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10d      	bne.n	80020ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b2:	4b89      	ldr	r3, [pc, #548]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	4a88      	ldr	r2, [pc, #544]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 80020b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020be:	4b86      	ldr	r3, [pc, #536]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ca:	2301      	movs	r3, #1
 80020cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ce:	4b83      	ldr	r3, [pc, #524]	@ (80022dc <HAL_RCC_OscConfig+0x4d4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d118      	bne.n	800210c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80020da:	4b80      	ldr	r3, [pc, #512]	@ (80022dc <HAL_RCC_OscConfig+0x4d4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a7f      	ldr	r2, [pc, #508]	@ (80022dc <HAL_RCC_OscConfig+0x4d4>)
 80020e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020e6:	f7ff fad3 	bl	8001690 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ee:	f7ff facf 	bl	8001690 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b64      	cmp	r3, #100	@ 0x64
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e12a      	b.n	8002356 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002100:	4b76      	ldr	r3, [pc, #472]	@ (80022dc <HAL_RCC_OscConfig+0x4d4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d106      	bne.n	8002122 <HAL_RCC_OscConfig+0x31a>
 8002114:	4b70      	ldr	r3, [pc, #448]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 8002116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002118:	4a6f      	ldr	r2, [pc, #444]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002120:	e02d      	b.n	800217e <HAL_RCC_OscConfig+0x376>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10c      	bne.n	8002144 <HAL_RCC_OscConfig+0x33c>
 800212a:	4b6b      	ldr	r3, [pc, #428]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 800212c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800212e:	4a6a      	ldr	r2, [pc, #424]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 8002130:	f023 0301 	bic.w	r3, r3, #1
 8002134:	6713      	str	r3, [r2, #112]	@ 0x70
 8002136:	4b68      	ldr	r3, [pc, #416]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 8002138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800213a:	4a67      	ldr	r2, [pc, #412]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 800213c:	f023 0304 	bic.w	r3, r3, #4
 8002140:	6713      	str	r3, [r2, #112]	@ 0x70
 8002142:	e01c      	b.n	800217e <HAL_RCC_OscConfig+0x376>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b05      	cmp	r3, #5
 800214a:	d10c      	bne.n	8002166 <HAL_RCC_OscConfig+0x35e>
 800214c:	4b62      	ldr	r3, [pc, #392]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 800214e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002150:	4a61      	ldr	r2, [pc, #388]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	6713      	str	r3, [r2, #112]	@ 0x70
 8002158:	4b5f      	ldr	r3, [pc, #380]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 800215a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215c:	4a5e      	ldr	r2, [pc, #376]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6713      	str	r3, [r2, #112]	@ 0x70
 8002164:	e00b      	b.n	800217e <HAL_RCC_OscConfig+0x376>
 8002166:	4b5c      	ldr	r3, [pc, #368]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216a:	4a5b      	ldr	r2, [pc, #364]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	6713      	str	r3, [r2, #112]	@ 0x70
 8002172:	4b59      	ldr	r3, [pc, #356]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002176:	4a58      	ldr	r2, [pc, #352]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 8002178:	f023 0304 	bic.w	r3, r3, #4
 800217c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d015      	beq.n	80021b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002186:	f7ff fa83 	bl	8001690 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218c:	e00a      	b.n	80021a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218e:	f7ff fa7f 	bl	8001690 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800219c:	4293      	cmp	r3, r2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e0d8      	b.n	8002356 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a4:	4b4c      	ldr	r3, [pc, #304]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 80021a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0ee      	beq.n	800218e <HAL_RCC_OscConfig+0x386>
 80021b0:	e014      	b.n	80021dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b2:	f7ff fa6d 	bl	8001690 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b8:	e00a      	b.n	80021d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ba:	f7ff fa69 	bl	8001690 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e0c2      	b.n	8002356 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d0:	4b41      	ldr	r3, [pc, #260]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 80021d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1ee      	bne.n	80021ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021dc:	7dfb      	ldrb	r3, [r7, #23]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d105      	bne.n	80021ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e2:	4b3d      	ldr	r3, [pc, #244]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	4a3c      	ldr	r2, [pc, #240]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 80021e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021ec:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 80ae 	beq.w	8002354 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f8:	4b37      	ldr	r3, [pc, #220]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	2b08      	cmp	r3, #8
 8002202:	d06d      	beq.n	80022e0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d14b      	bne.n	80022a4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220c:	4b32      	ldr	r3, [pc, #200]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a31      	ldr	r2, [pc, #196]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 8002212:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7ff fa3a 	bl	8001690 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002220:	f7ff fa36 	bl	8001690 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e091      	b.n	8002356 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002232:	4b29      	ldr	r3, [pc, #164]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69da      	ldr	r2, [r3, #28]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224c:	019b      	lsls	r3, r3, #6
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	3b01      	subs	r3, #1
 8002258:	041b      	lsls	r3, r3, #16
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002260:	061b      	lsls	r3, r3, #24
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002268:	071b      	lsls	r3, r3, #28
 800226a:	491b      	ldr	r1, [pc, #108]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002270:	4b19      	ldr	r3, [pc, #100]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a18      	ldr	r2, [pc, #96]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 8002276:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800227a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7ff fa08 	bl	8001690 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002284:	f7ff fa04 	bl	8001690 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e05f      	b.n	8002356 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002296:	4b10      	ldr	r3, [pc, #64]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0x47c>
 80022a2:	e057      	b.n	8002354 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a4:	4b0c      	ldr	r3, [pc, #48]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0b      	ldr	r2, [pc, #44]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 80022aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b0:	f7ff f9ee 	bl	8001690 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b8:	f7ff f9ea 	bl	8001690 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e045      	b.n	8002356 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ca:	4b03      	ldr	r3, [pc, #12]	@ (80022d8 <HAL_RCC_OscConfig+0x4d0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x4b0>
 80022d6:	e03d      	b.n	8002354 <HAL_RCC_OscConfig+0x54c>
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80022e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002360 <HAL_RCC_OscConfig+0x558>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d030      	beq.n	8002350 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d129      	bne.n	8002350 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d122      	bne.n	8002350 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002310:	4013      	ands	r3, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002316:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002318:	4293      	cmp	r3, r2
 800231a:	d119      	bne.n	8002350 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002326:	085b      	lsrs	r3, r3, #1
 8002328:	3b01      	subs	r3, #1
 800232a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d10f      	bne.n	8002350 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d107      	bne.n	8002350 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800

08002364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0d0      	b.n	800251e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800237c:	4b6a      	ldr	r3, [pc, #424]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d910      	bls.n	80023ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b67      	ldr	r3, [pc, #412]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 020f 	bic.w	r2, r3, #15
 8002392:	4965      	ldr	r1, [pc, #404]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239a:	4b63      	ldr	r3, [pc, #396]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0b8      	b.n	800251e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d020      	beq.n	80023fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c4:	4b59      	ldr	r3, [pc, #356]	@ (800252c <HAL_RCC_ClockConfig+0x1c8>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a58      	ldr	r2, [pc, #352]	@ (800252c <HAL_RCC_ClockConfig+0x1c8>)
 80023ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023dc:	4b53      	ldr	r3, [pc, #332]	@ (800252c <HAL_RCC_ClockConfig+0x1c8>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a52      	ldr	r2, [pc, #328]	@ (800252c <HAL_RCC_ClockConfig+0x1c8>)
 80023e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e8:	4b50      	ldr	r3, [pc, #320]	@ (800252c <HAL_RCC_ClockConfig+0x1c8>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	494d      	ldr	r1, [pc, #308]	@ (800252c <HAL_RCC_ClockConfig+0x1c8>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d040      	beq.n	8002488 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240e:	4b47      	ldr	r3, [pc, #284]	@ (800252c <HAL_RCC_ClockConfig+0x1c8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d115      	bne.n	8002446 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e07f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002426:	4b41      	ldr	r3, [pc, #260]	@ (800252c <HAL_RCC_ClockConfig+0x1c8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e073      	b.n	800251e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002436:	4b3d      	ldr	r3, [pc, #244]	@ (800252c <HAL_RCC_ClockConfig+0x1c8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e06b      	b.n	800251e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002446:	4b39      	ldr	r3, [pc, #228]	@ (800252c <HAL_RCC_ClockConfig+0x1c8>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f023 0203 	bic.w	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4936      	ldr	r1, [pc, #216]	@ (800252c <HAL_RCC_ClockConfig+0x1c8>)
 8002454:	4313      	orrs	r3, r2
 8002456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002458:	f7ff f91a 	bl	8001690 <HAL_GetTick>
 800245c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245e:	e00a      	b.n	8002476 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002460:	f7ff f916 	bl	8001690 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e053      	b.n	800251e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002476:	4b2d      	ldr	r3, [pc, #180]	@ (800252c <HAL_RCC_ClockConfig+0x1c8>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 020c 	and.w	r2, r3, #12
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	429a      	cmp	r2, r3
 8002486:	d1eb      	bne.n	8002460 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002488:	4b27      	ldr	r3, [pc, #156]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d210      	bcs.n	80024b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b24      	ldr	r3, [pc, #144]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 020f 	bic.w	r2, r3, #15
 800249e:	4922      	ldr	r1, [pc, #136]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b20      	ldr	r3, [pc, #128]	@ (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e032      	b.n	800251e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c4:	4b19      	ldr	r3, [pc, #100]	@ (800252c <HAL_RCC_ClockConfig+0x1c8>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4916      	ldr	r1, [pc, #88]	@ (800252c <HAL_RCC_ClockConfig+0x1c8>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024e2:	4b12      	ldr	r3, [pc, #72]	@ (800252c <HAL_RCC_ClockConfig+0x1c8>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	490e      	ldr	r1, [pc, #56]	@ (800252c <HAL_RCC_ClockConfig+0x1c8>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024f6:	f000 f821 	bl	800253c <HAL_RCC_GetSysClockFreq>
 80024fa:	4602      	mov	r2, r0
 80024fc:	4b0b      	ldr	r3, [pc, #44]	@ (800252c <HAL_RCC_ClockConfig+0x1c8>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	490a      	ldr	r1, [pc, #40]	@ (8002530 <HAL_RCC_ClockConfig+0x1cc>)
 8002508:	5ccb      	ldrb	r3, [r1, r3]
 800250a:	fa22 f303 	lsr.w	r3, r2, r3
 800250e:	4a09      	ldr	r2, [pc, #36]	@ (8002534 <HAL_RCC_ClockConfig+0x1d0>)
 8002510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002512:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <HAL_RCC_ClockConfig+0x1d4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff f876 	bl	8001608 <HAL_InitTick>

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40023c00 	.word	0x40023c00
 800252c:	40023800 	.word	0x40023800
 8002530:	08002738 	.word	0x08002738
 8002534:	20000000 	.word	0x20000000
 8002538:	20000004 	.word	0x20000004

0800253c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800253c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002540:	b090      	sub	sp, #64	@ 0x40
 8002542:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	637b      	str	r3, [r7, #52]	@ 0x34
 8002548:	2300      	movs	r3, #0
 800254a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800254c:	2300      	movs	r3, #0
 800254e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002554:	4b59      	ldr	r3, [pc, #356]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 030c 	and.w	r3, r3, #12
 800255c:	2b08      	cmp	r3, #8
 800255e:	d00d      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x40>
 8002560:	2b08      	cmp	r3, #8
 8002562:	f200 80a1 	bhi.w	80026a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x34>
 800256a:	2b04      	cmp	r3, #4
 800256c:	d003      	beq.n	8002576 <HAL_RCC_GetSysClockFreq+0x3a>
 800256e:	e09b      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002570:	4b53      	ldr	r3, [pc, #332]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002572:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002574:	e09b      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002576:	4b53      	ldr	r3, [pc, #332]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002578:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800257a:	e098      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800257c:	4b4f      	ldr	r3, [pc, #316]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x180>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002584:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002586:	4b4d      	ldr	r3, [pc, #308]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d028      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002592:	4b4a      	ldr	r3, [pc, #296]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	099b      	lsrs	r3, r3, #6
 8002598:	2200      	movs	r2, #0
 800259a:	623b      	str	r3, [r7, #32]
 800259c:	627a      	str	r2, [r7, #36]	@ 0x24
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025a4:	2100      	movs	r1, #0
 80025a6:	4b47      	ldr	r3, [pc, #284]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80025a8:	fb03 f201 	mul.w	r2, r3, r1
 80025ac:	2300      	movs	r3, #0
 80025ae:	fb00 f303 	mul.w	r3, r0, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	4a43      	ldr	r2, [pc, #268]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80025b6:	fba0 1202 	umull	r1, r2, r0, r2
 80025ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025bc:	460a      	mov	r2, r1
 80025be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80025c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025c2:	4413      	add	r3, r2
 80025c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025c8:	2200      	movs	r2, #0
 80025ca:	61bb      	str	r3, [r7, #24]
 80025cc:	61fa      	str	r2, [r7, #28]
 80025ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80025d6:	f7fd fe2f 	bl	8000238 <__aeabi_uldivmod>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4613      	mov	r3, r2
 80025e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025e2:	e053      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e4:	4b35      	ldr	r3, [pc, #212]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x180>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	099b      	lsrs	r3, r3, #6
 80025ea:	2200      	movs	r2, #0
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	617a      	str	r2, [r7, #20]
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025f6:	f04f 0b00 	mov.w	fp, #0
 80025fa:	4652      	mov	r2, sl
 80025fc:	465b      	mov	r3, fp
 80025fe:	f04f 0000 	mov.w	r0, #0
 8002602:	f04f 0100 	mov.w	r1, #0
 8002606:	0159      	lsls	r1, r3, #5
 8002608:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800260c:	0150      	lsls	r0, r2, #5
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	ebb2 080a 	subs.w	r8, r2, sl
 8002616:	eb63 090b 	sbc.w	r9, r3, fp
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002626:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800262a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800262e:	ebb2 0408 	subs.w	r4, r2, r8
 8002632:	eb63 0509 	sbc.w	r5, r3, r9
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	00eb      	lsls	r3, r5, #3
 8002640:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002644:	00e2      	lsls	r2, r4, #3
 8002646:	4614      	mov	r4, r2
 8002648:	461d      	mov	r5, r3
 800264a:	eb14 030a 	adds.w	r3, r4, sl
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	eb45 030b 	adc.w	r3, r5, fp
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002662:	4629      	mov	r1, r5
 8002664:	028b      	lsls	r3, r1, #10
 8002666:	4621      	mov	r1, r4
 8002668:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800266c:	4621      	mov	r1, r4
 800266e:	028a      	lsls	r2, r1, #10
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002676:	2200      	movs	r2, #0
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	60fa      	str	r2, [r7, #12]
 800267c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002680:	f7fd fdda 	bl	8000238 <__aeabi_uldivmod>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4613      	mov	r3, r2
 800268a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800268c:	4b0b      	ldr	r3, [pc, #44]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x180>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	0c1b      	lsrs	r3, r3, #16
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	3301      	adds	r3, #1
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800269c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800269e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026a6:	e002      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026a8:	4b05      	ldr	r3, [pc, #20]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80026aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3740      	adds	r7, #64	@ 0x40
 80026b4:	46bd      	mov	sp, r7
 80026b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	00f42400 	.word	0x00f42400
 80026c4:	017d7840 	.word	0x017d7840

080026c8 <memset>:
 80026c8:	4402      	add	r2, r0
 80026ca:	4603      	mov	r3, r0
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d100      	bne.n	80026d2 <memset+0xa>
 80026d0:	4770      	bx	lr
 80026d2:	f803 1b01 	strb.w	r1, [r3], #1
 80026d6:	e7f9      	b.n	80026cc <memset+0x4>

080026d8 <__libc_init_array>:
 80026d8:	b570      	push	{r4, r5, r6, lr}
 80026da:	4d0d      	ldr	r5, [pc, #52]	@ (8002710 <__libc_init_array+0x38>)
 80026dc:	4c0d      	ldr	r4, [pc, #52]	@ (8002714 <__libc_init_array+0x3c>)
 80026de:	1b64      	subs	r4, r4, r5
 80026e0:	10a4      	asrs	r4, r4, #2
 80026e2:	2600      	movs	r6, #0
 80026e4:	42a6      	cmp	r6, r4
 80026e6:	d109      	bne.n	80026fc <__libc_init_array+0x24>
 80026e8:	4d0b      	ldr	r5, [pc, #44]	@ (8002718 <__libc_init_array+0x40>)
 80026ea:	4c0c      	ldr	r4, [pc, #48]	@ (800271c <__libc_init_array+0x44>)
 80026ec:	f000 f818 	bl	8002720 <_init>
 80026f0:	1b64      	subs	r4, r4, r5
 80026f2:	10a4      	asrs	r4, r4, #2
 80026f4:	2600      	movs	r6, #0
 80026f6:	42a6      	cmp	r6, r4
 80026f8:	d105      	bne.n	8002706 <__libc_init_array+0x2e>
 80026fa:	bd70      	pop	{r4, r5, r6, pc}
 80026fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002700:	4798      	blx	r3
 8002702:	3601      	adds	r6, #1
 8002704:	e7ee      	b.n	80026e4 <__libc_init_array+0xc>
 8002706:	f855 3b04 	ldr.w	r3, [r5], #4
 800270a:	4798      	blx	r3
 800270c:	3601      	adds	r6, #1
 800270e:	e7f2      	b.n	80026f6 <__libc_init_array+0x1e>
 8002710:	08002750 	.word	0x08002750
 8002714:	08002750 	.word	0x08002750
 8002718:	08002750 	.word	0x08002750
 800271c:	08002754 	.word	0x08002754

08002720 <_init>:
 8002720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002722:	bf00      	nop
 8002724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002726:	bc08      	pop	{r3}
 8002728:	469e      	mov	lr, r3
 800272a:	4770      	bx	lr

0800272c <_fini>:
 800272c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800272e:	bf00      	nop
 8002730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002732:	bc08      	pop	{r3}
 8002734:	469e      	mov	lr, r3
 8002736:	4770      	bx	lr
